<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,163 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="10.0" y="2035.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="10.0" y="2019.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>_IO_str_init_static_internal (1 samples, 0.09%)</title><rect x="10.0" y="2003.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (240 samples, 20.64%)</title><rect x="11.0" y="2035.0" width="243.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="2046.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (240 samples, 20.64%)</title><rect x="11.0" y="2019.0" width="243.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.0" y="2030.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.17%)</title><rect x="11.0" y="2003.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.0" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.17%)</title><rect x="11.0" y="1987.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/2050807863.accept (2 samples, 0.17%)</title><rect x="11.0" y="1971.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.0" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.17%)</title><rect x="11.0" y="1955.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.0" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.17%)</title><rect x="11.0" y="1939.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.0" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.17%)</title><rect x="11.0" y="1923.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.0" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (5 samples, 0.43%)</title><rect x="13.0" y="2003.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.0" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (5 samples, 0.43%)</title><rect x="13.0" y="1987.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.0" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (5 samples, 0.43%)</title><rect x="13.0" y="1971.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.0" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (5 samples, 0.43%)</title><rect x="13.0" y="1955.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.0" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (5 samples, 0.43%)</title><rect x="13.0" y="1939.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.0" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.34%)</title><rect x="14.1" y="1923.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.1" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.26%)</title><rect x="14.1" y="1907.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.1" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="14.1" y="1891.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.1" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="14.1" y="1875.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.1" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="14.1" y="1859.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$266/699474138.test (1 samples, 0.09%)</title><rect x="14.1" y="1843.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.1" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (2 samples, 0.17%)</title><rect x="15.1" y="1891.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.1" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="16.1" y="1875.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.1" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="16.1" y="1859.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.1" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="16.1" y="1843.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.1" y="1854.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="16.1" y="1827.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="19.1" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="17.1" y="1907.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.1" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="17.1" y="1891.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.1" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="17.1" y="1875.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.1" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="17.1" y="1859.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.1" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="17.1" y="1843.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.1" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.09%)</title><rect x="18.1" y="2003.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.1" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.09%)</title><rect x="18.1" y="1987.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.1" y="1998.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (187 samples, 16.08%)</title><rect x="19.1" y="2003.0" width="189.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.1" y="2014.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1219383282.accept (176 samples, 15.13%)</title><rect x="20.1" y="1987.0" width="178.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.1" y="1998.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (176 samples, 15.13%)</title><rect x="20.1" y="1971.0" width="178.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.1" y="1982.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (134 samples, 11.52%)</title><rect x="20.1" y="1955.0" width="136.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.1" y="1966.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (134 samples, 11.52%)</title><rect x="20.1" y="1939.0" width="136.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.1" y="1950.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (134 samples, 11.52%)</title><rect x="20.1" y="1923.0" width="136.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.1" y="1934.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (115 samples, 9.89%)</title><rect x="38.4" y="1907.0" width="116.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="41.4" y="1918.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (115 samples, 9.89%)</title><rect x="38.4" y="1891.0" width="116.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="41.4" y="1902.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (115 samples, 9.89%)</title><rect x="38.4" y="1875.0" width="116.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="41.4" y="1886.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (91 samples, 7.82%)</title><rect x="38.4" y="1859.0" width="92.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="41.4" y="1870.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (91 samples, 7.82%)</title><rect x="38.4" y="1843.0" width="92.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="41.4" y="1854.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (91 samples, 7.82%)</title><rect x="38.4" y="1827.0" width="92.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="41.4" y="1838.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (91 samples, 7.82%)</title><rect x="38.4" y="1811.0" width="92.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="41.4" y="1822.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (91 samples, 7.82%)</title><rect x="38.4" y="1795.0" width="92.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="41.4" y="1806.0">java/util/c..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (71 samples, 6.10%)</title><rect x="58.7" y="1779.0" width="72.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="61.7" y="1790.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Unpark (66 samples, 5.67%)</title><rect x="58.7" y="1763.0" width="67.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="61.7" y="1774.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="63.8" y="1747.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="66.8" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.17%)</title><rect x="64.8" y="1747.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="67.8" y="1758.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="66.8" y="1747.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="69.8" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (49 samples, 4.21%)</title><rect x="67.8" y="1747.0" width="49.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="70.8" y="1758.0">__pth..</text>
</g>
<g>
<title>pthread_mutex_lock (8 samples, 0.69%)</title><rect x="117.5" y="1747.0" width="8.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="120.5" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.43%)</title><rect x="125.7" y="1763.0" width="5.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="128.7" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.09%)</title><rect x="130.7" y="1859.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="133.7" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.09%)</title><rect x="130.7" y="1843.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="133.7" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.09%)</title><rect x="130.7" y="1827.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="133.7" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (23 samples, 1.98%)</title><rect x="131.8" y="1859.0" width="23.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="134.8" y="1870.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (23 samples, 1.98%)</title><rect x="131.8" y="1843.0" width="23.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="134.8" y="1854.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (23 samples, 1.98%)</title><rect x="131.8" y="1827.0" width="23.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="134.8" y="1838.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (23 samples, 1.98%)</title><rect x="131.8" y="1811.0" width="23.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="134.8" y="1822.0">j..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="155.1" y="1907.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="158.1" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (16 samples, 1.38%)</title><rect x="156.1" y="1955.0" width="16.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="159.1" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (11 samples, 0.95%)</title><rect x="161.2" y="1939.0" width="11.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="164.2" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.34%)</title><rect x="172.3" y="1955.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="175.3" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.34%)</title><rect x="172.3" y="1939.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="175.3" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.34%)</title><rect x="172.3" y="1923.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="175.3" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (22 samples, 1.89%)</title><rect x="176.4" y="1955.0" width="22.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="179.4" y="1966.0">c..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.26%)</title><rect x="176.4" y="1939.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="179.4" y="1950.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (19 samples, 1.63%)</title><rect x="179.4" y="1939.0" width="19.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="182.4" y="1950.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (13 samples, 1.12%)</title><rect x="183.5" y="1923.0" width="13.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.5" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 0.60%)</title><rect x="184.5" y="1907.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="187.5" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 0.60%)</title><rect x="184.5" y="1891.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="187.5" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.60%)</title><rect x="184.5" y="1875.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="187.5" y="1886.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="189.6" y="1859.0" width="2.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="192.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.09%)</title><rect x="191.6" y="1907.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="194.6" y="1918.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.34%)</title><rect x="192.6" y="1907.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="195.6" y="1918.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="196.7" y="1923.0" width="2.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="199.7" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.09%)</title><rect x="198.7" y="1987.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="201.7" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="198.7" y="1971.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="201.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (9 samples, 0.77%)</title><rect x="199.7" y="1987.0" width="9.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.7" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (9 samples, 0.77%)</title><rect x="199.7" y="1971.0" width="9.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="202.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (9 samples, 0.77%)</title><rect x="199.7" y="1955.0" width="9.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="202.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (9 samples, 0.77%)</title><rect x="199.7" y="1939.0" width="9.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.7" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (9 samples, 0.77%)</title><rect x="199.7" y="1923.0" width="9.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.7" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (9 samples, 0.77%)</title><rect x="199.7" y="1907.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="202.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (45 samples, 3.87%)</title><rect x="208.9" y="2003.0" width="45.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.9" y="2014.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (44 samples, 3.78%)</title><rect x="209.9" y="1987.0" width="44.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="212.9" y="1998.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (23 samples, 1.98%)</title><rect x="210.9" y="1971.0" width="23.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="213.9" y="1982.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (23 samples, 1.98%)</title><rect x="210.9" y="1955.0" width="23.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="213.9" y="1966.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (23 samples, 1.98%)</title><rect x="210.9" y="1939.0" width="23.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="213.9" y="1950.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (22 samples, 1.89%)</title><rect x="210.9" y="1923.0" width="22.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="213.9" y="1934.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (22 samples, 1.89%)</title><rect x="210.9" y="1907.0" width="22.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.9" y="1918.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 0.86%)</title><rect x="213.9" y="1891.0" width="10.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.52%)</title><rect x="218.0" y="1875.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="221.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.52%)</title><rect x="218.0" y="1859.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.52%)</title><rect x="218.0" y="1843.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.52%)</title><rect x="218.0" y="1827.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.52%)</title><rect x="218.0" y="1811.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.52%)</title><rect x="218.0" y="1795.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="221.0" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.52%)</title><rect x="218.0" y="1779.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (9 samples, 0.77%)</title><rect x="224.1" y="1891.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="227.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.09%)</title><rect x="224.1" y="1875.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (8 samples, 0.69%)</title><rect x="225.1" y="1875.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (3 samples, 0.26%)</title><rect x="225.1" y="1859.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="228.1" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.of (3 samples, 0.26%)</title><rect x="225.1" y="1843.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="228.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (5 samples, 0.43%)</title><rect x="228.1" y="1859.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.1" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (5 samples, 0.43%)</title><rect x="228.1" y="1843.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="231.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="233.2" y="1923.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="236.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="233.2" y="1907.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="233.2" y="1891.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.2" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="233.2" y="1875.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="236.2" y="1886.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="233.2" y="1859.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="236.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.77%)</title><rect x="234.2" y="1971.0" width="9.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="237.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.69%)</title><rect x="234.2" y="1955.0" width="8.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="237.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.43%)</title><rect x="234.2" y="1939.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="237.2" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.17%)</title><rect x="234.2" y="1923.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/311497529.accept (1 samples, 0.09%)</title><rect x="235.2" y="1907.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.09%)</title><rect x="235.2" y="1891.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="235.2" y="1875.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="235.2" y="1859.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.2" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="235.2" y="1843.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.2" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="235.2" y="1827.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="238.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.17%)</title><rect x="236.3" y="1923.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="239.3" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.17%)</title><rect x="236.3" y="1907.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="239.3" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.17%)</title><rect x="236.3" y="1891.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.3" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.09%)</title><rect x="236.3" y="1875.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="239.3" y="1886.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.09%)</title><rect x="236.3" y="1859.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="239.3" y="1870.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.09%)</title><rect x="236.3" y="1843.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.3" y="1854.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="237.3" y="1875.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.3" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="237.3" y="1859.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="240.3" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="237.3" y="1843.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.3" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.09%)</title><rect x="237.3" y="1827.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="240.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.09%)</title><rect x="238.3" y="1923.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="241.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.09%)</title><rect x="238.3" y="1907.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="241.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (3 samples, 0.26%)</title><rect x="239.3" y="1939.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.3" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (3 samples, 0.26%)</title><rect x="239.3" y="1923.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.3" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.26%)</title><rect x="239.3" y="1907.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.3" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.17%)</title><rect x="240.3" y="1891.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="243.3" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.17%)</title><rect x="240.3" y="1875.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="243.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="240.3" y="1859.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="243.3" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="240.3" y="1843.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="243.3" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.17%)</title><rect x="240.3" y="1827.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="243.3" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.09%)</title><rect x="240.3" y="1811.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="243.3" y="1822.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.09%)</title><rect x="240.3" y="1795.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="243.3" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="240.3" y="1779.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="243.3" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.09%)</title><rect x="240.3" y="1763.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="243.3" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="241.3" y="1811.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="244.3" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/Sink.begin (1 samples, 0.09%)</title><rect x="241.3" y="1795.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.3" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.09%)</title><rect x="242.3" y="1955.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.09%)</title><rect x="242.3" y="1939.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.17%)</title><rect x="243.4" y="1971.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="246.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.17%)</title><rect x="243.4" y="1955.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.17%)</title><rect x="243.4" y="1939.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="243.4" y="1923.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="243.4" y="1907.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="246.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="243.4" y="1891.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="246.4" y="1902.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.09%)</title><rect x="243.4" y="1875.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.4" y="1886.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.09%)</title><rect x="243.4" y="1859.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.09%)</title><rect x="244.4" y="1923.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="247.4" y="1934.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1416392224.linkToTargetMethod (1 samples, 0.09%)</title><rect x="244.4" y="1907.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.4" y="1918.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1749977909.invokeStatic_JJ_L (1 samples, 0.09%)</title><rect x="244.4" y="1891.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="247.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$$Lambda$86/613408798.get$Lambda (1 samples, 0.09%)</title><rect x="244.4" y="1875.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (8 samples, 0.69%)</title><rect x="245.4" y="1971.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="248.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (8 samples, 0.69%)</title><rect x="245.4" y="1955.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="248.4" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.17%)</title><rect x="245.4" y="1939.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="248.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/733290574.accept (2 samples, 0.17%)</title><rect x="245.4" y="1923.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="248.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.17%)</title><rect x="245.4" y="1907.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="248.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="245.4" y="1891.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="248.4" y="1902.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.09%)</title><rect x="245.4" y="1875.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="248.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$227/1834022002.apply (1 samples, 0.09%)</title><rect x="245.4" y="1859.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="248.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.09%)</title><rect x="245.4" y="1843.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="248.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="246.4" y="1891.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.09%)</title><rect x="247.4" y="1939.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="250.4" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="247.4" y="1923.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="250.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="247.4" y="1907.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="247.4" y="1891.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.4" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="247.4" y="1875.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="250.4" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="247.4" y="1859.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="250.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.17%)</title><rect x="248.4" y="1939.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.17%)</title><rect x="248.4" y="1923.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="251.4" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.17%)</title><rect x="248.4" y="1907.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="251.4" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="248.4" y="1891.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="251.4" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="249.4" y="1875.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="252.4" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="249.4" y="1859.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.4" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="249.4" y="1843.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="252.4" y="1854.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="249.4" y="1827.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="252.4" y="1838.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="249.4" y="1811.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="252.4" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="249.4" y="1795.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="252.4" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="249.4" y="1779.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.4" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="249.4" y="1763.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="252.4" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sessionHandler (1 samples, 0.09%)</title><rect x="250.5" y="1939.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="253.5" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="250.5" y="1923.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.5" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="250.5" y="1907.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="253.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.17%)</title><rect x="251.5" y="1939.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.5" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.17%)</title><rect x="251.5" y="1923.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="254.5" y="1934.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.17%)</title><rect x="251.5" y="1907.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.5" y="1918.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.17%)</title><rect x="251.5" y="1891.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="254.5" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.17%)</title><rect x="251.5" y="1875.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.09%)</title><rect x="253.5" y="1971.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="253.5" y="1955.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.5" y="1966.0"></text>
</g>
<g>
<title>java/lang/Thread.run (712 samples, 61.22%)</title><rect x="254.5" y="2035.0" width="722.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.5" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (712 samples, 61.22%)</title><rect x="254.5" y="2019.0" width="722.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="257.5" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (712 samples, 61.22%)</title><rect x="254.5" y="2003.0" width="722.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="257.5" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/544802852.run (464 samples, 39.90%)</title><rect x="258.6" y="1987.0" width="470.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.6" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (464 samples, 39.90%)</title><rect x="258.6" y="1971.0" width="470.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="261.6" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTa..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (464 samples, 39.90%)</title><rect x="258.6" y="1955.0" width="470.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="261.6" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (460 samples, 39.55%)</title><rect x="258.6" y="1939.0" width="466.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="261.6" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (146 samples, 12.55%)</title><rect x="273.8" y="1923.0" width="148.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="276.8" y="1934.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (146 samples, 12.55%)</title><rect x="273.8" y="1907.0" width="148.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="276.8" y="1918.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (146 samples, 12.55%)</title><rect x="273.8" y="1891.0" width="148.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.8" y="1902.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (146 samples, 12.55%)</title><rect x="273.8" y="1875.0" width="148.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="276.8" y="1886.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (146 samples, 12.55%)</title><rect x="273.8" y="1859.0" width="148.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.8" y="1870.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (146 samples, 12.55%)</title><rect x="273.8" y="1843.0" width="148.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.8" y="1854.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (38 samples, 3.27%)</title><rect x="273.8" y="1827.0" width="38.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.8" y="1838.0">com..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="283.9" y="1811.0" width="1.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="286.9" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.52%)</title><rect x="285.0" y="1811.0" width="6.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="288.0" y="1822.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.43%)</title><rect x="286.0" y="1795.0" width="5.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="289.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 0.34%)</title><rect x="291.0" y="1811.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.17%)</title><rect x="293.1" y="1795.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="296.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (17 samples, 1.46%)</title><rect x="295.1" y="1811.0" width="17.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 0.43%)</title><rect x="307.3" y="1795.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="310.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 0.34%)</title><rect x="307.3" y="1779.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="310.3" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.17%)</title><rect x="307.3" y="1763.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="310.3" y="1774.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.17%)</title><rect x="307.3" y="1747.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="310.3" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="307.3" y="1731.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="310.3" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="308.3" y="1715.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="311.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.17%)</title><rect x="309.3" y="1763.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="312.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.09%)</title><rect x="311.3" y="1779.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="314.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.09%)</title><rect x="311.3" y="1763.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="314.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.09%)</title><rect x="311.3" y="1747.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="314.3" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="311.3" y="1731.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="314.3" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="311.3" y="1715.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="314.3" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="311.3" y="1699.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="314.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (100 samples, 8.60%)</title><rect x="312.4" y="1827.0" width="101.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="315.4" y="1838.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.26%)</title><rect x="314.4" y="1811.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="317.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (6 samples, 0.52%)</title><rect x="317.4" y="1811.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="320.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (2 samples, 0.17%)</title><rect x="323.5" y="1811.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="326.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.34%)</title><rect x="325.5" y="1811.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="328.5" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.26%)</title><rect x="326.6" y="1795.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="329.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (10 samples, 0.86%)</title><rect x="329.6" y="1811.0" width="10.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="332.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.86%)</title><rect x="329.6" y="1795.0" width="10.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="332.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (8 samples, 0.69%)</title><rect x="331.6" y="1779.0" width="8.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="334.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (8 samples, 0.69%)</title><rect x="331.6" y="1763.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="334.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.26%)</title><rect x="336.7" y="1747.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="339.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.43%)</title><rect x="339.8" y="1811.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="342.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.34%)</title><rect x="340.8" y="1795.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="343.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (60 samples, 5.16%)</title><rect x="344.8" y="1811.0" width="60.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="347.8" y="1822.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.12%)</title><rect x="347.9" y="1795.0" width="13.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="350.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.34%)</title><rect x="347.9" y="1779.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="350.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.34%)</title><rect x="347.9" y="1763.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="350.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.34%)</title><rect x="347.9" y="1747.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="350.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (8 samples, 0.69%)</title><rect x="351.9" y="1779.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="354.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.09%)</title><rect x="360.0" y="1779.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="363.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 0.26%)</title><rect x="361.1" y="1795.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="364.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (41 samples, 3.53%)</title><rect x="364.1" y="1795.0" width="41.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="367.1" y="1806.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (41 samples, 3.53%)</title><rect x="364.1" y="1779.0" width="41.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="367.1" y="1790.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (40 samples, 3.44%)</title><rect x="365.1" y="1763.0" width="40.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="368.1" y="1774.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (21 samples, 1.81%)</title><rect x="371.2" y="1747.0" width="21.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="374.2" y="1758.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (10 samples, 0.86%)</title><rect x="375.3" y="1731.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="378.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (10 samples, 0.86%)</title><rect x="375.3" y="1715.0" width="10.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="378.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (10 samples, 0.86%)</title><rect x="375.3" y="1699.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="378.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (8 samples, 0.69%)</title><rect x="377.3" y="1683.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="380.3" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (7 samples, 0.60%)</title><rect x="378.3" y="1667.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="381.3" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.17%)</title><rect x="383.4" y="1651.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="386.4" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (2 samples, 0.17%)</title><rect x="383.4" y="1635.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="386.4" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.17%)</title><rect x="385.4" y="1731.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="388.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.34%)</title><rect x="387.4" y="1731.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="390.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.34%)</title><rect x="387.4" y="1715.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="390.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.34%)</title><rect x="387.4" y="1699.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="390.4" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.09%)</title><rect x="391.5" y="1731.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="394.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.52%)</title><rect x="392.5" y="1747.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="395.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.43%)</title><rect x="393.5" y="1731.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="396.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.43%)</title><rect x="393.5" y="1715.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="396.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.43%)</title><rect x="393.5" y="1699.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="396.5" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.43%)</title><rect x="393.5" y="1683.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="396.5" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (5 samples, 0.43%)</title><rect x="398.6" y="1747.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="401.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (5 samples, 0.43%)</title><rect x="398.6" y="1731.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="401.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (5 samples, 0.43%)</title><rect x="398.6" y="1715.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="401.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (5 samples, 0.43%)</title><rect x="398.6" y="1699.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="401.6" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 0.43%)</title><rect x="398.6" y="1683.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="401.6" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.26%)</title><rect x="399.6" y="1667.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="402.6" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor10.newInstance (2 samples, 0.17%)</title><rect x="400.6" y="1651.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="403.6" y="1662.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.09%)</title><rect x="401.6" y="1635.0" width="1.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="404.6" y="1646.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor10.newInstance (1 samples, 0.09%)</title><rect x="402.7" y="1667.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="405.7" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.17%)</title><rect x="403.7" y="1747.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="406.7" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.17%)</title><rect x="403.7" y="1731.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="406.7" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.17%)</title><rect x="403.7" y="1715.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="406.7" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (5 samples, 0.43%)</title><rect x="405.7" y="1811.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="408.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.26%)</title><rect x="410.8" y="1811.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="413.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (8 samples, 0.69%)</title><rect x="413.8" y="1827.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="416.8" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (8 samples, 0.69%)</title><rect x="413.8" y="1811.0" width="8.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="416.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (8 samples, 0.69%)</title><rect x="413.8" y="1795.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="416.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (8 samples, 0.69%)</title><rect x="413.8" y="1779.0" width="8.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="416.8" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.69%)</title><rect x="413.8" y="1763.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="416.8" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (284 samples, 24.42%)</title><rect x="421.9" y="1923.0" width="288.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="424.9" y="1934.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (69 samples, 5.93%)</title><rect x="424.0" y="1907.0" width="70.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="427.0" y="1918.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.09%)</title><rect x="424.0" y="1891.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="427.0" y="1902.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (68 samples, 5.85%)</title><rect x="425.0" y="1891.0" width="69.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="428.0" y="1902.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (68 samples, 5.85%)</title><rect x="425.0" y="1875.0" width="69.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="428.0" y="1886.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (14 samples, 1.20%)</title><rect x="429.0" y="1859.0" width="14.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="432.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (14 samples, 1.20%)</title><rect x="429.0" y="1843.0" width="14.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="432.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (14 samples, 1.20%)</title><rect x="429.0" y="1827.0" width="14.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="432.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (14 samples, 1.20%)</title><rect x="429.0" y="1811.0" width="14.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="432.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (5 samples, 0.43%)</title><rect x="438.2" y="1795.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="441.2" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (5 samples, 0.43%)</title><rect x="438.2" y="1779.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="441.2" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (50 samples, 4.30%)</title><rect x="443.2" y="1859.0" width="50.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="446.2" y="1870.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.remove (19 samples, 1.63%)</title><rect x="474.7" y="1843.0" width="19.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="477.7" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="474.7" y="1827.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="477.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="474.7" y="1811.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="477.7" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (18 samples, 1.55%)</title><rect x="475.7" y="1827.0" width="18.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="478.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.34%)</title><rect x="487.9" y="1811.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="490.9" y="1822.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.17%)</title><rect x="491.9" y="1811.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="494.9" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.77%)</title><rect x="494.0" y="1907.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="497.0" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.69%)</title><rect x="495.0" y="1891.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="498.0" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (8 samples, 0.69%)</title><rect x="495.0" y="1875.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="498.0" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (144 samples, 12.38%)</title><rect x="503.1" y="1907.0" width="146.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="506.1" y="1918.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (144 samples, 12.38%)</title><rect x="503.1" y="1891.0" width="146.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="506.1" y="1902.0">com/linecorp/decat..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="512.2" y="1875.0" width="3.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="515.2" y="1886.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="512.2" y="1859.0" width="3.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="515.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (55 samples, 4.73%)</title><rect x="515.3" y="1875.0" width="55.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="518.3" y="1886.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (41 samples, 3.53%)</title><rect x="521.4" y="1859.0" width="41.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="524.4" y="1870.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (40 samples, 3.44%)</title><rect x="522.4" y="1843.0" width="40.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="525.4" y="1854.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (19 samples, 1.63%)</title><rect x="533.5" y="1827.0" width="19.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="536.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (19 samples, 1.63%)</title><rect x="533.5" y="1811.0" width="19.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="536.5" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (19 samples, 1.63%)</title><rect x="533.5" y="1795.0" width="19.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="536.5" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.77%)</title><rect x="537.6" y="1779.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="540.6" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.17%)</title><rect x="537.6" y="1763.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="540.6" y="1774.0"></text>
</g>
<g>
<title>frame::adjust_unextended_sp() (1 samples, 0.09%)</title><rect x="537.6" y="1747.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="540.6" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="538.6" y="1747.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="541.6" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="538.6" y="1731.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="541.6" y="1742.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="538.6" y="1715.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="541.6" y="1726.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="538.6" y="1699.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="541.6" y="1710.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.60%)</title><rect x="539.6" y="1763.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="542.6" y="1774.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="540.6" y="1747.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="543.6" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.34%)</title><rect x="541.7" y="1747.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="544.7" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.17%)</title><rect x="541.7" y="1731.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="544.7" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="542.7" y="1715.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="545.7" y="1726.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="542.7" y="1699.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="545.7" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="542.7" y="1683.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="545.7" y="1694.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.09%)</title><rect x="542.7" y="1667.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="545.7" y="1678.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="543.7" y="1731.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="546.7" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="543.7" y="1715.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="546.7" y="1726.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.09%)</title><rect x="544.7" y="1731.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="547.7" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="545.7" y="1747.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="548.7" y="1758.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.09%)</title><rect x="546.7" y="1779.0" width="1.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="549.7" y="1790.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.43%)</title><rect x="547.7" y="1779.0" width="5.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="550.7" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.60%)</title><rect x="552.8" y="1827.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="555.8" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="559.9" y="1827.0" width="3.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="562.9" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.69%)</title><rect x="563.0" y="1859.0" width="8.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="566.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="571.1" y="1875.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="574.1" y="1886.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (9 samples, 0.77%)</title><rect x="572.1" y="1875.0" width="9.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="575.1" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.09%)</title><rect x="572.1" y="1859.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="575.1" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.09%)</title><rect x="572.1" y="1843.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="575.1" y="1854.0"></text>
</g>
<g>
<title>java/lang/Long.toString (8 samples, 0.69%)</title><rect x="573.1" y="1859.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="576.1" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.69%)</title><rect x="573.1" y="1843.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="576.1" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.09%)</title><rect x="580.2" y="1827.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="583.2" y="1838.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (67 samples, 5.76%)</title><rect x="581.2" y="1875.0" width="68.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="584.2" y="1886.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (63 samples, 5.42%)</title><rect x="585.3" y="1859.0" width="63.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="588.3" y="1870.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.60%)</title><rect x="585.3" y="1843.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="588.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.60%)</title><rect x="585.3" y="1827.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="588.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.60%)</title><rect x="585.3" y="1811.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="588.3" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.60%)</title><rect x="585.3" y="1795.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="588.3" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.09%)</title><rect x="591.4" y="1779.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="594.4" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="591.4" y="1763.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="594.4" y="1774.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (56 samples, 4.82%)</title><rect x="592.4" y="1843.0" width="56.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="595.4" y="1854.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (51 samples, 4.39%)</title><rect x="597.5" y="1827.0" width="51.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="600.5" y="1838.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (23 samples, 1.98%)</title><rect x="625.9" y="1811.0" width="23.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="628.9" y="1822.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.17%)</title><rect x="644.1" y="1795.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="647.1" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.17%)</title><rect x="646.2" y="1795.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="649.2" y="1806.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="648.2" y="1795.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="651.2" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (39 samples, 3.35%)</title><rect x="649.2" y="1907.0" width="39.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="652.2" y="1918.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (39 samples, 3.35%)</title><rect x="649.2" y="1891.0" width="39.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="652.2" y="1902.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1860270935.process (12 samples, 1.03%)</title><rect x="653.3" y="1875.0" width="12.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="656.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (12 samples, 1.03%)</title><rect x="653.3" y="1859.0" width="12.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="656.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (10 samples, 0.86%)</title><rect x="654.3" y="1843.0" width="10.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="657.3" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (4 samples, 0.34%)</title><rect x="654.3" y="1827.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="657.3" y="1838.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="656.3" y="1811.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="659.3" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="657.3" y="1811.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="660.3" y="1822.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="657.3" y="1795.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="660.3" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.52%)</title><rect x="658.3" y="1827.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="661.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="663.4" y="1811.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="666.4" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="663.4" y="1795.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="666.4" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.09%)</title><rect x="664.4" y="1843.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="667.4" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="664.4" y="1827.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="667.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="664.4" y="1811.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="667.4" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="664.4" y="1795.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="667.4" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.17%)</title><rect x="665.4" y="1875.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="668.4" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.17%)</title><rect x="665.4" y="1859.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="668.4" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (6 samples, 0.52%)</title><rect x="667.5" y="1875.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="670.5" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (6 samples, 0.52%)</title><rect x="667.5" y="1859.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="670.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/1159455297.get$Lambda (6 samples, 0.52%)</title><rect x="667.5" y="1843.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="670.5" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="668.5" y="1827.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="671.5" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="668.5" y="1811.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="671.5" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="668.5" y="1795.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="671.5" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="668.5" y="1779.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="671.5" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="668.5" y="1763.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="671.5" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/1159455297.&lt;init&gt; (4 samples, 0.34%)</title><rect x="669.5" y="1827.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="672.5" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.60%)</title><rect x="673.6" y="1875.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="676.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.52%)</title><rect x="674.6" y="1859.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="677.6" y="1870.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.34%)</title><rect x="674.6" y="1843.0" width="4.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="677.6" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.17%)</title><rect x="678.6" y="1843.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="681.6" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (8 samples, 0.69%)</title><rect x="680.7" y="1875.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="683.7" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.26%)</title><rect x="685.7" y="1859.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="688.7" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="687.8" y="1843.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="690.8" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="687.8" y="1827.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="690.8" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="687.8" y="1811.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="690.8" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.09%)</title><rect x="688.8" y="1907.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="691.8" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="688.8" y="1891.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="691.8" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="688.8" y="1875.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="691.8" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="688.8" y="1859.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="691.8" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="688.8" y="1843.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="691.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1811835011.linkToTargetMethod (1 samples, 0.09%)</title><rect x="689.8" y="1907.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="692.8" y="1918.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/110771485.invokeStatic_L3_L (1 samples, 0.09%)</title><rect x="689.8" y="1891.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="692.8" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/840445219.get$Lambda (1 samples, 0.09%)</title><rect x="689.8" y="1875.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="692.8" y="1886.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="689.8" y="1859.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="692.8" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 1.63%)</title><rect x="690.8" y="1907.0" width="19.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="693.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (19 samples, 1.63%)</title><rect x="690.8" y="1891.0" width="19.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="693.8" y="1902.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.43%)</title><rect x="696.9" y="1875.0" width="5.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="699.9" y="1886.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.34%)</title><rect x="697.9" y="1859.0" width="4.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="700.9" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.69%)</title><rect x="702.0" y="1875.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="705.0" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/840445219.accept (8 samples, 0.69%)</title><rect x="702.0" y="1859.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="705.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (8 samples, 0.69%)</title><rect x="702.0" y="1843.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="705.0" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (8 samples, 0.69%)</title><rect x="702.0" y="1827.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="705.0" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (8 samples, 0.69%)</title><rect x="702.0" y="1811.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="705.0" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.create (8 samples, 0.69%)</title><rect x="702.0" y="1795.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="705.0" y="1806.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.43%)</title><rect x="705.0" y="1779.0" width="5.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="708.0" y="1790.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.43%)</title><rect x="705.0" y="1763.0" width="5.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="708.0" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 0.77%)</title><rect x="710.1" y="1923.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="713.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 0.77%)</title><rect x="710.1" y="1907.0" width="9.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="713.1" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (3 samples, 0.26%)</title><rect x="710.1" y="1891.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="713.1" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.52%)</title><rect x="713.1" y="1891.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="716.1" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/840445219.accept (6 samples, 0.52%)</title><rect x="713.1" y="1875.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="716.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (6 samples, 0.52%)</title><rect x="713.1" y="1859.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="716.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (6 samples, 0.52%)</title><rect x="713.1" y="1843.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="716.1" y="1854.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (6 samples, 0.52%)</title><rect x="713.1" y="1827.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="716.1" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.create (6 samples, 0.52%)</title><rect x="713.1" y="1811.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="716.1" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.52%)</title><rect x="719.2" y="1923.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="722.2" y="1934.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.52%)</title><rect x="719.2" y="1907.0" width="6.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="722.2" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 0.34%)</title><rect x="725.3" y="1939.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="728.3" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="726.3" y="1923.0" width="3.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="729.3" y="1934.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="726.3" y="1907.0" width="3.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="729.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (244 samples, 20.98%)</title><rect x="729.4" y="1987.0" width="247.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="732.4" y="1998.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (242 samples, 20.81%)</title><rect x="731.4" y="1971.0" width="245.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="734.4" y="1982.0">java/util/concurrent/LinkedBlocki..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (217 samples, 18.66%)</title><rect x="731.4" y="1955.0" width="220.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="734.4" y="1966.0">java/util/concurrent/locks/Ab..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (17 samples, 1.46%)</title><rect x="741.5" y="1939.0" width="17.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="744.5" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (13 samples, 1.12%)</title><rect x="758.8" y="1939.0" width="13.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="761.8" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 1.12%)</title><rect x="758.8" y="1923.0" width="13.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="761.8" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 1.12%)</title><rect x="758.8" y="1907.0" width="13.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="761.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 1.12%)</title><rect x="758.8" y="1891.0" width="13.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="761.8" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (6 samples, 0.52%)</title><rect x="772.0" y="1939.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="775.0" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (6 samples, 0.52%)</title><rect x="772.0" y="1923.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="775.0" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (171 samples, 14.70%)</title><rect x="778.1" y="1939.0" width="173.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="781.1" y="1950.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (171 samples, 14.70%)</title><rect x="778.1" y="1923.0" width="173.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="781.1" y="1934.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.26%)</title><rect x="782.1" y="1907.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="785.1" y="1918.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (4 samples, 0.34%)</title><rect x="785.2" y="1907.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="788.2" y="1918.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.26%)</title><rect x="789.2" y="1907.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="792.2" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (156 samples, 13.41%)</title><rect x="792.3" y="1907.0" width="158.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="795.3" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="794.3" y="1891.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="797.3" y="1902.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="795.3" y="1891.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="798.3" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (28 samples, 2.41%)</title><rect x="796.3" y="1891.0" width="28.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="799.3" y="1902.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (10 samples, 0.86%)</title><rect x="808.5" y="1875.0" width="10.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="811.5" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (7 samples, 0.60%)</title><rect x="810.5" y="1859.0" width="7.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="813.5" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.26%)</title><rect x="814.6" y="1843.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="817.6" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="817.6" y="1859.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="820.6" y="1870.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.17%)</title><rect x="818.7" y="1875.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="821.7" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.34%)</title><rect x="820.7" y="1875.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="823.7" y="1886.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="824.7" y="1891.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="827.7" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="825.8" y="1891.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="828.8" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="826.8" y="1891.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="829.8" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (14 samples, 1.20%)</title><rect x="827.8" y="1891.0" width="14.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="830.8" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (34 samples, 2.92%)</title><rect x="842.0" y="1891.0" width="34.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="845.0" y="1902.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (50 samples, 4.30%)</title><rect x="876.5" y="1891.0" width="50.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="879.5" y="1902.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (8 samples, 0.69%)</title><rect x="927.2" y="1891.0" width="8.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="930.2" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="935.3" y="1891.0" width="1.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="938.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (5 samples, 0.43%)</title><rect x="936.3" y="1891.0" width="5.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="939.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="941.4" y="1891.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="944.4" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.52%)</title><rect x="942.4" y="1891.0" width="6.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="945.4" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="948.5" y="1891.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="951.5" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="949.5" y="1891.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="952.5" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="950.6" y="1907.0" width="1.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="953.6" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.26%)</title><rect x="951.6" y="1955.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="954.6" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.09%)</title><rect x="954.6" y="1955.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="957.6" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.09%)</title><rect x="954.6" y="1939.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="957.6" y="1950.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="954.6" y="1923.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="957.6" y="1934.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="954.6" y="1907.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="957.6" y="1918.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="954.6" y="1891.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="957.6" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (21 samples, 1.81%)</title><rect x="955.6" y="1955.0" width="21.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="958.6" y="1966.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (21 samples, 1.81%)</title><rect x="955.6" y="1939.0" width="21.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="958.6" y="1950.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (21 samples, 1.81%)</title><rect x="955.6" y="1923.0" width="21.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="958.6" y="1934.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (21 samples, 1.81%)</title><rect x="955.6" y="1907.0" width="21.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="958.6" y="1918.0">j..</text>
</g>
<g>
<title>start_thread (210 samples, 18.06%)</title><rect x="976.9" y="2035.0" width="213.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="979.9" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (210 samples, 18.06%)</title><rect x="976.9" y="2019.0" width="213.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="979.9" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 1.72%)</title><rect x="976.9" y="2003.0" width="20.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="979.9" y="2014.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (8 samples, 0.69%)</title><rect x="976.9" y="1987.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="979.9" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 0.69%)</title><rect x="976.9" y="1971.0" width="8.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="979.9" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.17%)</title><rect x="976.9" y="1955.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="979.9" y="1966.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.52%)</title><rect x="979.0" y="1955.0" width="6.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="982.0" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 1.03%)</title><rect x="985.0" y="1987.0" width="12.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="988.0" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.17%)</title><rect x="985.0" y="1971.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="988.0" y="1982.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.09%)</title><rect x="985.0" y="1955.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="988.0" y="1966.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="985.0" y="1939.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="988.0" y="1950.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.09%)</title><rect x="986.1" y="1955.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="989.1" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.43%)</title><rect x="987.1" y="1971.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="990.1" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.17%)</title><rect x="988.1" y="1955.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="991.1" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="988.1" y="1939.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="991.1" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="988.1" y="1923.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="991.1" y="1934.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="988.1" y="1907.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="991.1" y="1918.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="989.1" y="1939.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="992.1" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.17%)</title><rect x="990.1" y="1955.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="993.1" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.17%)</title><rect x="990.1" y="1939.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="993.1" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.43%)</title><rect x="992.1" y="1971.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="995.1" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.43%)</title><rect x="992.1" y="1955.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="995.1" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.43%)</title><rect x="992.1" y="1939.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="995.1" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.43%)</title><rect x="992.1" y="1923.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="995.1" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.43%)</title><rect x="992.1" y="1907.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="995.1" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.43%)</title><rect x="992.1" y="1891.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="995.1" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.34%)</title><rect x="993.2" y="1875.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="996.2" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (3 samples, 0.26%)</title><rect x="993.2" y="1859.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="996.2" y="1870.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.09%)</title><rect x="996.2" y="1859.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="999.2" y="1870.0"></text>
</g>
<g>
<title>JavaThread::run() (189 samples, 16.25%)</title><rect x="997.2" y="2003.0" width="191.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1000.2" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (189 samples, 16.25%)</title><rect x="997.2" y="1987.0" width="191.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1000.2" y="1998.0">JavaThread::thread_main_i..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (189 samples, 16.25%)</title><rect x="997.2" y="1971.0" width="191.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1000.2" y="1982.0">CompileBroker::compiler_t..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (189 samples, 16.25%)</title><rect x="997.2" y="1955.0" width="191.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1000.2" y="1966.0">CompileBroker::invoke_com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (187 samples, 16.08%)</title><rect x="997.2" y="1939.0" width="189.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1000.2" y="1950.0">C2Compiler::compile_metho..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (187 samples, 16.08%)</title><rect x="997.2" y="1923.0" width="189.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1000.2" y="1934.0">Compile::Compile(ciEnv*, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (74 samples, 6.36%)</title><rect x="997.2" y="1907.0" width="75.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1000.2" y="1918.0">Compile:..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.17%)</title><rect x="997.2" y="1891.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1000.2" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="997.2" y="1875.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1000.2" y="1886.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="997.2" y="1859.0" width="1.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1000.2" y="1870.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.09%)</title><rect x="998.2" y="1875.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1001.2" y="1886.0"></text>
</g>
<g>
<title>Node::size(PhaseRegAlloc*) const (1 samples, 0.09%)</title><rect x="998.2" y="1859.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1001.2" y="1870.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.34%)</title><rect x="999.3" y="1891.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1002.3" y="1902.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (4 samples, 0.34%)</title><rect x="999.3" y="1875.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1002.3" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (3 samples, 0.26%)</title><rect x="1000.3" y="1859.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1003.3" y="1870.0"></text>
</g>
<g>
<title>Matcher::match() (10 samples, 0.86%)</title><rect x="1003.3" y="1891.0" width="10.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1006.3" y="1902.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (10 samples, 0.86%)</title><rect x="1003.3" y="1875.0" width="10.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1006.3" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (7 samples, 0.60%)</title><rect x="1004.3" y="1859.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1007.3" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1011.4" y="1859.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1014.4" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1011.4" y="1843.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1014.4" y="1854.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1011.4" y="1827.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1014.4" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1011.4" y="1811.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1014.4" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1011.4" y="1795.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1014.4" y="1806.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_instance_klass() const (1 samples, 0.09%)</title><rect x="1011.4" y="1779.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1014.4" y="1790.0"></text>
</g>
<g>
<title>MemBarNode::match(ProjNode const*, Matcher const*) (1 samples, 0.09%)</title><rect x="1012.4" y="1859.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1015.4" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.09%)</title><rect x="1013.5" y="1891.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1016.5" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.09%)</title><rect x="1013.5" y="1875.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1016.5" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.17%)</title><rect x="1014.5" y="1891.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1017.5" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.09%)</title><rect x="1014.5" y="1875.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1017.5" y="1886.0"></text>
</g>
<g>
<title>Block::has_uncommon_code() const (1 samples, 0.09%)</title><rect x="1014.5" y="1859.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1017.5" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.09%)</title><rect x="1015.5" y="1875.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1018.5" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1015.5" y="1859.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1018.5" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.09%)</title><rect x="1015.5" y="1843.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1018.5" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (54 samples, 4.64%)</title><rect x="1016.5" y="1891.0" width="54.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1019.5" y="1902.0">Phase..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1017.5" y="1875.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1020.5" y="1886.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.09%)</title><rect x="1018.5" y="1875.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1021.5" y="1886.0"></text>
</g>
<g>
<title>Node::rematerialize() const (3 samples, 0.26%)</title><rect x="1019.5" y="1875.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1022.5" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.17%)</title><rect x="1022.6" y="1875.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1025.6" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.43%)</title><rect x="1024.6" y="1875.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1027.6" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.26%)</title><rect x="1024.6" y="1859.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1027.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="1027.7" y="1859.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1030.7" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1027.7" y="1843.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1030.7" y="1854.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.09%)</title><rect x="1028.7" y="1859.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1031.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.26%)</title><rect x="1029.7" y="1875.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1032.7" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1029.7" y="1859.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1032.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.17%)</title><rect x="1030.7" y="1859.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1033.7" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1030.7" y="1843.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1033.7" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.52%)</title><rect x="1032.7" y="1875.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1035.7" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 0.86%)</title><rect x="1038.8" y="1875.0" width="10.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1041.8" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1040.9" y="1859.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1043.9" y="1870.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.09%)</title><rect x="1041.9" y="1859.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1044.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 0.52%)</title><rect x="1042.9" y="1859.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1045.9" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.34%)</title><rect x="1044.9" y="1843.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1047.9" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.17%)</title><rect x="1049.0" y="1875.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1052.0" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.43%)</title><rect x="1051.0" y="1875.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1054.0" y="1886.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.09%)</title><rect x="1053.0" y="1859.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1056.0" y="1870.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.17%)</title><rect x="1054.0" y="1859.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1057.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.43%)</title><rect x="1056.1" y="1875.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1059.1" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.17%)</title><rect x="1059.1" y="1859.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1062.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.09%)</title><rect x="1061.1" y="1875.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1064.1" y="1886.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.17%)</title><rect x="1062.2" y="1875.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1065.2" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1062.2" y="1859.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1065.2" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1063.2" y="1859.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1066.2" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.09%)</title><rect x="1063.2" y="1843.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1066.2" y="1854.0"></text>
</g>
<g>
<title>LRG::compute_degree(LRG&amp;) const (1 samples, 0.09%)</title><rect x="1063.2" y="1827.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1066.2" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.09%)</title><rect x="1064.2" y="1875.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1067.2" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1064.2" y="1859.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1067.2" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.52%)</title><rect x="1065.2" y="1875.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1068.2" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.26%)</title><rect x="1068.2" y="1859.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1071.2" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.09%)</title><rect x="1070.3" y="1843.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1073.3" y="1854.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.09%)</title><rect x="1070.3" y="1827.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1073.3" y="1838.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.09%)</title><rect x="1071.3" y="1891.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1074.3" y="1902.0"></text>
</g>
<g>
<title>Compile::Optimize() (103 samples, 8.86%)</title><rect x="1072.3" y="1907.0" width="104.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1075.3" y="1918.0">Compile::Opt..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.09%)</title><rect x="1072.3" y="1891.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1075.3" y="1902.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.09%)</title><rect x="1072.3" y="1875.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1075.3" y="1886.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (3 samples, 0.26%)</title><rect x="1073.3" y="1891.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1076.3" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.09%)</title><rect x="1075.3" y="1875.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1078.3" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.17%)</title><rect x="1076.4" y="1891.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1079.4" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.17%)</title><rect x="1076.4" y="1875.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1079.4" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1076.4" y="1859.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1079.4" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1076.4" y="1843.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1079.4" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1827.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1079.4" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1811.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1079.4" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1795.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.4" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1779.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1079.4" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1763.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1079.4" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1747.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1079.4" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1731.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1079.4" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1715.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.4" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1699.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1079.4" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1683.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.4" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1667.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1079.4" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1651.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1079.4" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1635.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1079.4" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1619.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1079.4" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1603.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1079.4" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1587.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1079.4" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1571.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1079.4" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1555.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1079.4" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1539.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1079.4" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1523.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1079.4" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1507.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1079.4" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1491.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1079.4" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1475.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1079.4" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1459.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1079.4" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1443.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1079.4" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1427.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.4" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1411.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.4" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1395.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1079.4" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1379.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1079.4" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1363.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.4" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1347.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1079.4" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1331.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1079.4" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1315.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1079.4" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1299.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1079.4" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1283.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1079.4" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1267.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1079.4" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1251.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1079.4" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1235.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1079.4" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1219.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1079.4" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1203.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1079.4" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1187.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1079.4" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1171.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1079.4" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1155.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1079.4" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1139.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1079.4" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1123.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1079.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1107.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1079.4" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1091.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1079.4" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1075.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1059.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1079.4" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1043.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1027.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1079.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="1011.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1079.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="995.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1079.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="979.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1079.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="963.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.4" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="947.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1079.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="931.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1079.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="915.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1079.4" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="899.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1079.4" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="883.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1079.4" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="867.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1079.4" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="851.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1079.4" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="835.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1079.4" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="819.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1079.4" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.4" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="787.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1079.4" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="771.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.4" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="755.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1079.4" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="739.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1079.4" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="723.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1079.4" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="707.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1079.4" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="691.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1079.4" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="675.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1079.4" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="659.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.4" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="643.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1079.4" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="627.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1079.4" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="611.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1079.4" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="595.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1079.4" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="579.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1079.4" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="563.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1079.4" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="547.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1079.4" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="531.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1079.4" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="515.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1079.4" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="499.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1079.4" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="483.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1079.4" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="467.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1079.4" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="451.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1079.4" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="435.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1079.4" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="419.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1079.4" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="403.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1079.4" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="387.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1079.4" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="371.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1079.4" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="355.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1079.4" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="339.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1079.4" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="323.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1079.4" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="307.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1079.4" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="291.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.4" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="275.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1079.4" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="259.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1079.4" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="243.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1079.4" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="227.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1079.4" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="211.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1079.4" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="195.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1079.4" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="179.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1079.4" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="163.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1079.4" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="147.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1079.4" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="131.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1079.4" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="115.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1079.4" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="99.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1079.4" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="83.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1079.4" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1076.4" y="67.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1079.4" y="78.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.09%)</title><rect x="1076.4" y="51.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1079.4" y="62.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.09%)</title><rect x="1076.4" y="35.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1079.4" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1077.4" y="1827.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.4" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1077.4" y="1811.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.4" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1077.4" y="1795.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1080.4" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1077.4" y="1779.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1080.4" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1077.4" y="1763.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1080.4" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1077.4" y="1747.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1080.4" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1077.4" y="1731.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.4" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1077.4" y="1715.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1080.4" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1077.4" y="1699.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.4" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1077.4" y="1683.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1080.4" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1077.4" y="1667.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1080.4" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1077.4" y="1651.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1080.4" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1077.4" y="1635.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1080.4" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1077.4" y="1619.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1080.4" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1077.4" y="1603.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.4" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1077.4" y="1587.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1080.4" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1077.4" y="1571.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1080.4" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1077.4" y="1555.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.4" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1077.4" y="1539.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.4" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1077.4" y="1523.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1080.4" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1077.4" y="1507.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1080.4" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1077.4" y="1491.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1080.4" y="1502.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1077.4" y="1475.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1080.4" y="1486.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1078.4" y="1891.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1081.4" y="1902.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1078.4" y="1875.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1081.4" y="1886.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1078.4" y="1859.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1081.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (81 samples, 6.96%)</title><rect x="1079.4" y="1891.0" width="82.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1082.4" y="1902.0">PhaseIdea..</text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1079.4" y="1875.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1082.4" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1080.4" y="1875.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1083.4" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1080.4" y="1859.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1083.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.09%)</title><rect x="1080.4" y="1843.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1083.4" y="1854.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1080.4" y="1827.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1083.4" y="1838.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.09%)</title><rect x="1081.4" y="1875.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1084.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.09%)</title><rect x="1082.5" y="1875.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1085.5" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.09%)</title><rect x="1082.5" y="1859.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1085.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 0.77%)</title><rect x="1083.5" y="1875.0" width="9.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1086.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (3 samples, 0.26%)</title><rect x="1089.6" y="1859.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1092.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.17%)</title><rect x="1090.6" y="1843.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (57 samples, 4.90%)</title><rect x="1092.6" y="1875.0" width="57.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1095.6" y="1886.0">PhaseI..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1095.6" y="1859.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (53 samples, 4.56%)</title><rect x="1096.7" y="1859.0" width="53.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1099.7" y="1870.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.17%)</title><rect x="1098.7" y="1843.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (48 samples, 4.13%)</title><rect x="1100.7" y="1843.0" width="48.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1103.7" y="1854.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1141.3" y="1827.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1141.3" y="1811.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.3" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 0.52%)</title><rect x="1142.3" y="1827.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1148.4" y="1827.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.4" y="1838.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1149.4" y="1843.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (5 samples, 0.43%)</title><rect x="1150.4" y="1875.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.09%)</title><rect x="1154.5" y="1859.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.26%)</title><rect x="1155.5" y="1875.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.17%)</title><rect x="1156.5" y="1859.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.09%)</title><rect x="1156.5" y="1843.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1156.5" y="1827.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.09%)</title><rect x="1157.5" y="1843.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.5" y="1854.0"></text>
</g>
<g>
<title>NodeHash::hash_find(Node const*) (1 samples, 0.09%)</title><rect x="1157.5" y="1827.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.26%)</title><rect x="1158.5" y="1875.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.5" y="1886.0"></text>
</g>
<g>
<title>Node::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1159.6" y="1859.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1160.6" y="1859.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.6" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1160.6" y="1843.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1160.6" y="1827.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.09%)</title><rect x="1161.6" y="1891.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.6" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1161.6" y="1875.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (10 samples, 0.86%)</title><rect x="1162.6" y="1891.0" width="10.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.6" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 0.77%)</title><rect x="1163.6" y="1875.0" width="9.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.6" y="1886.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1164.6" y="1859.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.6" y="1870.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1164.6" y="1843.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.6" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1164.6" y="1827.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.6" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1164.6" y="1811.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.6" y="1822.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1165.6" y="1859.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.6" y="1870.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1165.6" y="1843.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.6" y="1854.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1165.6" y="1827.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.6" y="1838.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1165.6" y="1811.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.6" y="1822.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1165.6" y="1795.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.6" y="1806.0"></text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.09%)</title><rect x="1166.7" y="1859.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1167.7" y="1859.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.26%)</title><rect x="1168.7" y="1859.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.7" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1170.7" y="1843.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.7" y="1854.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1171.7" y="1859.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.7" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.09%)</title><rect x="1171.7" y="1843.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.7" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.7" y="1827.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.7" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.7" y="1811.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.7" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.7" y="1795.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.7" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.7" y="1779.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.7" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.7" y="1763.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.7" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.7" y="1747.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.7" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.7" y="1731.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.7" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.7" y="1715.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.7" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.7" y="1699.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.7" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.7" y="1683.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.7" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.7" y="1667.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.7" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.7" y="1651.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.7" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.7" y="1635.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.7" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.7" y="1619.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.7" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.7" y="1603.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.7" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.7" y="1587.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.7" y="1598.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1171.7" y="1571.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.7" y="1582.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1171.7" y="1555.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.7" y="1566.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1172.8" y="1891.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.8" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1172.8" y="1875.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.8" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1172.8" y="1859.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.8" y="1870.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1172.8" y="1843.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.8" y="1854.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1172.8" y="1827.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.8" y="1838.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1172.8" y="1811.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.8" y="1822.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.17%)</title><rect x="1173.8" y="1891.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.8" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.17%)</title><rect x="1173.8" y="1875.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.17%)</title><rect x="1173.8" y="1859.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.8" y="1870.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1173.8" y="1843.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.8" y="1854.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1173.8" y="1827.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.8" y="1838.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1174.8" y="1843.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.8" y="1854.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1174.8" y="1827.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.8" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1174.8" y="1811.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.8" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1174.8" y="1795.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.8" y="1806.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_instance_klass() const (1 samples, 0.09%)</title><rect x="1174.8" y="1779.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.8" y="1790.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1175.8" y="1891.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1178.8" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.86%)</title><rect x="1176.8" y="1907.0" width="10.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.86%)</title><rect x="1176.8" y="1891.0" width="10.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.8" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.86%)</title><rect x="1176.8" y="1875.0" width="10.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.8" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.86%)</title><rect x="1176.8" y="1859.0" width="10.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.8" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.86%)</title><rect x="1176.8" y="1843.0" width="10.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.8" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.86%)</title><rect x="1176.8" y="1827.0" width="10.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.8" y="1838.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1176.8" y="1811.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.8" y="1822.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1176.8" y="1795.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.8" y="1806.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1176.8" y="1779.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.8" y="1790.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1176.8" y="1763.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.8" y="1774.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1176.8" y="1747.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="1758.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1176.8" y="1731.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.8" y="1742.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1176.8" y="1715.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.8" y="1726.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1176.8" y="1699.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="1710.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1176.8" y="1683.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.8" y="1694.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1176.8" y="1667.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="1678.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1176.8" y="1651.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.8" y="1662.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1176.8" y="1635.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="1646.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1176.8" y="1619.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.8" y="1630.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1176.8" y="1603.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.8" y="1614.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.09%)</title><rect x="1176.8" y="1587.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.8" y="1598.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1176.8" y="1571.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="1582.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1176.8" y="1555.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.8" y="1566.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.09%)</title><rect x="1176.8" y="1539.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.8" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.77%)</title><rect x="1177.8" y="1811.0" width="9.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.8" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.77%)</title><rect x="1177.8" y="1795.0" width="9.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.8" y="1806.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.09%)</title><rect x="1177.8" y="1779.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.8" y="1790.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1177.8" y="1763.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.8" y="1774.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1177.8" y="1747.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.8" y="1758.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1177.8" y="1731.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.8" y="1742.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.09%)</title><rect x="1177.8" y="1715.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.8" y="1726.0"></text>
</g>
<g>
<title>GraphKit::compute_stack_effects(int&amp;, int&amp;) (1 samples, 0.09%)</title><rect x="1177.8" y="1699.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.8" y="1710.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1177.8" y="1683.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.8" y="1694.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1177.8" y="1667.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.8" y="1678.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1177.8" y="1651.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.8" y="1662.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1177.8" y="1635.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.8" y="1646.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1177.8" y="1619.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.8" y="1630.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.09%)</title><rect x="1177.8" y="1603.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.8" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.69%)</title><rect x="1178.8" y="1779.0" width="8.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.69%)</title><rect x="1178.8" y="1763.0" width="8.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.8" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.69%)</title><rect x="1178.8" y="1747.0" width="8.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.69%)</title><rect x="1178.8" y="1731.0" width="8.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.8" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.69%)</title><rect x="1178.8" y="1715.0" width="8.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.8" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.69%)</title><rect x="1178.8" y="1699.0" width="8.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="1710.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.09%)</title><rect x="1178.8" y="1683.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.8" y="1694.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.09%)</title><rect x="1178.8" y="1667.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.8" y="1678.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.09%)</title><rect x="1178.8" y="1651.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.8" y="1662.0"></text>
</g>
<g>
<title>ReplacedNodes::clone() (1 samples, 0.09%)</title><rect x="1178.8" y="1635.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.8" y="1646.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.60%)</title><rect x="1179.9" y="1683.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.9" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.60%)</title><rect x="1179.9" y="1667.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="1678.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.09%)</title><rect x="1179.9" y="1651.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.9" y="1662.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.09%)</title><rect x="1179.9" y="1635.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="1646.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.09%)</title><rect x="1179.9" y="1619.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="1630.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.09%)</title><rect x="1179.9" y="1603.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.9" y="1614.0"></text>
</g>
<g>
<title>Parse::ensure_memory_phi(int, bool) (1 samples, 0.09%)</title><rect x="1179.9" y="1587.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.52%)</title><rect x="1180.9" y="1651.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.43%)</title><rect x="1180.9" y="1635.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.43%)</title><rect x="1180.9" y="1619.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.43%)</title><rect x="1180.9" y="1603.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.9" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.43%)</title><rect x="1180.9" y="1587.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.43%)</title><rect x="1180.9" y="1571.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.43%)</title><rect x="1180.9" y="1555.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.43%)</title><rect x="1180.9" y="1539.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.34%)</title><rect x="1180.9" y="1523.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.34%)</title><rect x="1180.9" y="1507.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.9" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.34%)</title><rect x="1180.9" y="1491.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.9" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.34%)</title><rect x="1180.9" y="1475.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.34%)</title><rect x="1180.9" y="1459.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1180.9" y="1443.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1180.9" y="1427.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1180.9" y="1411.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1180.9" y="1395.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1180.9" y="1379.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1180.9" y="1363.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1180.9" y="1347.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.9" y="1331.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.9" y="1315.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.9" y="1299.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.9" y="1283.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.9" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.9" y="1267.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.9" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.9" y="1251.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.9" y="1235.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.9" y="1219.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.9" y="1203.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.9" y="1187.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.9" y="1198.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.09%)</title><rect x="1180.9" y="1171.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="1182.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.09%)</title><rect x="1180.9" y="1155.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="1166.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.09%)</title><rect x="1180.9" y="1139.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.9" y="1150.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.09%)</title><rect x="1180.9" y="1123.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="1134.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.09%)</title><rect x="1180.9" y="1107.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.9" y="1118.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.09%)</title><rect x="1180.9" y="1091.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="1102.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="1180.9" y="1075.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="1086.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.9" y="1331.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.9" y="1342.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1181.9" y="1315.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.9" y="1326.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1181.9" y="1299.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.9" y="1310.0"></text>
</g>
<g>
<title>HaltNode::HaltNode(Node*, Node*) (1 samples, 0.09%)</title><rect x="1181.9" y="1283.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.9" y="1294.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.09%)</title><rect x="1181.9" y="1267.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.9" y="1278.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1182.9" y="1347.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1182.9" y="1331.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.9" y="1342.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.09%)</title><rect x="1182.9" y="1315.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="1326.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1182.9" y="1299.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.9" y="1310.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1182.9" y="1283.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.09%)</title><rect x="1182.9" y="1267.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1182.9" y="1251.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.9" y="1262.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1182.9" y="1235.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="1246.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1182.9" y="1219.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.9" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1182.9" y="1203.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.9" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1182.9" y="1187.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.9" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1182.9" y="1171.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.9" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1182.9" y="1155.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.9" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1182.9" y="1139.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.9" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1182.9" y="1123.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.9" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1182.9" y="1107.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.9" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1182.9" y="1091.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1182.9" y="1075.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.9" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1182.9" y="1059.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.9" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1182.9" y="1043.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.9" y="1054.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1182.9" y="1027.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.9" y="1038.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1182.9" y="1011.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.9" y="1022.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.09%)</title><rect x="1183.9" y="1443.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.9" y="1454.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.9" y="1523.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.9" y="1534.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.9" y="1507.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.9" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.9" y="1491.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.9" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.9" y="1475.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.9" y="1459.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.9" y="1443.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.9" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.9" y="1427.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.9" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.9" y="1411.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.9" y="1422.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1184.9" y="1395.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.9" y="1406.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1184.9" y="1379.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.9" y="1390.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1184.9" y="1363.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.9" y="1374.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1184.9" y="1347.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.9" y="1358.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1184.9" y="1331.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.9" y="1342.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1184.9" y="1315.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.9" y="1326.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1184.9" y="1299.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.9" y="1310.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1185.9" y="1635.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.9" y="1646.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1187.0" y="1939.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.0" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1187.0" y="1923.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.0" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1187.0" y="1907.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.0" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1187.0" y="1891.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.0" y="1902.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.09%)</title><rect x="1187.0" y="1875.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.0" y="1886.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1187.0" y="1859.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.0" y="1870.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.09%)</title><rect x="1187.0" y="1843.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.0" y="1854.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.09%)</title><rect x="1187.0" y="1827.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.0" y="1838.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1187.0" y="1811.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.0" y="1822.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1187.0" y="1795.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.0" y="1806.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1187.0" y="1779.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.0" y="1790.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1187.0" y="1763.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.0" y="1774.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1187.0" y="1747.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.0" y="1758.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1187.0" y="1731.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.0" y="1742.0"></text>
</g>
<g>
<title>ConstantPool::impl_klass_ref_index_at(int, bool) (1 samples, 0.09%)</title><rect x="1187.0" y="1715.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.0" y="1726.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.09%)</title><rect x="1188.0" y="1939.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.0" y="1950.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.09%)</title><rect x="1188.0" y="1923.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.0" y="1934.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.09%)</title><rect x="1189.0" y="2003.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.0" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.09%)</title><rect x="1189.0" y="1987.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.0" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.09%)</title><rect x="1189.0" y="1971.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="1982.0"></text>
</g>
</g>
</svg>
