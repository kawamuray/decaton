<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (271 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="2035.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="2019.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="2003.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1987.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1971.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1955.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1939.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1923.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1907.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1891.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1875.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1859.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1843.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1827.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1811.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1795.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1779.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1763.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1747.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1731.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1715.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1699.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1683.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1667.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1651.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1635.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1619.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1603.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1587.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1571.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1555.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1539.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1523.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1507.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1491.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1475.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1459.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1443.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1427.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1411.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1395.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1379.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1363.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1347.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1331.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1315.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1299.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1283.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1267.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1251.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1235.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1219.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1203.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1187.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1171.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1155.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1139.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1123.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1107.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1091.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1075.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1059.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1043.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1027.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1011.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="995.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="979.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="963.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="947.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="931.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="915.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="899.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="883.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="867.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="851.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="835.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="819.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="803.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="787.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="771.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="755.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="739.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="723.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="707.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="691.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="675.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="659.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="643.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="627.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="611.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="595.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="579.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="563.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="547.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="531.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="515.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="499.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="483.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="467.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="451.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="435.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="419.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="403.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="387.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="371.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="355.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="339.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="323.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="307.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="291.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="275.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="259.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="243.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="227.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="211.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="195.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="179.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="163.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="147.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="131.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="115.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="99.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="83.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="67.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="51.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="35.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (23 samples, 8.49%)</title><rect x="14.4" y="2035.0" width="100.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="17.4" y="2046.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (2 samples, 0.74%)</title><rect x="14.4" y="2019.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.4" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.74%)</title><rect x="14.4" y="2003.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="17.4" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.74%)</title><rect x="14.4" y="1987.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.4" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.74%)</title><rect x="14.4" y="1971.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (2 samples, 0.74%)</title><rect x="14.4" y="1955.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="17.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.37%)</title><rect x="18.7" y="1939.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.37%)</title><rect x="18.7" y="1923.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.37%)</title><rect x="18.7" y="1907.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.37%)</title><rect x="18.7" y="1891.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.37%)</title><rect x="18.7" y="1875.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.37%)</title><rect x="18.7" y="1859.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NodeApiVersions.latestUsableVersion (1 samples, 0.37%)</title><rect x="18.7" y="1843.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.7" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (21 samples, 7.75%)</title><rect x="23.1" y="2019.0" width="91.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.1" y="2030.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.74%)</title><rect x="23.1" y="2003.0" width="8.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.1" y="2014.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.37%)</title><rect x="23.1" y="1987.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.1" y="1998.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (1 samples, 0.37%)</title><rect x="23.1" y="1971.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.1" y="1982.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.37%)</title><rect x="23.1" y="1955.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="26.1" y="1966.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.37%)</title><rect x="23.1" y="1939.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="26.1" y="1950.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.37%)</title><rect x="23.1" y="1923.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="26.1" y="1934.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.37%)</title><rect x="23.1" y="1907.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="26.1" y="1918.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.37%)</title><rect x="23.1" y="1891.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="26.1" y="1902.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.37%)</title><rect x="23.1" y="1875.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="26.1" y="1886.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.37%)</title><rect x="23.1" y="1859.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="26.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.37%)</title><rect x="27.4" y="1987.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="30.4" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.37%)</title><rect x="27.4" y="1971.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.4" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.37%)</title><rect x="27.4" y="1955.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.4" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.37%)</title><rect x="27.4" y="1939.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.4" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.37%)</title><rect x="27.4" y="1923.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.4" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.37%)</title><rect x="27.4" y="1907.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.4" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.37%)</title><rect x="27.4" y="1891.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="30.4" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.37%)</title><rect x="27.4" y="1875.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="30.4" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.37%)</title><rect x="27.4" y="1859.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.4" y="1870.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (9 samples, 3.32%)</title><rect x="31.8" y="2003.0" width="39.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="34.8" y="2014.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1153836912.accept (8 samples, 2.95%)</title><rect x="31.8" y="1987.0" width="34.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.8" y="1998.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (7 samples, 2.58%)</title><rect x="36.1" y="1971.0" width="30.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="39.1" y="1982.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (3 samples, 1.11%)</title><rect x="36.1" y="1955.0" width="13.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.1" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (3 samples, 1.11%)</title><rect x="36.1" y="1939.0" width="13.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.1" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (3 samples, 1.11%)</title><rect x="36.1" y="1923.0" width="13.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="39.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 1.11%)</title><rect x="36.1" y="1907.0" width="13.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 1.11%)</title><rect x="36.1" y="1891.0" width="13.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="39.1" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 1.11%)</title><rect x="36.1" y="1875.0" width="13.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.1" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.74%)</title><rect x="36.1" y="1859.0" width="8.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="39.1" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.74%)</title><rect x="36.1" y="1843.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.1" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.74%)</title><rect x="36.1" y="1827.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.1" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.37%)</title><rect x="40.5" y="1811.0" width="4.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="43.5" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.37%)</title><rect x="44.8" y="1859.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="47.8" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.37%)</title><rect x="44.8" y="1843.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="47.8" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.37%)</title><rect x="44.8" y="1827.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="47.8" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.37%)</title><rect x="44.8" y="1811.0" width="4.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="47.8" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 1.48%)</title><rect x="49.2" y="1955.0" width="17.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="52.2" y="1966.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.74%)</title><rect x="53.5" y="1939.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.5" y="1950.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.74%)</title><rect x="53.5" y="1923.0" width="8.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="56.5" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.37%)</title><rect x="53.5" y="1907.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.5" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.37%)</title><rect x="53.5" y="1891.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="56.5" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.37%)</title><rect x="53.5" y="1875.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="56.5" y="1886.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.37%)</title><rect x="57.9" y="1907.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="60.9" y="1918.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.37%)</title><rect x="62.3" y="1939.0" width="4.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="65.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.37%)</title><rect x="66.6" y="1987.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="69.6" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.37%)</title><rect x="66.6" y="1971.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.37%)</title><rect x="66.6" y="1955.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.6" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.37%)</title><rect x="66.6" y="1939.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="69.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 3.69%)</title><rect x="71.0" y="2003.0" width="43.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="74.0" y="2014.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 3.69%)</title><rect x="71.0" y="1987.0" width="43.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="74.0" y="1998.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 2.58%)</title><rect x="71.0" y="1971.0" width="30.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.0" y="1982.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.48%)</title><rect x="71.0" y="1955.0" width="17.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.48%)</title><rect x="71.0" y="1939.0" width="17.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="74.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 1.11%)</title><rect x="71.0" y="1923.0" width="13.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="74.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.37%)</title><rect x="71.0" y="1907.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestHeader.apiKey (1 samples, 0.37%)</title><rect x="71.0" y="1891.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="74.0" y="1902.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.37%)</title><rect x="71.0" y="1875.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.74%)</title><rect x="75.3" y="1907.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.37%)</title><rect x="75.3" y="1891.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.3" y="1902.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.37%)</title><rect x="75.3" y="1875.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="78.3" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.37%)</title><rect x="75.3" y="1859.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.3" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.37%)</title><rect x="75.3" y="1843.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.37%)</title><rect x="79.7" y="1891.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="82.7" y="1902.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.37%)</title><rect x="79.7" y="1875.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.37%)</title><rect x="84.0" y="1923.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="87.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.11%)</title><rect x="88.4" y="1955.0" width="13.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="91.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.74%)</title><rect x="92.7" y="1939.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="95.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.37%)</title><rect x="92.7" y="1923.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="95.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.37%)</title><rect x="92.7" y="1907.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="95.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.37%)</title><rect x="92.7" y="1891.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="95.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.37%)</title><rect x="97.1" y="1923.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="100.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.37%)</title><rect x="97.1" y="1907.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="100.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.37%)</title><rect x="97.1" y="1891.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="100.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.37%)</title><rect x="97.1" y="1875.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="100.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.37%)</title><rect x="97.1" y="1859.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="100.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.37%)</title><rect x="101.4" y="1971.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="104.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.37%)</title><rect x="101.4" y="1955.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="104.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.37%)</title><rect x="101.4" y="1939.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="104.4" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.37%)</title><rect x="101.4" y="1923.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="104.4" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.37%)</title><rect x="101.4" y="1907.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="104.4" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.37%)</title><rect x="101.4" y="1891.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="104.4" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.37%)</title><rect x="101.4" y="1875.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="104.4" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.37%)</title><rect x="101.4" y="1859.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="104.4" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.37%)</title><rect x="101.4" y="1843.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="104.4" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.37%)</title><rect x="101.4" y="1827.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="104.4" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.37%)</title><rect x="101.4" y="1811.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="104.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.37%)</title><rect x="105.8" y="1971.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="108.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.37%)</title><rect x="105.8" y="1955.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="108.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.37%)</title><rect x="105.8" y="1939.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="108.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.37%)</title><rect x="105.8" y="1923.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="108.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.37%)</title><rect x="105.8" y="1907.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="108.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToStagedReceives (1 samples, 0.37%)</title><rect x="105.8" y="1891.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="108.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.37%)</title><rect x="110.1" y="1971.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="113.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.37%)</title><rect x="110.1" y="1955.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="113.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.37%)</title><rect x="110.1" y="1939.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="113.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.wakeup (1 samples, 0.37%)</title><rect x="110.1" y="1923.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="113.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.wakeup (1 samples, 0.37%)</title><rect x="110.1" y="1907.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="113.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.put (1 samples, 0.37%)</title><rect x="110.1" y="1891.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="113.1" y="1902.0"></text>
</g>
<g>
<title>java/lang/Thread.run (148 samples, 54.61%)</title><rect x="114.5" y="2035.0" width="644.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="117.5" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (148 samples, 54.61%)</title><rect x="114.5" y="2019.0" width="644.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="117.5" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (148 samples, 54.61%)</title><rect x="114.5" y="2003.0" width="644.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="117.5" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/495376973.run (142 samples, 52.40%)</title><rect x="114.5" y="1987.0" width="618.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="117.5" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/495376973.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (142 samples, 52.40%)</title><rect x="114.5" y="1971.0" width="618.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="117.5" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (142 samples, 52.40%)</title><rect x="114.5" y="1955.0" width="618.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="117.5" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (137 samples, 50.55%)</title><rect x="114.5" y="1939.0" width="596.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="117.5" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.maybeDirty (1 samples, 0.37%)</title><rect x="123.2" y="1923.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="126.2" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.37%)</title><rect x="127.6" y="1923.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="130.6" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.37%)</title><rect x="127.6" y="1907.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="130.6" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$197/354880872.get (1 samples, 0.37%)</title><rect x="127.6" y="1891.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="130.6" y="1902.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.37%)</title><rect x="127.6" y="1875.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="130.6" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.37%)</title><rect x="127.6" y="1859.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="130.6" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.37%)</title><rect x="127.6" y="1843.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="130.6" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.37%)</title><rect x="127.6" y="1827.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="130.6" y="1838.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.37%)</title><rect x="127.6" y="1811.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="130.6" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (36 samples, 13.28%)</title><rect x="131.9" y="1923.0" width="156.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="134.9" y="1934.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (36 samples, 13.28%)</title><rect x="131.9" y="1907.0" width="156.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="134.9" y="1918.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (36 samples, 13.28%)</title><rect x="131.9" y="1891.0" width="156.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="134.9" y="1902.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (36 samples, 13.28%)</title><rect x="131.9" y="1875.0" width="156.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="134.9" y="1886.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (36 samples, 13.28%)</title><rect x="131.9" y="1859.0" width="156.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="134.9" y="1870.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (36 samples, 13.28%)</title><rect x="131.9" y="1843.0" width="156.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="134.9" y="1854.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (14 samples, 5.17%)</title><rect x="131.9" y="1827.0" width="61.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="134.9" y="1838.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 1.85%)</title><rect x="131.9" y="1811.0" width="21.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="134.9" y="1822.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 1.85%)</title><rect x="131.9" y="1795.0" width="21.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="134.9" y="1806.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 1.85%)</title><rect x="131.9" y="1779.0" width="21.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="134.9" y="1790.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.37%)</title><rect x="136.3" y="1763.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="139.3" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.74%)</title><rect x="140.6" y="1763.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="143.6" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.74%)</title><rect x="140.6" y="1747.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="143.6" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.74%)</title><rect x="140.6" y="1731.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="143.6" y="1742.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.37%)</title><rect x="149.3" y="1763.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (9 samples, 3.32%)</title><rect x="153.7" y="1811.0" width="39.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="156.7" y="1822.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (9 samples, 3.32%)</title><rect x="153.7" y="1795.0" width="39.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="156.7" y="1806.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.37%)</title><rect x="153.7" y="1779.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="156.7" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.37%)</title><rect x="153.7" y="1763.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="156.7" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.37%)</title><rect x="153.7" y="1747.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="156.7" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.37%)</title><rect x="153.7" y="1731.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="156.7" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.37%)</title><rect x="153.7" y="1715.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="156.7" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.37%)</title><rect x="158.0" y="1779.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="161.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.37%)</title><rect x="158.0" y="1763.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="161.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 1.85%)</title><rect x="162.4" y="1779.0" width="21.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="165.4" y="1790.0">c..</text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (2 samples, 0.74%)</title><rect x="175.5" y="1763.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="178.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 0.74%)</title><rect x="184.2" y="1779.0" width="8.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="187.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (20 samples, 7.38%)</title><rect x="192.9" y="1827.0" width="87.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="195.9" y="1838.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.37%)</title><rect x="192.9" y="1811.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="195.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.37%)</title><rect x="192.9" y="1795.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="195.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.37%)</title><rect x="192.9" y="1779.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="195.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.37%)</title><rect x="192.9" y="1763.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="195.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.37%)</title><rect x="197.2" y="1811.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="200.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.37%)</title><rect x="197.2" y="1795.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="200.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.37%)</title><rect x="197.2" y="1779.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="200.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.37%)</title><rect x="197.2" y="1763.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="200.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.74%)</title><rect x="201.6" y="1811.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.74%)</title><rect x="201.6" y="1795.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="204.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (2 samples, 0.74%)</title><rect x="201.6" y="1779.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="204.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.37%)</title><rect x="205.9" y="1763.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="208.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.37%)</title><rect x="205.9" y="1747.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (16 samples, 5.90%)</title><rect x="210.3" y="1811.0" width="69.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="213.3" y="1822.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 2.21%)</title><rect x="210.3" y="1795.0" width="26.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="213.3" y="1806.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.37%)</title><rect x="210.3" y="1779.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="213.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.37%)</title><rect x="210.3" y="1763.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="213.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.37%)</title><rect x="210.3" y="1747.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="213.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.37%)</title><rect x="210.3" y="1731.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.37%)</title><rect x="210.3" y="1715.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 1.48%)</title><rect x="214.6" y="1779.0" width="17.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="217.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 1.48%)</title><rect x="214.6" y="1763.0" width="17.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="217.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 1.48%)</title><rect x="214.6" y="1747.0" width="17.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="217.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 1.11%)</title><rect x="219.0" y="1731.0" width="13.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.0" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 1.11%)</title><rect x="219.0" y="1715.0" width="13.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="222.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.37%)</title><rect x="232.1" y="1779.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="235.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.37%)</title><rect x="232.1" y="1763.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="235.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (10 samples, 3.69%)</title><rect x="236.4" y="1795.0" width="43.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="239.4" y="1806.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (10 samples, 3.69%)</title><rect x="236.4" y="1779.0" width="43.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="239.4" y="1790.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (10 samples, 3.69%)</title><rect x="236.4" y="1763.0" width="43.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.4" y="1774.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.74%)</title><rect x="249.5" y="1747.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="252.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.37%)</title><rect x="249.5" y="1731.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="252.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.37%)</title><rect x="249.5" y="1715.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="252.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.37%)</title><rect x="249.5" y="1699.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="252.5" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.37%)</title><rect x="249.5" y="1683.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="252.5" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.37%)</title><rect x="249.5" y="1667.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="252.5" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.37%)</title><rect x="249.5" y="1651.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="252.5" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.37%)</title><rect x="253.8" y="1731.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="256.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.37%)</title><rect x="253.8" y="1715.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.37%)</title><rect x="253.8" y="1699.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.8" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 1.11%)</title><rect x="258.2" y="1747.0" width="13.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.2" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 1.11%)</title><rect x="258.2" y="1731.0" width="13.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="261.2" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 1.11%)</title><rect x="258.2" y="1715.0" width="13.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="261.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.37%)</title><rect x="266.9" y="1699.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="269.9" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.74%)</title><rect x="271.3" y="1747.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="274.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.74%)</title><rect x="280.0" y="1827.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.0" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.74%)</title><rect x="280.0" y="1811.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.74%)</title><rect x="280.0" y="1795.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.74%)</title><rect x="280.0" y="1779.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="283.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.37%)</title><rect x="284.3" y="1763.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="287.3" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (94 samples, 34.69%)</title><rect x="288.7" y="1923.0" width="409.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="291.7" y="1934.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (20 samples, 7.38%)</title><rect x="288.7" y="1907.0" width="87.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="291.7" y="1918.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.37%)</title><rect x="301.7" y="1891.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="304.7" y="1902.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (16 samples, 5.90%)</title><rect x="306.1" y="1891.0" width="69.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="309.1" y="1902.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (13 samples, 4.80%)</title><rect x="319.2" y="1875.0" width="56.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="322.2" y="1886.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.11%)</title><rect x="319.2" y="1859.0" width="13.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="322.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.11%)</title><rect x="319.2" y="1843.0" width="13.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="322.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 1.11%)</title><rect x="319.2" y="1827.0" width="13.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="322.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 1.11%)</title><rect x="319.2" y="1811.0" width="13.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="322.2" y="1822.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (10 samples, 3.69%)</title><rect x="332.2" y="1859.0" width="43.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="335.2" y="1870.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 1.48%)</title><rect x="358.3" y="1843.0" width="17.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="361.3" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 1.48%)</title><rect x="358.3" y="1827.0" width="17.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="361.3" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.37%)</title><rect x="375.8" y="1907.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="378.8" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.37%)</title><rect x="375.8" y="1891.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="378.8" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.37%)</title><rect x="375.8" y="1875.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="378.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (16 samples, 5.90%)</title><rect x="380.1" y="1907.0" width="69.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="383.1" y="1918.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (16 samples, 5.90%)</title><rect x="380.1" y="1891.0" width="69.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="383.1" y="1902.0">com/lin..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.37%)</title><rect x="380.1" y="1875.0" width="4.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="383.1" y="1886.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="380.1" y="1859.0" width="4.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="383.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (7 samples, 2.58%)</title><rect x="384.5" y="1875.0" width="30.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="387.5" y="1886.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 1.85%)</title><rect x="388.8" y="1859.0" width="21.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="391.8" y="1870.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 1.85%)</title><rect x="388.8" y="1843.0" width="21.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="391.8" y="1854.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.48%)</title><rect x="388.8" y="1827.0" width="17.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="391.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 1.48%)</title><rect x="388.8" y="1811.0" width="17.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="391.8" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.48%)</title><rect x="388.8" y="1795.0" width="17.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="391.8" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.37%)</title><rect x="388.8" y="1779.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="391.8" y="1790.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.37%)</title><rect x="388.8" y="1763.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="391.8" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.37%)</title><rect x="388.8" y="1747.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="391.8" y="1758.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 1.11%)</title><rect x="393.2" y="1779.0" width="13.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="396.2" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.37%)</title><rect x="406.2" y="1827.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="409.2" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.37%)</title><rect x="410.6" y="1859.0" width="4.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="413.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.37%)</title><rect x="414.9" y="1875.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="417.9" y="1886.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (7 samples, 2.58%)</title><rect x="419.3" y="1875.0" width="30.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="422.3" y="1886.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 2.58%)</title><rect x="419.3" y="1859.0" width="30.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="422.3" y="1870.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.37%)</title><rect x="419.3" y="1843.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="422.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.37%)</title><rect x="419.3" y="1827.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="422.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.37%)</title><rect x="419.3" y="1811.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="422.3" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.37%)</title><rect x="419.3" y="1795.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="422.3" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 2.21%)</title><rect x="423.7" y="1843.0" width="26.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="426.7" y="1854.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 1.85%)</title><rect x="428.0" y="1827.0" width="21.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="431.0" y="1838.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 1.11%)</title><rect x="436.7" y="1811.0" width="13.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="439.7" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 1.11%)</title><rect x="436.7" y="1795.0" width="13.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="439.7" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (46 samples, 16.97%)</title><rect x="449.8" y="1907.0" width="200.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="452.8" y="1918.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (46 samples, 16.97%)</title><rect x="449.8" y="1891.0" width="200.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="452.8" y="1902.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/843490530.process (42 samples, 15.50%)</title><rect x="458.5" y="1875.0" width="182.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="461.5" y="1886.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (42 samples, 15.50%)</title><rect x="458.5" y="1859.0" width="182.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="461.5" y="1870.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (42 samples, 15.50%)</title><rect x="458.5" y="1843.0" width="182.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="461.5" y="1854.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (40 samples, 14.76%)</title><rect x="458.5" y="1827.0" width="174.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="461.5" y="1838.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>java/lang/Thread.sleep (40 samples, 14.76%)</title><rect x="458.5" y="1811.0" width="174.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="461.5" y="1822.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (33 samples, 12.18%)</title><rect x="475.9" y="1795.0" width="143.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="478.9" y="1806.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.37%)</title><rect x="480.3" y="1779.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="483.3" y="1790.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.37%)</title><rect x="484.6" y="1779.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="487.6" y="1790.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="489.0" y="1779.0" width="4.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="492.0" y="1790.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.74%)</title><rect x="493.3" y="1779.0" width="8.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="496.3" y="1790.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.74%)</title><rect x="493.3" y="1763.0" width="8.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="496.3" y="1774.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (27 samples, 9.96%)</title><rect x="502.0" y="1779.0" width="117.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="505.0" y="1790.0">os::sleep(Thre..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.37%)</title><rect x="523.8" y="1763.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="526.8" y="1774.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.37%)</title><rect x="523.8" y="1747.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="526.8" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 1.85%)</title><rect x="528.2" y="1763.0" width="21.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="531.2" y="1774.0">_..</text>
</g>
<g>
<title>__pthread_cond_timedwait (14 samples, 5.17%)</title><rect x="549.9" y="1763.0" width="61.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="552.9" y="1774.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.37%)</title><rect x="610.9" y="1763.0" width="4.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="613.9" y="1774.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.37%)</title><rect x="615.2" y="1763.0" width="4.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="618.2" y="1774.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.74%)</title><rect x="619.6" y="1795.0" width="8.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="622.6" y="1806.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.37%)</title><rect x="628.3" y="1795.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="631.3" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.74%)</title><rect x="632.7" y="1827.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="635.7" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.37%)</title><rect x="641.4" y="1875.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="644.4" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.37%)</title><rect x="641.4" y="1859.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="644.4" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.37%)</title><rect x="645.7" y="1875.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="648.7" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.37%)</title><rect x="645.7" y="1859.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="648.7" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 4.06%)</title><rect x="650.1" y="1907.0" width="47.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="653.1" y="1918.0">java..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.37%)</title><rect x="671.8" y="1891.0" width="4.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="674.8" y="1902.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="671.8" y="1875.0" width="4.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="674.8" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.85%)</title><rect x="676.2" y="1891.0" width="21.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="679.2" y="1902.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 1.85%)</title><rect x="676.2" y="1875.0" width="21.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="679.2" y="1886.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$286/1957187744.accept (5 samples, 1.85%)</title><rect x="676.2" y="1859.0" width="21.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="679.2" y="1870.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (5 samples, 1.85%)</title><rect x="676.2" y="1843.0" width="21.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="679.2" y="1854.0">c..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (5 samples, 1.85%)</title><rect x="676.2" y="1827.0" width="21.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="679.2" y="1838.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (5 samples, 1.85%)</title><rect x="676.2" y="1811.0" width="21.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="679.2" y="1822.0">i..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.37%)</title><rect x="689.3" y="1795.0" width="4.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="692.3" y="1806.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="689.3" y="1779.0" width="4.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="692.3" y="1790.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.37%)</title><rect x="693.6" y="1795.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="696.6" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.11%)</title><rect x="698.0" y="1923.0" width="13.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="701.0" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.74%)</title><rect x="702.3" y="1907.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="705.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.74%)</title><rect x="702.3" y="1891.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="705.3" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$289/1593456029.accept (2 samples, 0.74%)</title><rect x="702.3" y="1875.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="705.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (2 samples, 0.74%)</title><rect x="702.3" y="1859.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="705.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1683744269.complete (2 samples, 0.74%)</title><rect x="702.3" y="1843.0" width="8.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="705.3" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (2 samples, 0.74%)</title><rect x="702.3" y="1827.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="705.3" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (2 samples, 0.74%)</title><rect x="702.3" y="1811.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="705.3" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.74%)</title><rect x="702.3" y="1795.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="705.3" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.74%)</title><rect x="702.3" y="1779.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="705.3" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.74%)</title><rect x="702.3" y="1763.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="705.3" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.74%)</title><rect x="702.3" y="1747.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="705.3" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 1.85%)</title><rect x="711.0" y="1939.0" width="21.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="714.0" y="1950.0">c..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.37%)</title><rect x="728.5" y="1923.0" width="4.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="731.5" y="1934.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="728.5" y="1907.0" width="4.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="731.5" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 2.21%)</title><rect x="732.8" y="1987.0" width="26.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="735.8" y="1998.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (6 samples, 2.21%)</title><rect x="732.8" y="1971.0" width="26.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="735.8" y="1982.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (4 samples, 1.48%)</title><rect x="732.8" y="1955.0" width="17.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="735.8" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 1.48%)</title><rect x="732.8" y="1939.0" width="17.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="735.8" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.48%)</title><rect x="732.8" y="1923.0" width="17.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="735.8" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.48%)</title><rect x="732.8" y="1907.0" width="17.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="735.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.48%)</title><rect x="732.8" y="1891.0" width="17.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="735.8" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.74%)</title><rect x="750.2" y="1955.0" width="8.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="753.2" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.74%)</title><rect x="750.2" y="1939.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="753.2" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.74%)</title><rect x="750.2" y="1923.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="753.2" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.74%)</title><rect x="750.2" y="1907.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="753.2" y="1918.0"></text>
</g>
<g>
<title>start_thread (99 samples, 36.53%)</title><rect x="758.9" y="2035.0" width="431.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="761.9" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (99 samples, 36.53%)</title><rect x="758.9" y="2019.0" width="431.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="761.9" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 2.95%)</title><rect x="758.9" y="2003.0" width="34.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="761.9" y="2014.0">Ga..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.37%)</title><rect x="758.9" y="1987.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="761.9" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.37%)</title><rect x="758.9" y="1971.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="761.9" y="1982.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.37%)</title><rect x="758.9" y="1955.0" width="4.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="761.9" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (7 samples, 2.58%)</title><rect x="763.3" y="1987.0" width="30.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="766.3" y="1998.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 2.21%)</title><rect x="767.6" y="1971.0" width="26.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="770.6" y="1982.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.37%)</title><rect x="767.6" y="1955.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="770.6" y="1966.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.37%)</title><rect x="772.0" y="1955.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="775.0" y="1966.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 1.48%)</title><rect x="776.3" y="1955.0" width="17.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="779.3" y="1966.0"></text>
</g>
<g>
<title>JavaThread::run() (91 samples, 33.58%)</title><rect x="793.8" y="2003.0" width="396.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="796.8" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (91 samples, 33.58%)</title><rect x="793.8" y="1987.0" width="396.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="796.8" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (91 samples, 33.58%)</title><rect x="793.8" y="1971.0" width="396.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="796.8" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (91 samples, 33.58%)</title><rect x="793.8" y="1955.0" width="396.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="796.8" y="1966.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (88 samples, 32.47%)</title><rect x="793.8" y="1939.0" width="383.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="796.8" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (88 samples, 32.47%)</title><rect x="793.8" y="1923.0" width="383.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="796.8" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int..</text>
</g>
<g>
<title>Compile::Code_Gen() (53 samples, 19.56%)</title><rect x="793.8" y="1907.0" width="230.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="796.8" y="1918.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.37%)</title><rect x="793.8" y="1891.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="796.8" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.37%)</title><rect x="793.8" y="1875.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="796.8" y="1886.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.74%)</title><rect x="798.1" y="1891.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="801.1" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.37%)</title><rect x="798.1" y="1875.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="801.1" y="1886.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.37%)</title><rect x="798.1" y="1859.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="801.1" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.37%)</title><rect x="802.5" y="1875.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="805.5" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.37%)</title><rect x="802.5" y="1859.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="805.5" y="1870.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.48%)</title><rect x="806.8" y="1891.0" width="17.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="809.8" y="1902.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.37%)</title><rect x="806.8" y="1875.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="809.8" y="1886.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.37%)</title><rect x="806.8" y="1859.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="809.8" y="1870.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.11%)</title><rect x="811.2" y="1875.0" width="13.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="814.2" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.74%)</title><rect x="811.2" y="1859.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="814.2" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.37%)</title><rect x="819.9" y="1859.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="822.9" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.37%)</title><rect x="819.9" y="1843.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="822.9" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.11%)</title><rect x="824.2" y="1891.0" width="13.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="827.2" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.11%)</title><rect x="824.2" y="1875.0" width="13.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="827.2" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.37%)</title><rect x="824.2" y="1859.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="827.2" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.37%)</title><rect x="824.2" y="1843.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="827.2" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.37%)</title><rect x="828.6" y="1859.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="831.6" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.37%)</title><rect x="833.0" y="1859.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="836.0" y="1870.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.37%)</title><rect x="833.0" y="1843.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="836.0" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (43 samples, 15.87%)</title><rect x="837.3" y="1891.0" width="187.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="840.3" y="1902.0">PhaseChaitin::Register_A..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.74%)</title><rect x="837.3" y="1875.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="840.3" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.37%)</title><rect x="846.0" y="1875.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="849.0" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.37%)</title><rect x="846.0" y="1859.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="849.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.11%)</title><rect x="850.4" y="1875.0" width="13.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="853.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 1.11%)</title><rect x="850.4" y="1859.0" width="13.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="853.4" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.74%)</title><rect x="854.7" y="1843.0" width="8.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="857.7" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.85%)</title><rect x="863.4" y="1875.0" width="21.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="866.4" y="1886.0">P..</text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.37%)</title><rect x="880.8" y="1859.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="883.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.37%)</title><rect x="880.8" y="1843.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="883.8" y="1854.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.37%)</title><rect x="880.8" y="1827.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="883.8" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 2.58%)</title><rect x="885.2" y="1875.0" width="30.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="888.2" y="1886.0">Ph..</text>
</g>
<g>
<title>CreateExceptionNode::rule() const (1 samples, 0.37%)</title><rect x="889.6" y="1859.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="892.6" y="1870.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.37%)</title><rect x="893.9" y="1859.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="896.9" y="1870.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.37%)</title><rect x="898.3" y="1859.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="901.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.11%)</title><rect x="902.6" y="1859.0" width="13.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="905.6" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.37%)</title><rect x="911.3" y="1843.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="914.3" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.74%)</title><rect x="915.7" y="1875.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="918.7" y="1886.0"></text>
</g>
<g>
<title>MachNode::operand_index(unsigned int) const (1 samples, 0.37%)</title><rect x="920.0" y="1859.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="923.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 1.48%)</title><rect x="924.4" y="1875.0" width="17.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="927.4" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.37%)</title><rect x="933.1" y="1859.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="936.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.37%)</title><rect x="937.5" y="1859.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="940.5" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (9 samples, 3.32%)</title><rect x="941.8" y="1875.0" width="39.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="944.8" y="1886.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (9 samples, 3.32%)</title><rect x="941.8" y="1859.0" width="39.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="944.8" y="1870.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (9 samples, 3.32%)</title><rect x="941.8" y="1843.0" width="39.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="944.8" y="1854.0">Pha..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 1.11%)</title><rect x="941.8" y="1827.0" width="13.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="944.8" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (6 samples, 2.21%)</title><rect x="954.9" y="1827.0" width="26.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="957.9" y="1838.0">P..</text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.74%)</title><rect x="981.0" y="1875.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="984.0" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.37%)</title><rect x="985.4" y="1859.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="988.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.74%)</title><rect x="989.7" y="1875.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="992.7" y="1886.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.37%)</title><rect x="994.1" y="1859.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="997.1" y="1870.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.37%)</title><rect x="994.1" y="1843.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="997.1" y="1854.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.85%)</title><rect x="998.4" y="1875.0" width="21.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1001.4" y="1886.0">P..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.74%)</title><rect x="1007.1" y="1859.0" width="8.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1010.1" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.37%)</title><rect x="1015.8" y="1859.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1018.8" y="1870.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.37%)</title><rect x="1020.2" y="1875.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1023.2" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (28 samples, 10.33%)</title><rect x="1024.5" y="1907.0" width="122.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1027.5" y="1918.0">Compile::Optimi..</text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.37%)</title><rect x="1024.5" y="1891.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1027.5" y="1902.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (24 samples, 8.86%)</title><rect x="1028.9" y="1891.0" width="104.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1031.9" y="1902.0">PhaseIdealLo..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.37%)</title><rect x="1028.9" y="1875.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1031.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.74%)</title><rect x="1033.2" y="1875.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1036.2" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.37%)</title><rect x="1037.6" y="1859.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1040.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.37%)</title><rect x="1042.0" y="1875.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1045.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (16 samples, 5.90%)</title><rect x="1046.3" y="1875.0" width="69.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1049.3" y="1886.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (15 samples, 5.54%)</title><rect x="1050.7" y="1859.0" width="65.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1053.7" y="1870.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (15 samples, 5.54%)</title><rect x="1050.7" y="1843.0" width="65.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1053.7" y="1854.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 1.11%)</title><rect x="1098.6" y="1827.0" width="13.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1101.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.37%)</title><rect x="1111.6" y="1827.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1114.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.74%)</title><rect x="1116.0" y="1875.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1119.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.37%)</title><rect x="1124.7" y="1875.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.37%)</title><rect x="1124.7" y="1859.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.7" y="1870.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.37%)</title><rect x="1129.0" y="1875.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.74%)</title><rect x="1133.4" y="1891.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.4" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.74%)</title><rect x="1133.4" y="1875.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.4" y="1886.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.37%)</title><rect x="1133.4" y="1859.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.4" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.37%)</title><rect x="1137.7" y="1859.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.37%)</title><rect x="1137.7" y="1843.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.7" y="1854.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.37%)</title><rect x="1137.7" y="1827.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.7" y="1838.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.37%)</title><rect x="1142.1" y="1891.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.1" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.37%)</title><rect x="1142.1" y="1875.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.1" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1142.1" y="1859.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.1" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.37%)</title><rect x="1142.1" y="1843.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.1" y="1854.0"></text>
</g>
<g>
<title>scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*) (1 samples, 0.37%)</title><rect x="1142.1" y="1827.0" width="4.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1145.1" y="1838.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.37%)</title><rect x="1142.1" y="1811.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.1" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 2.58%)</title><rect x="1146.5" y="1907.0" width="30.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.5" y="1918.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 2.58%)</title><rect x="1146.5" y="1891.0" width="30.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.5" y="1902.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 2.58%)</title><rect x="1146.5" y="1875.0" width="30.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.5" y="1886.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 2.58%)</title><rect x="1146.5" y="1859.0" width="30.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.5" y="1870.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 2.58%)</title><rect x="1146.5" y="1843.0" width="30.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.5" y="1854.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 2.58%)</title><rect x="1146.5" y="1827.0" width="30.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.5" y="1838.0">Pa..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.37%)</title><rect x="1146.5" y="1811.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.5" y="1822.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.37%)</title><rect x="1146.5" y="1795.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.5" y="1806.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.37%)</title><rect x="1146.5" y="1779.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.5" y="1790.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.37%)</title><rect x="1146.5" y="1763.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.5" y="1774.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.37%)</title><rect x="1146.5" y="1747.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.5" y="1758.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.37%)</title><rect x="1146.5" y="1731.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.5" y="1742.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.37%)</title><rect x="1146.5" y="1715.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.5" y="1726.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1150.8" y="1811.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.8" y="1822.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.37%)</title><rect x="1150.8" y="1795.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.8" y="1806.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.37%)</title><rect x="1150.8" y="1779.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.8" y="1790.0"></text>
</g>
<g>
<title>Node::add_req_batch(Node*, unsigned int) (1 samples, 0.37%)</title><rect x="1150.8" y="1763.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.8" y="1774.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.85%)</title><rect x="1155.2" y="1811.0" width="21.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.2" y="1822.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.85%)</title><rect x="1155.2" y="1795.0" width="21.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.2" y="1806.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.85%)</title><rect x="1155.2" y="1779.0" width="21.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.2" y="1790.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.85%)</title><rect x="1155.2" y="1763.0" width="21.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.2" y="1774.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.85%)</title><rect x="1155.2" y="1747.0" width="21.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.2" y="1758.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.85%)</title><rect x="1155.2" y="1731.0" width="21.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.2" y="1742.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.11%)</title><rect x="1155.2" y="1715.0" width="13.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.2" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.11%)</title><rect x="1155.2" y="1699.0" width="13.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.2" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.11%)</title><rect x="1155.2" y="1683.0" width="13.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.2" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.11%)</title><rect x="1155.2" y="1667.0" width="13.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.2" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.11%)</title><rect x="1155.2" y="1651.0" width="13.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.2" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.11%)</title><rect x="1155.2" y="1635.0" width="13.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.2" y="1646.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.37%)</title><rect x="1155.2" y="1619.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.2" y="1630.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.37%)</title><rect x="1155.2" y="1603.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.2" y="1614.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.37%)</title><rect x="1155.2" y="1587.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.2" y="1598.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.37%)</title><rect x="1155.2" y="1571.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.2" y="1582.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.37%)</title><rect x="1155.2" y="1555.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.2" y="1566.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.37%)</title><rect x="1155.2" y="1539.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.2" y="1550.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.37%)</title><rect x="1155.2" y="1523.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.2" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.74%)</title><rect x="1159.5" y="1619.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.5" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.74%)</title><rect x="1159.5" y="1603.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.5" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.74%)</title><rect x="1159.5" y="1587.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.5" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.74%)</title><rect x="1159.5" y="1571.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.5" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.74%)</title><rect x="1159.5" y="1555.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.5" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.74%)</title><rect x="1159.5" y="1539.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.5" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.74%)</title><rect x="1159.5" y="1523.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.5" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.74%)</title><rect x="1159.5" y="1507.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.5" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.74%)</title><rect x="1159.5" y="1491.0" width="8.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.5" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.74%)</title><rect x="1159.5" y="1475.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.5" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.74%)</title><rect x="1159.5" y="1459.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.5" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.74%)</title><rect x="1159.5" y="1443.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.5" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.74%)</title><rect x="1159.5" y="1427.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.5" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.74%)</title><rect x="1159.5" y="1411.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.5" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.74%)</title><rect x="1159.5" y="1395.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.5" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.74%)</title><rect x="1159.5" y="1379.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.5" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.74%)</title><rect x="1159.5" y="1363.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.5" y="1374.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.37%)</title><rect x="1159.5" y="1347.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.5" y="1358.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.37%)</title><rect x="1159.5" y="1331.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.5" y="1342.0"></text>
</g>
<g>
<title>GraphKit::gen_subtype_check(Node*, Node*) (1 samples, 0.37%)</title><rect x="1159.5" y="1315.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.5" y="1326.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.37%)</title><rect x="1159.5" y="1299.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.5" y="1310.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.37%)</title><rect x="1159.5" y="1283.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.5" y="1294.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.37%)</title><rect x="1159.5" y="1267.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.5" y="1278.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.37%)</title><rect x="1159.5" y="1251.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.5" y="1262.0"></text>
</g>
<g>
<title>TypeKlassPtr::add_offset(long) const (1 samples, 0.37%)</title><rect x="1159.5" y="1235.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.5" y="1246.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.37%)</title><rect x="1159.5" y="1219.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.5" y="1230.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.37%)</title><rect x="1163.9" y="1347.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.37%)</title><rect x="1163.9" y="1331.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.9" y="1342.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.37%)</title><rect x="1163.9" y="1315.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.9" y="1326.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.37%)</title><rect x="1163.9" y="1299.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.9" y="1310.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.37%)</title><rect x="1163.9" y="1283.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.9" y="1294.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.37%)</title><rect x="1163.9" y="1267.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.9" y="1278.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.37%)</title><rect x="1163.9" y="1251.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.9" y="1262.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.37%)</title><rect x="1163.9" y="1235.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.9" y="1246.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.74%)</title><rect x="1168.2" y="1715.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.2" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.74%)</title><rect x="1168.2" y="1699.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.2" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.74%)</title><rect x="1168.2" y="1683.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.2" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.74%)</title><rect x="1168.2" y="1667.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.2" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.74%)</title><rect x="1168.2" y="1651.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.2" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.74%)</title><rect x="1168.2" y="1635.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.2" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.74%)</title><rect x="1168.2" y="1619.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.2" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.74%)</title><rect x="1168.2" y="1603.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.2" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.74%)</title><rect x="1168.2" y="1587.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.2" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.74%)</title><rect x="1168.2" y="1571.0" width="8.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.2" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.74%)</title><rect x="1168.2" y="1555.0" width="8.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.2" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.74%)</title><rect x="1168.2" y="1539.0" width="8.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.2" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.74%)</title><rect x="1168.2" y="1523.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.2" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1168.2" y="1507.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.2" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1168.2" y="1491.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.2" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1168.2" y="1475.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.2" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1168.2" y="1459.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1168.2" y="1443.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.2" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1168.2" y="1427.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.2" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1168.2" y="1411.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.2" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1168.2" y="1395.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.2" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1168.2" y="1379.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.2" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1168.2" y="1363.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.2" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1168.2" y="1347.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.2" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1168.2" y="1331.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.2" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1168.2" y="1315.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.2" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1168.2" y="1299.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.2" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1168.2" y="1283.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.2" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1168.2" y="1267.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.2" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1168.2" y="1251.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.2" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1168.2" y="1235.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.2" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1168.2" y="1219.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.2" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1168.2" y="1203.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.2" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1168.2" y="1187.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.2" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1168.2" y="1171.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.2" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1168.2" y="1155.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.2" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1168.2" y="1139.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.2" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1168.2" y="1123.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.2" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1168.2" y="1107.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.2" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1168.2" y="1091.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1168.2" y="1075.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1168.2" y="1059.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1168.2" y="1043.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.2" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1168.2" y="1027.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.2" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1168.2" y="1011.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1168.2" y="995.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1168.2" y="979.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1168.2" y="963.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.37%)</title><rect x="1168.2" y="947.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.37%)</title><rect x="1168.2" y="931.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.2" y="942.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.37%)</title><rect x="1168.2" y="915.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.2" y="926.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.37%)</title><rect x="1168.2" y="899.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.2" y="910.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.37%)</title><rect x="1168.2" y="883.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.2" y="894.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.37%)</title><rect x="1168.2" y="867.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.2" y="878.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.37%)</title><rect x="1168.2" y="851.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.2" y="862.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.37%)</title><rect x="1168.2" y="835.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.2" y="846.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.37%)</title><rect x="1168.2" y="819.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.2" y="830.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.37%)</title><rect x="1168.2" y="803.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.2" y="814.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.37%)</title><rect x="1168.2" y="787.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.2" y="798.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.37%)</title><rect x="1168.2" y="771.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.2" y="782.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.37%)</title><rect x="1168.2" y="755.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.2" y="766.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.37%)</title><rect x="1172.6" y="1507.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.6" y="1518.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.37%)</title><rect x="1172.6" y="1491.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.6" y="1502.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.37%)</title><rect x="1172.6" y="1475.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.6" y="1486.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_ref_at(int, bool) (1 samples, 0.37%)</title><rect x="1172.6" y="1459.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.6" y="1470.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.11%)</title><rect x="1176.9" y="1939.0" width="13.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.9" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.11%)</title><rect x="1176.9" y="1923.0" width="13.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.9" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.11%)</title><rect x="1176.9" y="1907.0" width="13.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.9" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.11%)</title><rect x="1176.9" y="1891.0" width="13.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.9" y="1902.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.74%)</title><rect x="1176.9" y="1875.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.9" y="1886.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.74%)</title><rect x="1176.9" y="1859.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.9" y="1870.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.74%)</title><rect x="1176.9" y="1843.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.9" y="1854.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.74%)</title><rect x="1176.9" y="1827.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.9" y="1838.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.74%)</title><rect x="1176.9" y="1811.0" width="8.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.9" y="1822.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.74%)</title><rect x="1176.9" y="1795.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="1806.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.74%)</title><rect x="1176.9" y="1779.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.9" y="1790.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.37%)</title><rect x="1176.9" y="1763.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.9" y="1774.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.37%)</title><rect x="1176.9" y="1747.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="1758.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.37%)</title><rect x="1176.9" y="1731.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.9" y="1742.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.37%)</title><rect x="1176.9" y="1715.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.9" y="1726.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.37%)</title><rect x="1176.9" y="1699.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.9" y="1710.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.37%)</title><rect x="1176.9" y="1683.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.9" y="1694.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.37%)</title><rect x="1176.9" y="1667.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.9" y="1678.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.37%)</title><rect x="1176.9" y="1651.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.9" y="1662.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.37%)</title><rect x="1176.9" y="1635.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.9" y="1646.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.37%)</title><rect x="1176.9" y="1619.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="1630.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.37%)</title><rect x="1176.9" y="1603.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="1614.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.37%)</title><rect x="1176.9" y="1587.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.9" y="1598.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call_or_null(KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.37%)</title><rect x="1176.9" y="1571.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.9" y="1582.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call(CallInfo&amp;, Handle, KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.37%)</title><rect x="1176.9" y="1555.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.9" y="1566.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.37%)</title><rect x="1176.9" y="1539.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.9" y="1550.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.37%)</title><rect x="1176.9" y="1523.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.9" y="1534.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.37%)</title><rect x="1176.9" y="1507.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.9" y="1518.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.37%)</title><rect x="1176.9" y="1491.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.9" y="1502.0"></text>
</g>
<g>
<title>Dictionary::find_class(int, unsigned int, Symbol*, ClassLoaderData*) (1 samples, 0.37%)</title><rect x="1176.9" y="1475.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.9" y="1486.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.37%)</title><rect x="1181.3" y="1763.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="1774.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.37%)</title><rect x="1181.3" y="1747.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="1758.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.37%)</title><rect x="1181.3" y="1731.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.3" y="1742.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.37%)</title><rect x="1181.3" y="1715.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="1726.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.37%)</title><rect x="1181.3" y="1699.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.3" y="1710.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.37%)</title><rect x="1181.3" y="1683.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="1694.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.37%)</title><rect x="1181.3" y="1667.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.3" y="1678.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.37%)</title><rect x="1181.3" y="1651.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.3" y="1662.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.37%)</title><rect x="1181.3" y="1635.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="1646.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.37%)</title><rect x="1181.3" y="1619.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.3" y="1630.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.37%)</title><rect x="1185.6" y="1875.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.6" y="1886.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.37%)</title><rect x="1185.6" y="1859.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.6" y="1870.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.37%)</title><rect x="1185.6" y="1843.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.6" y="1854.0"></text>
</g>
<g>
<title>LinearScan::add_temp(int, int, IntervalUseKind, BasicType) (1 samples, 0.37%)</title><rect x="1185.6" y="1827.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.6" y="1838.0"></text>
</g>
<g>
<title>LinearScan::create_interval(int) (1 samples, 0.37%)</title><rect x="1185.6" y="1811.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.6" y="1822.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.37%)</title><rect x="1185.6" y="1795.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.6" y="1806.0"></text>
</g>
</g>
</svg>
