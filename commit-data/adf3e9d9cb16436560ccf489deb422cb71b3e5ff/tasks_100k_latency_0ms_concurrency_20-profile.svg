<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="645"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="645"> </text>
<g id="frames">
<g>
<title>all (135 samples, 100.00%)</title><rect x="10.0" y="611.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="622.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (34 samples, 25.19%)</title><rect x="10.0" y="595.0" width="297.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="606.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (34 samples, 25.19%)</title><rect x="10.0" y="579.0" width="297.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="590.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (20 samples, 14.81%)</title><rect x="10.0" y="563.0" width="174.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="574.0">java/lang/Iterable.for..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1918122111.accept (20 samples, 14.81%)</title><rect x="10.0" y="547.0" width="174.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="558.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (19 samples, 14.07%)</title><rect x="18.7" y="531.0" width="166.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="21.7" y="542.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (16 samples, 11.85%)</title><rect x="18.7" y="515.0" width="139.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.7" y="526.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (16 samples, 11.85%)</title><rect x="18.7" y="499.0" width="139.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.7" y="510.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (16 samples, 11.85%)</title><rect x="18.7" y="483.0" width="139.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.7" y="494.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (16 samples, 11.85%)</title><rect x="18.7" y="467.0" width="139.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.7" y="478.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (16 samples, 11.85%)</title><rect x="18.7" y="451.0" width="139.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.7" y="462.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (11 samples, 8.15%)</title><rect x="62.4" y="435.0" width="96.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="65.4" y="446.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (8 samples, 5.93%)</title><rect x="62.4" y="419.0" width="70.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.4" y="430.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 5.93%)</title><rect x="62.4" y="403.0" width="70.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.4" y="414.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 5.93%)</title><rect x="62.4" y="387.0" width="70.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="65.4" y="398.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 5.93%)</title><rect x="62.4" y="371.0" width="70.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.4" y="382.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 5.93%)</title><rect x="62.4" y="355.0" width="70.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="65.4" y="366.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (6 samples, 4.44%)</title><rect x="79.9" y="339.0" width="52.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="82.9" y="350.0">sun/m..</text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 3.70%)</title><rect x="88.7" y="323.0" width="43.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="91.7" y="334.0">Unsa..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.74%)</title><rect x="88.7" y="307.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="91.7" y="318.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 2.22%)</title><rect x="97.4" y="307.0" width="26.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="100.4" y="318.0">_..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.74%)</title><rect x="123.6" y="307.0" width="8.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="126.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 2.22%)</title><rect x="132.4" y="419.0" width="26.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="135.4" y="430.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 2.22%)</title><rect x="132.4" y="403.0" width="26.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="135.4" y="414.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 2.22%)</title><rect x="132.4" y="387.0" width="26.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="135.4" y="398.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 2.22%)</title><rect x="132.4" y="371.0" width="26.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="135.4" y="382.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 2.22%)</title><rect x="158.6" y="515.0" width="26.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="161.6" y="526.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 2.22%)</title><rect x="158.6" y="499.0" width="26.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="161.6" y="510.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.74%)</title><rect x="167.3" y="483.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="170.3" y="494.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.74%)</title><rect x="167.3" y="467.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="170.3" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.74%)</title><rect x="167.3" y="451.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="170.3" y="462.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.74%)</title><rect x="176.1" y="483.0" width="8.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="179.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 10.37%)</title><rect x="184.8" y="563.0" width="122.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="187.8" y="574.0">org/apache/kafk..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 10.37%)</title><rect x="184.8" y="547.0" width="122.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="187.8" y="558.0">org/apache/kafk..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (10 samples, 7.41%)</title><rect x="184.8" y="531.0" width="87.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="187.8" y="542.0">org/apache..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (10 samples, 7.41%)</title><rect x="184.8" y="515.0" width="87.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="187.8" y="526.0">org/apache..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.74%)</title><rect x="184.8" y="499.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="187.8" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (8 samples, 5.93%)</title><rect x="193.6" y="499.0" width="69.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="196.6" y="510.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (6 samples, 4.44%)</title><rect x="193.6" y="483.0" width="52.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="196.6" y="494.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (6 samples, 4.44%)</title><rect x="193.6" y="467.0" width="52.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="196.6" y="478.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (6 samples, 4.44%)</title><rect x="193.6" y="451.0" width="52.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="196.6" y="462.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.74%)</title><rect x="193.6" y="435.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="196.6" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.74%)</title><rect x="193.6" y="419.0" width="8.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="196.6" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.74%)</title><rect x="193.6" y="403.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.6" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.74%)</title><rect x="193.6" y="387.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="196.6" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.74%)</title><rect x="193.6" y="371.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="196.6" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.74%)</title><rect x="193.6" y="355.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.6" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.74%)</title><rect x="193.6" y="339.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.6" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (3 samples, 2.22%)</title><rect x="202.3" y="435.0" width="26.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="205.3" y="446.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (3 samples, 2.22%)</title><rect x="202.3" y="419.0" width="26.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="205.3" y="430.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (3 samples, 2.22%)</title><rect x="202.3" y="403.0" width="26.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="205.3" y="414.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (3 samples, 2.22%)</title><rect x="202.3" y="387.0" width="26.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="205.3" y="398.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (3 samples, 2.22%)</title><rect x="202.3" y="371.0" width="26.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="205.3" y="382.0">o..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.slice (3 samples, 2.22%)</title><rect x="202.3" y="355.0" width="26.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.3" y="366.0">j..</text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.74%)</title><rect x="228.5" y="435.0" width="8.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.5" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.uncompressedIterator (1 samples, 0.74%)</title><rect x="228.5" y="419.0" width="8.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="231.5" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.&lt;init&gt; (1 samples, 0.74%)</title><rect x="228.5" y="403.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="231.5" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.74%)</title><rect x="237.3" y="435.0" width="8.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="240.3" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.74%)</title><rect x="237.3" y="419.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="240.3" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.74%)</title><rect x="237.3" y="403.0" width="8.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="240.3" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.74%)</title><rect x="237.3" y="387.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="240.3" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.74%)</title><rect x="237.3" y="371.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.3" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.74%)</title><rect x="237.3" y="355.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.3" y="366.0"></text>
</g>
<g>
<title>java/lang/Integer.intValue (1 samples, 0.74%)</title><rect x="237.3" y="339.0" width="8.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="240.3" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.slice (1 samples, 0.74%)</title><rect x="237.3" y="323.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="240.3" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLag (1 samples, 0.74%)</title><rect x="246.0" y="483.0" width="8.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="249.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.74%)</title><rect x="254.7" y="483.0" width="8.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="257.7" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.74%)</title><rect x="254.7" y="467.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.7" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.74%)</title><rect x="254.7" y="451.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="257.7" y="462.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.74%)</title><rect x="254.7" y="435.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.7" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.74%)</title><rect x="254.7" y="419.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="257.7" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.74%)</title><rect x="263.5" y="499.0" width="8.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.74%)</title><rect x="272.2" y="531.0" width="8.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="275.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.74%)</title><rect x="272.2" y="515.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="275.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.74%)</title><rect x="272.2" y="499.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="275.2" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.74%)</title><rect x="272.2" y="483.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="275.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.74%)</title><rect x="272.2" y="467.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="275.2" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.74%)</title><rect x="272.2" y="451.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.2" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.74%)</title><rect x="272.2" y="435.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.2" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.74%)</title><rect x="272.2" y="419.0" width="8.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="275.2" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.74%)</title><rect x="272.2" y="403.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="275.2" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.74%)</title><rect x="272.2" y="387.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.2" y="398.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.74%)</title><rect x="272.2" y="371.0" width="8.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="275.2" y="382.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.74%)</title><rect x="272.2" y="355.0" width="8.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.2" y="366.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.74%)</title><rect x="272.2" y="339.0" width="8.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.2" y="350.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.74%)</title><rect x="272.2" y="323.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="275.2" y="334.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.74%)</title><rect x="272.2" y="307.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.2" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.74%)</title><rect x="281.0" y="531.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.74%)</title><rect x="281.0" y="515.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="284.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.74%)</title><rect x="281.0" y="499.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="284.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.74%)</title><rect x="281.0" y="483.0" width="8.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="284.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.74%)</title><rect x="281.0" y="467.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.74%)</title><rect x="281.0" y="451.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="284.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.74%)</title><rect x="281.0" y="435.0" width="8.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="284.0" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.74%)</title><rect x="281.0" y="419.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="284.0" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.74%)</title><rect x="281.0" y="403.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.74%)</title><rect x="281.0" y="387.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="284.0" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.74%)</title><rect x="281.0" y="371.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.0" y="382.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (1 samples, 0.74%)</title><rect x="281.0" y="355.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="284.0" y="366.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.74%)</title><rect x="281.0" y="339.0" width="8.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="284.0" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 1.48%)</title><rect x="289.7" y="531.0" width="17.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.7" y="542.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (1 samples, 0.74%)</title><rect x="289.7" y="515.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="292.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.74%)</title><rect x="298.4" y="515.0" width="8.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="301.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.74%)</title><rect x="298.4" y="499.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="301.4" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.74%)</title><rect x="298.4" y="483.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="301.4" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.74%)</title><rect x="298.4" y="467.0" width="8.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="301.4" y="478.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.74%)</title><rect x="298.4" y="451.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.4" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.74%)</title><rect x="298.4" y="435.0" width="8.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="301.4" y="446.0"></text>
</g>
<g>
<title>java/lang/Thread.run (63 samples, 46.67%)</title><rect x="307.2" y="595.0" width="550.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.2" y="606.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (63 samples, 46.67%)</title><rect x="307.2" y="579.0" width="550.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="310.2" y="590.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (63 samples, 46.67%)</title><rect x="307.2" y="563.0" width="550.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="310.2" y="574.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/867619451.run (39 samples, 28.89%)</title><rect x="342.1" y="547.0" width="340.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="345.1" y="558.0">com/linecorp/decaton/processor/runtime/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (39 samples, 28.89%)</title><rect x="342.1" y="531.0" width="340.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="345.1" y="542.0">com/linecorp/decaton/processor/runtime/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (39 samples, 28.89%)</title><rect x="342.1" y="515.0" width="340.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="345.1" y="526.0">com/linecorp/decaton/processor/runtime/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (39 samples, 28.89%)</title><rect x="342.1" y="499.0" width="340.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="345.1" y="510.0">com/linecorp/decaton/processor/runtime/Process..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.74%)</title><rect x="342.1" y="483.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="345.1" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (12 samples, 8.89%)</title><rect x="350.9" y="483.0" width="104.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="353.9" y="494.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (12 samples, 8.89%)</title><rect x="350.9" y="467.0" width="104.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="353.9" y="478.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (12 samples, 8.89%)</title><rect x="350.9" y="451.0" width="104.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="353.9" y="462.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 8.89%)</title><rect x="350.9" y="435.0" width="104.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="353.9" y="446.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 8.89%)</title><rect x="350.9" y="419.0" width="104.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="353.9" y="430.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (12 samples, 8.89%)</title><rect x="350.9" y="403.0" width="104.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="353.9" y="414.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 2.96%)</title><rect x="350.9" y="387.0" width="35.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="353.9" y="398.0">co..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.74%)</title><rect x="350.9" y="371.0" width="8.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="353.9" y="382.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.74%)</title><rect x="350.9" y="355.0" width="8.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="353.9" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.74%)</title><rect x="359.6" y="371.0" width="8.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="362.6" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.74%)</title><rect x="359.6" y="355.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="362.6" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 1.48%)</title><rect x="368.4" y="371.0" width="17.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="371.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.74%)</title><rect x="377.1" y="355.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="380.1" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.74%)</title><rect x="377.1" y="339.0" width="8.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="380.1" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.74%)</title><rect x="377.1" y="323.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="380.1" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (7 samples, 5.19%)</title><rect x="385.9" y="387.0" width="61.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="388.9" y="398.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.74%)</title><rect x="385.9" y="371.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="388.9" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 4.44%)</title><rect x="394.6" y="371.0" width="52.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="397.6" y="382.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.74%)</title><rect x="394.6" y="355.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="397.6" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.74%)</title><rect x="394.6" y="339.0" width="8.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="397.6" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.74%)</title><rect x="394.6" y="323.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="397.6" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.74%)</title><rect x="394.6" y="307.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="397.6" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.74%)</title><rect x="394.6" y="291.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="397.6" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.74%)</title><rect x="394.6" y="275.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="397.6" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 3.70%)</title><rect x="403.3" y="355.0" width="43.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="406.3" y="366.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 3.70%)</title><rect x="403.3" y="339.0" width="43.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="406.3" y="350.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 3.70%)</title><rect x="403.3" y="323.0" width="43.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="406.3" y="334.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.48%)</title><rect x="412.1" y="307.0" width="17.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="415.1" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.74%)</title><rect x="412.1" y="291.0" width="8.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="415.1" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.74%)</title><rect x="420.8" y="291.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="423.8" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.74%)</title><rect x="420.8" y="275.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="423.8" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.74%)</title><rect x="420.8" y="259.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="423.8" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 1.48%)</title><rect x="429.6" y="307.0" width="17.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="432.6" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 1.48%)</title><rect x="429.6" y="291.0" width="17.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="432.6" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 1.48%)</title><rect x="429.6" y="275.0" width="17.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="432.6" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 1.48%)</title><rect x="429.6" y="259.0" width="17.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="432.6" y="270.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 1.48%)</title><rect x="429.6" y="243.0" width="17.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="432.6" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.74%)</title><rect x="447.0" y="387.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="450.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.74%)</title><rect x="447.0" y="371.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="450.0" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (24 samples, 17.78%)</title><rect x="455.8" y="483.0" width="209.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="458.8" y="494.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.74%)</title><rect x="455.8" y="467.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="458.8" y="478.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.74%)</title><rect x="455.8" y="451.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="458.8" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.taskData (1 samples, 0.74%)</title><rect x="464.5" y="467.0" width="8.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="467.5" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (2 samples, 1.48%)</title><rect x="473.3" y="467.0" width="17.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="476.3" y="478.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (2 samples, 1.48%)</title><rect x="473.3" y="451.0" width="17.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="476.3" y="462.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (2 samples, 1.48%)</title><rect x="473.3" y="435.0" width="17.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="476.3" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 1.48%)</title><rect x="473.3" y="419.0" width="17.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="476.3" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.74%)</title><rect x="482.0" y="403.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="485.0" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.74%)</title><rect x="482.0" y="387.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="485.0" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (14 samples, 10.37%)</title><rect x="490.7" y="467.0" width="122.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="493.7" y="478.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (14 samples, 10.37%)</title><rect x="490.7" y="451.0" width="122.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="493.7" y="462.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 2.22%)</title><rect x="499.5" y="435.0" width="26.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="502.5" y="446.0">c..</text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.74%)</title><rect x="517.0" y="419.0" width="8.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="520.0" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.recordOffset (1 samples, 0.74%)</title><rect x="525.7" y="435.0" width="8.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="528.7" y="446.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.74%)</title><rect x="534.4" y="435.0" width="8.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="537.4" y="446.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.74%)</title><rect x="534.4" y="419.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="537.4" y="430.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 5.93%)</title><rect x="543.2" y="435.0" width="69.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="546.2" y="446.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 5.93%)</title><rect x="543.2" y="419.0" width="69.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="546.2" y="430.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 2.96%)</title><rect x="543.2" y="403.0" width="34.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="546.2" y="414.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 2.96%)</title><rect x="543.2" y="387.0" width="34.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="546.2" y="398.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 2.96%)</title><rect x="543.2" y="371.0" width="34.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="546.2" y="382.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.48%)</title><rect x="560.7" y="355.0" width="17.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="563.7" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 1.48%)</title><rect x="560.7" y="339.0" width="17.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="563.7" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.74%)</title><rect x="578.1" y="403.0" width="8.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="581.1" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.74%)</title><rect x="578.1" y="387.0" width="8.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="581.1" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.74%)</title><rect x="578.1" y="371.0" width="8.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="581.1" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.74%)</title><rect x="578.1" y="355.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="581.1" y="366.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 2.22%)</title><rect x="586.9" y="403.0" width="26.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="589.9" y="414.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.74%)</title><rect x="604.4" y="387.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="607.4" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.74%)</title><rect x="604.4" y="371.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="607.4" y="382.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.74%)</title><rect x="604.4" y="355.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="607.4" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (3 samples, 2.22%)</title><rect x="613.1" y="467.0" width="26.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="616.1" y="478.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (3 samples, 2.22%)</title><rect x="613.1" y="451.0" width="26.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="616.1" y="462.0">c..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.74%)</title><rect x="613.1" y="435.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="616.1" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.74%)</title><rect x="613.1" y="419.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="616.1" y="430.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.74%)</title><rect x="613.1" y="403.0" width="8.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="616.1" y="414.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.74%)</title><rect x="621.9" y="435.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="624.9" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.74%)</title><rect x="621.9" y="419.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="624.9" y="430.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.74%)</title><rect x="621.9" y="403.0" width="8.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="624.9" y="414.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.74%)</title><rect x="630.6" y="435.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="633.6" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1099853814.linkToTargetMethod (1 samples, 0.74%)</title><rect x="639.3" y="467.0" width="8.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="642.3" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/809762318.invokeStatic_L3_L (1 samples, 0.74%)</title><rect x="639.3" y="451.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="642.3" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/1076529104.get$Lambda (1 samples, 0.74%)</title><rect x="639.3" y="435.0" width="8.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="642.3" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/1076529104.&lt;init&gt; (1 samples, 0.74%)</title><rect x="639.3" y="419.0" width="8.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="642.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.48%)</title><rect x="648.1" y="467.0" width="17.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="651.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.48%)</title><rect x="648.1" y="451.0" width="17.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="651.1" y="462.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.48%)</title><rect x="648.1" y="435.0" width="17.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="651.1" y="446.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.48%)</title><rect x="648.1" y="419.0" width="17.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="651.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.48%)</title><rect x="665.6" y="483.0" width="17.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="668.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.48%)</title><rect x="665.6" y="467.0" width="17.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="668.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.74%)</title><rect x="674.3" y="451.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="677.3" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/1076529104.accept (1 samples, 0.74%)</title><rect x="674.3" y="435.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="677.3" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.74%)</title><rect x="674.3" y="419.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="677.3" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.74%)</title><rect x="674.3" y="403.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="677.3" y="414.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.74%)</title><rect x="674.3" y="387.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="677.3" y="398.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.74%)</title><rect x="674.3" y="371.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="677.3" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.74%)</title><rect x="683.0" y="547.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="686.0" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.74%)</title><rect x="683.0" y="531.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="686.0" y="542.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.74%)</title><rect x="683.0" y="515.0" width="8.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="686.0" y="526.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.74%)</title><rect x="691.8" y="547.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="694.8" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.74%)</title><rect x="691.8" y="531.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="694.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 2.22%)</title><rect x="700.5" y="547.0" width="26.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="703.5" y="558.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 2.22%)</title><rect x="700.5" y="531.0" width="26.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="703.5" y="542.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (2 samples, 1.48%)</title><rect x="709.3" y="515.0" width="17.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="712.3" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/867619451.run (1 samples, 0.74%)</title><rect x="718.0" y="499.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="721.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (15 samples, 11.11%)</title><rect x="726.7" y="547.0" width="131.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="729.7" y="558.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (15 samples, 11.11%)</title><rect x="726.7" y="531.0" width="131.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="729.7" y="542.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (13 samples, 9.63%)</title><rect x="744.2" y="515.0" width="113.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="747.2" y="526.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.74%)</title><rect x="744.2" y="499.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="747.2" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.74%)</title><rect x="744.2" y="483.0" width="8.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="747.2" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.74%)</title><rect x="744.2" y="467.0" width="8.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="747.2" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.74%)</title><rect x="744.2" y="451.0" width="8.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="747.2" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.74%)</title><rect x="744.2" y="435.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="747.2" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.74%)</title><rect x="744.2" y="419.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="747.2" y="430.0"></text>
</g>
<g>
<title>G1AllocRegion::fill_up_remaining_space(HeapRegion*, bool) (1 samples, 0.74%)</title><rect x="744.2" y="403.0" width="8.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="747.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (12 samples, 8.89%)</title><rect x="753.0" y="499.0" width="104.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="756.0" y="510.0">java/util/co..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (10 samples, 7.41%)</title><rect x="770.4" y="483.0" width="87.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="773.4" y="494.0">sun/misc/U..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.74%)</title><rect x="770.4" y="467.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="773.4" y="478.0"></text>
</g>
<g>
<title>Unsafe_Park (9 samples, 6.67%)</title><rect x="779.2" y="467.0" width="78.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="782.2" y="478.0">Unsafe_Park</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.74%)</title><rect x="779.2" y="451.0" width="8.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="782.2" y="462.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.74%)</title><rect x="787.9" y="451.0" width="8.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="790.9" y="462.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.74%)</title><rect x="796.7" y="451.0" width="8.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="799.7" y="462.0"></text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 3.70%)</title><rect x="805.4" y="451.0" width="43.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="808.4" y="462.0">__pt..</text>
</g>
<g>
<title>_init (1 samples, 0.74%)</title><rect x="849.1" y="451.0" width="8.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="852.1" y="462.0"></text>
</g>
<g>
<title>start_thread (38 samples, 28.15%)</title><rect x="857.9" y="595.0" width="332.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="860.9" y="606.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (38 samples, 28.15%)</title><rect x="857.9" y="579.0" width="332.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="860.9" y="590.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 9.63%)</title><rect x="857.9" y="563.0" width="113.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="860.9" y="574.0">GangWorker::lo..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.74%)</title><rect x="857.9" y="547.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="860.9" y="558.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.74%)</title><rect x="857.9" y="531.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="860.9" y="542.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.74%)</title><rect x="857.9" y="515.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="860.9" y="526.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (12 samples, 8.89%)</title><rect x="866.6" y="547.0" width="104.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="869.6" y="558.0">G1ParTask::w..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 5.93%)</title><rect x="866.6" y="531.0" width="69.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="869.6" y="542.0">G1ParEv..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 3.70%)</title><rect x="866.6" y="515.0" width="43.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="869.6" y="526.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.48%)</title><rect x="892.8" y="499.0" width="17.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="895.8" y="510.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.74%)</title><rect x="901.6" y="483.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="904.6" y="494.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 2.22%)</title><rect x="910.3" y="515.0" width="26.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="913.3" y="526.0">G..</text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 2.96%)</title><rect x="936.5" y="531.0" width="35.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="939.5" y="542.0">G1..</text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 2.96%)</title><rect x="936.5" y="515.0" width="35.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="939.5" y="526.0">G1..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.74%)</title><rect x="936.5" y="499.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="939.5" y="510.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.74%)</title><rect x="936.5" y="483.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="939.5" y="494.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer_helper(CardTableEntryClosure*, unsigned int, BufferNode*) (1 samples, 0.74%)</title><rect x="936.5" y="467.0" width="8.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="939.5" y="478.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.74%)</title><rect x="936.5" y="451.0" width="8.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="939.5" y="462.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) [clone .part.174] (1 samples, 0.74%)</title><rect x="936.5" y="435.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="939.5" y="446.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.74%)</title><rect x="936.5" y="419.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="939.5" y="430.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (3 samples, 2.22%)</title><rect x="945.3" y="499.0" width="26.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="948.3" y="510.0">G..</text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (3 samples, 2.22%)</title><rect x="945.3" y="483.0" width="26.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="948.3" y="494.0">G..</text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (3 samples, 2.22%)</title><rect x="945.3" y="467.0" width="26.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="948.3" y="478.0">S..</text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (3 samples, 2.22%)</title><rect x="945.3" y="451.0" width="26.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="948.3" y="462.0">G..</text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (2 samples, 1.48%)</title><rect x="945.3" y="435.0" width="17.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="948.3" y="446.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.74%)</title><rect x="945.3" y="419.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="948.3" y="430.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.74%)</title><rect x="945.3" y="403.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="948.3" y="414.0"></text>
</g>
<g>
<title>G1CodeRootSet::add(nmethod*) (1 samples, 0.74%)</title><rect x="945.3" y="387.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="948.3" y="398.0"></text>
</g>
<g>
<title>nmethod::test_set_oops_do_mark() (1 samples, 0.74%)</title><rect x="954.0" y="419.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="957.0" y="430.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.74%)</title><rect x="962.7" y="435.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="965.7" y="446.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (25 samples, 18.52%)</title><rect x="971.5" y="563.0" width="218.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="974.5" y="574.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (25 samples, 18.52%)</title><rect x="971.5" y="547.0" width="218.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="974.5" y="558.0">CompileBroker::compiler_threa..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (25 samples, 18.52%)</title><rect x="971.5" y="531.0" width="218.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="974.5" y="542.0">CompileBroker::invoke_compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (23 samples, 17.04%)</title><rect x="971.5" y="515.0" width="201.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="974.5" y="526.0">C2Compiler::compile_method..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (23 samples, 17.04%)</title><rect x="971.5" y="499.0" width="201.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="974.5" y="510.0">Compile::Compile(ciEnv*, C..</text>
</g>
<g>
<title>Compile::Code_Gen() (13 samples, 9.63%)</title><rect x="971.5" y="483.0" width="113.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="974.5" y="494.0">Compile::Code_..</text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.74%)</title><rect x="971.5" y="467.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="974.5" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.74%)</title><rect x="971.5" y="451.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="974.5" y="462.0"></text>
</g>
<g>
<title>PhaseCFG::do_DFS(Tarjan*, unsigned int) (1 samples, 0.74%)</title><rect x="971.5" y="435.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="974.5" y="446.0"></text>
</g>
<g>
<title>Block_Stack::most_frequent_successor(Block*) (1 samples, 0.74%)</title><rect x="971.5" y="419.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.5" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (12 samples, 8.89%)</title><rect x="980.2" y="467.0" width="104.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="983.2" y="478.0">PhaseChaitin..</text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.48%)</title><rect x="980.2" y="451.0" width="17.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="983.2" y="462.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 1.48%)</title><rect x="980.2" y="435.0" width="17.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="983.2" y="446.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.74%)</title><rect x="989.0" y="419.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="992.0" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.74%)</title><rect x="997.7" y="451.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1000.7" y="462.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.74%)</title><rect x="997.7" y="435.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1000.7" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.74%)</title><rect x="1006.4" y="451.0" width="8.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1009.4" y="462.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.74%)</title><rect x="1006.4" y="435.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1009.4" y="446.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.74%)</title><rect x="1006.4" y="419.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1009.4" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (4 samples, 2.96%)</title><rect x="1015.2" y="451.0" width="34.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1018.2" y="462.0">Ph..</text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.74%)</title><rect x="1032.7" y="435.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1035.7" y="446.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.74%)</title><rect x="1041.4" y="435.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1044.4" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.74%)</title><rect x="1050.1" y="451.0" width="8.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1053.1" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.74%)</title><rect x="1058.9" y="451.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1061.9" y="462.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.74%)</title><rect x="1067.6" y="451.0" width="8.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1070.6" y="462.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.74%)</title><rect x="1076.4" y="451.0" width="8.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1079.4" y="462.0"></text>
</g>
<g>
<title>Compile::Optimize() (9 samples, 6.67%)</title><rect x="1085.1" y="483.0" width="78.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1088.1" y="494.0">Compile::..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 1.48%)</title><rect x="1085.1" y="467.0" width="17.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1088.1" y="478.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 1.48%)</title><rect x="1085.1" y="451.0" width="17.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1088.1" y="462.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.74%)</title><rect x="1093.9" y="435.0" width="8.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1096.9" y="446.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 1.48%)</title><rect x="1102.6" y="467.0" width="17.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.6" y="478.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.74%)</title><rect x="1111.3" y="451.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.3" y="462.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.74%)</title><rect x="1111.3" y="435.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.3" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (5 samples, 3.70%)</title><rect x="1120.1" y="467.0" width="43.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1123.1" y="478.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.48%)</title><rect x="1120.1" y="451.0" width="17.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.1" y="462.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.74%)</title><rect x="1128.8" y="435.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.8" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.48%)</title><rect x="1137.6" y="451.0" width="17.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.6" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.74%)</title><rect x="1146.3" y="435.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.3" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.74%)</title><rect x="1155.0" y="451.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.0" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.74%)</title><rect x="1155.0" y="435.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.0" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.74%)</title><rect x="1155.0" y="419.0" width="8.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.0" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1163.8" y="483.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.8" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.74%)</title><rect x="1163.8" y="467.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.74%)</title><rect x="1163.8" y="451.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.74%)</title><rect x="1163.8" y="435.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.74%)</title><rect x="1163.8" y="419.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.74%)</title><rect x="1163.8" y="403.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.8" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1163.8" y="387.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.8" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.74%)</title><rect x="1163.8" y="371.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.74%)</title><rect x="1163.8" y="355.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.74%)</title><rect x="1163.8" y="339.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.74%)</title><rect x="1163.8" y="323.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.74%)</title><rect x="1163.8" y="307.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.8" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1163.8" y="291.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.8" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.74%)</title><rect x="1163.8" y="275.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.74%)</title><rect x="1163.8" y="259.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.74%)</title><rect x="1163.8" y="243.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.74%)</title><rect x="1163.8" y="227.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.74%)</title><rect x="1163.8" y="211.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.8" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1163.8" y="195.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.8" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.74%)</title><rect x="1163.8" y="179.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.74%)</title><rect x="1163.8" y="163.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.74%)</title><rect x="1163.8" y="147.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.74%)</title><rect x="1163.8" y="131.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.74%)</title><rect x="1163.8" y="115.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.8" y="126.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1163.8" y="99.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.8" y="110.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.74%)</title><rect x="1163.8" y="83.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.8" y="94.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.74%)</title><rect x="1163.8" y="67.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.8" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.74%)</title><rect x="1163.8" y="51.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.8" y="62.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.74%)</title><rect x="1163.8" y="35.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.8" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.48%)</title><rect x="1172.5" y="515.0" width="17.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.5" y="526.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.48%)</title><rect x="1172.5" y="499.0" width="17.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.5" y="510.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.48%)</title><rect x="1172.5" y="483.0" width="17.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.5" y="494.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.48%)</title><rect x="1172.5" y="467.0" width="17.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.5" y="478.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.74%)</title><rect x="1172.5" y="451.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.5" y="462.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.74%)</title><rect x="1172.5" y="435.0" width="8.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.5" y="446.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.74%)</title><rect x="1172.5" y="419.0" width="8.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.5" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.74%)</title><rect x="1172.5" y="403.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.5" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.74%)</title><rect x="1172.5" y="387.0" width="8.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.5" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.74%)</title><rect x="1172.5" y="371.0" width="8.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.5" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.74%)</title><rect x="1172.5" y="355.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.5" y="366.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.74%)</title><rect x="1172.5" y="339.0" width="8.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.5" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.74%)</title><rect x="1172.5" y="323.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.5" y="334.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.74%)</title><rect x="1172.5" y="307.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.5" y="318.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.74%)</title><rect x="1172.5" y="291.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.5" y="302.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.74%)</title><rect x="1172.5" y="275.0" width="8.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.5" y="286.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.74%)</title><rect x="1172.5" y="259.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.5" y="270.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.74%)</title><rect x="1172.5" y="243.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.5" y="254.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.74%)</title><rect x="1172.5" y="227.0" width="8.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.5" y="238.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::OverpassLookupMode) const (1 samples, 0.74%)</title><rect x="1172.5" y="211.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.5" y="222.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.74%)</title><rect x="1172.5" y="195.0" width="8.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.5" y="206.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt;*, Symbol*) (1 samples, 0.74%)</title><rect x="1172.5" y="179.0" width="8.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1175.5" y="190.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.74%)</title><rect x="1181.3" y="451.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="462.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.74%)</title><rect x="1181.3" y="435.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="446.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.74%)</title><rect x="1181.3" y="419.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.3" y="430.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.74%)</title><rect x="1181.3" y="403.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="414.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.74%)</title><rect x="1181.3" y="387.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.3" y="398.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.74%)</title><rect x="1181.3" y="371.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="382.0"></text>
</g>
<g>
<title>LinearScanWalker::free_collect_inactive_fixed(Interval*) (1 samples, 0.74%)</title><rect x="1181.3" y="355.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.3" y="366.0"></text>
</g>
</g>
</svg>
