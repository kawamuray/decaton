<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,360 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2035.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2019.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2003.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1987.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1971.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1955.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1939.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1923.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1907.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1891.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1875.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1859.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1827.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1811.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1795.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1779.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1763.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1747.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1731.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1715.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1699.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1683.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1667.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1651.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1635.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1619.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1603.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1587.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1571.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1555.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1539.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1523.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1507.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1491.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1475.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1459.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1443.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1427.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1395.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1379.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1315.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1299.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1283.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1267.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1251.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1235.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1219.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1203.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1187.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1171.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1155.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1107.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1091.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="979.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="963.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="947.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="931.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="915.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="899.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="835.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="819.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="803.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="787.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="771.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="755.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="739.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="723.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="707.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="691.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="675.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="659.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="643.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="627.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="611.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="595.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="579.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="563.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="547.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="531.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="515.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="499.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="483.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="467.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="451.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="435.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="419.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="403.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="387.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="371.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="355.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="339.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="323.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="307.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="291.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="275.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="259.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="243.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="227.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="211.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="195.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="179.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="163.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="147.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="131.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="115.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="99.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="83.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="67.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="51.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="10.0" y="35.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>__GI___mprotect (1 samples, 0.07%)</title><rect x="10.9" y="2035.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.9" y="2046.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (266 samples, 19.56%)</title><rect x="11.7" y="2035.0" width="230.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.7" y="2046.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (266 samples, 19.56%)</title><rect x="11.7" y="2019.0" width="230.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.7" y="2030.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (5 samples, 0.37%)</title><rect x="12.6" y="2003.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.6" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.37%)</title><rect x="12.6" y="1987.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.6" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$263/699474138.accept (5 samples, 0.37%)</title><rect x="12.6" y="1971.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.6" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (5 samples, 0.37%)</title><rect x="12.6" y="1955.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.6" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.37%)</title><rect x="12.6" y="1939.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.6" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.29%)</title><rect x="13.5" y="1923.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.5" y="1934.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.07%)</title><rect x="16.1" y="1907.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.1" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.29%)</title><rect x="16.9" y="2003.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.9" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.29%)</title><rect x="16.9" y="1987.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.9" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.22%)</title><rect x="17.8" y="1971.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.8" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.22%)</title><rect x="17.8" y="1955.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.8" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.07%)</title><rect x="17.8" y="1939.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.8" y="1950.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.07%)</title><rect x="17.8" y="1923.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.8" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="17.8" y="1907.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.8" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="17.8" y="1891.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.8" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="17.8" y="1875.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.8" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.15%)</title><rect x="18.7" y="1939.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.7" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.15%)</title><rect x="18.7" y="1923.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.7" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.15%)</title><rect x="18.7" y="1907.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.7" y="1918.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="18.7" y="1891.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.7" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.07%)</title><rect x="18.7" y="1875.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.07%)</title><rect x="19.5" y="1891.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="22.5" y="1902.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (189 samples, 13.90%)</title><rect x="20.4" y="2003.0" width="164.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.4" y="2014.0">java/lang/Iterable.fo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$262/1314265891.accept (184 samples, 13.53%)</title><rect x="20.4" y="1987.0" width="159.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.4" y="1998.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$58 (184 samples, 13.53%)</title><rect x="20.4" y="1971.0" width="159.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.4" y="1982.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.07%)</title><rect x="21.3" y="1955.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.3" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (134 samples, 9.85%)</title><rect x="22.1" y="1955.0" width="116.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.1" y="1966.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (134 samples, 9.85%)</title><rect x="22.1" y="1939.0" width="116.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.1" y="1950.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (134 samples, 9.85%)</title><rect x="22.1" y="1923.0" width="116.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="25.1" y="1934.0">com/linecorp/d..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (134 samples, 9.85%)</title><rect x="22.1" y="1907.0" width="116.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.1" y="1918.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (134 samples, 9.85%)</title><rect x="22.1" y="1891.0" width="116.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="25.1" y="1902.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (123 samples, 9.04%)</title><rect x="31.7" y="1875.0" width="106.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.7" y="1886.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (94 samples, 6.91%)</title><rect x="31.7" y="1859.0" width="81.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="34.7" y="1870.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (94 samples, 6.91%)</title><rect x="31.7" y="1843.0" width="81.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.7" y="1854.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (94 samples, 6.91%)</title><rect x="31.7" y="1827.0" width="81.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.7" y="1838.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (94 samples, 6.91%)</title><rect x="31.7" y="1811.0" width="81.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="34.7" y="1822.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (94 samples, 6.91%)</title><rect x="31.7" y="1795.0" width="81.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.7" y="1806.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (61 samples, 4.49%)</title><rect x="60.3" y="1779.0" width="53.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="63.3" y="1790.0">sun/m..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.07%)</title><rect x="62.1" y="1763.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="65.1" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Unpark (53 samples, 3.90%)</title><rect x="62.9" y="1763.0" width="46.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="65.9" y="1774.0">Unsa..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.15%)</title><rect x="64.7" y="1747.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="67.7" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.07%)</title><rect x="66.4" y="1747.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="69.4" y="1758.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="67.3" y="1747.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="70.3" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (37 samples, 2.72%)</title><rect x="68.1" y="1747.0" width="32.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="71.1" y="1758.0">__..</text>
</g>
<g>
<title>pthread_mutex_lock (10 samples, 0.74%)</title><rect x="100.2" y="1747.0" width="8.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="103.2" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.29%)</title><rect x="108.9" y="1763.0" width="3.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="111.9" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.07%)</title><rect x="112.4" y="1763.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="115.4" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (29 samples, 2.13%)</title><rect x="113.2" y="1859.0" width="25.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="116.2" y="1870.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (29 samples, 2.13%)</title><rect x="113.2" y="1843.0" width="25.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="116.2" y="1854.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (29 samples, 2.13%)</title><rect x="113.2" y="1827.0" width="25.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="116.2" y="1838.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (29 samples, 2.13%)</title><rect x="113.2" y="1811.0" width="25.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="116.2" y="1822.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (14 samples, 1.03%)</title><rect x="138.4" y="1955.0" width="12.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="141.4" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (8 samples, 0.59%)</title><rect x="143.6" y="1939.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="146.6" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.isRegressing (1 samples, 0.07%)</title><rect x="149.7" y="1923.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="152.7" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (7 samples, 0.51%)</title><rect x="150.6" y="1955.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="153.6" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.51%)</title><rect x="150.6" y="1939.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="153.6" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.51%)</title><rect x="150.6" y="1923.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="153.6" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (27 samples, 1.99%)</title><rect x="156.6" y="1955.0" width="23.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="159.6" y="1966.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (25 samples, 1.84%)</title><rect x="158.4" y="1939.0" width="21.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="161.4" y="1950.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (20 samples, 1.47%)</title><rect x="158.4" y="1923.0" width="17.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="161.4" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (11 samples, 0.81%)</title><rect x="161.0" y="1907.0" width="9.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="164.0" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (11 samples, 0.81%)</title><rect x="161.0" y="1891.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="164.0" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (11 samples, 0.81%)</title><rect x="161.0" y="1875.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="164.0" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="166.2" y="1859.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="169.2" y="1870.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="166.2" y="1843.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="169.2" y="1854.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.07%)</title><rect x="166.2" y="1827.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="169.2" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.29%)</title><rect x="167.0" y="1859.0" width="3.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="170.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.15%)</title><rect x="170.5" y="1907.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="173.5" y="1918.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.22%)</title><rect x="172.2" y="1907.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="175.2" y="1918.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="174.9" y="1907.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="177.9" y="1918.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.37%)</title><rect x="175.7" y="1923.0" width="4.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="178.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.07%)</title><rect x="180.1" y="1987.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.1" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.07%)</title><rect x="180.1" y="1971.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="180.1" y="1955.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="183.1" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.07%)</title><rect x="180.1" y="1939.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="183.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.29%)</title><rect x="180.9" y="1987.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="183.9" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.29%)</title><rect x="180.9" y="1971.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="183.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.29%)</title><rect x="180.9" y="1955.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="183.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.29%)</title><rect x="180.9" y="1939.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="183.9" y="1950.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.07%)</title><rect x="183.5" y="1923.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="186.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (66 samples, 4.85%)</title><rect x="184.4" y="2003.0" width="57.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="187.4" y="2014.0">org/ap..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="184.4" y="1987.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="187.4" y="1998.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="184.4" y="1971.0" width="0.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="187.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (65 samples, 4.78%)</title><rect x="185.3" y="1987.0" width="56.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="188.3" y="1998.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (40 samples, 2.94%)</title><rect x="185.3" y="1971.0" width="34.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="188.3" y="1982.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.07%)</title><rect x="185.3" y="1955.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="188.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.07%)</title><rect x="185.3" y="1939.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="188.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.07%)</title><rect x="185.3" y="1923.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="188.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (39 samples, 2.87%)</title><rect x="186.1" y="1955.0" width="33.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="189.1" y="1966.0">or..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="186.1" y="1939.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="189.1" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="186.1" y="1923.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="189.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.07%)</title><rect x="186.1" y="1907.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (38 samples, 2.79%)</title><rect x="187.0" y="1939.0" width="33.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="190.0" y="1950.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (33 samples, 2.43%)</title><rect x="187.0" y="1923.0" width="28.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="190.0" y="1934.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (33 samples, 2.43%)</title><rect x="187.0" y="1907.0" width="28.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="190.0" y="1918.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (18 samples, 1.32%)</title><rect x="188.7" y="1891.0" width="15.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="191.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (11 samples, 0.81%)</title><rect x="194.8" y="1875.0" width="9.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="197.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (11 samples, 0.81%)</title><rect x="194.8" y="1859.0" width="9.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="197.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (11 samples, 0.81%)</title><rect x="194.8" y="1843.0" width="9.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="197.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (11 samples, 0.81%)</title><rect x="194.8" y="1827.0" width="9.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="197.8" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (11 samples, 0.81%)</title><rect x="194.8" y="1811.0" width="9.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="197.8" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (11 samples, 0.81%)</title><rect x="194.8" y="1795.0" width="9.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="197.8" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (11 samples, 0.81%)</title><rect x="194.8" y="1779.0" width="9.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="197.8" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (13 samples, 0.96%)</title><rect x="204.4" y="1891.0" width="11.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="207.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (13 samples, 0.96%)</title><rect x="204.4" y="1875.0" width="11.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (13 samples, 0.96%)</title><rect x="204.4" y="1859.0" width="11.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="207.4" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="204.4" y="1843.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="207.4" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="204.4" y="1827.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="207.4" y="1838.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.07%)</title><rect x="204.4" y="1811.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="207.4" y="1822.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (12 samples, 0.88%)</title><rect x="205.2" y="1843.0" width="10.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="208.2" y="1854.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (7 samples, 0.51%)</title><rect x="208.7" y="1827.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.7" y="1838.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="213.0" y="1811.0" width="1.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="216.0" y="1822.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="214.8" y="1827.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="217.8" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.07%)</title><rect x="215.6" y="1923.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="218.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.07%)</title><rect x="215.6" y="1907.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="218.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="215.6" y="1891.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="218.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="215.6" y="1875.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="218.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="215.6" y="1859.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="218.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="215.6" y="1843.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="218.6" y="1854.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="215.6" y="1827.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="218.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.15%)</title><rect x="216.5" y="1923.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="219.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.15%)</title><rect x="216.5" y="1907.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="219.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.15%)</title><rect x="216.5" y="1891.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="219.5" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.15%)</title><rect x="216.5" y="1875.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="219.5" y="1886.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="216.5" y="1859.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="219.5" y="1870.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="217.4" y="1859.0" width="0.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="220.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.07%)</title><rect x="218.2" y="1923.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="221.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.07%)</title><rect x="218.2" y="1907.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="221.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.07%)</title><rect x="218.2" y="1891.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.2" y="1902.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="218.2" y="1875.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.2" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="218.2" y="1859.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.07%)</title><rect x="219.1" y="1923.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (8 samples, 0.59%)</title><rect x="220.0" y="1971.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="223.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.44%)</title><rect x="220.0" y="1955.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.29%)</title><rect x="220.0" y="1939.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="223.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.15%)</title><rect x="220.0" y="1923.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="223.0" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.15%)</title><rect x="220.0" y="1907.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.0" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.15%)</title><rect x="220.0" y="1891.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.0" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (2 samples, 0.15%)</title><rect x="220.0" y="1875.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.15%)</title><rect x="221.7" y="1923.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.15%)</title><rect x="221.7" y="1907.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="224.7" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.15%)</title><rect x="221.7" y="1891.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="224.7" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.15%)</title><rect x="221.7" y="1875.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.15%)</title><rect x="221.7" y="1859.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.7" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.15%)</title><rect x="221.7" y="1843.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.7" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.15%)</title><rect x="221.7" y="1827.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="224.7" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="221.7" y="1811.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="224.7" y="1822.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.07%)</title><rect x="221.7" y="1795.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="224.7" y="1806.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="222.6" y="1811.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="225.6" y="1822.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="222.6" y="1795.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="225.6" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="222.6" y="1779.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="225.6" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="222.6" y="1763.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="225.6" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="222.6" y="1747.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.6" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$229/1566624905.test (1 samples, 0.07%)</title><rect x="222.6" y="1731.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="225.6" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.15%)</title><rect x="223.4" y="1939.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="226.4" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.15%)</title><rect x="223.4" y="1923.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.4" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.15%)</title><rect x="223.4" y="1907.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="226.4" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.15%)</title><rect x="223.4" y="1891.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.4" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.15%)</title><rect x="223.4" y="1875.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.4" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.15%)</title><rect x="223.4" y="1859.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="226.4" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.15%)</title><rect x="223.4" y="1843.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="226.4" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.15%)</title><rect x="223.4" y="1827.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="226.4" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (2 samples, 0.15%)</title><rect x="223.4" y="1811.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="226.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.15%)</title><rect x="225.2" y="1955.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="228.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.07%)</title><rect x="225.2" y="1939.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="228.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.07%)</title><rect x="225.2" y="1923.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.07%)</title><rect x="225.2" y="1907.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.2" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.07%)</title><rect x="225.2" y="1891.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.2" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.07%)</title><rect x="225.2" y="1875.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="228.2" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="225.2" y="1859.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="228.2" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.07%)</title><rect x="225.2" y="1843.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="228.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.07%)</title><rect x="226.0" y="1939.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (8 samples, 0.59%)</title><rect x="226.9" y="1971.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (7 samples, 0.51%)</title><rect x="226.9" y="1955.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (7 samples, 0.51%)</title><rect x="226.9" y="1939.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="229.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="227.8" y="1923.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="227.8" y="1907.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.07%)</title><rect x="227.8" y="1891.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.07%)</title><rect x="227.8" y="1875.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="230.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="227.8" y="1859.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (5 samples, 0.37%)</title><rect x="228.6" y="1923.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.6" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.15%)</title><rect x="228.6" y="1907.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="231.6" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.15%)</title><rect x="228.6" y="1891.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.6" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.15%)</title><rect x="228.6" y="1875.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="231.6" y="1886.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.15%)</title><rect x="228.6" y="1859.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="231.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.07%)</title><rect x="230.4" y="1907.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.07%)</title><rect x="230.4" y="1891.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="233.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.07%)</title><rect x="230.4" y="1875.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="233.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.07%)</title><rect x="230.4" y="1859.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="233.4" y="1870.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.07%)</title><rect x="230.4" y="1843.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="233.4" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.07%)</title><rect x="230.4" y="1827.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="233.4" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.07%)</title><rect x="230.4" y="1811.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="233.4" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (1 samples, 0.07%)</title><rect x="230.4" y="1795.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.4" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.15%)</title><rect x="231.3" y="1907.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.15%)</title><rect x="231.3" y="1891.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.15%)</title><rect x="231.3" y="1875.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.15%)</title><rect x="231.3" y="1859.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.15%)</title><rect x="231.3" y="1843.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.3" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.15%)</title><rect x="231.3" y="1827.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="234.3" y="1838.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.07%)</title><rect x="232.1" y="1811.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.1" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.07%)</title><rect x="233.0" y="1955.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.07%)</title><rect x="233.0" y="1939.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="236.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="233.0" y="1923.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="236.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="233.0" y="1907.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="236.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.07%)</title><rect x="233.0" y="1891.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.07%)</title><rect x="233.0" y="1875.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="236.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.07%)</title><rect x="233.0" y="1859.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.07%)</title><rect x="233.0" y="1843.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.07%)</title><rect x="233.0" y="1827.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="236.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.07%)</title><rect x="233.0" y="1811.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="236.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (8 samples, 0.59%)</title><rect x="233.9" y="1971.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="236.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.37%)</title><rect x="236.5" y="1955.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.5" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.22%)</title><rect x="237.3" y="1939.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="240.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$255/527687506.accept (2 samples, 0.15%)</title><rect x="238.2" y="1923.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.15%)</title><rect x="238.2" y="1907.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="241.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (2 samples, 0.15%)</title><rect x="238.2" y="1891.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="241.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (2 samples, 0.15%)</title><rect x="238.2" y="1875.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="241.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (2 samples, 0.15%)</title><rect x="238.2" y="1859.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="241.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$LeaderAndEpoch.equals (1 samples, 0.07%)</title><rect x="239.1" y="1843.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="242.1" y="1854.0"></text>
</g>
<g>
<title>java/util/Optional.equals (1 samples, 0.07%)</title><rect x="239.1" y="1827.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="242.1" y="1838.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 0.07%)</title><rect x="239.1" y="1811.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.1" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.07%)</title><rect x="239.9" y="1939.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="242.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.07%)</title><rect x="239.9" y="1923.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="242.9" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="239.9" y="1907.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.9" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="239.9" y="1891.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="242.9" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="239.9" y="1875.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.9" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="239.9" y="1859.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.9" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="239.9" y="1843.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="242.9" y="1854.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="239.9" y="1827.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="242.9" y="1838.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="239.9" y="1811.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.9" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="239.9" y="1795.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="242.9" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="239.9" y="1779.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="242.9" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="239.9" y="1763.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="242.9" y="1774.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="239.9" y="1747.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="242.9" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.07%)</title><rect x="240.8" y="1971.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="243.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="240.8" y="1955.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="240.8" y="1939.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="243.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="240.8" y="1923.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="243.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="240.8" y="1907.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="243.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="241.7" y="2003.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="244.7" y="2014.0"></text>
</g>
<g>
<title>java/lang/Thread.run (683 samples, 50.22%)</title><rect x="242.5" y="2035.0" width="592.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.5" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (683 samples, 50.22%)</title><rect x="242.5" y="2019.0" width="592.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.5" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (683 samples, 50.22%)</title><rect x="242.5" y="2003.0" width="592.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="245.5" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/777643363.run (438 samples, 32.21%)</title><rect x="242.5" y="1987.0" width="380.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="245.5" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (438 samples, 32.21%)</title><rect x="242.5" y="1971.0" width="380.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.5" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (438 samples, 32.21%)</title><rect x="242.5" y="1955.0" width="380.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.5" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit..</text>
</g>
<g>
<title>__clock_gettime (12 samples, 0.88%)</title><rect x="244.3" y="1939.0" width="10.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="247.3" y="1950.0"></text>
</g>
<g>
<title>[vdso] (11 samples, 0.81%)</title><rect x="245.1" y="1923.0" width="9.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="248.1" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (422 samples, 31.03%)</title><rect x="254.7" y="1939.0" width="366.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="257.7" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipe..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.15%)</title><rect x="263.4" y="1923.0" width="1.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="266.4" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (136 samples, 10.00%)</title><rect x="265.1" y="1923.0" width="118.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.1" y="1934.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (136 samples, 10.00%)</title><rect x="265.1" y="1907.0" width="118.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="268.1" y="1918.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (136 samples, 10.00%)</title><rect x="265.1" y="1891.0" width="118.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.1" y="1902.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (136 samples, 10.00%)</title><rect x="265.1" y="1875.0" width="118.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.1" y="1886.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (136 samples, 10.00%)</title><rect x="265.1" y="1859.0" width="118.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.1" y="1870.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (136 samples, 10.00%)</title><rect x="265.1" y="1843.0" width="118.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.1" y="1854.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (39 samples, 2.87%)</title><rect x="265.1" y="1827.0" width="33.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="268.1" y="1838.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (13 samples, 0.96%)</title><rect x="265.1" y="1811.0" width="11.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (13 samples, 0.96%)</title><rect x="265.1" y="1795.0" width="11.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (7 samples, 0.51%)</title><rect x="265.1" y="1779.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="268.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (6 samples, 0.44%)</title><rect x="271.2" y="1779.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (2 samples, 0.15%)</title><rect x="272.0" y="1763.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.0" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.15%)</title><rect x="273.8" y="1763.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="276.8" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="274.6" y="1747.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="277.6" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="274.6" y="1731.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="277.6" y="1742.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.07%)</title><rect x="275.5" y="1763.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="278.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (26 samples, 1.91%)</title><rect x="276.4" y="1811.0" width="22.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="279.4" y="1822.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (26 samples, 1.91%)</title><rect x="276.4" y="1795.0" width="22.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="279.4" y="1806.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (14 samples, 1.03%)</title><rect x="276.4" y="1779.0" width="12.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="279.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (1 samples, 0.07%)</title><rect x="284.2" y="1763.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="287.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF32 (1 samples, 0.07%)</title><rect x="285.0" y="1763.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="288.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.ensureLoaded (2 samples, 0.15%)</title><rect x="285.9" y="1763.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.9" y="1774.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.07%)</title><rect x="287.6" y="1763.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (7 samples, 0.51%)</title><rect x="288.5" y="1779.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="291.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (3 samples, 0.22%)</title><rect x="290.2" y="1763.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="293.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.07%)</title><rect x="290.2" y="1747.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="293.2" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="290.2" y="1731.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="293.2" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="290.2" y="1715.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="293.2" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="290.2" y="1699.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="293.2" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="290.2" y="1683.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="293.2" y="1694.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="290.2" y="1667.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="293.2" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.15%)</title><rect x="291.1" y="1747.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="294.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (2 samples, 0.15%)</title><rect x="292.9" y="1763.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (5 samples, 0.37%)</title><rect x="294.6" y="1779.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="297.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.07%)</title><rect x="295.5" y="1763.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="298.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.07%)</title><rect x="296.3" y="1763.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="299.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (2 samples, 0.15%)</title><rect x="297.2" y="1763.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (87 samples, 6.40%)</title><rect x="298.9" y="1827.0" width="75.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.9" y="1838.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.29%)</title><rect x="298.9" y="1811.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="301.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (4 samples, 0.29%)</title><rect x="298.9" y="1795.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="301.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.15%)</title><rect x="298.9" y="1779.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="301.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.15%)</title><rect x="298.9" y="1763.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="301.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (2 samples, 0.15%)</title><rect x="300.7" y="1779.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.15%)</title><rect x="300.7" y="1763.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="303.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (7 samples, 0.51%)</title><rect x="302.4" y="1811.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="305.4" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.51%)</title><rect x="302.4" y="1795.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="305.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.22%)</title><rect x="305.9" y="1779.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="308.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.66%)</title><rect x="308.5" y="1811.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="311.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.59%)</title><rect x="309.3" y="1795.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="312.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.51%)</title><rect x="309.3" y="1779.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="312.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (5 samples, 0.37%)</title><rect x="311.1" y="1763.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="314.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.22%)</title><rect x="312.8" y="1747.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="315.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="315.4" y="1779.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="318.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.44%)</title><rect x="316.3" y="1811.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="319.3" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.22%)</title><rect x="317.1" y="1795.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="320.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.15%)</title><rect x="319.8" y="1795.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="322.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="320.6" y="1779.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="323.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.07%)</title><rect x="320.6" y="1763.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="323.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.07%)</title><rect x="320.6" y="1747.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="323.6" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="320.6" y="1731.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="323.6" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="320.6" y="1715.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="323.6" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="320.6" y="1699.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="323.6" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (61 samples, 4.49%)</title><rect x="321.5" y="1811.0" width="52.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="324.5" y="1822.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 0.88%)</title><rect x="323.2" y="1795.0" width="10.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="326.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.07%)</title><rect x="326.7" y="1779.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="329.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.07%)</title><rect x="326.7" y="1763.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="329.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.07%)</title><rect x="326.7" y="1747.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="329.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.07%)</title><rect x="327.6" y="1779.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="330.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.07%)</title><rect x="327.6" y="1763.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="330.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (6 samples, 0.44%)</title><rect x="328.4" y="1779.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="331.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (47 samples, 3.46%)</title><rect x="333.6" y="1795.0" width="40.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="336.6" y="1806.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (47 samples, 3.46%)</title><rect x="333.6" y="1779.0" width="40.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="336.6" y="1790.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (42 samples, 3.09%)</title><rect x="337.1" y="1763.0" width="36.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="340.1" y="1774.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 0.96%)</title><rect x="340.6" y="1747.0" width="11.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="343.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.44%)</title><rect x="344.0" y="1731.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="347.0" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.44%)</title><rect x="344.0" y="1715.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="347.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.44%)</title><rect x="344.0" y="1699.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="347.0" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.29%)</title><rect x="345.8" y="1683.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="348.8" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.29%)</title><rect x="345.8" y="1667.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="348.8" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.22%)</title><rect x="346.6" y="1651.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="349.6" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.07%)</title><rect x="348.4" y="1635.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="351.4" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.22%)</title><rect x="349.3" y="1731.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="352.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.22%)</title><rect x="349.3" y="1715.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="352.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (10 samples, 0.74%)</title><rect x="351.9" y="1747.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (9 samples, 0.66%)</title><rect x="352.7" y="1731.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="355.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (9 samples, 0.66%)</title><rect x="352.7" y="1715.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="355.7" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (9 samples, 0.66%)</title><rect x="352.7" y="1699.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="355.7" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (9 samples, 0.66%)</title><rect x="352.7" y="1683.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="355.7" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (10 samples, 0.74%)</title><rect x="360.5" y="1747.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="363.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (10 samples, 0.74%)</title><rect x="360.5" y="1731.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="363.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (10 samples, 0.74%)</title><rect x="360.5" y="1715.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="363.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (10 samples, 0.74%)</title><rect x="360.5" y="1699.0" width="8.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="363.5" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (10 samples, 0.74%)</title><rect x="360.5" y="1683.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="363.5" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 0.37%)</title><rect x="363.1" y="1667.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="366.1" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor17.newInstance (4 samples, 0.29%)</title><rect x="364.0" y="1651.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="367.0" y="1662.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.07%)</title><rect x="366.6" y="1635.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="369.6" y="1646.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor17.newInstance (2 samples, 0.15%)</title><rect x="367.5" y="1667.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="370.5" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.37%)</title><rect x="369.2" y="1747.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="372.2" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.37%)</title><rect x="369.2" y="1731.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="372.2" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.37%)</title><rect x="369.2" y="1715.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="372.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase._delegateDeserializer (1 samples, 0.07%)</title><rect x="373.5" y="1763.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="376.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (10 samples, 0.74%)</title><rect x="374.4" y="1827.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="377.4" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (10 samples, 0.74%)</title><rect x="374.4" y="1811.0" width="8.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="377.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (10 samples, 0.74%)</title><rect x="374.4" y="1795.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="377.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (10 samples, 0.74%)</title><rect x="374.4" y="1779.0" width="8.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="377.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.15%)</title><rect x="377.9" y="1763.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="380.9" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.29%)</title><rect x="379.6" y="1763.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="382.6" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (250 samples, 18.38%)</title><rect x="383.1" y="1923.0" width="216.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="386.1" y="1934.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (53 samples, 3.90%)</title><rect x="384.0" y="1907.0" width="45.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="387.0" y="1918.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.07%)</title><rect x="384.0" y="1891.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="387.0" y="1902.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (52 samples, 3.82%)</title><rect x="384.8" y="1891.0" width="45.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="387.8" y="1902.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (47 samples, 3.46%)</title><rect x="389.2" y="1875.0" width="40.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="392.2" y="1886.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.51%)</title><rect x="390.9" y="1859.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="393.9" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.51%)</title><rect x="390.9" y="1843.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="393.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.51%)</title><rect x="390.9" y="1827.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="393.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.51%)</title><rect x="390.9" y="1811.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="393.9" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.15%)</title><rect x="395.2" y="1795.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="398.2" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.15%)</title><rect x="395.2" y="1779.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="398.2" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (38 samples, 2.79%)</title><rect x="397.0" y="1859.0" width="32.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="400.0" y="1870.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (32 samples, 2.35%)</title><rect x="402.2" y="1843.0" width="27.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="405.2" y="1854.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 0.59%)</title><rect x="423.0" y="1827.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="426.0" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.59%)</title><rect x="429.9" y="1907.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="432.9" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.51%)</title><rect x="430.8" y="1891.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="433.8" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.51%)</title><rect x="430.8" y="1875.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="433.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (137 samples, 10.07%)</title><rect x="436.9" y="1907.0" width="118.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="439.9" y="1918.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (137 samples, 10.07%)</title><rect x="436.9" y="1891.0" width="118.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="439.9" y="1902.0">com/linecorp/d..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.22%)</title><rect x="442.1" y="1875.0" width="2.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="445.1" y="1886.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="442.1" y="1859.0" width="2.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="445.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (50 samples, 3.68%)</title><rect x="444.7" y="1875.0" width="43.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="447.7" y="1886.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (37 samples, 2.72%)</title><rect x="449.9" y="1859.0" width="32.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="452.9" y="1870.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (34 samples, 2.50%)</title><rect x="452.5" y="1843.0" width="29.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="455.5" y="1854.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (23 samples, 1.69%)</title><rect x="456.8" y="1827.0" width="20.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="459.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (23 samples, 1.69%)</title><rect x="456.8" y="1811.0" width="20.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="459.8" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (23 samples, 1.69%)</title><rect x="456.8" y="1795.0" width="20.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="459.8" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (11 samples, 0.81%)</title><rect x="462.0" y="1779.0" width="9.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="465.0" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (7 samples, 0.51%)</title><rect x="462.0" y="1763.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="465.0" y="1774.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (2 samples, 0.15%)</title><rect x="462.0" y="1747.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="465.0" y="1758.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="463.8" y="1747.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="466.8" y="1758.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="463.8" y="1731.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="466.8" y="1742.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.29%)</title><rect x="464.6" y="1747.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="467.6" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.15%)</title><rect x="465.5" y="1731.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="468.5" y="1742.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="465.5" y="1715.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="468.5" y="1726.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="465.5" y="1699.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="468.5" y="1710.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.07%)</title><rect x="466.4" y="1715.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="469.4" y="1726.0"></text>
</g>
<g>
<title>nmethod::is_nmethod() const (1 samples, 0.07%)</title><rect x="467.3" y="1731.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="470.3" y="1742.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.29%)</title><rect x="468.1" y="1763.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="471.1" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.22%)</title><rect x="469.0" y="1747.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="472.0" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="469.9" y="1731.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="472.9" y="1742.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="470.7" y="1731.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="473.7" y="1742.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.07%)</title><rect x="471.6" y="1779.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="474.6" y="1790.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.37%)</title><rect x="472.5" y="1779.0" width="4.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="475.5" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.29%)</title><rect x="476.8" y="1827.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="479.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="480.3" y="1827.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="483.3" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="481.1" y="1827.0" width="0.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="484.1" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="482.0" y="1859.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="485.0" y="1870.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.44%)</title><rect x="482.9" y="1859.0" width="5.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="485.9" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (4 samples, 0.29%)</title><rect x="488.1" y="1875.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="491.1" y="1886.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.29%)</title><rect x="488.1" y="1859.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="491.1" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.29%)</title><rect x="488.1" y="1843.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="491.1" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (74 samples, 5.44%)</title><rect x="491.5" y="1875.0" width="64.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="494.5" y="1886.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (73 samples, 5.37%)</title><rect x="492.4" y="1859.0" width="63.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="495.4" y="1870.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.51%)</title><rect x="492.4" y="1843.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="495.4" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.51%)</title><rect x="492.4" y="1827.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="495.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.51%)</title><rect x="492.4" y="1811.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="495.4" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.51%)</title><rect x="492.4" y="1795.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="495.4" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (66 samples, 4.85%)</title><rect x="498.5" y="1843.0" width="57.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="501.5" y="1854.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (61 samples, 4.49%)</title><rect x="502.8" y="1827.0" width="53.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="505.8" y="1838.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (45 samples, 3.31%)</title><rect x="516.7" y="1811.0" width="39.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="519.7" y="1822.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (7 samples, 0.51%)</title><rect x="535.8" y="1795.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="538.8" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 0.81%)</title><rect x="541.9" y="1795.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="544.9" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="550.5" y="1779.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="553.5" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="550.5" y="1763.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="553.5" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="550.5" y="1747.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="553.5" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="550.5" y="1731.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="553.5" y="1742.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="550.5" y="1715.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="553.5" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="550.5" y="1699.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="553.5" y="1710.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.37%)</title><rect x="551.4" y="1795.0" width="4.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="554.4" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (36 samples, 2.65%)</title><rect x="555.8" y="1907.0" width="31.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="558.8" y="1918.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (36 samples, 2.65%)</title><rect x="555.8" y="1891.0" width="31.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="558.8" y="1902.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1860270935.process (18 samples, 1.32%)</title><rect x="557.5" y="1875.0" width="15.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="560.5" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (18 samples, 1.32%)</title><rect x="557.5" y="1859.0" width="15.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="560.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (16 samples, 1.18%)</title><rect x="558.4" y="1843.0" width="13.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="561.4" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (5 samples, 0.37%)</title><rect x="563.6" y="1827.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="566.6" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (5 samples, 0.37%)</title><rect x="563.6" y="1811.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="566.6" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (5 samples, 0.37%)</title><rect x="563.6" y="1795.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="566.6" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (5 samples, 0.37%)</title><rect x="563.6" y="1779.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="566.6" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.22%)</title><rect x="565.3" y="1763.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="568.3" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (2 samples, 0.15%)</title><rect x="567.9" y="1827.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="570.9" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.15%)</title><rect x="567.9" y="1811.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="570.9" y="1822.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.15%)</title><rect x="567.9" y="1795.0" width="1.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="570.9" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.15%)</title><rect x="569.6" y="1827.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="572.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="571.4" y="1827.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="574.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="571.4" y="1811.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="574.4" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="571.4" y="1795.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="574.4" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.access$400 (1 samples, 0.07%)</title><rect x="571.4" y="1779.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="574.4" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.07%)</title><rect x="572.2" y="1843.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="575.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="572.2" y="1827.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="575.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="572.2" y="1811.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="575.2" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="572.2" y="1795.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="575.2" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$278/1477880378.complete (1 samples, 0.07%)</title><rect x="573.1" y="1875.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="576.1" y="1886.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.07%)</title><rect x="573.1" y="1859.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="576.1" y="1870.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="573.1" y="1843.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="576.1" y="1854.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="573.1" y="1827.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="576.1" y="1838.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.07%)</title><rect x="573.1" y="1811.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="576.1" y="1822.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle, int, Bytecodes::Code, Thread*) (1 samples, 0.07%)</title><rect x="573.1" y="1795.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="576.1" y="1806.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokevirtual(CallInfo&amp;, Handle, constantPoolHandle, int, Thread*) (1 samples, 0.07%)</title><rect x="573.1" y="1779.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="576.1" y="1790.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call(CallInfo&amp;, Handle, KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="573.1" y="1763.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="576.1" y="1774.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="573.1" y="1747.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="576.1" y="1758.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="573.1" y="1731.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="576.1" y="1742.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="573.1" y="1715.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="576.1" y="1726.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.07%)</title><rect x="573.1" y="1699.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="576.1" y="1710.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.07%)</title><rect x="573.1" y="1683.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="576.1" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.15%)</title><rect x="574.0" y="1875.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="577.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.15%)</title><rect x="574.0" y="1859.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="577.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (4 samples, 0.29%)</title><rect x="575.7" y="1875.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="578.7" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (4 samples, 0.29%)</title><rect x="575.7" y="1859.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="578.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$278/1477880378.get$Lambda (4 samples, 0.29%)</title><rect x="575.7" y="1843.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="578.7" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$278/1477880378.&lt;init&gt; (4 samples, 0.29%)</title><rect x="575.7" y="1827.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="578.7" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.29%)</title><rect x="579.2" y="1875.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="582.2" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.22%)</title><rect x="580.0" y="1859.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="583.0" y="1870.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="580.0" y="1843.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="583.0" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.15%)</title><rect x="580.9" y="1843.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="583.9" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="582.6" y="1875.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="585.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="582.6" y="1859.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="585.6" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.07%)</title><rect x="582.6" y="1843.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="585.6" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.rangeCheck (1 samples, 0.07%)</title><rect x="582.6" y="1827.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="585.6" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.29%)</title><rect x="583.5" y="1875.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="586.5" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="585.3" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="588.3" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="585.3" y="1843.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="588.3" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.07%)</title><rect x="586.1" y="1859.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="589.1" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.07%)</title><rect x="586.1" y="1843.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="589.1" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="586.1" y="1827.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="589.1" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="586.1" y="1811.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="589.1" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="586.1" y="1795.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="589.1" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="586.1" y="1779.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="589.1" y="1790.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="586.1" y="1763.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="589.1" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="586.1" y="1747.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="589.1" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.10%)</title><rect x="587.0" y="1907.0" width="13.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="590.0" y="1918.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.37%)</title><rect x="590.5" y="1891.0" width="4.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="593.5" y="1902.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.37%)</title><rect x="590.5" y="1875.0" width="4.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="593.5" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.44%)</title><rect x="594.8" y="1891.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="597.8" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.44%)</title><rect x="594.8" y="1875.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="597.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/2094188015.accept (6 samples, 0.44%)</title><rect x="594.8" y="1859.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="597.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (6 samples, 0.44%)</title><rect x="594.8" y="1843.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="597.8" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.15%)</title><rect x="594.8" y="1827.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="597.8" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.15%)</title><rect x="594.8" y="1811.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="597.8" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.15%)</title><rect x="594.8" y="1795.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="597.8" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.15%)</title><rect x="594.8" y="1779.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="597.8" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="595.7" y="1763.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="598.7" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="595.7" y="1747.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="598.7" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="595.7" y="1731.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="598.7" y="1742.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="595.7" y="1715.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="598.7" y="1726.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (4 samples, 0.29%)</title><rect x="596.5" y="1827.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="599.5" y="1838.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (4 samples, 0.29%)</title><rect x="596.5" y="1811.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="599.5" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="599.1" y="1795.0" width="0.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="602.1" y="1806.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="599.1" y="1779.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="602.1" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 1.40%)</title><rect x="600.0" y="1923.0" width="16.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="603.0" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.07%)</title><rect x="602.6" y="1907.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="605.6" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (15 samples, 1.10%)</title><rect x="603.5" y="1907.0" width="13.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="606.5" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.74%)</title><rect x="606.9" y="1891.0" width="8.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="609.9" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/969950225.accept (10 samples, 0.74%)</title><rect x="606.9" y="1875.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="609.9" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (10 samples, 0.74%)</title><rect x="606.9" y="1859.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="609.9" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$274/2060640975.complete (10 samples, 0.74%)</title><rect x="606.9" y="1843.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="609.9" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (10 samples, 0.74%)</title><rect x="606.9" y="1827.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="609.9" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (10 samples, 0.74%)</title><rect x="606.9" y="1811.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="609.9" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 0.74%)</title><rect x="606.9" y="1795.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="609.9" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 0.74%)</title><rect x="606.9" y="1779.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="609.9" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (10 samples, 0.74%)</title><rect x="606.9" y="1763.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="609.9" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (10 samples, 0.74%)</title><rect x="606.9" y="1747.0" width="8.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="609.9" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.07%)</title><rect x="614.8" y="1731.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="617.8" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.07%)</title><rect x="615.6" y="1891.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="618.6" y="1902.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.37%)</title><rect x="616.5" y="1923.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="619.5" y="1934.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.37%)</title><rect x="616.5" y="1907.0" width="4.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="619.5" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="620.8" y="1939.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="623.8" y="1950.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="620.8" y="1923.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="623.8" y="1934.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="620.8" y="1907.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="623.8" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="620.8" y="1891.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="623.8" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="620.8" y="1875.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="623.8" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="620.8" y="1859.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="623.8" y="1870.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.07%)</title><rect x="620.8" y="1843.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="623.8" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.07%)</title><rect x="621.7" y="1939.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="624.7" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.51%)</title><rect x="622.6" y="1987.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="625.6" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.51%)</title><rect x="622.6" y="1971.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="625.6" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.51%)</title><rect x="622.6" y="1955.0" width="6.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="625.6" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.51%)</title><rect x="622.6" y="1939.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="625.6" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.22%)</title><rect x="624.3" y="1923.0" width="2.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="627.3" y="1934.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="624.3" y="1907.0" width="2.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="627.3" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (2 samples, 0.15%)</title><rect x="626.9" y="1923.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="629.9" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (238 samples, 17.50%)</title><rect x="628.6" y="1987.0" width="206.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="631.6" y="1998.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (238 samples, 17.50%)</title><rect x="628.6" y="1971.0" width="206.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="631.6" y="1982.0">java/util/concurrent/Linked..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (224 samples, 16.47%)</title><rect x="628.6" y="1955.0" width="194.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="631.6" y="1966.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (25 samples, 1.84%)</title><rect x="632.1" y="1939.0" width="21.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="635.1" y="1950.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.59%)</title><rect x="653.8" y="1939.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="656.8" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.59%)</title><rect x="653.8" y="1923.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="656.8" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.59%)</title><rect x="653.8" y="1907.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="656.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.59%)</title><rect x="653.8" y="1891.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="656.8" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (186 samples, 13.68%)</title><rect x="660.7" y="1939.0" width="161.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="663.7" y="1950.0">java/util/concurrent/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (186 samples, 13.68%)</title><rect x="660.7" y="1923.0" width="161.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="663.7" y="1934.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="665.9" y="1907.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="668.9" y="1918.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.15%)</title><rect x="666.8" y="1907.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="669.8" y="1918.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.07%)</title><rect x="668.5" y="1907.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="671.5" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (172 samples, 12.65%)</title><rect x="669.4" y="1907.0" width="149.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="672.4" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.29%)</title><rect x="671.1" y="1891.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="674.1" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.07%)</title><rect x="674.6" y="1891.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="677.6" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (20 samples, 1.47%)</title><rect x="675.5" y="1891.0" width="17.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="678.5" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (3 samples, 0.22%)</title><rect x="683.3" y="1875.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="686.3" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="685.0" y="1859.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="688.0" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="685.0" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="688.0" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.15%)</title><rect x="685.9" y="1875.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="688.9" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.37%)</title><rect x="687.6" y="1875.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="690.6" y="1886.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="692.0" y="1875.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="695.0" y="1886.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (3 samples, 0.22%)</title><rect x="692.8" y="1891.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="695.8" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.15%)</title><rect x="695.4" y="1891.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="698.4" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.29%)</title><rect x="697.2" y="1891.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="700.2" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (11 samples, 0.81%)</title><rect x="700.6" y="1891.0" width="9.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="703.6" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (49 samples, 3.60%)</title><rect x="710.2" y="1891.0" width="42.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="713.2" y="1902.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (50 samples, 3.68%)</title><rect x="752.7" y="1891.0" width="43.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="755.7" y="1902.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.29%)</title><rect x="796.1" y="1891.0" width="3.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="799.1" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="799.6" y="1891.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="802.6" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.15%)</title><rect x="800.4" y="1891.0" width="1.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="803.4" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.29%)</title><rect x="802.2" y="1891.0" width="3.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="805.2" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.44%)</title><rect x="805.6" y="1891.0" width="5.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="808.6" y="1902.0"></text>
</g>
<g>
<title>_init (3 samples, 0.22%)</title><rect x="810.8" y="1891.0" width="2.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="813.8" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.22%)</title><rect x="813.4" y="1891.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="816.4" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="816.0" y="1891.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="819.0" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.15%)</title><rect x="816.9" y="1891.0" width="1.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="819.9" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.15%)</title><rect x="818.6" y="1907.0" width="1.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="821.6" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.07%)</title><rect x="820.4" y="1907.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="823.4" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="821.3" y="1907.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="824.3" y="1918.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.07%)</title><rect x="822.1" y="1939.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="825.1" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 1.03%)</title><rect x="823.0" y="1955.0" width="12.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="826.0" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 1.03%)</title><rect x="823.0" y="1939.0" width="12.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="826.0" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 1.03%)</title><rect x="823.0" y="1923.0" width="12.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="826.0" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 1.03%)</title><rect x="823.0" y="1907.0" width="12.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="826.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="835.1" y="2035.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="838.1" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="835.1" y="2019.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="838.1" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="835.1" y="2003.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="838.1" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.07%)</title><rect x="835.1" y="1987.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="838.1" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.07%)</title><rect x="835.1" y="1971.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="838.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.07%)</title><rect x="835.1" y="1955.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="838.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.07%)</title><rect x="835.1" y="1939.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="838.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="835.1" y="1923.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="838.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="835.1" y="1907.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="838.1" y="1918.0"></text>
</g>
<g>
<title>start_thread (408 samples, 30.00%)</title><rect x="836.0" y="2035.0" width="354.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="839.0" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (408 samples, 30.00%)</title><rect x="836.0" y="2019.0" width="354.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="839.0" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (15 samples, 1.10%)</title><rect x="836.0" y="2003.0" width="13.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="839.0" y="2014.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.07%)</title><rect x="836.0" y="1987.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="839.0" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.07%)</title><rect x="836.0" y="1971.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="839.0" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.07%)</title><rect x="836.0" y="1955.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="839.0" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.03%)</title><rect x="836.9" y="1987.0" width="12.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="839.9" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.37%)</title><rect x="836.9" y="1971.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="839.9" y="1982.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.07%)</title><rect x="836.9" y="1955.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="839.9" y="1966.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.07%)</title><rect x="836.9" y="1939.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="839.9" y="1950.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.07%)</title><rect x="836.9" y="1923.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="839.9" y="1934.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.07%)</title><rect x="836.9" y="1907.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="839.9" y="1918.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.22%)</title><rect x="837.7" y="1955.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="840.7" y="1966.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.07%)</title><rect x="840.3" y="1955.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="843.3" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.37%)</title><rect x="841.2" y="1971.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="844.2" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.07%)</title><rect x="841.2" y="1955.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="844.2" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.07%)</title><rect x="841.2" y="1939.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="844.2" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.07%)</title><rect x="841.2" y="1923.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="844.2" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.07%)</title><rect x="841.2" y="1907.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="844.2" y="1918.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.29%)</title><rect x="842.1" y="1955.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="845.1" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.29%)</title><rect x="842.1" y="1939.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="845.1" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.07%)</title><rect x="845.5" y="1971.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="848.5" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (3 samples, 0.22%)</title><rect x="846.4" y="1971.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="849.4" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (3 samples, 0.22%)</title><rect x="846.4" y="1955.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="849.4" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.22%)</title><rect x="846.4" y="1939.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="849.4" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.22%)</title><rect x="846.4" y="1923.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="849.4" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.22%)</title><rect x="846.4" y="1907.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="849.4" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.22%)</title><rect x="846.4" y="1891.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="849.4" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.15%)</title><rect x="847.3" y="1875.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="850.3" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.15%)</title><rect x="847.3" y="1859.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="850.3" y="1870.0"></text>
</g>
<g>
<title>JavaThread::run() (392 samples, 28.82%)</title><rect x="849.0" y="2003.0" width="340.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="852.0" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (392 samples, 28.82%)</title><rect x="849.0" y="1987.0" width="340.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="852.0" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (391 samples, 28.75%)</title><rect x="849.0" y="1971.0" width="339.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="852.0" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (391 samples, 28.75%)</title><rect x="849.0" y="1955.0" width="339.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="852.0" y="1966.0">CompileBroker::invoke_compiler_on_method(Compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (391 samples, 28.75%)</title><rect x="849.0" y="1939.0" width="339.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="852.0" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMethod*, ..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (391 samples, 28.75%)</title><rect x="849.0" y="1923.0" width="339.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="852.0" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod..</text>
</g>
<g>
<title>Compile::Code_Gen() (140 samples, 10.29%)</title><rect x="849.0" y="1907.0" width="121.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="852.0" y="1918.0">Compile::Code_G..</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.29%)</title><rect x="849.0" y="1891.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="852.0" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.15%)</title><rect x="849.0" y="1875.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="852.0" y="1886.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.07%)</title><rect x="850.8" y="1875.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="853.8" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.07%)</title><rect x="850.8" y="1859.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="853.8" y="1870.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.07%)</title><rect x="850.8" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="853.8" y="1854.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.07%)</title><rect x="850.8" y="1827.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="853.8" y="1838.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="851.6" y="1875.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="854.6" y="1886.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (8 samples, 0.59%)</title><rect x="852.5" y="1891.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="855.5" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.22%)</title><rect x="854.2" y="1875.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="857.2" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.15%)</title><rect x="854.2" y="1859.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="857.2" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.15%)</title><rect x="854.2" y="1843.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="857.2" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="856.0" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="859.0" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="856.0" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="859.0" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.15%)</title><rect x="856.8" y="1875.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="859.8" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="856.8" y="1859.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="859.8" y="1870.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.07%)</title><rect x="857.7" y="1859.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="860.7" y="1870.0"></text>
</g>
<g>
<title>JVMState::of_depth(int) const (1 samples, 0.07%)</title><rect x="858.6" y="1875.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="861.6" y="1886.0"></text>
</g>
<g>
<title>Matcher::match() (16 samples, 1.18%)</title><rect x="859.4" y="1891.0" width="13.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="862.4" y="1902.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.07%)</title><rect x="859.4" y="1875.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="862.4" y="1886.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.07%)</title><rect x="860.3" y="1875.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="863.3" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (14 samples, 1.03%)</title><rect x="861.2" y="1875.0" width="12.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="864.2" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (8 samples, 0.59%)</title><rect x="862.9" y="1859.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="865.9" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (2 samples, 0.15%)</title><rect x="869.8" y="1859.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="872.8" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="870.7" y="1843.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="873.7" y="1854.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.15%)</title><rect x="871.6" y="1859.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="874.6" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="872.4" y="1843.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="875.4" y="1854.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="872.4" y="1827.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="875.4" y="1838.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.07%)</title><rect x="873.3" y="1891.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="876.3" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.07%)</title><rect x="873.3" y="1875.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="876.3" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.37%)</title><rect x="874.2" y="1891.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="877.2" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.07%)</title><rect x="874.2" y="1875.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="877.2" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::do_DFS(Tarjan*, unsigned int) (1 samples, 0.07%)</title><rect x="874.2" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="877.2" y="1870.0"></text>
</g>
<g>
<title>Block_Stack::most_frequent_successor(Block*) (1 samples, 0.07%)</title><rect x="874.2" y="1843.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="877.2" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.29%)</title><rect x="875.0" y="1875.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="878.0" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 0.22%)</title><rect x="875.0" y="1859.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="878.0" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.07%)</title><rect x="875.0" y="1843.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="878.0" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.15%)</title><rect x="875.9" y="1843.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="878.9" y="1854.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.07%)</title><rect x="876.8" y="1827.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="879.8" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="876.8" y="1811.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="879.8" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="876.8" y="1795.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="879.8" y="1806.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="877.6" y="1859.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="880.6" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.07%)</title><rect x="878.5" y="1891.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="881.5" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (105 samples, 7.72%)</title><rect x="879.4" y="1891.0" width="91.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="882.4" y="1902.0">PhaseChaiti..</text>
</g>
<g>
<title>JVMState::debug_start() const (2 samples, 0.15%)</title><rect x="880.3" y="1875.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="883.3" y="1886.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (2 samples, 0.15%)</title><rect x="882.0" y="1875.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="885.0" y="1886.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.07%)</title><rect x="883.7" y="1875.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="886.7" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (4 samples, 0.29%)</title><rect x="884.6" y="1875.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="887.6" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.37%)</title><rect x="888.1" y="1875.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="891.1" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.15%)</title><rect x="888.1" y="1859.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="891.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.22%)</title><rect x="889.8" y="1859.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="892.8" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.15%)</title><rect x="890.7" y="1843.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="893.7" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.22%)</title><rect x="892.4" y="1875.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="895.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.22%)</title><rect x="892.4" y="1859.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="895.4" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="894.1" y="1843.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="897.1" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (16 samples, 1.18%)</title><rect x="895.0" y="1875.0" width="13.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="898.0" y="1886.0"></text>
</g>
<g>
<title>MachIdealNode::rule() const (1 samples, 0.07%)</title><rect x="904.5" y="1859.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="907.5" y="1870.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="905.4" y="1859.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="908.4" y="1870.0"></text>
</g>
<g>
<title>MachSpillCopyNode::MachSpillCopyNode(Node*, RegMask const&amp;, RegMask const&amp;) (1 samples, 0.07%)</title><rect x="906.3" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="909.3" y="1870.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="906.3" y="1843.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="909.3" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.07%)</title><rect x="907.1" y="1859.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="910.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.07%)</title><rect x="907.1" y="1843.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="910.1" y="1854.0"></text>
</g>
<g>
<title>loadConL0Node::rule() const (1 samples, 0.07%)</title><rect x="908.0" y="1859.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="911.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (19 samples, 1.40%)</title><rect x="908.9" y="1875.0" width="16.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="911.9" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.22%)</title><rect x="914.1" y="1859.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="917.1" y="1870.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="916.7" y="1859.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="919.7" y="1870.0"></text>
</g>
<g>
<title>rFlagsRegOper::type() const (1 samples, 0.07%)</title><rect x="916.7" y="1843.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="919.7" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (7 samples, 0.51%)</title><rect x="917.6" y="1859.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="920.6" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.15%)</title><rect x="921.9" y="1843.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="924.9" y="1854.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.07%)</title><rect x="923.6" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="926.6" y="1870.0"></text>
</g>
<g>
<title>checkCastPPNode::rule() const (1 samples, 0.07%)</title><rect x="924.5" y="1859.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="927.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (3 samples, 0.22%)</title><rect x="925.4" y="1875.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="928.4" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.22%)</title><rect x="925.4" y="1859.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="928.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.29%)</title><rect x="928.0" y="1875.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="931.0" y="1886.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="929.7" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="932.7" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="930.6" y="1859.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="933.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.07%)</title><rect x="931.4" y="1875.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="934.4" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (8 samples, 0.59%)</title><rect x="932.3" y="1875.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="935.3" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (8 samples, 0.59%)</title><rect x="932.3" y="1859.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="935.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="937.5" y="1843.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="940.5" y="1854.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.07%)</title><rect x="937.5" y="1827.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="940.5" y="1838.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="937.5" y="1811.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="940.5" y="1822.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.07%)</title><rect x="938.4" y="1843.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="941.4" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.07%)</title><rect x="938.4" y="1827.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="941.4" y="1838.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.07%)</title><rect x="938.4" y="1811.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="941.4" y="1822.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (14 samples, 1.03%)</title><rect x="939.3" y="1875.0" width="12.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="942.3" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (14 samples, 1.03%)</title><rect x="939.3" y="1859.0" width="12.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.3" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.07%)</title><rect x="939.3" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="942.3" y="1854.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (13 samples, 0.96%)</title><rect x="940.1" y="1843.0" width="11.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="943.1" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.15%)</title><rect x="940.1" y="1827.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="943.1" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::union_helper(Node*, Node*, unsigned int, unsigned int, Node*, Node*, Node*, Block*, unsigned int) (1 samples, 0.07%)</title><rect x="941.9" y="1827.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="944.9" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (9 samples, 0.66%)</title><rect x="942.7" y="1827.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="945.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.07%)</title><rect x="950.5" y="1827.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="953.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.22%)</title><rect x="951.4" y="1875.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="954.4" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (2 samples, 0.15%)</title><rect x="952.3" y="1859.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="955.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.15%)</title><rect x="954.0" y="1875.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="957.0" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="954.9" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="957.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.15%)</title><rect x="955.7" y="1875.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="958.7" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.15%)</title><rect x="955.7" y="1859.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="958.7" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (11 samples, 0.81%)</title><rect x="957.5" y="1875.0" width="9.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="960.5" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (6 samples, 0.44%)</title><rect x="961.8" y="1859.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="964.8" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="964.4" y="1843.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="967.4" y="1854.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.07%)</title><rect x="965.3" y="1843.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="968.3" y="1854.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.07%)</title><rect x="965.3" y="1827.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="968.3" y="1838.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="966.1" y="1843.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="969.1" y="1854.0"></text>
</g>
<g>
<title>checkCastPPNode::two_adr() const (1 samples, 0.07%)</title><rect x="967.0" y="1875.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="970.0" y="1886.0"></text>
</g>
<g>
<title>indOffset8Oper::in_RegMask(int) const (1 samples, 0.07%)</title><rect x="967.9" y="1875.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="970.9" y="1886.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (2 samples, 0.15%)</title><rect x="968.8" y="1875.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="971.8" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (235 samples, 17.28%)</title><rect x="970.5" y="1907.0" width="203.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="973.5" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.15%)</title><rect x="970.5" y="1891.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="973.5" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.15%)</title><rect x="970.5" y="1875.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="973.5" y="1886.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="972.2" y="1891.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="975.2" y="1902.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="972.2" y="1875.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="975.2" y="1886.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="972.2" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="975.2" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.44%)</title><rect x="973.1" y="1891.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="976.1" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 0.44%)</title><rect x="973.1" y="1875.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="976.1" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.07%)</title><rect x="973.1" y="1859.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="976.1" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.07%)</title><rect x="973.1" y="1843.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="976.1" y="1854.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.07%)</title><rect x="973.1" y="1827.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="976.1" y="1838.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.07%)</title><rect x="973.1" y="1811.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="976.1" y="1822.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.07%)</title><rect x="973.1" y="1795.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="976.1" y="1806.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.07%)</title><rect x="973.1" y="1779.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="976.1" y="1790.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.1" y="1763.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="976.1" y="1774.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="973.1" y="1747.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="976.1" y="1758.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="973.1" y="1731.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="976.1" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="974.0" y="1859.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="977.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.07%)</title><rect x="974.0" y="1843.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="977.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="974.8" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="977.8" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.07%)</title><rect x="974.8" y="1827.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="977.8" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::add_fields_to_worklist(FieldNode*, PointsToNode*) (1 samples, 0.07%)</title><rect x="974.8" y="1811.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="977.8" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.22%)</title><rect x="975.7" y="1859.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="978.7" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="975.7" y="1843.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="978.7" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.7" y="1827.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="978.7" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.7" y="1811.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="978.7" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.7" y="1795.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="978.7" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.7" y="1779.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="978.7" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.7" y="1763.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="978.7" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.7" y="1747.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="978.7" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.7" y="1731.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="978.7" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.7" y="1715.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="978.7" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.7" y="1699.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="978.7" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.7" y="1683.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="978.7" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.7" y="1667.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="978.7" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.7" y="1651.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="978.7" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.7" y="1635.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="978.7" y="1646.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.07%)</title><rect x="975.7" y="1619.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="978.7" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="976.6" y="1827.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="979.6" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="976.6" y="1811.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="979.6" y="1822.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="976.6" y="1795.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="979.6" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.4" y="1811.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="980.4" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.4" y="1795.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="980.4" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.4" y="1779.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="980.4" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.4" y="1763.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="980.4" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.4" y="1747.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="980.4" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.4" y="1731.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="980.4" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.4" y="1715.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="980.4" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.4" y="1699.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="980.4" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.4" y="1683.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="980.4" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.4" y="1667.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="980.4" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.4" y="1651.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="980.4" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.4" y="1635.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="980.4" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="977.4" y="1619.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="980.4" y="1630.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.07%)</title><rect x="978.3" y="1891.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="981.3" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.07%)</title><rect x="978.3" y="1875.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="981.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (204 samples, 15.00%)</title><rect x="979.2" y="1891.0" width="177.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="982.2" y="1902.0">PhaseIdealLoop::build_a..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="979.2" y="1875.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="982.2" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="979.2" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="982.2" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="979.2" y="1843.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="982.2" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="979.2" y="1827.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="982.2" y="1838.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="980.0" y="1875.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="983.0" y="1886.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.07%)</title><rect x="980.9" y="1875.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="983.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.15%)</title><rect x="981.8" y="1875.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="984.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.29%)</title><rect x="983.5" y="1875.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="986.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (3 samples, 0.22%)</title><rect x="984.4" y="1859.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="987.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.15%)</title><rect x="985.2" y="1843.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="988.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (184 samples, 13.53%)</title><rect x="987.0" y="1875.0" width="159.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="990.0" y="1886.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (174 samples, 12.79%)</title><rect x="995.6" y="1859.0" width="151.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="998.6" y="1870.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (7 samples, 0.51%)</title><rect x="997.4" y="1843.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1000.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (165 samples, 12.13%)</title><rect x="1003.5" y="1843.0" width="143.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1006.5" y="1854.0">PhaseIdealLoop::ge..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.15%)</title><rect x="1119.7" y="1827.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.15%)</title><rect x="1119.7" y="1811.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.7" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1120.6" y="1795.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.6" y="1806.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (26 samples, 1.91%)</title><rect x="1121.5" y="1827.0" width="22.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.5" y="1838.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.22%)</title><rect x="1144.0" y="1827.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1145.8" y="1811.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.8" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.15%)</title><rect x="1146.6" y="1875.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.15%)</title><rect x="1146.6" y="1859.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (7 samples, 0.51%)</title><rect x="1148.4" y="1875.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.4" y="1886.0"></text>
</g>
<g>
<title>AddPNode::Opcode() const (1 samples, 0.07%)</title><rect x="1149.2" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.07%)</title><rect x="1150.1" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1150.1" y="1843.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.1" y="1854.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1150.1" y="1827.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.1" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.07%)</title><rect x="1151.0" y="1859.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.22%)</title><rect x="1151.8" y="1859.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::conditional_move(Node*) (1 samples, 0.07%)</title><rect x="1151.8" y="1843.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.8" y="1854.0"></text>
</g>
<g>
<title>MultiNode::hash() const (1 samples, 0.07%)</title><rect x="1151.8" y="1827.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.8" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1152.7" y="1843.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.07%)</title><rect x="1153.6" y="1843.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.6" y="1854.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1153.6" y="1827.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.6" y="1838.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1153.6" y="1811.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.6" y="1822.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.15%)</title><rect x="1154.4" y="1875.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.15%)</title><rect x="1154.4" y="1859.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.4" y="1870.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1154.4" y="1843.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.4" y="1854.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1154.4" y="1827.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.4" y="1838.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1154.4" y="1811.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.4" y="1822.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1154.4" y="1795.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.4" y="1806.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1154.4" y="1779.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.4" y="1790.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1155.3" y="1843.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (17 samples, 1.25%)</title><rect x="1156.2" y="1891.0" width="14.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.2" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1156.2" y="1875.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.2" y="1886.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1156.2" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (16 samples, 1.18%)</title><rect x="1157.0" y="1875.0" width="13.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.0" y="1886.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (4 samples, 0.29%)</title><rect x="1157.0" y="1859.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.0" y="1870.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1157.0" y="1843.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.0" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1157.0" y="1827.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.0" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1157.0" y="1811.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.0" y="1822.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (3 samples, 0.22%)</title><rect x="1157.9" y="1843.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.9" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (3 samples, 0.22%)</title><rect x="1157.9" y="1827.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.9" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (3 samples, 0.22%)</title><rect x="1157.9" y="1811.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.9" y="1822.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1160.5" y="1859.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.5" y="1870.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1161.4" y="1859.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.4" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1162.2" y="1859.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (2 samples, 0.15%)</title><rect x="1163.1" y="1859.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1164.8" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1164.8" y="1843.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.8" y="1854.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1164.8" y="1827.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.8" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1165.7" y="1859.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.7" y="1870.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1166.6" y="1843.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.6" y="1854.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1167.4" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.4" y="1870.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="1167.4" y="1843.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.4" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1168.3" y="1859.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1168.3" y="1843.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.3" y="1854.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1168.3" y="1827.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.3" y="1838.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1169.2" y="1843.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.2" y="1854.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1170.0" y="1859.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.0" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1170.0" y="1843.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.0" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.0" y="1827.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.0" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.0" y="1811.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.0" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.0" y="1795.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.0" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.0" y="1779.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.0" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.0" y="1763.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.0" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.0" y="1747.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.0" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.0" y="1731.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.0" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.0" y="1715.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.0" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.0" y="1699.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.0" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.0" y="1683.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.0" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.0" y="1667.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.0" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.0" y="1651.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.0" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.0" y="1635.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.0" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.0" y="1619.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.0" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.0" y="1603.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.0" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.0" y="1587.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.0" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.0" y="1571.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.0" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.0" y="1555.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.0" y="1566.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.0" y="1539.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.0" y="1550.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1170.0" y="1523.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.0" y="1534.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1170.0" y="1507.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.0" y="1518.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (3 samples, 0.22%)</title><rect x="1170.9" y="1891.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.9" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (3 samples, 0.22%)</title><rect x="1170.9" y="1875.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.9" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="1170.9" y="1859.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.9" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (2 samples, 0.15%)</title><rect x="1171.8" y="1843.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.8" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.07%)</title><rect x="1171.8" y="1827.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.8" y="1838.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.07%)</title><rect x="1171.8" y="1811.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.8" y="1822.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.07%)</title><rect x="1171.8" y="1795.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.8" y="1806.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.07%)</title><rect x="1171.8" y="1779.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.8" y="1790.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.07%)</title><rect x="1171.8" y="1763.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.8" y="1774.0"></text>
</g>
<g>
<title>scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*) (1 samples, 0.07%)</title><rect x="1171.8" y="1747.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1174.8" y="1758.0"></text>
</g>
<g>
<title>scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*) (1 samples, 0.07%)</title><rect x="1172.6" y="1827.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1175.6" y="1838.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.07%)</title><rect x="1173.5" y="1891.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.5" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_lock_node(LockNode*) (1 samples, 0.07%)</title><rect x="1173.5" y="1875.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.5" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::make_slow_call(CallNode*, TypeFunc const*, unsigned char*, char const*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1173.5" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1173.5" y="1843.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1173.5" y="1827.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.5" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.88%)</title><rect x="1174.4" y="1907.0" width="10.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.4" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.88%)</title><rect x="1174.4" y="1891.0" width="10.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.4" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.88%)</title><rect x="1174.4" y="1875.0" width="10.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.4" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.88%)</title><rect x="1174.4" y="1859.0" width="10.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.4" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 0.88%)</title><rect x="1174.4" y="1843.0" width="10.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.4" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 0.88%)</title><rect x="1174.4" y="1827.0" width="10.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.4" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.66%)</title><rect x="1174.4" y="1811.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.4" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.66%)</title><rect x="1174.4" y="1795.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.4" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.66%)</title><rect x="1174.4" y="1779.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.4" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.66%)</title><rect x="1174.4" y="1763.0" width="7.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.4" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.66%)</title><rect x="1174.4" y="1747.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.4" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.66%)</title><rect x="1174.4" y="1731.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.4" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.37%)</title><rect x="1174.4" y="1715.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.4" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.37%)</title><rect x="1174.4" y="1699.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.4" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.37%)</title><rect x="1174.4" y="1683.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.4" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.37%)</title><rect x="1174.4" y="1667.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.4" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.37%)</title><rect x="1174.4" y="1651.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.4" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.37%)</title><rect x="1174.4" y="1635.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.4" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.37%)</title><rect x="1174.4" y="1619.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.4" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.37%)</title><rect x="1174.4" y="1603.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.4" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.37%)</title><rect x="1174.4" y="1587.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.4" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.37%)</title><rect x="1174.4" y="1571.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.4" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.37%)</title><rect x="1174.4" y="1555.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.4" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.37%)</title><rect x="1174.4" y="1539.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.4" y="1550.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1174.4" y="1523.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.4" y="1534.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1174.4" y="1507.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.4" y="1518.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1174.4" y="1491.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.4" y="1502.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1174.4" y="1475.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.4" y="1486.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1174.4" y="1459.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.4" y="1470.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1174.4" y="1443.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.4" y="1454.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1174.4" y="1427.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.4" y="1438.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1174.4" y="1411.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.4" y="1422.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1174.4" y="1395.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.4" y="1406.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1174.4" y="1379.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.4" y="1390.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1174.4" y="1363.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.4" y="1374.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1174.4" y="1347.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.4" y="1358.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1174.4" y="1331.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.4" y="1342.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1174.4" y="1315.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.4" y="1326.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1174.4" y="1299.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.4" y="1310.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.07%)</title><rect x="1174.4" y="1283.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.4" y="1294.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.07%)</title><rect x="1174.4" y="1267.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.4" y="1278.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1174.4" y="1251.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.4" y="1262.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1174.4" y="1235.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.4" y="1246.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1174.4" y="1219.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.4" y="1230.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1174.4" y="1203.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.4" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1175.2" y="1523.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1175.2" y="1507.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.2" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1175.2" y="1491.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.2" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1175.2" y="1475.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.2" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1175.2" y="1459.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1175.2" y="1443.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.2" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1175.2" y="1427.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.2" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1175.2" y="1411.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.2" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1175.2" y="1395.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.2" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1175.2" y="1379.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.2" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1175.2" y="1363.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.2" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1175.2" y="1347.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.2" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1175.2" y="1331.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.2" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1175.2" y="1315.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.2" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1175.2" y="1299.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.2" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1175.2" y="1283.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.2" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1175.2" y="1267.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.2" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1175.2" y="1251.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1175.2" y="1235.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.2" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1175.2" y="1219.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.2" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1175.2" y="1203.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.2" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1175.2" y="1187.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.2" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1175.2" y="1171.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.2" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.2" y="1155.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.2" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.2" y="1139.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.2" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.2" y="1123.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.2" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.2" y="1107.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.2" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.2" y="1091.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.2" y="1075.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.2" y="1086.0"></text>
</g>
<g>
<title>Parse::add_safepoint() (1 samples, 0.07%)</title><rect x="1175.2" y="1059.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.2" y="1070.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.07%)</title><rect x="1175.2" y="1043.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.2" y="1054.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="1175.2" y="1027.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1176.1" y="1155.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.1" y="1166.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1176.1" y="1139.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.1" y="1150.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1176.1" y="1123.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.1" y="1134.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1176.1" y="1107.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.1" y="1118.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1176.1" y="1091.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.1" y="1102.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.0" y="1427.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.0" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.0" y="1411.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.0" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.0" y="1395.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.0" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.0" y="1379.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.0" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.0" y="1363.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.0" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.0" y="1347.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.0" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.0" y="1331.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.0" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.0" y="1315.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.0" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.0" y="1299.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.0" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.0" y="1283.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.0" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.0" y="1267.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.0" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.0" y="1251.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.0" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.0" y="1235.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.0" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.0" y="1219.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.0" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.0" y="1203.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.0" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.0" y="1187.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.0" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.0" y="1171.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.0" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.0" y="1155.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.0" y="1166.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1177.0" y="1139.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.0" y="1150.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1177.0" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.0" y="1134.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1177.0" y="1107.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.0" y="1118.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1177.0" y="1091.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.0" y="1102.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1177.0" y="1075.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.0" y="1086.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1177.0" y="1059.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.0" y="1070.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1177.0" y="1043.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.0" y="1054.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.9" y="1523.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.9" y="1507.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.9" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.9" y="1491.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.9" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.9" y="1475.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.9" y="1459.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.9" y="1443.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.9" y="1427.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.9" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.9" y="1411.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.9" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.9" y="1395.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.9" y="1379.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.9" y="1363.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.9" y="1347.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.9" y="1331.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.9" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.9" y="1315.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.9" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.9" y="1299.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.9" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.9" y="1283.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.9" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.9" y="1267.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.9" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.9" y="1251.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.9" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.9" y="1235.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.9" y="1246.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1177.9" y="1219.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.9" y="1230.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1177.9" y="1203.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.9" y="1214.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1177.9" y="1187.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.9" y="1198.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1177.9" y="1171.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="1182.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1177.9" y="1155.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.9" y="1166.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1177.9" y="1139.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.9" y="1150.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1177.9" y="1123.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.9" y="1134.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1177.9" y="1107.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putfield(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1177.9" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.9" y="1102.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1177.9" y="1075.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.9" y="1086.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1177.9" y="1059.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.9" y="1070.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1177.9" y="1043.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.9" y="1054.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1177.9" y="1027.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.9" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1177.9" y="1011.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="1022.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1177.9" y="995.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.9" y="1006.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.07%)</title><rect x="1177.9" y="979.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.9" y="990.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.07%)</title><rect x="1177.9" y="963.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.9" y="974.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1178.7" y="1715.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.7" y="1726.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1178.7" y="1699.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.7" y="1710.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1178.7" y="1683.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.7" y="1694.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1179.6" y="1699.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1179.6" y="1683.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.6" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1179.6" y="1667.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.6" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1179.6" y="1651.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.6" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1179.6" y="1635.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1179.6" y="1619.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.6" y="1630.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.07%)</title><rect x="1179.6" y="1603.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.6" y="1614.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.07%)</title><rect x="1179.6" y="1587.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.6" y="1598.0"></text>
</g>
<g>
<title>TypeTuple::make_range(ciSignature*) (1 samples, 0.07%)</title><rect x="1179.6" y="1571.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.6" y="1582.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1179.6" y="1555.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.6" y="1566.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1179.6" y="1539.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="1550.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1179.6" y="1523.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="1534.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.07%)</title><rect x="1179.6" y="1507.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.6" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1180.5" y="1603.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.5" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1180.5" y="1587.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.5" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1180.5" y="1571.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.5" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1180.5" y="1555.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.5" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1180.5" y="1539.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.5" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1180.5" y="1523.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.5" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1180.5" y="1507.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.5" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1180.5" y="1491.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.5" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1180.5" y="1475.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.5" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1180.5" y="1459.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.5" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1180.5" y="1443.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.5" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1180.5" y="1427.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.5" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1180.5" y="1411.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.5" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1180.5" y="1395.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.5" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1180.5" y="1379.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.5" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1180.5" y="1363.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.5" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1180.5" y="1347.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.5" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1180.5" y="1331.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.5" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1180.5" y="1315.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.5" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1180.5" y="1299.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.5" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1180.5" y="1283.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1180.5" y="1267.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1180.5" y="1251.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1180.5" y="1235.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.5" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1180.5" y="1219.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.5" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1180.5" y="1203.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1180.5" y="1187.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1180.5" y="1171.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1180.5" y="1155.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1180.5" y="1139.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.5" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.5" y="1123.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.5" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.5" y="1107.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.5" y="1091.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.5" y="1075.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.5" y="1059.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.5" y="1043.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.5" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.5" y="1027.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.5" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.5" y="1011.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.5" y="995.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.5" y="1006.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.07%)</title><rect x="1180.5" y="979.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.5" y="990.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.07%)</title><rect x="1180.5" y="963.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.5" y="974.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1180.5" y="947.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.5" y="958.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.07%)</title><rect x="1180.5" y="931.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.5" y="942.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.3" y="1123.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.3" y="1107.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.3" y="1091.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.3" y="1075.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.3" y="1059.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.3" y="1043.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.3" y="1027.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.3" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.3" y="1011.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.3" y="995.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.3" y="979.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.3" y="963.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.3" y="947.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.3" y="931.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="942.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1181.3" y="915.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="926.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1181.3" y="899.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.3" y="910.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1182.2" y="1811.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1182.2" y="1795.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.2" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1182.2" y="1779.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.2" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1182.2" y="1763.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1182.2" y="1747.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1182.2" y="1731.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1182.2" y="1715.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.2" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1182.2" y="1699.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1182.2" y="1683.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.2" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1182.2" y="1667.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1182.2" y="1651.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1182.2" y="1635.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1182.2" y="1619.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1182.2" y="1603.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.2" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1182.2" y="1587.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1182.2" y="1571.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.2" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1182.2" y="1555.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.2" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1182.2" y="1539.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.2" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1182.2" y="1523.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.2" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1182.2" y="1507.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.2" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1182.2" y="1491.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1182.2" y="1475.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1182.2" y="1459.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1182.2" y="1443.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1182.2" y="1427.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1182.2" y="1411.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1182.2" y="1395.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.2" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1182.2" y="1379.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1182.2" y="1363.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.2" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1182.2" y="1347.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.2" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1182.2" y="1331.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.2" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1182.2" y="1315.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1182.2" y="1299.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.2" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1182.2" y="1283.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1182.2" y="1267.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.2" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1182.2" y="1251.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.2" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1182.2" y="1235.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.2" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1182.2" y="1219.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1182.2" y="1203.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.2" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1182.2" y="1187.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1182.2" y="1171.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.2" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1182.2" y="1155.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.2" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.2" y="1139.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.2" y="1123.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.2" y="1107.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.2" y="1091.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.2" y="1075.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.2" y="1059.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.2" y="1043.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.2" y="1027.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.2" y="1011.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.2" y="1022.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1182.2" y="995.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.2" y="1006.0"></text>
</g>
<g>
<title>Parse::set_parse_bci(int) (1 samples, 0.07%)</title><rect x="1182.2" y="979.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="990.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.07%)</title><rect x="1182.2" y="963.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1183.1" y="1139.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.1" y="1150.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1183.1" y="1123.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.1" y="1134.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1183.1" y="1107.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.1" y="1118.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.07%)</title><rect x="1183.1" y="1091.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.1" y="1102.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="1183.1" y="1075.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.1" y="1086.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.9" y="1603.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.9" y="1614.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.9" y="1587.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.9" y="1598.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.9" y="1571.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.9" y="1582.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.9" y="1555.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.9" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.9" y="1539.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.9" y="1550.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.9" y="1523.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.9" y="1534.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.9" y="1507.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.9" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.9" y="1491.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.9" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.9" y="1475.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.9" y="1459.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.9" y="1443.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.9" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.9" y="1427.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.9" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.9" y="1411.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.9" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.9" y="1395.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.9" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.9" y="1379.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.9" y="1363.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.9" y="1347.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.9" y="1331.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.9" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.9" y="1315.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.9" y="1326.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1183.9" y="1299.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.9" y="1310.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (3 samples, 0.22%)</title><rect x="1184.8" y="1907.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.8" y="1918.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (3 samples, 0.22%)</title><rect x="1184.8" y="1891.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.8" y="1902.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.07%)</title><rect x="1187.4" y="1907.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.4" y="1918.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.07%)</title><rect x="1187.4" y="1891.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.4" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.07%)</title><rect x="1187.4" y="1875.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.4" y="1886.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1188.3" y="1971.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.3" y="1982.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1188.3" y="1955.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.3" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1188.3" y="1939.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.3" y="1950.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1188.3" y="1923.0" width="0.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1191.3" y="1934.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.07%)</title><rect x="1188.3" y="1907.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.3" y="1918.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.07%)</title><rect x="1188.3" y="1891.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.3" y="1902.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.07%)</title><rect x="1189.1" y="2003.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.1" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.07%)</title><rect x="1189.1" y="1987.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.1" y="1998.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.07%)</title><rect x="1189.1" y="1971.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.1" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.07%)</title><rect x="1189.1" y="1955.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.1" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.07%)</title><rect x="1189.1" y="1939.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.1" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.07%)</title><rect x="1189.1" y="1923.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.1" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.07%)</title><rect x="1189.1" y="1907.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.1" y="1918.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.07%)</title><rect x="1189.1" y="1891.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.1" y="1902.0"></text>
</g>
</g>
</svg>
