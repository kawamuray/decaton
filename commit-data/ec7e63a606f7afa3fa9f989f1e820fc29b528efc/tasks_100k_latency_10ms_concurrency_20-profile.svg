<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (266 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="2035.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="2019.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="2003.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1987.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1971.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1955.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1939.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1923.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1907.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1891.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1875.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1859.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1843.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1827.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1811.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1795.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1779.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1763.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1747.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1731.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1715.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1699.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1683.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1667.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1651.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1635.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1619.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1603.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1587.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1571.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1555.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1539.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1523.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1507.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1491.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1475.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1459.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1443.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1427.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1411.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1395.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1379.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1363.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1347.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1331.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1315.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1299.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1283.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1267.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1251.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1235.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1219.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1203.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1187.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1171.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1155.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1139.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1123.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1107.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1091.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1075.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1059.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1043.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1027.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="1011.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="995.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="979.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="963.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="947.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="931.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="915.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="899.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="883.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="867.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="851.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="835.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="819.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="803.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="787.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="771.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="755.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="739.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="723.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="707.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="691.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="675.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="659.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="643.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="627.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="611.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="595.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="579.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="563.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="547.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="531.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="515.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="499.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="483.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="467.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="451.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="435.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="419.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="403.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="387.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="371.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="355.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="339.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="323.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="307.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="291.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="275.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="259.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="243.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="227.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="211.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="195.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="179.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="163.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="147.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="131.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="115.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="99.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="83.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="67.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.38%)</title><rect x="10.0" y="51.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.38%)</title><rect x="10.0" y="35.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (19 samples, 7.14%)</title><rect x="14.4" y="2035.0" width="84.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="17.4" y="2046.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (19 samples, 7.14%)</title><rect x="14.4" y="2019.0" width="84.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.4" y="2030.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.38%)</title><rect x="14.4" y="2003.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="17.4" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.38%)</title><rect x="14.4" y="1987.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.4" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$263/2017678178.accept (1 samples, 0.38%)</title><rect x="14.4" y="1971.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.4" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.38%)</title><rect x="14.4" y="1955.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="17.4" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.38%)</title><rect x="14.4" y="1939.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.4" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 1.50%)</title><rect x="18.9" y="2003.0" width="17.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.9" y="2014.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invokedynamic(JavaThread*) (1 samples, 0.38%)</title><rect x="23.3" y="1987.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="26.3" y="1998.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle, int, Bytecodes::Code, Thread*) (1 samples, 0.38%)</title><rect x="23.3" y="1971.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="26.3" y="1982.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokedynamic(CallInfo&amp;, constantPoolHandle, int, Thread*) (1 samples, 0.38%)</title><rect x="23.3" y="1955.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="26.3" y="1966.0"></text>
</g>
<g>
<title>ConstantPool::resolve_bootstrap_specifier_at_impl(constantPoolHandle, int, Thread*) (1 samples, 0.38%)</title><rect x="23.3" y="1939.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="26.3" y="1950.0"></text>
</g>
<g>
<title>ConstantPool::resolve_constant_at_impl(constantPoolHandle, int, int, Thread*) (1 samples, 0.38%)</title><rect x="23.3" y="1923.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="26.3" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.38%)</title><rect x="27.7" y="1987.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.7" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.38%)</title><rect x="27.7" y="1971.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="30.7" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.38%)</title><rect x="27.7" y="1955.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="30.7" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.38%)</title><rect x="27.7" y="1939.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.7" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.38%)</title><rect x="27.7" y="1923.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="30.7" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.38%)</title><rect x="27.7" y="1907.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="30.7" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.38%)</title><rect x="27.7" y="1891.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="30.7" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.38%)</title><rect x="27.7" y="1875.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.38%)</title><rect x="27.7" y="1859.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1464006217.test (1 samples, 0.38%)</title><rect x="27.7" y="1843.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pause (1 samples, 0.38%)</title><rect x="32.2" y="1987.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.2" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.pause (1 samples, 0.38%)</title><rect x="32.2" y="1971.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="35.2" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.38%)</title><rect x="36.6" y="2003.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.6" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.38%)</title><rect x="36.6" y="1987.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.6" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.38%)</title><rect x="36.6" y="1971.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.6" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.38%)</title><rect x="36.6" y="1955.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.6" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.38%)</title><rect x="36.6" y="1939.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.6" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.38%)</title><rect x="36.6" y="1923.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="39.6" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.38%)</title><rect x="36.6" y="1907.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="39.6" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.38%)</title><rect x="36.6" y="1891.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="39.6" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.38%)</title><rect x="36.6" y="1875.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="39.6" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.38%)</title><rect x="36.6" y="1859.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="39.6" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.38%)</title><rect x="36.6" y="1843.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="39.6" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/888015960.get (1 samples, 0.38%)</title><rect x="36.6" y="1827.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.6" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.38%)</title><rect x="41.1" y="2003.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="44.1" y="2014.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (7 samples, 2.63%)</title><rect x="45.5" y="2003.0" width="31.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="48.5" y="2014.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$262/1741606797.accept (5 samples, 1.88%)</title><rect x="45.5" y="1987.0" width="22.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="48.5" y="1998.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$58 (5 samples, 1.88%)</title><rect x="45.5" y="1971.0" width="22.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="48.5" y="1982.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (3 samples, 1.13%)</title><rect x="45.5" y="1955.0" width="13.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.5" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (3 samples, 1.13%)</title><rect x="45.5" y="1939.0" width="13.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="48.5" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (3 samples, 1.13%)</title><rect x="45.5" y="1923.0" width="13.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="48.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 1.13%)</title><rect x="45.5" y="1907.0" width="13.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="48.5" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 1.13%)</title><rect x="45.5" y="1891.0" width="13.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="48.5" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 1.13%)</title><rect x="45.5" y="1875.0" width="13.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="48.5" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.13%)</title><rect x="45.5" y="1859.0" width="13.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="48.5" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.13%)</title><rect x="45.5" y="1843.0" width="13.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="48.5" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 1.13%)</title><rect x="45.5" y="1827.0" width="13.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="48.5" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.38%)</title><rect x="58.8" y="1955.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="61.8" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.38%)</title><rect x="58.8" y="1939.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.8" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.38%)</title><rect x="58.8" y="1923.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="61.8" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.38%)</title><rect x="63.2" y="1955.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="66.2" y="1966.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.38%)</title><rect x="63.2" y="1939.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="66.2" y="1950.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.38%)</title><rect x="63.2" y="1923.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="66.2" y="1934.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.38%)</title><rect x="63.2" y="1907.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="66.2" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.38%)</title><rect x="67.7" y="1987.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.7" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.38%)</title><rect x="67.7" y="1971.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.38%)</title><rect x="72.1" y="1987.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="75.1" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.38%)</title><rect x="72.1" y="1971.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="75.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.38%)</title><rect x="72.1" y="1955.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="75.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.38%)</title><rect x="72.1" y="1939.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="75.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (5 samples, 1.88%)</title><rect x="76.5" y="2003.0" width="22.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="79.5" y="2014.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (5 samples, 1.88%)</title><rect x="76.5" y="1987.0" width="22.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="79.5" y="1998.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 1.50%)</title><rect x="76.5" y="1971.0" width="17.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="79.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.38%)</title><rect x="76.5" y="1955.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="79.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.38%)</title><rect x="76.5" y="1939.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="79.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.38%)</title><rect x="76.5" y="1923.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="79.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.38%)</title><rect x="76.5" y="1907.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="79.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.38%)</title><rect x="76.5" y="1891.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.38%)</title><rect x="76.5" y="1875.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="79.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.38%)</title><rect x="76.5" y="1859.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="79.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.13%)</title><rect x="81.0" y="1955.0" width="13.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="84.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.13%)</title><rect x="81.0" y="1939.0" width="13.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="84.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.75%)</title><rect x="81.0" y="1923.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.75%)</title><rect x="81.0" y="1907.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="84.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.75%)</title><rect x="81.0" y="1891.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="84.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.38%)</title><rect x="81.0" y="1875.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="84.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.38%)</title><rect x="81.0" y="1859.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="84.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.38%)</title><rect x="81.0" y="1843.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="84.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.38%)</title><rect x="81.0" y="1827.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.38%)</title><rect x="81.0" y="1811.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="84.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.38%)</title><rect x="81.0" y="1795.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.0" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.38%)</title><rect x="81.0" y="1779.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="84.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.38%)</title><rect x="85.4" y="1875.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="88.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.38%)</title><rect x="85.4" y="1859.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="88.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.38%)</title><rect x="85.4" y="1843.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="88.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.38%)</title><rect x="89.8" y="1923.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="92.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.38%)</title><rect x="89.8" y="1907.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="92.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.38%)</title><rect x="94.3" y="1971.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="97.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.38%)</title><rect x="94.3" y="1955.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="97.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.38%)</title><rect x="94.3" y="1939.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="97.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.38%)</title><rect x="94.3" y="1923.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="97.3" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.38%)</title><rect x="94.3" y="1907.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.3" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.38%)</title><rect x="94.3" y="1891.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="97.3" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.38%)</title><rect x="94.3" y="1875.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="97.3" y="1886.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.hasNext (1 samples, 0.38%)</title><rect x="94.3" y="1859.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="97.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/Thread.run (142 samples, 53.38%)</title><rect x="98.7" y="2035.0" width="629.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="101.7" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (142 samples, 53.38%)</title><rect x="98.7" y="2019.0" width="629.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="101.7" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (142 samples, 53.38%)</title><rect x="98.7" y="2003.0" width="629.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="101.7" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/1994458500.run (137 samples, 51.50%)</title><rect x="98.7" y="1987.0" width="607.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="101.7" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/1994458500.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (137 samples, 51.50%)</title><rect x="98.7" y="1971.0" width="607.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="101.7" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (137 samples, 51.50%)</title><rect x="98.7" y="1955.0" width="607.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="101.7" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (134 samples, 50.38%)</title><rect x="98.7" y="1939.0" width="594.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="101.7" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (32 samples, 12.03%)</title><rect x="116.5" y="1923.0" width="141.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="119.5" y="1934.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (32 samples, 12.03%)</title><rect x="116.5" y="1907.0" width="141.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="119.5" y="1918.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (32 samples, 12.03%)</title><rect x="116.5" y="1891.0" width="141.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="119.5" y="1902.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (32 samples, 12.03%)</title><rect x="116.5" y="1875.0" width="141.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="119.5" y="1886.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (32 samples, 12.03%)</title><rect x="116.5" y="1859.0" width="141.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="119.5" y="1870.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (32 samples, 12.03%)</title><rect x="116.5" y="1843.0" width="141.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="119.5" y="1854.0">com/fasterxml/jack..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 2.26%)</title><rect x="116.5" y="1827.0" width="26.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="119.5" y="1838.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 1.13%)</title><rect x="125.3" y="1811.0" width="13.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="128.3" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.38%)</title><rect x="134.2" y="1795.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="137.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.38%)</title><rect x="134.2" y="1779.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="137.2" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.38%)</title><rect x="134.2" y="1763.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="137.2" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.38%)</title><rect x="134.2" y="1747.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="137.2" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.38%)</title><rect x="134.2" y="1731.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="137.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.38%)</title><rect x="138.6" y="1811.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="141.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.38%)</title><rect x="138.6" y="1795.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="141.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.38%)</title><rect x="138.6" y="1779.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="141.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.38%)</title><rect x="138.6" y="1763.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="141.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (25 samples, 9.40%)</title><rect x="143.1" y="1827.0" width="110.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="146.1" y="1838.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.75%)</title><rect x="143.1" y="1811.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="146.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.75%)</title><rect x="143.1" y="1795.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="146.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 1.13%)</title><rect x="152.0" y="1811.0" width="13.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="155.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.13%)</title><rect x="152.0" y="1795.0" width="13.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="155.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 1.13%)</title><rect x="152.0" y="1779.0" width="13.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="155.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.75%)</title><rect x="156.4" y="1763.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="159.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.38%)</title><rect x="160.8" y="1747.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="163.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.38%)</title><rect x="165.3" y="1811.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="168.3" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.38%)</title><rect x="165.3" y="1795.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="168.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (18 samples, 6.77%)</title><rect x="169.7" y="1811.0" width="79.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="172.7" y="1822.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.88%)</title><rect x="178.6" y="1795.0" width="22.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.6" y="1806.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.38%)</title><rect x="187.4" y="1779.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="190.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.38%)</title><rect x="187.4" y="1763.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="190.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.38%)</title><rect x="187.4" y="1747.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="190.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.38%)</title><rect x="191.9" y="1779.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="194.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.38%)</title><rect x="191.9" y="1763.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="194.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.38%)</title><rect x="196.3" y="1779.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="199.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (11 samples, 4.14%)</title><rect x="200.8" y="1795.0" width="48.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="203.8" y="1806.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (11 samples, 4.14%)</title><rect x="200.8" y="1779.0" width="48.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.8" y="1790.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (11 samples, 4.14%)</title><rect x="200.8" y="1763.0" width="48.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="203.8" y="1774.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.50%)</title><rect x="214.1" y="1747.0" width="17.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="217.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 1.13%)</title><rect x="218.5" y="1731.0" width="13.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 1.13%)</title><rect x="218.5" y="1715.0" width="13.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 1.13%)</title><rect x="218.5" y="1699.0" width="13.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.5" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.75%)</title><rect x="222.9" y="1683.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="225.9" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.38%)</title><rect x="231.8" y="1747.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="234.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.38%)</title><rect x="231.8" y="1731.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.38%)</title><rect x="231.8" y="1715.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="234.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.38%)</title><rect x="231.8" y="1699.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="234.8" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.38%)</title><rect x="231.8" y="1683.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="234.8" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.75%)</title><rect x="236.2" y="1747.0" width="8.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="239.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.75%)</title><rect x="236.2" y="1731.0" width="8.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="239.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.75%)</title><rect x="236.2" y="1715.0" width="8.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="239.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.75%)</title><rect x="236.2" y="1699.0" width="8.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="239.2" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.75%)</title><rect x="236.2" y="1683.0" width="8.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="239.2" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.38%)</title><rect x="240.7" y="1667.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="243.7" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.38%)</title><rect x="245.1" y="1747.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="248.1" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.38%)</title><rect x="245.1" y="1731.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="248.1" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.38%)</title><rect x="245.1" y="1715.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="248.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.38%)</title><rect x="249.5" y="1811.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="252.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.38%)</title><rect x="254.0" y="1827.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="257.0" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.38%)</title><rect x="254.0" y="1811.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.38%)</title><rect x="254.0" y="1795.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="257.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.38%)</title><rect x="254.0" y="1779.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="257.0" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.38%)</title><rect x="254.0" y="1763.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="257.0" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (93 samples, 34.96%)</title><rect x="258.4" y="1923.0" width="412.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="261.4" y="1934.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (14 samples, 5.26%)</title><rect x="258.4" y="1907.0" width="62.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="261.4" y="1918.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (13 samples, 4.89%)</title><rect x="262.9" y="1891.0" width="57.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.9" y="1902.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (11 samples, 4.14%)</title><rect x="271.7" y="1875.0" width="48.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="274.7" y="1886.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.75%)</title><rect x="271.7" y="1859.0" width="8.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="274.7" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.75%)</title><rect x="271.7" y="1843.0" width="8.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="274.7" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.75%)</title><rect x="271.7" y="1827.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.75%)</title><rect x="271.7" y="1811.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.7" y="1822.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (9 samples, 3.38%)</title><rect x="280.6" y="1859.0" width="39.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="283.6" y="1870.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.75%)</title><rect x="311.7" y="1843.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="314.7" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.38%)</title><rect x="311.7" y="1827.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="314.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.38%)</title><rect x="311.7" y="1811.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="314.7" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.38%)</title><rect x="316.1" y="1827.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="319.1" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (11 samples, 4.14%)</title><rect x="320.5" y="1907.0" width="48.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="323.5" y="1918.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (11 samples, 4.14%)</title><rect x="320.5" y="1891.0" width="48.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="323.5" y="1902.0">com/..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.38%)</title><rect x="320.5" y="1875.0" width="4.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="323.5" y="1886.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.38%)</title><rect x="320.5" y="1859.0" width="4.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="323.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 1.13%)</title><rect x="325.0" y="1875.0" width="13.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="328.0" y="1886.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.75%)</title><rect x="325.0" y="1859.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="328.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.38%)</title><rect x="325.0" y="1843.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="328.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.38%)</title><rect x="325.0" y="1827.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="328.0" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.38%)</title><rect x="329.4" y="1843.0" width="4.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="332.4" y="1854.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.38%)</title><rect x="333.8" y="1859.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="336.8" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.38%)</title><rect x="333.8" y="1843.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="336.8" y="1854.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.38%)</title><rect x="333.8" y="1827.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="336.8" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.38%)</title><rect x="333.8" y="1811.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="336.8" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.38%)</title><rect x="333.8" y="1795.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="336.8" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.38%)</title><rect x="338.3" y="1875.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="341.3" y="1886.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 2.26%)</title><rect x="342.7" y="1875.0" width="26.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="345.7" y="1886.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 1.88%)</title><rect x="342.7" y="1859.0" width="22.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="345.7" y="1870.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 1.88%)</title><rect x="342.7" y="1843.0" width="22.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="345.7" y="1854.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 1.88%)</title><rect x="342.7" y="1827.0" width="22.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="345.7" y="1838.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.75%)</title><rect x="356.0" y="1811.0" width="8.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="359.0" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.38%)</title><rect x="360.5" y="1795.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="363.5" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.38%)</title><rect x="360.5" y="1779.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="363.5" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (1 samples, 0.38%)</title><rect x="364.9" y="1859.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="367.9" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (61 samples, 22.93%)</title><rect x="369.3" y="1907.0" width="270.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="372.3" y="1918.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (61 samples, 22.93%)</title><rect x="369.3" y="1891.0" width="270.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="372.3" y="1902.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/703875274.process (57 samples, 21.43%)</title><rect x="373.8" y="1875.0" width="252.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="376.8" y="1886.0">com/linecorp/decaton/benchmark/Dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (55 samples, 20.68%)</title><rect x="382.6" y="1859.0" width="244.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="385.6" y="1870.0">com/linecorp/decaton/benchmark/D..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (53 samples, 19.92%)</title><rect x="387.1" y="1843.0" width="235.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="390.1" y="1854.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.38%)</title><rect x="387.1" y="1827.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="390.1" y="1838.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.38%)</title><rect x="387.1" y="1811.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="390.1" y="1822.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.38%)</title><rect x="387.1" y="1795.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="390.1" y="1806.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.38%)</title><rect x="387.1" y="1779.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="390.1" y="1790.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.38%)</title><rect x="387.1" y="1763.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="390.1" y="1774.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.38%)</title><rect x="387.1" y="1747.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="390.1" y="1758.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.38%)</title><rect x="387.1" y="1731.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="390.1" y="1742.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.75%)</title><rect x="391.5" y="1827.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="394.5" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (49 samples, 18.42%)</title><rect x="400.4" y="1827.0" width="217.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="403.4" y="1838.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>java/lang/Thread.sleep (49 samples, 18.42%)</title><rect x="400.4" y="1811.0" width="217.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="403.4" y="1822.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (44 samples, 16.54%)</title><rect x="418.1" y="1795.0" width="195.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="421.1" y="1806.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.38%)</title><rect x="435.9" y="1779.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="438.9" y="1790.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.38%)</title><rect x="440.3" y="1779.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="443.3" y="1790.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.38%)</title><rect x="444.7" y="1779.0" width="4.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="447.7" y="1790.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.38%)</title><rect x="449.2" y="1779.0" width="4.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="452.2" y="1790.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.38%)</title><rect x="449.2" y="1763.0" width="4.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="452.2" y="1774.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.38%)</title><rect x="453.6" y="1779.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="456.6" y="1790.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.38%)</title><rect x="458.0" y="1779.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="461.0" y="1790.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (34 samples, 12.78%)</title><rect x="462.5" y="1779.0" width="150.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="465.5" y="1790.0">os::sleep(Thread*, ..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.75%)</title><rect x="484.7" y="1763.0" width="8.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="487.7" y="1774.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.38%)</title><rect x="489.1" y="1747.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="492.1" y="1758.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.38%)</title><rect x="493.5" y="1763.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="496.5" y="1774.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.38%)</title><rect x="493.5" y="1747.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="496.5" y="1758.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.38%)</title><rect x="493.5" y="1731.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="496.5" y="1742.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.38%)</title><rect x="493.5" y="1715.0" width="4.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="496.5" y="1726.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.38%)</title><rect x="498.0" y="1763.0" width="4.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="501.0" y="1774.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.75%)</title><rect x="502.4" y="1763.0" width="8.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="505.4" y="1774.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.75%)</title><rect x="502.4" y="1747.0" width="8.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="505.4" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.50%)</title><rect x="511.3" y="1763.0" width="17.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="514.3" y="1774.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 4.14%)</title><rect x="529.0" y="1763.0" width="48.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="532.0" y="1774.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.38%)</title><rect x="577.8" y="1763.0" width="4.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="580.8" y="1774.0"></text>
</g>
<g>
<title>_init (2 samples, 0.75%)</title><rect x="582.3" y="1763.0" width="8.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="585.3" y="1774.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 1.50%)</title><rect x="591.1" y="1763.0" width="17.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="594.1" y="1774.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.38%)</title><rect x="608.9" y="1763.0" width="4.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="611.9" y="1774.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.38%)</title><rect x="613.3" y="1795.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="616.3" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.38%)</title><rect x="617.7" y="1827.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="620.7" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.38%)</title><rect x="622.2" y="1843.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="625.2" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.38%)</title><rect x="626.6" y="1875.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="629.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.38%)</title><rect x="626.6" y="1859.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="629.6" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.38%)</title><rect x="626.6" y="1843.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="629.6" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.75%)</title><rect x="631.1" y="1875.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="634.1" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 2.63%)</title><rect x="639.9" y="1907.0" width="31.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="642.9" y="1918.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 2.63%)</title><rect x="639.9" y="1891.0" width="31.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="642.9" y="1902.0">ja..</text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.38%)</title><rect x="644.4" y="1875.0" width="4.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="647.4" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.50%)</title><rect x="648.8" y="1875.0" width="17.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="651.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/1893245705.accept (4 samples, 1.50%)</title><rect x="648.8" y="1859.0" width="17.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="651.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (4 samples, 1.50%)</title><rect x="648.8" y="1843.0" width="17.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="651.8" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (4 samples, 1.50%)</title><rect x="648.8" y="1827.0" width="17.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="651.8" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 1.50%)</title><rect x="648.8" y="1811.0" width="17.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="651.8" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 1.50%)</title><rect x="648.8" y="1795.0" width="17.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="651.8" y="1806.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.75%)</title><rect x="657.7" y="1779.0" width="8.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="660.7" y="1790.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.75%)</title><rect x="657.7" y="1763.0" width="8.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="660.7" y="1774.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.38%)</title><rect x="666.5" y="1875.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="669.5" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.88%)</title><rect x="671.0" y="1923.0" width="22.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="674.0" y="1934.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.88%)</title><rect x="671.0" y="1907.0" width="22.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="674.0" y="1918.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.50%)</title><rect x="675.4" y="1891.0" width="17.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="678.4" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/1893245705.accept (4 samples, 1.50%)</title><rect x="675.4" y="1875.0" width="17.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="678.4" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (4 samples, 1.50%)</title><rect x="675.4" y="1859.0" width="17.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="678.4" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (4 samples, 1.50%)</title><rect x="675.4" y="1843.0" width="17.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="678.4" y="1854.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 1.50%)</title><rect x="675.4" y="1827.0" width="17.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="678.4" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 1.50%)</title><rect x="675.4" y="1811.0" width="17.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="678.4" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 1.13%)</title><rect x="693.2" y="1939.0" width="13.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="696.2" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 1.88%)</title><rect x="706.5" y="1987.0" width="22.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="709.5" y="1998.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (3 samples, 1.13%)</title><rect x="710.9" y="1971.0" width="13.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="713.9" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.38%)</title><rect x="715.3" y="1955.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="718.3" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.38%)</title><rect x="715.3" y="1939.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="718.3" y="1950.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.38%)</title><rect x="715.3" y="1923.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="718.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.38%)</title><rect x="719.8" y="1955.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="722.8" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.38%)</title><rect x="719.8" y="1939.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="722.8" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.38%)</title><rect x="724.2" y="1971.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="727.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.38%)</title><rect x="728.6" y="2035.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="731.6" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.38%)</title><rect x="728.6" y="2019.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="731.6" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.38%)</title><rect x="728.6" y="2003.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="731.6" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.38%)</title><rect x="728.6" y="1987.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="731.6" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.requestIterator (1 samples, 0.38%)</title><rect x="728.6" y="1971.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="731.6" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.38%)</title><rect x="728.6" y="1955.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="731.6" y="1966.0"></text>
</g>
<g>
<title>start_thread (103 samples, 38.72%)</title><rect x="733.1" y="2035.0" width="456.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="736.1" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (103 samples, 38.72%)</title><rect x="733.1" y="2019.0" width="456.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="736.1" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 3.01%)</title><rect x="733.1" y="2003.0" width="35.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="736.1" y="2014.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 3.01%)</title><rect x="733.1" y="1987.0" width="35.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="736.1" y="1998.0">G1P..</text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 1.13%)</title><rect x="733.1" y="1971.0" width="13.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="736.1" y="1982.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.38%)</title><rect x="733.1" y="1955.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="736.1" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.38%)</title><rect x="737.5" y="1955.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="740.5" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.38%)</title><rect x="737.5" y="1939.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="740.5" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.38%)</title><rect x="737.5" y="1923.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="740.5" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.38%)</title><rect x="737.5" y="1907.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="740.5" y="1918.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.38%)</title><rect x="742.0" y="1955.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="745.0" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.38%)</title><rect x="742.0" y="1939.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="745.0" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 1.88%)</title><rect x="746.4" y="1971.0" width="22.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="749.4" y="1982.0">G..</text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 1.88%)</title><rect x="746.4" y="1955.0" width="22.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="749.4" y="1966.0">G..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 1.88%)</title><rect x="746.4" y="1939.0" width="22.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="749.4" y="1950.0">G..</text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 1.88%)</title><rect x="746.4" y="1923.0" width="22.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="749.4" y="1934.0">D..</text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 1.88%)</title><rect x="746.4" y="1907.0" width="22.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="749.4" y="1918.0">R..</text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 1.88%)</title><rect x="746.4" y="1891.0" width="22.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="749.4" y="1902.0">G..</text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 1.88%)</title><rect x="746.4" y="1875.0" width="22.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="749.4" y="1886.0">H..</text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.38%)</title><rect x="746.4" y="1859.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="749.4" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.38%)</title><rect x="750.8" y="1859.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="753.8" y="1870.0"></text>
</g>
<g>
<title>G1ParPushHeapRSClosure::do_oop(unsigned int*) (1 samples, 0.38%)</title><rect x="750.8" y="1843.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="753.8" y="1854.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (3 samples, 1.13%)</title><rect x="755.3" y="1859.0" width="13.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="758.3" y="1870.0"></text>
</g>
<g>
<title>G1InvokeIfNotTriggeredClosure::do_oop(unsigned int*) (1 samples, 0.38%)</title><rect x="755.3" y="1843.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="758.3" y="1854.0"></text>
</g>
<g>
<title>G1ParPushHeapRSClosure::do_oop(unsigned int*) (1 samples, 0.38%)</title><rect x="759.7" y="1843.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="762.7" y="1854.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.38%)</title><rect x="764.1" y="1843.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="767.1" y="1854.0"></text>
</g>
<g>
<title>JavaThread::run() (95 samples, 35.71%)</title><rect x="768.6" y="2003.0" width="421.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="771.6" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (95 samples, 35.71%)</title><rect x="768.6" y="1987.0" width="421.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="771.6" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (95 samples, 35.71%)</title><rect x="768.6" y="1971.0" width="421.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="771.6" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (95 samples, 35.71%)</title><rect x="768.6" y="1955.0" width="421.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="771.6" y="1966.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (92 samples, 34.59%)</title><rect x="768.6" y="1939.0" width="408.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="771.6" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (92 samples, 34.59%)</title><rect x="768.6" y="1923.0" width="408.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="771.6" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bo..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.38%)</title><rect x="768.6" y="1907.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="771.6" y="1918.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.38%)</title><rect x="768.6" y="1891.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="771.6" y="1902.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.38%)</title><rect x="768.6" y="1875.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="771.6" y="1886.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.38%)</title><rect x="768.6" y="1859.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="771.6" y="1870.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.38%)</title><rect x="768.6" y="1843.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="771.6" y="1854.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.38%)</title><rect x="768.6" y="1827.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="771.6" y="1838.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.38%)</title><rect x="768.6" y="1811.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="771.6" y="1822.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.38%)</title><rect x="768.6" y="1795.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="771.6" y="1806.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.38%)</title><rect x="768.6" y="1779.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="771.6" y="1790.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.38%)</title><rect x="768.6" y="1763.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="771.6" y="1774.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="768.6" y="1747.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="771.6" y="1758.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="768.6" y="1731.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="771.6" y="1742.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.38%)</title><rect x="768.6" y="1715.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="771.6" y="1726.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.38%)</title><rect x="768.6" y="1699.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="771.6" y="1710.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.38%)</title><rect x="768.6" y="1683.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="771.6" y="1694.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.38%)</title><rect x="768.6" y="1667.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="771.6" y="1678.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.38%)</title><rect x="768.6" y="1651.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="771.6" y="1662.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.38%)</title><rect x="768.6" y="1635.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="771.6" y="1646.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (54 samples, 20.30%)</title><rect x="773.0" y="1907.0" width="239.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="776.0" y="1918.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 1.50%)</title><rect x="773.0" y="1891.0" width="17.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="776.0" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.75%)</title><rect x="773.0" y="1875.0" width="8.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="776.0" y="1886.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.38%)</title><rect x="773.0" y="1859.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="776.0" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.38%)</title><rect x="777.4" y="1859.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="780.4" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.38%)</title><rect x="777.4" y="1843.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="780.4" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.75%)</title><rect x="781.9" y="1875.0" width="8.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="784.9" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.75%)</title><rect x="781.9" y="1859.0" width="8.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="784.9" y="1870.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.50%)</title><rect x="790.8" y="1891.0" width="17.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="793.8" y="1902.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.50%)</title><rect x="790.8" y="1875.0" width="17.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="793.8" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.13%)</title><rect x="790.8" y="1859.0" width="13.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="793.8" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.38%)</title><rect x="804.1" y="1859.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="807.1" y="1870.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.38%)</title><rect x="804.1" y="1843.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="807.1" y="1854.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.38%)</title><rect x="804.1" y="1827.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="807.1" y="1838.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.38%)</title><rect x="804.1" y="1811.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="807.1" y="1822.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.38%)</title><rect x="804.1" y="1795.0" width="4.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="807.1" y="1806.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.75%)</title><rect x="808.5" y="1891.0" width="8.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="811.5" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.75%)</title><rect x="808.5" y="1875.0" width="8.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="811.5" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.38%)</title><rect x="808.5" y="1859.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="811.5" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.38%)</title><rect x="812.9" y="1859.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="815.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (44 samples, 16.54%)</title><rect x="817.4" y="1891.0" width="195.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="820.4" y="1902.0">PhaseChaitin::Register_Al..</text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.38%)</title><rect x="817.4" y="1875.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="820.4" y="1886.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.38%)</title><rect x="821.8" y="1875.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="824.8" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (4 samples, 1.50%)</title><rect x="826.2" y="1875.0" width="17.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="829.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.75%)</title><rect x="844.0" y="1875.0" width="8.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="847.0" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.38%)</title><rect x="852.9" y="1875.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="855.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.38%)</title><rect x="852.9" y="1859.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="855.9" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="852.9" y="1843.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="855.9" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.50%)</title><rect x="857.3" y="1875.0" width="17.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="860.3" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 3.38%)</title><rect x="875.0" y="1875.0" width="40.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="878.0" y="1886.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="879.5" y="1859.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="882.5" y="1870.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (2 samples, 0.75%)</title><rect x="883.9" y="1859.0" width="8.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="886.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 1.88%)</title><rect x="892.8" y="1859.0" width="22.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="895.8" y="1870.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.75%)</title><rect x="906.1" y="1843.0" width="8.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="909.1" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.38%)</title><rect x="915.0" y="1875.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="918.0" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.13%)</title><rect x="919.4" y="1875.0" width="13.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="922.4" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.75%)</title><rect x="919.4" y="1859.0" width="8.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="922.4" y="1870.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.38%)</title><rect x="928.3" y="1859.0" width="4.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="931.3" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (10 samples, 3.76%)</title><rect x="932.7" y="1875.0" width="44.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="935.7" y="1886.0">Phas..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (10 samples, 3.76%)</title><rect x="932.7" y="1859.0" width="44.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="935.7" y="1870.0">Phas..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (10 samples, 3.76%)</title><rect x="932.7" y="1843.0" width="44.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="935.7" y="1854.0">Phas..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.75%)</title><rect x="932.7" y="1827.0" width="8.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="935.7" y="1838.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="937.1" y="1811.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="940.1" y="1822.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="941.6" y="1827.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="944.6" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (5 samples, 1.88%)</title><rect x="946.0" y="1827.0" width="22.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="949.0" y="1838.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="963.8" y="1811.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="966.8" y="1822.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.75%)</title><rect x="968.2" y="1827.0" width="8.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="971.2" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.38%)</title><rect x="977.1" y="1875.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.1" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="977.1" y="1859.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="980.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.38%)</title><rect x="981.5" y="1875.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="984.5" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="981.5" y="1859.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="984.5" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.88%)</title><rect x="985.9" y="1875.0" width="22.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="988.9" y="1886.0">P..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.75%)</title><rect x="999.2" y="1859.0" width="8.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1002.2" y="1870.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.38%)</title><rect x="1003.7" y="1843.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1006.7" y="1854.0"></text>
</g>
<g>
<title>rbx_RegPOper::in_RegMask(int) const (1 samples, 0.38%)</title><rect x="1008.1" y="1875.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1011.1" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (32 samples, 12.03%)</title><rect x="1012.6" y="1907.0" width="141.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1015.6" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.38%)</title><rect x="1012.6" y="1891.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1015.6" y="1902.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.38%)</title><rect x="1012.6" y="1875.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1015.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (26 samples, 9.77%)</title><rect x="1017.0" y="1891.0" width="115.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1020.0" y="1902.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.38%)</title><rect x="1017.0" y="1875.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1020.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.38%)</title><rect x="1021.4" y="1875.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1024.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (22 samples, 8.27%)</title><rect x="1025.9" y="1875.0" width="97.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1028.9" y="1886.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (21 samples, 7.89%)</title><rect x="1030.3" y="1859.0" width="93.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1033.3" y="1870.0">PhaseIdealL..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.38%)</title><rect x="1034.7" y="1843.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1037.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (19 samples, 7.14%)</title><rect x="1039.2" y="1843.0" width="84.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1042.2" y="1854.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.38%)</title><rect x="1101.3" y="1827.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1104.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.38%)</title><rect x="1101.3" y="1811.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.3" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.75%)</title><rect x="1105.7" y="1827.0" width="8.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.75%)</title><rect x="1114.6" y="1827.0" width="8.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.38%)</title><rect x="1119.0" y="1811.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.0" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.38%)</title><rect x="1123.5" y="1875.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.38%)</title><rect x="1127.9" y="1875.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.38%)</title><rect x="1127.9" y="1859.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.9" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1127.9" y="1843.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.9" y="1854.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.38%)</title><rect x="1127.9" y="1827.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.13%)</title><rect x="1132.3" y="1891.0" width="13.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.3" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.13%)</title><rect x="1132.3" y="1875.0" width="13.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.3" y="1886.0"></text>
</g>
<g>
<title>CallNode::Value(PhaseTransform*) const (1 samples, 0.38%)</title><rect x="1132.3" y="1859.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.3" y="1870.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1136.8" y="1859.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.8" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1141.2" y="1859.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.38%)</title><rect x="1141.2" y="1843.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.2" y="1854.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.38%)</title><rect x="1141.2" y="1827.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.2" y="1838.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.38%)</title><rect x="1145.6" y="1891.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.6" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.38%)</title><rect x="1145.6" y="1875.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.6" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1145.6" y="1859.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.6" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.38%)</title><rect x="1145.6" y="1843.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.6" y="1854.0"></text>
</g>
<g>
<title>scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*) (1 samples, 0.38%)</title><rect x="1145.6" y="1827.0" width="4.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1148.6" y="1838.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.38%)</title><rect x="1145.6" y="1811.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.6" y="1822.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.38%)</title><rect x="1145.6" y="1795.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.6" y="1806.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.38%)</title><rect x="1145.6" y="1779.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.6" y="1790.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.38%)</title><rect x="1145.6" y="1763.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.6" y="1774.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.38%)</title><rect x="1145.6" y="1747.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.6" y="1758.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.38%)</title><rect x="1150.1" y="1891.0" width="4.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1153.1" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.50%)</title><rect x="1154.5" y="1907.0" width="17.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.5" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.50%)</title><rect x="1154.5" y="1891.0" width="17.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.5" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.50%)</title><rect x="1154.5" y="1875.0" width="17.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.5" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.50%)</title><rect x="1154.5" y="1859.0" width="17.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.5" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.50%)</title><rect x="1154.5" y="1843.0" width="17.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.5" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.13%)</title><rect x="1154.5" y="1827.0" width="13.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.5" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.13%)</title><rect x="1154.5" y="1811.0" width="13.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.5" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.13%)</title><rect x="1154.5" y="1795.0" width="13.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.5" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.13%)</title><rect x="1154.5" y="1779.0" width="13.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.5" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.13%)</title><rect x="1154.5" y="1763.0" width="13.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.5" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.13%)</title><rect x="1154.5" y="1747.0" width="13.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.5" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.13%)</title><rect x="1154.5" y="1731.0" width="13.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.5" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1154.5" y="1715.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.5" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1154.5" y="1699.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.5" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1154.5" y="1683.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.5" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1154.5" y="1667.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.5" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1154.5" y="1651.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.5" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1154.5" y="1635.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.5" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1154.5" y="1619.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.5" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1154.5" y="1603.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.5" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1154.5" y="1587.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.5" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1154.5" y="1571.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.5" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1154.5" y="1555.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.5" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1154.5" y="1539.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.5" y="1550.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.38%)</title><rect x="1154.5" y="1523.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.5" y="1534.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.38%)</title><rect x="1154.5" y="1507.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.5" y="1518.0"></text>
</g>
<g>
<title>pass_initial_checks(ciMethod*, int, ciMethod*) (1 samples, 0.38%)</title><rect x="1154.5" y="1491.0" width="4.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1157.5" y="1502.0"></text>
</g>
<g>
<title>ciMethod::should_exclude() (1 samples, 0.38%)</title><rect x="1154.5" y="1475.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.5" y="1486.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1158.9" y="1715.0" width="8.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.9" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1158.9" y="1699.0" width="8.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.9" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1158.9" y="1683.0" width="8.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.9" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.75%)</title><rect x="1158.9" y="1667.0" width="8.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.9" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.75%)</title><rect x="1158.9" y="1651.0" width="8.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.9" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.75%)</title><rect x="1158.9" y="1635.0" width="8.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.9" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.75%)</title><rect x="1158.9" y="1619.0" width="8.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.9" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1158.9" y="1603.0" width="8.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.9" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1158.9" y="1587.0" width="8.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.9" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.75%)</title><rect x="1158.9" y="1571.0" width="8.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.9" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.75%)</title><rect x="1158.9" y="1555.0" width="8.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.9" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.75%)</title><rect x="1158.9" y="1539.0" width="8.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.9" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.75%)</title><rect x="1158.9" y="1523.0" width="8.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.9" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1158.9" y="1507.0" width="8.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.9" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1158.9" y="1491.0" width="8.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.9" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.75%)</title><rect x="1158.9" y="1475.0" width="8.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.75%)</title><rect x="1158.9" y="1459.0" width="8.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.75%)</title><rect x="1158.9" y="1443.0" width="8.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.9" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.75%)</title><rect x="1158.9" y="1427.0" width="8.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.9" y="1438.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.38%)</title><rect x="1158.9" y="1411.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.9" y="1422.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.38%)</title><rect x="1158.9" y="1395.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.9" y="1406.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.38%)</title><rect x="1158.9" y="1379.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.9" y="1390.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.38%)</title><rect x="1158.9" y="1363.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.9" y="1374.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.38%)</title><rect x="1158.9" y="1347.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.9" y="1358.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.38%)</title><rect x="1158.9" y="1331.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.9" y="1342.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.38%)</title><rect x="1158.9" y="1315.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.9" y="1326.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.38%)</title><rect x="1158.9" y="1299.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.9" y="1310.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.38%)</title><rect x="1158.9" y="1283.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.9" y="1294.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.38%)</title><rect x="1158.9" y="1267.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.9" y="1278.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="1158.9" y="1251.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.9" y="1262.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="1158.9" y="1235.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.9" y="1246.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.38%)</title><rect x="1158.9" y="1219.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.9" y="1230.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.38%)</title><rect x="1158.9" y="1203.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.9" y="1214.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.38%)</title><rect x="1158.9" y="1187.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.9" y="1198.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.38%)</title><rect x="1158.9" y="1171.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.9" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.38%)</title><rect x="1158.9" y="1155.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.9" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.38%)</title><rect x="1158.9" y="1139.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.9" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1163.4" y="1411.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.4" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1163.4" y="1395.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.4" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1163.4" y="1379.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.4" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1163.4" y="1363.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.4" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1163.4" y="1347.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.4" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1163.4" y="1331.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.4" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1163.4" y="1315.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.4" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1163.4" y="1299.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.4" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1163.4" y="1283.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.4" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1163.4" y="1267.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.4" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1163.4" y="1251.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.4" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1163.4" y="1235.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.4" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1163.4" y="1219.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.4" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1163.4" y="1203.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.4" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1163.4" y="1187.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.4" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1163.4" y="1171.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.4" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1163.4" y="1155.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.4" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1163.4" y="1139.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.4" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1163.4" y="1123.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.4" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1163.4" y="1107.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.4" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1163.4" y="1091.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1163.4" y="1075.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1163.4" y="1059.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1163.4" y="1043.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.4" y="1054.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.38%)</title><rect x="1163.4" y="1027.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.4" y="1038.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.38%)</title><rect x="1163.4" y="1011.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.4" y="1022.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.38%)</title><rect x="1163.4" y="995.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.4" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.38%)</title><rect x="1163.4" y="979.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.4" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.38%)</title><rect x="1163.4" y="963.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.4" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.38%)</title><rect x="1163.4" y="947.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.4" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.38%)</title><rect x="1163.4" y="931.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.4" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.38%)</title><rect x="1163.4" y="915.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.4" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.38%)</title><rect x="1163.4" y="899.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.4" y="910.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.38%)</title><rect x="1163.4" y="883.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.4" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="1163.4" y="867.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.4" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="1163.4" y="851.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.4" y="862.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.38%)</title><rect x="1163.4" y="835.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.4" y="846.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.38%)</title><rect x="1163.4" y="819.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.4" y="830.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.38%)</title><rect x="1163.4" y="803.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.4" y="814.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.38%)</title><rect x="1163.4" y="787.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.4" y="798.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.38%)</title><rect x="1163.4" y="771.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.4" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.38%)</title><rect x="1163.4" y="755.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.4" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.38%)</title><rect x="1163.4" y="739.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.38%)</title><rect x="1167.8" y="1827.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.8" y="1838.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.38%)</title><rect x="1167.8" y="1811.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.8" y="1822.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.38%)</title><rect x="1167.8" y="1795.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.8" y="1806.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.38%)</title><rect x="1167.8" y="1779.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.8" y="1790.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1167.8" y="1763.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.8" y="1774.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1167.8" y="1747.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.8" y="1758.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.38%)</title><rect x="1167.8" y="1731.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.8" y="1742.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.38%)</title><rect x="1167.8" y="1715.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.8" y="1726.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.38%)</title><rect x="1167.8" y="1699.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.8" y="1710.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.38%)</title><rect x="1167.8" y="1683.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.8" y="1694.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.38%)</title><rect x="1167.8" y="1667.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.8" y="1678.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.38%)</title><rect x="1167.8" y="1651.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.8" y="1662.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.38%)</title><rect x="1167.8" y="1635.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.8" y="1646.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.38%)</title><rect x="1167.8" y="1619.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.8" y="1630.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.38%)</title><rect x="1172.3" y="1907.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.3" y="1918.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.38%)</title><rect x="1172.3" y="1891.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.3" y="1902.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.13%)</title><rect x="1176.7" y="1939.0" width="13.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.13%)</title><rect x="1176.7" y="1923.0" width="13.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.7" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.13%)</title><rect x="1176.7" y="1907.0" width="13.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.7" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.13%)</title><rect x="1176.7" y="1891.0" width="13.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.7" y="1902.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.38%)</title><rect x="1176.7" y="1875.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.7" y="1886.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.38%)</title><rect x="1176.7" y="1859.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.7" y="1870.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.38%)</title><rect x="1176.7" y="1843.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.7" y="1854.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.38%)</title><rect x="1176.7" y="1827.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.7" y="1838.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.38%)</title><rect x="1176.7" y="1811.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.7" y="1822.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.38%)</title><rect x="1176.7" y="1795.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.7" y="1806.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.38%)</title><rect x="1176.7" y="1779.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="1790.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.38%)</title><rect x="1176.7" y="1763.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.7" y="1774.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.38%)</title><rect x="1176.7" y="1747.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.7" y="1758.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.38%)</title><rect x="1176.7" y="1731.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.7" y="1742.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.38%)</title><rect x="1176.7" y="1715.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="1726.0"></text>
</g>
<g>
<title>GraphBuilder::new_instance(int) (1 samples, 0.38%)</title><rect x="1176.7" y="1699.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.7" y="1710.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.38%)</title><rect x="1176.7" y="1683.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.7" y="1694.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="1176.7" y="1667.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="1678.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="1176.7" y="1651.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.7" y="1662.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.38%)</title><rect x="1176.7" y="1635.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.7" y="1646.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.38%)</title><rect x="1181.1" y="1875.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.1" y="1886.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.38%)</title><rect x="1181.1" y="1859.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.1" y="1870.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.38%)</title><rect x="1181.1" y="1843.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.1" y="1854.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.38%)</title><rect x="1181.1" y="1827.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.1" y="1838.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.38%)</title><rect x="1181.1" y="1811.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.1" y="1822.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.38%)</title><rect x="1185.6" y="1875.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.6" y="1886.0"></text>
</g>
<g>
<title>ControlFlowOptimizer::optimize(BlockList*) (1 samples, 0.38%)</title><rect x="1185.6" y="1859.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.6" y="1870.0"></text>
</g>
</g>
</svg>
