<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1126" onload="init(evt)" viewBox="0 0 1200 1126" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1109"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1109"> </text>
<g id="frames">
<g>
<title>all (113 samples, 100.00%)</title><rect x="10.0" y="1075.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1086.0">all</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.88%)</title><rect x="10.0" y="1059.0" width="10.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.88%)</title><rect x="10.0" y="1043.0" width="10.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (7 samples, 6.19%)</title><rect x="20.4" y="1059.0" width="73.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.4" y="1070.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (7 samples, 6.19%)</title><rect x="20.4" y="1043.0" width="73.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.4" y="1054.0">com/line..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 2.65%)</title><rect x="20.4" y="1027.0" width="31.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="23.4" y="1038.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$266/1784076658.accept (2 samples, 1.77%)</title><rect x="20.4" y="1011.0" width="20.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.4" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (2 samples, 1.77%)</title><rect x="20.4" y="995.0" width="20.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 0.88%)</title><rect x="20.4" y="979.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 0.88%)</title><rect x="20.4" y="963.0" width="10.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="23.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 0.88%)</title><rect x="20.4" y="947.0" width="10.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.88%)</title><rect x="20.4" y="931.0" width="10.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.88%)</title><rect x="20.4" y="915.0" width="10.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.88%)</title><rect x="20.4" y="899.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.88%)</title><rect x="20.4" y="883.0" width="10.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="23.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.88%)</title><rect x="20.4" y="867.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.88%)</title><rect x="20.4" y="851.0" width="10.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.88%)</title><rect x="30.9" y="979.0" width="10.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="33.9" y="990.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.88%)</title><rect x="30.9" y="963.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.88%)</title><rect x="41.3" y="1011.0" width="10.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="44.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.88%)</title><rect x="41.3" y="995.0" width="10.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="44.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.88%)</title><rect x="41.3" y="979.0" width="10.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="44.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.88%)</title><rect x="41.3" y="963.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="44.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (4 samples, 3.54%)</title><rect x="51.8" y="1027.0" width="41.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="54.8" y="1038.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (4 samples, 3.54%)</title><rect x="51.8" y="1011.0" width="41.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="54.8" y="1022.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (2 samples, 1.77%)</title><rect x="51.8" y="995.0" width="20.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="54.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.88%)</title><rect x="51.8" y="979.0" width="10.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="54.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.88%)</title><rect x="51.8" y="963.0" width="10.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="54.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.88%)</title><rect x="51.8" y="947.0" width="10.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="54.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.88%)</title><rect x="51.8" y="931.0" width="10.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="54.8" y="942.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.88%)</title><rect x="51.8" y="915.0" width="10.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$85/228425750.get (1 samples, 0.88%)</title><rect x="51.8" y="899.0" width="10.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="54.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (1 samples, 0.88%)</title><rect x="62.2" y="979.0" width="10.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="65.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.88%)</title><rect x="62.2" y="963.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="65.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.88%)</title><rect x="62.2" y="947.0" width="10.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="65.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.88%)</title><rect x="62.2" y="931.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.88%)</title><rect x="62.2" y="915.0" width="10.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="65.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.88%)</title><rect x="62.2" y="899.0" width="10.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="65.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.88%)</title><rect x="62.2" y="883.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="65.2" y="894.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.88%)</title><rect x="62.2" y="867.0" width="10.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="65.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.88%)</title><rect x="72.7" y="995.0" width="10.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="75.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.88%)</title><rect x="72.7" y="979.0" width="10.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="75.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.88%)</title><rect x="72.7" y="963.0" width="10.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="75.7" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.88%)</title><rect x="72.7" y="947.0" width="10.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="75.7" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.88%)</title><rect x="72.7" y="931.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="75.7" y="942.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.88%)</title><rect x="72.7" y="915.0" width="10.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="75.7" y="926.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.88%)</title><rect x="72.7" y="899.0" width="10.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="75.7" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.88%)</title><rect x="72.7" y="883.0" width="10.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.7" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.88%)</title><rect x="72.7" y="867.0" width="10.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="75.7" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.88%)</title><rect x="72.7" y="851.0" width="10.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="75.7" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.88%)</title><rect x="72.7" y="835.0" width="10.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="75.7" y="846.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.88%)</title><rect x="72.7" y="819.0" width="10.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="75.7" y="830.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.88%)</title><rect x="72.7" y="803.0" width="10.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="75.7" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.88%)</title><rect x="72.7" y="787.0" width="10.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="75.7" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_method(JavaThread*, Thread*) (1 samples, 0.88%)</title><rect x="72.7" y="771.0" width="10.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="75.7" y="782.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.88%)</title><rect x="72.7" y="755.0" width="10.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="75.7" y="766.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.88%)</title><rect x="72.7" y="739.0" width="10.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="75.7" y="750.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.88%)</title><rect x="72.7" y="723.0" width="10.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="75.7" y="734.0"></text>
</g>
<g>
<title>frame::oopmapreg_to_location(VMRegImpl*, RegisterMap const*) const (1 samples, 0.88%)</title><rect x="72.7" y="707.0" width="10.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="75.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.88%)</title><rect x="83.1" y="995.0" width="10.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="86.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.88%)</title><rect x="83.1" y="979.0" width="10.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="86.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.88%)</title><rect x="83.1" y="963.0" width="10.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="86.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.88%)</title><rect x="83.1" y="947.0" width="10.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.1" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.88%)</title><rect x="83.1" y="931.0" width="10.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="86.1" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.88%)</title><rect x="83.1" y="915.0" width="10.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="86.1" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.88%)</title><rect x="83.1" y="899.0" width="10.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="86.1" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.88%)</title><rect x="83.1" y="883.0" width="10.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="86.1" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.88%)</title><rect x="83.1" y="867.0" width="10.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="86.1" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.run (7 samples, 6.19%)</title><rect x="93.5" y="1059.0" width="73.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="96.5" y="1070.0">java/lan..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (7 samples, 6.19%)</title><rect x="93.5" y="1043.0" width="73.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.5" y="1054.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (7 samples, 6.19%)</title><rect x="93.5" y="1027.0" width="73.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="96.5" y="1038.0">java/uti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$269/1598301396.run (6 samples, 5.31%)</title><rect x="93.5" y="1011.0" width="62.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="96.5" y="1022.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (6 samples, 5.31%)</title><rect x="93.5" y="995.0" width="62.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="96.5" y="1006.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (6 samples, 5.31%)</title><rect x="93.5" y="979.0" width="62.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.5" y="990.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (6 samples, 5.31%)</title><rect x="93.5" y="963.0" width="62.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.5" y="974.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (1 samples, 0.88%)</title><rect x="93.5" y="947.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="96.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (1 samples, 0.88%)</title><rect x="93.5" y="931.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.5" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (1 samples, 0.88%)</title><rect x="93.5" y="915.0" width="10.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (1 samples, 0.88%)</title><rect x="93.5" y="899.0" width="10.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="96.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (1 samples, 0.88%)</title><rect x="93.5" y="883.0" width="10.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="96.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (1 samples, 0.88%)</title><rect x="93.5" y="867.0" width="10.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.88%)</title><rect x="93.5" y="851.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="96.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.88%)</title><rect x="93.5" y="835.0" width="10.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="96.5" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (5 samples, 4.42%)</title><rect x="104.0" y="947.0" width="52.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="107.0" y="958.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (2 samples, 1.77%)</title><rect x="104.0" y="931.0" width="20.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="107.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (2 samples, 1.77%)</title><rect x="104.0" y="915.0" width="20.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="107.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (1 samples, 0.88%)</title><rect x="114.4" y="899.0" width="10.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="117.4" y="910.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.88%)</title><rect x="114.4" y="883.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="117.4" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.88%)</title><rect x="114.4" y="867.0" width="10.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="117.4" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.88%)</title><rect x="114.4" y="851.0" width="10.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="117.4" y="862.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.88%)</title><rect x="114.4" y="835.0" width="10.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="117.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (3 samples, 2.65%)</title><rect x="124.9" y="931.0" width="31.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="127.9" y="942.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (3 samples, 2.65%)</title><rect x="124.9" y="915.0" width="31.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="127.9" y="926.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1499302915.process (3 samples, 2.65%)</title><rect x="124.9" y="899.0" width="31.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="127.9" y="910.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (3 samples, 2.65%)</title><rect x="124.9" y="883.0" width="31.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="127.9" y="894.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (3 samples, 2.65%)</title><rect x="124.9" y="867.0" width="31.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="127.9" y="878.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (3 samples, 2.65%)</title><rect x="124.9" y="851.0" width="31.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="127.9" y="862.0">co..</text>
</g>
<g>
<title>java/lang/Thread.sleep (3 samples, 2.65%)</title><rect x="124.9" y="835.0" width="31.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="127.9" y="846.0">ja..</text>
</g>
<g>
<title>JVM_Sleep (2 samples, 1.77%)</title><rect x="124.9" y="819.0" width="20.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="127.9" y="830.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (2 samples, 1.77%)</title><rect x="124.9" y="803.0" width="20.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="127.9" y="814.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.88%)</title><rect x="124.9" y="787.0" width="10.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="127.9" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.88%)</title><rect x="135.3" y="787.0" width="10.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="138.3" y="798.0"></text>
</g>
<g>
<title>_dl_check_caller (1 samples, 0.88%)</title><rect x="145.8" y="819.0" width="10.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="148.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.88%)</title><rect x="156.2" y="1011.0" width="10.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="159.2" y="1022.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.88%)</title><rect x="156.2" y="995.0" width="10.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="159.2" y="1006.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.88%)</title><rect x="156.2" y="979.0" width="10.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="159.2" y="990.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.88%)</title><rect x="156.2" y="963.0" width="10.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="159.2" y="974.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) [clone .part.149] (1 samples, 0.88%)</title><rect x="156.2" y="947.0" width="10.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="159.2" y="958.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.88%)</title><rect x="156.2" y="931.0" width="10.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="159.2" y="942.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.88%)</title><rect x="156.2" y="915.0" width="10.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="159.2" y="926.0"></text>
</g>
<g>
<title>Method::load_signature_classes(methodHandle, Thread*) (1 samples, 0.88%)</title><rect x="156.2" y="899.0" width="10.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="159.2" y="910.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.88%)</title><rect x="156.2" y="883.0" width="10.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="159.2" y="894.0"></text>
</g>
<g>
<title>start_thread (98 samples, 86.73%)</title><rect x="166.6" y="1059.0" width="1023.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="169.6" y="1070.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (98 samples, 86.73%)</title><rect x="166.6" y="1043.0" width="1023.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="169.6" y="1054.0">java_start(Thread*)</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (98 samples, 86.73%)</title><rect x="166.6" y="1027.0" width="1023.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="169.6" y="1038.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (97 samples, 85.84%)</title><rect x="166.6" y="1011.0" width="1013.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="169.6" y="1022.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (97 samples, 85.84%)</title><rect x="166.6" y="995.0" width="1013.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="169.6" y="1006.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (91 samples, 80.53%)</title><rect x="166.6" y="979.0" width="950.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="169.6" y="990.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (91 samples, 80.53%)</title><rect x="166.6" y="963.0" width="950.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="169.6" y="974.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (59 samples, 52.21%)</title><rect x="166.6" y="947.0" width="616.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="169.6" y="958.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Block::is_Empty() const (1 samples, 0.88%)</title><rect x="166.6" y="931.0" width="10.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="169.6" y="942.0"></text>
</g>
<g>
<title>Compile::Output() (3 samples, 2.65%)</title><rect x="177.1" y="931.0" width="31.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="180.1" y="942.0">Co..</text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.88%)</title><rect x="177.1" y="915.0" width="10.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="180.1" y="926.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 1.77%)</title><rect x="187.5" y="915.0" width="20.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="190.5" y="926.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 1.77%)</title><rect x="187.5" y="899.0" width="20.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="190.5" y="910.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.88%)</title><rect x="198.0" y="883.0" width="10.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="201.0" y="894.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.88%)</title><rect x="198.0" y="867.0" width="10.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="201.0" y="878.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 3.54%)</title><rect x="208.4" y="931.0" width="41.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="211.4" y="942.0">Com..</text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.88%)</title><rect x="229.3" y="915.0" width="10.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="232.3" y="926.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.88%)</title><rect x="229.3" y="899.0" width="10.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="232.3" y="910.0"></text>
</g>
<g>
<title>loadConINode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.88%)</title><rect x="239.7" y="915.0" width="10.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="242.7" y="926.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 4.42%)</title><rect x="250.2" y="931.0" width="52.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="253.2" y="942.0">Match..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 4.42%)</title><rect x="250.2" y="915.0" width="52.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="253.2" y="926.0">Match..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.88%)</title><rect x="260.6" y="899.0" width="10.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="263.6" y="910.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 2.65%)</title><rect x="271.1" y="899.0" width="31.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="274.1" y="910.0">Ma..</text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 2.65%)</title><rect x="271.1" y="883.0" width="31.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="274.1" y="894.0">Ma..</text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.88%)</title><rect x="271.1" y="867.0" width="10.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="274.1" y="878.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.88%)</title><rect x="271.1" y="851.0" width="10.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="274.1" y="862.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.88%)</title><rect x="271.1" y="835.0" width="10.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="274.1" y="846.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.88%)</title><rect x="271.1" y="819.0" width="10.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="274.1" y="830.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.88%)</title><rect x="271.1" y="803.0" width="10.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="274.1" y="814.0"></text>
</g>
<g>
<title>Node::match_edge(unsigned int) const (1 samples, 0.88%)</title><rect x="281.5" y="867.0" width="10.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="284.5" y="878.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.88%)</title><rect x="291.9" y="867.0" width="10.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="294.9" y="878.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.88%)</title><rect x="291.9" y="851.0" width="10.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="294.9" y="862.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.88%)</title><rect x="291.9" y="835.0" width="10.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="294.9" y="846.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.88%)</title><rect x="291.9" y="819.0" width="10.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="294.9" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 4.42%)</title><rect x="302.4" y="931.0" width="52.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="305.4" y="942.0">Phase..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 4.42%)</title><rect x="302.4" y="915.0" width="52.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="305.4" y="926.0">Phase..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 2.65%)</title><rect x="312.8" y="899.0" width="31.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="315.8" y="910.0">Ph..</text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.88%)</title><rect x="323.3" y="883.0" width="10.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="326.3" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.88%)</title><rect x="333.7" y="883.0" width="10.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="336.7" y="894.0"></text>
</g>
<g>
<title>Node::add_prec(Node*) (1 samples, 0.88%)</title><rect x="333.7" y="867.0" width="10.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="336.7" y="878.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.88%)</title><rect x="333.7" y="851.0" width="10.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="336.7" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.88%)</title><rect x="344.2" y="899.0" width="10.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="347.2" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.88%)</title><rect x="344.2" y="883.0" width="10.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="347.2" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (41 samples, 36.28%)</title><rect x="354.6" y="931.0" width="428.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="357.6" y="942.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.88%)</title><rect x="354.6" y="915.0" width="10.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="357.6" y="926.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.88%)</title><rect x="365.0" y="915.0" width="10.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="368.0" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.88%)</title><rect x="375.5" y="915.0" width="10.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="378.5" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 3.54%)</title><rect x="385.9" y="915.0" width="41.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="388.9" y="926.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.88%)</title><rect x="396.4" y="899.0" width="10.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="399.4" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 1.77%)</title><rect x="406.8" y="899.0" width="20.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="409.8" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.77%)</title><rect x="406.8" y="883.0" width="20.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="409.8" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 4.42%)</title><rect x="427.7" y="915.0" width="52.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="430.7" y="926.0">Phase..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 7.08%)</title><rect x="479.9" y="915.0" width="83.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="482.9" y="926.0">PhaseChai..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 5.31%)</title><rect x="500.8" y="899.0" width="62.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="503.8" y="910.0">PhaseC..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 2.65%)</title><rect x="532.1" y="883.0" width="31.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="535.1" y="894.0">In..</text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.88%)</title><rect x="563.5" y="915.0" width="10.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="566.5" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (4 samples, 3.54%)</title><rect x="573.9" y="915.0" width="41.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="576.9" y="926.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.88%)</title><rect x="615.7" y="915.0" width="10.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="618.7" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 3.54%)</title><rect x="626.1" y="915.0" width="41.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="629.1" y="926.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 1.77%)</title><rect x="647.0" y="899.0" width="20.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="650.0" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.88%)</title><rect x="657.4" y="883.0" width="10.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="660.4" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.88%)</title><rect x="657.4" y="867.0" width="10.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="660.4" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::yank(Node*, Block*, Node_List*, Node_List*) (1 samples, 0.88%)</title><rect x="657.4" y="851.0" width="10.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="660.4" y="862.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 1.77%)</title><rect x="667.9" y="915.0" width="20.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="670.9" y="926.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 1.77%)</title><rect x="667.9" y="899.0" width="20.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="670.9" y="910.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 1.77%)</title><rect x="667.9" y="883.0" width="20.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="670.9" y="894.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.88%)</title><rect x="667.9" y="867.0" width="10.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="670.9" y="878.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.88%)</title><rect x="678.3" y="867.0" width="10.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="681.3" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.88%)</title><rect x="678.3" y="851.0" width="10.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="681.3" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.88%)</title><rect x="688.8" y="915.0" width="10.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="691.8" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.88%)</title><rect x="688.8" y="899.0" width="10.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="691.8" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 1.77%)</title><rect x="699.2" y="915.0" width="20.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="702.2" y="926.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.88%)</title><rect x="699.2" y="899.0" width="10.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="702.2" y="910.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.88%)</title><rect x="699.2" y="883.0" width="10.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="702.2" y="894.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.88%)</title><rect x="699.2" y="867.0" width="10.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="702.2" y="878.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.88%)</title><rect x="699.2" y="851.0" width="10.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="702.2" y="862.0"></text>
</g>
<g>
<title>_init (1 samples, 0.88%)</title><rect x="709.6" y="899.0" width="10.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="712.6" y="910.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 4.42%)</title><rect x="720.1" y="915.0" width="52.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="723.1" y="926.0">Phase..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.77%)</title><rect x="751.4" y="899.0" width="20.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="754.4" y="910.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.88%)</title><rect x="772.3" y="915.0" width="10.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="775.3" y="926.0"></text>
</g>
<g>
<title>Compile::Optimize() (22 samples, 19.47%)</title><rect x="782.7" y="947.0" width="229.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="785.7" y="958.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.88%)</title><rect x="782.7" y="931.0" width="10.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="785.7" y="942.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.88%)</title><rect x="782.7" y="915.0" width="10.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="785.7" y="926.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.88%)</title><rect x="793.2" y="931.0" width="10.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="796.2" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (17 samples, 15.04%)</title><rect x="803.6" y="931.0" width="177.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="806.6" y="942.0">PhaseIdealLoop::build_a..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.88%)</title><rect x="803.6" y="915.0" width="10.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="806.6" y="926.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.88%)</title><rect x="814.1" y="915.0" width="10.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="817.1" y="926.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.88%)</title><rect x="814.1" y="899.0" width="10.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="817.1" y="910.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.88%)</title><rect x="814.1" y="883.0" width="10.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="817.1" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.88%)</title><rect x="824.5" y="915.0" width="10.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="827.5" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.77%)</title><rect x="835.0" y="915.0" width="20.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="838.0" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 6.19%)</title><rect x="855.8" y="915.0" width="73.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="858.8" y="926.0">PhaseIde..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.88%)</title><rect x="866.3" y="899.0" width="10.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="869.3" y="910.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.88%)</title><rect x="866.3" y="883.0" width="10.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="869.3" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 2.65%)</title><rect x="876.7" y="899.0" width="31.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="879.7" y="910.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 1.77%)</title><rect x="887.2" y="883.0" width="20.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="890.2" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 1.77%)</title><rect x="887.2" y="867.0" width="20.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="890.2" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 1.77%)</title><rect x="908.1" y="899.0" width="20.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="911.1" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 3.54%)</title><rect x="928.9" y="915.0" width="41.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="931.9" y="926.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 2.65%)</title><rect x="939.4" y="899.0" width="31.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="942.4" y="910.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.88%)</title><rect x="939.4" y="883.0" width="10.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="942.4" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.88%)</title><rect x="939.4" y="867.0" width="10.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="942.4" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.88%)</title><rect x="949.8" y="883.0" width="10.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="952.8" y="894.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.88%)</title><rect x="949.8" y="867.0" width="10.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="952.8" y="878.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.88%)</title><rect x="949.8" y="851.0" width="10.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="952.8" y="862.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.88%)</title><rect x="949.8" y="835.0" width="10.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="952.8" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.88%)</title><rect x="960.3" y="883.0" width="10.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="963.3" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.88%)</title><rect x="960.3" y="867.0" width="10.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="963.3" y="878.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.88%)</title><rect x="970.7" y="915.0" width="10.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="973.7" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.77%)</title><rect x="981.2" y="931.0" width="20.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="984.2" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.77%)</title><rect x="981.2" y="915.0" width="20.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="984.2" y="926.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.88%)</title><rect x="981.2" y="899.0" width="10.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="984.2" y="910.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.88%)</title><rect x="981.2" y="883.0" width="10.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="984.2" y="894.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.88%)</title><rect x="981.2" y="867.0" width="10.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="984.2" y="878.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.88%)</title><rect x="981.2" y="851.0" width="10.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="984.2" y="862.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.88%)</title><rect x="981.2" y="835.0" width="10.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="984.2" y="846.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.88%)</title><rect x="981.2" y="819.0" width="10.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="984.2" y="830.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.88%)</title><rect x="981.2" y="803.0" width="10.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="984.2" y="814.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.88%)</title><rect x="991.6" y="899.0" width="10.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="994.6" y="910.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.88%)</title><rect x="1002.0" y="931.0" width="10.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1005.0" y="942.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.88%)</title><rect x="1002.0" y="915.0" width="10.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1005.0" y="926.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.88%)</title><rect x="1002.0" y="899.0" width="10.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1005.0" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 6.19%)</title><rect x="1012.5" y="947.0" width="73.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1015.5" y="958.0">ParseGen..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 6.19%)</title><rect x="1012.5" y="931.0" width="73.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1015.5" y="942.0">Parse::P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 6.19%)</title><rect x="1012.5" y="915.0" width="73.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1015.5" y="926.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 6.19%)</title><rect x="1012.5" y="899.0" width="73.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1015.5" y="910.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.88%)</title><rect x="1012.5" y="883.0" width="10.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1015.5" y="894.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.88%)</title><rect x="1012.5" y="867.0" width="10.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1015.5" y="878.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.88%)</title><rect x="1012.5" y="851.0" width="10.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1015.5" y="862.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.88%)</title><rect x="1012.5" y="835.0" width="10.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1015.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 5.31%)</title><rect x="1022.9" y="883.0" width="62.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1025.9" y="894.0">Parse:..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 4.42%)</title><rect x="1022.9" y="867.0" width="52.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1025.9" y="878.0">Parse..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.65%)</title><rect x="1022.9" y="851.0" width="31.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1025.9" y="862.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.65%)</title><rect x="1022.9" y="835.0" width="31.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1025.9" y="846.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.65%)</title><rect x="1022.9" y="819.0" width="31.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1025.9" y="830.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.65%)</title><rect x="1022.9" y="803.0" width="31.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1025.9" y="814.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 2.65%)</title><rect x="1022.9" y="787.0" width="31.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1025.9" y="798.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.65%)</title><rect x="1022.9" y="771.0" width="31.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1025.9" y="782.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.65%)</title><rect x="1022.9" y="755.0" width="31.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1025.9" y="766.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.65%)</title><rect x="1022.9" y="739.0" width="31.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1025.9" y="750.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.65%)</title><rect x="1022.9" y="723.0" width="31.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1025.9" y="734.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.65%)</title><rect x="1022.9" y="707.0" width="31.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1025.9" y="718.0">Pa..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.88%)</title><rect x="1022.9" y="691.0" width="10.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1025.9" y="702.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.88%)</title><rect x="1022.9" y="675.0" width="10.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1025.9" y="686.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.88%)</title><rect x="1022.9" y="659.0" width="10.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1025.9" y="670.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.88%)</title><rect x="1022.9" y="643.0" width="10.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1025.9" y="654.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.88%)</title><rect x="1022.9" y="627.0" width="10.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1025.9" y="638.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.88%)</title><rect x="1022.9" y="611.0" width="10.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1025.9" y="622.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.88%)</title><rect x="1022.9" y="595.0" width="10.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1025.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.77%)</title><rect x="1033.4" y="691.0" width="20.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1036.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.77%)</title><rect x="1033.4" y="675.0" width="20.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1036.4" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.77%)</title><rect x="1033.4" y="659.0" width="20.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1036.4" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.77%)</title><rect x="1033.4" y="643.0" width="20.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1036.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.77%)</title><rect x="1033.4" y="627.0" width="20.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1036.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.77%)</title><rect x="1033.4" y="611.0" width="20.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1036.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.77%)</title><rect x="1033.4" y="595.0" width="20.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1036.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.88%)</title><rect x="1033.4" y="579.0" width="10.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1036.4" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.88%)</title><rect x="1033.4" y="563.0" width="10.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1036.4" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.88%)</title><rect x="1033.4" y="547.0" width="10.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1036.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.88%)</title><rect x="1033.4" y="531.0" width="10.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1036.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.88%)</title><rect x="1033.4" y="515.0" width="10.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1036.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.88%)</title><rect x="1033.4" y="499.0" width="10.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1036.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.88%)</title><rect x="1033.4" y="483.0" width="10.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1036.4" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.88%)</title><rect x="1033.4" y="467.0" width="10.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1036.4" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.88%)</title><rect x="1033.4" y="451.0" width="10.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1036.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.88%)</title><rect x="1033.4" y="435.0" width="10.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1036.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.88%)</title><rect x="1033.4" y="419.0" width="10.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1036.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.88%)</title><rect x="1033.4" y="403.0" width="10.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.88%)</title><rect x="1033.4" y="387.0" width="10.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1036.4" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.88%)</title><rect x="1033.4" y="371.0" width="10.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1036.4" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.88%)</title><rect x="1033.4" y="355.0" width="10.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1036.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.88%)</title><rect x="1033.4" y="339.0" width="10.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1036.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.88%)</title><rect x="1033.4" y="323.0" width="10.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.88%)</title><rect x="1033.4" y="307.0" width="10.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1036.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.88%)</title><rect x="1033.4" y="291.0" width="10.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1036.4" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.88%)</title><rect x="1033.4" y="275.0" width="10.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1036.4" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.88%)</title><rect x="1033.4" y="259.0" width="10.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1036.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.88%)</title><rect x="1033.4" y="243.0" width="10.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1036.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.88%)</title><rect x="1033.4" y="227.0" width="10.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1036.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.88%)</title><rect x="1033.4" y="211.0" width="10.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1036.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.88%)</title><rect x="1033.4" y="195.0" width="10.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.4" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.88%)</title><rect x="1033.4" y="179.0" width="10.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1036.4" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.88%)</title><rect x="1033.4" y="163.0" width="10.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1036.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.88%)</title><rect x="1033.4" y="147.0" width="10.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1036.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.88%)</title><rect x="1033.4" y="131.0" width="10.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1036.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.88%)</title><rect x="1033.4" y="115.0" width="10.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1036.4" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.88%)</title><rect x="1033.4" y="99.0" width="10.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1036.4" y="110.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.88%)</title><rect x="1033.4" y="83.0" width="10.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1036.4" y="94.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.88%)</title><rect x="1033.4" y="67.0" width="10.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1036.4" y="78.0"></text>
</g>
<g>
<title>InlineTree::build_inline_tree_for_callee(ciMethod*, JVMState*, int) (1 samples, 0.88%)</title><rect x="1033.4" y="51.0" width="10.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1036.4" y="62.0"></text>
</g>
<g>
<title>InlineTree::InlineTree(Compile*, InlineTree const*, ciMethod*, JVMState*, int, float, int) (1 samples, 0.88%)</title><rect x="1033.4" y="35.0" width="10.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1036.4" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.88%)</title><rect x="1043.8" y="579.0" width="10.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1046.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.88%)</title><rect x="1043.8" y="563.0" width="10.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1046.8" y="574.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.88%)</title><rect x="1043.8" y="547.0" width="10.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1046.8" y="558.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.88%)</title><rect x="1043.8" y="531.0" width="10.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1046.8" y="542.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.88%)</title><rect x="1043.8" y="515.0" width="10.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1046.8" y="526.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.88%)</title><rect x="1043.8" y="499.0" width="10.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1046.8" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.77%)</title><rect x="1054.2" y="851.0" width="20.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1057.2" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.77%)</title><rect x="1054.2" y="835.0" width="20.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1057.2" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.77%)</title><rect x="1054.2" y="819.0" width="20.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1057.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.77%)</title><rect x="1054.2" y="803.0" width="20.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1057.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.77%)</title><rect x="1054.2" y="787.0" width="20.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1057.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.77%)</title><rect x="1054.2" y="771.0" width="20.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1057.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.77%)</title><rect x="1054.2" y="755.0" width="20.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1057.2" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.77%)</title><rect x="1054.2" y="739.0" width="20.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1057.2" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.77%)</title><rect x="1054.2" y="723.0" width="20.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1057.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.77%)</title><rect x="1054.2" y="707.0" width="20.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1057.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.77%)</title><rect x="1054.2" y="691.0" width="20.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1057.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.77%)</title><rect x="1054.2" y="675.0" width="20.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1057.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.77%)</title><rect x="1054.2" y="659.0" width="20.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1057.2" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.77%)</title><rect x="1054.2" y="643.0" width="20.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1057.2" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.77%)</title><rect x="1054.2" y="627.0" width="20.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1057.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.77%)</title><rect x="1054.2" y="611.0" width="20.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1057.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.77%)</title><rect x="1054.2" y="595.0" width="20.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1057.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.77%)</title><rect x="1054.2" y="579.0" width="20.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1057.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.77%)</title><rect x="1054.2" y="563.0" width="20.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1057.2" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.88%)</title><rect x="1054.2" y="547.0" width="10.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1057.2" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.88%)</title><rect x="1054.2" y="531.0" width="10.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1057.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.88%)</title><rect x="1054.2" y="515.0" width="10.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1057.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.88%)</title><rect x="1054.2" y="499.0" width="10.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1057.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.88%)</title><rect x="1054.2" y="483.0" width="10.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1057.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.88%)</title><rect x="1054.2" y="467.0" width="10.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1057.2" y="478.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.88%)</title><rect x="1054.2" y="451.0" width="10.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1057.2" y="462.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.88%)</title><rect x="1054.2" y="435.0" width="10.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1057.2" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.88%)</title><rect x="1064.7" y="547.0" width="10.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1067.7" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.88%)</title><rect x="1064.7" y="531.0" width="10.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1067.7" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.88%)</title><rect x="1064.7" y="515.0" width="10.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1067.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.88%)</title><rect x="1064.7" y="499.0" width="10.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1067.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.88%)</title><rect x="1064.7" y="483.0" width="10.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1067.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.88%)</title><rect x="1064.7" y="467.0" width="10.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1067.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.88%)</title><rect x="1064.7" y="451.0" width="10.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1067.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.88%)</title><rect x="1064.7" y="435.0" width="10.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1067.7" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.88%)</title><rect x="1064.7" y="419.0" width="10.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1067.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.88%)</title><rect x="1064.7" y="403.0" width="10.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1067.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.88%)</title><rect x="1064.7" y="387.0" width="10.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1067.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.88%)</title><rect x="1064.7" y="371.0" width="10.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1067.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.88%)</title><rect x="1064.7" y="355.0" width="10.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1067.7" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.88%)</title><rect x="1064.7" y="339.0" width="10.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1067.7" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.88%)</title><rect x="1064.7" y="323.0" width="10.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1067.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.88%)</title><rect x="1064.7" y="307.0" width="10.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1067.7" y="318.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.88%)</title><rect x="1064.7" y="291.0" width="10.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1067.7" y="302.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.88%)</title><rect x="1064.7" y="275.0" width="10.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1067.7" y="286.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.88%)</title><rect x="1064.7" y="259.0" width="10.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1067.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.88%)</title><rect x="1075.1" y="867.0" width="10.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1078.1" y="878.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.88%)</title><rect x="1075.1" y="851.0" width="10.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1078.1" y="862.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.88%)</title><rect x="1075.1" y="835.0" width="10.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1078.1" y="846.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.88%)</title><rect x="1075.1" y="819.0" width="10.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1078.1" y="830.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 1.77%)</title><rect x="1085.6" y="947.0" width="20.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1088.6" y="958.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 1.77%)</title><rect x="1085.6" y="931.0" width="20.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1088.6" y="942.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.88%)</title><rect x="1106.5" y="947.0" width="10.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1109.5" y="958.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.88%)</title><rect x="1106.5" y="931.0" width="10.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1109.5" y="942.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.88%)</title><rect x="1106.5" y="915.0" width="10.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1109.5" y="926.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.88%)</title><rect x="1106.5" y="899.0" width="10.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1109.5" y="910.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.88%)</title><rect x="1106.5" y="883.0" width="10.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1109.5" y="894.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (5 samples, 4.42%)</title><rect x="1116.9" y="979.0" width="52.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1119.9" y="990.0">Compi..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (5 samples, 4.42%)</title><rect x="1116.9" y="963.0" width="52.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.9" y="974.0">Compi..</text>
</g>
<g>
<title>Compilation::compile_method() (5 samples, 4.42%)</title><rect x="1116.9" y="947.0" width="52.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1119.9" y="958.0">Compi..</text>
</g>
<g>
<title>Compilation::compile_java_method() (5 samples, 4.42%)</title><rect x="1116.9" y="931.0" width="52.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1119.9" y="942.0">Compi..</text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.88%)</title><rect x="1116.9" y="915.0" width="10.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1119.9" y="926.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.88%)</title><rect x="1116.9" y="899.0" width="10.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1119.9" y="910.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.88%)</title><rect x="1116.9" y="883.0" width="10.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1119.9" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.88%)</title><rect x="1116.9" y="867.0" width="10.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1119.9" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.88%)</title><rect x="1116.9" y="851.0" width="10.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1119.9" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.88%)</title><rect x="1116.9" y="835.0" width="10.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1119.9" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.88%)</title><rect x="1116.9" y="819.0" width="10.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.9" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::collect_args_for_profiling(Values*, ciMethod*, bool) (1 samples, 0.88%)</title><rect x="1116.9" y="803.0" width="10.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1119.9" y="814.0"></text>
</g>
<g>
<title>ProfileData::is_CallTypeData() const (1 samples, 0.88%)</title><rect x="1116.9" y="787.0" width="10.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1119.9" y="798.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (4 samples, 3.54%)</title><rect x="1127.3" y="915.0" width="41.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.3" y="926.0">Com..</text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.88%)</title><rect x="1127.3" y="899.0" width="10.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.3" y="910.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.88%)</title><rect x="1127.3" y="883.0" width="10.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.3" y="894.0"></text>
</g>
<g>
<title>LIRGenerator::do_NullCheck(NullCheck*) (1 samples, 0.88%)</title><rect x="1127.3" y="867.0" width="10.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.3" y="878.0"></text>
</g>
<g>
<title>LIRGenerator::state_for(Instruction*, ValueStack*, bool) (1 samples, 0.88%)</title><rect x="1127.3" y="851.0" width="10.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.3" y="862.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (3 samples, 2.65%)</title><rect x="1137.8" y="899.0" width="31.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.8" y="910.0">Li..</text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.88%)</title><rect x="1137.8" y="883.0" width="10.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.8" y="894.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.88%)</title><rect x="1137.8" y="867.0" width="10.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.8" y="878.0"></text>
</g>
<g>
<title>LIR_OpVisitState::append(LIR_OprDesc*&amp;, LIR_OpVisitState::OprMode) (1 samples, 0.88%)</title><rect x="1137.8" y="851.0" width="10.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.8" y="862.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.88%)</title><rect x="1148.2" y="883.0" width="10.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.2" y="894.0"></text>
</g>
<g>
<title>LinearScan::resolve_exception_handlers() (1 samples, 0.88%)</title><rect x="1158.7" y="883.0" width="10.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.7" y="894.0"></text>
</g>
<g>
<title>LinearScan::resolve_exception_edge(XHandler*, int, MoveResolver&amp;) (1 samples, 0.88%)</title><rect x="1158.7" y="867.0" width="10.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.7" y="878.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.88%)</title><rect x="1169.1" y="979.0" width="10.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.1" y="990.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.88%)</title><rect x="1169.1" y="963.0" width="10.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.1" y="974.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.88%)</title><rect x="1169.1" y="947.0" width="10.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.1" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.88%)</title><rect x="1169.1" y="931.0" width="10.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.1" y="942.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(KlassHandle) (1 samples, 0.88%)</title><rect x="1169.1" y="915.0" width="10.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.1" y="926.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.88%)</title><rect x="1169.1" y="899.0" width="10.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.1" y="910.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.88%)</title><rect x="1179.6" y="1011.0" width="10.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.6" y="1022.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.88%)</title><rect x="1179.6" y="995.0" width="10.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.6" y="1006.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.88%)</title><rect x="1179.6" y="979.0" width="10.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="990.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.88%)</title><rect x="1179.6" y="963.0" width="10.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1182.6" y="974.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.88%)</title><rect x="1179.6" y="947.0" width="10.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.6" y="958.0"></text>
</g>
<g>
<title>ScopeDesc::ScopeDesc(nmethod const*, int, int, bool, bool) (1 samples, 0.88%)</title><rect x="1179.6" y="931.0" width="10.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.6" y="942.0"></text>
</g>
<g>
<title>_init (1 samples, 0.88%)</title><rect x="1179.6" y="915.0" width="10.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1182.6" y="926.0"></text>
</g>
</g>
</svg>
