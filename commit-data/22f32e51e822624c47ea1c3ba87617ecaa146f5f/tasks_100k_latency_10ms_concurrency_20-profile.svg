<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1318" onload="init(evt)" viewBox="0 0 1200 1318" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1301"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1301"> </text>
<g id="frames">
<g>
<title>all (289 samples, 100.00%)</title><rect x="10.0" y="1267.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1278.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.35%)</title><rect x="10.0" y="1251.0" width="4.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>_int_free (1 samples, 0.35%)</title><rect x="10.0" y="1235.0" width="4.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.35%)</title><rect x="14.1" y="1251.0" width="4.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="17.1" y="1262.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.35%)</title><rect x="14.1" y="1235.0" width="4.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="17.1" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (22 samples, 7.61%)</title><rect x="18.2" y="1251.0" width="89.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="21.2" y="1262.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.35%)</title><rect x="22.2" y="1235.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.35%)</title><rect x="22.2" y="1219.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.35%)</title><rect x="22.2" y="1203.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.35%)</title><rect x="22.2" y="1187.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="25.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.35%)</title><rect x="22.2" y="1171.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.35%)</title><rect x="22.2" y="1155.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.35%)</title><rect x="22.2" y="1139.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.35%)</title><rect x="22.2" y="1123.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.35%)</title><rect x="22.2" y="1107.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.35%)</title><rect x="22.2" y="1091.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.35%)</title><rect x="22.2" y="1075.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.35%)</title><rect x="22.2" y="1059.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="25.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.35%)</title><rect x="22.2" y="1043.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.35%)</title><rect x="22.2" y="1027.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.35%)</title><rect x="22.2" y="1011.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.35%)</title><rect x="22.2" y="995.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.35%)</title><rect x="22.2" y="979.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (20 samples, 6.92%)</title><rect x="26.3" y="1235.0" width="81.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.3" y="1246.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.69%)</title><rect x="26.3" y="1219.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.3" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.69%)</title><rect x="26.3" y="1203.0" width="8.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.3" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/494107874.accept (2 samples, 0.69%)</title><rect x="26.3" y="1187.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="29.3" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.69%)</title><rect x="26.3" y="1171.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="29.3" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.69%)</title><rect x="26.3" y="1155.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.3" y="1166.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.69%)</title><rect x="26.3" y="1139.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="29.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.69%)</title><rect x="34.5" y="1219.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.5" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.35%)</title><rect x="34.5" y="1203.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="37.5" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.pausingAllProcessing (1 samples, 0.35%)</title><rect x="34.5" y="1187.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="37.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pause (1 samples, 0.35%)</title><rect x="38.6" y="1203.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="41.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.pause (1 samples, 0.35%)</title><rect x="38.6" y="1187.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="41.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (8 samples, 2.77%)</title><rect x="42.7" y="1219.0" width="32.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.7" y="1230.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1392786029.accept (7 samples, 2.42%)</title><rect x="42.7" y="1203.0" width="28.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="45.7" y="1214.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (7 samples, 2.42%)</title><rect x="42.7" y="1187.0" width="28.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.7" y="1198.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (3 samples, 1.04%)</title><rect x="42.7" y="1171.0" width="12.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.7" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (3 samples, 1.04%)</title><rect x="42.7" y="1155.0" width="12.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.7" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (3 samples, 1.04%)</title><rect x="42.7" y="1139.0" width="12.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 1.04%)</title><rect x="42.7" y="1123.0" width="12.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 1.04%)</title><rect x="42.7" y="1107.0" width="12.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="45.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 1.04%)</title><rect x="42.7" y="1091.0" width="12.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.69%)</title><rect x="42.7" y="1075.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.69%)</title><rect x="42.7" y="1059.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="45.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.69%)</title><rect x="42.7" y="1043.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.35%)</title><rect x="50.8" y="1075.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.35%)</title><rect x="50.8" y="1059.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="53.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.35%)</title><rect x="50.8" y="1043.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="53.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.35%)</title><rect x="50.8" y="1027.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.35%)</title><rect x="54.9" y="1171.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="57.9" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.35%)</title><rect x="54.9" y="1155.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="57.9" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.04%)</title><rect x="59.0" y="1171.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="62.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.69%)</title><rect x="59.0" y="1155.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="62.0" y="1166.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.35%)</title><rect x="67.2" y="1155.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="70.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.35%)</title><rect x="67.2" y="1139.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="70.2" y="1150.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.35%)</title><rect x="67.2" y="1123.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="70.2" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="67.2" y="1107.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="70.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.35%)</title><rect x="71.2" y="1203.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="74.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 2.77%)</title><rect x="75.3" y="1219.0" width="32.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.3" y="1230.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 2.77%)</title><rect x="75.3" y="1203.0" width="32.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="78.3" y="1214.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 2.08%)</title><rect x="75.3" y="1187.0" width="24.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.3" y="1198.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.73%)</title><rect x="75.3" y="1171.0" width="20.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="78.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.73%)</title><rect x="75.3" y="1155.0" width="20.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.69%)</title><rect x="75.3" y="1139.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="78.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.69%)</title><rect x="75.3" y="1123.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="78.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.35%)</title><rect x="75.3" y="1107.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.35%)</title><rect x="75.3" y="1091.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.35%)</title><rect x="75.3" y="1075.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="78.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.35%)</title><rect x="79.4" y="1107.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.35%)</title><rect x="79.4" y="1091.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="82.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.35%)</title><rect x="79.4" y="1075.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="82.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.35%)</title><rect x="79.4" y="1059.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.35%)</title><rect x="79.4" y="1043.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.35%)</title><rect x="79.4" y="1027.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="82.4" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.35%)</title><rect x="79.4" y="1011.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="82.4" y="1022.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.35%)</title><rect x="79.4" y="995.0" width="4.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="82.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.clean (1 samples, 0.35%)</title><rect x="83.5" y="1139.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="86.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.35%)</title><rect x="87.6" y="1139.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.35%)</title><rect x="87.6" y="1123.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.35%)</title><rect x="87.6" y="1107.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="90.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.35%)</title><rect x="87.6" y="1091.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.35%)</title><rect x="87.6" y="1075.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="90.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.35%)</title><rect x="87.6" y="1059.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="90.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.35%)</title><rect x="87.6" y="1043.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="90.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeThrowInterruptException (1 samples, 0.35%)</title><rect x="91.7" y="1139.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="94.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.35%)</title><rect x="91.7" y="1123.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="94.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.35%)</title><rect x="91.7" y="1107.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="94.7" y="1118.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.35%)</title><rect x="91.7" y="1091.0" width="4.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="94.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.35%)</title><rect x="95.7" y="1171.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="98.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.35%)</title><rect x="95.7" y="1155.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="98.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.35%)</title><rect x="95.7" y="1139.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.7" y="1150.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.35%)</title><rect x="95.7" y="1123.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.7" y="1134.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.35%)</title><rect x="95.7" y="1107.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.7" y="1118.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.35%)</title><rect x="95.7" y="1091.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="98.7" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.35%)</title><rect x="95.7" y="1075.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="98.7" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.35%)</title><rect x="95.7" y="1059.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="98.7" y="1070.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.35%)</title><rect x="95.7" y="1043.0" width="4.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="98.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.35%)</title><rect x="99.8" y="1187.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.35%)</title><rect x="99.8" y="1171.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="102.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.35%)</title><rect x="99.8" y="1155.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="102.8" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.35%)</title><rect x="99.8" y="1139.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.8" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.35%)</title><rect x="99.8" y="1123.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.8" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.35%)</title><rect x="99.8" y="1107.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.8" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.35%)</title><rect x="99.8" y="1091.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.8" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.35%)</title><rect x="99.8" y="1075.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.8" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.35%)</title><rect x="99.8" y="1059.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="102.8" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.35%)</title><rect x="99.8" y="1043.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="102.8" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.35%)</title><rect x="99.8" y="1027.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="102.8" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/Sink.begin (1 samples, 0.35%)</title><rect x="99.8" y="1011.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="102.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.35%)</title><rect x="103.9" y="1187.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="106.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.35%)</title><rect x="103.9" y="1171.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="106.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.35%)</title><rect x="103.9" y="1155.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="106.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.35%)</title><rect x="103.9" y="1139.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="106.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/101627897.linkToTargetMethod (1 samples, 0.35%)</title><rect x="103.9" y="1123.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="106.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/473797371.invokeStatic_JJ_L (1 samples, 0.35%)</title><rect x="103.9" y="1107.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="106.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/Thread.run (166 samples, 57.44%)</title><rect x="108.0" y="1251.0" width="677.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="111.0" y="1262.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (166 samples, 57.44%)</title><rect x="108.0" y="1235.0" width="677.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="111.0" y="1246.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (166 samples, 57.44%)</title><rect x="108.0" y="1219.0" width="677.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.0" y="1230.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1051835364.run (156 samples, 53.98%)</title><rect x="108.0" y="1203.0" width="636.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="111.0" y="1214.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1051835364.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (156 samples, 53.98%)</title><rect x="108.0" y="1187.0" width="636.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="111.0" y="1198.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (156 samples, 53.98%)</title><rect x="108.0" y="1171.0" width="636.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="111.0" y="1182.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (152 samples, 52.60%)</title><rect x="108.0" y="1155.0" width="620.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="111.0" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (29 samples, 10.03%)</title><rect x="116.2" y="1139.0" width="118.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="119.2" y="1150.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (29 samples, 10.03%)</title><rect x="116.2" y="1123.0" width="118.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="119.2" y="1134.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (29 samples, 10.03%)</title><rect x="116.2" y="1107.0" width="118.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="119.2" y="1118.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (29 samples, 10.03%)</title><rect x="116.2" y="1091.0" width="118.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="119.2" y="1102.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (29 samples, 10.03%)</title><rect x="116.2" y="1075.0" width="118.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="119.2" y="1086.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (29 samples, 10.03%)</title><rect x="116.2" y="1059.0" width="118.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="119.2" y="1070.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (10 samples, 3.46%)</title><rect x="116.2" y="1043.0" width="40.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="119.2" y="1054.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 2.42%)</title><rect x="116.2" y="1027.0" width="28.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="119.2" y="1038.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 1.73%)</title><rect x="116.2" y="1011.0" width="20.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="119.2" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="124.3" y="995.0" width="4.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="127.3" y="1006.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="124.3" y="979.0" width="4.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="127.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.69%)</title><rect x="128.4" y="995.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="131.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.69%)</title><rect x="128.4" y="979.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="131.4" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.69%)</title><rect x="128.4" y="963.0" width="8.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="131.4" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.69%)</title><rect x="128.4" y="947.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="131.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (2 samples, 0.69%)</title><rect x="136.6" y="1011.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="139.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.35%)</title><rect x="136.6" y="995.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="139.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.35%)</title><rect x="140.7" y="995.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="143.7" y="1006.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.35%)</title><rect x="140.7" y="979.0" width="4.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="143.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.04%)</title><rect x="144.7" y="1027.0" width="12.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="147.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 1.04%)</title><rect x="144.7" y="1011.0" width="12.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="147.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.69%)</title><rect x="144.7" y="995.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="147.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.35%)</title><rect x="152.9" y="995.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="155.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.35%)</title><rect x="152.9" y="979.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="155.9" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="152.9" y="963.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="155.9" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="152.9" y="947.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="155.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (18 samples, 6.23%)</title><rect x="157.0" y="1043.0" width="73.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="160.0" y="1054.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.69%)</title><rect x="157.0" y="1027.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="160.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.69%)</title><rect x="157.0" y="1011.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="160.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.69%)</title><rect x="157.0" y="995.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="160.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.35%)</title><rect x="161.1" y="979.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="164.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.69%)</title><rect x="165.2" y="1027.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="168.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.69%)</title><rect x="165.2" y="1011.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="168.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.35%)</title><rect x="169.2" y="995.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="172.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 1.04%)</title><rect x="173.3" y="1027.0" width="12.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="176.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.69%)</title><rect x="173.3" y="1011.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="176.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.69%)</title><rect x="173.3" y="995.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="176.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.69%)</title><rect x="173.3" y="979.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="176.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.35%)</title><rect x="177.4" y="963.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="180.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.35%)</title><rect x="181.5" y="1011.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="184.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.69%)</title><rect x="185.6" y="1027.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="188.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.35%)</title><rect x="185.6" y="1011.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="188.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.35%)</title><rect x="189.7" y="1011.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="192.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.35%)</title><rect x="189.7" y="995.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="192.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.35%)</title><rect x="189.7" y="979.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="192.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.35%)</title><rect x="189.7" y="963.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="192.7" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="189.7" y="947.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="192.7" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="189.7" y="931.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="192.7" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.35%)</title><rect x="189.7" y="915.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="192.7" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="189.7" y="899.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="192.7" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.35%)</title><rect x="189.7" y="883.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="192.7" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.35%)</title><rect x="189.7" y="867.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="192.7" y="878.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.35%)</title><rect x="189.7" y="851.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="192.7" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.35%)</title><rect x="189.7" y="835.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="192.7" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.35%)</title><rect x="189.7" y="819.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="192.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (9 samples, 3.11%)</title><rect x="193.7" y="1027.0" width="36.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.7" y="1038.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.38%)</title><rect x="193.7" y="1011.0" width="16.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="196.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.69%)</title><rect x="193.7" y="995.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="196.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.69%)</title><rect x="193.7" y="979.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="196.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.69%)</title><rect x="193.7" y="963.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.69%)</title><rect x="201.9" y="995.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 1.73%)</title><rect x="210.1" y="1011.0" width="20.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="213.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 1.73%)</title><rect x="210.1" y="995.0" width="20.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="213.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 1.73%)</title><rect x="210.1" y="979.0" width="20.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.35%)</title><rect x="214.2" y="963.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="217.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.35%)</title><rect x="214.2" y="947.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="217.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.35%)</title><rect x="214.2" y="931.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="217.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.35%)</title><rect x="214.2" y="915.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="217.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.35%)</title><rect x="214.2" y="899.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.35%)</title><rect x="214.2" y="883.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="217.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.35%)</title><rect x="218.2" y="963.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="221.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.35%)</title><rect x="218.2" y="947.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.35%)</title><rect x="218.2" y="931.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="221.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.35%)</title><rect x="218.2" y="915.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.2" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.35%)</title><rect x="218.2" y="899.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.69%)</title><rect x="222.3" y="963.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.3" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.69%)</title><rect x="222.3" y="947.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="225.3" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.69%)</title><rect x="222.3" y="931.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.35%)</title><rect x="230.5" y="1043.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.35%)</title><rect x="230.5" y="1027.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="233.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.35%)</title><rect x="230.5" y="1011.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (1 samples, 0.35%)</title><rect x="230.5" y="995.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="233.5" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (117 samples, 40.48%)</title><rect x="234.6" y="1139.0" width="477.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.6" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (15 samples, 5.19%)</title><rect x="234.6" y="1123.0" width="61.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.6" y="1134.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (15 samples, 5.19%)</title><rect x="234.6" y="1107.0" width="61.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.6" y="1118.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (14 samples, 4.84%)</title><rect x="238.7" y="1091.0" width="57.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="241.7" y="1102.0">ch/qos..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (14 samples, 4.84%)</title><rect x="238.7" y="1075.0" width="57.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.7" y="1086.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.remove (13 samples, 4.50%)</title><rect x="242.7" y="1059.0" width="53.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.7" y="1070.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 1.73%)</title><rect x="275.4" y="1043.0" width="20.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="278.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (27 samples, 9.34%)</title><rect x="295.8" y="1123.0" width="110.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.8" y="1134.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (22 samples, 7.61%)</title><rect x="316.2" y="1107.0" width="89.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="319.2" y="1118.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (10 samples, 3.46%)</title><rect x="316.2" y="1091.0" width="40.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="319.2" y="1102.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (10 samples, 3.46%)</title><rect x="316.2" y="1075.0" width="40.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="319.2" y="1086.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 2.42%)</title><rect x="324.4" y="1059.0" width="28.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="327.4" y="1070.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.04%)</title><rect x="340.7" y="1043.0" width="12.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="343.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 1.04%)</title><rect x="340.7" y="1027.0" width="12.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="343.7" y="1038.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.04%)</title><rect x="340.7" y="1011.0" width="12.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="343.7" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.04%)</title><rect x="340.7" y="995.0" width="12.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="343.7" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.35%)</title><rect x="340.7" y="979.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="343.7" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.35%)</title><rect x="340.7" y="963.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="343.7" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.69%)</title><rect x="344.8" y="979.0" width="8.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="347.8" y="990.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.35%)</title><rect x="344.8" y="963.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="347.8" y="974.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.35%)</title><rect x="348.9" y="963.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="351.9" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.35%)</title><rect x="353.0" y="1059.0" width="4.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="356.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.35%)</title><rect x="357.1" y="1091.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="360.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.35%)</title><rect x="357.1" y="1075.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="360.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.35%)</title><rect x="357.1" y="1059.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="360.1" y="1070.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (11 samples, 3.81%)</title><rect x="361.1" y="1091.0" width="45.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="364.1" y="1102.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (10 samples, 3.46%)</title><rect x="365.2" y="1075.0" width="40.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="368.2" y="1086.0">ch/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (10 samples, 3.46%)</title><rect x="365.2" y="1059.0" width="40.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="368.2" y="1070.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 3.11%)</title><rect x="369.3" y="1043.0" width="36.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="372.3" y="1054.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 2.08%)</title><rect x="381.6" y="1027.0" width="24.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="384.6" y="1038.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 1.04%)</title><rect x="389.7" y="1011.0" width="12.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="392.7" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="397.9" y="995.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="400.9" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="397.9" y="979.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="400.9" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.35%)</title><rect x="397.9" y="963.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="400.9" y="974.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.35%)</title><rect x="402.0" y="1011.0" width="4.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="405.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (68 samples, 23.53%)</title><rect x="406.1" y="1123.0" width="277.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="409.1" y="1134.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (68 samples, 23.53%)</title><rect x="406.1" y="1107.0" width="277.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="409.1" y="1118.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1898213318.process (61 samples, 21.11%)</title><rect x="406.1" y="1091.0" width="249.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="409.1" y="1102.0">com/linecorp/decaton/benchmark/De..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (61 samples, 21.11%)</title><rect x="406.1" y="1075.0" width="249.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="409.1" y="1086.0">com/linecorp/decaton/benchmark/De..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (60 samples, 20.76%)</title><rect x="406.1" y="1059.0" width="244.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="409.1" y="1070.0">com/linecorp/decaton/benchmark/R..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.35%)</title><rect x="406.1" y="1043.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="409.1" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.35%)</title><rect x="406.1" y="1027.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="409.1" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.35%)</title><rect x="406.1" y="1011.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="409.1" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.35%)</title><rect x="406.1" y="995.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="409.1" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (58 samples, 20.07%)</title><rect x="410.1" y="1043.0" width="236.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="413.1" y="1054.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>java/lang/Thread.sleep (58 samples, 20.07%)</title><rect x="410.1" y="1027.0" width="236.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="413.1" y="1038.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (50 samples, 17.30%)</title><rect x="442.8" y="1011.0" width="204.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="445.8" y="1022.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.35%)</title><rect x="471.4" y="995.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="474.4" y="1006.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 1.73%)</title><rect x="475.5" y="995.0" width="20.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="478.5" y="1006.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.69%)</title><rect x="487.7" y="979.0" width="8.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="490.7" y="990.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (37 samples, 12.80%)</title><rect x="495.9" y="995.0" width="151.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="498.9" y="1006.0">os::sleep(Thread*, ..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.35%)</title><rect x="540.8" y="979.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="543.8" y="990.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.35%)</title><rect x="540.8" y="963.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="543.8" y="974.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.35%)</title><rect x="544.9" y="979.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="547.9" y="990.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.35%)</title><rect x="544.9" y="963.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="547.9" y="974.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.35%)</title><rect x="544.9" y="947.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="547.9" y="958.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 1.73%)</title><rect x="549.0" y="979.0" width="20.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="552.0" y="990.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (12 samples, 4.15%)</title><rect x="569.4" y="979.0" width="49.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="572.4" y="990.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 1.04%)</title><rect x="618.4" y="979.0" width="12.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="621.4" y="990.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.35%)</title><rect x="630.6" y="979.0" width="4.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="633.6" y="990.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.35%)</title><rect x="634.7" y="979.0" width="4.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="637.7" y="990.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.69%)</title><rect x="638.8" y="979.0" width="8.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="641.8" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.35%)</title><rect x="647.0" y="1043.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="650.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.35%)</title><rect x="651.0" y="1059.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="654.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.35%)</title><rect x="651.0" y="1043.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="654.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.35%)</title><rect x="651.0" y="1027.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="654.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.35%)</title><rect x="651.0" y="1011.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="654.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (2 samples, 0.69%)</title><rect x="655.1" y="1091.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="658.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (2 samples, 0.69%)</title><rect x="655.1" y="1075.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="658.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/1622511285.get$Lambda (2 samples, 0.69%)</title><rect x="655.1" y="1059.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="658.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/1622511285.&lt;init&gt; (2 samples, 0.69%)</title><rect x="655.1" y="1043.0" width="8.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="658.1" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.69%)</title><rect x="663.3" y="1091.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.3" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.69%)</title><rect x="663.3" y="1075.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="666.3" y="1086.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.35%)</title><rect x="663.3" y="1059.0" width="4.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="666.3" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.35%)</title><rect x="667.4" y="1059.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="670.4" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.35%)</title><rect x="671.5" y="1091.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="674.5" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.35%)</title><rect x="671.5" y="1075.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="674.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.69%)</title><rect x="675.5" y="1091.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="678.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 2.42%)</title><rect x="683.7" y="1123.0" width="28.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="686.7" y="1134.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 2.42%)</title><rect x="683.7" y="1107.0" width="28.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="686.7" y="1118.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.69%)</title><rect x="704.1" y="1091.0" width="8.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="707.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$272/258967990.accept (2 samples, 0.69%)</title><rect x="704.1" y="1075.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="707.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (2 samples, 0.69%)</title><rect x="704.1" y="1059.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="707.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.69%)</title><rect x="704.1" y="1043.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="707.1" y="1054.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.69%)</title><rect x="704.1" y="1027.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="707.1" y="1038.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.69%)</title><rect x="704.1" y="1011.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="707.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.38%)</title><rect x="712.3" y="1139.0" width="16.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="715.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.38%)</title><rect x="712.3" y="1123.0" width="16.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="715.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.35%)</title><rect x="712.3" y="1107.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="715.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.04%)</title><rect x="716.4" y="1107.0" width="12.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="719.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$272/258967990.accept (3 samples, 1.04%)</title><rect x="716.4" y="1091.0" width="12.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="719.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (3 samples, 1.04%)</title><rect x="716.4" y="1075.0" width="12.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="719.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (3 samples, 1.04%)</title><rect x="716.4" y="1059.0" width="12.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="719.4" y="1070.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 1.04%)</title><rect x="716.4" y="1043.0" width="12.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="719.4" y="1054.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 1.04%)</title><rect x="716.4" y="1027.0" width="12.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="719.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 1.38%)</title><rect x="728.6" y="1155.0" width="16.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="731.6" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.04%)</title><rect x="732.7" y="1139.0" width="12.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="735.7" y="1150.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.04%)</title><rect x="732.7" y="1123.0" width="12.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="735.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 1.04%)</title><rect x="744.9" y="1203.0" width="12.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="747.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.04%)</title><rect x="744.9" y="1187.0" width="12.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="747.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.04%)</title><rect x="744.9" y="1171.0" width="12.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="747.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.04%)</title><rect x="744.9" y="1155.0" width="12.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="747.9" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (1 samples, 0.35%)</title><rect x="753.1" y="1139.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="756.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (7 samples, 2.42%)</title><rect x="757.2" y="1203.0" width="28.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="760.2" y="1214.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 1.73%)</title><rect x="765.4" y="1187.0" width="20.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="768.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.69%)</title><rect x="765.4" y="1171.0" width="8.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="768.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.69%)</title><rect x="765.4" y="1155.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="768.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.69%)</title><rect x="765.4" y="1139.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="768.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.69%)</title><rect x="765.4" y="1123.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="768.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.69%)</title><rect x="765.4" y="1107.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="768.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.04%)</title><rect x="773.5" y="1171.0" width="12.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="776.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.04%)</title><rect x="773.5" y="1155.0" width="12.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="776.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.04%)</title><rect x="773.5" y="1139.0" width="12.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="776.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.04%)</title><rect x="773.5" y="1123.0" width="12.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="776.5" y="1134.0"></text>
</g>
<g>
<title>start_thread (99 samples, 34.26%)</title><rect x="785.8" y="1251.0" width="404.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="788.8" y="1262.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (99 samples, 34.26%)</title><rect x="785.8" y="1235.0" width="404.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="788.8" y="1246.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (41 samples, 14.19%)</title><rect x="785.8" y="1219.0" width="167.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="788.8" y="1230.0">GangWorker::loop()</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (18 samples, 6.23%)</title><rect x="785.8" y="1203.0" width="73.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="788.8" y="1214.0">G1ParPre..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (18 samples, 6.23%)</title><rect x="785.8" y="1187.0" width="73.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="788.8" y="1198.0">G1ParEva..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (9 samples, 3.11%)</title><rect x="785.8" y="1171.0" width="36.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="788.8" y="1182.0">Par..</text>
</g>
<g>
<title>SpinPause (9 samples, 3.11%)</title><rect x="822.5" y="1171.0" width="36.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="825.5" y="1182.0">Spi..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (23 samples, 7.96%)</title><rect x="859.3" y="1203.0" width="93.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="862.3" y="1214.0">G1ParTask::..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (20 samples, 6.92%)</title><rect x="859.3" y="1187.0" width="81.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="862.3" y="1198.0">G1ParEvac..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (11 samples, 3.81%)</title><rect x="859.3" y="1171.0" width="44.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="862.3" y="1182.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 1.38%)</title><rect x="871.5" y="1155.0" width="16.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="874.5" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (4 samples, 1.38%)</title><rect x="871.5" y="1139.0" width="16.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="874.5" y="1150.0"></text>
</g>
<g>
<title>Klass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.35%)</title><rect x="887.9" y="1155.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="890.9" y="1166.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (3 samples, 1.04%)</title><rect x="891.9" y="1155.0" width="12.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="894.9" y="1166.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.35%)</title><rect x="904.2" y="1171.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="907.2" y="1182.0"></text>
</g>
<g>
<title>SpinPause (8 samples, 2.77%)</title><rect x="908.3" y="1171.0" width="32.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="911.3" y="1182.0">Sp..</text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (3 samples, 1.04%)</title><rect x="940.9" y="1187.0" width="12.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="943.9" y="1198.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (3 samples, 1.04%)</title><rect x="940.9" y="1171.0" width="12.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="943.9" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 1.04%)</title><rect x="940.9" y="1155.0" width="12.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="943.9" y="1166.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 1.04%)</title><rect x="940.9" y="1139.0" width="12.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="943.9" y="1150.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 1.04%)</title><rect x="940.9" y="1123.0" width="12.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="943.9" y="1134.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 1.04%)</title><rect x="940.9" y="1107.0" width="12.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="943.9" y="1118.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 1.04%)</title><rect x="940.9" y="1091.0" width="12.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="943.9" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.35%)</title><rect x="940.9" y="1075.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="943.9" y="1086.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (2 samples, 0.69%)</title><rect x="945.0" y="1075.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="948.0" y="1086.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (2 samples, 0.69%)</title><rect x="945.0" y="1059.0" width="8.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="948.0" y="1070.0"></text>
</g>
<g>
<title>JavaThread::run() (58 samples, 20.07%)</title><rect x="953.2" y="1219.0" width="236.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="956.2" y="1230.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (58 samples, 20.07%)</title><rect x="953.2" y="1203.0" width="236.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="956.2" y="1214.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (58 samples, 20.07%)</title><rect x="953.2" y="1187.0" width="236.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="956.2" y="1198.0">CompileBroker::compiler_thread_..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (57 samples, 19.72%)</title><rect x="953.2" y="1171.0" width="232.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="956.2" y="1182.0">CompileBroker::invoke_compiler_..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (54 samples, 18.69%)</title><rect x="953.2" y="1155.0" width="220.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="956.2" y="1166.0">C2Compiler::compile_method(ci..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (54 samples, 18.69%)</title><rect x="953.2" y="1139.0" width="220.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="956.2" y="1150.0">Compile::Compile(ciEnv*, C2Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (37 samples, 12.80%)</title><rect x="953.2" y="1123.0" width="151.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="956.2" y="1134.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.04%)</title><rect x="957.3" y="1107.0" width="12.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="960.3" y="1118.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.69%)</title><rect x="957.3" y="1091.0" width="8.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="960.3" y="1102.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.35%)</title><rect x="961.3" y="1075.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="964.3" y="1086.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.35%)</title><rect x="961.3" y="1059.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="964.3" y="1070.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.35%)</title><rect x="965.4" y="1091.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="968.4" y="1102.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.35%)</title><rect x="965.4" y="1075.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="968.4" y="1086.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.35%)</title><rect x="965.4" y="1059.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="968.4" y="1070.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.35%)</title><rect x="965.4" y="1043.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="968.4" y="1054.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.35%)</title><rect x="965.4" y="1027.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="968.4" y="1038.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.35%)</title><rect x="969.5" y="1107.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="972.5" y="1118.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.35%)</title><rect x="969.5" y="1091.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="972.5" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.35%)</title><rect x="969.5" y="1075.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="972.5" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.35%)</title><rect x="969.5" y="1059.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="972.5" y="1070.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.04%)</title><rect x="973.6" y="1107.0" width="12.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="976.6" y="1118.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.35%)</title><rect x="973.6" y="1091.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="976.6" y="1102.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.35%)</title><rect x="977.7" y="1091.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="980.7" y="1102.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.35%)</title><rect x="977.7" y="1075.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="980.7" y="1086.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.35%)</title><rect x="981.8" y="1091.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="984.8" y="1102.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.35%)</title><rect x="981.8" y="1075.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="984.8" y="1086.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.35%)</title><rect x="981.8" y="1059.0" width="4.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="984.8" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.69%)</title><rect x="985.8" y="1107.0" width="8.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="988.8" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.69%)</title><rect x="985.8" y="1091.0" width="8.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="988.8" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.35%)</title><rect x="985.8" y="1075.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="988.8" y="1086.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.35%)</title><rect x="985.8" y="1059.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="988.8" y="1070.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.35%)</title><rect x="985.8" y="1043.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="988.8" y="1054.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.35%)</title><rect x="985.8" y="1027.0" width="4.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="988.8" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.35%)</title><rect x="989.9" y="1075.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="992.9" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.35%)</title><rect x="989.9" y="1059.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="992.9" y="1070.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.35%)</title><rect x="989.9" y="1043.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="992.9" y="1054.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.35%)</title><rect x="989.9" y="1027.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="992.9" y="1038.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="989.9" y="1011.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="992.9" y="1022.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.35%)</title><rect x="989.9" y="995.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="992.9" y="1006.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.35%)</title><rect x="989.9" y="979.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="992.9" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.35%)</title><rect x="989.9" y="963.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="992.9" y="974.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.35%)</title><rect x="989.9" y="947.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="992.9" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (27 samples, 9.34%)</title><rect x="994.0" y="1107.0" width="110.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="997.0" y="1118.0">PhaseChaitin:..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.35%)</title><rect x="994.0" y="1091.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="997.0" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.35%)</title><rect x="998.1" y="1091.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1001.1" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.35%)</title><rect x="998.1" y="1075.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1001.1" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="998.1" y="1059.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1001.1" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.35%)</title><rect x="1002.2" y="1091.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1005.2" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.35%)</title><rect x="1002.2" y="1075.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1005.2" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.73%)</title><rect x="1006.3" y="1091.0" width="20.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1009.3" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 3.46%)</title><rect x="1026.7" y="1091.0" width="40.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1029.7" y="1102.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.69%)</title><rect x="1043.0" y="1075.0" width="8.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1046.0" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.38%)</title><rect x="1051.2" y="1075.0" width="16.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1054.2" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.04%)</title><rect x="1067.5" y="1091.0" width="12.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1070.5" y="1102.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.69%)</title><rect x="1079.8" y="1091.0" width="8.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1082.8" y="1102.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 0.69%)</title><rect x="1079.8" y="1075.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1082.8" y="1086.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.35%)</title><rect x="1083.8" y="1059.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1086.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.69%)</title><rect x="1087.9" y="1091.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1090.9" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="1092.0" y="1075.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.0" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.35%)</title><rect x="1096.1" y="1091.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1099.1" y="1102.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.35%)</title><rect x="1096.1" y="1075.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1099.1" y="1086.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.35%)</title><rect x="1100.2" y="1091.0" width="4.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1103.2" y="1102.0"></text>
</g>
<g>
<title>Compile::Optimize() (12 samples, 4.15%)</title><rect x="1104.3" y="1123.0" width="49.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.3" y="1134.0">Comp..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.35%)</title><rect x="1104.3" y="1107.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.35%)</title><rect x="1104.3" y="1091.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.35%)</title><rect x="1104.3" y="1075.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1107.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.35%)</title><rect x="1104.3" y="1059.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (9 samples, 3.11%)</title><rect x="1108.3" y="1107.0" width="36.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1111.3" y="1118.0">Pha..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.35%)</title><rect x="1108.3" y="1091.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 1.04%)</title><rect x="1112.4" y="1091.0" width="12.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1115.4" y="1102.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.35%)</title><rect x="1120.6" y="1075.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1123.6" y="1086.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.35%)</title><rect x="1120.6" y="1059.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1123.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.35%)</title><rect x="1124.7" y="1091.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.35%)</title><rect x="1124.7" y="1075.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.69%)</title><rect x="1128.8" y="1091.0" width="8.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.69%)</title><rect x="1128.8" y="1075.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.8" y="1086.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.35%)</title><rect x="1132.8" y="1059.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.69%)</title><rect x="1136.9" y="1091.0" width="8.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1139.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.35%)</title><rect x="1145.1" y="1107.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.35%)</title><rect x="1145.1" y="1091.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.1" y="1102.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.35%)</title><rect x="1149.2" y="1107.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.35%)</title><rect x="1149.2" y="1091.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.35%)</title><rect x="1149.2" y="1075.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.2" y="1086.0"></text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.35%)</title><rect x="1149.2" y="1059.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.2" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.73%)</title><rect x="1153.3" y="1123.0" width="20.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.3" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.73%)</title><rect x="1153.3" y="1107.0" width="20.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.73%)</title><rect x="1153.3" y="1091.0" width="20.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.73%)</title><rect x="1153.3" y="1075.0" width="20.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.73%)</title><rect x="1153.3" y="1059.0" width="20.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.73%)</title><rect x="1153.3" y="1043.0" width="20.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.3" y="1054.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.35%)</title><rect x="1153.3" y="1027.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.3" y="1038.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.35%)</title><rect x="1153.3" y="1011.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.3" y="1022.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.35%)</title><rect x="1153.3" y="995.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.3" y="1006.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.35%)</title><rect x="1153.3" y="979.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.3" y="990.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1153.3" y="963.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.3" y="974.0"></text>
</g>
<g>
<title>Method::invocation_count() (1 samples, 0.35%)</title><rect x="1153.3" y="947.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.3" y="958.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.35%)</title><rect x="1157.3" y="1027.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.3" y="1038.0"></text>
</g>
<g>
<title>ReplacedNodes::record(Node*, Node*) (1 samples, 0.35%)</title><rect x="1157.3" y="1011.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.3" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.04%)</title><rect x="1161.4" y="1027.0" width="12.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.4" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.04%)</title><rect x="1161.4" y="1011.0" width="12.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.4" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.04%)</title><rect x="1161.4" y="995.0" width="12.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.04%)</title><rect x="1161.4" y="979.0" width="12.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.04%)</title><rect x="1161.4" y="963.0" width="12.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1161.4" y="947.0" width="8.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.4" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1161.4" y="931.0" width="8.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.4" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1161.4" y="915.0" width="8.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1161.4" y="899.0" width="8.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1161.4" y="883.0" width="8.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1161.4" y="867.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.4" y="878.0"></text>
</g>
<g>
<title>GraphKit::shared_lock(Node*) (1 samples, 0.35%)</title><rect x="1161.4" y="851.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.4" y="862.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.35%)</title><rect x="1161.4" y="835.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.4" y="846.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.35%)</title><rect x="1161.4" y="819.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.4" y="830.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.35%)</title><rect x="1161.4" y="803.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1165.5" y="851.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.5" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1165.5" y="835.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.5" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1165.5" y="819.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1165.5" y="803.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1165.5" y="787.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1165.5" y="771.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1165.5" y="755.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.5" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1165.5" y="739.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.5" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1165.5" y="723.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1165.5" y="707.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1165.5" y="691.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1165.5" y="675.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1165.5" y="659.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.5" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1165.5" y="643.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.5" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1165.5" y="627.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1165.5" y="611.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1165.5" y="595.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1165.5" y="579.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1165.5" y="563.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.5" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1165.5" y="547.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.5" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1165.5" y="531.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1165.5" y="515.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1165.5" y="499.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1165.5" y="483.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1165.5" y="467.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.5" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1165.5" y="451.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.5" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1165.5" y="435.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1165.5" y="419.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1165.5" y="403.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1165.5" y="387.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1165.5" y="371.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.5" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1165.5" y="355.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.5" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1165.5" y="339.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1165.5" y="323.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1165.5" y="307.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1165.5" y="291.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1165.5" y="275.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.5" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1165.5" y="259.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.5" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1165.5" y="243.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1165.5" y="227.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1165.5" y="211.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1165.5" y="195.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1165.5" y="179.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.5" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1165.5" y="163.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.5" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1165.5" y="147.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1165.5" y="131.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1165.5" y="115.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.5" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1165.5" y="99.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.5" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1165.5" y="83.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.5" y="94.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.35%)</title><rect x="1165.5" y="67.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.5" y="78.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.35%)</title><rect x="1165.5" y="51.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.5" y="62.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.35%)</title><rect x="1165.5" y="35.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.5" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.35%)</title><rect x="1169.6" y="947.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.35%)</title><rect x="1169.6" y="931.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.6" y="942.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.35%)</title><rect x="1169.6" y="915.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.6" y="926.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.35%)</title><rect x="1169.6" y="899.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.6" y="910.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="1169.6" y="883.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.6" y="894.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.35%)</title><rect x="1169.6" y="867.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.6" y="878.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.69%)</title><rect x="1173.7" y="1155.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.7" y="1166.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.69%)</title><rect x="1173.7" y="1139.0" width="8.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.7" y="1150.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.69%)</title><rect x="1173.7" y="1123.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.7" y="1134.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.35%)</title><rect x="1173.7" y="1107.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.7" y="1118.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.35%)</title><rect x="1173.7" y="1091.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.7" y="1102.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.35%)</title><rect x="1173.7" y="1075.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.7" y="1086.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.35%)</title><rect x="1173.7" y="1059.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.7" y="1070.0"></text>
</g>
<g>
<title>LIRGenerator::do_Base(Base*) (1 samples, 0.35%)</title><rect x="1173.7" y="1043.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.7" y="1054.0"></text>
</g>
<g>
<title>LIRGenerator::increment_event_counter(CodeEmitInfo*, int, bool) (1 samples, 0.35%)</title><rect x="1173.7" y="1027.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.7" y="1038.0"></text>
</g>
<g>
<title>LIR_List::load(LIR_Address*, LIR_OprDesc*, CodeEmitInfo*, LIR_PatchCode) (1 samples, 0.35%)</title><rect x="1173.7" y="1011.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.7" y="1022.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.35%)</title><rect x="1177.8" y="1107.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.8" y="1118.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.35%)</title><rect x="1177.8" y="1091.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.8" y="1102.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.35%)</title><rect x="1177.8" y="1075.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.8" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.35%)</title><rect x="1177.8" y="1059.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.8" y="1070.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.35%)</title><rect x="1181.8" y="1155.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.8" y="1166.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.35%)</title><rect x="1181.8" y="1139.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.8" y="1150.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.35%)</title><rect x="1181.8" y="1123.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="1134.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1181.8" y="1107.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.8" y="1118.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.35%)</title><rect x="1181.8" y="1091.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.8" y="1102.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.35%)</title><rect x="1181.8" y="1075.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.8" y="1086.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.35%)</title><rect x="1181.8" y="1059.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.8" y="1070.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.35%)</title><rect x="1181.8" y="1043.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.8" y="1054.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.35%)</title><rect x="1181.8" y="1027.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.8" y="1038.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.35%)</title><rect x="1181.8" y="1011.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.8" y="1022.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.35%)</title><rect x="1185.9" y="1171.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.9" y="1182.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.35%)</title><rect x="1185.9" y="1155.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.9" y="1166.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.35%)</title><rect x="1185.9" y="1139.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.9" y="1150.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.35%)</title><rect x="1185.9" y="1123.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.9" y="1134.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.35%)</title><rect x="1185.9" y="1107.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.9" y="1118.0"></text>
</g>
<g>
<title>RelocIterator::advance_over_prefix() (1 samples, 0.35%)</title><rect x="1185.9" y="1091.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.9" y="1102.0"></text>
</g>
</g>
</svg>
