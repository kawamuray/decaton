<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="789"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="789"> </text>
<g id="frames">
<g>
<title>all (926 samples, 100.00%)</title><rect x="10.0" y="755.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="766.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (220 samples, 23.76%)</title><rect x="10.0" y="739.0" width="280.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="750.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (219 samples, 23.65%)</title><rect x="11.3" y="723.0" width="279.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.3" y="734.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.43%)</title><rect x="11.3" y="707.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.3" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.43%)</title><rect x="11.3" y="691.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1594197076.accept (3 samples, 0.32%)</title><rect x="12.5" y="675.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.5" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (3 samples, 0.32%)</title><rect x="12.5" y="659.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.5" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.32%)</title><rect x="12.5" y="643.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.5" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.22%)</title><rect x="13.8" y="627.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.8" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.32%)</title><rect x="16.4" y="707.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.4" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.32%)</title><rect x="16.4" y="691.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.4" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.22%)</title><rect x="17.6" y="675.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.22%)</title><rect x="17.6" y="659.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.22%)</title><rect x="17.6" y="643.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.6" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.22%)</title><rect x="17.6" y="627.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.6" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.22%)</title><rect x="17.6" y="611.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.6" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.11%)</title><rect x="17.6" y="595.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.6" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.11%)</title><rect x="17.6" y="579.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.6" y="590.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.11%)</title><rect x="17.6" y="563.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.6" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.11%)</title><rect x="17.6" y="547.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.6" y="558.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$169/1264391057.get (1 samples, 0.11%)</title><rect x="17.6" y="531.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.6" y="542.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.11%)</title><rect x="18.9" y="595.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.9" y="606.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.11%)</title><rect x="18.9" y="579.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.9" y="590.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.11%)</title><rect x="18.9" y="563.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.9" y="574.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.11%)</title><rect x="18.9" y="547.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.9" y="558.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (167 samples, 18.03%)</title><rect x="20.2" y="707.0" width="212.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.2" y="718.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1115484232.accept (154 samples, 16.63%)</title><rect x="21.5" y="691.0" width="196.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.5" y="702.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (154 samples, 16.63%)</title><rect x="21.5" y="675.0" width="196.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.5" y="686.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.11%)</title><rect x="25.3" y="659.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.3" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (121 samples, 13.07%)</title><rect x="26.6" y="659.0" width="154.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="29.6" y="670.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (121 samples, 13.07%)</title><rect x="26.6" y="643.0" width="154.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.6" y="654.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (121 samples, 13.07%)</title><rect x="26.6" y="627.0" width="154.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="29.6" y="638.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (121 samples, 13.07%)</title><rect x="26.6" y="611.0" width="154.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.6" y="622.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (121 samples, 13.07%)</title><rect x="26.6" y="595.0" width="154.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.6" y="606.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (121 samples, 13.07%)</title><rect x="26.6" y="579.0" width="154.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.6" y="590.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (82 samples, 8.86%)</title><rect x="26.6" y="563.0" width="104.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.6" y="574.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (16 samples, 1.73%)</title><rect x="26.6" y="547.0" width="20.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="29.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (16 samples, 1.73%)</title><rect x="26.6" y="531.0" width="20.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (13 samples, 1.40%)</title><rect x="30.4" y="515.0" width="16.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (13 samples, 1.40%)</title><rect x="30.4" y="499.0" width="16.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="33.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.97%)</title><rect x="47.0" y="547.0" width="11.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (9 samples, 0.97%)</title><rect x="47.0" y="531.0" width="11.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="50.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.32%)</title><rect x="49.5" y="515.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="52.5" y="526.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.22%)</title><rect x="50.8" y="499.0" width="2.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="53.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.43%)</title><rect x="53.3" y="515.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (57 samples, 6.16%)</title><rect x="58.4" y="547.0" width="72.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.4" y="558.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (57 samples, 6.16%)</title><rect x="58.4" y="531.0" width="72.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="61.4" y="542.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (55 samples, 5.94%)</title><rect x="59.7" y="515.0" width="70.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="62.7" y="526.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (55 samples, 5.94%)</title><rect x="59.7" y="499.0" width="70.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="62.7" y="510.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (53 samples, 5.72%)</title><rect x="62.2" y="483.0" width="67.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="65.2" y="494.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (48 samples, 5.18%)</title><rect x="62.2" y="467.0" width="61.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="65.2" y="478.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.11%)</title><rect x="62.2" y="451.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="65.2" y="462.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.22%)</title><rect x="63.5" y="451.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="66.5" y="462.0"></text>
</g>
<g>
<title>__pthread_cond_signal (35 samples, 3.78%)</title><rect x="66.1" y="451.0" width="44.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="69.1" y="462.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.11%)</title><rect x="110.7" y="451.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="113.7" y="462.0"></text>
</g>
<g>
<title>pthread_mutex_lock (9 samples, 0.97%)</title><rect x="111.9" y="451.0" width="11.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="114.9" y="462.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.32%)</title><rect x="123.4" y="467.0" width="3.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="126.4" y="478.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.22%)</title><rect x="127.2" y="467.0" width="2.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="130.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.11%)</title><rect x="129.8" y="515.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="132.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.22%)</title><rect x="131.1" y="563.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="134.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.22%)</title><rect x="131.1" y="547.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="134.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.22%)</title><rect x="131.1" y="531.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="134.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (37 samples, 4.00%)</title><rect x="133.6" y="563.0" width="47.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="136.6" y="574.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (37 samples, 4.00%)</title><rect x="133.6" y="547.0" width="47.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="136.6" y="558.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (37 samples, 4.00%)</title><rect x="133.6" y="531.0" width="47.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="136.6" y="542.0">java..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="179.5" y="515.0" width="1.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="182.5" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.11%)</title><rect x="180.8" y="659.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="183.8" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.11%)</title><rect x="180.8" y="643.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.8" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (5 samples, 0.54%)</title><rect x="182.0" y="659.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="185.0" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.54%)</title><rect x="182.0" y="643.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="185.0" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.54%)</title><rect x="182.0" y="627.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="185.0" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (20 samples, 2.16%)</title><rect x="188.4" y="659.0" width="25.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="191.4" y="670.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.32%)</title><rect x="207.5" y="643.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="210.5" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.32%)</title><rect x="207.5" y="627.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.5" y="638.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.22%)</title><rect x="208.8" y="611.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.8" y="622.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.22%)</title><rect x="208.8" y="595.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="211.8" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.22%)</title><rect x="208.8" y="579.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="211.8" y="590.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.11%)</title><rect x="211.3" y="643.0" width="1.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="214.3" y="654.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="212.6" y="643.0" width="1.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="215.6" y="654.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.32%)</title><rect x="213.9" y="659.0" width="3.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="216.9" y="670.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="217.7" y="691.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="220.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.11%)</title><rect x="219.0" y="691.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.11%)</title><rect x="219.0" y="675.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="222.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.11%)</title><rect x="219.0" y="659.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.0" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.11%)</title><rect x="219.0" y="643.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.0" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.11%)</title><rect x="219.0" y="627.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="222.0" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.11%)</title><rect x="219.0" y="611.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (9 samples, 0.97%)</title><rect x="220.3" y="691.0" width="11.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (9 samples, 0.97%)</title><rect x="220.3" y="675.0" width="11.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="223.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (9 samples, 0.97%)</title><rect x="220.3" y="659.0" width="11.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (9 samples, 0.97%)</title><rect x="220.3" y="643.0" width="11.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="223.3" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (8 samples, 0.86%)</title><rect x="221.5" y="627.0" width="10.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.11%)</title><rect x="231.7" y="691.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.11%)</title><rect x="231.7" y="675.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="234.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (45 samples, 4.86%)</title><rect x="233.0" y="707.0" width="57.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.0" y="718.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (45 samples, 4.86%)</title><rect x="233.0" y="691.0" width="57.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.0" y="702.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (33 samples, 3.56%)</title><rect x="233.0" y="675.0" width="42.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.0" y="686.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.11%)</title><rect x="233.0" y="659.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="236.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.11%)</title><rect x="233.0" y="643.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.11%)</title><rect x="233.0" y="627.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (32 samples, 3.46%)</title><rect x="234.3" y="659.0" width="40.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.3" y="670.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (32 samples, 3.46%)</title><rect x="234.3" y="643.0" width="40.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.3" y="654.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (26 samples, 2.81%)</title><rect x="234.3" y="627.0" width="33.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="237.3" y="638.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (26 samples, 2.81%)</title><rect x="234.3" y="611.0" width="33.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.3" y="622.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (13 samples, 1.40%)</title><rect x="236.8" y="595.0" width="16.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.54%)</title><rect x="244.5" y="579.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="247.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.54%)</title><rect x="244.5" y="563.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="247.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.54%)</title><rect x="244.5" y="547.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="247.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.54%)</title><rect x="244.5" y="531.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="247.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.54%)</title><rect x="244.5" y="515.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="247.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.54%)</title><rect x="244.5" y="499.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.54%)</title><rect x="244.5" y="483.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="247.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.11%)</title><rect x="250.8" y="579.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="253.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.11%)</title><rect x="250.8" y="563.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.11%)</title><rect x="250.8" y="547.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.11%)</title><rect x="252.1" y="579.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="255.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (1 samples, 0.11%)</title><rect x="252.1" y="563.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="255.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (1 samples, 0.11%)</title><rect x="252.1" y="547.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="255.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (10 samples, 1.08%)</title><rect x="253.4" y="595.0" width="12.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (9 samples, 0.97%)</title><rect x="254.7" y="579.0" width="11.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.7" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="254.7" y="563.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="257.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (8 samples, 0.86%)</title><rect x="255.9" y="563.0" width="10.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="258.9" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (8 samples, 0.86%)</title><rect x="255.9" y="547.0" width="10.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="258.9" y="558.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (6 samples, 0.65%)</title><rect x="258.5" y="531.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.5" y="542.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.11%)</title><rect x="263.6" y="515.0" width="1.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="266.6" y="526.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="264.9" y="515.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="267.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.11%)</title><rect x="266.1" y="595.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="269.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.32%)</title><rect x="267.4" y="627.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="270.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.32%)</title><rect x="267.4" y="611.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="270.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.11%)</title><rect x="267.4" y="595.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="270.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.11%)</title><rect x="267.4" y="579.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="270.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.22%)</title><rect x="268.7" y="595.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="271.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.22%)</title><rect x="268.7" y="579.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.22%)</title><rect x="268.7" y="563.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.11%)</title><rect x="270.0" y="547.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.11%)</title><rect x="270.0" y="531.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="273.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.11%)</title><rect x="270.0" y="515.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="273.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.22%)</title><rect x="271.2" y="627.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="274.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.22%)</title><rect x="271.2" y="611.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.22%)</title><rect x="271.2" y="595.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.22%)</title><rect x="271.2" y="579.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.2" y="590.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="272.5" y="563.0" width="1.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="275.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.11%)</title><rect x="273.8" y="627.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="276.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (8 samples, 0.86%)</title><rect x="275.1" y="675.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="278.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.65%)</title><rect x="275.1" y="659.0" width="7.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="278.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.43%)</title><rect x="275.1" y="643.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="278.1" y="654.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.11%)</title><rect x="275.1" y="627.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="278.1" y="638.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="275.1" y="611.0" width="1.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="278.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.11%)</title><rect x="276.3" y="627.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.11%)</title><rect x="276.3" y="611.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="279.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.22%)</title><rect x="277.6" y="627.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="280.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.22%)</title><rect x="277.6" y="611.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.6" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.22%)</title><rect x="277.6" y="595.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.6" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.22%)</title><rect x="277.6" y="579.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="280.6" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.22%)</title><rect x="277.6" y="563.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="280.6" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.22%)</title><rect x="277.6" y="547.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.6" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.22%)</title><rect x="277.6" y="531.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.6" y="542.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.22%)</title><rect x="277.6" y="515.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="280.6" y="526.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.22%)</title><rect x="277.6" y="499.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="280.6" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.22%)</title><rect x="277.6" y="483.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="280.6" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.11%)</title><rect x="277.6" y="467.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.6" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.11%)</title><rect x="277.6" y="451.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.6" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$214/1969071141.test (1 samples, 0.11%)</title><rect x="277.6" y="435.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="280.6" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$213/724783672.apply (1 samples, 0.11%)</title><rect x="278.9" y="467.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.9" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.22%)</title><rect x="280.2" y="643.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.2" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.11%)</title><rect x="281.4" y="627.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.4" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.11%)</title><rect x="281.4" y="611.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.4" y="622.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.11%)</title><rect x="281.4" y="595.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="284.4" y="606.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.11%)</title><rect x="281.4" y="579.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.4" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.11%)</title><rect x="281.4" y="563.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="284.4" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.11%)</title><rect x="281.4" y="547.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.4" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.11%)</title><rect x="281.4" y="531.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.4" y="542.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.11%)</title><rect x="281.4" y="515.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="284.4" y="526.0"></text>
</g>
<g>
<title>java/util/stream/Sink.begin (1 samples, 0.11%)</title><rect x="281.4" y="499.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.4" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.22%)</title><rect x="282.7" y="659.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.11%)</title><rect x="284.0" y="643.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="287.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.rejoinNeededOrPending (1 samples, 0.11%)</title><rect x="284.0" y="627.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.43%)</title><rect x="285.2" y="675.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.43%)</title><rect x="285.2" y="659.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="288.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.43%)</title><rect x="285.2" y="643.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.43%)</title><rect x="285.2" y="627.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="288.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.22%)</title><rect x="285.2" y="611.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="288.2" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.22%)</title><rect x="285.2" y="595.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.2" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.22%)</title><rect x="285.2" y="579.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="288.2" y="590.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.22%)</title><rect x="285.2" y="563.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="288.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.22%)</title><rect x="287.8" y="611.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.22%)</title><rect x="287.8" y="595.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="290.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.22%)</title><rect x="287.8" y="579.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.22%)</title><rect x="287.8" y="563.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.22%)</title><rect x="287.8" y="547.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="290.8" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.11%)</title><rect x="289.1" y="531.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="292.1" y="542.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="289.1" y="515.0" width="1.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="292.1" y="526.0"></text>
</g>
<g>
<title>java/lang/Thread.run (670 samples, 72.35%)</title><rect x="290.3" y="739.0" width="853.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.3" y="750.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (669 samples, 72.25%)</title><rect x="291.6" y="723.0" width="852.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.6" y="734.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (669 samples, 72.25%)</title><rect x="291.6" y="707.0" width="852.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="294.6" y="718.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/790206222.run (439 samples, 47.41%)</title><rect x="292.9" y="691.0" width="559.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.9" y="702.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/790206222.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (439 samples, 47.41%)</title><rect x="292.9" y="675.0" width="559.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.9" y="686.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (438 samples, 47.30%)</title><rect x="294.2" y="659.0" width="558.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="297.2" y="670.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (434 samples, 46.87%)</title><rect x="294.2" y="643.0" width="553.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="297.2" y="654.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>[unknown] (2 samples, 0.22%)</title><rect x="312.0" y="627.0" width="2.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="315.0" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.22%)</title><rect x="312.0" y="611.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="315.0" y="622.0"></text>
</g>
<g>
<title>_init (1 samples, 0.11%)</title><rect x="314.6" y="627.0" width="1.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="317.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (4 samples, 0.43%)</title><rect x="315.8" y="627.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="318.8" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (152 samples, 16.41%)</title><rect x="320.9" y="627.0" width="193.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="323.9" y="638.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (152 samples, 16.41%)</title><rect x="320.9" y="611.0" width="193.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.9" y="622.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (152 samples, 16.41%)</title><rect x="320.9" y="595.0" width="193.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="323.9" y="606.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (152 samples, 16.41%)</title><rect x="320.9" y="579.0" width="193.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="323.9" y="590.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (152 samples, 16.41%)</title><rect x="320.9" y="563.0" width="193.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="323.9" y="574.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (152 samples, 16.41%)</title><rect x="320.9" y="547.0" width="193.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="323.9" y="558.0">com/fasterxml/jackson/dat..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (46 samples, 4.97%)</title><rect x="320.9" y="531.0" width="58.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="323.9" y="542.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (23 samples, 2.48%)</title><rect x="320.9" y="515.0" width="29.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="323.9" y="526.0">co..</text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.11%)</title><rect x="320.9" y="499.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="323.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (20 samples, 2.16%)</title><rect x="322.2" y="499.0" width="25.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="325.2" y="510.0">c..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.54%)</title><rect x="334.9" y="483.0" width="6.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="337.9" y="494.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.54%)</title><rect x="334.9" y="467.0" width="6.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="337.9" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.22%)</title><rect x="341.3" y="483.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="344.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.32%)</title><rect x="343.9" y="483.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="346.9" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.32%)</title><rect x="343.9" y="467.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="346.9" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.32%)</title><rect x="343.9" y="451.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="346.9" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.32%)</title><rect x="343.9" y="435.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="346.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (2 samples, 0.22%)</title><rect x="347.7" y="499.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="350.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.22%)</title><rect x="347.7" y="483.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="350.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (23 samples, 2.48%)</title><rect x="350.2" y="515.0" width="29.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="353.2" y="526.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (3 samples, 0.32%)</title><rect x="350.2" y="499.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="353.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (20 samples, 2.16%)</title><rect x="354.1" y="499.0" width="25.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="357.1" y="510.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.11%)</title><rect x="357.9" y="483.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="360.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.11%)</title><rect x="357.9" y="467.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="360.9" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (11 samples, 1.19%)</title><rect x="359.2" y="483.0" width="14.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="362.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (11 samples, 1.19%)</title><rect x="359.2" y="467.0" width="14.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="362.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.11%)</title><rect x="359.2" y="451.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="362.2" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="359.2" y="435.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="362.2" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.11%)</title><rect x="359.2" y="419.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="362.2" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="359.2" y="403.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="362.2" y="414.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.11%)</title><rect x="359.2" y="387.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="362.2" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.11%)</title><rect x="359.2" y="371.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="362.2" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (10 samples, 1.08%)</title><rect x="360.4" y="451.0" width="12.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="363.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (5 samples, 0.54%)</title><rect x="373.2" y="483.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="376.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (94 samples, 10.15%)</title><rect x="379.5" y="531.0" width="119.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="382.5" y="542.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (9 samples, 0.97%)</title><rect x="379.5" y="515.0" width="11.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="382.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (9 samples, 0.97%)</title><rect x="379.5" y="499.0" width="11.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="382.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (8 samples, 0.86%)</title><rect x="379.5" y="483.0" width="10.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="382.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (5 samples, 0.54%)</title><rect x="383.4" y="467.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="386.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.11%)</title><rect x="389.7" y="483.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="392.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 0.65%)</title><rect x="391.0" y="515.0" width="7.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="394.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.65%)</title><rect x="391.0" y="499.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="394.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (2 samples, 0.22%)</title><rect x="394.8" y="483.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="397.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.11%)</title><rect x="397.4" y="483.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="400.4" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (11 samples, 1.19%)</title><rect x="398.7" y="515.0" width="14.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="401.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.97%)</title><rect x="399.9" y="499.0" width="11.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="402.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.32%)</title><rect x="403.8" y="483.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="406.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.32%)</title><rect x="403.8" y="467.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="406.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.11%)</title><rect x="406.3" y="451.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="409.3" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (3 samples, 0.32%)</title><rect x="407.6" y="483.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="410.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.11%)</title><rect x="411.4" y="499.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="414.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (9 samples, 0.97%)</title><rect x="412.7" y="515.0" width="11.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="415.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (9 samples, 0.97%)</title><rect x="412.7" y="499.0" width="11.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="415.7" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="416.5" y="483.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="419.5" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="416.5" y="467.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="419.5" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="416.5" y="451.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="419.5" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="416.5" y="435.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="419.5" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.11%)</title><rect x="416.5" y="419.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="419.5" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.32%)</title><rect x="417.8" y="483.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="420.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (2 samples, 0.22%)</title><rect x="421.6" y="483.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="424.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (2 samples, 0.22%)</title><rect x="421.6" y="467.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="424.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (2 samples, 0.22%)</title><rect x="421.6" y="451.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="424.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (59 samples, 6.37%)</title><rect x="424.1" y="515.0" width="75.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="427.1" y="526.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.84%)</title><rect x="426.7" y="499.0" width="21.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="429.7" y="510.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.76%)</title><rect x="434.3" y="483.0" width="9.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="437.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.76%)</title><rect x="434.3" y="467.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="437.3" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.76%)</title><rect x="434.3" y="451.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="437.3" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (7 samples, 0.76%)</title><rect x="434.3" y="435.0" width="9.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="437.3" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (7 samples, 0.76%)</title><rect x="434.3" y="419.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="437.3" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.calcHash (2 samples, 0.22%)</title><rect x="440.7" y="403.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="443.7" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (4 samples, 0.43%)</title><rect x="443.3" y="483.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="446.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (40 samples, 4.32%)</title><rect x="448.4" y="499.0" width="50.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="451.4" y="510.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (40 samples, 4.32%)</title><rect x="448.4" y="483.0" width="50.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="451.4" y="494.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (40 samples, 4.32%)</title><rect x="448.4" y="467.0" width="50.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="451.4" y="478.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 1.19%)</title><rect x="454.7" y="451.0" width="14.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="457.7" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.43%)</title><rect x="462.4" y="435.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="465.4" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.43%)</title><rect x="462.4" y="419.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="465.4" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.43%)</title><rect x="462.4" y="403.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="465.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.11%)</title><rect x="462.4" y="387.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="465.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.11%)</title><rect x="462.4" y="371.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="465.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.32%)</title><rect x="463.7" y="387.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="466.7" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.32%)</title><rect x="463.7" y="371.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="466.7" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.32%)</title><rect x="463.7" y="355.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="466.7" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (3 samples, 0.32%)</title><rect x="463.7" y="339.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="466.7" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.11%)</title><rect x="467.5" y="435.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="470.5" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.11%)</title><rect x="467.5" y="419.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="470.5" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.86%)</title><rect x="468.7" y="451.0" width="10.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="471.7" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.76%)</title><rect x="470.0" y="435.0" width="8.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="473.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.76%)</title><rect x="470.0" y="419.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="473.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.76%)</title><rect x="470.0" y="403.0" width="8.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="473.0" y="414.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (7 samples, 0.76%)</title><rect x="470.0" y="387.0" width="8.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="473.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (10 samples, 1.08%)</title><rect x="478.9" y="451.0" width="12.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="481.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (10 samples, 1.08%)</title><rect x="478.9" y="435.0" width="12.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="481.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (10 samples, 1.08%)</title><rect x="478.9" y="419.0" width="12.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="481.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (10 samples, 1.08%)</title><rect x="478.9" y="403.0" width="12.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="481.9" y="414.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (10 samples, 1.08%)</title><rect x="478.9" y="387.0" width="12.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="481.9" y="398.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (8 samples, 0.86%)</title><rect x="480.2" y="371.0" width="10.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="483.2" y="382.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (4 samples, 0.43%)</title><rect x="485.3" y="355.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="488.3" y="366.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.11%)</title><rect x="490.4" y="371.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="493.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.65%)</title><rect x="491.7" y="451.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="494.7" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.65%)</title><rect x="491.7" y="435.0" width="7.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="494.7" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.65%)</title><rect x="491.7" y="419.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="494.7" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (12 samples, 1.30%)</title><rect x="499.3" y="531.0" width="15.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="502.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (12 samples, 1.30%)</title><rect x="499.3" y="515.0" width="15.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="502.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (12 samples, 1.30%)</title><rect x="499.3" y="499.0" width="15.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="502.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (4 samples, 0.43%)</title><rect x="500.6" y="483.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="503.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (1 samples, 0.11%)</title><rect x="505.7" y="483.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="508.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.65%)</title><rect x="507.0" y="483.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="510.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.65%)</title><rect x="507.0" y="467.0" width="7.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="510.0" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (247 samples, 26.67%)</title><rect x="514.6" y="627.0" width="314.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="517.6" y="638.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (42 samples, 4.54%)</title><rect x="514.6" y="611.0" width="53.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="517.6" y="622.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (1 samples, 0.11%)</title><rect x="514.6" y="595.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="517.6" y="606.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (41 samples, 4.43%)</title><rect x="515.9" y="595.0" width="52.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="518.9" y="606.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (39 samples, 4.21%)</title><rect x="518.4" y="579.0" width="49.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="521.4" y="590.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (12 samples, 1.30%)</title><rect x="518.4" y="563.0" width="15.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="521.4" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (12 samples, 1.30%)</title><rect x="518.4" y="547.0" width="15.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="521.4" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (12 samples, 1.30%)</title><rect x="518.4" y="531.0" width="15.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="521.4" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.43%)</title><rect x="528.6" y="515.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="531.6" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (4 samples, 0.43%)</title><rect x="528.6" y="499.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="531.6" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.22%)</title><rect x="533.7" y="563.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="536.7" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.22%)</title><rect x="533.7" y="547.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="536.7" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.22%)</title><rect x="533.7" y="531.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="536.7" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.11%)</title><rect x="535.0" y="515.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="538.0" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (25 samples, 2.70%)</title><rect x="536.3" y="563.0" width="31.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="539.3" y="574.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (19 samples, 2.05%)</title><rect x="543.9" y="547.0" width="24.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="546.9" y="558.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (9 samples, 0.97%)</title><rect x="546.5" y="531.0" width="11.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="549.5" y="542.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (9 samples, 0.97%)</title><rect x="546.5" y="515.0" width="11.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="549.5" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 0.86%)</title><rect x="557.9" y="531.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="560.9" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.65%)</title><rect x="568.1" y="611.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="571.1" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.54%)</title><rect x="569.4" y="595.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="572.4" y="606.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.54%)</title><rect x="569.4" y="579.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="572.4" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (143 samples, 15.44%)</title><rect x="575.8" y="611.0" width="182.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="578.8" y="622.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (143 samples, 15.44%)</title><rect x="575.8" y="595.0" width="182.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="578.8" y="606.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (45 samples, 4.86%)</title><rect x="587.3" y="579.0" width="57.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="590.3" y="590.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (43 samples, 4.64%)</title><rect x="587.3" y="563.0" width="54.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="590.3" y="574.0">java/..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.43%)</title><rect x="598.7" y="547.0" width="5.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="601.7" y="558.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.43%)</title><rect x="598.7" y="531.0" width="5.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="601.7" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.22%)</title><rect x="603.8" y="547.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="606.8" y="558.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (20 samples, 2.16%)</title><rect x="606.4" y="547.0" width="25.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="609.4" y="558.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (18 samples, 1.94%)</title><rect x="607.6" y="531.0" width="23.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="610.6" y="542.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (18 samples, 1.94%)</title><rect x="607.6" y="515.0" width="23.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="610.6" y="526.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (18 samples, 1.94%)</title><rect x="607.6" y="499.0" width="23.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="610.6" y="510.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 0.54%)</title><rect x="620.4" y="483.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="623.4" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.22%)</title><rect x="620.4" y="467.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="623.4" y="478.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.11%)</title><rect x="620.4" y="451.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="623.4" y="462.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.11%)</title><rect x="621.7" y="451.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="624.7" y="462.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.11%)</title><rect x="621.7" y="435.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="624.7" y="446.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.11%)</title><rect x="621.7" y="419.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="624.7" y="430.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.11%)</title><rect x="621.7" y="403.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="624.7" y="414.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.22%)</title><rect x="622.9" y="467.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="625.9" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="624.2" y="451.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="627.2" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.11%)</title><rect x="624.2" y="435.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="627.2" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.11%)</title><rect x="624.2" y="419.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="627.2" y="430.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.11%)</title><rect x="624.2" y="403.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="627.2" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.11%)</title><rect x="624.2" y="387.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="627.2" y="398.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.11%)</title><rect x="624.2" y="371.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="627.2" y="382.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.11%)</title><rect x="625.5" y="467.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="628.5" y="478.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.32%)</title><rect x="626.8" y="483.0" width="3.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="629.8" y="494.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.11%)</title><rect x="630.6" y="531.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="633.6" y="542.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.86%)</title><rect x="631.9" y="547.0" width="10.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="634.9" y="558.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.22%)</title><rect x="642.1" y="563.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="645.1" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="642.1" y="547.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="645.1" y="558.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.11%)</title><rect x="642.1" y="531.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="645.1" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="642.1" y="515.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="645.1" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.11%)</title><rect x="642.1" y="499.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="645.1" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.11%)</title><rect x="643.3" y="547.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="646.3" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.11%)</title><rect x="643.3" y="531.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="646.3" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="643.3" y="515.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="646.3" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="643.3" y="499.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="646.3" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="643.3" y="483.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="646.3" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="643.3" y="467.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="646.3" y="478.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.11%)</title><rect x="643.3" y="451.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="646.3" y="462.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (12 samples, 1.30%)</title><rect x="644.6" y="579.0" width="15.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="647.6" y="590.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (10 samples, 1.08%)</title><rect x="644.6" y="563.0" width="12.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="647.6" y="574.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (10 samples, 1.08%)</title><rect x="644.6" y="547.0" width="12.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="647.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.11%)</title><rect x="656.1" y="531.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="659.1" y="542.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.22%)</title><rect x="657.3" y="563.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="660.3" y="574.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.22%)</title><rect x="657.3" y="547.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="660.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.11%)</title><rect x="659.9" y="579.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="662.9" y="590.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="661.2" y="579.0" width="1.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="664.2" y="590.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (75 samples, 8.10%)</title><rect x="662.4" y="579.0" width="95.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="665.4" y="590.0">org/slf4j/M..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (74 samples, 7.99%)</title><rect x="663.7" y="563.0" width="94.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="666.7" y="574.0">ch/qos/logb..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (31 samples, 3.35%)</title><rect x="663.7" y="547.0" width="39.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="666.7" y="558.0">ch/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (31 samples, 3.35%)</title><rect x="663.7" y="531.0" width="39.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="666.7" y="542.0">jav..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (31 samples, 3.35%)</title><rect x="663.7" y="515.0" width="39.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="666.7" y="526.0">jav..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (19 samples, 2.05%)</title><rect x="679.0" y="499.0" width="24.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="682.0" y="510.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (19 samples, 2.05%)</title><rect x="679.0" y="483.0" width="24.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="682.0" y="494.0">j..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (43 samples, 4.64%)</title><rect x="703.2" y="547.0" width="54.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="706.2" y="558.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (39 samples, 4.21%)</title><rect x="708.3" y="531.0" width="49.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="711.3" y="542.0">java/..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.11%)</title><rect x="714.7" y="515.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="717.7" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.54%)</title><rect x="716.0" y="515.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="719.0" y="526.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.54%)</title><rect x="716.0" y="499.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="719.0" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (28 samples, 3.02%)</title><rect x="722.3" y="515.0" width="35.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="725.3" y="526.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.43%)</title><rect x="741.4" y="499.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="744.4" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.32%)</title><rect x="746.5" y="499.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="749.5" y="510.0"></text>
</g>
<g>
<title>vtable stub (6 samples, 0.65%)</title><rect x="750.4" y="499.0" width="7.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="753.4" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (33 samples, 3.56%)</title><rect x="758.0" y="611.0" width="42.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="761.0" y="622.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (33 samples, 3.56%)</title><rect x="758.0" y="595.0" width="42.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="761.0" y="606.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1002249153.process (13 samples, 1.40%)</title><rect x="760.6" y="579.0" width="16.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="763.6" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (11 samples, 1.19%)</title><rect x="763.1" y="563.0" width="14.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="766.1" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (10 samples, 1.08%)</title><rect x="763.1" y="547.0" width="12.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="766.1" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.11%)</title><rect x="764.4" y="531.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="767.4" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.11%)</title><rect x="764.4" y="515.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="767.4" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.11%)</title><rect x="764.4" y="499.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="767.4" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.11%)</title><rect x="764.4" y="483.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="767.4" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (7 samples, 0.76%)</title><rect x="765.7" y="531.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="768.7" y="542.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.65%)</title><rect x="766.9" y="515.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="769.9" y="526.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.43%)</title><rect x="769.5" y="499.0" width="5.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="772.5" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.11%)</title><rect x="774.6" y="531.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="777.6" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.11%)</title><rect x="775.9" y="547.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="778.9" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.11%)</title><rect x="775.9" y="531.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="778.9" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.11%)</title><rect x="775.9" y="515.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="778.9" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.11%)</title><rect x="775.9" y="499.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="778.9" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.43%)</title><rect x="777.1" y="579.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="780.1" y="590.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.32%)</title><rect x="778.4" y="563.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="781.4" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.11%)</title><rect x="782.2" y="579.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="785.2" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.11%)</title><rect x="782.2" y="563.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="785.2" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$276/1498077573.get$Lambda (1 samples, 0.11%)</title><rect x="782.2" y="547.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="785.2" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="782.2" y="531.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="785.2" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="782.2" y="515.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="785.2" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="782.2" y="499.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="785.2" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="782.2" y="483.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="785.2" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.65%)</title><rect x="783.5" y="579.0" width="7.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="786.5" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.43%)</title><rect x="786.0" y="563.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="789.0" y="574.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.22%)</title><rect x="786.0" y="547.0" width="2.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="789.0" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.22%)</title><rect x="788.6" y="547.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="791.6" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.32%)</title><rect x="791.1" y="579.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="794.1" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.32%)</title><rect x="791.1" y="563.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="794.1" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.43%)</title><rect x="795.0" y="579.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="798.0" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.11%)</title><rect x="798.8" y="563.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="801.8" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.11%)</title><rect x="800.1" y="611.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="803.1" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="800.1" y="595.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="803.1" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="800.1" y="579.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="803.1" y="590.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.11%)</title><rect x="800.1" y="563.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="803.1" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1620229638.linkToTargetMethod (1 samples, 0.11%)</title><rect x="801.3" y="611.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="804.3" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/110771485.invokeStatic_L3_L (1 samples, 0.11%)</title><rect x="801.3" y="595.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="804.3" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1943192944.get$Lambda (1 samples, 0.11%)</title><rect x="801.3" y="579.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="804.3" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="801.3" y="563.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="804.3" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="801.3" y="547.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="804.3" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="801.3" y="531.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="804.3" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="801.3" y="515.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="804.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (21 samples, 2.27%)</title><rect x="802.6" y="611.0" width="26.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="805.6" y="622.0">j..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.65%)</title><rect x="810.3" y="595.0" width="7.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="813.3" y="606.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.65%)</title><rect x="810.3" y="579.0" width="7.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="813.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.86%)</title><rect x="817.9" y="595.0" width="10.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="820.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.86%)</title><rect x="817.9" y="579.0" width="10.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="820.9" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1943192944.accept (8 samples, 0.86%)</title><rect x="817.9" y="563.0" width="10.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="820.9" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (8 samples, 0.86%)</title><rect x="817.9" y="547.0" width="10.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="820.9" y="558.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (8 samples, 0.86%)</title><rect x="817.9" y="531.0" width="10.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="820.9" y="542.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (8 samples, 0.86%)</title><rect x="817.9" y="515.0" width="10.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="820.9" y="526.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.43%)</title><rect x="823.0" y="499.0" width="5.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="826.0" y="510.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.32%)</title><rect x="824.3" y="483.0" width="3.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="827.3" y="494.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.11%)</title><rect x="828.1" y="595.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="831.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 1.08%)</title><rect x="829.4" y="627.0" width="12.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="832.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 1.08%)</title><rect x="829.4" y="611.0" width="12.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="832.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.76%)</title><rect x="833.2" y="595.0" width="8.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="836.2" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/1023782694.accept (7 samples, 0.76%)</title><rect x="833.2" y="579.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="836.2" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (7 samples, 0.76%)</title><rect x="833.2" y="563.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="836.2" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1660478380.complete (7 samples, 0.76%)</title><rect x="833.2" y="547.0" width="8.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="836.2" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (7 samples, 0.76%)</title><rect x="833.2" y="531.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="836.2" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (7 samples, 0.76%)</title><rect x="833.2" y="515.0" width="8.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="836.2" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 0.76%)</title><rect x="833.2" y="499.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="836.2" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 0.76%)</title><rect x="833.2" y="483.0" width="8.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="836.2" y="494.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (7 samples, 0.76%)</title><rect x="833.2" y="467.0" width="8.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="836.2" y="478.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (7 samples, 0.76%)</title><rect x="833.2" y="451.0" width="8.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="836.2" y="462.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.43%)</title><rect x="842.1" y="627.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="845.1" y="638.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.43%)</title><rect x="842.1" y="611.0" width="5.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="845.1" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 0.43%)</title><rect x="847.2" y="643.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="850.2" y="654.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.22%)</title><rect x="849.8" y="627.0" width="2.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="852.8" y="638.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.22%)</title><rect x="849.8" y="611.0" width="2.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="852.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.43%)</title><rect x="852.3" y="691.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="855.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.43%)</title><rect x="852.3" y="675.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="855.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.43%)</title><rect x="852.3" y="659.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="855.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.43%)</title><rect x="852.3" y="643.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="855.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (1 samples, 0.11%)</title><rect x="856.1" y="627.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="859.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (225 samples, 24.30%)</title><rect x="857.4" y="691.0" width="286.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="860.4" y="702.0">java/util/concurrent/ThreadPoolExecuto..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (223 samples, 24.08%)</title><rect x="860.0" y="675.0" width="284.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="863.0" y="686.0">java/util/concurrent/LinkedBlockingQue..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (198 samples, 21.38%)</title><rect x="863.8" y="659.0" width="252.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="866.8" y="670.0">java/util/concurrent/locks/Abstrac..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (25 samples, 2.70%)</title><rect x="868.9" y="643.0" width="31.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="871.9" y="654.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (11 samples, 1.19%)</title><rect x="900.7" y="643.0" width="14.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="903.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 1.19%)</title><rect x="900.7" y="627.0" width="14.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="903.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 1.19%)</title><rect x="900.7" y="611.0" width="14.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="903.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 1.19%)</title><rect x="900.7" y="595.0" width="14.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="903.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (158 samples, 17.06%)</title><rect x="914.8" y="643.0" width="201.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="917.8" y="654.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (157 samples, 16.95%)</title><rect x="916.0" y="627.0" width="200.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="919.0" y="638.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.11%)</title><rect x="918.6" y="611.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="921.6" y="622.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.11%)</title><rect x="919.8" y="611.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="922.8" y="622.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.11%)</title><rect x="921.1" y="611.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="924.1" y="622.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.22%)</title><rect x="922.4" y="611.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="925.4" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.43%)</title><rect x="924.9" y="611.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="927.9" y="622.0"></text>
</g>
<g>
<title>Unsafe_Park (143 samples, 15.44%)</title><rect x="930.0" y="611.0" width="182.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="933.0" y="622.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.22%)</title><rect x="933.9" y="595.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="936.9" y="606.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (27 samples, 2.92%)</title><rect x="936.4" y="595.0" width="34.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="939.4" y="606.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (9 samples, 0.97%)</title><rect x="945.3" y="579.0" width="11.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="948.3" y="590.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.22%)</title><rect x="947.9" y="563.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="950.9" y="574.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.22%)</title><rect x="947.9" y="547.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="950.9" y="558.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.32%)</title><rect x="950.4" y="563.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="953.4" y="574.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.22%)</title><rect x="954.3" y="563.0" width="2.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="957.3" y="574.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.22%)</title><rect x="956.8" y="579.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="959.8" y="590.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.11%)</title><rect x="959.4" y="579.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="962.4" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (8 samples, 0.86%)</title><rect x="960.6" y="579.0" width="10.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="963.6" y="590.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.11%)</title><rect x="970.8" y="595.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="973.8" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.22%)</title><rect x="972.1" y="595.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="975.1" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.32%)</title><rect x="974.6" y="595.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="977.6" y="606.0"></text>
</g>
<g>
<title>__lll_lock_wait (6 samples, 0.65%)</title><rect x="978.5" y="595.0" width="7.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="981.5" y="606.0"></text>
</g>
<g>
<title>__lll_unlock_wake (30 samples, 3.24%)</title><rect x="986.1" y="595.0" width="38.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="989.1" y="606.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (56 samples, 6.05%)</title><rect x="1024.3" y="595.0" width="71.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1027.3" y="606.0">__pthrea..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.43%)</title><rect x="1095.7" y="595.0" width="5.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1098.7" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.65%)</title><rect x="1100.8" y="595.0" width="7.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1103.8" y="606.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.11%)</title><rect x="1108.4" y="595.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1111.4" y="606.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.11%)</title><rect x="1109.7" y="595.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1112.7" y="606.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.11%)</title><rect x="1111.0" y="595.0" width="1.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1114.0" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.11%)</title><rect x="1112.3" y="611.0" width="1.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1115.3" y="622.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.11%)</title><rect x="1113.5" y="611.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.5" y="622.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.11%)</title><rect x="1114.8" y="611.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1117.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (22 samples, 2.38%)</title><rect x="1116.1" y="659.0" width="28.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1119.1" y="670.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (22 samples, 2.38%)</title><rect x="1116.1" y="643.0" width="28.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1119.1" y="654.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (22 samples, 2.38%)</title><rect x="1116.1" y="627.0" width="28.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1119.1" y="638.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (22 samples, 2.38%)</title><rect x="1116.1" y="611.0" width="28.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1119.1" y="622.0">ja..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.11%)</title><rect x="1144.1" y="739.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1147.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.11%)</title><rect x="1144.1" y="723.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1147.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.11%)</title><rect x="1144.1" y="707.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1147.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.handlePendingDisconnects (1 samples, 0.11%)</title><rect x="1144.1" y="691.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1147.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.11%)</title><rect x="1144.1" y="675.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1147.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.11%)</title><rect x="1144.1" y="659.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1147.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.11%)</title><rect x="1144.1" y="643.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1147.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.11%)</title><rect x="1144.1" y="627.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1147.1" y="638.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.11%)</title><rect x="1144.1" y="611.0" width="1.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1147.1" y="622.0"></text>
</g>
<g>
<title>start_thread (35 samples, 3.78%)</title><rect x="1145.4" y="739.0" width="44.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1148.4" y="750.0">star..</text>
</g>
<g>
<title>java_start(Thread*) (35 samples, 3.78%)</title><rect x="1145.4" y="723.0" width="44.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1148.4" y="734.0">java..</text>
</g>
<g>
<title>GangWorker::loop() (17 samples, 1.84%)</title><rect x="1145.4" y="707.0" width="21.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.4" y="718.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.11%)</title><rect x="1145.4" y="691.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.4" y="702.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.11%)</title><rect x="1145.4" y="675.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.4" y="686.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.11%)</title><rect x="1145.4" y="659.0" width="1.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1148.4" y="670.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.73%)</title><rect x="1146.7" y="691.0" width="20.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.7" y="702.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.43%)</title><rect x="1146.7" y="675.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.7" y="686.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.22%)</title><rect x="1146.7" y="659.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.7" y="670.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.11%)</title><rect x="1147.9" y="643.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.9" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.11%)</title><rect x="1147.9" y="627.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.9" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.11%)</title><rect x="1147.9" y="611.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.9" y="622.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.22%)</title><rect x="1149.2" y="659.0" width="2.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1152.2" y="670.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.76%)</title><rect x="1151.8" y="675.0" width="8.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.8" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.22%)</title><rect x="1151.8" y="659.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.8" y="670.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.22%)</title><rect x="1151.8" y="643.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.8" y="654.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.22%)</title><rect x="1151.8" y="627.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.8" y="638.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.11%)</title><rect x="1151.8" y="611.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.8" y="622.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.11%)</title><rect x="1151.8" y="595.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.8" y="606.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.11%)</title><rect x="1153.0" y="611.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.0" y="622.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.11%)</title><rect x="1153.0" y="595.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.0" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::mask_for(methodHandle, int, InterpreterOopMap*) (1 samples, 0.11%)</title><rect x="1153.0" y="579.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.0" y="590.0"></text>
</g>
<g>
<title>OopMapCache::lookup(methodHandle, int, InterpreterOopMap*) const (1 samples, 0.11%)</title><rect x="1153.0" y="563.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.0" y="574.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.54%)</title><rect x="1154.3" y="659.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.3" y="670.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (5 samples, 0.54%)</title><rect x="1154.3" y="643.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.3" y="654.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.54%)</title><rect x="1160.7" y="675.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.7" y="686.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.54%)</title><rect x="1160.7" y="659.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.7" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.32%)</title><rect x="1160.7" y="643.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.7" y="654.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.32%)</title><rect x="1160.7" y="627.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.7" y="638.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.32%)</title><rect x="1160.7" y="611.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.7" y="622.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.32%)</title><rect x="1160.7" y="595.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.7" y="606.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.32%)</title><rect x="1160.7" y="579.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.7" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.11%)</title><rect x="1162.0" y="563.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.0" y="574.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.11%)</title><rect x="1163.2" y="563.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.2" y="574.0"></text>
</g>
<g>
<title>G1HotCardCache::drain(unsigned int, G1RemSet*, DirtyCardQueue*) (1 samples, 0.11%)</title><rect x="1164.5" y="643.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.5" y="654.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.11%)</title><rect x="1165.8" y="643.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.8" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.11%)</title><rect x="1165.8" y="627.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.8" y="638.0"></text>
</g>
<g>
<title>HeapRegionRemSet::iter_is_complete() (1 samples, 0.11%)</title><rect x="1165.8" y="611.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.8" y="622.0"></text>
</g>
<g>
<title>JavaThread::run() (16 samples, 1.73%)</title><rect x="1167.1" y="707.0" width="20.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.1" y="718.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (16 samples, 1.73%)</title><rect x="1167.1" y="691.0" width="20.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.1" y="702.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (16 samples, 1.73%)</title><rect x="1167.1" y="675.0" width="20.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.1" y="686.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (16 samples, 1.73%)</title><rect x="1167.1" y="659.0" width="20.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.1" y="670.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (16 samples, 1.73%)</title><rect x="1167.1" y="643.0" width="20.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.1" y="654.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (16 samples, 1.73%)</title><rect x="1167.1" y="627.0" width="20.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.1" y="638.0"></text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.11%)</title><rect x="1167.1" y="611.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.1" y="622.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.11%)</title><rect x="1167.1" y="595.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.1" y="606.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.11%)</title><rect x="1167.1" y="579.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.1" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.11%)</title><rect x="1167.1" y="563.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.1" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.11%)</title><rect x="1167.1" y="547.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.1" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1167.1" y="531.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.1" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1167.1" y="515.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.1" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.11%)</title><rect x="1167.1" y="499.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.1" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.11%)</title><rect x="1167.1" y="483.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.1" y="494.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.11%)</title><rect x="1167.1" y="467.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.1" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1167.1" y="451.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.1" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1167.1" y="435.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.1" y="446.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.11%)</title><rect x="1167.1" y="419.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.1" y="430.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (8 samples, 0.86%)</title><rect x="1168.3" y="611.0" width="10.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.3" y="622.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.11%)</title><rect x="1168.3" y="595.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.3" y="606.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.11%)</title><rect x="1168.3" y="579.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.3" y="590.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.11%)</title><rect x="1168.3" y="563.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.3" y="574.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.22%)</title><rect x="1169.6" y="595.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.6" y="606.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.22%)</title><rect x="1169.6" y="579.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.6" y="590.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.11%)</title><rect x="1169.6" y="563.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.6" y="574.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.11%)</title><rect x="1170.9" y="563.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.9" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.11%)</title><rect x="1172.2" y="595.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.2" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.11%)</title><rect x="1172.2" y="579.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.2" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1172.2" y="563.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.2" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.11%)</title><rect x="1172.2" y="547.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.2" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (4 samples, 0.43%)</title><rect x="1173.4" y="595.0" width="5.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.4" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.22%)</title><rect x="1173.4" y="579.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.4" y="590.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.22%)</title><rect x="1173.4" y="563.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.4" y="574.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="1174.7" y="547.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.7" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.11%)</title><rect x="1176.0" y="579.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.0" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.11%)</title><rect x="1177.3" y="579.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.3" y="590.0"></text>
</g>
<g>
<title>Compile::Optimize() (5 samples, 0.54%)</title><rect x="1178.5" y="611.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.5" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (3 samples, 0.32%)</title><rect x="1178.5" y="595.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.5" y="606.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.11%)</title><rect x="1178.5" y="579.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.5" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.11%)</title><rect x="1179.8" y="579.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.8" y="590.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.11%)</title><rect x="1179.8" y="563.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.8" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.11%)</title><rect x="1181.1" y="579.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.1" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.11%)</title><rect x="1181.1" y="563.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.1" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.11%)</title><rect x="1181.1" y="547.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.1" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.11%)</title><rect x="1182.4" y="595.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.4" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.11%)</title><rect x="1182.4" y="579.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.4" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.11%)</title><rect x="1183.6" y="595.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.6" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.11%)</title><rect x="1183.6" y="579.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.6" y="590.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1183.6" y="563.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.6" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.11%)</title><rect x="1183.6" y="547.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.6" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.11%)</title><rect x="1183.6" y="531.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.6" y="542.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.11%)</title><rect x="1183.6" y="515.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.6" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.22%)</title><rect x="1184.9" y="611.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.9" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.22%)</title><rect x="1184.9" y="595.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.22%)</title><rect x="1184.9" y="579.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.22%)</title><rect x="1184.9" y="563.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.22%)</title><rect x="1184.9" y="547.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1184.9" y="531.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1184.9" y="515.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1184.9" y="499.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1184.9" y="483.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1184.9" y="467.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1184.9" y="451.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1184.9" y="435.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1184.9" y="419.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1184.9" y="403.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1184.9" y="387.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1184.9" y="371.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1184.9" y="355.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1184.9" y="339.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1184.9" y="323.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.9" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1184.9" y="307.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1184.9" y="291.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1184.9" y="275.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1184.9" y="259.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1184.9" y="243.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.9" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1184.9" y="227.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.9" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1184.9" y="211.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1184.9" y="195.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1184.9" y="179.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1184.9" y="163.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1184.9" y="147.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.9" y="158.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1184.9" y="131.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.9" y="142.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.11%)</title><rect x="1184.9" y="115.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.9" y="126.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.11%)</title><rect x="1184.9" y="99.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.9" y="110.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.11%)</title><rect x="1184.9" y="83.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.9" y="94.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.11%)</title><rect x="1184.9" y="67.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.9" y="78.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1184.9" y="51.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.9" y="62.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1184.9" y="35.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.9" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.11%)</title><rect x="1186.2" y="531.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.11%)</title><rect x="1186.2" y="515.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.2" y="526.0"></text>
</g>
<g>
<title>ciObjArrayKlass::element_klass() (1 samples, 0.11%)</title><rect x="1186.2" y="499.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.2" y="510.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.22%)</title><rect x="1187.5" y="707.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.5" y="718.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.22%)</title><rect x="1187.5" y="691.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.5" y="702.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.22%)</title><rect x="1187.5" y="675.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.5" y="686.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (2 samples, 0.22%)</title><rect x="1187.5" y="659.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.5" y="670.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.11%)</title><rect x="1187.5" y="643.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.5" y="654.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.11%)</title><rect x="1187.5" y="627.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.5" y="638.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.11%)</title><rect x="1187.5" y="611.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.5" y="622.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.11%)</title><rect x="1187.5" y="595.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.5" y="606.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.11%)</title><rect x="1187.5" y="579.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.5" y="590.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_idle_monitors() (1 samples, 0.11%)</title><rect x="1188.7" y="643.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.7" y="654.0"></text>
</g>
</g>
</svg>
