<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1462" onload="init(evt)" viewBox="0 0 1200 1462" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1445"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1445"> </text>
<g id="frames">
<g>
<title>all (186 samples, 100.00%)</title><rect x="10.0" y="1411.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1422.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.54%)</title><rect x="10.0" y="1395.0" width="6.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (41 samples, 22.04%)</title><rect x="16.3" y="1395.0" width="260.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.3" y="1406.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (41 samples, 22.04%)</title><rect x="16.3" y="1379.0" width="260.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.3" y="1390.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.54%)</title><rect x="16.3" y="1363.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.3" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.54%)</title><rect x="16.3" y="1347.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.3" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.54%)</title><rect x="16.3" y="1331.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.3" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.54%)</title><rect x="16.3" y="1315.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.3" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.54%)</title><rect x="16.3" y="1299.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.3" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.54%)</title><rect x="16.3" y="1283.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.3" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.54%)</title><rect x="16.3" y="1267.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.3" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.54%)</title><rect x="16.3" y="1251.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.3" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.54%)</title><rect x="16.3" y="1235.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.3" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.54%)</title><rect x="16.3" y="1219.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.3" y="1230.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.54%)</title><rect x="16.3" y="1203.0" width="6.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="19.3" y="1214.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (27 samples, 14.52%)</title><rect x="22.7" y="1363.0" width="171.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.7" y="1374.0">java/lang/Iterable.for..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1631608305.accept (27 samples, 14.52%)</title><rect x="22.7" y="1347.0" width="171.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.7" y="1358.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (27 samples, 14.52%)</title><rect x="22.7" y="1331.0" width="171.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="25.7" y="1342.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (23 samples, 12.37%)</title><rect x="22.7" y="1315.0" width="145.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.7" y="1326.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (23 samples, 12.37%)</title><rect x="22.7" y="1299.0" width="145.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.7" y="1310.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (23 samples, 12.37%)</title><rect x="22.7" y="1283.0" width="145.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.7" y="1294.0">com/linecorp/decat..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (23 samples, 12.37%)</title><rect x="22.7" y="1267.0" width="145.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.7" y="1278.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (23 samples, 12.37%)</title><rect x="22.7" y="1251.0" width="145.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.7" y="1262.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (23 samples, 12.37%)</title><rect x="22.7" y="1235.0" width="145.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.7" y="1246.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (20 samples, 10.75%)</title><rect x="41.7" y="1219.0" width="126.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="44.7" y="1230.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (6 samples, 3.23%)</title><rect x="48.1" y="1203.0" width="38.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="51.1" y="1214.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (6 samples, 3.23%)</title><rect x="48.1" y="1187.0" width="38.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="51.1" y="1198.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (6 samples, 3.23%)</title><rect x="48.1" y="1171.0" width="38.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="51.1" y="1182.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 6.99%)</title><rect x="86.1" y="1203.0" width="82.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="89.1" y="1214.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 6.99%)</title><rect x="86.1" y="1187.0" width="82.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="89.1" y="1198.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 6.99%)</title><rect x="86.1" y="1171.0" width="82.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="89.1" y="1182.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 6.99%)</title><rect x="86.1" y="1155.0" width="82.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="89.1" y="1166.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (13 samples, 6.99%)</title><rect x="86.1" y="1139.0" width="82.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="89.1" y="1150.0">sun/misc/..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.54%)</title><rect x="86.1" y="1123.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="89.1" y="1134.0"></text>
</g>
<g>
<title>Unsafe_Unpark (10 samples, 5.38%)</title><rect x="92.5" y="1123.0" width="63.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="95.5" y="1134.0">Unsafe_..</text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 3.23%)</title><rect x="92.5" y="1107.0" width="38.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="95.5" y="1118.0">__p..</text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 2.15%)</title><rect x="130.5" y="1107.0" width="25.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="133.5" y="1118.0">p..</text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.54%)</title><rect x="155.9" y="1123.0" width="6.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="158.9" y="1134.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.54%)</title><rect x="162.3" y="1123.0" width="6.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="165.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.54%)</title><rect x="168.6" y="1315.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="171.6" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.54%)</title><rect x="168.6" y="1299.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="171.6" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.54%)</title><rect x="168.6" y="1283.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="171.6" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.61%)</title><rect x="174.9" y="1315.0" width="19.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="177.9" y="1326.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.61%)</title><rect x="174.9" y="1299.0" width="19.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="177.9" y="1310.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.54%)</title><rect x="187.6" y="1283.0" width="6.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="190.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 6.99%)</title><rect x="194.0" y="1363.0" width="82.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="197.0" y="1374.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 6.99%)</title><rect x="194.0" y="1347.0" width="82.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="197.0" y="1358.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 3.76%)</title><rect x="194.0" y="1331.0" width="44.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="197.0" y="1342.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 3.76%)</title><rect x="194.0" y="1315.0" width="44.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="197.0" y="1326.0">org/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.54%)</title><rect x="194.0" y="1299.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="197.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 3.23%)</title><rect x="200.3" y="1299.0" width="38.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="203.3" y="1310.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 2.69%)</title><rect x="200.3" y="1283.0" width="31.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="203.3" y="1294.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 2.69%)</title><rect x="200.3" y="1267.0" width="31.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="203.3" y="1278.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (4 samples, 2.15%)</title><rect x="200.3" y="1251.0" width="25.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="203.3" y="1262.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.54%)</title><rect x="213.0" y="1235.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="216.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.54%)</title><rect x="213.0" y="1219.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="216.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.54%)</title><rect x="213.0" y="1203.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="216.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.54%)</title><rect x="213.0" y="1187.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="216.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.54%)</title><rect x="213.0" y="1171.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.54%)</title><rect x="213.0" y="1155.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="216.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.54%)</title><rect x="213.0" y="1139.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="216.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.54%)</title><rect x="213.0" y="1123.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.54%)</title><rect x="219.4" y="1235.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.54%)</title><rect x="219.4" y="1219.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="222.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.54%)</title><rect x="219.4" y="1203.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="222.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.54%)</title><rect x="219.4" y="1187.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="222.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.54%)</title><rect x="219.4" y="1171.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.4" y="1182.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.slice (1 samples, 0.54%)</title><rect x="219.4" y="1155.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="222.4" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.54%)</title><rect x="219.4" y="1139.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="222.4" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.54%)</title><rect x="219.4" y="1123.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="222.4" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.54%)</title><rect x="219.4" y="1107.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="222.4" y="1118.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.54%)</title><rect x="219.4" y="1091.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="222.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.54%)</title><rect x="225.7" y="1251.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="228.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.54%)</title><rect x="225.7" y="1235.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.54%)</title><rect x="225.7" y="1219.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.7" y="1230.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.54%)</title><rect x="225.7" y="1203.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="228.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.54%)</title><rect x="232.0" y="1283.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="235.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.54%)</title><rect x="232.0" y="1267.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="235.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.54%)</title><rect x="232.0" y="1251.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="235.0" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.54%)</title><rect x="232.0" y="1235.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="235.0" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.54%)</title><rect x="232.0" y="1219.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="235.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.54%)</title><rect x="232.0" y="1203.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="235.0" y="1214.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.54%)</title><rect x="232.0" y="1187.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="235.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.54%)</title><rect x="232.0" y="1171.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="235.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.54%)</title><rect x="232.0" y="1155.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="235.0" y="1166.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.54%)</title><rect x="232.0" y="1139.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="235.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (5 samples, 2.69%)</title><rect x="238.4" y="1331.0" width="31.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="241.4" y="1342.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 2.15%)</title><rect x="238.4" y="1315.0" width="25.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="241.4" y="1326.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 1.61%)</title><rect x="238.4" y="1299.0" width="19.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="241.4" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 1.08%)</title><rect x="238.4" y="1283.0" width="12.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="241.4" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 1.08%)</title><rect x="238.4" y="1267.0" width="12.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="241.4" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.54%)</title><rect x="238.4" y="1251.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.4" y="1262.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.54%)</title><rect x="238.4" y="1235.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.4" y="1246.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.54%)</title><rect x="238.4" y="1219.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="241.4" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.54%)</title><rect x="238.4" y="1203.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.4" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.54%)</title><rect x="238.4" y="1187.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.4" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.54%)</title><rect x="244.7" y="1251.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="247.7" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.54%)</title><rect x="244.7" y="1235.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="247.7" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.54%)</title><rect x="244.7" y="1219.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="247.7" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.54%)</title><rect x="244.7" y="1203.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.7" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$67/1782810389.get (1 samples, 0.54%)</title><rect x="244.7" y="1187.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="247.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.54%)</title><rect x="251.1" y="1283.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="254.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.54%)</title><rect x="251.1" y="1267.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="254.1" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.54%)</title><rect x="251.1" y="1251.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.1" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.54%)</title><rect x="251.1" y="1235.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="254.1" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.54%)</title><rect x="251.1" y="1219.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="254.1" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.54%)</title><rect x="251.1" y="1203.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="254.1" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.54%)</title><rect x="251.1" y="1187.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="254.1" y="1198.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.54%)</title><rect x="251.1" y="1171.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="254.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.54%)</title><rect x="257.4" y="1299.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.4" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.54%)</title><rect x="257.4" y="1283.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="260.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.54%)</title><rect x="263.8" y="1315.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="266.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.54%)</title><rect x="263.8" y="1299.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="266.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.54%)</title><rect x="270.1" y="1331.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.54%)</title><rect x="270.1" y="1315.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="273.1" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.54%)</title><rect x="270.1" y="1299.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="273.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.54%)</title><rect x="270.1" y="1283.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="273.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.54%)</title><rect x="270.1" y="1267.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="273.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse$PartitionData.&lt;init&gt; (1 samples, 0.54%)</title><rect x="270.1" y="1251.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="273.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/System.currentTimeMillis (1 samples, 0.54%)</title><rect x="276.5" y="1395.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.5" y="1406.0"></text>
</g>
<g>
<title>java/lang/Thread.run (36 samples, 19.35%)</title><rect x="282.8" y="1395.0" width="228.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.8" y="1406.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (36 samples, 19.35%)</title><rect x="282.8" y="1379.0" width="228.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.8" y="1390.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (36 samples, 19.35%)</title><rect x="282.8" y="1363.0" width="228.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="285.8" y="1374.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1583312751.run (21 samples, 11.29%)</title><rect x="282.8" y="1347.0" width="133.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.8" y="1358.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (21 samples, 11.29%)</title><rect x="282.8" y="1331.0" width="133.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.8" y="1342.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (21 samples, 11.29%)</title><rect x="282.8" y="1315.0" width="133.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="285.8" y="1326.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (21 samples, 11.29%)</title><rect x="282.8" y="1299.0" width="133.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.8" y="1310.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (2 samples, 1.08%)</title><rect x="282.8" y="1283.0" width="12.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="285.8" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (2 samples, 1.08%)</title><rect x="282.8" y="1267.0" width="12.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.8" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (2 samples, 1.08%)</title><rect x="282.8" y="1251.0" width="12.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="285.8" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (2 samples, 1.08%)</title><rect x="282.8" y="1235.0" width="12.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="285.8" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (2 samples, 1.08%)</title><rect x="282.8" y="1219.0" width="12.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.8" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (2 samples, 1.08%)</title><rect x="282.8" y="1203.0" width="12.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.8" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (2 samples, 1.08%)</title><rect x="282.8" y="1187.0" width="12.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="285.8" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (2 samples, 1.08%)</title><rect x="282.8" y="1171.0" width="12.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="285.8" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.54%)</title><rect x="282.8" y="1155.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="285.8" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.54%)</title><rect x="282.8" y="1139.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.8" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.54%)</title><rect x="282.8" y="1123.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="285.8" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.54%)</title><rect x="282.8" y="1107.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="285.8" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.54%)</title><rect x="282.8" y="1091.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.54%)</title><rect x="282.8" y="1075.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.54%)</title><rect x="289.1" y="1155.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="292.1" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.54%)</title><rect x="289.1" y="1139.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="292.1" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.54%)</title><rect x="289.1" y="1123.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="292.1" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.54%)</title><rect x="289.1" y="1107.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="292.1" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.54%)</title><rect x="289.1" y="1091.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="292.1" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.54%)</title><rect x="289.1" y="1075.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="292.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.54%)</title><rect x="289.1" y="1059.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (18 samples, 9.68%)</title><rect x="295.5" y="1283.0" width="114.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="298.5" y="1294.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (4 samples, 2.15%)</title><rect x="295.5" y="1267.0" width="25.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.5" y="1278.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 2.15%)</title><rect x="295.5" y="1251.0" width="25.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="298.5" y="1262.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (4 samples, 2.15%)</title><rect x="295.5" y="1235.0" width="25.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.5" y="1246.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.54%)</title><rect x="295.5" y="1219.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.5" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.54%)</title><rect x="295.5" y="1203.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="298.5" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.54%)</title><rect x="295.5" y="1187.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="298.5" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.54%)</title><rect x="295.5" y="1171.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.54%)</title><rect x="295.5" y="1155.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.5" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 1.61%)</title><rect x="301.8" y="1219.0" width="19.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="304.8" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 1.08%)</title><rect x="308.2" y="1203.0" width="12.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="311.2" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 1.08%)</title><rect x="308.2" y="1187.0" width="12.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="311.2" y="1198.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.54%)</title><rect x="314.5" y="1171.0" width="6.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="317.5" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (8 samples, 4.30%)</title><rect x="320.9" y="1267.0" width="50.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.9" y="1278.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (8 samples, 4.30%)</title><rect x="320.9" y="1251.0" width="50.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="323.9" y="1262.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (1 samples, 0.54%)</title><rect x="327.2" y="1235.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="330.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.54%)</title><rect x="327.2" y="1219.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="330.2" y="1230.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 3.23%)</title><rect x="333.5" y="1235.0" width="38.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="336.5" y="1246.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 3.23%)</title><rect x="333.5" y="1219.0" width="38.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="336.5" y="1230.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.54%)</title><rect x="333.5" y="1203.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="336.5" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.54%)</title><rect x="333.5" y="1187.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="336.5" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.54%)</title><rect x="333.5" y="1171.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="336.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.54%)</title><rect x="333.5" y="1155.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="336.5" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.54%)</title><rect x="333.5" y="1139.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="336.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.54%)</title><rect x="339.9" y="1203.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="342.9" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.54%)</title><rect x="339.9" y="1187.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="342.9" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.54%)</title><rect x="339.9" y="1171.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="342.9" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.54%)</title><rect x="339.9" y="1155.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="342.9" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 2.15%)</title><rect x="346.2" y="1203.0" width="25.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="349.2" y="1214.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.61%)</title><rect x="352.6" y="1187.0" width="19.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="355.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.54%)</title><rect x="352.6" y="1171.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="355.6" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.08%)</title><rect x="358.9" y="1171.0" width="12.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="361.9" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.54%)</title><rect x="365.3" y="1155.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="368.3" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (4 samples, 2.15%)</title><rect x="371.6" y="1267.0" width="25.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="374.6" y="1278.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (3 samples, 1.61%)</title><rect x="378.0" y="1251.0" width="19.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="381.0" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/340408986.process (1 samples, 0.54%)</title><rect x="378.0" y="1235.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="381.0" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.54%)</title><rect x="378.0" y="1219.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="381.0" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453523494.linkToTargetMethod (1 samples, 0.54%)</title><rect x="384.3" y="1235.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="387.3" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (1 samples, 0.54%)</title><rect x="384.3" y="1219.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="387.3" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/493170678.get$Lambda (1 samples, 0.54%)</title><rect x="384.3" y="1203.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="387.3" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/493170678.&lt;init&gt; (1 samples, 0.54%)</title><rect x="384.3" y="1187.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="387.3" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.54%)</title><rect x="390.6" y="1235.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="393.6" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.54%)</title><rect x="390.6" y="1219.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="393.6" y="1230.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.54%)</title><rect x="390.6" y="1203.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="393.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.08%)</title><rect x="397.0" y="1267.0" width="12.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="400.0" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.08%)</title><rect x="397.0" y="1251.0" width="12.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="400.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.54%)</title><rect x="403.3" y="1235.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="406.3" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$272/1892020419.accept (1 samples, 0.54%)</title><rect x="403.3" y="1219.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="406.3" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.54%)</title><rect x="403.3" y="1203.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="406.3" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.54%)</title><rect x="403.3" y="1187.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="406.3" y="1198.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.54%)</title><rect x="403.3" y="1171.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="406.3" y="1182.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.54%)</title><rect x="403.3" y="1155.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="406.3" y="1166.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.54%)</title><rect x="409.7" y="1283.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="412.7" y="1294.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.54%)</title><rect x="409.7" y="1267.0" width="6.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="412.7" y="1278.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.54%)</title><rect x="416.0" y="1347.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="419.0" y="1358.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.54%)</title><rect x="416.0" y="1331.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="419.0" y="1342.0"></text>
</g>
<g>
<title>BarrierSet::obj_equals(oopDesc*, oopDesc*) (1 samples, 0.54%)</title><rect x="416.0" y="1315.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="419.0" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.54%)</title><rect x="422.4" y="1347.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="425.4" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.54%)</title><rect x="422.4" y="1331.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="425.4" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.54%)</title><rect x="422.4" y="1315.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="425.4" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (13 samples, 6.99%)</title><rect x="428.7" y="1347.0" width="82.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="431.7" y="1358.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (13 samples, 6.99%)</title><rect x="428.7" y="1331.0" width="82.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="431.7" y="1342.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (10 samples, 5.38%)</title><rect x="447.7" y="1315.0" width="63.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="450.7" y="1326.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.54%)</title><rect x="460.4" y="1299.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="463.4" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.54%)</title><rect x="460.4" y="1283.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="463.4" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.54%)</title><rect x="460.4" y="1267.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="463.4" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 3.76%)</title><rect x="466.8" y="1299.0" width="44.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="469.8" y="1310.0">java..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (7 samples, 3.76%)</title><rect x="466.8" y="1283.0" width="44.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="469.8" y="1294.0">sun/..</text>
</g>
<g>
<title>Unsafe_Park (7 samples, 3.76%)</title><rect x="466.8" y="1267.0" width="44.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="469.8" y="1278.0">Unsa..</text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 1.08%)</title><rect x="466.8" y="1251.0" width="12.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="469.8" y="1262.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 1.08%)</title><rect x="466.8" y="1235.0" width="12.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="469.8" y="1246.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 1.08%)</title><rect x="466.8" y="1219.0" width="12.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="469.8" y="1230.0"></text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 2.15%)</title><rect x="479.5" y="1251.0" width="25.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="482.5" y="1262.0">_..</text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.54%)</title><rect x="504.8" y="1251.0" width="6.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="507.8" y="1262.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.54%)</title><rect x="511.2" y="1395.0" width="6.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="514.2" y="1406.0"></text>
</g>
<g>
<title>edge_order(CFGEdge**, CFGEdge**) (1 samples, 0.54%)</title><rect x="511.2" y="1379.0" width="6.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="514.2" y="1390.0"></text>
</g>
<g>
<title>start_thread (106 samples, 56.99%)</title><rect x="517.5" y="1395.0" width="672.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="520.5" y="1406.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (106 samples, 56.99%)</title><rect x="517.5" y="1379.0" width="672.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="520.5" y="1390.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 7.53%)</title><rect x="517.5" y="1363.0" width="88.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="520.5" y="1374.0">GangWorker..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.54%)</title><rect x="517.5" y="1347.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="520.5" y="1358.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.54%)</title><rect x="517.5" y="1331.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="520.5" y="1342.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.54%)</title><rect x="517.5" y="1315.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="520.5" y="1326.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (13 samples, 6.99%)</title><rect x="523.9" y="1347.0" width="82.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="526.9" y="1358.0">G1ParTask..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 5.91%)</title><rect x="523.9" y="1331.0" width="69.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="526.9" y="1342.0">G1ParEv..</text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.54%)</title><rect x="523.9" y="1315.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="526.9" y="1326.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 2.69%)</title><rect x="530.2" y="1315.0" width="31.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="533.2" y="1326.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.08%)</title><rect x="549.2" y="1299.0" width="12.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="552.2" y="1310.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (4 samples, 2.15%)</title><rect x="561.9" y="1315.0" width="25.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="564.9" y="1326.0">G..</text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.54%)</title><rect x="581.0" y="1299.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="584.0" y="1310.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.54%)</title><rect x="587.3" y="1315.0" width="6.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="590.3" y="1326.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.54%)</title><rect x="593.7" y="1331.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="596.7" y="1342.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.54%)</title><rect x="593.7" y="1315.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="596.7" y="1326.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.54%)</title><rect x="593.7" y="1299.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="596.7" y="1310.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.54%)</title><rect x="593.7" y="1283.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="596.7" y="1294.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.54%)</title><rect x="593.7" y="1267.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="596.7" y="1278.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.54%)</title><rect x="593.7" y="1251.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="596.7" y="1262.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.54%)</title><rect x="600.0" y="1331.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="603.0" y="1342.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.54%)</title><rect x="600.0" y="1315.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="603.0" y="1326.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.54%)</title><rect x="600.0" y="1299.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="603.0" y="1310.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.54%)</title><rect x="600.0" y="1283.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="603.0" y="1294.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.54%)</title><rect x="600.0" y="1267.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="603.0" y="1278.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.54%)</title><rect x="600.0" y="1251.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="603.0" y="1262.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.54%)</title><rect x="600.0" y="1235.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="603.0" y="1246.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.54%)</title><rect x="600.0" y="1219.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="603.0" y="1230.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.54%)</title><rect x="600.0" y="1203.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="603.0" y="1214.0"></text>
</g>
<g>
<title>G1CodeRootSet::add(nmethod*) (1 samples, 0.54%)</title><rect x="600.0" y="1187.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="603.0" y="1198.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (92 samples, 49.46%)</title><rect x="606.3" y="1363.0" width="583.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="609.3" y="1374.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (92 samples, 49.46%)</title><rect x="606.3" y="1347.0" width="583.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="609.3" y="1358.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (91 samples, 48.92%)</title><rect x="606.3" y="1331.0" width="577.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="609.3" y="1342.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (88 samples, 47.31%)</title><rect x="606.3" y="1315.0" width="558.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="609.3" y="1326.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (88 samples, 47.31%)</title><rect x="606.3" y="1299.0" width="558.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="609.3" y="1310.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (39 samples, 20.97%)</title><rect x="606.3" y="1283.0" width="247.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="609.3" y="1294.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.54%)</title><rect x="606.3" y="1267.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="609.3" y="1278.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.54%)</title><rect x="606.3" y="1251.0" width="6.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="609.3" y="1262.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 2.15%)</title><rect x="612.7" y="1267.0" width="25.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="615.7" y="1278.0">M..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 2.15%)</title><rect x="612.7" y="1251.0" width="25.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="615.7" y="1262.0">M..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 1.61%)</title><rect x="619.0" y="1235.0" width="19.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="622.0" y="1246.0"></text>
</g>
<g>
<title>MachNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.54%)</title><rect x="619.0" y="1219.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="622.0" y="1230.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 1.08%)</title><rect x="625.4" y="1219.0" width="12.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="628.4" y="1230.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.54%)</title><rect x="625.4" y="1203.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="628.4" y="1214.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.54%)</title><rect x="631.7" y="1203.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="634.7" y="1214.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.54%)</title><rect x="631.7" y="1187.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="634.7" y="1198.0"></text>
</g>
<g>
<title>State::_sub_Op_ConI(Node const*) (1 samples, 0.54%)</title><rect x="631.7" y="1171.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="634.7" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.08%)</title><rect x="638.1" y="1267.0" width="12.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="641.1" y="1278.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.08%)</title><rect x="638.1" y="1251.0" width="12.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="641.1" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 1.08%)</title><rect x="638.1" y="1235.0" width="12.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="641.1" y="1246.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.54%)</title><rect x="644.4" y="1219.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="647.4" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (32 samples, 17.20%)</title><rect x="650.8" y="1267.0" width="203.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="653.8" y="1278.0">PhaseChaitin::Register_Allo..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.54%)</title><rect x="650.8" y="1251.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="653.8" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.54%)</title><rect x="657.1" y="1251.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="660.1" y="1262.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.54%)</title><rect x="657.1" y="1235.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="660.1" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 1.08%)</title><rect x="663.4" y="1251.0" width="12.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="666.4" y="1262.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.54%)</title><rect x="663.4" y="1235.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="666.4" y="1246.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.54%)</title><rect x="669.8" y="1235.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="672.8" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 2.15%)</title><rect x="676.1" y="1251.0" width="25.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="679.1" y="1262.0">P..</text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.54%)</title><rect x="695.2" y="1235.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="698.2" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (12 samples, 6.45%)</title><rect x="701.5" y="1251.0" width="76.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="704.5" y="1262.0">PhaseCha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.54%)</title><rect x="726.9" y="1235.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="729.9" y="1246.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.54%)</title><rect x="733.2" y="1235.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="736.2" y="1246.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.54%)</title><rect x="733.2" y="1219.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="736.2" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 2.69%)</title><rect x="739.6" y="1235.0" width="31.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="742.6" y="1246.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 1.61%)</title><rect x="752.3" y="1219.0" width="19.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="755.3" y="1230.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.54%)</title><rect x="771.3" y="1235.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="774.3" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.54%)</title><rect x="777.6" y="1251.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="780.6" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.54%)</title><rect x="777.6" y="1235.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="780.6" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.54%)</title><rect x="777.6" y="1219.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="780.6" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (1 samples, 0.54%)</title><rect x="784.0" y="1251.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="787.0" y="1262.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.54%)</title><rect x="784.0" y="1235.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="787.0" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.54%)</title><rect x="790.3" y="1251.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="793.3" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.54%)</title><rect x="790.3" y="1235.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="793.3" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (2 samples, 1.08%)</title><rect x="796.7" y="1251.0" width="12.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="799.7" y="1262.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.54%)</title><rect x="809.4" y="1251.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="812.4" y="1262.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.54%)</title><rect x="809.4" y="1235.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="812.4" y="1246.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.54%)</title><rect x="809.4" y="1219.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="812.4" y="1230.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.54%)</title><rect x="809.4" y="1203.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="812.4" y="1214.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 3.23%)</title><rect x="815.7" y="1251.0" width="38.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="818.7" y="1262.0">Pha..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 2.15%)</title><rect x="828.4" y="1235.0" width="25.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="831.4" y="1246.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.54%)</title><rect x="847.4" y="1219.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="850.4" y="1230.0"></text>
</g>
<g>
<title>Compile::Optimize() (38 samples, 20.43%)</title><rect x="853.8" y="1283.0" width="241.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="856.8" y="1294.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 1.08%)</title><rect x="853.8" y="1267.0" width="12.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="856.8" y="1278.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.08%)</title><rect x="853.8" y="1251.0" width="12.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="856.8" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.08%)</title><rect x="853.8" y="1235.0" width="12.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="856.8" y="1246.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 1.08%)</title><rect x="853.8" y="1219.0" width="12.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="856.8" y="1230.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 1.08%)</title><rect x="853.8" y="1203.0" width="12.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="856.8" y="1214.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 1.08%)</title><rect x="853.8" y="1187.0" width="12.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="856.8" y="1198.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 1.08%)</title><rect x="853.8" y="1171.0" width="12.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="856.8" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 2.15%)</title><rect x="866.5" y="1267.0" width="25.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="869.5" y="1278.0">C..</text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 2.15%)</title><rect x="866.5" y="1251.0" width="25.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="869.5" y="1262.0">C..</text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.54%)</title><rect x="866.5" y="1235.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="869.5" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.54%)</title><rect x="866.5" y="1219.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="869.5" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.54%)</title><rect x="866.5" y="1203.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="869.5" y="1214.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.54%)</title><rect x="866.5" y="1187.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="869.5" y="1198.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.54%)</title><rect x="866.5" y="1171.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="869.5" y="1182.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.54%)</title><rect x="866.5" y="1155.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="869.5" y="1166.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.54%)</title><rect x="866.5" y="1139.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="869.5" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="872.8" y="1235.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="875.8" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 1.08%)</title><rect x="879.1" y="1235.0" width="12.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="882.1" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="1219.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="882.1" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="1203.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="882.1" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="1187.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="882.1" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="1171.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="882.1" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="1155.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="882.1" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="1139.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="882.1" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="1123.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="882.1" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="1107.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="882.1" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="1091.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="882.1" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="1075.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="882.1" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="1059.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="882.1" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="1043.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="882.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="1027.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="882.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="1011.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="882.1" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="995.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="882.1" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="979.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="882.1" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="963.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="882.1" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="947.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="882.1" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="931.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="882.1" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="915.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="882.1" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="899.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="882.1" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="883.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="882.1" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="867.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="882.1" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="851.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="882.1" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="835.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="882.1" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="819.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="882.1" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="803.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="882.1" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="787.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="882.1" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="771.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="882.1" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="755.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="882.1" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="739.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="882.1" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="723.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="882.1" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="707.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="882.1" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="691.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="882.1" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="675.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="882.1" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="659.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="882.1" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="643.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="882.1" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="627.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="882.1" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="611.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="882.1" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="595.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="882.1" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="579.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="882.1" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="563.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="882.1" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="547.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="882.1" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="531.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="882.1" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="515.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="882.1" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="499.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="882.1" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="483.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="882.1" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="467.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="882.1" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="451.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="882.1" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="435.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="882.1" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="419.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="882.1" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="403.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="882.1" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="387.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="882.1" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="371.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="882.1" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="355.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="882.1" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="339.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="882.1" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="323.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="882.1" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="307.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="882.1" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="291.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="882.1" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="275.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="882.1" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="259.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="882.1" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="243.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="882.1" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="227.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="882.1" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="211.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="882.1" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="195.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="882.1" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="179.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="882.1" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="163.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="882.1" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="147.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="882.1" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="131.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="882.1" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="115.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="882.1" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="99.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="882.1" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="83.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="882.1" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="879.1" y="67.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="882.1" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.54%)</title><rect x="879.1" y="51.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="882.1" y="62.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.54%)</title><rect x="879.1" y="35.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="882.1" y="46.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.54%)</title><rect x="885.5" y="1219.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="888.5" y="1230.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.54%)</title><rect x="885.5" y="1203.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="888.5" y="1214.0"></text>
</g>
<g>
<title>ConNode::hash() const (1 samples, 0.54%)</title><rect x="885.5" y="1187.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="888.5" y="1198.0"></text>
</g>
<g>
<title>MergeMemNode::Opcode() const (1 samples, 0.54%)</title><rect x="891.8" y="1267.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="894.8" y="1278.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 1.08%)</title><rect x="898.2" y="1267.0" width="12.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="901.2" y="1278.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 1.08%)</title><rect x="898.2" y="1251.0" width="12.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="901.2" y="1262.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.54%)</title><rect x="904.5" y="1235.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="907.5" y="1246.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.54%)</title><rect x="904.5" y="1219.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="907.5" y="1230.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.54%)</title><rect x="904.5" y="1203.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="907.5" y="1214.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.54%)</title><rect x="904.5" y="1187.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="907.5" y="1198.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.54%)</title><rect x="904.5" y="1171.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="907.5" y="1182.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.54%)</title><rect x="904.5" y="1155.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="907.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (23 samples, 12.37%)</title><rect x="910.9" y="1267.0" width="145.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="913.9" y="1278.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.08%)</title><rect x="910.9" y="1251.0" width="12.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="913.9" y="1262.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.54%)</title><rect x="917.2" y="1235.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="920.2" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.54%)</title><rect x="923.5" y="1251.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="926.5" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (14 samples, 7.53%)</title><rect x="929.9" y="1251.0" width="88.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="932.9" y="1262.0">PhaseIdeal..</text>
</g>
<g>
<title>DecodeNNode::Opcode() const (1 samples, 0.54%)</title><rect x="942.6" y="1235.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="945.6" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (11 samples, 5.91%)</title><rect x="948.9" y="1235.0" width="69.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="951.9" y="1246.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (11 samples, 5.91%)</title><rect x="948.9" y="1219.0" width="69.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="951.9" y="1230.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (11 samples, 5.91%)</title><rect x="948.9" y="1203.0" width="69.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="951.9" y="1214.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.194] (1 samples, 0.54%)</title><rect x="1012.4" y="1187.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1015.4" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.54%)</title><rect x="1018.7" y="1251.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1021.7" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 1.61%)</title><rect x="1025.1" y="1251.0" width="19.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1028.1" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 1.08%)</title><rect x="1031.4" y="1235.0" width="12.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1034.4" y="1246.0"></text>
</g>
<g>
<title>LoadLNode::Opcode() const (1 samples, 0.54%)</title><rect x="1031.4" y="1219.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1034.4" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.54%)</title><rect x="1037.7" y="1219.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1040.7" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.54%)</title><rect x="1037.7" y="1203.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1040.7" y="1214.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.54%)</title><rect x="1037.7" y="1187.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1040.7" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.08%)</title><rect x="1044.1" y="1251.0" width="12.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1047.1" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.08%)</title><rect x="1044.1" y="1235.0" width="12.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1047.1" y="1246.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 1.08%)</title><rect x="1044.1" y="1219.0" width="12.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1047.1" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.54%)</title><rect x="1050.4" y="1203.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1053.4" y="1214.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.54%)</title><rect x="1050.4" y="1187.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1053.4" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 2.15%)</title><rect x="1056.8" y="1267.0" width="25.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1059.8" y="1278.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 2.15%)</title><rect x="1056.8" y="1251.0" width="25.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1059.8" y="1262.0">P..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 1.61%)</title><rect x="1056.8" y="1235.0" width="19.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1059.8" y="1246.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (3 samples, 1.61%)</title><rect x="1056.8" y="1219.0" width="19.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1059.8" y="1230.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (3 samples, 1.61%)</title><rect x="1056.8" y="1203.0" width="19.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1059.8" y="1214.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (3 samples, 1.61%)</title><rect x="1056.8" y="1187.0" width="19.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1059.8" y="1198.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.54%)</title><rect x="1075.8" y="1235.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1078.8" y="1246.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.54%)</title><rect x="1075.8" y="1219.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1078.8" y="1230.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.54%)</title><rect x="1082.2" y="1267.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1085.2" y="1278.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.54%)</title><rect x="1082.2" y="1251.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1085.2" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::register_new_node_with_optimizer(Node*, Node*) (1 samples, 0.54%)</title><rect x="1082.2" y="1235.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1085.2" y="1246.0"></text>
</g>
<g>
<title>ProjNode::bottom_type() const (1 samples, 0.54%)</title><rect x="1082.2" y="1219.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1085.2" y="1230.0"></text>
</g>
<g>
<title>SCMemProjNode::bottom_type() const (1 samples, 0.54%)</title><rect x="1088.5" y="1267.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1091.5" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 5.38%)</title><rect x="1094.8" y="1283.0" width="63.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1097.8" y="1294.0">ParseGe..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 5.38%)</title><rect x="1094.8" y="1267.0" width="63.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.8" y="1278.0">Parse::..</text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 5.38%)</title><rect x="1094.8" y="1251.0" width="63.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.8" y="1262.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 5.38%)</title><rect x="1094.8" y="1235.0" width="63.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1097.8" y="1246.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 5.38%)</title><rect x="1094.8" y="1219.0" width="63.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1097.8" y="1230.0">Parse::..</text>
</g>
<g>
<title>Parse::array_store(BasicType) (1 samples, 0.54%)</title><rect x="1094.8" y="1203.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1097.8" y="1214.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.54%)</title><rect x="1094.8" y="1187.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1097.8" y="1198.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.54%)</title><rect x="1094.8" y="1171.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1097.8" y="1182.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.54%)</title><rect x="1094.8" y="1155.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.8" y="1166.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.54%)</title><rect x="1094.8" y="1139.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1097.8" y="1150.0"></text>
</g>
<g>
<title>TypeAryPtr::xdual() const (1 samples, 0.54%)</title><rect x="1094.8" y="1123.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.8" y="1134.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.54%)</title><rect x="1094.8" y="1107.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1097.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 4.30%)</title><rect x="1101.2" y="1203.0" width="50.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.2" y="1214.0">Parse..</text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1101.2" y="1187.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1104.2" y="1198.0"></text>
</g>
<g>
<title>ciMethod::is_boxing_method() const (1 samples, 0.54%)</title><rect x="1101.2" y="1171.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1104.2" y="1182.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_box_klass() const (1 samples, 0.54%)</title><rect x="1101.2" y="1155.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1104.2" y="1166.0"></text>
</g>
<g>
<title>SystemDictionary::box_klass_type(Klass*) (1 samples, 0.54%)</title><rect x="1101.2" y="1139.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.2" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 3.23%)</title><rect x="1107.5" y="1187.0" width="38.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.5" y="1198.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 3.23%)</title><rect x="1107.5" y="1171.0" width="38.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.5" y="1182.0">Par..</text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.54%)</title><rect x="1107.5" y="1155.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.69%)</title><rect x="1113.9" y="1155.0" width="31.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1116.9" y="1166.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.69%)</title><rect x="1113.9" y="1139.0" width="31.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.9" y="1150.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.69%)</title><rect x="1113.9" y="1123.0" width="31.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.9" y="1134.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.69%)</title><rect x="1113.9" y="1107.0" width="31.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.9" y="1118.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.69%)</title><rect x="1113.9" y="1091.0" width="31.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1116.9" y="1102.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.69%)</title><rect x="1113.9" y="1075.0" width="31.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.9" y="1086.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.69%)</title><rect x="1113.9" y="1059.0" width="31.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1116.9" y="1070.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.69%)</title><rect x="1113.9" y="1043.0" width="31.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.9" y="1054.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.69%)</title><rect x="1113.9" y="1027.0" width="31.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.9" y="1038.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.15%)</title><rect x="1113.9" y="1011.0" width="25.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.9" y="1022.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.15%)</title><rect x="1113.9" y="995.0" width="25.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.9" y="1006.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.15%)</title><rect x="1113.9" y="979.0" width="25.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.9" y="990.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.15%)</title><rect x="1113.9" y="963.0" width="25.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.9" y="974.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.15%)</title><rect x="1113.9" y="947.0" width="25.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1116.9" y="958.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.15%)</title><rect x="1113.9" y="931.0" width="25.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.9" y="942.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.15%)</title><rect x="1113.9" y="915.0" width="25.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1116.9" y="926.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.54%)</title><rect x="1113.9" y="899.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.9" y="910.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.54%)</title><rect x="1113.9" y="883.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.9" y="894.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.54%)</title><rect x="1113.9" y="867.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.9" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.54%)</title><rect x="1113.9" y="851.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.9" y="862.0"></text>
</g>
<g>
<title>ciType::make(BasicType) (1 samples, 0.54%)</title><rect x="1113.9" y="835.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.9" y="846.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.54%)</title><rect x="1120.2" y="899.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.2" y="910.0"></text>
</g>
<g>
<title>TypeOopPtr::would_improve_type(ciKlass*, int) const (1 samples, 0.54%)</title><rect x="1120.2" y="883.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1123.2" y="894.0"></text>
</g>
<g>
<title>TypeOopPtr::speculative_type() const (1 samples, 0.54%)</title><rect x="1120.2" y="867.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.2" y="878.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.54%)</title><rect x="1120.2" y="851.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1123.2" y="862.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.54%)</title><rect x="1120.2" y="835.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1123.2" y="846.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.54%)</title><rect x="1120.2" y="819.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1123.2" y="830.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.54%)</title><rect x="1120.2" y="803.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.2" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.08%)</title><rect x="1126.6" y="899.0" width="12.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.6" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.08%)</title><rect x="1126.6" y="883.0" width="12.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.08%)</title><rect x="1126.6" y="867.0" width="12.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.08%)</title><rect x="1126.6" y="851.0" width="12.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.08%)</title><rect x="1126.6" y="835.0" width="12.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.08%)</title><rect x="1126.6" y="819.0" width="12.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.6" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.08%)</title><rect x="1126.6" y="803.0" width="12.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.6" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.08%)</title><rect x="1126.6" y="787.0" width="12.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.08%)</title><rect x="1126.6" y="771.0" width="12.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.08%)</title><rect x="1126.6" y="755.0" width="12.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.08%)</title><rect x="1126.6" y="739.0" width="12.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1129.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.08%)</title><rect x="1126.6" y="723.0" width="12.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.6" y="734.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.54%)</title><rect x="1126.6" y="707.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.6" y="718.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.54%)</title><rect x="1126.6" y="691.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.6" y="702.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.54%)</title><rect x="1126.6" y="675.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.6" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.54%)</title><rect x="1126.6" y="659.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.6" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.54%)</title><rect x="1126.6" y="643.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.6" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.54%)</title><rect x="1126.6" y="627.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.6" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.54%)</title><rect x="1126.6" y="611.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.6" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.54%)</title><rect x="1126.6" y="595.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.6" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1132.9" y="707.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1135.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1132.9" y="691.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1135.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1132.9" y="675.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1132.9" y="659.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1132.9" y="643.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1132.9" y="627.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.9" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1132.9" y="611.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1135.9" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1132.9" y="595.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1135.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1132.9" y="579.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1132.9" y="563.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1132.9" y="547.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1132.9" y="531.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1132.9" y="515.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1132.9" y="499.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1132.9" y="483.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1132.9" y="467.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1132.9" y="451.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1132.9" y="435.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1132.9" y="419.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1132.9" y="403.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1132.9" y="387.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1132.9" y="371.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1132.9" y="355.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.9" y="366.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.54%)</title><rect x="1132.9" y="339.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.9" y="350.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.54%)</title><rect x="1132.9" y="323.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.9" y="334.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.54%)</title><rect x="1132.9" y="307.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.9" y="318.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.54%)</title><rect x="1132.9" y="291.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.54%)</title><rect x="1139.2" y="1011.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.2" y="1022.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.54%)</title><rect x="1139.2" y="995.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.2" y="1006.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.54%)</title><rect x="1139.2" y="979.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.2" y="990.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.54%)</title><rect x="1139.2" y="963.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.2" y="974.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.54%)</title><rect x="1139.2" y="947.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.2" y="958.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1145.6" y="1187.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.6" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1145.6" y="1171.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.6" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1145.6" y="1155.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.6" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1145.6" y="1139.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.6" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1145.6" y="1123.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.6" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1145.6" y="1107.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.6" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1145.6" y="1091.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.6" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1145.6" y="1075.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.6" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1145.6" y="1059.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.6" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1145.6" y="1043.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.6" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1145.6" y="1027.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1145.6" y="1011.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1145.6" y="995.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.6" y="1006.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.54%)</title><rect x="1145.6" y="979.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.6" y="990.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.54%)</title><rect x="1145.6" y="963.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.6" y="974.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.54%)</title><rect x="1145.6" y="947.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.54%)</title><rect x="1151.9" y="1203.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.9" y="1214.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.54%)</title><rect x="1151.9" y="1187.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.9" y="1198.0"></text>
</g>
<g>
<title>GraphKit::null_check_oop(Node*, Node**, bool, bool) (1 samples, 0.54%)</title><rect x="1151.9" y="1171.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.9" y="1182.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.54%)</title><rect x="1151.9" y="1155.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.9" y="1166.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.54%)</title><rect x="1151.9" y="1139.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.9" y="1150.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.54%)</title><rect x="1151.9" y="1123.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.9" y="1134.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.54%)</title><rect x="1151.9" y="1107.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.9" y="1118.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.54%)</title><rect x="1158.3" y="1283.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.3" y="1294.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.54%)</title><rect x="1158.3" y="1267.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.3" y="1278.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.61%)</title><rect x="1164.6" y="1315.0" width="19.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.6" y="1326.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.61%)</title><rect x="1164.6" y="1299.0" width="19.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.6" y="1310.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.61%)</title><rect x="1164.6" y="1283.0" width="19.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.6" y="1294.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.61%)</title><rect x="1164.6" y="1267.0" width="19.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.6" y="1278.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.54%)</title><rect x="1164.6" y="1251.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.6" y="1262.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.54%)</title><rect x="1164.6" y="1235.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.6" y="1246.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.54%)</title><rect x="1164.6" y="1219.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.6" y="1230.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.54%)</title><rect x="1164.6" y="1203.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.6" y="1214.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.54%)</title><rect x="1164.6" y="1187.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.6" y="1198.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.54%)</title><rect x="1164.6" y="1171.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.6" y="1182.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (1 samples, 0.54%)</title><rect x="1164.6" y="1155.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.6" y="1166.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.54%)</title><rect x="1171.0" y="1251.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.0" y="1262.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.54%)</title><rect x="1171.0" y="1235.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.0" y="1246.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.54%)</title><rect x="1177.3" y="1251.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.3" y="1262.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.54%)</title><rect x="1177.3" y="1235.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.3" y="1246.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.54%)</title><rect x="1177.3" y="1219.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.3" y="1230.0"></text>
</g>
<g>
<title>LIRGenerator::do_NewInstance(NewInstance*) (1 samples, 0.54%)</title><rect x="1177.3" y="1203.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.3" y="1214.0"></text>
</g>
<g>
<title>LIRGenerator::state_for(Instruction*, ValueStack*, bool) (1 samples, 0.54%)</title><rect x="1177.3" y="1187.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.3" y="1198.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.54%)</title><rect x="1177.3" y="1171.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.3" y="1182.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.54%)</title><rect x="1177.3" y="1155.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.3" y="1166.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.54%)</title><rect x="1183.7" y="1331.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.7" y="1342.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::select_task(CompileQueue*) (1 samples, 0.54%)</title><rect x="1183.7" y="1315.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.7" y="1326.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.54%)</title><rect x="1183.7" y="1299.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.7" y="1310.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.54%)</title><rect x="1183.7" y="1283.0" width="6.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1186.7" y="1294.0"></text>
</g>
</g>
</svg>
