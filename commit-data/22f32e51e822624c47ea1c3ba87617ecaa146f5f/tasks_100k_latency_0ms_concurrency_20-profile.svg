<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="917"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="917"> </text>
<g id="frames">
<g>
<title>all (193 samples, 100.00%)</title><rect x="10.0" y="883.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="894.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.52%)</title><rect x="10.0" y="867.0" width="6.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>malloc_consolidate (1 samples, 0.52%)</title><rect x="10.0" y="851.0" width="6.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (34 samples, 17.62%)</title><rect x="16.1" y="867.0" width="207.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.1" y="878.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (32 samples, 16.58%)</title><rect x="22.2" y="851.0" width="195.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.2" y="862.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (17 samples, 8.81%)</title><rect x="22.2" y="835.0" width="104.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="25.2" y="846.0">java/lang/It..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1287423904.accept (16 samples, 8.29%)</title><rect x="22.2" y="819.0" width="97.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.2" y="830.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (16 samples, 8.29%)</title><rect x="22.2" y="803.0" width="97.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.2" y="814.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (12 samples, 6.22%)</title><rect x="22.2" y="787.0" width="73.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.2" y="798.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (12 samples, 6.22%)</title><rect x="22.2" y="771.0" width="73.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="25.2" y="782.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (12 samples, 6.22%)</title><rect x="22.2" y="755.0" width="73.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.2" y="766.0">com/line..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (12 samples, 6.22%)</title><rect x="22.2" y="739.0" width="73.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.2" y="750.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (12 samples, 6.22%)</title><rect x="22.2" y="723.0" width="73.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.2" y="734.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (12 samples, 6.22%)</title><rect x="22.2" y="707.0" width="73.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.2" y="718.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (7 samples, 3.63%)</title><rect x="22.2" y="691.0" width="42.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.2" y="702.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.52%)</title><rect x="22.2" y="675.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.52%)</title><rect x="22.2" y="659.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.52%)</title><rect x="22.2" y="643.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="25.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.52%)</title><rect x="28.3" y="675.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.52%)</title><rect x="28.3" y="659.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.52%)</title><rect x="28.3" y="643.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.3" y="654.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.52%)</title><rect x="28.3" y="627.0" width="6.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="31.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 2.59%)</title><rect x="34.5" y="675.0" width="30.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.5" y="686.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 2.59%)</title><rect x="34.5" y="659.0" width="30.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="37.5" y="670.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 2.59%)</title><rect x="34.5" y="643.0" width="30.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.5" y="654.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 2.59%)</title><rect x="34.5" y="627.0" width="30.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="37.5" y="638.0">ja..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (5 samples, 2.59%)</title><rect x="34.5" y="611.0" width="30.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="37.5" y="622.0">su..</text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 2.59%)</title><rect x="34.5" y="595.0" width="30.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="37.5" y="606.0">Un..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.52%)</title><rect x="34.5" y="579.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="37.5" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 2.07%)</title><rect x="40.6" y="579.0" width="24.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="43.6" y="590.0">_..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 2.59%)</title><rect x="65.0" y="691.0" width="30.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="68.0" y="702.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 2.59%)</title><rect x="65.0" y="675.0" width="30.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="68.0" y="686.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 2.59%)</title><rect x="65.0" y="659.0" width="30.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="68.0" y="670.0">ja..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.52%)</title><rect x="89.5" y="643.0" width="6.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="92.5" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 2.07%)</title><rect x="95.6" y="787.0" width="24.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.6" y="798.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 2.07%)</title><rect x="95.6" y="771.0" width="24.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.6" y="782.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.52%)</title><rect x="101.7" y="755.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="104.7" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.52%)</title><rect x="101.7" y="739.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="104.7" y="750.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.52%)</title><rect x="107.8" y="755.0" width="6.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="110.8" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.52%)</title><rect x="113.9" y="755.0" width="6.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="116.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.52%)</title><rect x="120.1" y="819.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="123.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.52%)</title><rect x="120.1" y="803.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="123.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.52%)</title><rect x="120.1" y="787.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="123.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.52%)</title><rect x="120.1" y="771.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="123.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.52%)</title><rect x="120.1" y="755.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="123.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.52%)</title><rect x="120.1" y="739.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="123.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 7.77%)</title><rect x="126.2" y="835.0" width="91.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="129.2" y="846.0">org/apache/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 7.77%)</title><rect x="126.2" y="819.0" width="91.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="129.2" y="830.0">org/apache/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 4.15%)</title><rect x="126.2" y="803.0" width="48.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="129.2" y="814.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (8 samples, 4.15%)</title><rect x="126.2" y="787.0" width="48.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="129.2" y="798.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (8 samples, 4.15%)</title><rect x="126.2" y="771.0" width="48.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="129.2" y="782.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (7 samples, 3.63%)</title><rect x="126.2" y="755.0" width="42.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="129.2" y="766.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (7 samples, 3.63%)</title><rect x="126.2" y="739.0" width="42.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="129.2" y="750.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.55%)</title><rect x="126.2" y="723.0" width="18.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="129.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.52%)</title><rect x="132.3" y="707.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="135.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.52%)</title><rect x="132.3" y="691.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="135.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.52%)</title><rect x="132.3" y="675.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="135.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.52%)</title><rect x="132.3" y="659.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="135.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.52%)</title><rect x="132.3" y="643.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="135.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.52%)</title><rect x="132.3" y="627.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="135.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.52%)</title><rect x="132.3" y="611.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="135.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.52%)</title><rect x="138.4" y="707.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="141.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.uncompressedIterator (1 samples, 0.52%)</title><rect x="138.4" y="691.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="141.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.&lt;init&gt; (1 samples, 0.52%)</title><rect x="138.4" y="675.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="141.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.&lt;init&gt; (1 samples, 0.52%)</title><rect x="138.4" y="659.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="141.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.access$000 (1 samples, 0.52%)</title><rect x="138.4" y="643.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="141.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (4 samples, 2.07%)</title><rect x="144.5" y="723.0" width="24.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="147.5" y="734.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (4 samples, 2.07%)</title><rect x="144.5" y="707.0" width="24.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="147.5" y="718.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (3 samples, 1.55%)</title><rect x="144.5" y="691.0" width="18.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="147.5" y="702.0"></text>
</g>
<g>
<title>java/util/Optional.of (3 samples, 1.55%)</title><rect x="144.5" y="675.0" width="18.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="147.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.52%)</title><rect x="162.8" y="691.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="165.8" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.52%)</title><rect x="162.8" y="675.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="165.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.52%)</title><rect x="169.0" y="755.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="172.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.contains (1 samples, 0.52%)</title><rect x="169.0" y="739.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="172.0" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.52%)</title><rect x="169.0" y="723.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="172.0" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.52%)</title><rect x="169.0" y="707.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="172.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 2.07%)</title><rect x="175.1" y="803.0" width="24.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="178.1" y="814.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 2.07%)</title><rect x="175.1" y="787.0" width="24.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="178.1" y="798.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 1.04%)</title><rect x="175.1" y="771.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="178.1" y="782.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.52%)</title><rect x="175.1" y="755.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="178.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/883707676.accept (1 samples, 0.52%)</title><rect x="175.1" y="739.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="178.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.52%)</title><rect x="175.1" y="723.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="178.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.52%)</title><rect x="175.1" y="707.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="178.1" y="718.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.52%)</title><rect x="175.1" y="691.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="178.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$211/715468305.apply (1 samples, 0.52%)</title><rect x="175.1" y="675.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="178.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.52%)</title><rect x="175.1" y="659.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="178.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.52%)</title><rect x="181.2" y="755.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="184.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.52%)</title><rect x="181.2" y="739.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="184.2" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.52%)</title><rect x="181.2" y="723.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="184.2" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.52%)</title><rect x="181.2" y="707.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="184.2" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.52%)</title><rect x="181.2" y="691.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="184.2" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.52%)</title><rect x="181.2" y="675.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="184.2" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.52%)</title><rect x="181.2" y="659.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="184.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.52%)</title><rect x="181.2" y="643.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="184.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.52%)</title><rect x="181.2" y="627.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="184.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 1.04%)</title><rect x="187.3" y="771.0" width="12.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="190.3" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 1.04%)</title><rect x="187.3" y="755.0" width="12.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="190.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.52%)</title><rect x="187.3" y="739.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="190.3" y="750.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.52%)</title><rect x="187.3" y="723.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="190.3" y="734.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.52%)</title><rect x="187.3" y="707.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="190.3" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.52%)</title><rect x="187.3" y="691.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="190.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.52%)</title><rect x="187.3" y="675.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="190.3" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.52%)</title><rect x="187.3" y="659.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="190.3" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.52%)</title><rect x="187.3" y="643.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="190.3" y="654.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.52%)</title><rect x="187.3" y="627.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.3" y="638.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps.makeRef (1 samples, 0.52%)</title><rect x="193.4" y="739.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.52%)</title><rect x="199.5" y="803.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="202.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.52%)</title><rect x="199.5" y="787.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="202.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.52%)</title><rect x="199.5" y="771.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="202.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.52%)</title><rect x="199.5" y="755.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="202.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.52%)</title><rect x="199.5" y="739.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="202.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.52%)</title><rect x="199.5" y="723.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="202.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.52%)</title><rect x="199.5" y="707.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.52%)</title><rect x="199.5" y="691.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.52%)</title><rect x="199.5" y="675.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="202.5" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.52%)</title><rect x="199.5" y="659.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="202.5" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.52%)</title><rect x="199.5" y="643.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="202.5" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.52%)</title><rect x="199.5" y="627.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="202.5" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.52%)</title><rect x="199.5" y="611.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="202.5" y="622.0"></text>
</g>
<g>
<title>java/nio/Bits.copyToArray (1 samples, 0.52%)</title><rect x="199.5" y="595.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.5" y="606.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.copyMemory (1 samples, 0.52%)</title><rect x="199.5" y="579.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="202.5" y="590.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.52%)</title><rect x="199.5" y="563.0" width="6.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="202.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 1.04%)</title><rect x="205.6" y="803.0" width="12.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="208.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 1.04%)</title><rect x="205.6" y="787.0" width="12.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="208.6" y="798.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.52%)</title><rect x="205.6" y="771.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/1224844731.accept (1 samples, 0.52%)</title><rect x="205.6" y="755.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="208.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.52%)</title><rect x="205.6" y="739.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.52%)</title><rect x="205.6" y="723.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="208.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.52%)</title><rect x="205.6" y="707.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="208.6" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.52%)</title><rect x="205.6" y="691.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="208.6" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.52%)</title><rect x="205.6" y="675.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="208.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.52%)</title><rect x="211.8" y="771.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="214.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.52%)</title><rect x="211.8" y="755.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="214.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.52%)</title><rect x="211.8" y="739.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="214.8" y="750.0"></text>
</g>
<g>
<title>java/lang/System.currentTimeMillis (1 samples, 0.52%)</title><rect x="217.9" y="851.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="220.9" y="862.0"></text>
</g>
<g>
<title>JVM_CurrentTimeMillis (1 samples, 0.52%)</title><rect x="217.9" y="835.0" width="6.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="220.9" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.run (82 samples, 42.49%)</title><rect x="224.0" y="867.0" width="501.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="227.0" y="878.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (82 samples, 42.49%)</title><rect x="224.0" y="851.0" width="501.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="227.0" y="862.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (82 samples, 42.49%)</title><rect x="224.0" y="835.0" width="501.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="227.0" y="846.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1786762707.run (56 samples, 29.02%)</title><rect x="224.0" y="819.0" width="342.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.0" y="830.0">com/linecorp/decaton/processor/runtime/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (56 samples, 29.02%)</title><rect x="224.0" y="803.0" width="342.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.0" y="814.0">com/linecorp/decaton/processor/runtime/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (56 samples, 29.02%)</title><rect x="224.0" y="787.0" width="342.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="227.0" y="798.0">com/linecorp/decaton/processor/runtime/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (55 samples, 28.50%)</title><rect x="224.0" y="771.0" width="336.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.0" y="782.0">com/linecorp/decaton/processor/runtime/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (17 samples, 8.81%)</title><rect x="230.1" y="755.0" width="103.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="233.1" y="766.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (17 samples, 8.81%)</title><rect x="230.1" y="739.0" width="103.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.1" y="750.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (17 samples, 8.81%)</title><rect x="230.1" y="723.0" width="103.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="233.1" y="734.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (17 samples, 8.81%)</title><rect x="230.1" y="707.0" width="103.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="233.1" y="718.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (17 samples, 8.81%)</title><rect x="230.1" y="691.0" width="103.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="233.1" y="702.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (17 samples, 8.81%)</title><rect x="230.1" y="675.0" width="103.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.1" y="686.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (3 samples, 1.55%)</title><rect x="230.1" y="659.0" width="18.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="233.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.52%)</title><rect x="230.1" y="643.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.52%)</title><rect x="230.1" y="627.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.52%)</title><rect x="230.1" y="611.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="233.1" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.52%)</title><rect x="230.1" y="595.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="233.1" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.52%)</title><rect x="230.1" y="579.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="233.1" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.52%)</title><rect x="230.1" y="563.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="233.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 1.04%)</title><rect x="236.2" y="643.0" width="12.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.52%)</title><rect x="242.3" y="627.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.52%)</title><rect x="242.3" y="611.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="245.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.52%)</title><rect x="242.3" y="595.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="245.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (13 samples, 6.74%)</title><rect x="248.4" y="659.0" width="79.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.4" y="670.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.52%)</title><rect x="254.6" y="643.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.52%)</title><rect x="254.6" y="627.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="257.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 1.55%)</title><rect x="260.7" y="643.0" width="18.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="263.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.55%)</title><rect x="260.7" y="627.0" width="18.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 1.04%)</title><rect x="266.8" y="611.0" width="12.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="269.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 1.04%)</title><rect x="266.8" y="595.0" width="12.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.52%)</title><rect x="279.0" y="643.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="282.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.52%)</title><rect x="279.0" y="627.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (7 samples, 3.63%)</title><rect x="285.1" y="643.0" width="42.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="288.1" y="654.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.04%)</title><rect x="285.1" y="627.0" width="12.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.52%)</title><rect x="291.2" y="611.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 2.59%)</title><rect x="297.4" y="627.0" width="30.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="300.4" y="638.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 2.59%)</title><rect x="297.4" y="611.0" width="30.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="300.4" y="622.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 2.59%)</title><rect x="297.4" y="595.0" width="30.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="300.4" y="606.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.55%)</title><rect x="303.5" y="579.0" width="18.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="306.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 1.04%)</title><rect x="309.6" y="563.0" width="12.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="312.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 1.04%)</title><rect x="309.6" y="547.0" width="12.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="312.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 1.04%)</title><rect x="309.6" y="531.0" width="12.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="312.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.52%)</title><rect x="321.8" y="579.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="324.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.52%)</title><rect x="321.8" y="563.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="324.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.52%)</title><rect x="321.8" y="547.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="324.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.52%)</title><rect x="321.8" y="531.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.8" y="542.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.52%)</title><rect x="321.8" y="515.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="324.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.52%)</title><rect x="327.9" y="659.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="330.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.52%)</title><rect x="327.9" y="643.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="330.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.52%)</title><rect x="327.9" y="627.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="330.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.52%)</title><rect x="327.9" y="611.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="330.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.52%)</title><rect x="327.9" y="595.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="330.9" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (35 samples, 18.13%)</title><rect x="334.0" y="755.0" width="214.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="337.0" y="766.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (6 samples, 3.11%)</title><rect x="340.2" y="739.0" width="36.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="343.2" y="750.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (6 samples, 3.11%)</title><rect x="340.2" y="723.0" width="36.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="343.2" y="734.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (6 samples, 3.11%)</title><rect x="340.2" y="707.0" width="36.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="343.2" y="718.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.52%)</title><rect x="346.3" y="691.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="349.3" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.52%)</title><rect x="346.3" y="675.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="349.3" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.52%)</title><rect x="346.3" y="659.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="349.3" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.52%)</title><rect x="346.3" y="643.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="349.3" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 2.07%)</title><rect x="352.4" y="691.0" width="24.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="355.4" y="702.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 1.55%)</title><rect x="358.5" y="675.0" width="18.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="361.5" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.52%)</title><rect x="376.8" y="739.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="379.8" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.52%)</title><rect x="376.8" y="723.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="379.8" y="734.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.52%)</title><rect x="376.8" y="707.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="379.8" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (19 samples, 9.84%)</title><rect x="383.0" y="739.0" width="116.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="386.0" y="750.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (19 samples, 9.84%)</title><rect x="383.0" y="723.0" width="116.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="386.0" y="734.0">com/linecorp/d..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.04%)</title><rect x="383.0" y="707.0" width="12.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="386.0" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.52%)</title><rect x="389.1" y="691.0" width="6.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="392.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (7 samples, 3.63%)</title><rect x="395.2" y="707.0" width="42.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="398.2" y="718.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 3.63%)</title><rect x="395.2" y="691.0" width="42.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="398.2" y="702.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 2.59%)</title><rect x="395.2" y="675.0" width="30.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="398.2" y="686.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.55%)</title><rect x="407.4" y="659.0" width="18.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="410.4" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.55%)</title><rect x="407.4" y="643.0" width="18.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="410.4" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.52%)</title><rect x="413.5" y="627.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="416.5" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::oop_extra_words() (1 samples, 0.52%)</title><rect x="413.5" y="611.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="416.5" y="622.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.52%)</title><rect x="419.6" y="627.0" width="6.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="422.6" y="638.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 1.04%)</title><rect x="425.8" y="675.0" width="12.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="428.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.topicPartition (1 samples, 0.52%)</title><rect x="438.0" y="707.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="441.0" y="718.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.52%)</title><rect x="438.0" y="691.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="441.0" y="702.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.52%)</title><rect x="438.0" y="675.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="441.0" y="686.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.52%)</title><rect x="438.0" y="659.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="441.0" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.52%)</title><rect x="438.0" y="643.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="441.0" y="654.0"></text>
</g>
<g>
<title>methodHandle::remove() (1 samples, 0.52%)</title><rect x="438.0" y="627.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="441.0" y="638.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.52%)</title><rect x="444.1" y="707.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="447.1" y="718.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.52%)</title><rect x="444.1" y="691.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="447.1" y="702.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 4.15%)</title><rect x="450.2" y="707.0" width="48.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="453.2" y="718.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 3.63%)</title><rect x="456.3" y="691.0" width="42.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="459.3" y="702.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.52%)</title><rect x="462.4" y="675.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="465.4" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.52%)</title><rect x="462.4" y="659.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="465.4" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.52%)</title><rect x="462.4" y="643.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="465.4" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.52%)</title><rect x="462.4" y="627.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="465.4" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 2.59%)</title><rect x="468.5" y="675.0" width="30.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="471.5" y="686.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 2.07%)</title><rect x="474.7" y="659.0" width="24.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="477.7" y="670.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.04%)</title><rect x="486.9" y="643.0" width="12.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="489.9" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.52%)</title><rect x="486.9" y="627.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="489.9" y="638.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.52%)</title><rect x="493.0" y="627.0" width="6.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="496.0" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (5 samples, 2.59%)</title><rect x="499.1" y="739.0" width="30.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="502.1" y="750.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (5 samples, 2.59%)</title><rect x="499.1" y="723.0" width="30.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="502.1" y="734.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1823890470.process (3 samples, 1.55%)</title><rect x="499.1" y="707.0" width="18.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="502.1" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (3 samples, 1.55%)</title><rect x="499.1" y="691.0" width="18.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="502.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (3 samples, 1.55%)</title><rect x="499.1" y="675.0" width="18.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="502.1" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.55%)</title><rect x="499.1" y="659.0" width="18.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="502.1" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 1.55%)</title><rect x="499.1" y="643.0" width="18.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="502.1" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 1.55%)</title><rect x="499.1" y="627.0" width="18.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="502.1" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 1.55%)</title><rect x="499.1" y="611.0" width="18.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="502.1" y="622.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.04%)</title><rect x="505.2" y="595.0" width="12.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="508.2" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.52%)</title><rect x="517.5" y="707.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="520.5" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.52%)</title><rect x="517.5" y="691.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="520.5" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.52%)</title><rect x="523.6" y="707.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="526.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.55%)</title><rect x="529.7" y="739.0" width="18.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="532.7" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.52%)</title><rect x="535.8" y="723.0" width="6.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="538.8" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.52%)</title><rect x="535.8" y="707.0" width="6.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="538.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.52%)</title><rect x="541.9" y="723.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="544.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.52%)</title><rect x="548.0" y="755.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="551.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.52%)</title><rect x="548.0" y="739.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="551.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.52%)</title><rect x="548.0" y="723.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="551.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$294/1402920739.accept (1 samples, 0.52%)</title><rect x="548.0" y="707.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="551.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (1 samples, 0.52%)</title><rect x="548.0" y="691.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="551.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1047637760.complete (1 samples, 0.52%)</title><rect x="548.0" y="675.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="551.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (1 samples, 0.52%)</title><rect x="548.0" y="659.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="551.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.52%)</title><rect x="548.0" y="643.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="551.0" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.52%)</title><rect x="548.0" y="627.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="551.0" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.52%)</title><rect x="548.0" y="611.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="551.0" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.52%)</title><rect x="548.0" y="595.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="551.0" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.52%)</title><rect x="548.0" y="579.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="551.0" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.52%)</title><rect x="554.1" y="755.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="557.1" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.52%)</title><rect x="554.1" y="739.0" width="6.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="557.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.52%)</title><rect x="560.3" y="771.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="563.3" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.52%)</title><rect x="560.3" y="755.0" width="6.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="563.3" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.52%)</title><rect x="560.3" y="739.0" width="6.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="563.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 1.04%)</title><rect x="566.4" y="819.0" width="12.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="569.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.04%)</title><rect x="566.4" y="803.0" width="12.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="569.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.52%)</title><rect x="572.5" y="787.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="575.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 1.04%)</title><rect x="578.6" y="819.0" width="12.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="581.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.52%)</title><rect x="584.7" y="803.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="587.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.52%)</title><rect x="584.7" y="787.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="587.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (22 samples, 11.40%)</title><rect x="590.8" y="819.0" width="134.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="593.8" y="830.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (22 samples, 11.40%)</title><rect x="590.8" y="803.0" width="134.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="593.8" y="814.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (18 samples, 9.33%)</title><rect x="596.9" y="787.0" width="110.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="599.9" y="798.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 1.04%)</title><rect x="596.9" y="771.0" width="12.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="599.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.04%)</title><rect x="596.9" y="755.0" width="12.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="599.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 1.04%)</title><rect x="596.9" y="739.0" width="12.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="599.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 1.04%)</title><rect x="596.9" y="723.0" width="12.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="599.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (16 samples, 8.29%)</title><rect x="609.2" y="771.0" width="97.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="612.2" y="782.0">java/util/c..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (16 samples, 8.29%)</title><rect x="609.2" y="755.0" width="97.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="612.2" y="766.0">sun/misc/Un..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 1.04%)</title><rect x="621.4" y="739.0" width="12.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="624.4" y="750.0"></text>
</g>
<g>
<title>Unsafe_Park (12 samples, 6.22%)</title><rect x="633.6" y="739.0" width="73.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="636.6" y="750.0">Unsafe_P..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 1.04%)</title><rect x="633.6" y="723.0" width="12.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="636.6" y="734.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.52%)</title><rect x="645.9" y="723.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="648.9" y="734.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.52%)</title><rect x="652.0" y="723.0" width="6.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="655.0" y="734.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.52%)</title><rect x="658.1" y="723.0" width="6.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="661.1" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 2.59%)</title><rect x="664.2" y="723.0" width="30.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="667.2" y="734.0">__..</text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.52%)</title><rect x="694.8" y="723.0" width="6.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="697.8" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.52%)</title><rect x="700.9" y="723.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="703.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.55%)</title><rect x="707.0" y="787.0" width="18.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="710.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.55%)</title><rect x="707.0" y="771.0" width="18.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="710.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.55%)</title><rect x="707.0" y="755.0" width="18.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="710.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.55%)</title><rect x="707.0" y="739.0" width="18.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="710.0" y="750.0"></text>
</g>
<g>
<title>start_thread (76 samples, 39.38%)</title><rect x="725.3" y="867.0" width="464.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="728.3" y="878.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (76 samples, 39.38%)</title><rect x="725.3" y="851.0" width="464.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="728.3" y="862.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (30 samples, 15.54%)</title><rect x="725.3" y="835.0" width="183.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="728.3" y="846.0">GangWorker::loop()</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (8 samples, 4.15%)</title><rect x="725.3" y="819.0" width="48.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="728.3" y="830.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 4.15%)</title><rect x="725.3" y="803.0" width="48.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="728.3" y="814.0">G1Pa..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 1.55%)</title><rect x="725.3" y="787.0" width="18.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="728.3" y="798.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 2.59%)</title><rect x="743.7" y="787.0" width="30.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="746.7" y="798.0">Sp..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (22 samples, 11.40%)</title><rect x="774.2" y="819.0" width="134.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="777.2" y="830.0">G1ParTask::work(u..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (19 samples, 9.84%)</title><rect x="774.2" y="803.0" width="116.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="777.2" y="814.0">G1ParEvacuateF..</text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.52%)</title><rect x="774.2" y="787.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="777.2" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 4.15%)</title><rect x="780.4" y="787.0" width="48.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="783.4" y="798.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 2.07%)</title><rect x="804.8" y="771.0" width="24.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="807.8" y="782.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.52%)</title><rect x="817.0" y="755.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="820.0" y="766.0"></text>
</g>
<g>
<title>InstanceMirrorKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.52%)</title><rect x="823.2" y="755.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="826.2" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.52%)</title><rect x="823.2" y="739.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="826.2" y="750.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.52%)</title><rect x="823.2" y="723.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="826.2" y="734.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 1.55%)</title><rect x="829.3" y="787.0" width="18.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="832.3" y="798.0"></text>
</g>
<g>
<title>SpinPause (7 samples, 3.63%)</title><rect x="847.6" y="787.0" width="42.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="850.6" y="798.0">Spin..</text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 1.04%)</title><rect x="890.4" y="803.0" width="12.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="893.4" y="814.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 1.04%)</title><rect x="890.4" y="787.0" width="12.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="893.4" y="798.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.52%)</title><rect x="896.5" y="771.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="899.5" y="782.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.52%)</title><rect x="896.5" y="755.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="899.5" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.52%)</title><rect x="896.5" y="739.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="899.5" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.52%)</title><rect x="902.6" y="803.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="905.6" y="814.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.52%)</title><rect x="902.6" y="787.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="905.6" y="798.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.52%)</title><rect x="902.6" y="771.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="905.6" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.52%)</title><rect x="902.6" y="755.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="905.6" y="766.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.52%)</title><rect x="902.6" y="739.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="905.6" y="750.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.52%)</title><rect x="902.6" y="723.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="905.6" y="734.0"></text>
</g>
<g>
<title>RSHashTableIter::has_next(unsigned long&amp;) (1 samples, 0.52%)</title><rect x="902.6" y="707.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="905.6" y="718.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (46 samples, 23.83%)</title><rect x="908.8" y="835.0" width="281.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="911.8" y="846.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (46 samples, 23.83%)</title><rect x="908.8" y="819.0" width="281.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="911.8" y="830.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (46 samples, 23.83%)</title><rect x="908.8" y="803.0" width="281.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="911.8" y="814.0">CompileBroker::invoke_compiler_on_meth..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (43 samples, 22.28%)</title><rect x="908.8" y="787.0" width="262.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="911.8" y="798.0">C2Compiler::compile_method(ciEnv*, ..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (43 samples, 22.28%)</title><rect x="908.8" y="771.0" width="262.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="911.8" y="782.0">Compile::Compile(ciEnv*, C2Compiler..</text>
</g>
<g>
<title>Compile::Code_Gen() (23 samples, 11.92%)</title><rect x="908.8" y="755.0" width="140.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="911.8" y="766.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.52%)</title><rect x="908.8" y="739.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="911.8" y="750.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.52%)</title><rect x="908.8" y="723.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="911.8" y="734.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.52%)</title><rect x="908.8" y="707.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="911.8" y="718.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.52%)</title><rect x="908.8" y="691.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="911.8" y="702.0"></text>
</g>
<g>
<title>MachPrologNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.52%)</title><rect x="908.8" y="675.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="911.8" y="686.0"></text>
</g>
<g>
<title>MacroAssembler::verified_entry(int, int, bool) (1 samples, 0.52%)</title><rect x="908.8" y="659.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="911.8" y="670.0"></text>
</g>
<g>
<title>MacroAssembler::bang_stack_with_offset(int) (1 samples, 0.52%)</title><rect x="908.8" y="643.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="911.8" y="654.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.04%)</title><rect x="914.9" y="739.0" width="12.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="917.9" y="750.0"></text>
</g>
<g>
<title>LoadNNode::Opcode() const (1 samples, 0.52%)</title><rect x="914.9" y="723.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="917.9" y="734.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.52%)</title><rect x="921.0" y="723.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="924.0" y="734.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.52%)</title><rect x="921.0" y="707.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="924.0" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.52%)</title><rect x="927.1" y="739.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="930.1" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.52%)</title><rect x="927.1" y="723.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="930.1" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.52%)</title><rect x="927.1" y="707.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="930.1" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.52%)</title><rect x="927.1" y="691.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="930.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (19 samples, 9.84%)</title><rect x="933.2" y="739.0" width="116.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="936.2" y="750.0">PhaseChaitin::..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.52%)</title><rect x="933.2" y="723.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="936.2" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.52%)</title><rect x="933.2" y="707.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="936.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.52%)</title><rect x="939.3" y="723.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="942.3" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 2.59%)</title><rect x="945.4" y="723.0" width="30.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="948.4" y="734.0">Ph..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.52%)</title><rect x="957.7" y="707.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.52%)</title><rect x="963.8" y="707.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="966.8" y="718.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.52%)</title><rect x="969.9" y="707.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="972.9" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.52%)</title><rect x="976.0" y="723.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="979.0" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 1.04%)</title><rect x="982.1" y="723.0" width="12.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="985.1" y="734.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.52%)</title><rect x="988.2" y="707.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="991.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.55%)</title><rect x="994.4" y="723.0" width="18.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="997.4" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 1.04%)</title><rect x="1000.5" y="707.0" width="12.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1003.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.52%)</title><rect x="1006.6" y="691.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1009.6" y="702.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.52%)</title><rect x="1012.7" y="723.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1015.7" y="734.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.52%)</title><rect x="1012.7" y="707.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1015.7" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.52%)</title><rect x="1012.7" y="691.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1015.7" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.52%)</title><rect x="1012.7" y="675.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1015.7" y="686.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 2.07%)</title><rect x="1018.8" y="723.0" width="24.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1021.8" y="734.0">P..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.04%)</title><rect x="1031.0" y="707.0" width="12.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1034.0" y="718.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.52%)</title><rect x="1043.3" y="723.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1046.3" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (13 samples, 6.74%)</title><rect x="1049.4" y="755.0" width="79.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1052.4" y="766.0">Compile::..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.52%)</title><rect x="1049.4" y="739.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1052.4" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (6 samples, 3.11%)</title><rect x="1055.5" y="739.0" width="36.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1058.5" y="750.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.52%)</title><rect x="1055.5" y="723.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1058.5" y="734.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.52%)</title><rect x="1055.5" y="707.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1058.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.04%)</title><rect x="1061.6" y="723.0" width="12.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1064.6" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.04%)</title><rect x="1073.8" y="723.0" width="12.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1076.8" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.04%)</title><rect x="1073.8" y="707.0" width="12.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1076.8" y="718.0"></text>
</g>
<g>
<title>AddNode::Ideal(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1073.8" y="691.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1076.8" y="702.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.52%)</title><rect x="1073.8" y="675.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1076.8" y="686.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.52%)</title><rect x="1073.8" y="659.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1076.8" y="670.0"></text>
</g>
<g>
<title>PhiNode::is_diamond_phi(bool) const (1 samples, 0.52%)</title><rect x="1079.9" y="691.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1082.9" y="702.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.52%)</title><rect x="1086.1" y="723.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1089.1" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 2.07%)</title><rect x="1092.2" y="739.0" width="24.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1095.2" y="750.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.55%)</title><rect x="1098.3" y="723.0" width="18.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1101.3" y="734.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.52%)</title><rect x="1098.3" y="707.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1101.3" y="718.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1104.4" y="707.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1107.4" y="718.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1110.5" y="707.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1113.5" y="718.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.52%)</title><rect x="1116.6" y="739.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1119.6" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.52%)</title><rect x="1116.6" y="723.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1119.6" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.52%)</title><rect x="1116.6" y="707.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1119.6" y="718.0"></text>
</g>
<g>
<title>AddNode::Ideal(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1116.6" y="691.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1119.6" y="702.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.52%)</title><rect x="1122.7" y="739.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.7" y="750.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.52%)</title><rect x="1122.7" y="723.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.7" y="734.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.52%)</title><rect x="1122.7" y="707.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.7" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.55%)</title><rect x="1128.9" y="755.0" width="18.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.9" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.55%)</title><rect x="1128.9" y="739.0" width="18.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.55%)</title><rect x="1128.9" y="723.0" width="18.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.55%)</title><rect x="1128.9" y="707.0" width="18.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.55%)</title><rect x="1128.9" y="691.0" width="18.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.55%)</title><rect x="1128.9" y="675.0" width="18.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.9" y="686.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.52%)</title><rect x="1128.9" y="659.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.9" y="670.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.52%)</title><rect x="1128.9" y="643.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.9" y="654.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.52%)</title><rect x="1128.9" y="627.0" width="6.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1131.9" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.04%)</title><rect x="1135.0" y="659.0" width="12.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.0" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.04%)</title><rect x="1135.0" y="643.0" width="12.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.04%)</title><rect x="1135.0" y="627.0" width="12.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.04%)</title><rect x="1135.0" y="611.0" width="12.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.04%)</title><rect x="1135.0" y="595.0" width="12.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.04%)</title><rect x="1135.0" y="579.0" width="12.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.0" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.04%)</title><rect x="1135.0" y="563.0" width="12.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.0" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.04%)</title><rect x="1135.0" y="547.0" width="12.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.04%)</title><rect x="1135.0" y="531.0" width="12.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.04%)</title><rect x="1135.0" y="515.0" width="12.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.04%)</title><rect x="1135.0" y="499.0" width="12.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.04%)</title><rect x="1135.0" y="483.0" width="12.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.0" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.04%)</title><rect x="1135.0" y="467.0" width="12.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.0" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.04%)</title><rect x="1135.0" y="451.0" width="12.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.04%)</title><rect x="1135.0" y="435.0" width="12.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.04%)</title><rect x="1135.0" y="419.0" width="12.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.04%)</title><rect x="1135.0" y="403.0" width="12.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1135.0" y="387.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.0" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1135.0" y="371.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.0" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1135.0" y="355.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1135.0" y="339.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1135.0" y="323.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1135.0" y="307.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1135.0" y="291.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.0" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1135.0" y="275.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.0" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1135.0" y="259.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1135.0" y="243.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1135.0" y="227.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1135.0" y="211.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1135.0" y="195.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.0" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1135.0" y="179.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.0" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1135.0" y="163.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1135.0" y="147.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1135.0" y="131.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1135.0" y="115.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.0" y="126.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.52%)</title><rect x="1135.0" y="99.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.0" y="110.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.52%)</title><rect x="1135.0" y="83.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.0" y="94.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.52%)</title><rect x="1135.0" y="67.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.0" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.52%)</title><rect x="1135.0" y="51.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.0" y="62.0"></text>
</g>
<g>
<title>TypeAry::hash() const (1 samples, 0.52%)</title><rect x="1135.0" y="35.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.0" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.52%)</title><rect x="1141.1" y="387.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.52%)</title><rect x="1141.1" y="371.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.1" y="382.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.52%)</title><rect x="1141.1" y="355.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.1" y="366.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.52%)</title><rect x="1141.1" y="339.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.1" y="350.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.52%)</title><rect x="1141.1" y="323.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.1" y="334.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.52%)</title><rect x="1141.1" y="307.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.1" y="318.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 1.04%)</title><rect x="1147.2" y="755.0" width="12.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.2" y="766.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.52%)</title><rect x="1147.2" y="739.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.2" y="750.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.52%)</title><rect x="1153.3" y="739.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.3" y="750.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.52%)</title><rect x="1159.4" y="755.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.4" y="766.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.52%)</title><rect x="1159.4" y="739.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.4" y="750.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.52%)</title><rect x="1159.4" y="723.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.4" y="734.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.52%)</title><rect x="1159.4" y="707.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.4" y="718.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.52%)</title><rect x="1159.4" y="691.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.4" y="702.0"></text>
</g>
<g>
<title>ciMethod::has_option(char const*) (1 samples, 0.52%)</title><rect x="1165.5" y="755.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.5" y="766.0"></text>
</g>
<g>
<title>bool get_option_value&lt;bool&gt;(methodHandle, char const*, bool&amp;) (1 samples, 0.52%)</title><rect x="1165.5" y="739.0" width="6.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1168.5" y="750.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.55%)</title><rect x="1171.7" y="787.0" width="18.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.7" y="798.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.55%)</title><rect x="1171.7" y="771.0" width="18.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.7" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.55%)</title><rect x="1171.7" y="755.0" width="18.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.7" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.04%)</title><rect x="1171.7" y="739.0" width="12.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.7" y="750.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.52%)</title><rect x="1171.7" y="723.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.7" y="734.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.52%)</title><rect x="1171.7" y="707.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.7" y="718.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.52%)</title><rect x="1171.7" y="691.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.7" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.52%)</title><rect x="1171.7" y="675.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.7" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.52%)</title><rect x="1171.7" y="659.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.7" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.52%)</title><rect x="1171.7" y="643.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.7" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::load_constant() (1 samples, 0.52%)</title><rect x="1171.7" y="627.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.7" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_constant() (1 samples, 0.52%)</title><rect x="1171.7" y="611.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.7" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_constant_by_index(constantPoolHandle, int, int, ciInstanceKlass*) (1 samples, 0.52%)</title><rect x="1171.7" y="595.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.7" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_constant_by_index_impl(constantPoolHandle, int, int, ciInstanceKlass*) (1 samples, 0.52%)</title><rect x="1171.7" y="579.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.7" y="590.0"></text>
</g>
<g>
<title>ConstantPool::string_at_impl(constantPoolHandle, int, int, Thread*) (1 samples, 0.52%)</title><rect x="1171.7" y="563.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.7" y="574.0"></text>
</g>
<g>
<title>StringTable::intern(Symbol*, Thread*) (1 samples, 0.52%)</title><rect x="1171.7" y="547.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.7" y="558.0"></text>
</g>
<g>
<title>StringTable::intern(Handle, unsigned short*, int, Thread*) (1 samples, 0.52%)</title><rect x="1171.7" y="531.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.7" y="542.0"></text>
</g>
<g>
<title>java_lang_String::create_from_unicode(unsigned short*, int, Thread*) (1 samples, 0.52%)</title><rect x="1171.7" y="515.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.7" y="526.0"></text>
</g>
<g>
<title>java_lang_String::basic_create(int, Thread*) (1 samples, 0.52%)</title><rect x="1171.7" y="499.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.7" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.52%)</title><rect x="1171.7" y="483.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.7" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.52%)</title><rect x="1171.7" y="467.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.7" y="478.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.52%)</title><rect x="1171.7" y="451.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.7" y="462.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.52%)</title><rect x="1177.8" y="723.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.8" y="734.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.52%)</title><rect x="1177.8" y="707.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.8" y="718.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.52%)</title><rect x="1177.8" y="691.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.8" y="702.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.52%)</title><rect x="1177.8" y="675.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.8" y="686.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(ValueStack*) (1 samples, 0.52%)</title><rect x="1177.8" y="659.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.8" y="670.0"></text>
</g>
<g>
<title>PhiResolverState::reset(int) (1 samples, 0.52%)</title><rect x="1177.8" y="643.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.8" y="654.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.52%)</title><rect x="1183.9" y="739.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.9" y="750.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.52%)</title><rect x="1183.9" y="723.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.9" y="734.0"></text>
</g>
<g>
<title>CodeBuffer::finalize_oop_references(methodHandle) (1 samples, 0.52%)</title><rect x="1183.9" y="707.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.9" y="718.0"></text>
</g>
</g>
</svg>
