<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,217 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2035.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2019.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2003.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1987.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1971.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1955.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1939.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1923.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1907.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1891.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1875.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1859.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1843.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1827.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1811.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1795.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1779.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1763.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1747.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1731.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1715.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1699.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1683.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1667.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1651.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1635.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1619.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1603.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1587.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1571.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1555.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1539.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1523.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1507.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1491.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1475.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1459.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1443.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1427.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1411.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1395.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1379.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1363.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1347.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1331.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1315.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1299.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1283.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1267.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1251.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1235.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1219.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1203.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1187.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1171.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1155.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1139.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1123.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1107.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1091.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1075.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1043.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1027.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1011.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="995.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="963.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="947.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="931.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="915.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="899.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="883.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="867.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="851.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="835.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="819.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="787.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="755.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="739.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="723.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="707.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="675.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="659.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="643.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="611.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="595.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="579.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="563.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="547.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="515.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="499.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="483.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="467.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="451.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="435.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="419.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="403.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="387.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="371.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="355.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="339.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="323.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="307.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="291.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="275.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="259.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="243.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="227.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="211.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="195.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="179.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="163.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="147.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="131.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="115.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="99.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="83.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="67.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="51.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.08%)</title><rect x="10.0" y="35.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="11.0" y="2035.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="14.0" y="2046.0"></text>
</g>
<g>
<title>_int_free (1 samples, 0.08%)</title><rect x="11.0" y="2019.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="14.0" y="2030.0"></text>
</g>
<g>
<title>__GI_munmap (1 samples, 0.08%)</title><rect x="11.9" y="2035.0" width="1.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="14.9" y="2046.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (265 samples, 21.77%)</title><rect x="12.9" y="2035.0" width="257.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.9" y="2046.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.08%)</title><rect x="14.8" y="2019.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.8" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (262 samples, 21.53%)</title><rect x="15.8" y="2019.0" width="254.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="18.8" y="2030.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.16%)</title><rect x="15.8" y="2003.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.8" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.16%)</title><rect x="15.8" y="1987.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.8" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1077863986.accept (2 samples, 0.16%)</title><rect x="15.8" y="1971.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.8" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.16%)</title><rect x="15.8" y="1955.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.8" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.16%)</title><rect x="15.8" y="1939.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.8" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.08%)</title><rect x="16.8" y="1923.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.8" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.25%)</title><rect x="17.8" y="2003.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.8" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.25%)</title><rect x="17.8" y="1987.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.8" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="18.7" y="1971.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.7" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="18.7" y="1955.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="21.7" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.16%)</title><rect x="18.7" y="1939.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.7" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="18.7" y="1923.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="21.7" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="18.7" y="1907.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.7" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.16%)</title><rect x="18.7" y="1891.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.7" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.16%)</title><rect x="18.7" y="1875.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.16%)</title><rect x="18.7" y="1859.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/1178568391.test (1 samples, 0.08%)</title><rect x="18.7" y="1843.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.7" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$249/1914110907.test (1 samples, 0.08%)</title><rect x="19.7" y="1843.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.7" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.lambda$partitionsNeedsPause$44 (1 samples, 0.08%)</title><rect x="19.7" y="1827.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="22.7" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.08%)</title><rect x="20.7" y="2003.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.7" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.08%)</title><rect x="20.7" y="1987.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.7" y="1998.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (200 samples, 16.43%)</title><rect x="21.6" y="2003.0" width="194.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.6" y="2014.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1709829722.accept (195 samples, 16.02%)</title><rect x="21.6" y="1987.0" width="189.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.6" y="1998.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (195 samples, 16.02%)</title><rect x="21.6" y="1971.0" width="189.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.6" y="1982.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (167 samples, 13.72%)</title><rect x="21.6" y="1955.0" width="162.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.6" y="1966.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (167 samples, 13.72%)</title><rect x="21.6" y="1939.0" width="162.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.6" y="1950.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (167 samples, 13.72%)</title><rect x="21.6" y="1923.0" width="162.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.6" y="1934.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (167 samples, 13.72%)</title><rect x="21.6" y="1907.0" width="162.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="24.6" y="1918.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (167 samples, 13.72%)</title><rect x="21.6" y="1891.0" width="162.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.6" y="1902.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (141 samples, 11.59%)</title><rect x="45.9" y="1875.0" width="136.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="48.9" y="1886.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (117 samples, 9.61%)</title><rect x="45.9" y="1859.0" width="113.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="48.9" y="1870.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (117 samples, 9.61%)</title><rect x="45.9" y="1843.0" width="113.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.9" y="1854.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (117 samples, 9.61%)</title><rect x="45.9" y="1827.0" width="113.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="48.9" y="1838.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (117 samples, 9.61%)</title><rect x="45.9" y="1811.0" width="113.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="48.9" y="1822.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (117 samples, 9.61%)</title><rect x="45.9" y="1795.0" width="113.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="48.9" y="1806.0">java/util/conc..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (68 samples, 5.59%)</title><rect x="93.4" y="1779.0" width="65.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="96.4" y="1790.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (64 samples, 5.26%)</title><rect x="95.3" y="1763.0" width="62.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="98.3" y="1774.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="96.3" y="1747.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="99.3" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.16%)</title><rect x="97.3" y="1747.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="100.3" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (49 samples, 4.03%)</title><rect x="99.2" y="1747.0" width="47.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="102.2" y="1758.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.16%)</title><rect x="146.7" y="1747.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="149.7" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (9 samples, 0.74%)</title><rect x="148.7" y="1747.0" width="8.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="151.7" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.16%)</title><rect x="157.4" y="1763.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="160.4" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (24 samples, 1.97%)</title><rect x="159.3" y="1859.0" width="23.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="162.3" y="1870.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (24 samples, 1.97%)</title><rect x="159.3" y="1843.0" width="23.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="162.3" y="1854.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (24 samples, 1.97%)</title><rect x="159.3" y="1827.0" width="23.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="162.3" y="1838.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (24 samples, 1.97%)</title><rect x="159.3" y="1811.0" width="23.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="162.3" y="1822.0">j..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="182.6" y="1875.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="185.6" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (3 samples, 0.25%)</title><rect x="183.6" y="1955.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="186.6" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.25%)</title><rect x="183.6" y="1939.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="186.6" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.33%)</title><rect x="186.5" y="1955.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="189.5" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.33%)</title><rect x="186.5" y="1939.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.5" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.33%)</title><rect x="186.5" y="1923.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="189.5" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (21 samples, 1.73%)</title><rect x="190.3" y="1955.0" width="20.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="193.3" y="1966.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (21 samples, 1.73%)</title><rect x="190.3" y="1939.0" width="20.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.3" y="1950.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 0.49%)</title><rect x="202.0" y="1923.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="205.0" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.25%)</title><rect x="202.0" y="1907.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="205.0" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.25%)</title><rect x="202.0" y="1891.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="205.0" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.25%)</title><rect x="202.0" y="1875.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="205.0" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="202.9" y="1859.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="205.9" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="202.9" y="1843.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="205.9" y="1854.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="202.9" y="1827.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="205.9" y="1838.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="202.9" y="1811.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="205.9" y="1822.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="202.9" y="1795.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="205.9" y="1806.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="203.9" y="1859.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="206.9" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.25%)</title><rect x="204.9" y="1907.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.9" y="1918.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.25%)</title><rect x="207.8" y="1923.0" width="2.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="210.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.08%)</title><rect x="210.7" y="1987.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.7" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.08%)</title><rect x="210.7" y="1971.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="210.7" y="1955.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.7" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.08%)</title><rect x="210.7" y="1939.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.7" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="210.7" y="1923.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.7" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="210.7" y="1907.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="213.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.33%)</title><rect x="211.7" y="1987.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="214.7" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.25%)</title><rect x="212.6" y="1971.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="215.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.25%)</title><rect x="212.6" y="1955.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="215.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.25%)</title><rect x="212.6" y="1939.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.6" y="1950.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.08%)</title><rect x="214.6" y="1923.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="217.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 4.60%)</title><rect x="215.6" y="2003.0" width="54.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="218.6" y="2014.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 4.60%)</title><rect x="215.6" y="1987.0" width="54.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="218.6" y="1998.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.08%)</title><rect x="215.6" y="1971.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (37 samples, 3.04%)</title><rect x="216.5" y="1971.0" width="35.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="219.5" y="1982.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (37 samples, 3.04%)</title><rect x="216.5" y="1955.0" width="35.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="219.5" y="1966.0">org..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.peek (1 samples, 0.08%)</title><rect x="216.5" y="1939.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="219.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (35 samples, 2.88%)</title><rect x="217.5" y="1939.0" width="33.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.5" y="1950.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (34 samples, 2.79%)</title><rect x="217.5" y="1923.0" width="33.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="220.5" y="1934.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (34 samples, 2.79%)</title><rect x="217.5" y="1907.0" width="33.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="220.5" y="1918.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (19 samples, 1.56%)</title><rect x="217.5" y="1891.0" width="18.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (9 samples, 0.74%)</title><rect x="227.2" y="1875.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (9 samples, 0.74%)</title><rect x="227.2" y="1859.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="230.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (9 samples, 0.74%)</title><rect x="227.2" y="1843.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (9 samples, 0.74%)</title><rect x="227.2" y="1827.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (9 samples, 0.74%)</title><rect x="227.2" y="1811.0" width="8.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="230.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (9 samples, 0.74%)</title><rect x="227.2" y="1795.0" width="8.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="230.2" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (9 samples, 0.74%)</title><rect x="227.2" y="1779.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.2" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (15 samples, 1.23%)</title><rect x="235.9" y="1891.0" width="14.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.08%)</title><rect x="235.9" y="1875.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="238.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (14 samples, 1.15%)</title><rect x="236.9" y="1875.0" width="13.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="239.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (14 samples, 1.15%)</title><rect x="236.9" y="1859.0" width="13.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="239.9" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (14 samples, 1.15%)</title><rect x="236.9" y="1843.0" width="13.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="239.9" y="1854.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (11 samples, 0.90%)</title><rect x="239.8" y="1827.0" width="10.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="242.8" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (11 samples, 0.90%)</title><rect x="239.8" y="1811.0" width="10.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="242.8" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (11 samples, 0.90%)</title><rect x="239.8" y="1795.0" width="10.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="242.8" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (11 samples, 0.90%)</title><rect x="239.8" y="1779.0" width="10.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="242.8" y="1790.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.08%)</title><rect x="245.6" y="1763.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="248.6" y="1774.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.33%)</title><rect x="246.6" y="1763.0" width="3.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="249.6" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.08%)</title><rect x="250.5" y="1923.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="253.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.08%)</title><rect x="250.5" y="1907.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="250.5" y="1891.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="253.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="250.5" y="1875.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="253.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="250.5" y="1859.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="253.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.08%)</title><rect x="251.4" y="1939.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="254.4" y="1950.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="251.4" y="1923.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="254.4" y="1934.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="251.4" y="1907.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="254.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (7 samples, 0.58%)</title><rect x="252.4" y="1971.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="255.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (7 samples, 0.58%)</title><rect x="252.4" y="1955.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="255.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (6 samples, 0.49%)</title><rect x="252.4" y="1939.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.4" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="252.4" y="1923.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.4" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="253.4" y="1923.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.4" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="253.4" y="1907.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="256.4" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="253.4" y="1891.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.4" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="253.4" y="1875.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.4" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="253.4" y="1859.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.4" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="253.4" y="1843.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (4 samples, 0.33%)</title><rect x="254.3" y="1923.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="257.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (4 samples, 0.33%)</title><rect x="254.3" y="1907.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.3" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.33%)</title><rect x="254.3" y="1891.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="257.3" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.08%)</title><rect x="254.3" y="1875.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.3" y="1886.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.08%)</title><rect x="254.3" y="1859.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.3" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="254.3" y="1843.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="257.3" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="254.3" y="1827.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="257.3" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.25%)</title><rect x="255.3" y="1875.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="258.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.25%)</title><rect x="255.3" y="1859.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.3" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.25%)</title><rect x="255.3" y="1843.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="258.3" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.25%)</title><rect x="255.3" y="1827.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="258.3" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (2 samples, 0.16%)</title><rect x="255.3" y="1811.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="258.3" y="1822.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (2 samples, 0.16%)</title><rect x="255.3" y="1795.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.3" y="1806.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.08%)</title><rect x="256.3" y="1779.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="259.3" y="1790.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="257.2" y="1811.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="260.2" y="1822.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="257.2" y="1795.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.2" y="1806.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.08%)</title><rect x="257.2" y="1779.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.2" y="1790.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.08%)</title><rect x="257.2" y="1763.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="260.2" y="1774.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.08%)</title><rect x="257.2" y="1747.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.2" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.08%)</title><rect x="258.2" y="1939.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="261.2" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.08%)</title><rect x="258.2" y="1923.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="261.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="258.2" y="1907.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.2" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="258.2" y="1891.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="261.2" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="258.2" y="1875.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.2" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="258.2" y="1859.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="261.2" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="258.2" y="1843.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.2" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="258.2" y="1827.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.2" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.08%)</title><rect x="258.2" y="1811.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="261.2" y="1822.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.08%)</title><rect x="258.2" y="1795.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="261.2" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.33%)</title><rect x="259.2" y="1971.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="262.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.33%)</title><rect x="259.2" y="1955.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="262.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.33%)</title><rect x="259.2" y="1939.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.25%)</title><rect x="259.2" y="1923.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.2" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="259.2" y="1907.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="262.2" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="259.2" y="1891.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.2" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="259.2" y="1875.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="262.2" y="1886.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="259.2" y="1859.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="262.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.16%)</title><rect x="260.2" y="1907.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="263.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.16%)</title><rect x="260.2" y="1891.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.16%)</title><rect x="260.2" y="1875.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="263.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.16%)</title><rect x="260.2" y="1859.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="263.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.16%)</title><rect x="260.2" y="1843.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="263.2" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.16%)</title><rect x="260.2" y="1827.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="263.2" y="1838.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="260.2" y="1811.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="263.2" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.08%)</title><rect x="261.1" y="1811.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.1" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.08%)</title><rect x="261.1" y="1795.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.1" y="1806.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.08%)</title><rect x="261.1" y="1779.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="264.1" y="1790.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.08%)</title><rect x="261.1" y="1763.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="264.1" y="1774.0"></text>
</g>
<g>
<title>__read (1 samples, 0.08%)</title><rect x="261.1" y="1747.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="264.1" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.08%)</title><rect x="262.1" y="1923.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.1" y="1934.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.08%)</title><rect x="262.1" y="1907.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="265.1" y="1918.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.08%)</title><rect x="262.1" y="1891.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="265.1" y="1902.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.08%)</title><rect x="262.1" y="1875.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.1" y="1886.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.08%)</title><rect x="262.1" y="1859.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="265.1" y="1870.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.08%)</title><rect x="262.1" y="1843.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="265.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (6 samples, 0.49%)</title><rect x="263.1" y="1971.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="266.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.41%)</title><rect x="264.0" y="1955.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="267.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.08%)</title><rect x="264.0" y="1939.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="267.0" y="1950.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.08%)</title><rect x="264.0" y="1923.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="267.0" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.08%)</title><rect x="264.0" y="1907.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="267.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.25%)</title><rect x="265.0" y="1939.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.0" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.08%)</title><rect x="265.0" y="1923.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="268.0" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.08%)</title><rect x="265.0" y="1907.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.16%)</title><rect x="266.0" y="1923.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="269.0" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="266.0" y="1907.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="269.0" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="266.0" y="1891.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="269.0" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="266.0" y="1875.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="269.0" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="266.0" y="1859.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="269.0" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="266.0" y="1843.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="269.0" y="1854.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="266.0" y="1827.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="269.0" y="1838.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="266.0" y="1811.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="269.0" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="266.0" y="1795.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="269.0" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$213/760080452.apply (1 samples, 0.08%)</title><rect x="266.0" y="1779.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.08%)</title><rect x="266.9" y="1907.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.9" y="1918.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="266.9" y="1891.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="269.9" y="1902.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.spliterator (1 samples, 0.08%)</title><rect x="266.9" y="1875.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="269.9" y="1886.0"></text>
</g>
<g>
<title>java/util/Spliterators.spliterator (1 samples, 0.08%)</title><rect x="266.9" y="1859.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="269.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="267.9" y="1939.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="270.9" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="267.9" y="1923.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="270.9" y="1934.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="267.9" y="1907.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="270.9" y="1918.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="267.9" y="1891.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="270.9" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="267.9" y="1875.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="270.9" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="267.9" y="1859.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="270.9" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.08%)</title><rect x="267.9" y="1843.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.08%)</title><rect x="268.9" y="1971.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="268.9" y="1955.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="271.9" y="1966.0"></text>
</g>
<g>
<title>java/lang/Thread.run (649 samples, 53.33%)</title><rect x="269.9" y="2035.0" width="629.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="272.9" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (649 samples, 53.33%)</title><rect x="269.9" y="2019.0" width="629.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="272.9" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (649 samples, 53.33%)</title><rect x="269.9" y="2003.0" width="629.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="272.9" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/742797280.run (425 samples, 34.92%)</title><rect x="271.8" y="1987.0" width="412.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.8" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$La..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (425 samples, 34.92%)</title><rect x="271.8" y="1971.0" width="412.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.8" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lam..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (425 samples, 34.92%)</title><rect x="271.8" y="1955.0" width="412.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="274.8" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (419 samples, 34.43%)</title><rect x="271.8" y="1939.0" width="406.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="274.8" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.s..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="284.4" y="1923.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="287.4" y="1934.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.08%)</title><rect x="285.4" y="1923.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.4" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (121 samples, 9.94%)</title><rect x="286.3" y="1923.0" width="117.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="289.3" y="1934.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (121 samples, 9.94%)</title><rect x="286.3" y="1907.0" width="117.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.3" y="1918.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (121 samples, 9.94%)</title><rect x="286.3" y="1891.0" width="117.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="289.3" y="1902.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (121 samples, 9.94%)</title><rect x="286.3" y="1875.0" width="117.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.3" y="1886.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (121 samples, 9.94%)</title><rect x="286.3" y="1859.0" width="117.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="289.3" y="1870.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (121 samples, 9.94%)</title><rect x="286.3" y="1843.0" width="117.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.3" y="1854.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (35 samples, 2.88%)</title><rect x="286.3" y="1827.0" width="34.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.3" y="1838.0">co..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="302.8" y="1811.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="305.8" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="302.8" y="1795.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="305.8" y="1806.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.25%)</title><rect x="303.8" y="1811.0" width="2.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="306.8" y="1822.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="304.8" y="1795.0" width="1.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="307.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (6 samples, 0.49%)</title><rect x="306.7" y="1811.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="309.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 0.41%)</title><rect x="307.7" y="1795.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="310.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.41%)</title><rect x="307.7" y="1779.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.7" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.41%)</title><rect x="307.7" y="1763.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.7" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.41%)</title><rect x="307.7" y="1747.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="310.7" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.41%)</title><rect x="307.7" y="1731.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="310.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (8 samples, 0.66%)</title><rect x="312.5" y="1811.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="315.5" y="1822.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="312.5" y="1795.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="315.5" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="312.5" y="1779.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="315.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (7 samples, 0.58%)</title><rect x="313.5" y="1795.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="316.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.08%)</title><rect x="313.5" y="1779.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="316.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.08%)</title><rect x="313.5" y="1763.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="316.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (6 samples, 0.49%)</title><rect x="314.5" y="1779.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="317.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (77 samples, 6.33%)</title><rect x="320.3" y="1827.0" width="74.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="323.3" y="1838.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.08%)</title><rect x="322.2" y="1811.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="325.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.08%)</title><rect x="323.2" y="1811.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="326.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (2 samples, 0.16%)</title><rect x="324.1" y="1811.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="327.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.08%)</title><rect x="326.1" y="1811.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="329.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="326.1" y="1795.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="329.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (4 samples, 0.33%)</title><rect x="327.1" y="1811.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="330.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.25%)</title><rect x="328.0" y="1795.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="331.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.16%)</title><rect x="329.0" y="1779.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="332.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.16%)</title><rect x="329.0" y="1763.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="332.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="330.0" y="1747.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="333.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.33%)</title><rect x="330.9" y="1811.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="333.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.33%)</title><rect x="330.9" y="1795.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="333.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (59 samples, 4.85%)</title><rect x="334.8" y="1811.0" width="57.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="337.8" y="1822.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 0.99%)</title><rect x="341.6" y="1795.0" width="11.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="344.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.16%)</title><rect x="344.5" y="1779.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="347.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.16%)</title><rect x="344.5" y="1763.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="347.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.16%)</title><rect x="344.5" y="1747.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="347.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 0.41%)</title><rect x="346.5" y="1779.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="349.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="351.3" y="1779.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="354.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="351.3" y="1763.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="354.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="352.3" y="1779.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="355.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.08%)</title><rect x="353.2" y="1795.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="356.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (39 samples, 3.20%)</title><rect x="354.2" y="1795.0" width="37.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="357.2" y="1806.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (39 samples, 3.20%)</title><rect x="354.2" y="1779.0" width="37.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="357.2" y="1790.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (38 samples, 3.12%)</title><rect x="355.2" y="1763.0" width="36.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="358.2" y="1774.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.90%)</title><rect x="357.1" y="1747.0" width="10.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="360.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.41%)</title><rect x="360.0" y="1731.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="363.0" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.41%)</title><rect x="360.0" y="1715.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="363.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.41%)</title><rect x="360.0" y="1699.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="363.0" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.33%)</title><rect x="361.0" y="1683.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="364.0" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.33%)</title><rect x="361.0" y="1667.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="364.0" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.25%)</title><rect x="362.0" y="1651.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="365.0" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (3 samples, 0.25%)</title><rect x="362.0" y="1635.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="365.0" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.25%)</title><rect x="364.9" y="1731.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="367.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 0.33%)</title><rect x="367.8" y="1747.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="370.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.25%)</title><rect x="368.8" y="1731.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="371.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.25%)</title><rect x="368.8" y="1715.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="371.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.25%)</title><rect x="368.8" y="1699.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="371.8" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.25%)</title><rect x="368.8" y="1683.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="371.8" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.16%)</title><rect x="371.7" y="1747.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="374.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (14 samples, 1.15%)</title><rect x="373.6" y="1747.0" width="13.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="376.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (14 samples, 1.15%)</title><rect x="373.6" y="1731.0" width="13.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="376.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (14 samples, 1.15%)</title><rect x="373.6" y="1715.0" width="13.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="376.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (14 samples, 1.15%)</title><rect x="373.6" y="1699.0" width="13.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="376.6" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (14 samples, 1.15%)</title><rect x="373.6" y="1683.0" width="13.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="376.6" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (10 samples, 0.82%)</title><rect x="375.5" y="1667.0" width="9.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="378.5" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (6 samples, 0.49%)</title><rect x="379.4" y="1651.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="382.4" y="1662.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (2 samples, 0.16%)</title><rect x="385.2" y="1667.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="388.2" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.25%)</title><rect x="387.2" y="1747.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="390.2" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.25%)</title><rect x="387.2" y="1731.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="390.2" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.25%)</title><rect x="387.2" y="1715.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="390.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.16%)</title><rect x="390.1" y="1747.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="393.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.25%)</title><rect x="392.0" y="1811.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="395.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (9 samples, 0.74%)</title><rect x="394.9" y="1827.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="397.9" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (9 samples, 0.74%)</title><rect x="394.9" y="1811.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="397.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (9 samples, 0.74%)</title><rect x="394.9" y="1795.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="397.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (9 samples, 0.74%)</title><rect x="394.9" y="1779.0" width="8.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="397.9" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.74%)</title><rect x="394.9" y="1763.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="397.9" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (260 samples, 21.36%)</title><rect x="403.7" y="1923.0" width="252.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="406.7" y="1934.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (48 samples, 3.94%)</title><rect x="405.6" y="1907.0" width="46.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="408.6" y="1918.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.08%)</title><rect x="405.6" y="1891.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="408.6" y="1902.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (47 samples, 3.86%)</title><rect x="406.6" y="1891.0" width="45.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="409.6" y="1902.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (47 samples, 3.86%)</title><rect x="406.6" y="1875.0" width="45.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="409.6" y="1886.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.41%)</title><rect x="406.6" y="1859.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="409.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.41%)</title><rect x="406.6" y="1843.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="409.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.41%)</title><rect x="406.6" y="1827.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="409.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.41%)</title><rect x="406.6" y="1811.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="409.6" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.08%)</title><rect x="410.4" y="1795.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="413.4" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.08%)</title><rect x="410.4" y="1779.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="413.4" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (42 samples, 3.45%)</title><rect x="411.4" y="1859.0" width="40.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="414.4" y="1870.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (14 samples, 1.15%)</title><rect x="438.6" y="1843.0" width="13.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="441.6" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.16%)</title><rect x="438.6" y="1827.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="441.6" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (12 samples, 0.99%)</title><rect x="440.5" y="1827.0" width="11.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="443.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.49%)</title><rect x="446.3" y="1811.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="449.3" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.58%)</title><rect x="452.1" y="1907.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="455.1" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.41%)</title><rect x="454.1" y="1891.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="457.1" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.41%)</title><rect x="454.1" y="1875.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="457.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (152 samples, 12.49%)</title><rect x="458.9" y="1907.0" width="147.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="461.9" y="1918.0">com/linecorp/decato..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="461.8" y="1891.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="464.8" y="1902.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="462.8" y="1891.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="465.8" y="1902.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="462.8" y="1875.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="465.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (146 samples, 12.00%)</title><rect x="463.8" y="1891.0" width="141.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="466.8" y="1902.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (42 samples, 3.45%)</title><rect x="472.5" y="1875.0" width="40.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="475.5" y="1886.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (41 samples, 3.37%)</title><rect x="472.5" y="1859.0" width="39.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="475.5" y="1870.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (21 samples, 1.73%)</title><rect x="481.2" y="1843.0" width="20.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="484.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (17 samples, 1.40%)</title><rect x="481.2" y="1827.0" width="16.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="484.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (17 samples, 1.40%)</title><rect x="481.2" y="1811.0" width="16.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="484.2" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (17 samples, 1.40%)</title><rect x="481.2" y="1795.0" width="16.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="484.2" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.49%)</title><rect x="486.1" y="1779.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="489.1" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.25%)</title><rect x="486.1" y="1763.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="489.1" y="1774.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="486.1" y="1747.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="489.1" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.16%)</title><rect x="487.0" y="1747.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="490.0" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.16%)</title><rect x="487.0" y="1731.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="490.0" y="1742.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="487.0" y="1715.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="490.0" y="1726.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="488.0" y="1715.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="491.0" y="1726.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.25%)</title><rect x="489.0" y="1763.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="492.0" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="490.0" y="1747.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="493.0" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="490.9" y="1747.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="493.9" y="1758.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (2 samples, 0.16%)</title><rect x="491.9" y="1779.0" width="1.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="494.9" y="1790.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.33%)</title><rect x="493.8" y="1779.0" width="3.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="496.8" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.33%)</title><rect x="497.7" y="1827.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="500.7" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="501.6" y="1843.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="504.6" y="1854.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (10 samples, 0.82%)</title><rect x="502.6" y="1843.0" width="9.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="505.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.08%)</title><rect x="512.3" y="1859.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="515.3" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="512.3" y="1843.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="515.3" y="1854.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="512.3" y="1827.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="515.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (11 samples, 0.90%)</title><rect x="513.2" y="1875.0" width="10.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="516.2" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (4 samples, 0.33%)</title><rect x="513.2" y="1859.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="516.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (4 samples, 0.33%)</title><rect x="513.2" y="1843.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="516.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.58%)</title><rect x="517.1" y="1859.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="520.1" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.58%)</title><rect x="517.1" y="1843.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="520.1" y="1854.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.25%)</title><rect x="523.9" y="1875.0" width="2.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="526.9" y="1886.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="526.8" y="1875.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="529.8" y="1886.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (80 samples, 6.57%)</title><rect x="527.8" y="1875.0" width="77.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="530.8" y="1886.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (79 samples, 6.49%)</title><rect x="528.7" y="1859.0" width="76.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="531.7" y="1870.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.58%)</title><rect x="528.7" y="1843.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="531.7" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.58%)</title><rect x="528.7" y="1827.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="531.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.58%)</title><rect x="528.7" y="1811.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="531.7" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.58%)</title><rect x="528.7" y="1795.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="531.7" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.08%)</title><rect x="534.6" y="1779.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="537.6" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (72 samples, 5.92%)</title><rect x="535.5" y="1843.0" width="69.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="538.5" y="1854.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (68 samples, 5.59%)</title><rect x="539.4" y="1827.0" width="65.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="542.4" y="1838.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (37 samples, 3.04%)</title><rect x="569.5" y="1811.0" width="35.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="572.5" y="1822.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (5 samples, 0.41%)</title><rect x="588.8" y="1795.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="591.8" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.74%)</title><rect x="593.7" y="1795.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="596.7" y="1806.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.25%)</title><rect x="602.4" y="1795.0" width="2.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="605.4" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="605.3" y="1891.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="608.3" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (33 samples, 2.71%)</title><rect x="606.3" y="1907.0" width="32.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="609.3" y="1918.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (2 samples, 0.16%)</title><rect x="606.3" y="1891.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="609.3" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (31 samples, 2.55%)</title><rect x="608.2" y="1891.0" width="30.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="611.2" y="1902.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/923219335.process (15 samples, 1.23%)</title><rect x="610.2" y="1875.0" width="14.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="613.2" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (15 samples, 1.23%)</title><rect x="610.2" y="1859.0" width="14.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="613.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (14 samples, 1.15%)</title><rect x="610.2" y="1843.0" width="13.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="613.2" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.16%)</title><rect x="617.9" y="1827.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="620.9" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.16%)</title><rect x="617.9" y="1811.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="620.9" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.16%)</title><rect x="617.9" y="1795.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="620.9" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.16%)</title><rect x="617.9" y="1779.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="620.9" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.08%)</title><rect x="618.9" y="1763.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="621.9" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (4 samples, 0.33%)</title><rect x="619.9" y="1827.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="622.9" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.33%)</title><rect x="619.9" y="1811.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="622.9" y="1822.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="619.9" y="1795.0" width="3.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="622.9" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="623.8" y="1843.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="626.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="623.8" y="1827.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="626.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="623.8" y="1811.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="626.8" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="623.8" y="1795.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="626.8" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="624.7" y="1875.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="627.7" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.08%)</title><rect x="624.7" y="1859.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="627.7" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (3 samples, 0.25%)</title><rect x="625.7" y="1875.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="628.7" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (3 samples, 0.25%)</title><rect x="625.7" y="1859.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="628.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/934161786.get$Lambda (3 samples, 0.25%)</title><rect x="625.7" y="1843.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="628.7" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/934161786.&lt;init&gt; (2 samples, 0.16%)</title><rect x="626.7" y="1827.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="629.7" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.16%)</title><rect x="628.6" y="1875.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="631.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="629.6" y="1859.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="632.6" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.49%)</title><rect x="630.5" y="1875.0" width="5.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="633.5" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.49%)</title><rect x="630.5" y="1859.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="633.5" y="1870.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="630.5" y="1843.0" width="1.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="633.5" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (5 samples, 0.41%)</title><rect x="631.5" y="1843.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="634.5" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="636.4" y="1875.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="639.4" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="636.4" y="1859.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="639.4" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.08%)</title><rect x="637.3" y="1875.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="640.3" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/223800726.linkToTargetMethod (1 samples, 0.08%)</title><rect x="638.3" y="1907.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="641.3" y="1918.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/110771485.invokeStatic_L3_L (1 samples, 0.08%)</title><rect x="638.3" y="1891.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="641.3" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/424593705.get$Lambda (1 samples, 0.08%)</title><rect x="638.3" y="1875.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="641.3" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="638.3" y="1859.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="641.3" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="638.3" y="1843.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="641.3" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="638.3" y="1827.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="641.3" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="638.3" y="1811.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="641.3" y="1822.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="638.3" y="1795.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="641.3" y="1806.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="638.3" y="1779.0" width="1.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="641.3" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.25%)</title><rect x="639.3" y="1907.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="642.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.15%)</title><rect x="642.2" y="1907.0" width="13.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="645.2" y="1918.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.16%)</title><rect x="646.1" y="1891.0" width="1.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="649.1" y="1902.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="646.1" y="1875.0" width="1.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="649.1" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.66%)</title><rect x="648.0" y="1891.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="651.0" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.66%)</title><rect x="648.0" y="1875.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="651.0" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/424593705.accept (8 samples, 0.66%)</title><rect x="648.0" y="1859.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="651.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (8 samples, 0.66%)</title><rect x="648.0" y="1843.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="651.0" y="1854.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (8 samples, 0.66%)</title><rect x="648.0" y="1827.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="651.0" y="1838.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (8 samples, 0.66%)</title><rect x="648.0" y="1811.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="651.0" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.25%)</title><rect x="652.8" y="1795.0" width="3.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="655.8" y="1806.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="652.8" y="1779.0" width="3.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="655.8" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.15%)</title><rect x="655.8" y="1923.0" width="13.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="658.8" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.08%)</title><rect x="655.8" y="1907.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="658.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 1.07%)</title><rect x="656.7" y="1907.0" width="12.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="659.7" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.82%)</title><rect x="658.7" y="1891.0" width="9.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="661.7" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/424593705.accept (2 samples, 0.16%)</title><rect x="658.7" y="1875.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="661.7" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (2 samples, 0.16%)</title><rect x="658.7" y="1859.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="661.7" y="1870.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.16%)</title><rect x="658.7" y="1843.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="661.7" y="1854.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (2 samples, 0.16%)</title><rect x="658.7" y="1827.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="661.7" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/1147468640.accept (8 samples, 0.66%)</title><rect x="660.6" y="1875.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="663.6" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (8 samples, 0.66%)</title><rect x="660.6" y="1859.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="663.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$259/691973913.complete (8 samples, 0.66%)</title><rect x="660.6" y="1843.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="663.6" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (8 samples, 0.66%)</title><rect x="660.6" y="1827.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="663.6" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (8 samples, 0.66%)</title><rect x="660.6" y="1811.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="663.6" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 0.66%)</title><rect x="660.6" y="1795.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="663.6" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 0.66%)</title><rect x="660.6" y="1779.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="663.6" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (8 samples, 0.66%)</title><rect x="660.6" y="1763.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="663.6" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (8 samples, 0.66%)</title><rect x="660.6" y="1747.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="663.6" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.08%)</title><rect x="668.4" y="1891.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="671.4" y="1902.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.74%)</title><rect x="669.3" y="1923.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="672.3" y="1934.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.66%)</title><rect x="670.3" y="1907.0" width="7.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="673.3" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (6 samples, 0.49%)</title><rect x="678.1" y="1939.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="681.1" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.25%)</title><rect x="679.0" y="1923.0" width="2.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="682.0" y="1934.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="679.0" y="1907.0" width="2.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="682.0" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="681.9" y="1923.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="684.9" y="1934.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="682.9" y="1923.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="685.9" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.41%)</title><rect x="683.9" y="1987.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="686.9" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.41%)</title><rect x="683.9" y="1971.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="686.9" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.41%)</title><rect x="683.9" y="1955.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="686.9" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.41%)</title><rect x="683.9" y="1939.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="686.9" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/742797280.run (1 samples, 0.08%)</title><rect x="687.7" y="1923.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="690.7" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (217 samples, 17.83%)</title><rect x="688.7" y="1987.0" width="210.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="691.7" y="1998.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (217 samples, 17.83%)</title><rect x="688.7" y="1971.0" width="210.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="691.7" y="1982.0">java/util/concurrent/LinkedB..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (189 samples, 15.53%)</title><rect x="691.6" y="1955.0" width="183.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="694.6" y="1966.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (23 samples, 1.89%)</title><rect x="698.4" y="1939.0" width="22.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="701.4" y="1950.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.66%)</title><rect x="720.7" y="1939.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="723.7" y="1950.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="720.7" y="1923.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="723.7" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.58%)</title><rect x="721.7" y="1923.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="724.7" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.58%)</title><rect x="721.7" y="1907.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="724.7" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.58%)</title><rect x="721.7" y="1891.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="724.7" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (151 samples, 12.41%)</title><rect x="728.5" y="1939.0" width="146.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="731.5" y="1950.0">java/util/concurre..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (151 samples, 12.41%)</title><rect x="728.5" y="1923.0" width="146.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="731.5" y="1934.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.16%)</title><rect x="734.3" y="1907.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="737.3" y="1918.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.16%)</title><rect x="736.2" y="1907.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="739.2" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (135 samples, 11.09%)</title><rect x="738.2" y="1907.0" width="130.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="741.2" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.16%)</title><rect x="742.0" y="1891.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="745.0" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (26 samples, 2.14%)</title><rect x="744.0" y="1891.0" width="25.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="747.0" y="1902.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.58%)</title><rect x="755.6" y="1875.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="758.6" y="1886.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="755.6" y="1859.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="758.6" y="1870.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="756.6" y="1859.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="759.6" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="756.6" y="1843.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="759.6" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.25%)</title><rect x="757.6" y="1859.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="760.6" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.16%)</title><rect x="760.5" y="1859.0" width="1.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="763.5" y="1870.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.58%)</title><rect x="762.4" y="1875.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="765.4" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.08%)</title><rect x="769.2" y="1891.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="772.2" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.16%)</title><rect x="770.2" y="1891.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="773.2" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.66%)</title><rect x="772.1" y="1891.0" width="7.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="775.1" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (29 samples, 2.38%)</title><rect x="779.9" y="1891.0" width="28.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="782.9" y="1902.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (49 samples, 4.03%)</title><rect x="808.0" y="1891.0" width="47.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="811.0" y="1902.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (6 samples, 0.49%)</title><rect x="855.5" y="1891.0" width="5.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="858.5" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.08%)</title><rect x="861.3" y="1891.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="864.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="862.3" y="1891.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="865.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.25%)</title><rect x="863.2" y="1891.0" width="3.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="866.2" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.16%)</title><rect x="866.2" y="1891.0" width="1.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="869.2" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="868.1" y="1891.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="871.1" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.16%)</title><rect x="869.1" y="1907.0" width="1.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="872.1" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.33%)</title><rect x="871.0" y="1907.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="874.0" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (25 samples, 2.05%)</title><rect x="874.9" y="1955.0" width="24.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="877.9" y="1966.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (25 samples, 2.05%)</title><rect x="874.9" y="1939.0" width="24.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="877.9" y="1950.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (25 samples, 2.05%)</title><rect x="874.9" y="1923.0" width="24.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="877.9" y="1934.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (25 samples, 2.05%)</title><rect x="874.9" y="1907.0" width="24.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="877.9" y="1918.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="899.1" y="2035.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="902.1" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="899.1" y="2019.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="902.1" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="899.1" y="2003.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="902.1" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.08%)</title><rect x="899.1" y="1987.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="902.1" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.08%)</title><rect x="899.1" y="1971.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="902.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.08%)</title><rect x="899.1" y="1955.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="902.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.08%)</title><rect x="899.1" y="1939.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="902.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="899.1" y="1923.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="902.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="899.1" y="1907.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="902.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.offer (1 samples, 0.08%)</title><rect x="899.1" y="1891.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="902.1" y="1902.0"></text>
</g>
<g>
<title>start_thread (299 samples, 24.57%)</title><rect x="900.1" y="2035.0" width="289.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="903.1" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (299 samples, 24.57%)</title><rect x="900.1" y="2019.0" width="289.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="903.1" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 1.73%)</title><rect x="900.1" y="2003.0" width="20.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="903.1" y="2014.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 0.33%)</title><rect x="900.1" y="1987.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="903.1" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.33%)</title><rect x="900.1" y="1971.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="903.1" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="900.1" y="1955.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="903.1" y="1966.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.25%)</title><rect x="901.1" y="1955.0" width="2.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="904.1" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.31%)</title><rect x="904.0" y="1987.0" width="15.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="907.0" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.58%)</title><rect x="904.0" y="1971.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="907.0" y="1982.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.08%)</title><rect x="904.0" y="1955.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="907.0" y="1966.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.16%)</title><rect x="904.9" y="1955.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="907.9" y="1966.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.33%)</title><rect x="906.9" y="1955.0" width="3.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="909.9" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.33%)</title><rect x="910.8" y="1971.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="913.8" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.16%)</title><rect x="910.8" y="1955.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="913.8" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="910.8" y="1939.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="913.8" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="910.8" y="1923.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="913.8" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="910.8" y="1907.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="913.8" y="1918.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="911.7" y="1939.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="914.7" y="1950.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="911.7" y="1923.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="914.7" y="1934.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.08%)</title><rect x="911.7" y="1907.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="914.7" y="1918.0"></text>
</g>
<g>
<title>nmethod::preserve_callee_argument_oops(frame, RegisterMap const*, OopClosure*) (1 samples, 0.08%)</title><rect x="911.7" y="1891.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="914.7" y="1902.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.16%)</title><rect x="912.7" y="1955.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="915.7" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.16%)</title><rect x="912.7" y="1939.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="915.7" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.41%)</title><rect x="914.6" y="1971.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="917.6" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.41%)</title><rect x="914.6" y="1955.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="917.6" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.33%)</title><rect x="914.6" y="1939.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="917.6" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.33%)</title><rect x="914.6" y="1923.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="917.6" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.33%)</title><rect x="914.6" y="1907.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="917.6" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.33%)</title><rect x="914.6" y="1891.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="917.6" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.16%)</title><rect x="915.6" y="1875.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="918.6" y="1886.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="915.6" y="1859.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="918.6" y="1870.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.08%)</title><rect x="916.6" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="919.6" y="1870.0"></text>
</g>
<g>
<title>InstanceMirrorKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.08%)</title><rect x="917.5" y="1875.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="920.5" y="1886.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.08%)</title><rect x="918.5" y="1939.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="921.5" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.08%)</title><rect x="918.5" y="1923.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="921.5" y="1934.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.08%)</title><rect x="918.5" y="1907.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="921.5" y="1918.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.08%)</title><rect x="918.5" y="1891.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="921.5" y="1902.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.08%)</title><rect x="919.5" y="1987.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="922.5" y="1998.0"></text>
</g>
<g>
<title>JavaThread::run() (276 samples, 22.68%)</title><rect x="920.5" y="2003.0" width="267.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="923.5" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (276 samples, 22.68%)</title><rect x="920.5" y="1987.0" width="267.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="923.5" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (276 samples, 22.68%)</title><rect x="920.5" y="1971.0" width="267.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="923.5" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (276 samples, 22.68%)</title><rect x="920.5" y="1955.0" width="267.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="923.5" y="1966.0">CompileBroker::invoke_compiler_on_me..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (276 samples, 22.68%)</title><rect x="920.5" y="1939.0" width="267.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="923.5" y="1950.0">C2Compiler::compile_method(ciEnv*, c..</text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.08%)</title><rect x="920.5" y="1923.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="923.5" y="1934.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (275 samples, 22.60%)</title><rect x="921.4" y="1923.0" width="266.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="924.4" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*..</text>
</g>
<g>
<title>Compile::Code_Gen() (58 samples, 4.77%)</title><rect x="921.4" y="1907.0" width="56.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="924.4" y="1918.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.08%)</title><rect x="921.4" y="1891.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="924.4" y="1902.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.08%)</title><rect x="921.4" y="1875.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="924.4" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.08%)</title><rect x="921.4" y="1859.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="924.4" y="1870.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.25%)</title><rect x="922.4" y="1891.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="925.4" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.16%)</title><rect x="922.4" y="1875.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="925.4" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="922.4" y="1859.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="925.4" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="922.4" y="1843.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="925.4" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="923.4" y="1859.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="926.4" y="1870.0"></text>
</g>
<g>
<title>GrowableArray&lt;DIR_Chunk*&gt;::append(DIR_Chunk* const&amp;) (1 samples, 0.08%)</title><rect x="923.4" y="1843.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="926.4" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="924.3" y="1875.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="927.3" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="924.3" y="1859.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="927.3" y="1870.0"></text>
</g>
<g>
<title>GrowableArray&lt;DIR_Chunk*&gt;::append(DIR_Chunk* const&amp;) (1 samples, 0.08%)</title><rect x="924.3" y="1843.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="927.3" y="1854.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 0.58%)</title><rect x="925.3" y="1891.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="928.3" y="1902.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.58%)</title><rect x="925.3" y="1875.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="928.3" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.25%)</title><rect x="928.2" y="1859.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="931.2" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="931.1" y="1859.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="934.1" y="1870.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="931.1" y="1843.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="934.1" y="1854.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="931.1" y="1827.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="934.1" y="1838.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.08%)</title><rect x="932.1" y="1891.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="935.1" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.08%)</title><rect x="932.1" y="1875.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="935.1" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="932.1" y="1859.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="935.1" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.08%)</title><rect x="932.1" y="1843.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="935.1" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (46 samples, 3.78%)</title><rect x="933.1" y="1891.0" width="44.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="936.1" y="1902.0">Phas..</text>
</g>
<g>
<title>MachSpillCopyNode::out_RegMask() const (1 samples, 0.08%)</title><rect x="933.1" y="1875.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="936.1" y="1886.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.08%)</title><rect x="934.0" y="1875.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="937.0" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.08%)</title><rect x="935.0" y="1875.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="938.0" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.25%)</title><rect x="936.0" y="1875.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="939.0" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="936.9" y="1859.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="939.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.33%)</title><rect x="938.9" y="1875.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="941.9" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="938.9" y="1859.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="941.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.25%)</title><rect x="939.8" y="1859.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="942.8" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="941.8" y="1843.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="944.8" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.41%)</title><rect x="942.8" y="1875.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="945.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 0.74%)</title><rect x="947.6" y="1875.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="950.6" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.16%)</title><rect x="952.4" y="1859.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="955.4" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="954.4" y="1859.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="957.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="955.4" y="1859.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="958.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.33%)</title><rect x="956.3" y="1875.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="959.3" y="1886.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.08%)</title><rect x="957.3" y="1859.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="960.3" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.16%)</title><rect x="958.3" y="1859.0" width="1.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="961.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="960.2" y="1875.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="963.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.41%)</title><rect x="961.2" y="1875.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="964.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.25%)</title><rect x="963.1" y="1859.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="966.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="965.1" y="1843.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="968.1" y="1854.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.08%)</title><rect x="965.1" y="1827.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="968.1" y="1838.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="965.1" y="1811.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="968.1" y="1822.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.08%)</title><rect x="966.0" y="1875.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="969.0" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.08%)</title><rect x="966.0" y="1859.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="969.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.08%)</title><rect x="967.0" y="1875.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="970.0" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="967.0" y="1859.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="970.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 0.33%)</title><rect x="968.0" y="1875.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="971.0" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.25%)</title><rect x="968.9" y="1859.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="971.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.08%)</title><rect x="971.8" y="1875.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="974.8" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="971.8" y="1859.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="974.8" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.41%)</title><rect x="972.8" y="1875.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="975.8" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (205 samples, 16.84%)</title><rect x="977.7" y="1907.0" width="198.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="980.7" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::print_method(CompilerPhaseType, int) (1 samples, 0.08%)</title><rect x="977.7" y="1891.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="980.7" y="1902.0"></text>
</g>
<g>
<title>Ticks::stamp() (1 samples, 0.08%)</title><rect x="977.7" y="1875.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="980.7" y="1886.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="977.7" y="1859.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="980.7" y="1870.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="977.7" y="1843.0" width="0.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="980.7" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.33%)</title><rect x="978.6" y="1891.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="981.6" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.33%)</title><rect x="978.6" y="1875.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="981.6" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="978.6" y="1859.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="981.6" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.08%)</title><rect x="978.6" y="1843.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="981.6" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.08%)</title><rect x="978.6" y="1827.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="981.6" y="1838.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="978.6" y="1811.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.6" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="978.6" y="1795.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="981.6" y="1806.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="978.6" y="1779.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="981.6" y="1790.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="978.6" y="1763.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="981.6" y="1774.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_boxed_value_offset(int) const (1 samples, 0.08%)</title><rect x="978.6" y="1747.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="981.6" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.25%)</title><rect x="979.6" y="1859.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="982.6" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="980.6" y="1843.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="983.6" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="980.6" y="1827.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="983.6" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="980.6" y="1811.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="983.6" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="980.6" y="1795.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="983.6" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="980.6" y="1779.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="983.6" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="980.6" y="1763.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="983.6" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="980.6" y="1747.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="983.6" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="980.6" y="1731.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="983.6" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="980.6" y="1715.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="983.6" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="980.6" y="1699.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="983.6" y="1710.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.08%)</title><rect x="980.6" y="1683.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="983.6" y="1694.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.08%)</title><rect x="980.6" y="1667.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="983.6" y="1678.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="981.5" y="1843.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="984.5" y="1854.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.08%)</title><rect x="981.5" y="1827.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="984.5" y="1838.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="981.5" y="1811.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="984.5" y="1822.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.08%)</title><rect x="982.5" y="1891.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="985.5" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.08%)</title><rect x="982.5" y="1875.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="985.5" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.08%)</title><rect x="982.5" y="1859.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="985.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (177 samples, 14.54%)</title><rect x="983.5" y="1891.0" width="171.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="986.5" y="1902.0">PhaseIdealLoop::build_..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.25%)</title><rect x="983.5" y="1875.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="986.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.25%)</title><rect x="986.4" y="1875.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="989.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.08%)</title><rect x="988.3" y="1859.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="991.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (162 samples, 13.31%)</title><rect x="989.3" y="1875.0" width="157.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="992.3" y="1886.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (158 samples, 12.98%)</title><rect x="993.2" y="1859.0" width="153.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="996.2" y="1870.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.08%)</title><rect x="996.1" y="1843.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="999.1" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 0.49%)</title><rect x="997.1" y="1843.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1000.1" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (148 samples, 12.16%)</title><rect x="1002.9" y="1843.0" width="143.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1005.9" y="1854.0">PhaseIdealLoop::ge..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.08%)</title><rect x="1127.9" y="1827.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.9" y="1838.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1127.9" y="1811.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1130.9" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (16 samples, 1.31%)</title><rect x="1128.9" y="1827.0" width="15.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.16%)</title><rect x="1144.4" y="1827.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1145.4" y="1811.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.4" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.33%)</title><rect x="1146.4" y="1875.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.08%)</title><rect x="1149.3" y="1859.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.16%)</title><rect x="1150.2" y="1875.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.08%)</title><rect x="1150.2" y="1859.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.08%)</title><rect x="1150.2" y="1843.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.08%)</title><rect x="1151.2" y="1859.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.08%)</title><rect x="1151.2" y="1843.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1151.2" y="1827.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.2" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.16%)</title><rect x="1152.2" y="1875.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.16%)</title><rect x="1152.2" y="1859.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.2" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1152.2" y="1843.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.2" y="1854.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.08%)</title><rect x="1152.2" y="1827.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.2" y="1838.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1153.2" y="1843.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.2" y="1854.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1153.2" y="1827.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.2" y="1838.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1154.1" y="1875.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (17 samples, 1.40%)</title><rect x="1155.1" y="1891.0" width="16.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.1" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (17 samples, 1.40%)</title><rect x="1155.1" y="1875.0" width="16.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.1" y="1886.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1156.1" y="1859.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.1" y="1870.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1156.1" y="1843.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.1" y="1854.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1156.1" y="1827.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.1" y="1838.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1156.1" y="1811.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.1" y="1822.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1156.1" y="1795.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.1" y="1806.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1157.0" y="1859.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.0" y="1870.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1157.0" y="1843.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.0" y="1854.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1158.0" y="1859.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.0" y="1870.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1158.0" y="1843.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.0" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1158.0" y="1827.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.0" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1158.0" y="1811.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.0" y="1822.0"></text>
</g>
<g>
<title>LoadUBNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1159.0" y="1859.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.0" y="1870.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1159.0" y="1843.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.0" y="1854.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.08%)</title><rect x="1159.0" y="1827.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.0" y="1838.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.08%)</title><rect x="1159.0" y="1811.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.0" y="1822.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (8 samples, 0.66%)</title><rect x="1159.9" y="1859.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.9" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1163.8" y="1843.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.8" y="1854.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.08%)</title><rect x="1163.8" y="1827.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.8" y="1838.0"></text>
</g>
<g>
<title>ProjNode::hash() const (1 samples, 0.08%)</title><rect x="1163.8" y="1811.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.8" y="1822.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (3 samples, 0.25%)</title><rect x="1164.8" y="1843.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.8" y="1854.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (2 samples, 0.16%)</title><rect x="1165.8" y="1827.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.8" y="1838.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1167.7" y="1859.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.7" y="1870.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1167.7" y="1843.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.7" y="1854.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 0.25%)</title><rect x="1168.7" y="1859.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.7" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (3 samples, 0.25%)</title><rect x="1168.7" y="1843.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.7" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.25%)</title><rect x="1168.7" y="1827.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.7" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.25%)</title><rect x="1168.7" y="1811.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.7" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1168.7" y="1795.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.7" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1168.7" y="1779.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.7" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1168.7" y="1763.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.7" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1168.7" y="1747.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.7" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1168.7" y="1731.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.7" y="1742.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1168.7" y="1715.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.7" y="1726.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1168.7" y="1699.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.7" y="1710.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1169.6" y="1779.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.6" y="1790.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1169.6" y="1763.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.6" y="1774.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1170.6" y="1795.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.6" y="1806.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1170.6" y="1779.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.6" y="1790.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (2 samples, 0.16%)</title><rect x="1171.6" y="1891.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.6" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (2 samples, 0.16%)</title><rect x="1171.6" y="1875.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.6" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1171.6" y="1859.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.6" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.08%)</title><rect x="1171.6" y="1843.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.6" y="1854.0"></text>
</g>
<g>
<title>scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*) (1 samples, 0.08%)</title><rect x="1171.6" y="1827.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1174.6" y="1838.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.08%)</title><rect x="1171.6" y="1811.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.6" y="1822.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1171.6" y="1795.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.6" y="1806.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1171.6" y="1779.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.6" y="1790.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1171.6" y="1763.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.6" y="1774.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1171.6" y="1747.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.6" y="1758.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1172.5" y="1843.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.5" y="1854.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1172.5" y="1827.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.5" y="1838.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1172.5" y="1811.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.5" y="1822.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.16%)</title><rect x="1173.5" y="1891.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.5" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1173.5" y="1875.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1173.5" y="1859.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.5" y="1870.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1173.5" y="1843.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.5" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_lock_node(LockNode*) (1 samples, 0.08%)</title><rect x="1174.5" y="1875.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.5" y="1886.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.08%)</title><rect x="1174.5" y="1859.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.5" y="1870.0"></text>
</g>
<g>
<title>TypeNarrowKlass::make(TypePtr const*) (1 samples, 0.08%)</title><rect x="1174.5" y="1843.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.5" y="1854.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1174.5" y="1827.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1177.5" y="1838.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1175.5" y="1891.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1178.5" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.82%)</title><rect x="1176.4" y="1907.0" width="9.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.4" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.82%)</title><rect x="1176.4" y="1891.0" width="9.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.4" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.82%)</title><rect x="1176.4" y="1875.0" width="9.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.4" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.82%)</title><rect x="1176.4" y="1859.0" width="9.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.4" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.82%)</title><rect x="1176.4" y="1843.0" width="9.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.4" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.82%)</title><rect x="1176.4" y="1827.0" width="9.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.4" y="1838.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1176.4" y="1811.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.4" y="1822.0"></text>
</g>
<g>
<title>ciMethod::is_boxing_method() const (1 samples, 0.08%)</title><rect x="1176.4" y="1795.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.4" y="1806.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.74%)</title><rect x="1177.4" y="1811.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.4" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.74%)</title><rect x="1177.4" y="1795.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.74%)</title><rect x="1177.4" y="1779.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.74%)</title><rect x="1177.4" y="1763.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.4" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.74%)</title><rect x="1177.4" y="1747.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.4" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.74%)</title><rect x="1177.4" y="1731.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.66%)</title><rect x="1177.4" y="1715.0" width="7.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.66%)</title><rect x="1177.4" y="1699.0" width="7.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.4" y="1710.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.08%)</title><rect x="1177.4" y="1683.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.4" y="1694.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1177.4" y="1667.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.4" y="1678.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.08%)</title><rect x="1177.4" y="1651.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.4" y="1662.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.58%)</title><rect x="1178.4" y="1683.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.58%)</title><rect x="1178.4" y="1667.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.4" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.58%)</title><rect x="1178.4" y="1651.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.4" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.58%)</title><rect x="1178.4" y="1635.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.4" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.58%)</title><rect x="1178.4" y="1619.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.58%)</title><rect x="1178.4" y="1603.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.4" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.58%)</title><rect x="1178.4" y="1587.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.58%)</title><rect x="1178.4" y="1571.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.4" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.58%)</title><rect x="1178.4" y="1555.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.58%)</title><rect x="1178.4" y="1539.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.4" y="1550.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1178.4" y="1523.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.4" y="1534.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1178.4" y="1507.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.4" y="1518.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1178.4" y="1491.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.4" y="1502.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1178.4" y="1475.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.4" y="1486.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1178.4" y="1459.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.4" y="1470.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1178.4" y="1443.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.4" y="1454.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1178.4" y="1427.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.4" y="1438.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1178.4" y="1411.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.4" y="1422.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1178.4" y="1395.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.4" y="1406.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="1178.4" y="1379.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="1390.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1178.4" y="1363.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.4" y="1374.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1179.3" y="1523.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.3" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.33%)</title><rect x="1179.3" y="1507.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.3" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.33%)</title><rect x="1179.3" y="1491.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.3" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.33%)</title><rect x="1179.3" y="1475.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.3" y="1486.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.08%)</title><rect x="1179.3" y="1459.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.3" y="1470.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.08%)</title><rect x="1179.3" y="1443.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.3" y="1454.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.08%)</title><rect x="1179.3" y="1427.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.3" y="1438.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.08%)</title><rect x="1179.3" y="1411.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.3" y="1422.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.25%)</title><rect x="1180.3" y="1459.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.3" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1180.3" y="1443.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.3" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1180.3" y="1427.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.3" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1180.3" y="1411.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.3" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1180.3" y="1395.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.3" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1180.3" y="1379.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1180.3" y="1363.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.3" y="1347.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.3" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.3" y="1331.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.3" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.3" y="1315.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.3" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.3" y="1299.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.3" y="1283.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.3" y="1267.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.3" y="1251.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.3" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.3" y="1235.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.3" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.3" y="1219.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.3" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.3" y="1203.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.3" y="1187.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.3" y="1171.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.3" y="1155.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.3" y="1166.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.3" y="1139.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.3" y="1150.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind) (1 samples, 0.08%)</title><rect x="1180.3" y="1123.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.3" y="1134.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.08%)</title><rect x="1180.3" y="1107.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.3" y="1118.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1180.3" y="1091.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.3" y="1102.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1180.3" y="1075.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1183.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1181.3" y="1347.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="1358.0"></text>
</g>
<g>
<title>Parse::dynamic_branch_prediction(float&amp;, BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1181.3" y="1331.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="1342.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.08%)</title><rect x="1181.3" y="1315.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="1326.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1182.2" y="1443.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="1454.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1182.2" y="1427.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="1438.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1182.2" y="1411.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.2" y="1422.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1182.2" y="1395.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="1406.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.08%)</title><rect x="1182.2" y="1379.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.2" y="1390.0"></text>
</g>
<g>
<title>IdealKit::make_leaf_call(TypeFunc const*, unsigned char*, char const*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1182.2" y="1363.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.2" y="1374.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1182.2" y="1347.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="1358.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1182.2" y="1331.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="1342.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1183.2" y="1523.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1183.2" y="1507.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.2" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1183.2" y="1491.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.2" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1183.2" y="1475.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.2" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1183.2" y="1459.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1183.2" y="1443.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.2" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1183.2" y="1427.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.2" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1183.2" y="1411.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.2" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1183.2" y="1395.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.2" y="1406.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.08%)</title><rect x="1183.2" y="1379.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.2" y="1390.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1183.2" y="1363.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.2" y="1374.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1183.2" y="1347.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.2" y="1358.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1183.2" y="1331.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.2" y="1342.0"></text>
</g>
<g>
<title>Type::singleton() const (1 samples, 0.08%)</title><rect x="1183.2" y="1315.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.2" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.2" y="1379.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.2" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.2" y="1363.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.2" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.2" y="1347.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.2" y="1331.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.2" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.2" y="1315.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.2" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.2" y="1299.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.2" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.2" y="1283.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.2" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.2" y="1267.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.2" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.2" y="1251.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.2" y="1262.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1184.2" y="1235.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.2" y="1246.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.08%)</title><rect x="1184.2" y="1219.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.2" y="1230.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1184.2" y="1203.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.2" y="1214.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.08%)</title><rect x="1184.2" y="1187.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.2" y="1198.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1185.2" y="1715.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.2" y="1726.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1185.2" y="1699.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.2" y="1710.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1185.2" y="1683.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.2" y="1694.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1185.2" y="1667.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="1678.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1185.2" y="1651.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.2" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1185.2" y="1635.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.2" y="1646.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1185.2" y="1619.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.2" y="1630.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1185.2" y="1603.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.2" y="1614.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1185.2" y="1587.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.2" y="1598.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1185.2" y="1571.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.2" y="1582.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1185.2" y="1555.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.2" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1185.2" y="1539.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.2" y="1550.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1185.2" y="1523.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.2" y="1534.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1185.2" y="1507.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.2" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1185.2" y="1491.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.2" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1185.2" y="1475.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.2" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1185.2" y="1459.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1185.2" y="1443.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.2" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1185.2" y="1427.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="1438.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1185.2" y="1411.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.2" y="1422.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.16%)</title><rect x="1186.1" y="1907.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.1" y="1918.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1187.1" y="1891.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.1" y="1902.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.16%)</title><rect x="1188.1" y="2003.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.1" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.16%)</title><rect x="1188.1" y="1987.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.1" y="1998.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.16%)</title><rect x="1188.1" y="1971.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.1" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.16%)</title><rect x="1188.1" y="1955.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.1" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.16%)</title><rect x="1188.1" y="1939.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.1" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.16%)</title><rect x="1188.1" y="1923.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.1" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1188.1" y="1907.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.1" y="1918.0"></text>
</g>
<g>
<title>DerivedPointerTable::update_pointers() (1 samples, 0.08%)</title><rect x="1188.1" y="1891.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.1" y="1902.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.0" y="1907.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.0" y="1918.0"></text>
</g>
<g>
<title>FreeRegionList::add_ordered(FreeRegionList*) (1 samples, 0.08%)</title><rect x="1189.0" y="1891.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.0" y="1902.0"></text>
</g>
</g>
</svg>
