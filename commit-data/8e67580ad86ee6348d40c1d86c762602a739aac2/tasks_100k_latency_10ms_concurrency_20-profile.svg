<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="997"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="997"> </text>
<g id="frames">
<g>
<title>all (215 samples, 100.00%)</title><rect x="10.0" y="963.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="974.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (22 samples, 10.23%)</title><rect x="10.0" y="947.0" width="120.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="958.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.47%)</title><rect x="15.5" y="931.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.47%)</title><rect x="15.5" y="915.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.47%)</title><rect x="15.5" y="899.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.47%)</title><rect x="15.5" y="883.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.47%)</title><rect x="15.5" y="867.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.47%)</title><rect x="15.5" y="851.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.47%)</title><rect x="15.5" y="835.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.shouldBlock (1 samples, 0.47%)</title><rect x="15.5" y="819.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (20 samples, 9.30%)</title><rect x="21.0" y="931.0" width="109.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.0" y="942.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 1.86%)</title><rect x="21.0" y="915.0" width="21.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.0" y="926.0">c..</text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 1.86%)</title><rect x="21.0" y="899.0" width="21.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.0" y="910.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1443360828.accept (3 samples, 1.40%)</title><rect x="26.5" y="883.0" width="16.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.5" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (3 samples, 1.40%)</title><rect x="26.5" y="867.0" width="16.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="29.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 1.40%)</title><rect x="26.5" y="851.0" width="16.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="29.5" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 1.40%)</title><rect x="26.5" y="835.0" width="16.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.5" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.47%)</title><rect x="42.9" y="915.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="45.9" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.47%)</title><rect x="42.9" y="899.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="45.9" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.47%)</title><rect x="42.9" y="883.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="45.9" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.47%)</title><rect x="42.9" y="867.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="45.9" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.47%)</title><rect x="42.9" y="851.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="45.9" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.47%)</title><rect x="42.9" y="835.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="45.9" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.47%)</title><rect x="42.9" y="819.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.9" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.47%)</title><rect x="42.9" y="803.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="45.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.47%)</title><rect x="42.9" y="787.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="45.9" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.47%)</title><rect x="42.9" y="771.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="45.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/207890262.test (1 samples, 0.47%)</title><rect x="42.9" y="755.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="45.9" y="766.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 2.33%)</title><rect x="48.4" y="915.0" width="27.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="51.4" y="926.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1712047235.accept (4 samples, 1.86%)</title><rect x="48.4" y="899.0" width="22.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="51.4" y="910.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (4 samples, 1.86%)</title><rect x="48.4" y="883.0" width="22.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.4" y="894.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 0.47%)</title><rect x="48.4" y="867.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="51.4" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 0.47%)</title><rect x="48.4" y="851.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="51.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 0.47%)</title><rect x="48.4" y="835.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.47%)</title><rect x="48.4" y="819.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="51.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.47%)</title><rect x="48.4" y="803.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.47%)</title><rect x="48.4" y="787.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="51.4" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.40%)</title><rect x="53.9" y="867.0" width="16.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="56.9" y="878.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.40%)</title><rect x="53.9" y="851.0" width="16.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.9" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.40%)</title><rect x="53.9" y="835.0" width="16.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="56.9" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 1.40%)</title><rect x="53.9" y="819.0" width="16.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.47%)</title><rect x="70.4" y="899.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="73.4" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.47%)</title><rect x="70.4" y="883.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="73.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 4.65%)</title><rect x="75.9" y="915.0" width="54.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.9" y="926.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 4.65%)</title><rect x="75.9" y="899.0" width="54.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="78.9" y="910.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 2.79%)</title><rect x="75.9" y="883.0" width="32.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="78.9" y="894.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.40%)</title><rect x="75.9" y="867.0" width="16.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.40%)</title><rect x="75.9" y="851.0" width="16.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.47%)</title><rect x="75.9" y="835.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="78.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.47%)</title><rect x="75.9" y="819.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="78.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.47%)</title><rect x="75.9" y="803.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.47%)</title><rect x="75.9" y="787.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="78.9" y="798.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1 samples, 0.47%)</title><rect x="75.9" y="771.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="78.9" y="782.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.47%)</title><rect x="75.9" y="755.0" width="5.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="78.9" y="766.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.47%)</title><rect x="75.9" y="739.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="78.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.93%)</title><rect x="81.3" y="835.0" width="11.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="84.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.93%)</title><rect x="81.3" y="819.0" width="11.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="84.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.47%)</title><rect x="81.3" y="803.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="84.3" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.47%)</title><rect x="81.3" y="787.0" width="5.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="84.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.47%)</title><rect x="86.8" y="803.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="89.8" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.47%)</title><rect x="86.8" y="787.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.8" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.47%)</title><rect x="86.8" y="771.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="89.8" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.47%)</title><rect x="86.8" y="755.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.8" y="766.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.47%)</title><rect x="86.8" y="739.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="89.8" y="750.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.47%)</title><rect x="86.8" y="723.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.8" y="734.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.47%)</title><rect x="86.8" y="707.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="89.8" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.47%)</title><rect x="86.8" y="691.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="89.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.40%)</title><rect x="92.3" y="867.0" width="16.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="95.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.40%)</title><rect x="92.3" y="851.0" width="16.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="95.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.40%)</title><rect x="92.3" y="835.0" width="16.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.40%)</title><rect x="92.3" y="819.0" width="16.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="95.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.47%)</title><rect x="92.3" y="803.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="95.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.93%)</title><rect x="97.8" y="803.0" width="11.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="100.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.93%)</title><rect x="97.8" y="787.0" width="11.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="100.8" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.47%)</title><rect x="97.8" y="771.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="100.8" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.47%)</title><rect x="97.8" y="755.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="100.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.47%)</title><rect x="103.3" y="771.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="106.3" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.47%)</title><rect x="103.3" y="755.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="106.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.93%)</title><rect x="108.8" y="883.0" width="11.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="111.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.93%)</title><rect x="108.8" y="867.0" width="11.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="111.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.93%)</title><rect x="108.8" y="851.0" width="11.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="111.8" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.47%)</title><rect x="108.8" y="835.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="111.8" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.47%)</title><rect x="108.8" y="819.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="111.8" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.47%)</title><rect x="108.8" y="803.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="111.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.47%)</title><rect x="108.8" y="787.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="111.8" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.47%)</title><rect x="108.8" y="771.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="111.8" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.47%)</title><rect x="108.8" y="755.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="111.8" y="766.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.47%)</title><rect x="108.8" y="739.0" width="5.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="111.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.47%)</title><rect x="114.3" y="835.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="117.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.47%)</title><rect x="114.3" y="819.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="117.3" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.47%)</title><rect x="114.3" y="803.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="117.3" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.47%)</title><rect x="114.3" y="787.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="117.3" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.47%)</title><rect x="114.3" y="771.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="117.3" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.47%)</title><rect x="114.3" y="755.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="117.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.47%)</title><rect x="114.3" y="739.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="117.3" y="750.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.47%)</title><rect x="114.3" y="723.0" width="5.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="117.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.93%)</title><rect x="119.8" y="883.0" width="10.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="122.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.47%)</title><rect x="119.8" y="867.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="122.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.47%)</title><rect x="119.8" y="851.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="122.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.47%)</title><rect x="119.8" y="835.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="122.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (1 samples, 0.47%)</title><rect x="119.8" y="819.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="122.8" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.47%)</title><rect x="119.8" y="803.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="122.8" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.47%)</title><rect x="119.8" y="787.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="122.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.47%)</title><rect x="125.3" y="867.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="128.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.47%)</title><rect x="125.3" y="851.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="128.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.47%)</title><rect x="125.3" y="835.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="128.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.47%)</title><rect x="125.3" y="819.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="128.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.47%)</title><rect x="125.3" y="803.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="128.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.&lt;init&gt; (1 samples, 0.47%)</title><rect x="125.3" y="787.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="128.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.sizeBuffer (1 samples, 0.47%)</title><rect x="125.3" y="771.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="128.3" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putInt (1 samples, 0.47%)</title><rect x="125.3" y="755.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="128.3" y="766.0"></text>
</g>
<g>
<title>java/nio/Bits.putInt (1 samples, 0.47%)</title><rect x="125.3" y="739.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="128.3" y="750.0"></text>
</g>
<g>
<title>java/lang/Thread.run (147 samples, 68.37%)</title><rect x="130.7" y="947.0" width="806.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="133.7" y="958.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (147 samples, 68.37%)</title><rect x="130.7" y="931.0" width="806.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="133.7" y="942.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (147 samples, 68.37%)</title><rect x="130.7" y="915.0" width="806.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="133.7" y="926.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1445714071.run (138 samples, 64.19%)</title><rect x="136.2" y="899.0" width="757.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="139.2" y="910.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1445714071.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (138 samples, 64.19%)</title><rect x="136.2" y="883.0" width="757.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="139.2" y="894.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (138 samples, 64.19%)</title><rect x="136.2" y="867.0" width="757.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="139.2" y="878.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (131 samples, 60.93%)</title><rect x="136.2" y="851.0" width="719.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="139.2" y="862.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (21 samples, 9.77%)</title><rect x="147.2" y="835.0" width="115.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="150.2" y="846.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (20 samples, 9.30%)</title><rect x="152.7" y="819.0" width="109.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="155.7" y="830.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (20 samples, 9.30%)</title><rect x="152.7" y="803.0" width="109.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="155.7" y="814.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (20 samples, 9.30%)</title><rect x="152.7" y="787.0" width="109.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="155.7" y="798.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (20 samples, 9.30%)</title><rect x="152.7" y="771.0" width="109.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="155.7" y="782.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (20 samples, 9.30%)</title><rect x="152.7" y="755.0" width="109.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="155.7" y="766.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (8 samples, 3.72%)</title><rect x="152.7" y="739.0" width="43.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="155.7" y="750.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (8 samples, 3.72%)</title><rect x="152.7" y="723.0" width="43.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="155.7" y="734.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.47%)</title><rect x="152.7" y="707.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="155.7" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.47%)</title><rect x="152.7" y="691.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="155.7" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.47%)</title><rect x="152.7" y="675.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="155.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (7 samples, 3.26%)</title><rect x="158.2" y="707.0" width="38.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="161.2" y="718.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (7 samples, 3.26%)</title><rect x="158.2" y="691.0" width="38.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="161.2" y="702.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (7 samples, 3.26%)</title><rect x="158.2" y="675.0" width="38.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="161.2" y="686.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (10 samples, 4.65%)</title><rect x="196.6" y="739.0" width="54.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="199.6" y="750.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.47%)</title><rect x="196.6" y="723.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="199.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.47%)</title><rect x="196.6" y="707.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="199.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.47%)</title><rect x="202.1" y="723.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="205.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (8 samples, 3.72%)</title><rect x="207.6" y="723.0" width="43.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="210.6" y="734.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.40%)</title><rect x="207.6" y="707.0" width="16.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="210.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 1.40%)</title><rect x="207.6" y="691.0" width="16.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="210.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 2.33%)</title><rect x="224.0" y="707.0" width="27.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.0" y="718.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 2.33%)</title><rect x="224.0" y="691.0" width="27.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="227.0" y="702.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 2.33%)</title><rect x="224.0" y="675.0" width="27.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.0" y="686.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.93%)</title><rect x="224.0" y="659.0" width="11.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="227.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.47%)</title><rect x="229.5" y="643.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="232.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.47%)</title><rect x="229.5" y="627.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="232.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.47%)</title><rect x="229.5" y="611.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="232.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.47%)</title><rect x="229.5" y="595.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="232.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.47%)</title><rect x="229.5" y="579.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="232.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.47%)</title><rect x="235.0" y="659.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.47%)</title><rect x="235.0" y="643.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.47%)</title><rect x="235.0" y="627.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.47%)</title><rect x="235.0" y="611.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.0" y="622.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.47%)</title><rect x="235.0" y="595.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.93%)</title><rect x="240.5" y="659.0" width="11.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="243.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.93%)</title><rect x="251.5" y="739.0" width="11.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.93%)</title><rect x="251.5" y="723.0" width="11.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.93%)</title><rect x="251.5" y="707.0" width="11.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="254.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.93%)</title><rect x="251.5" y="691.0" width="11.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="254.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.93%)</title><rect x="251.5" y="675.0" width="11.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (1 samples, 0.47%)</title><rect x="257.0" y="659.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (103 samples, 47.91%)</title><rect x="262.5" y="835.0" width="565.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.5" y="846.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (18 samples, 8.37%)</title><rect x="262.5" y="819.0" width="98.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="265.5" y="830.0">com/linecorp..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (17 samples, 7.91%)</title><rect x="268.0" y="803.0" width="93.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="271.0" y="814.0">org/slf4j/M..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (15 samples, 6.98%)</title><rect x="278.9" y="787.0" width="82.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.9" y="798.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.47%)</title><rect x="295.4" y="771.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.4" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.47%)</title><rect x="295.4" y="755.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="298.4" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.47%)</title><rect x="295.4" y="739.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="298.4" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.47%)</title><rect x="295.4" y="723.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.4" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (11 samples, 5.12%)</title><rect x="300.9" y="771.0" width="60.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="303.9" y="782.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.remove (9 samples, 4.19%)</title><rect x="311.9" y="755.0" width="49.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="314.9" y="766.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (9 samples, 4.19%)</title><rect x="311.9" y="739.0" width="49.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="314.9" y="750.0">java/..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.47%)</title><rect x="355.8" y="723.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="358.8" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.47%)</title><rect x="361.3" y="819.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="364.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.47%)</title><rect x="361.3" y="803.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="364.3" y="814.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.47%)</title><rect x="361.3" y="787.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="364.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (22 samples, 10.23%)</title><rect x="366.7" y="819.0" width="120.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="369.7" y="830.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (22 samples, 10.23%)</title><rect x="366.7" y="803.0" width="120.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="369.7" y="814.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (6 samples, 2.79%)</title><rect x="377.7" y="787.0" width="33.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="380.7" y="798.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 2.79%)</title><rect x="377.7" y="771.0" width="33.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="380.7" y="782.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 2.79%)</title><rect x="377.7" y="755.0" width="33.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="380.7" y="766.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.86%)</title><rect x="383.2" y="739.0" width="22.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="386.2" y="750.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 1.86%)</title><rect x="383.2" y="723.0" width="22.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="386.2" y="734.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.86%)</title><rect x="383.2" y="707.0" width="22.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="386.2" y="718.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.93%)</title><rect x="388.7" y="691.0" width="11.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="391.7" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.47%)</title><rect x="388.7" y="675.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="391.7" y="686.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.47%)</title><rect x="388.7" y="659.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="391.7" y="670.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.47%)</title><rect x="394.2" y="675.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="397.2" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.47%)</title><rect x="394.2" y="659.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="397.2" y="670.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.47%)</title><rect x="394.2" y="643.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="397.2" y="654.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.47%)</title><rect x="399.7" y="691.0" width="5.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="402.7" y="702.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.47%)</title><rect x="405.2" y="739.0" width="5.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="408.2" y="750.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (14 samples, 6.51%)</title><rect x="410.7" y="787.0" width="76.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="413.7" y="798.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (14 samples, 6.51%)</title><rect x="410.7" y="771.0" width="76.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="413.7" y="782.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.93%)</title><rect x="410.7" y="755.0" width="10.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="413.7" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.93%)</title><rect x="410.7" y="739.0" width="10.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="413.7" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.93%)</title><rect x="410.7" y="723.0" width="10.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="413.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.93%)</title><rect x="410.7" y="707.0" width="10.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="413.7" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.93%)</title><rect x="410.7" y="691.0" width="10.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="413.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.93%)</title><rect x="410.7" y="675.0" width="10.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="413.7" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (12 samples, 5.58%)</title><rect x="421.6" y="755.0" width="65.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="424.6" y="766.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (10 samples, 4.65%)</title><rect x="432.6" y="739.0" width="54.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="435.6" y="750.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 2.33%)</title><rect x="460.0" y="723.0" width="27.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="463.0" y="734.0">j..</text>
</g>
<g>
<title>vtable stub (2 samples, 0.93%)</title><rect x="476.5" y="707.0" width="11.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="479.5" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (58 samples, 26.98%)</title><rect x="487.5" y="819.0" width="318.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="490.5" y="830.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (58 samples, 26.98%)</title><rect x="487.5" y="803.0" width="318.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="490.5" y="814.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/229675740.process (53 samples, 24.65%)</title><rect x="493.0" y="787.0" width="290.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="496.0" y="798.0">com/linecorp/decaton/benchmark/DecatonR..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (53 samples, 24.65%)</title><rect x="493.0" y="771.0" width="290.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="496.0" y="782.0">com/linecorp/decaton/benchmark/DecatonR..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (52 samples, 24.19%)</title><rect x="498.5" y="755.0" width="285.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="501.5" y="766.0">com/linecorp/decaton/benchmark/Recordi..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.47%)</title><rect x="498.5" y="739.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="501.5" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.47%)</title><rect x="498.5" y="723.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="501.5" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.47%)</title><rect x="498.5" y="707.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="501.5" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.47%)</title><rect x="498.5" y="691.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="501.5" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (51 samples, 23.72%)</title><rect x="504.0" y="739.0" width="279.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="507.0" y="750.0">com/linecorp/decaton/benchmark/Record..</text>
</g>
<g>
<title>java/lang/Thread.sleep (51 samples, 23.72%)</title><rect x="504.0" y="723.0" width="279.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="507.0" y="734.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (44 samples, 20.47%)</title><rect x="542.4" y="707.0" width="241.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="545.4" y="718.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 2.33%)</title><rect x="547.9" y="691.0" width="27.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="550.9" y="702.0">H..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.47%)</title><rect x="575.3" y="691.0" width="5.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="578.3" y="702.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.47%)</title><rect x="580.8" y="691.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="583.8" y="702.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (36 samples, 16.74%)</title><rect x="586.3" y="691.0" width="197.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="589.3" y="702.0">os::sleep(Thread*, long, b..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.93%)</title><rect x="624.7" y="675.0" width="11.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="627.7" y="686.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.47%)</title><rect x="630.2" y="659.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="633.2" y="670.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.93%)</title><rect x="635.7" y="675.0" width="11.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="638.7" y="686.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.93%)</title><rect x="635.7" y="659.0" width="11.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="638.7" y="670.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.40%)</title><rect x="646.7" y="675.0" width="16.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="649.7" y="686.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.47%)</title><rect x="663.1" y="675.0" width="5.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="666.1" y="686.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (14 samples, 6.51%)</title><rect x="668.6" y="675.0" width="76.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="671.6" y="686.0">__pthrea..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.93%)</title><rect x="745.4" y="675.0" width="11.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="748.4" y="686.0"></text>
</g>
<g>
<title>_init (1 samples, 0.47%)</title><rect x="756.4" y="675.0" width="5.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="759.4" y="686.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.93%)</title><rect x="761.9" y="675.0" width="11.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="764.9" y="686.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.93%)</title><rect x="772.9" y="675.0" width="11.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="775.9" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (2 samples, 0.93%)</title><rect x="783.9" y="787.0" width="10.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="786.9" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (2 samples, 0.93%)</title><rect x="783.9" y="771.0" width="10.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="786.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/143385800.get$Lambda (2 samples, 0.93%)</title><rect x="783.9" y="755.0" width="10.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="786.9" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/143385800.&lt;init&gt; (2 samples, 0.93%)</title><rect x="783.9" y="739.0" width="10.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="786.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.93%)</title><rect x="794.8" y="787.0" width="11.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="797.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.86%)</title><rect x="805.8" y="819.0" width="22.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="808.8" y="830.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.47%)</title><rect x="822.3" y="803.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="825.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 2.33%)</title><rect x="827.8" y="835.0" width="27.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="830.8" y="846.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.47%)</title><rect x="827.8" y="819.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="830.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.86%)</title><rect x="833.3" y="819.0" width="21.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="836.3" y="830.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.86%)</title><rect x="833.3" y="803.0" width="21.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="836.3" y="814.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$266/383007303.accept (1 samples, 0.47%)</title><rect x="833.3" y="787.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="836.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.47%)</title><rect x="833.3" y="771.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="836.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.47%)</title><rect x="833.3" y="755.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="836.3" y="766.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.47%)</title><rect x="833.3" y="739.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="836.3" y="750.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.47%)</title><rect x="833.3" y="723.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="836.3" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.47%)</title><rect x="833.3" y="707.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="836.3" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.47%)</title><rect x="833.3" y="691.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="836.3" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.47%)</title><rect x="833.3" y="675.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="836.3" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.47%)</title><rect x="833.3" y="659.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="836.3" y="670.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.47%)</title><rect x="833.3" y="643.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="836.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$267/513407616.accept (3 samples, 1.40%)</title><rect x="838.7" y="787.0" width="16.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="841.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (3 samples, 1.40%)</title><rect x="838.7" y="771.0" width="16.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="841.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1789133961.complete (3 samples, 1.40%)</title><rect x="838.7" y="755.0" width="16.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="841.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (3 samples, 1.40%)</title><rect x="838.7" y="739.0" width="16.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="841.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (3 samples, 1.40%)</title><rect x="838.7" y="723.0" width="16.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="841.7" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 1.40%)</title><rect x="838.7" y="707.0" width="16.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="841.7" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 1.40%)</title><rect x="838.7" y="691.0" width="16.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="841.7" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 1.40%)</title><rect x="838.7" y="675.0" width="16.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="841.7" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 1.40%)</title><rect x="838.7" y="659.0" width="16.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="841.7" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (7 samples, 3.26%)</title><rect x="855.2" y="851.0" width="38.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="858.2" y="862.0">com..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.93%)</title><rect x="893.6" y="899.0" width="11.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="896.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.93%)</title><rect x="893.6" y="883.0" width="11.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="896.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.93%)</title><rect x="893.6" y="867.0" width="11.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="896.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.93%)</title><rect x="893.6" y="851.0" width="11.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="896.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 2.79%)</title><rect x="904.6" y="899.0" width="32.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="907.6" y="910.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 2.33%)</title><rect x="904.6" y="883.0" width="27.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="907.6" y="894.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (1 samples, 0.47%)</title><rect x="910.1" y="867.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="913.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.47%)</title><rect x="915.6" y="867.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="918.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.93%)</title><rect x="921.1" y="867.0" width="10.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="924.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.93%)</title><rect x="921.1" y="851.0" width="10.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="924.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.47%)</title><rect x="932.0" y="883.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="935.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.47%)</title><rect x="937.5" y="947.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="940.5" y="958.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.47%)</title><rect x="937.5" y="931.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="940.5" y="942.0"></text>
</g>
<g>
<title>start_thread (45 samples, 20.93%)</title><rect x="943.0" y="947.0" width="247.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="946.0" y="958.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (45 samples, 20.93%)</title><rect x="943.0" y="931.0" width="247.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="946.0" y="942.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 3.26%)</title><rect x="943.0" y="915.0" width="38.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="946.0" y="926.0">Gan..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.47%)</title><rect x="943.0" y="899.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="946.0" y="910.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.47%)</title><rect x="943.0" y="883.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="946.0" y="894.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.47%)</title><rect x="943.0" y="867.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="946.0" y="878.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 2.79%)</title><rect x="948.5" y="899.0" width="32.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="951.5" y="910.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 1.86%)</title><rect x="948.5" y="883.0" width="22.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="951.5" y="894.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 1.86%)</title><rect x="948.5" y="867.0" width="22.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="951.5" y="878.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.93%)</title><rect x="954.0" y="851.0" width="11.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="957.0" y="862.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.47%)</title><rect x="965.0" y="851.0" width="5.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="968.0" y="862.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.47%)</title><rect x="970.5" y="883.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="973.5" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.47%)</title><rect x="970.5" y="867.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="973.5" y="878.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.47%)</title><rect x="970.5" y="851.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="973.5" y="862.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.47%)</title><rect x="976.0" y="883.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="979.0" y="894.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.47%)</title><rect x="976.0" y="867.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="979.0" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.47%)</title><rect x="976.0" y="851.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="979.0" y="862.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.47%)</title><rect x="976.0" y="835.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="979.0" y="846.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.47%)</title><rect x="976.0" y="819.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="979.0" y="830.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.47%)</title><rect x="976.0" y="803.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="979.0" y="814.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.47%)</title><rect x="976.0" y="787.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="979.0" y="798.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.47%)</title><rect x="976.0" y="771.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="979.0" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.47%)</title><rect x="976.0" y="755.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="979.0" y="766.0"></text>
</g>
<g>
<title>JavaThread::run() (38 samples, 17.67%)</title><rect x="981.4" y="915.0" width="208.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="984.4" y="926.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (38 samples, 17.67%)</title><rect x="981.4" y="899.0" width="208.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="984.4" y="910.0">JavaThread::thread_main_inn..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (38 samples, 17.67%)</title><rect x="981.4" y="883.0" width="208.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="984.4" y="894.0">CompileBroker::compiler_thr..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (37 samples, 17.21%)</title><rect x="981.4" y="867.0" width="203.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="984.4" y="878.0">CompileBroker::invoke_compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (35 samples, 16.28%)</title><rect x="981.4" y="851.0" width="192.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="984.4" y="862.0">C2Compiler::compile_metho..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (35 samples, 16.28%)</title><rect x="981.4" y="835.0" width="192.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="984.4" y="846.0">Compile::Compile(ciEnv*, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (22 samples, 10.23%)</title><rect x="981.4" y="819.0" width="120.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="984.4" y="830.0">Compile::Code_G..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 1.86%)</title><rect x="981.4" y="803.0" width="22.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="984.4" y="814.0">C..</text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.47%)</title><rect x="992.4" y="787.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="995.4" y="798.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.47%)</title><rect x="992.4" y="771.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="995.4" y="782.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.47%)</title><rect x="997.9" y="787.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1000.9" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.40%)</title><rect x="1003.4" y="803.0" width="16.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1006.4" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.40%)</title><rect x="1003.4" y="787.0" width="16.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1006.4" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.47%)</title><rect x="1003.4" y="771.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1006.4" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.47%)</title><rect x="1008.9" y="771.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1011.9" y="782.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.47%)</title><rect x="1008.9" y="755.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1011.9" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.47%)</title><rect x="1014.4" y="771.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1017.4" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (15 samples, 6.98%)</title><rect x="1019.9" y="803.0" width="82.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1022.9" y="814.0">PhaseChai..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.47%)</title><rect x="1019.9" y="787.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1022.9" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="1019.9" y="771.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1022.9" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.40%)</title><rect x="1025.3" y="787.0" width="16.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1028.3" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.93%)</title><rect x="1041.8" y="787.0" width="11.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1044.8" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.47%)</title><rect x="1052.8" y="787.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1055.8" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.93%)</title><rect x="1058.3" y="787.0" width="11.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1061.3" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.40%)</title><rect x="1069.3" y="787.0" width="16.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1072.3" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.47%)</title><rect x="1085.7" y="787.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1088.7" y="798.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.47%)</title><rect x="1091.2" y="787.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1094.2" y="798.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.47%)</title><rect x="1091.2" y="771.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1094.2" y="782.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.47%)</title><rect x="1096.7" y="787.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1099.7" y="798.0"></text>
</g>
<g>
<title>Compile::Optimize() (10 samples, 4.65%)</title><rect x="1102.2" y="819.0" width="54.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1105.2" y="830.0">Compi..</text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.47%)</title><rect x="1102.2" y="803.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1105.2" y="814.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.47%)</title><rect x="1102.2" y="787.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1105.2" y="798.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.47%)</title><rect x="1107.7" y="803.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1110.7" y="814.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.47%)</title><rect x="1107.7" y="787.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.7" y="798.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.47%)</title><rect x="1107.7" y="771.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1110.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (4 samples, 1.86%)</title><rect x="1113.2" y="803.0" width="21.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.2" y="814.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.93%)</title><rect x="1113.2" y="787.0" width="10.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.2" y="798.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.47%)</title><rect x="1113.2" y="771.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.2" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.47%)</title><rect x="1118.7" y="771.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1121.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.47%)</title><rect x="1118.7" y="755.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.7" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.47%)</title><rect x="1124.1" y="787.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.1" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.47%)</title><rect x="1129.6" y="787.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.6" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.47%)</title><rect x="1129.6" y="771.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.6" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.47%)</title><rect x="1129.6" y="755.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.6" y="766.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.47%)</title><rect x="1129.6" y="739.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.6" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.93%)</title><rect x="1135.1" y="803.0" width="11.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.1" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.93%)</title><rect x="1135.1" y="787.0" width="11.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.1" y="798.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.47%)</title><rect x="1135.1" y="771.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.1" y="782.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.47%)</title><rect x="1135.1" y="755.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.1" y="766.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.47%)</title><rect x="1135.1" y="739.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.1" y="750.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.47%)</title><rect x="1135.1" y="723.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.1" y="734.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.47%)</title><rect x="1135.1" y="707.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.1" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.47%)</title><rect x="1135.1" y="691.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.1" y="702.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.47%)</title><rect x="1135.1" y="675.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.1" y="686.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.47%)</title><rect x="1135.1" y="659.0" width="5.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1138.1" y="670.0"></text>
</g>
<g>
<title>URShiftLNode::Value(PhaseTransform*) const (1 samples, 0.47%)</title><rect x="1140.6" y="771.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.6" y="782.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.47%)</title><rect x="1140.6" y="755.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.6" y="766.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.47%)</title><rect x="1140.6" y="739.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.6" y="750.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.47%)</title><rect x="1146.1" y="803.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.1" y="814.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.47%)</title><rect x="1146.1" y="787.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.1" y="798.0"></text>
</g>
<g>
<title>PhaseMacroExpand::prefetch_allocation(Node*, Node*&amp;, Node*&amp;, Node*, Node*, Node*) (1 samples, 0.47%)</title><rect x="1146.1" y="771.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.1" y="782.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.47%)</title><rect x="1151.6" y="803.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.6" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.40%)</title><rect x="1157.1" y="819.0" width="16.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.1" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.40%)</title><rect x="1157.1" y="803.0" width="16.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.40%)</title><rect x="1157.1" y="787.0" width="16.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.40%)</title><rect x="1157.1" y="771.0" width="16.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.40%)</title><rect x="1157.1" y="755.0" width="16.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.40%)</title><rect x="1157.1" y="739.0" width="16.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.1" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.93%)</title><rect x="1157.1" y="723.0" width="10.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.1" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.93%)</title><rect x="1157.1" y="707.0" width="10.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.93%)</title><rect x="1157.1" y="691.0" width="10.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.93%)</title><rect x="1157.1" y="675.0" width="10.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.93%)</title><rect x="1157.1" y="659.0" width="10.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.93%)</title><rect x="1157.1" y="643.0" width="10.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.1" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.93%)</title><rect x="1157.1" y="627.0" width="10.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.1" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.93%)</title><rect x="1157.1" y="611.0" width="10.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.93%)</title><rect x="1157.1" y="595.0" width="10.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.93%)</title><rect x="1157.1" y="579.0" width="10.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.93%)</title><rect x="1157.1" y="563.0" width="10.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.93%)</title><rect x="1157.1" y="547.0" width="10.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.1" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.93%)</title><rect x="1157.1" y="531.0" width="10.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.1" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.93%)</title><rect x="1157.1" y="515.0" width="10.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.93%)</title><rect x="1157.1" y="499.0" width="10.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.93%)</title><rect x="1157.1" y="483.0" width="10.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.93%)</title><rect x="1157.1" y="467.0" width="10.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.93%)</title><rect x="1157.1" y="451.0" width="10.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.1" y="462.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.47%)</title><rect x="1157.1" y="435.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.1" y="446.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.47%)</title><rect x="1157.1" y="419.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.1" y="430.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.47%)</title><rect x="1157.1" y="403.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.1" y="414.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.47%)</title><rect x="1157.1" y="387.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.1" y="398.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.47%)</title><rect x="1157.1" y="371.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.1" y="382.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="1157.1" y="355.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.1" y="366.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.47%)</title><rect x="1157.1" y="339.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.1" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.47%)</title><rect x="1157.1" y="323.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.1" y="334.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.47%)</title><rect x="1157.1" y="307.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.1" y="318.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.47%)</title><rect x="1157.1" y="291.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.1" y="302.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.47%)</title><rect x="1157.1" y="275.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.1" y="286.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.47%)</title><rect x="1157.1" y="259.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.1" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1162.6" y="435.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.6" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1162.6" y="419.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1162.6" y="403.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1162.6" y="387.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1162.6" y="371.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1162.6" y="355.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.6" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1162.6" y="339.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.6" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1162.6" y="323.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1162.6" y="307.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1162.6" y="291.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1162.6" y="275.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1162.6" y="259.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.6" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1162.6" y="243.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.6" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1162.6" y="227.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1162.6" y="211.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1162.6" y="195.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1162.6" y="179.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1162.6" y="163.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.6" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1162.6" y="147.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.6" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1162.6" y="131.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.6" y="142.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.47%)</title><rect x="1162.6" y="115.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.6" y="126.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.47%)</title><rect x="1162.6" y="99.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.6" y="110.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.47%)</title><rect x="1162.6" y="83.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.6" y="94.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.47%)</title><rect x="1162.6" y="67.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.6" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.47%)</title><rect x="1162.6" y="51.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.6" y="62.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.47%)</title><rect x="1162.6" y="35.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.6" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1168.0" y="723.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.0" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1168.0" y="707.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.0" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1168.0" y="691.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1168.0" y="675.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1168.0" y="659.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1168.0" y="643.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1168.0" y="627.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.0" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1168.0" y="611.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.0" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1168.0" y="595.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1168.0" y="579.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1168.0" y="563.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1168.0" y="547.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1168.0" y="531.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.0" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1168.0" y="515.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.0" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1168.0" y="499.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.47%)</title><rect x="1168.0" y="483.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.0" y="494.0"></text>
</g>
<g>
<title>GraphKit::GraphKit(JVMState*) (1 samples, 0.47%)</title><rect x="1168.0" y="467.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.0" y="478.0"></text>
</g>
<g>
<title>CompileBroker::maybe_block() (1 samples, 0.47%)</title><rect x="1168.0" y="451.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.0" y="462.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.93%)</title><rect x="1173.5" y="851.0" width="11.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.5" y="862.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.93%)</title><rect x="1173.5" y="835.0" width="11.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.5" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.93%)</title><rect x="1173.5" y="819.0" width="11.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.5" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.47%)</title><rect x="1173.5" y="803.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.5" y="814.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.47%)</title><rect x="1173.5" y="787.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.5" y="798.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.47%)</title><rect x="1173.5" y="771.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.5" y="782.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.47%)</title><rect x="1173.5" y="755.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.5" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.47%)</title><rect x="1173.5" y="739.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.5" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.47%)</title><rect x="1173.5" y="723.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.5" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.47%)</title><rect x="1173.5" y="707.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.5" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.47%)</title><rect x="1173.5" y="691.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.5" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.47%)</title><rect x="1173.5" y="675.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.5" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.47%)</title><rect x="1173.5" y="659.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.5" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.47%)</title><rect x="1173.5" y="643.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.5" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.47%)</title><rect x="1173.5" y="627.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.5" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.47%)</title><rect x="1173.5" y="611.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.5" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.47%)</title><rect x="1173.5" y="595.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.5" y="606.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.47%)</title><rect x="1173.5" y="579.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.5" y="590.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.47%)</title><rect x="1173.5" y="563.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.5" y="574.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.47%)</title><rect x="1179.0" y="803.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.0" y="814.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.47%)</title><rect x="1179.0" y="787.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.0" y="798.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.47%)</title><rect x="1179.0" y="771.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.0" y="782.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.47%)</title><rect x="1179.0" y="755.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.0" y="766.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.47%)</title><rect x="1179.0" y="739.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.0" y="750.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.47%)</title><rect x="1184.5" y="867.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.5" y="878.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.47%)</title><rect x="1184.5" y="851.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.5" y="862.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.47%)</title><rect x="1184.5" y="835.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.5" y="846.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.47%)</title><rect x="1184.5" y="819.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.5" y="830.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.47%)</title><rect x="1184.5" y="803.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.5" y="814.0"></text>
</g>
</g>
</svg>
