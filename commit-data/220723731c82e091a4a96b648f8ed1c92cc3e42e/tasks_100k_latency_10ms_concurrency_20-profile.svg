<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1205"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1205"> </text>
<g id="frames">
<g>
<title>all (283 samples, 100.00%)</title><rect x="10.0" y="1171.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1182.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.35%)</title><rect x="10.0" y="1155.0" width="4.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (22 samples, 7.77%)</title><rect x="14.2" y="1155.0" width="91.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.2" y="1166.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.35%)</title><rect x="14.2" y="1139.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.35%)</title><rect x="14.2" y="1123.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.35%)</title><rect x="14.2" y="1107.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.35%)</title><rect x="14.2" y="1091.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.35%)</title><rect x="14.2" y="1075.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.35%)</title><rect x="14.2" y="1059.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.35%)</title><rect x="14.2" y="1043.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (21 samples, 7.42%)</title><rect x="18.3" y="1139.0" width="87.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.3" y="1150.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.35%)</title><rect x="18.3" y="1123.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.35%)</title><rect x="22.5" y="1123.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.5" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.35%)</title><rect x="22.5" y="1107.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.35%)</title><rect x="26.7" y="1123.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="29.7" y="1134.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invokedynamic(JavaThread*) (1 samples, 0.35%)</title><rect x="26.7" y="1107.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="29.7" y="1118.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle, int, Bytecodes::Code, Thread*) (1 samples, 0.35%)</title><rect x="26.7" y="1091.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="29.7" y="1102.0"></text>
</g>
<g>
<title>wrap_invokedynamic_exception(Thread*) (1 samples, 0.35%)</title><rect x="26.7" y="1075.0" width="4.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="29.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (8 samples, 2.83%)</title><rect x="30.8" y="1123.0" width="33.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.8" y="1134.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/20583321.accept (8 samples, 2.83%)</title><rect x="30.8" y="1107.0" width="33.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.8" y="1118.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (8 samples, 2.83%)</title><rect x="30.8" y="1091.0" width="33.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="33.8" y="1102.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (5 samples, 1.77%)</title><rect x="30.8" y="1075.0" width="20.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="33.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (5 samples, 1.77%)</title><rect x="30.8" y="1059.0" width="20.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (5 samples, 1.77%)</title><rect x="30.8" y="1043.0" width="20.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (5 samples, 1.77%)</title><rect x="30.8" y="1027.0" width="20.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 1.77%)</title><rect x="30.8" y="1011.0" width="20.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (5 samples, 1.77%)</title><rect x="30.8" y="995.0" width="20.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 1.77%)</title><rect x="30.8" y="979.0" width="20.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 1.77%)</title><rect x="30.8" y="963.0" width="20.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 1.77%)</title><rect x="30.8" y="947.0" width="20.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.8" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.06%)</title><rect x="51.7" y="1075.0" width="12.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.71%)</title><rect x="55.9" y="1059.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="58.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.71%)</title><rect x="55.9" y="1043.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="58.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.35%)</title><rect x="55.9" y="1027.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.35%)</title><rect x="55.9" y="1011.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.9" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.35%)</title><rect x="55.9" y="995.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.9" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.35%)</title><rect x="55.9" y="979.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="58.9" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.35%)</title><rect x="55.9" y="963.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="58.9" y="974.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.35%)</title><rect x="55.9" y="947.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="58.9" y="958.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.35%)</title><rect x="60.0" y="1027.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 3.53%)</title><rect x="64.2" y="1123.0" width="41.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.2" y="1134.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 3.53%)</title><rect x="64.2" y="1107.0" width="41.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="67.2" y="1118.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 1.77%)</title><rect x="64.2" y="1091.0" width="20.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="67.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.77%)</title><rect x="64.2" y="1075.0" width="20.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.35%)</title><rect x="64.2" y="1059.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="67.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.06%)</title><rect x="68.4" y="1059.0" width="12.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="71.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.06%)</title><rect x="68.4" y="1043.0" width="12.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="71.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.06%)</title><rect x="68.4" y="1027.0" width="12.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.06%)</title><rect x="68.4" y="1011.0" width="12.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.35%)</title><rect x="68.4" y="995.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="71.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.35%)</title><rect x="68.4" y="979.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.35%)</title><rect x="68.4" y="963.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.35%)</title><rect x="68.4" y="947.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="71.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.35%)</title><rect x="68.4" y="931.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="71.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.35%)</title><rect x="68.4" y="915.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="71.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.35%)</title><rect x="68.4" y="899.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="71.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (2 samples, 0.71%)</title><rect x="72.5" y="995.0" width="8.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (2 samples, 0.71%)</title><rect x="72.5" y="979.0" width="8.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="75.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.debug (1 samples, 0.35%)</title><rect x="80.9" y="1059.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 1.41%)</title><rect x="85.1" y="1091.0" width="16.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="88.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 1.41%)</title><rect x="85.1" y="1075.0" width="16.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="88.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 1.06%)</title><rect x="85.1" y="1059.0" width="12.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="88.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.35%)</title><rect x="85.1" y="1043.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/982871034.accept (1 samples, 0.35%)</title><rect x="85.1" y="1027.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="88.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.35%)</title><rect x="85.1" y="1011.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="88.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.35%)</title><rect x="85.1" y="995.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="88.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.35%)</title><rect x="85.1" y="979.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="88.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.35%)</title><rect x="85.1" y="963.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="88.1" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.35%)</title><rect x="85.1" y="947.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.1" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.35%)</title><rect x="85.1" y="931.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.35%)</title><rect x="89.2" y="1043.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="92.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.35%)</title><rect x="89.2" y="1027.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="92.2" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.35%)</title><rect x="89.2" y="1011.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="92.2" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.35%)</title><rect x="89.2" y="995.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.2" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.35%)</title><rect x="89.2" y="979.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.2" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.35%)</title><rect x="89.2" y="963.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="92.2" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.35%)</title><rect x="89.2" y="947.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="92.2" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.35%)</title><rect x="89.2" y="931.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="92.2" y="942.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.35%)</title><rect x="89.2" y="915.0" width="4.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="92.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.35%)</title><rect x="93.4" y="1043.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="96.4" y="1054.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.35%)</title><rect x="93.4" y="1027.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.4" y="1038.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.35%)</title><rect x="93.4" y="1011.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="96.4" y="1022.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.35%)</title><rect x="93.4" y="995.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="96.4" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.35%)</title><rect x="93.4" y="979.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.4" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.35%)</title><rect x="93.4" y="963.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="96.4" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.35%)</title><rect x="93.4" y="947.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="96.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.35%)</title><rect x="97.6" y="1059.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="100.6" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.35%)</title><rect x="97.6" y="1043.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="100.6" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.35%)</title><rect x="97.6" y="1027.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="100.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.35%)</title><rect x="101.7" y="1091.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="104.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.35%)</title><rect x="101.7" y="1075.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="104.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.35%)</title><rect x="101.7" y="1059.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="104.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.35%)</title><rect x="101.7" y="1043.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="104.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.35%)</title><rect x="101.7" y="1027.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="104.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.35%)</title><rect x="101.7" y="1011.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="104.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.35%)</title><rect x="101.7" y="995.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="104.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.35%)</title><rect x="101.7" y="979.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="104.7" y="990.0"></text>
</g>
<g>
<title>java/lang/Thread.run (147 samples, 51.94%)</title><rect x="105.9" y="1155.0" width="612.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="108.9" y="1166.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (147 samples, 51.94%)</title><rect x="105.9" y="1139.0" width="612.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="108.9" y="1150.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (147 samples, 51.94%)</title><rect x="105.9" y="1123.0" width="612.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="108.9" y="1134.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1790985113.run (139 samples, 49.12%)</title><rect x="110.1" y="1107.0" width="579.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="113.1" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1790985113.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (139 samples, 49.12%)</title><rect x="110.1" y="1091.0" width="579.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.1" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (139 samples, 49.12%)</title><rect x="110.1" y="1075.0" width="579.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="113.1" y="1086.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (137 samples, 48.41%)</title><rect x="110.1" y="1059.0" width="571.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="113.1" y="1070.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (30 samples, 10.60%)</title><rect x="130.9" y="1043.0" width="125.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="133.9" y="1054.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (30 samples, 10.60%)</title><rect x="130.9" y="1027.0" width="125.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="133.9" y="1038.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (30 samples, 10.60%)</title><rect x="130.9" y="1011.0" width="125.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="133.9" y="1022.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (30 samples, 10.60%)</title><rect x="130.9" y="995.0" width="125.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="133.9" y="1006.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (30 samples, 10.60%)</title><rect x="130.9" y="979.0" width="125.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="133.9" y="990.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (30 samples, 10.60%)</title><rect x="130.9" y="963.0" width="125.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="133.9" y="974.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (11 samples, 3.89%)</title><rect x="130.9" y="947.0" width="45.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="133.9" y="958.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 2.47%)</title><rect x="130.9" y="931.0" width="29.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="133.9" y="942.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 2.12%)</title><rect x="130.9" y="915.0" width="25.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="133.9" y="926.0">c..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="147.6" y="899.0" width="4.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="150.6" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="147.6" y="883.0" width="4.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="150.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.35%)</title><rect x="151.8" y="899.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="154.8" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.35%)</title><rect x="151.8" y="883.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="154.8" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.35%)</title><rect x="151.8" y="867.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="154.8" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.35%)</title><rect x="151.8" y="851.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="154.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (1 samples, 0.35%)</title><rect x="155.9" y="915.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="158.9" y="926.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.35%)</title><rect x="155.9" y="899.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="158.9" y="910.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.35%)</title><rect x="155.9" y="883.0" width="4.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="158.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.41%)</title><rect x="160.1" y="931.0" width="16.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="163.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 1.41%)</title><rect x="160.1" y="915.0" width="16.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="163.1" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="160.1" y="899.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="163.1" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.35%)</title><rect x="160.1" y="883.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="163.1" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.35%)</title><rect x="160.1" y="867.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="163.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.35%)</title><rect x="164.3" y="899.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="167.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.35%)</title><rect x="164.3" y="883.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="167.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.35%)</title><rect x="168.4" y="899.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="171.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.35%)</title><rect x="168.4" y="883.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="171.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.35%)</title><rect x="168.4" y="867.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="171.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.35%)</title><rect x="172.6" y="899.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="175.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (15 samples, 5.30%)</title><rect x="176.8" y="947.0" width="62.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="179.8" y="958.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.71%)</title><rect x="176.8" y="931.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="179.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.71%)</title><rect x="176.8" y="915.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="179.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.35%)</title><rect x="176.8" y="899.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="179.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.35%)</title><rect x="181.0" y="899.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="184.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.35%)</title><rect x="185.1" y="931.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="188.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.35%)</title><rect x="185.1" y="915.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="188.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.35%)</title><rect x="189.3" y="931.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="192.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.35%)</title><rect x="189.3" y="915.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="192.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.35%)</title><rect x="189.3" y="899.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="192.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (11 samples, 3.89%)</title><rect x="193.5" y="931.0" width="45.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="196.5" y="942.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.71%)</title><rect x="193.5" y="915.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="196.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.71%)</title><rect x="193.5" y="899.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="196.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.71%)</title><rect x="193.5" y="883.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="196.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.71%)</title><rect x="193.5" y="867.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="196.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (9 samples, 3.18%)</title><rect x="201.8" y="915.0" width="37.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="204.8" y="926.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (9 samples, 3.18%)</title><rect x="201.8" y="899.0" width="37.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="204.8" y="910.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (9 samples, 3.18%)</title><rect x="201.8" y="883.0" width="37.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="204.8" y="894.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.06%)</title><rect x="210.1" y="867.0" width="12.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.35%)</title><rect x="214.3" y="851.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="217.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.35%)</title><rect x="214.3" y="835.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.35%)</title><rect x="214.3" y="819.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="217.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.35%)</title><rect x="214.3" y="803.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="217.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.35%)</title><rect x="218.5" y="851.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="221.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.71%)</title><rect x="222.7" y="867.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="225.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.71%)</title><rect x="222.7" y="851.0" width="8.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="225.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.71%)</title><rect x="222.7" y="835.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.71%)</title><rect x="222.7" y="819.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="225.7" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.71%)</title><rect x="222.7" y="803.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.35%)</title><rect x="231.0" y="867.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="234.0" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.35%)</title><rect x="231.0" y="851.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.0" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.35%)</title><rect x="231.0" y="835.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="234.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.35%)</title><rect x="235.2" y="867.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="238.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 1.41%)</title><rect x="239.3" y="947.0" width="16.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 1.41%)</title><rect x="239.3" y="931.0" width="16.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="242.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (4 samples, 1.41%)</title><rect x="239.3" y="915.0" width="16.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 1.41%)</title><rect x="239.3" y="899.0" width="16.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="242.3" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (96 samples, 33.92%)</title><rect x="256.0" y="1043.0" width="400.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="259.0" y="1054.0">com/linecorp/decaton/processor/runtime/ProcessPipeline...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (15 samples, 5.30%)</title><rect x="256.0" y="1027.0" width="62.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.0" y="1038.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.35%)</title><rect x="260.2" y="1011.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="263.2" y="1022.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (13 samples, 4.59%)</title><rect x="264.3" y="1011.0" width="54.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="267.3" y="1022.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (12 samples, 4.24%)</title><rect x="268.5" y="995.0" width="50.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.5" y="1006.0">ch/qo..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.35%)</title><rect x="268.5" y="979.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.5" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.35%)</title><rect x="268.5" y="963.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="271.5" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.35%)</title><rect x="268.5" y="947.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="271.5" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (11 samples, 3.89%)</title><rect x="272.7" y="979.0" width="45.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="275.7" y="990.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (10 samples, 3.53%)</title><rect x="276.9" y="963.0" width="41.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="279.9" y="974.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 2.12%)</title><rect x="293.5" y="947.0" width="25.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.5" y="958.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (18 samples, 6.36%)</title><rect x="318.6" y="1027.0" width="75.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="321.6" y="1038.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (18 samples, 6.36%)</title><rect x="318.6" y="1011.0" width="75.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.6" y="1022.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 2.83%)</title><rect x="318.6" y="995.0" width="33.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="321.6" y="1006.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 2.47%)</title><rect x="322.7" y="979.0" width="29.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="325.7" y="990.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 2.47%)</title><rect x="322.7" y="963.0" width="29.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.7" y="974.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.41%)</title><rect x="326.9" y="947.0" width="16.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="329.9" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 1.41%)</title><rect x="326.9" y="931.0" width="16.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="329.9" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.41%)</title><rect x="326.9" y="915.0" width="16.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="329.9" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.71%)</title><rect x="326.9" y="899.0" width="8.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="329.9" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.35%)</title><rect x="326.9" y="883.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="329.9" y="894.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.35%)</title><rect x="326.9" y="867.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="329.9" y="878.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.35%)</title><rect x="326.9" y="851.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="329.9" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.35%)</title><rect x="331.1" y="883.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="334.1" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="331.1" y="867.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="334.1" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.35%)</title><rect x="331.1" y="851.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="334.1" y="862.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.71%)</title><rect x="335.2" y="899.0" width="8.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="338.2" y="910.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.71%)</title><rect x="343.6" y="947.0" width="8.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="346.6" y="958.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.35%)</title><rect x="351.9" y="995.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="354.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.35%)</title><rect x="351.9" y="979.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="354.9" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.35%)</title><rect x="351.9" y="963.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="354.9" y="974.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 2.83%)</title><rect x="356.1" y="995.0" width="33.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="359.1" y="1006.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 2.83%)</title><rect x="356.1" y="979.0" width="33.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="359.1" y="990.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (8 samples, 2.83%)</title><rect x="356.1" y="963.0" width="33.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="359.1" y="974.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 2.83%)</title><rect x="356.1" y="947.0" width="33.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="359.1" y="958.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.77%)</title><rect x="368.6" y="931.0" width="20.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="371.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.35%)</title><rect x="385.3" y="915.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="388.3" y="926.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.35%)</title><rect x="389.4" y="995.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="392.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (57 samples, 20.14%)</title><rect x="393.6" y="1027.0" width="237.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="396.6" y="1038.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (57 samples, 20.14%)</title><rect x="393.6" y="1011.0" width="237.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="396.6" y="1022.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1454607645.process (45 samples, 15.90%)</title><rect x="393.6" y="995.0" width="187.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="396.6" y="1006.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (45 samples, 15.90%)</title><rect x="393.6" y="979.0" width="187.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="396.6" y="990.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (44 samples, 15.55%)</title><rect x="393.6" y="963.0" width="183.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="396.6" y="974.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (44 samples, 15.55%)</title><rect x="393.6" y="947.0" width="183.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="396.6" y="958.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>java/lang/Thread.sleep (42 samples, 14.84%)</title><rect x="401.9" y="931.0" width="175.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="404.9" y="942.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (32 samples, 11.31%)</title><rect x="435.3" y="915.0" width="133.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="438.3" y="926.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 1.06%)</title><rect x="435.3" y="899.0" width="12.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="438.3" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="447.8" y="899.0" width="4.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="450.8" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="452.0" y="899.0" width="4.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="455.0" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="452.0" y="883.0" width="4.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="455.0" y="894.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (27 samples, 9.54%)</title><rect x="456.1" y="899.0" width="112.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="459.1" y="910.0">os::sleep(Thre..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.71%)</title><rect x="485.3" y="883.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="488.3" y="894.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.35%)</title><rect x="489.5" y="867.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="492.5" y="878.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.35%)</title><rect x="493.7" y="883.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="496.7" y="894.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.06%)</title><rect x="497.8" y="883.0" width="12.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="500.8" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.35%)</title><rect x="510.4" y="883.0" width="4.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="513.4" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (7 samples, 2.47%)</title><rect x="514.5" y="883.0" width="29.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="517.5" y="894.0">__..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 1.77%)</title><rect x="543.7" y="883.0" width="20.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="546.7" y="894.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.35%)</title><rect x="564.6" y="883.0" width="4.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="567.6" y="894.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (2 samples, 0.71%)</title><rect x="568.7" y="915.0" width="8.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="571.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.35%)</title><rect x="577.1" y="963.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="580.1" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.35%)</title><rect x="577.1" y="947.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="580.1" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (5 samples, 1.77%)</title><rect x="581.2" y="995.0" width="20.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="584.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (5 samples, 1.77%)</title><rect x="581.2" y="979.0" width="20.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="584.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/1012991494.get$Lambda (5 samples, 1.77%)</title><rect x="581.2" y="963.0" width="20.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="584.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/1012991494.&lt;init&gt; (5 samples, 1.77%)</title><rect x="581.2" y="947.0" width="20.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="584.2" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.71%)</title><rect x="602.1" y="995.0" width="8.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="605.1" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.71%)</title><rect x="602.1" y="979.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="605.1" y="990.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.71%)</title><rect x="602.1" y="963.0" width="8.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="605.1" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 1.41%)</title><rect x="610.4" y="995.0" width="16.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="613.4" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.71%)</title><rect x="618.8" y="979.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="621.8" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.35%)</title><rect x="622.9" y="963.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="625.9" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="622.9" y="947.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="625.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.35%)</title><rect x="627.1" y="995.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="630.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.12%)</title><rect x="631.3" y="1027.0" width="25.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="634.3" y="1038.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.41%)</title><rect x="639.6" y="1011.0" width="16.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="642.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.06%)</title><rect x="643.8" y="995.0" width="12.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="646.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/1871768377.accept (3 samples, 1.06%)</title><rect x="643.8" y="979.0" width="12.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="646.8" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (3 samples, 1.06%)</title><rect x="643.8" y="963.0" width="12.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="646.8" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (3 samples, 1.06%)</title><rect x="643.8" y="947.0" width="12.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="646.8" y="958.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (3 samples, 1.06%)</title><rect x="643.8" y="931.0" width="12.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="646.8" y="942.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="652.1" y="915.0" width="4.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="655.1" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="652.1" y="899.0" width="4.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="655.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.12%)</title><rect x="656.3" y="1043.0" width="25.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="659.3" y="1054.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.41%)</title><rect x="664.6" y="1027.0" width="16.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="667.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.41%)</title><rect x="664.6" y="1011.0" width="16.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="667.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/1113643229.accept (4 samples, 1.41%)</title><rect x="664.6" y="995.0" width="16.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="667.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (4 samples, 1.41%)</title><rect x="664.6" y="979.0" width="16.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="667.6" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$259/235296586.complete (4 samples, 1.41%)</title><rect x="664.6" y="963.0" width="16.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="667.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (4 samples, 1.41%)</title><rect x="664.6" y="947.0" width="16.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="667.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (4 samples, 1.41%)</title><rect x="664.6" y="931.0" width="16.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="667.6" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 1.41%)</title><rect x="664.6" y="915.0" width="16.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="667.6" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 1.41%)</title><rect x="664.6" y="899.0" width="16.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="667.6" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 1.41%)</title><rect x="664.6" y="883.0" width="16.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="667.6" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 1.41%)</title><rect x="664.6" y="867.0" width="16.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="667.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 0.71%)</title><rect x="681.3" y="1059.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="684.3" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.35%)</title><rect x="685.5" y="1043.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="688.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 1.06%)</title><rect x="689.6" y="1107.0" width="12.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="692.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.06%)</title><rect x="689.6" y="1091.0" width="12.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="692.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.06%)</title><rect x="689.6" y="1075.0" width="12.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="692.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.06%)</title><rect x="689.6" y="1059.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="692.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (4 samples, 1.41%)</title><rect x="702.2" y="1107.0" width="16.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="705.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 1.41%)</title><rect x="702.2" y="1091.0" width="16.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="705.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.71%)</title><rect x="702.2" y="1075.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="705.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.71%)</title><rect x="702.2" y="1059.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="705.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.71%)</title><rect x="702.2" y="1043.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="705.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.71%)</title><rect x="702.2" y="1027.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="705.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.71%)</title><rect x="702.2" y="1011.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="705.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.71%)</title><rect x="710.5" y="1075.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="713.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.71%)</title><rect x="710.5" y="1059.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="713.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.71%)</title><rect x="710.5" y="1043.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="713.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.71%)</title><rect x="710.5" y="1027.0" width="8.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="713.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.35%)</title><rect x="718.8" y="1155.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="721.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.35%)</title><rect x="718.8" y="1139.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="721.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.35%)</title><rect x="718.8" y="1123.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="721.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.35%)</title><rect x="718.8" y="1107.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="721.8" y="1118.0"></text>
</g>
<g>
<title>start_thread (112 samples, 39.58%)</title><rect x="723.0" y="1155.0" width="467.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="726.0" y="1166.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (112 samples, 39.58%)</title><rect x="723.0" y="1139.0" width="467.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="726.0" y="1150.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 2.83%)</title><rect x="723.0" y="1123.0" width="33.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="726.0" y="1134.0">Ga..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 1.77%)</title><rect x="723.0" y="1107.0" width="20.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="726.0" y="1118.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 1.77%)</title><rect x="723.0" y="1091.0" width="20.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="726.0" y="1102.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.71%)</title><rect x="723.0" y="1075.0" width="8.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="726.0" y="1086.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 1.06%)</title><rect x="731.3" y="1075.0" width="12.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="734.3" y="1086.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (3 samples, 1.06%)</title><rect x="743.9" y="1107.0" width="12.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="746.9" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 1.06%)</title><rect x="743.9" y="1091.0" width="12.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="746.9" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 1.06%)</title><rect x="743.9" y="1075.0" width="12.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="746.9" y="1086.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.71%)</title><rect x="743.9" y="1059.0" width="8.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="746.9" y="1070.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.35%)</title><rect x="752.2" y="1059.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="755.2" y="1070.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.35%)</title><rect x="752.2" y="1043.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="755.2" y="1054.0"></text>
</g>
<g>
<title>JavaThread::run() (104 samples, 36.75%)</title><rect x="756.4" y="1123.0" width="433.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="759.4" y="1134.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (104 samples, 36.75%)</title><rect x="756.4" y="1107.0" width="433.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="759.4" y="1118.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (104 samples, 36.75%)</title><rect x="756.4" y="1091.0" width="433.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="759.4" y="1102.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (104 samples, 36.75%)</title><rect x="756.4" y="1075.0" width="433.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="759.4" y="1086.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (101 samples, 35.69%)</title><rect x="756.4" y="1059.0" width="421.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="759.4" y="1070.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (101 samples, 35.69%)</title><rect x="756.4" y="1043.0" width="421.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="759.4" y="1054.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool..</text>
</g>
<g>
<title>Compile::Code_Gen() (60 samples, 21.20%)</title><rect x="756.4" y="1027.0" width="250.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="759.4" y="1038.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.71%)</title><rect x="756.4" y="1011.0" width="8.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="759.4" y="1022.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.35%)</title><rect x="756.4" y="995.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="759.4" y="1006.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.35%)</title><rect x="760.5" y="995.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="763.5" y="1006.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.35%)</title><rect x="760.5" y="979.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="763.5" y="990.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.35%)</title><rect x="760.5" y="963.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="763.5" y="974.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.35%)</title><rect x="764.7" y="1011.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="767.7" y="1022.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.35%)</title><rect x="764.7" y="995.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="767.7" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.35%)</title><rect x="764.7" y="979.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="767.7" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.35%)</title><rect x="764.7" y="963.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="767.7" y="974.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.41%)</title><rect x="768.9" y="1011.0" width="16.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="771.9" y="1022.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (1 samples, 0.35%)</title><rect x="768.9" y="995.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="771.9" y="1006.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.06%)</title><rect x="773.0" y="995.0" width="12.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="776.0" y="1006.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.71%)</title><rect x="773.0" y="979.0" width="8.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="776.0" y="990.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.35%)</title><rect x="781.4" y="979.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="784.4" y="990.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.35%)</title><rect x="781.4" y="963.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="784.4" y="974.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.35%)</title><rect x="781.4" y="947.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="784.4" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 1.41%)</title><rect x="785.5" y="1011.0" width="16.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="788.5" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 1.41%)</title><rect x="785.5" y="995.0" width="16.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="788.5" y="1006.0"></text>
</g>
<g>
<title>Node::needs_anti_dependence_check() const (1 samples, 0.35%)</title><rect x="785.5" y="979.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="788.5" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.71%)</title><rect x="789.7" y="979.0" width="8.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="792.7" y="990.0"></text>
</g>
<g>
<title>MemBarCPUOrderNode::Opcode() const (1 samples, 0.35%)</title><rect x="789.7" y="963.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="792.7" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.35%)</title><rect x="793.9" y="963.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="796.9" y="974.0"></text>
</g>
<g>
<title>Node::needs_anti_dependence_check() const (1 samples, 0.35%)</title><rect x="793.9" y="947.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="796.9" y="958.0"></text>
</g>
<g>
<title>MemBarNode::bottom_type() const (1 samples, 0.35%)</title><rect x="793.9" y="931.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="796.9" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.35%)</title><rect x="798.1" y="979.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="801.1" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (48 samples, 16.96%)</title><rect x="802.2" y="1011.0" width="200.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="805.2" y="1022.0">PhaseChaitin::Register_All..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.35%)</title><rect x="806.4" y="995.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="809.4" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 1.77%)</title><rect x="810.6" y="995.0" width="20.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="813.6" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="814.7" y="979.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="817.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (2 samples, 0.71%)</title><rect x="818.9" y="979.0" width="8.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="821.9" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.35%)</title><rect x="827.2" y="979.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="830.2" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="827.2" y="963.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="830.2" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.06%)</title><rect x="831.4" y="995.0" width="12.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="834.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.71%)</title><rect x="835.6" y="979.0" width="8.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="838.6" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="839.8" y="963.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="842.8" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.77%)</title><rect x="843.9" y="995.0" width="20.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="846.9" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.35%)</title><rect x="856.4" y="979.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="859.4" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.35%)</title><rect x="856.4" y="963.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="859.4" y="974.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.35%)</title><rect x="856.4" y="947.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="859.4" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.35%)</title><rect x="860.6" y="979.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="863.6" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.35%)</title><rect x="860.6" y="963.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="863.6" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 3.18%)</title><rect x="864.8" y="995.0" width="37.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="867.8" y="1006.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="868.9" y="979.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="871.9" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 1.77%)</title><rect x="873.1" y="979.0" width="20.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="876.1" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.71%)</title><rect x="881.4" y="963.0" width="8.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="884.4" y="974.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.35%)</title><rect x="889.8" y="963.0" width="4.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="892.8" y="974.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.35%)</title><rect x="894.0" y="979.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="897.0" y="990.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.35%)</title><rect x="898.1" y="979.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="901.1" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 1.41%)</title><rect x="902.3" y="995.0" width="16.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="905.3" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 1.41%)</title><rect x="902.3" y="979.0" width="16.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="905.3" y="990.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (9 samples, 3.18%)</title><rect x="919.0" y="995.0" width="37.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="922.0" y="1006.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (9 samples, 3.18%)</title><rect x="919.0" y="979.0" width="37.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="922.0" y="990.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (9 samples, 3.18%)</title><rect x="919.0" y="963.0" width="37.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="922.0" y="974.0">Pha..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (4 samples, 1.41%)</title><rect x="919.0" y="947.0" width="16.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="922.0" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="931.5" y="931.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="934.5" y="942.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (4 samples, 1.41%)</title><rect x="935.7" y="947.0" width="16.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="938.7" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.35%)</title><rect x="952.3" y="947.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="955.3" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 1.41%)</title><rect x="956.5" y="995.0" width="16.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="959.5" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 1.06%)</title><rect x="960.7" y="979.0" width="12.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="963.7" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.35%)</title><rect x="973.2" y="995.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="976.2" y="1006.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.35%)</title><rect x="973.2" y="979.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="976.2" y="990.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.77%)</title><rect x="977.3" y="995.0" width="20.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="980.3" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.71%)</title><rect x="989.9" y="979.0" width="8.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="992.9" y="990.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.35%)</title><rect x="998.2" y="995.0" width="4.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1001.2" y="1006.0"></text>
</g>
<g>
<title>loadLNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.35%)</title><rect x="1002.4" y="1011.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1005.4" y="1022.0"></text>
</g>
<g>
<title>Compile::Optimize() (35 samples, 12.37%)</title><rect x="1006.5" y="1027.0" width="146.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1009.5" y="1038.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.35%)</title><rect x="1006.5" y="1011.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1009.5" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.35%)</title><rect x="1006.5" y="995.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1009.5" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1006.5" y="979.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1009.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1006.5" y="963.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1009.5" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1006.5" y="947.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1009.5" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1006.5" y="931.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1009.5" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1006.5" y="915.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1009.5" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1006.5" y="899.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1009.5" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1006.5" y="883.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1009.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1006.5" y="867.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1009.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1006.5" y="851.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1009.5" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1006.5" y="835.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1009.5" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1006.5" y="819.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1009.5" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1006.5" y="803.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1009.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1006.5" y="787.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1009.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1006.5" y="771.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1009.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1006.5" y="755.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1009.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1006.5" y="739.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1009.5" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1006.5" y="723.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1009.5" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1006.5" y="707.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1009.5" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1006.5" y="691.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1009.5" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1006.5" y="675.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1009.5" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1006.5" y="659.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1009.5" y="670.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.35%)</title><rect x="1010.7" y="1011.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1013.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (28 samples, 9.89%)</title><rect x="1014.9" y="1011.0" width="116.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1017.9" y="1022.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.06%)</title><rect x="1014.9" y="995.0" width="12.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1017.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.35%)</title><rect x="1019.0" y="979.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1022.0" y="990.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.35%)</title><rect x="1023.2" y="979.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1026.2" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (19 samples, 6.71%)</title><rect x="1027.4" y="995.0" width="79.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1030.4" y="1006.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (16 samples, 5.65%)</title><rect x="1039.9" y="979.0" width="66.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1042.9" y="990.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.71%)</title><rect x="1044.1" y="963.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.1" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (13 samples, 4.59%)</title><rect x="1052.4" y="963.0" width="54.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1055.4" y="974.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.71%)</title><rect x="1098.3" y="947.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1101.3" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 1.41%)</title><rect x="1106.6" y="995.0" width="16.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1109.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.71%)</title><rect x="1114.9" y="979.0" width="8.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.9" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca(Node*, Node*) const (1 samples, 0.35%)</title><rect x="1114.9" y="963.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.9" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_internal(Node*, Node*) const (1 samples, 0.35%)</title><rect x="1114.9" y="947.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1117.9" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.35%)</title><rect x="1119.1" y="963.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.1" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.71%)</title><rect x="1123.3" y="995.0" width="8.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.71%)</title><rect x="1123.3" y="979.0" width="8.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.3" y="990.0"></text>
</g>
<g>
<title>LShiftLNode::Value(PhaseTransform*) const (1 samples, 0.35%)</title><rect x="1123.3" y="963.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.3" y="974.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="1123.3" y="947.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.3" y="958.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.35%)</title><rect x="1123.3" y="931.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.3" y="942.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.35%)</title><rect x="1123.3" y="915.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.3" y="926.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.35%)</title><rect x="1127.5" y="963.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.5" y="974.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.35%)</title><rect x="1127.5" y="947.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.5" y="958.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.35%)</title><rect x="1127.5" y="931.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.5" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.35%)</title><rect x="1127.5" y="915.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.5" y="926.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="1127.5" y="899.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.5" y="910.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.35%)</title><rect x="1127.5" y="883.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.5" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.06%)</title><rect x="1131.6" y="1011.0" width="12.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.06%)</title><rect x="1131.6" y="995.0" width="12.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1134.6" y="1006.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 1.06%)</title><rect x="1131.6" y="979.0" width="12.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.6" y="990.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (2 samples, 0.71%)</title><rect x="1131.6" y="963.0" width="8.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.6" y="974.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.71%)</title><rect x="1131.6" y="947.0" width="8.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.6" y="958.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.71%)</title><rect x="1131.6" y="931.0" width="8.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.6" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::is_IterGVN() (1 samples, 0.35%)</title><rect x="1140.0" y="963.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.0" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.71%)</title><rect x="1144.1" y="1011.0" width="8.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.35%)</title><rect x="1144.1" y="995.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.35%)</title><rect x="1144.1" y="979.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.1" y="990.0"></text>
</g>
<g>
<title>MulNode::Value(PhaseTransform*) const (1 samples, 0.35%)</title><rect x="1144.1" y="963.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.1" y="974.0"></text>
</g>
<g>
<title>PhaseTransform::type(Node const*) const (1 samples, 0.35%)</title><rect x="1144.1" y="947.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.1" y="958.0"></text>
</g>
<g>
<title>Type_Array::fast_lookup(unsigned int) const (1 samples, 0.35%)</title><rect x="1144.1" y="931.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.1" y="942.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.35%)</title><rect x="1148.3" y="995.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.3" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.35%)</title><rect x="1148.3" y="979.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.3" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1148.3" y="963.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.3" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.35%)</title><rect x="1148.3" y="947.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.3" y="958.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.35%)</title><rect x="1148.3" y="931.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.3" y="942.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.35%)</title><rect x="1148.3" y="915.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.3" y="926.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.35%)</title><rect x="1148.3" y="899.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.3" y="910.0"></text>
</g>
<g>
<title>TypeNarrowOop::remove_speculative() const (1 samples, 0.35%)</title><rect x="1148.3" y="883.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.3" y="894.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="1148.3" y="867.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.3" y="878.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.35%)</title><rect x="1148.3" y="851.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.3" y="862.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.35%)</title><rect x="1148.3" y="835.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.3" y="846.0"></text>
</g>
<g>
<title>TypeAryPtr::eq(Type const*) const (1 samples, 0.35%)</title><rect x="1148.3" y="819.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.3" y="830.0"></text>
</g>
<g>
<title>TypeOopPtr::speculative() const (1 samples, 0.35%)</title><rect x="1148.3" y="803.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.3" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.77%)</title><rect x="1152.5" y="1027.0" width="20.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.5" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.77%)</title><rect x="1152.5" y="1011.0" width="20.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.77%)</title><rect x="1152.5" y="995.0" width="20.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.77%)</title><rect x="1152.5" y="979.0" width="20.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.77%)</title><rect x="1152.5" y="963.0" width="20.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.41%)</title><rect x="1152.5" y="947.0" width="16.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.5" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.06%)</title><rect x="1152.5" y="931.0" width="12.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.5" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.06%)</title><rect x="1152.5" y="915.0" width="12.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.06%)</title><rect x="1152.5" y="899.0" width="12.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.06%)</title><rect x="1152.5" y="883.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.06%)</title><rect x="1152.5" y="867.0" width="12.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.06%)</title><rect x="1152.5" y="851.0" width="12.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.5" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1152.5" y="835.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.5" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1152.5" y="819.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1152.5" y="803.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1152.5" y="787.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1152.5" y="771.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1152.5" y="755.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.5" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1152.5" y="739.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.5" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1152.5" y="723.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1152.5" y="707.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1152.5" y="691.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1152.5" y="675.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1152.5" y="659.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.5" y="670.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.35%)</title><rect x="1152.5" y="643.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.5" y="654.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.35%)</title><rect x="1152.5" y="627.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.5" y="638.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.35%)</title><rect x="1152.5" y="611.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.5" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::map_blocks() (1 samples, 0.35%)</title><rect x="1152.5" y="595.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.5" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1156.6" y="835.0" width="8.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.6" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1156.6" y="819.0" width="8.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.6" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.71%)</title><rect x="1156.6" y="803.0" width="8.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.71%)</title><rect x="1156.6" y="787.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.71%)</title><rect x="1156.6" y="771.0" width="8.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.71%)</title><rect x="1156.6" y="755.0" width="8.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.71%)</title><rect x="1156.6" y="739.0" width="8.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.6" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1156.6" y="723.0" width="8.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.6" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.71%)</title><rect x="1156.6" y="707.0" width="8.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.71%)</title><rect x="1156.6" y="691.0" width="8.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.71%)</title><rect x="1156.6" y="675.0" width="8.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.71%)</title><rect x="1156.6" y="659.0" width="8.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.71%)</title><rect x="1156.6" y="643.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.6" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1156.6" y="627.0" width="8.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.6" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.71%)</title><rect x="1156.6" y="611.0" width="8.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.71%)</title><rect x="1156.6" y="595.0" width="8.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.71%)</title><rect x="1156.6" y="579.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.71%)</title><rect x="1156.6" y="563.0" width="8.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.71%)</title><rect x="1156.6" y="547.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1156.6" y="531.0" width="8.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.71%)</title><rect x="1156.6" y="515.0" width="8.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.71%)</title><rect x="1156.6" y="499.0" width="8.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.71%)</title><rect x="1156.6" y="483.0" width="8.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.71%)</title><rect x="1156.6" y="467.0" width="8.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.71%)</title><rect x="1156.6" y="451.0" width="8.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.6" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1156.6" y="435.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.6" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.71%)</title><rect x="1156.6" y="419.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.71%)</title><rect x="1156.6" y="403.0" width="8.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.71%)</title><rect x="1156.6" y="387.0" width="8.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.71%)</title><rect x="1156.6" y="371.0" width="8.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.71%)</title><rect x="1156.6" y="355.0" width="8.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.6" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1156.6" y="339.0" width="8.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.6" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.71%)</title><rect x="1156.6" y="323.0" width="8.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.71%)</title><rect x="1156.6" y="307.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.71%)</title><rect x="1156.6" y="291.0" width="8.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.71%)</title><rect x="1156.6" y="275.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.71%)</title><rect x="1156.6" y="259.0" width="8.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.6" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1156.6" y="243.0" width="8.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.6" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.71%)</title><rect x="1156.6" y="227.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.6" y="238.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.35%)</title><rect x="1156.6" y="211.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.6" y="222.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.35%)</title><rect x="1156.6" y="195.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.6" y="206.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.35%)</title><rect x="1156.6" y="179.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.6" y="190.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.35%)</title><rect x="1156.6" y="163.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.6" y="174.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.35%)</title><rect x="1156.6" y="147.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.6" y="158.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.35%)</title><rect x="1156.6" y="131.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1160.8" y="211.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1160.8" y="195.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1160.8" y="179.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.35%)</title><rect x="1160.8" y="163.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.35%)</title><rect x="1160.8" y="147.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.8" y="158.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.35%)</title><rect x="1160.8" y="131.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.8" y="142.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.35%)</title><rect x="1160.8" y="115.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.8" y="126.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.35%)</title><rect x="1160.8" y="99.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.8" y="110.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.35%)</title><rect x="1160.8" y="83.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.8" y="94.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.35%)</title><rect x="1160.8" y="67.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.8" y="78.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.35%)</title><rect x="1160.8" y="51.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.8" y="62.0"></text>
</g>
<g>
<title>ciInstanceKlass::super() (1 samples, 0.35%)</title><rect x="1160.8" y="35.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.8" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1165.0" y="931.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.0" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1165.0" y="915.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.0" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1165.0" y="899.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1165.0" y="883.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1165.0" y="867.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1165.0" y="851.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1165.0" y="835.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.0" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1165.0" y="819.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.0" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1165.0" y="803.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1165.0" y="787.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1165.0" y="771.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1165.0" y="755.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1165.0" y="739.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.0" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1165.0" y="723.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.0" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1165.0" y="707.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1165.0" y="691.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1165.0" y="675.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1165.0" y="659.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1165.0" y="643.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1165.0" y="627.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1165.0" y="611.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1165.0" y="595.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1165.0" y="579.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1165.0" y="563.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1165.0" y="547.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.0" y="558.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1165.0" y="531.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.0" y="542.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind) (1 samples, 0.35%)</title><rect x="1165.0" y="515.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.0" y="526.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.35%)</title><rect x="1165.0" y="499.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.0" y="510.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.35%)</title><rect x="1165.0" y="483.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.0" y="494.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.35%)</title><rect x="1165.0" y="467.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.0" y="478.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.35%)</title><rect x="1165.0" y="451.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.0" y="462.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="1165.0" y="435.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.0" y="446.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.35%)</title><rect x="1165.0" y="419.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.35%)</title><rect x="1169.2" y="947.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.35%)</title><rect x="1169.2" y="931.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.2" y="942.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.35%)</title><rect x="1169.2" y="915.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.2" y="926.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.35%)</title><rect x="1169.2" y="899.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.2" y="910.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.35%)</title><rect x="1173.3" y="1027.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.3" y="1038.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.35%)</title><rect x="1173.3" y="1011.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.3" y="1022.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.06%)</title><rect x="1177.5" y="1059.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.5" y="1070.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.06%)</title><rect x="1177.5" y="1043.0" width="12.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.5" y="1054.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.06%)</title><rect x="1177.5" y="1027.0" width="12.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.5" y="1038.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.06%)</title><rect x="1177.5" y="1011.0" width="12.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.5" y="1022.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (3 samples, 1.06%)</title><rect x="1177.5" y="995.0" width="12.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.5" y="1006.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (3 samples, 1.06%)</title><rect x="1177.5" y="979.0" width="12.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.5" y="990.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (2 samples, 0.71%)</title><rect x="1177.5" y="963.0" width="8.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.5" y="974.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (2 samples, 0.71%)</title><rect x="1177.5" y="947.0" width="8.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="958.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (2 samples, 0.71%)</title><rect x="1177.5" y="931.0" width="8.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="942.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.35%)</title><rect x="1177.5" y="915.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.5" y="926.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_locked_reg(Interval*) (1 samples, 0.35%)</title><rect x="1181.7" y="915.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="926.0"></text>
</g>
<g>
<title>LinearScanWalker::split_and_spill_interval(Interval*) (1 samples, 0.35%)</title><rect x="1181.7" y="899.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="910.0"></text>
</g>
<g>
<title>LinearScanWalker::split_before_usage(Interval*, int, int) (1 samples, 0.35%)</title><rect x="1181.7" y="883.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.7" y="894.0"></text>
</g>
<g>
<title>LinearScanWalker::find_optimal_split_pos(Interval*, int, int, bool) (1 samples, 0.35%)</title><rect x="1181.7" y="867.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="878.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.35%)</title><rect x="1185.8" y="963.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.8" y="974.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.35%)</title><rect x="1185.8" y="947.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.8" y="958.0"></text>
</g>
</g>
</svg>
