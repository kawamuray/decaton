<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="901"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="901"> </text>
<g id="frames">
<g>
<title>all (997 samples, 100.00%)</title><rect x="10.0" y="867.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="878.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.10%)</title><rect x="10.0" y="851.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (249 samples, 24.97%)</title><rect x="11.2" y="851.0" width="294.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.2" y="862.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.10%)</title><rect x="12.4" y="835.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.10%)</title><rect x="12.4" y="819.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.10%)</title><rect x="12.4" y="803.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.10%)</title><rect x="12.4" y="787.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="12.4" y="771.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="12.4" y="755.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="12.4" y="739.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.10%)</title><rect x="12.4" y="723.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.10%)</title><rect x="12.4" y="707.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.10%)</title><rect x="12.4" y="691.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.10%)</title><rect x="12.4" y="675.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture$1.onSuccess (1 samples, 0.10%)</title><rect x="12.4" y="659.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.10%)</title><rect x="12.4" y="643.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.10%)</title><rect x="12.4" y="627.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.10%)</title><rect x="12.4" y="611.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.10%)</title><rect x="12.4" y="595.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.debug (1 samples, 0.10%)</title><rect x="12.4" y="579.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.4" y="590.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.10%)</title><rect x="12.4" y="563.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="15.4" y="574.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.10%)</title><rect x="12.4" y="547.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="15.4" y="558.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.10%)</title><rect x="12.4" y="531.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.4" y="542.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.10%)</title><rect x="12.4" y="515.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="15.4" y="526.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.10%)</title><rect x="12.4" y="499.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.4" y="510.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.10%)</title><rect x="12.4" y="483.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="15.4" y="494.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.10%)</title><rect x="12.4" y="467.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="15.4" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (247 samples, 24.77%)</title><rect x="13.6" y="835.0" width="292.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.6" y="846.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (6 samples, 0.60%)</title><rect x="13.6" y="819.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.60%)</title><rect x="13.6" y="803.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/1760696481.accept (6 samples, 0.60%)</title><rect x="13.6" y="787.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.6" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (6 samples, 0.60%)</title><rect x="13.6" y="771.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="16.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.50%)</title><rect x="14.7" y="755.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.7" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.50%)</title><rect x="14.7" y="739.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.7" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.10%)</title><rect x="19.5" y="723.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.5" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (5 samples, 0.50%)</title><rect x="20.7" y="819.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (5 samples, 0.50%)</title><rect x="20.7" y="803.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.30%)</title><rect x="23.0" y="787.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.30%)</title><rect x="23.0" y="771.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.30%)</title><rect x="23.0" y="755.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.0" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.30%)</title><rect x="23.0" y="739.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.30%)</title><rect x="23.0" y="723.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.0" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.20%)</title><rect x="23.0" y="707.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.20%)</title><rect x="23.0" y="691.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="26.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$249/797233579.test (1 samples, 0.10%)</title><rect x="23.0" y="675.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="24.2" y="675.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.2" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="24.2" y="659.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.2" y="670.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="24.2" y="643.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="27.2" y="654.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.10%)</title><rect x="25.4" y="707.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.4" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.10%)</title><rect x="25.4" y="691.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.4" y="702.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.10%)</title><rect x="25.4" y="675.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.4" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.20%)</title><rect x="26.6" y="819.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="29.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.20%)</title><rect x="26.6" y="803.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="29.6" y="814.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (178 samples, 17.85%)</title><rect x="28.9" y="819.0" width="210.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.9" y="830.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/1090373150.accept (174 samples, 17.45%)</title><rect x="28.9" y="803.0" width="206.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="31.9" y="814.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (174 samples, 17.45%)</title><rect x="28.9" y="787.0" width="206.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.9" y="798.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.10%)</title><rect x="28.9" y="771.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="31.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (137 samples, 13.74%)</title><rect x="30.1" y="771.0" width="162.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="33.1" y="782.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (137 samples, 13.74%)</title><rect x="30.1" y="755.0" width="162.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="33.1" y="766.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (137 samples, 13.74%)</title><rect x="30.1" y="739.0" width="162.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="33.1" y="750.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.10%)</title><rect x="45.5" y="723.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="48.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (121 samples, 12.14%)</title><rect x="46.7" y="723.0" width="143.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="49.7" y="734.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (121 samples, 12.14%)</title><rect x="46.7" y="707.0" width="143.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="49.7" y="718.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (121 samples, 12.14%)</title><rect x="46.7" y="691.0" width="143.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="49.7" y="702.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (89 samples, 8.93%)</title><rect x="46.7" y="675.0" width="105.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="49.7" y="686.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (26 samples, 2.61%)</title><rect x="46.7" y="659.0" width="30.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="49.7" y="670.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (26 samples, 2.61%)</title><rect x="46.7" y="643.0" width="30.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="49.7" y="654.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (26 samples, 2.61%)</title><rect x="46.7" y="627.0" width="30.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="49.7" y="638.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (63 samples, 6.32%)</title><rect x="77.5" y="659.0" width="74.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="80.5" y="670.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (63 samples, 6.32%)</title><rect x="77.5" y="643.0" width="74.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.5" y="654.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (63 samples, 6.32%)</title><rect x="77.5" y="627.0" width="74.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="80.5" y="638.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (63 samples, 6.32%)</title><rect x="77.5" y="611.0" width="74.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="80.5" y="622.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (62 samples, 6.22%)</title><rect x="78.6" y="595.0" width="73.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.6" y="606.0">sun/misc..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.10%)</title><rect x="78.6" y="579.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="81.6" y="590.0"></text>
</g>
<g>
<title>Unsafe_Unpark (53 samples, 5.32%)</title><rect x="79.8" y="579.0" width="62.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="82.8" y="590.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.20%)</title><rect x="82.2" y="563.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="85.2" y="574.0"></text>
</g>
<g>
<title>__pthread_cond_signal (30 samples, 3.01%)</title><rect x="84.6" y="563.0" width="35.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="87.6" y="574.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (6 samples, 0.60%)</title><rect x="120.1" y="563.0" width="7.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="123.1" y="574.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.30%)</title><rect x="127.2" y="563.0" width="15.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="130.2" y="574.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.50%)</title><rect x="142.6" y="579.0" width="5.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="145.6" y="590.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.30%)</title><rect x="148.5" y="579.0" width="3.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="151.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.20%)</title><rect x="152.0" y="675.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="155.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.20%)</title><rect x="152.0" y="659.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="155.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.20%)</title><rect x="152.0" y="643.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="155.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (30 samples, 3.01%)</title><rect x="154.4" y="675.0" width="35.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="157.4" y="686.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (30 samples, 3.01%)</title><rect x="154.4" y="659.0" width="35.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="157.4" y="670.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (30 samples, 3.01%)</title><rect x="154.4" y="643.0" width="35.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="157.4" y="654.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (30 samples, 3.01%)</title><rect x="154.4" y="627.0" width="35.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="157.4" y="638.0">jav..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="189.9" y="723.0" width="2.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="192.9" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (3 samples, 0.30%)</title><rect x="192.3" y="771.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="195.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.30%)</title><rect x="192.3" y="755.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="195.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.40%)</title><rect x="195.8" y="771.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="198.8" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.40%)</title><rect x="195.8" y="755.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="198.8" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.40%)</title><rect x="195.8" y="739.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="198.8" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (29 samples, 2.91%)</title><rect x="200.6" y="771.0" width="34.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.6" y="782.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (29 samples, 2.91%)</title><rect x="200.6" y="755.0" width="34.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.6" y="766.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 1.00%)</title><rect x="218.3" y="739.0" width="11.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="221.3" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.40%)</title><rect x="219.5" y="723.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.5" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 0.40%)</title><rect x="219.5" y="707.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.5" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.40%)</title><rect x="219.5" y="691.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.5" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="220.7" y="675.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="223.7" y="686.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.10%)</title><rect x="220.7" y="659.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="223.7" y="670.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="221.9" y="675.0" width="2.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="224.9" y="686.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.10%)</title><rect x="224.2" y="723.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.2" y="734.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.40%)</title><rect x="225.4" y="723.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.4" y="734.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.20%)</title><rect x="230.1" y="739.0" width="2.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="233.1" y="750.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="232.5" y="739.0" width="2.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="235.5" y="750.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.10%)</title><rect x="234.9" y="803.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="237.9" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.10%)</title><rect x="234.9" y="787.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="237.9" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.10%)</title><rect x="234.9" y="771.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="237.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.10%)</title><rect x="234.9" y="755.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="237.9" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.10%)</title><rect x="234.9" y="739.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="237.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.20%)</title><rect x="236.1" y="803.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="239.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.20%)</title><rect x="236.1" y="787.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.20%)</title><rect x="236.1" y="771.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="239.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.20%)</title><rect x="236.1" y="755.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="239.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (2 samples, 0.20%)</title><rect x="236.1" y="739.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="239.1" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.20%)</title><rect x="236.1" y="723.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="239.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.10%)</title><rect x="238.4" y="803.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.10%)</title><rect x="238.4" y="787.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.10%)</title><rect x="238.4" y="771.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="241.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.10%)</title><rect x="238.4" y="755.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="241.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.10%)</title><rect x="238.4" y="739.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="241.4" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.10%)</title><rect x="238.4" y="723.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="241.4" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.10%)</title><rect x="238.4" y="707.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="241.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 5.62%)</title><rect x="239.6" y="819.0" width="66.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="242.6" y="830.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 5.62%)</title><rect x="239.6" y="803.0" width="66.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.6" y="814.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (34 samples, 3.41%)</title><rect x="239.6" y="787.0" width="40.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="242.6" y="798.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (33 samples, 3.31%)</title><rect x="240.8" y="771.0" width="39.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="243.8" y="782.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (33 samples, 3.31%)</title><rect x="240.8" y="755.0" width="39.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="243.8" y="766.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (27 samples, 2.71%)</title><rect x="240.8" y="739.0" width="31.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="243.8" y="750.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (27 samples, 2.71%)</title><rect x="240.8" y="723.0" width="31.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.8" y="734.0">or..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.10%)</title><rect x="242.0" y="707.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="245.0" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.10%)</title><rect x="242.0" y="691.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.0" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.10%)</title><rect x="242.0" y="675.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.0" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.10%)</title><rect x="242.0" y="659.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.0" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.10%)</title><rect x="242.0" y="643.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="245.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 1.20%)</title><rect x="243.2" y="707.0" width="14.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="246.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (4 samples, 0.40%)</title><rect x="252.6" y="691.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="255.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.40%)</title><rect x="252.6" y="675.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.40%)</title><rect x="252.6" y="659.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.40%)</title><rect x="252.6" y="643.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="255.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.40%)</title><rect x="252.6" y="627.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="255.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (4 samples, 0.40%)</title><rect x="252.6" y="611.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="255.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (4 samples, 0.40%)</title><rect x="252.6" y="595.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="255.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (13 samples, 1.30%)</title><rect x="257.4" y="707.0" width="15.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="260.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (13 samples, 1.30%)</title><rect x="257.4" y="691.0" width="15.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="260.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (8 samples, 0.80%)</title><rect x="257.4" y="675.0" width="9.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="260.4" y="686.0"></text>
</g>
<g>
<title>java/util/Optional.of (8 samples, 0.80%)</title><rect x="257.4" y="659.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="260.4" y="670.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.30%)</title><rect x="263.3" y="643.0" width="3.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="266.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (5 samples, 0.50%)</title><rect x="266.8" y="675.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.8" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (5 samples, 0.50%)</title><rect x="266.8" y="659.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="269.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.10%)</title><rect x="272.7" y="739.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.10%)</title><rect x="272.7" y="723.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="272.7" y="707.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="275.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="272.7" y="691.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="272.7" y="675.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="272.7" y="659.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.20%)</title><rect x="273.9" y="739.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="276.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.20%)</title><rect x="273.9" y="723.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="276.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.10%)</title><rect x="273.9" y="707.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="276.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.10%)</title><rect x="273.9" y="691.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="275.1" y="707.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="278.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="275.1" y="691.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="278.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="275.1" y="675.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.10%)</title><rect x="276.3" y="739.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.10%)</title><rect x="277.5" y="739.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="280.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.10%)</title><rect x="277.5" y="723.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.10%)</title><rect x="277.5" y="707.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="280.5" y="718.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.10%)</title><rect x="277.5" y="691.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="280.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="277.5" y="675.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="280.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.10%)</title><rect x="278.7" y="739.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (8 samples, 0.80%)</title><rect x="279.8" y="787.0" width="9.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="282.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.60%)</title><rect x="279.8" y="771.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.40%)</title><rect x="279.8" y="755.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.8" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="279.8" y="739.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.8" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="279.8" y="723.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.8" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="279.8" y="707.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="282.8" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="279.8" y="691.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.8" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="279.8" y="675.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.8" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="279.8" y="659.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.8" y="670.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$77/1779445214.get (1 samples, 0.10%)</title><rect x="279.8" y="643.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="282.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.10%)</title><rect x="281.0" y="739.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.10%)</title><rect x="281.0" y="723.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="284.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.10%)</title><rect x="281.0" y="707.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="284.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.10%)</title><rect x="282.2" y="739.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.2" y="750.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.10%)</title><rect x="282.2" y="723.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="285.2" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.10%)</title><rect x="282.2" y="707.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.10%)</title><rect x="283.4" y="739.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="286.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.10%)</title><rect x="283.4" y="723.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="286.4" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="283.4" y="707.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="286.4" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="283.4" y="691.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="286.4" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="283.4" y="675.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.4" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="283.4" y="659.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.4" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="283.4" y="643.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="286.4" y="654.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="283.4" y="627.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.4" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="283.4" y="611.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="286.4" y="622.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="283.4" y="595.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.4" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="283.4" y="579.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="286.4" y="590.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="283.4" y="563.0" width="1.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="286.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.20%)</title><rect x="284.6" y="755.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.6" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.20%)</title><rect x="284.6" y="739.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.6" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.20%)</title><rect x="284.6" y="723.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.6" y="734.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.20%)</title><rect x="284.6" y="707.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.6" y="718.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.20%)</title><rect x="284.6" y="691.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="284.6" y="675.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="287.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="284.6" y="659.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.10%)</title><rect x="284.6" y="643.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.6" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.10%)</title><rect x="284.6" y="627.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.6" y="638.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.10%)</title><rect x="284.6" y="611.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.6" y="622.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.10%)</title><rect x="284.6" y="595.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="287.6" y="606.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$47/2131952342.get (1 samples, 0.10%)</title><rect x="285.8" y="675.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.20%)</title><rect x="287.0" y="771.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="290.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.10%)</title><rect x="287.0" y="755.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="290.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.10%)</title><rect x="288.1" y="755.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="291.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.subscription (1 samples, 0.10%)</title><rect x="288.1" y="739.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="291.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.50%)</title><rect x="289.3" y="787.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="292.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.50%)</title><rect x="289.3" y="771.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="292.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.10%)</title><rect x="289.3" y="755.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="292.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.10%)</title><rect x="289.3" y="739.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="292.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.10%)</title><rect x="289.3" y="723.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="292.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.responseSchema (1 samples, 0.10%)</title><rect x="289.3" y="707.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="292.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.schemaFor (1 samples, 0.10%)</title><rect x="289.3" y="691.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="292.3" y="702.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.10%)</title><rect x="289.3" y="675.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.40%)</title><rect x="290.5" y="755.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="293.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.30%)</title><rect x="290.5" y="739.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="293.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="290.5" y="723.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="293.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.10%)</title><rect x="291.7" y="707.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="294.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.10%)</title><rect x="291.7" y="691.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="294.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="291.7" y="675.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="294.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.10%)</title><rect x="291.7" y="659.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="294.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedCount.update (1 samples, 0.10%)</title><rect x="291.7" y="643.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="294.7" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="292.9" y="723.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="295.9" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="292.9" y="707.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="295.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.10%)</title><rect x="294.1" y="739.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="297.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (1 samples, 0.10%)</title><rect x="294.1" y="723.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="297.1" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="294.1" y="707.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="297.1" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="294.1" y="691.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="297.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (9 samples, 0.90%)</title><rect x="295.2" y="787.0" width="10.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="298.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (9 samples, 0.90%)</title><rect x="295.2" y="771.0" width="10.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="298.2" y="782.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.10%)</title><rect x="297.6" y="755.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="300.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/758792045.accept (1 samples, 0.10%)</title><rect x="297.6" y="739.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="300.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.10%)</title><rect x="297.6" y="723.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="300.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.10%)</title><rect x="297.6" y="707.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="300.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.30%)</title><rect x="298.8" y="755.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="301.8" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.10%)</title><rect x="298.8" y="739.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="301.8" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="298.8" y="723.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="301.8" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="298.8" y="707.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="301.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.10%)</title><rect x="298.8" y="691.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="301.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.20%)</title><rect x="300.0" y="739.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="303.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="300.0" y="723.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="303.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="300.0" y="707.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="303.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="300.0" y="691.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="303.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="300.0" y="675.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="303.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="300.0" y="659.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="303.0" y="670.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="300.0" y="643.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="303.0" y="654.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.10%)</title><rect x="300.0" y="627.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="303.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.10%)</title><rect x="300.0" y="611.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="300.0" y="595.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="303.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$242/452536756.test (1 samples, 0.10%)</title><rect x="300.0" y="579.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.10%)</title><rect x="300.0" y="563.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$241/1668146827.test (1 samples, 0.10%)</title><rect x="300.0" y="547.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="303.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (1 samples, 0.10%)</title><rect x="300.0" y="531.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="303.0" y="542.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.10%)</title><rect x="300.0" y="515.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="303.0" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.10%)</title><rect x="300.0" y="499.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="303.0" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="300.0" y="483.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="303.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.10%)</title><rect x="300.0" y="467.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="303.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.10%)</title><rect x="301.2" y="723.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="304.2" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.10%)</title><rect x="301.2" y="707.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="304.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (3 samples, 0.30%)</title><rect x="302.3" y="755.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="305.3" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (3 samples, 0.30%)</title><rect x="302.3" y="739.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="305.3" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.20%)</title><rect x="302.3" y="723.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="305.3" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.10%)</title><rect x="302.3" y="707.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="305.3" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="302.3" y="691.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="305.3" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.10%)</title><rect x="303.5" y="707.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="306.5" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="303.5" y="691.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="306.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="303.5" y="675.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="306.5" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.10%)</title><rect x="303.5" y="659.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="306.5" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.10%)</title><rect x="304.7" y="723.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="307.7" y="734.0"></text>
</g>
<g>
<title>java/lang/Thread.run (638 samples, 63.99%)</title><rect x="305.9" y="851.0" width="755.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="308.9" y="862.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (638 samples, 63.99%)</title><rect x="305.9" y="835.0" width="755.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="308.9" y="846.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (638 samples, 63.99%)</title><rect x="305.9" y="819.0" width="755.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="308.9" y="830.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1293035696.run (430 samples, 43.13%)</title><rect x="311.8" y="803.0" width="508.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="314.8" y="814.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/12930..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (430 samples, 43.13%)</title><rect x="311.8" y="787.0" width="508.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="314.8" y="798.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (430 samples, 43.13%)</title><rect x="311.8" y="771.0" width="508.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="314.8" y="782.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (423 samples, 42.43%)</title><rect x="311.8" y="755.0" width="500.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="314.8" y="766.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenPr..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="323.6" y="739.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="326.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.10%)</title><rect x="324.8" y="739.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="327.8" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (144 samples, 14.44%)</title><rect x="326.0" y="739.0" width="170.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="329.0" y="750.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (144 samples, 14.44%)</title><rect x="326.0" y="723.0" width="170.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="329.0" y="734.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (144 samples, 14.44%)</title><rect x="326.0" y="707.0" width="170.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="329.0" y="718.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (144 samples, 14.44%)</title><rect x="326.0" y="691.0" width="170.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="329.0" y="702.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (144 samples, 14.44%)</title><rect x="326.0" y="675.0" width="170.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="329.0" y="686.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (144 samples, 14.44%)</title><rect x="326.0" y="659.0" width="170.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="329.0" y="670.0">com/fasterxml/jackson/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (52 samples, 5.22%)</title><rect x="326.0" y="643.0" width="61.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="329.0" y="654.0">com/fa..</text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="346.1" y="627.0" width="3.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="349.1" y="638.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.80%)</title><rect x="349.7" y="627.0" width="9.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="352.7" y="638.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.70%)</title><rect x="350.9" y="611.0" width="8.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="353.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 0.40%)</title><rect x="359.1" y="627.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="362.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 0.40%)</title><rect x="359.1" y="611.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="362.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.40%)</title><rect x="359.1" y="595.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="362.1" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.40%)</title><rect x="359.1" y="579.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="362.1" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (4 samples, 0.40%)</title><rect x="359.1" y="563.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="362.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (20 samples, 2.01%)</title><rect x="363.9" y="627.0" width="23.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="366.9" y="638.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (19 samples, 1.91%)</title><rect x="363.9" y="611.0" width="22.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="366.9" y="622.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.30%)</title><rect x="374.5" y="595.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="377.5" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="374.5" y="579.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="377.5" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="374.5" y="563.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="377.5" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="374.5" y="547.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="377.5" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="374.5" y="531.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="377.5" y="542.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="374.5" y="515.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="377.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.20%)</title><rect x="375.7" y="579.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="378.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (7 samples, 0.70%)</title><rect x="378.1" y="595.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="381.1" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="378.1" y="579.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="381.1" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="378.1" y="563.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="381.1" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="378.1" y="547.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="381.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (6 samples, 0.60%)</title><rect x="379.3" y="579.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="382.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (6 samples, 0.60%)</title><rect x="379.3" y="563.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="382.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.10%)</title><rect x="386.4" y="611.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="389.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (84 samples, 8.43%)</title><rect x="387.6" y="643.0" width="99.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="390.6" y="654.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.10%)</title><rect x="388.7" y="627.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="391.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (2 samples, 0.20%)</title><rect x="389.9" y="627.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="392.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (2 samples, 0.20%)</title><rect x="392.3" y="627.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="395.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.30%)</title><rect x="394.7" y="627.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="397.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.30%)</title><rect x="394.7" y="611.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="397.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (11 samples, 1.10%)</title><rect x="398.2" y="627.0" width="13.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="401.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.90%)</title><rect x="400.6" y="611.0" width="10.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="403.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.70%)</title><rect x="402.9" y="595.0" width="8.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="405.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (7 samples, 0.70%)</title><rect x="402.9" y="579.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="405.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (6 samples, 0.60%)</title><rect x="404.1" y="563.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="407.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.20%)</title><rect x="411.2" y="627.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="414.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.20%)</title><rect x="411.2" y="611.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="414.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (60 samples, 6.02%)</title><rect x="413.6" y="627.0" width="71.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="416.6" y="638.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.30%)</title><rect x="414.8" y="611.0" width="15.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="417.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.50%)</title><rect x="417.1" y="595.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="420.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.50%)</title><rect x="417.1" y="579.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="420.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.50%)</title><rect x="417.1" y="563.0" width="6.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="420.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.30%)</title><rect x="423.1" y="595.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="426.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.20%)</title><rect x="426.6" y="595.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="429.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.20%)</title><rect x="426.6" y="579.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="429.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.10%)</title><rect x="429.0" y="595.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="432.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.10%)</title><rect x="430.2" y="611.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="433.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (45 samples, 4.51%)</title><rect x="431.3" y="611.0" width="53.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="434.3" y="622.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (45 samples, 4.51%)</title><rect x="431.3" y="595.0" width="53.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="434.3" y="606.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (45 samples, 4.51%)</title><rect x="431.3" y="579.0" width="53.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="434.3" y="590.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.50%)</title><rect x="438.4" y="563.0" width="17.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="441.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.50%)</title><rect x="440.8" y="547.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="443.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.50%)</title><rect x="440.8" y="531.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="443.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.50%)</title><rect x="440.8" y="515.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="443.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.20%)</title><rect x="444.4" y="499.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="447.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.40%)</title><rect x="446.7" y="547.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="449.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.30%)</title><rect x="451.5" y="547.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="454.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.30%)</title><rect x="451.5" y="531.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="454.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.20%)</title><rect x="452.6" y="515.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="455.6" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.10%)</title><rect x="455.0" y="547.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="458.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (9 samples, 0.90%)</title><rect x="456.2" y="563.0" width="10.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="459.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.60%)</title><rect x="459.7" y="547.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="462.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.60%)</title><rect x="459.7" y="531.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="462.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.60%)</title><rect x="459.7" y="515.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="462.7" y="526.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.60%)</title><rect x="459.7" y="499.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="462.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.80%)</title><rect x="466.9" y="563.0" width="9.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="469.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.80%)</title><rect x="466.9" y="547.0" width="9.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="469.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.80%)</title><rect x="466.9" y="531.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="469.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (8 samples, 0.80%)</title><rect x="466.9" y="515.0" width="9.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="469.9" y="526.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (8 samples, 0.80%)</title><rect x="466.9" y="499.0" width="9.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="469.9" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="471.6" y="483.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="474.6" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.10%)</title><rect x="471.6" y="467.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="474.6" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="471.6" y="451.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="474.6" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="471.6" y="435.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="474.6" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="471.6" y="419.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="474.6" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="471.6" y="403.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="474.6" y="414.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.10%)</title><rect x="471.6" y="387.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="474.6" y="398.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="471.6" y="371.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="474.6" y="382.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.10%)</title><rect x="471.6" y="355.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="474.6" y="366.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.30%)</title><rect x="472.8" y="483.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="475.8" y="494.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (3 samples, 0.30%)</title><rect x="472.8" y="467.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="475.8" y="478.0"></text>
</g>
<g>
<title>sun/reflect/misc/ReflectUtil.isVMAnonymousClass (1 samples, 0.10%)</title><rect x="475.1" y="451.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="478.1" y="462.0"></text>
</g>
<g>
<title>java/lang/Class.getName (1 samples, 0.10%)</title><rect x="475.1" y="435.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="478.1" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="475.1" y="419.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="478.1" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="475.1" y="403.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="478.1" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="475.1" y="387.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="478.1" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="475.1" y="371.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="478.1" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.30%)</title><rect x="476.3" y="563.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="479.3" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.30%)</title><rect x="476.3" y="547.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="479.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.30%)</title><rect x="476.3" y="531.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="479.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.10%)</title><rect x="478.7" y="515.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="481.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.40%)</title><rect x="479.9" y="563.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="482.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (4 samples, 0.40%)</title><rect x="479.9" y="547.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="482.9" y="558.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.20%)</title><rect x="482.2" y="531.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="485.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.20%)</title><rect x="484.6" y="627.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="487.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (8 samples, 0.80%)</title><rect x="487.0" y="643.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="490.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (8 samples, 0.80%)</title><rect x="487.0" y="627.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="490.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (8 samples, 0.80%)</title><rect x="487.0" y="611.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="490.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (8 samples, 0.80%)</title><rect x="487.0" y="595.0" width="9.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="490.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.80%)</title><rect x="487.0" y="579.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="490.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (241 samples, 24.17%)</title><rect x="496.4" y="739.0" width="285.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="499.4" y="750.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (52 samples, 5.22%)</title><rect x="496.4" y="723.0" width="61.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="499.4" y="734.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.10%)</title><rect x="496.4" y="707.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="499.4" y="718.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (51 samples, 5.12%)</title><rect x="497.6" y="707.0" width="60.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="500.6" y="718.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (48 samples, 4.81%)</title><rect x="501.2" y="691.0" width="56.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="504.2" y="702.0">ch/qos..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (35 samples, 3.51%)</title><rect x="516.6" y="675.0" width="41.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="519.6" y="686.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (16 samples, 1.60%)</title><rect x="539.0" y="659.0" width="19.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="542.0" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="539.0" y="643.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="542.0" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (15 samples, 1.50%)</title><rect x="540.2" y="643.0" width="17.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="543.2" y="654.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.50%)</title><rect x="549.7" y="627.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="552.7" y="638.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.20%)</title><rect x="555.6" y="627.0" width="2.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="558.6" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.20%)</title><rect x="558.0" y="723.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="561.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="559.2" y="707.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="562.2" y="718.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.10%)</title><rect x="559.2" y="691.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="562.2" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (144 samples, 14.44%)</title><rect x="560.4" y="723.0" width="170.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="563.4" y="734.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (144 samples, 14.44%)</title><rect x="560.4" y="707.0" width="170.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="563.4" y="718.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.30%)</title><rect x="569.8" y="691.0" width="3.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="572.8" y="702.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.20%)</title><rect x="571.0" y="675.0" width="2.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="574.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (62 samples, 6.22%)</title><rect x="573.4" y="691.0" width="73.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="576.4" y="702.0">com/line..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (59 samples, 5.92%)</title><rect x="575.7" y="675.0" width="69.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="578.7" y="686.0">java/la..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (40 samples, 4.01%)</title><rect x="587.6" y="659.0" width="47.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="590.6" y="670.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (25 samples, 2.51%)</title><rect x="599.4" y="643.0" width="29.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="602.4" y="654.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (25 samples, 2.51%)</title><rect x="599.4" y="627.0" width="29.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="602.4" y="638.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (25 samples, 2.51%)</title><rect x="599.4" y="611.0" width="29.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="602.4" y="622.0">ja..</text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.10%)</title><rect x="607.7" y="595.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="610.7" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (15 samples, 1.50%)</title><rect x="608.9" y="595.0" width="17.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="611.9" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (7 samples, 0.70%)</title><rect x="608.9" y="579.0" width="8.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="611.9" y="590.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="610.1" y="563.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="613.1" y="574.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="610.1" y="547.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="613.1" y="558.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="611.2" y="563.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="614.2" y="574.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.40%)</title><rect x="612.4" y="563.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="615.4" y="574.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (4 samples, 0.40%)</title><rect x="612.4" y="547.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="615.4" y="558.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="612.4" y="531.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="615.4" y="542.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="612.4" y="515.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="615.4" y="526.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.10%)</title><rect x="613.6" y="531.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="616.6" y="542.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.10%)</title><rect x="614.8" y="531.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="617.8" y="542.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.10%)</title><rect x="616.0" y="531.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="619.0" y="542.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.10%)</title><rect x="617.2" y="579.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="620.2" y="590.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.70%)</title><rect x="618.3" y="579.0" width="8.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="621.3" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.40%)</title><rect x="621.9" y="563.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="624.9" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.20%)</title><rect x="621.9" y="547.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="624.9" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (2 samples, 0.20%)</title><rect x="621.9" y="531.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="624.9" y="542.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="621.9" y="515.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="624.9" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.10%)</title><rect x="621.9" y="499.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="624.9" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.10%)</title><rect x="621.9" y="483.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="624.9" y="494.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.10%)</title><rect x="621.9" y="467.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="624.9" y="478.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="623.1" y="515.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="626.1" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="623.1" y="499.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="626.1" y="510.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.10%)</title><rect x="623.1" y="483.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="626.1" y="494.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="624.3" y="547.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="627.3" y="558.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.10%)</title><rect x="625.4" y="547.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="628.4" y="558.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="626.6" y="595.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="629.6" y="606.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="627.8" y="595.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="630.8" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.30%)</title><rect x="629.0" y="643.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="632.0" y="654.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="632.5" y="643.0" width="1.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="635.5" y="654.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="633.7" y="643.0" width="1.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="636.7" y="654.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.20%)</title><rect x="634.9" y="659.0" width="2.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="637.9" y="670.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.70%)</title><rect x="637.3" y="659.0" width="8.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="640.3" y="670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.10%)</title><rect x="645.6" y="675.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="648.6" y="686.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.10%)</title><rect x="645.6" y="659.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="648.6" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.10%)</title><rect x="645.6" y="643.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="648.6" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="645.6" y="627.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="648.6" y="638.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (13 samples, 1.30%)</title><rect x="646.8" y="691.0" width="15.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="649.8" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.toString (13 samples, 1.30%)</title><rect x="646.8" y="675.0" width="15.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="649.8" y="686.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (13 samples, 1.30%)</title><rect x="646.8" y="659.0" width="15.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="649.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.20%)</title><rect x="659.8" y="643.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="662.8" y="654.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (58 samples, 5.82%)</title><rect x="662.1" y="691.0" width="68.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="665.1" y="702.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (55 samples, 5.52%)</title><rect x="665.7" y="675.0" width="65.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="668.7" y="686.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.60%)</title><rect x="665.7" y="659.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="668.7" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.60%)</title><rect x="665.7" y="643.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="668.7" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.60%)</title><rect x="665.7" y="627.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="668.7" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.60%)</title><rect x="665.7" y="611.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="668.7" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.20%)</title><rect x="670.4" y="595.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="673.4" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.20%)</title><rect x="670.4" y="579.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="673.4" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (49 samples, 4.91%)</title><rect x="672.8" y="659.0" width="58.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="675.8" y="670.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (47 samples, 4.71%)</title><rect x="675.2" y="643.0" width="55.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="678.2" y="654.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (26 samples, 2.61%)</title><rect x="700.0" y="627.0" width="30.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="703.0" y="638.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (6 samples, 0.60%)</title><rect x="716.6" y="611.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="719.6" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 0.40%)</title><rect x="723.7" y="611.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="726.7" y="622.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.20%)</title><rect x="728.4" y="611.0" width="2.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="731.4" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (30 samples, 3.01%)</title><rect x="730.8" y="723.0" width="35.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="733.8" y="734.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (29 samples, 2.91%)</title><rect x="730.8" y="707.0" width="34.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="733.8" y="718.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/168951277.process (15 samples, 1.50%)</title><rect x="733.1" y="691.0" width="17.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="736.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (14 samples, 1.40%)</title><rect x="733.1" y="675.0" width="16.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="736.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (12 samples, 1.20%)</title><rect x="734.3" y="659.0" width="14.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="737.3" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.50%)</title><rect x="736.7" y="643.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="739.7" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.30%)</title><rect x="739.1" y="627.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="742.1" y="638.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="739.1" y="611.0" width="3.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="742.1" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.10%)</title><rect x="742.6" y="643.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="745.6" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.40%)</title><rect x="743.8" y="643.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="746.8" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.10%)</title><rect x="748.5" y="659.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="751.5" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="748.5" y="643.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="751.5" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="748.5" y="627.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="751.5" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="748.5" y="611.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="751.5" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="749.7" y="675.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="752.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/2018578133.complete (1 samples, 0.10%)</title><rect x="750.9" y="691.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="753.9" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$35 (1 samples, 0.10%)</title><rect x="750.9" y="675.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="753.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.10%)</title><rect x="750.9" y="659.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="753.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.10%)</title><rect x="750.9" y="643.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="753.9" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.40%)</title><rect x="752.1" y="691.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="755.1" y="702.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.40%)</title><rect x="752.1" y="675.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="755.1" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (2 samples, 0.20%)</title><rect x="756.8" y="691.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="759.8" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (2 samples, 0.20%)</title><rect x="756.8" y="675.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="759.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/2018578133.get$Lambda (2 samples, 0.20%)</title><rect x="756.8" y="659.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="759.8" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/2018578133.&lt;init&gt; (2 samples, 0.20%)</title><rect x="756.8" y="643.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="759.8" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.40%)</title><rect x="759.2" y="691.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="762.2" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.40%)</title><rect x="759.2" y="675.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="762.2" y="686.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.20%)</title><rect x="759.2" y="659.0" width="2.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="762.2" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.20%)</title><rect x="761.6" y="659.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="764.6" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.10%)</title><rect x="763.9" y="691.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="766.9" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.10%)</title><rect x="763.9" y="675.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="766.9" y="686.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.10%)</title><rect x="765.1" y="707.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="768.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.30%)</title><rect x="766.3" y="723.0" width="15.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="769.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 1.30%)</title><rect x="766.3" y="707.0" width="15.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="769.3" y="718.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.30%)</title><rect x="769.8" y="691.0" width="3.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="772.8" y="702.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.20%)</title><rect x="771.0" y="675.0" width="2.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="774.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.70%)</title><rect x="773.4" y="691.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="776.4" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/1799961762.accept (6 samples, 0.60%)</title><rect x="773.4" y="675.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="776.4" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (6 samples, 0.60%)</title><rect x="773.4" y="659.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="776.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (6 samples, 0.60%)</title><rect x="773.4" y="643.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="776.4" y="654.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (6 samples, 0.60%)</title><rect x="773.4" y="627.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="776.4" y="638.0"></text>
</g>
<g>
<title>java/time/Duration.create (6 samples, 0.60%)</title><rect x="773.4" y="611.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="776.4" y="622.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.50%)</title><rect x="773.4" y="595.0" width="5.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="776.4" y="606.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.50%)</title><rect x="773.4" y="579.0" width="5.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="776.4" y="590.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="779.3" y="595.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="782.3" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$276/1199333906.accept (1 samples, 0.10%)</title><rect x="780.5" y="675.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="783.5" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="780.5" y="659.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="783.5" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="780.5" y="643.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="783.5" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="780.5" y="627.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="783.5" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="780.5" y="611.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="783.5" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (1 samples, 0.10%)</title><rect x="781.7" y="739.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="784.7" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (1 samples, 0.10%)</title><rect x="781.7" y="723.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="784.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$276/1199333906.get$Lambda (1 samples, 0.10%)</title><rect x="781.7" y="707.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="784.7" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="781.7" y="691.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="784.7" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="781.7" y="675.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="784.7" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="781.7" y="659.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="784.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.40%)</title><rect x="782.9" y="739.0" width="16.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="785.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 1.40%)</title><rect x="782.9" y="723.0" width="16.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="785.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 1.20%)</title><rect x="785.2" y="707.0" width="14.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="788.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/1799961762.accept (12 samples, 1.20%)</title><rect x="785.2" y="691.0" width="14.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="788.2" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (12 samples, 1.20%)</title><rect x="785.2" y="675.0" width="14.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="788.2" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (12 samples, 1.20%)</title><rect x="785.2" y="659.0" width="14.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="788.2" y="670.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (12 samples, 1.20%)</title><rect x="785.2" y="643.0" width="14.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="788.2" y="654.0"></text>
</g>
<g>
<title>java/time/Duration.create (12 samples, 1.20%)</title><rect x="785.2" y="627.0" width="14.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="788.2" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (11 samples, 1.10%)</title><rect x="799.4" y="739.0" width="13.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="802.4" y="750.0"></text>
</g>
<g>
<title>[vdso] (11 samples, 1.10%)</title><rect x="799.4" y="723.0" width="13.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="802.4" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (7 samples, 0.70%)</title><rect x="812.4" y="755.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="815.4" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.60%)</title><rect x="812.4" y="739.0" width="7.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="815.4" y="750.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.60%)</title><rect x="812.4" y="723.0" width="7.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="815.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.10%)</title><rect x="819.5" y="739.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="822.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.40%)</title><rect x="820.7" y="803.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="823.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.40%)</title><rect x="820.7" y="787.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="823.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.40%)</title><rect x="820.7" y="771.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="823.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.40%)</title><rect x="820.7" y="755.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="823.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1293035696.run (1 samples, 0.10%)</title><rect x="824.3" y="739.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="827.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (199 samples, 19.96%)</title><rect x="825.5" y="803.0" width="235.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="828.5" y="814.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (199 samples, 19.96%)</title><rect x="825.5" y="787.0" width="235.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="828.5" y="798.0">java/util/concurrent/LinkedBloc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (181 samples, 18.15%)</title><rect x="825.5" y="771.0" width="214.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="828.5" y="782.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (16 samples, 1.60%)</title><rect x="830.2" y="755.0" width="18.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="833.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (12 samples, 1.20%)</title><rect x="849.1" y="755.0" width="14.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="852.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 1.20%)</title><rect x="849.1" y="739.0" width="14.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="852.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 1.20%)</title><rect x="849.1" y="723.0" width="14.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="852.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 1.20%)</title><rect x="849.1" y="707.0" width="14.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="852.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (7 samples, 0.70%)</title><rect x="863.3" y="755.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="866.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (7 samples, 0.70%)</title><rect x="863.3" y="739.0" width="8.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="866.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (141 samples, 14.14%)</title><rect x="871.6" y="755.0" width="166.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="874.6" y="766.0">java/util/concurrent/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (140 samples, 14.04%)</title><rect x="872.8" y="739.0" width="165.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="875.8" y="750.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.20%)</title><rect x="879.9" y="723.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="882.9" y="734.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (3 samples, 0.30%)</title><rect x="882.3" y="723.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="885.3" y="734.0"></text>
</g>
<g>
<title>Unsafe_Park (125 samples, 12.54%)</title><rect x="885.8" y="723.0" width="148.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="888.8" y="734.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="890.6" y="707.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="893.6" y="718.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (25 samples, 2.51%)</title><rect x="891.7" y="707.0" width="29.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="894.7" y="718.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.60%)</title><rect x="902.4" y="691.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="905.4" y="702.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="905.9" y="675.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="908.9" y="686.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.20%)</title><rect x="907.1" y="675.0" width="2.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="910.1" y="686.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="909.5" y="691.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="912.5" y="702.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="910.7" y="691.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="913.7" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (8 samples, 0.80%)</title><rect x="911.9" y="691.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="914.9" y="702.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="921.3" y="707.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="924.3" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.10%)</title><rect x="922.5" y="707.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="925.5" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="923.7" y="707.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="926.7" y="718.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.80%)</title><rect x="924.9" y="707.0" width="9.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="927.9" y="718.0"></text>
</g>
<g>
<title>__lll_unlock_wake (25 samples, 2.51%)</title><rect x="934.4" y="707.0" width="29.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="937.4" y="718.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (50 samples, 5.02%)</title><rect x="963.9" y="707.0" width="59.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="966.9" y="718.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.10%)</title><rect x="1023.1" y="707.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1026.1" y="718.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.10%)</title><rect x="1024.3" y="707.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1027.3" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.40%)</title><rect x="1025.5" y="707.0" width="4.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1028.5" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.10%)</title><rect x="1030.2" y="707.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1033.2" y="718.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="1031.4" y="707.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.4" y="718.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="1032.6" y="707.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1035.6" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.20%)</title><rect x="1033.8" y="723.0" width="2.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1036.8" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.20%)</title><rect x="1036.1" y="723.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1039.1" y="734.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.10%)</title><rect x="1038.5" y="755.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1041.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.30%)</title><rect x="1039.7" y="771.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1042.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.10%)</title><rect x="1043.2" y="771.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1046.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.10%)</title><rect x="1043.2" y="755.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1046.2" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.10%)</title><rect x="1043.2" y="739.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1046.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 1.40%)</title><rect x="1044.4" y="771.0" width="16.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1047.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 1.40%)</title><rect x="1044.4" y="755.0" width="16.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1047.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 1.40%)</title><rect x="1044.4" y="739.0" width="16.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1047.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 1.40%)</title><rect x="1044.4" y="723.0" width="16.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1047.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="1061.0" y="851.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1064.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.sendHeartbeatRequest (1 samples, 0.10%)</title><rect x="1061.0" y="835.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1064.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.compose (1 samples, 0.10%)</title><rect x="1061.0" y="819.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1064.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture$1.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1061.0" y="803.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1064.0" y="814.0"></text>
</g>
<g>
<title>start_thread (108 samples, 10.83%)</title><rect x="1062.2" y="851.0" width="127.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1065.2" y="862.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (108 samples, 10.83%)</title><rect x="1062.2" y="835.0" width="127.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1065.2" y="846.0">java_start(Threa..</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 2.01%)</title><rect x="1062.2" y="819.0" width="23.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1065.2" y="830.0">G..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.10%)</title><rect x="1062.2" y="803.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1065.2" y="814.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="1062.2" y="787.0" width="1.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1065.2" y="798.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.30%)</title><rect x="1063.4" y="803.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1066.4" y="814.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.30%)</title><rect x="1063.4" y="787.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1066.4" y="798.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.30%)</title><rect x="1063.4" y="771.0" width="3.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1066.4" y="782.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 1.50%)</title><rect x="1066.9" y="803.0" width="17.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1069.9" y="814.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.40%)</title><rect x="1066.9" y="787.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1069.9" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.10%)</title><rect x="1066.9" y="771.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1069.9" y="782.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.10%)</title><rect x="1068.1" y="771.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1071.1" y="782.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.20%)</title><rect x="1069.3" y="771.0" width="2.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1072.3" y="782.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.20%)</title><rect x="1071.6" y="787.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1074.6" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.10%)</title><rect x="1071.6" y="771.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1074.6" y="782.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.10%)</title><rect x="1071.6" y="755.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1074.6" y="766.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.10%)</title><rect x="1071.6" y="739.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1074.6" y="750.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.10%)</title><rect x="1071.6" y="723.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1074.6" y="734.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.10%)</title><rect x="1072.8" y="771.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1075.8" y="782.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.10%)</title><rect x="1072.8" y="755.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1075.8" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (9 samples, 0.90%)</title><rect x="1074.0" y="787.0" width="10.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1077.0" y="798.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (9 samples, 0.90%)</title><rect x="1074.0" y="771.0" width="10.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1077.0" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (8 samples, 0.80%)</title><rect x="1074.0" y="755.0" width="9.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1077.0" y="766.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (8 samples, 0.80%)</title><rect x="1074.0" y="739.0" width="9.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1077.0" y="750.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (8 samples, 0.80%)</title><rect x="1074.0" y="723.0" width="9.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1077.0" y="734.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (8 samples, 0.80%)</title><rect x="1074.0" y="707.0" width="9.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1077.0" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.10%)</title><rect x="1077.6" y="691.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1080.6" y="702.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.40%)</title><rect x="1078.7" y="691.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1081.7" y="702.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.20%)</title><rect x="1079.9" y="675.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1082.9" y="686.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.10%)</title><rect x="1082.3" y="675.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1085.3" y="686.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.10%)</title><rect x="1083.5" y="755.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1086.5" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.10%)</title><rect x="1083.5" y="739.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1086.5" y="750.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.10%)</title><rect x="1083.5" y="723.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1086.5" y="734.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.10%)</title><rect x="1083.5" y="707.0" width="1.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1086.5" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="1083.5" y="691.0" width="1.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1086.5" y="702.0"></text>
</g>
<g>
<title>G1RedirtyLoggedCardsTask::work(unsigned int) (1 samples, 0.10%)</title><rect x="1084.7" y="803.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1087.7" y="814.0"></text>
</g>
<g>
<title>JavaThread::run() (86 samples, 8.63%)</title><rect x="1085.8" y="819.0" width="101.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.8" y="830.0">JavaThread::..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (86 samples, 8.63%)</title><rect x="1085.8" y="803.0" width="101.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1088.8" y="814.0">JavaThread::..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (86 samples, 8.63%)</title><rect x="1085.8" y="787.0" width="101.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1088.8" y="798.0">CompileBroke..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (86 samples, 8.63%)</title><rect x="1085.8" y="771.0" width="101.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1088.8" y="782.0">CompileBroke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (85 samples, 8.53%)</title><rect x="1085.8" y="755.0" width="100.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1088.8" y="766.0">C2Compiler::..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (85 samples, 8.53%)</title><rect x="1085.8" y="739.0" width="100.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1088.8" y="750.0">Compile::Com..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.10%)</title><rect x="1085.8" y="723.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1088.8" y="734.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.10%)</title><rect x="1085.8" y="707.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1088.8" y="718.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1085.8" y="691.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1088.8" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1085.8" y="675.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1088.8" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1085.8" y="659.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.8" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1085.8" y="643.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1088.8" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1085.8" y="627.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1088.8" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1085.8" y="611.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1088.8" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1085.8" y="595.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1088.8" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1085.8" y="579.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1088.8" y="590.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (39 samples, 3.91%)</title><rect x="1087.0" y="723.0" width="46.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1090.0" y="734.0">Comp..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.20%)</title><rect x="1087.0" y="707.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.0" y="718.0"></text>
</g>
<g>
<title>cmpFastLockNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.10%)</title><rect x="1088.2" y="691.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1091.2" y="702.0"></text>
</g>
<g>
<title>MacroAssembler::fast_lock(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, BiasedLockingCounters*, RTMLockingCounters*, RTMLockingCounters*, Metadata*, bool, bool) (1 samples, 0.10%)</title><rect x="1088.2" y="675.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1091.2" y="686.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.40%)</title><rect x="1089.4" y="707.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1092.4" y="718.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.10%)</title><rect x="1089.4" y="691.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.4" y="702.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.30%)</title><rect x="1090.6" y="691.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1093.6" y="702.0"></text>
</g>
<g>
<title>Matcher::collect_null_checks(Node*, Node*) (1 samples, 0.10%)</title><rect x="1091.8" y="675.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1094.8" y="686.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.10%)</title><rect x="1092.9" y="675.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1095.9" y="686.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.10%)</title><rect x="1092.9" y="659.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1095.9" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.20%)</title><rect x="1094.1" y="707.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.1" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.20%)</title><rect x="1094.1" y="691.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1097.1" y="702.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.10%)</title><rect x="1094.1" y="675.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.1" y="686.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.10%)</title><rect x="1095.3" y="675.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1098.3" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (31 samples, 3.11%)</title><rect x="1096.5" y="707.0" width="36.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1099.5" y="718.0">Pha..</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.10%)</title><rect x="1096.5" y="691.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.5" y="702.0"></text>
</g>
<g>
<title>MachProjNode::Opcode() const (1 samples, 0.10%)</title><rect x="1097.7" y="691.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1100.7" y="702.0"></text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.10%)</title><rect x="1098.9" y="691.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1101.9" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.10%)</title><rect x="1100.1" y="691.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.1" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1100.1" y="675.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1103.1" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 0.50%)</title><rect x="1101.2" y="691.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.2" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.30%)</title><rect x="1101.2" y="675.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1104.2" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.20%)</title><rect x="1104.8" y="675.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.8" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1106.0" y="659.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1109.0" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.20%)</title><rect x="1107.2" y="691.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1110.2" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.10%)</title><rect x="1108.3" y="675.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1111.3" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::new_lrg(Node const*, unsigned int) (1 samples, 0.10%)</title><rect x="1108.3" y="659.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1111.3" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 0.70%)</title><rect x="1109.5" y="691.0" width="8.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.5" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.40%)</title><rect x="1110.7" y="675.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1113.7" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1114.3" y="659.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1117.3" y="670.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.10%)</title><rect x="1115.4" y="675.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.4" y="686.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.10%)</title><rect x="1116.6" y="675.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1119.6" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.20%)</title><rect x="1117.8" y="691.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1120.8" y="702.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.10%)</title><rect x="1117.8" y="675.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1120.8" y="686.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.10%)</title><rect x="1119.0" y="675.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.0" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.10%)</title><rect x="1120.2" y="691.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1123.2" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.10%)</title><rect x="1120.2" y="675.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1123.2" y="686.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.20%)</title><rect x="1121.4" y="691.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.4" y="702.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.20%)</title><rect x="1121.4" y="675.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.4" y="686.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.20%)</title><rect x="1121.4" y="659.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.4" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.10%)</title><rect x="1122.5" y="643.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.5" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1122.5" y="627.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.5" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.10%)</title><rect x="1123.7" y="691.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.7" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.10%)</title><rect x="1123.7" y="675.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1126.7" y="686.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.50%)</title><rect x="1124.9" y="691.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.9" y="702.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.10%)</title><rect x="1130.8" y="691.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.8" y="702.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.10%)</title><rect x="1132.0" y="691.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.0" y="702.0"></text>
</g>
<g>
<title>Compile::Optimize() (37 samples, 3.71%)</title><rect x="1133.2" y="723.0" width="43.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.2" y="734.0">Comp..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.10%)</title><rect x="1133.2" y="707.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.2" y="718.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.10%)</title><rect x="1133.2" y="691.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.2" y="702.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (3 samples, 0.30%)</title><rect x="1134.4" y="707.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.4" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1135.6" y="691.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.6" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1135.6" y="675.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.6" y="686.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.10%)</title><rect x="1135.6" y="659.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.6" y="670.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.10%)</title><rect x="1135.6" y="643.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.6" y="654.0"></text>
</g>
<g>
<title>XorLNode::Opcode() const (1 samples, 0.10%)</title><rect x="1135.6" y="627.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.6" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.10%)</title><rect x="1136.7" y="691.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.10%)</title><rect x="1137.9" y="707.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.9" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.10%)</title><rect x="1137.9" y="691.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.9" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.10%)</title><rect x="1137.9" y="675.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.9" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.10%)</title><rect x="1137.9" y="659.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.9" y="670.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.10%)</title><rect x="1137.9" y="643.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.9" y="654.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.10%)</title><rect x="1137.9" y="627.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.9" y="638.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.10%)</title><rect x="1137.9" y="611.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.9" y="622.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.10%)</title><rect x="1137.9" y="595.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.9" y="606.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1137.9" y="579.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.9" y="590.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.10%)</title><rect x="1137.9" y="563.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.9" y="574.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.10%)</title><rect x="1137.9" y="547.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.9" y="558.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.10%)</title><rect x="1137.9" y="531.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.9" y="542.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.10%)</title><rect x="1137.9" y="515.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.9" y="526.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1137.9" y="499.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.9" y="510.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1137.9" y="483.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.9" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1137.9" y="467.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.9" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1137.9" y="451.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.9" y="462.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1137.9" y="435.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.9" y="446.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.10%)</title><rect x="1137.9" y="419.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.9" y="430.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.10%)</title><rect x="1137.9" y="403.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.9" y="414.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.10%)</title><rect x="1137.9" y="387.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.9" y="398.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.10%)</title><rect x="1137.9" y="371.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.9" y="382.0"></text>
</g>
<g>
<title>LoaderConstraintTable::add_entry(Symbol*, Klass*, Handle, Klass*, Handle) (1 samples, 0.10%)</title><rect x="1137.9" y="355.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.9" y="366.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (25 samples, 2.51%)</title><rect x="1139.1" y="707.0" width="29.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.1" y="718.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.20%)</title><rect x="1139.1" y="691.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.10%)</title><rect x="1140.3" y="675.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.3" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.10%)</title><rect x="1140.3" y="659.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.3" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (16 samples, 1.60%)</title><rect x="1141.5" y="691.0" width="18.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (13 samples, 1.30%)</title><rect x="1145.0" y="675.0" width="15.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.0" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (13 samples, 1.30%)</title><rect x="1145.0" y="659.0" width="15.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.0" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.20%)</title><rect x="1158.0" y="643.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.0" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.20%)</title><rect x="1160.4" y="691.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.4" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.10%)</title><rect x="1161.6" y="675.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.6" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.20%)</title><rect x="1162.8" y="691.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.10%)</title><rect x="1162.8" y="675.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.8" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1162.8" y="659.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.8" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1162.8" y="643.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.8" y="654.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.10%)</title><rect x="1162.8" y="627.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.8" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.10%)</title><rect x="1164.0" y="675.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.0" y="686.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.10%)</title><rect x="1164.0" y="659.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.0" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1165.1" y="691.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.1" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1165.1" y="675.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.1" y="686.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1165.1" y="659.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.1" y="670.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.10%)</title><rect x="1165.1" y="643.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.1" y="654.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.10%)</title><rect x="1166.3" y="691.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.3" y="702.0"></text>
</g>
<g>
<title>SuperWord::SuperWord(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1167.5" y="691.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.5" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.10%)</title><rect x="1168.7" y="707.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.7" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.60%)</title><rect x="1169.9" y="707.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.9" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.60%)</title><rect x="1169.9" y="691.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.9" y="702.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1169.9" y="675.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.9" y="686.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.10%)</title><rect x="1171.1" y="675.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.1" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1172.2" y="675.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.2" y="686.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1173.4" y="675.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.4" y="686.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1174.6" y="675.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.6" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.10%)</title><rect x="1174.6" y="659.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.6" y="670.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1175.8" y="675.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.8" y="686.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.10%)</title><rect x="1175.8" y="659.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.8" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1175.8" y="643.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.8" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1175.8" y="627.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.8" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1175.8" y="611.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.8" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1175.8" y="595.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.8" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1175.8" y="579.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.8" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1175.8" y="563.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.8" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1175.8" y="547.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.8" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1175.8" y="531.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.8" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1175.8" y="515.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.8" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1175.8" y="499.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.8" y="510.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1175.8" y="483.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.8" y="494.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1175.8" y="467.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.8" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.40%)</title><rect x="1177.0" y="723.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.0" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.40%)</title><rect x="1177.0" y="707.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.40%)</title><rect x="1177.0" y="691.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.40%)</title><rect x="1177.0" y="675.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.40%)</title><rect x="1177.0" y="659.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.40%)</title><rect x="1177.0" y="643.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.40%)</title><rect x="1177.0" y="627.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.40%)</title><rect x="1177.0" y="611.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.40%)</title><rect x="1177.0" y="595.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.40%)</title><rect x="1177.0" y="579.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.40%)</title><rect x="1177.0" y="563.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.40%)</title><rect x="1177.0" y="547.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1177.0" y="531.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1177.0" y="515.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1177.0" y="499.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1177.0" y="483.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1177.0" y="467.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.0" y="478.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.10%)</title><rect x="1177.0" y="451.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1178.2" y="451.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.2" y="435.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.2" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1178.2" y="419.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1178.2" y="403.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1178.2" y="387.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1178.2" y="371.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1178.2" y="355.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.2" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.2" y="339.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.2" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1178.2" y="323.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1178.2" y="307.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1178.2" y="291.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1178.2" y="275.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1178.2" y="259.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.2" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.2" y="243.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.2" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1178.2" y="227.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1178.2" y="211.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1178.2" y="195.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1178.2" y="179.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1178.2" y="163.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.2" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.2" y="147.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.2" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1178.2" y="131.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1178.2" y="115.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1178.2" y="99.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.2" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1178.2" y="83.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.2" y="94.0"></text>
</g>
<g>
<title>Parse::add_safepoint() (1 samples, 0.10%)</title><rect x="1178.2" y="67.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.2" y="78.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.10%)</title><rect x="1178.2" y="51.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.2" y="62.0"></text>
</g>
<g>
<title>SafePointNode::set_local(JVMState*, unsigned int, Node*) (1 samples, 0.10%)</title><rect x="1178.2" y="35.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.2" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1179.3" y="531.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.3" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1179.3" y="515.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.3" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1179.3" y="499.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1179.3" y="483.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1179.3" y="467.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1179.3" y="451.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1179.3" y="435.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1179.3" y="419.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.3" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1179.3" y="403.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1179.3" y="387.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1179.3" y="371.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1179.3" y="355.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1179.3" y="339.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.3" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.3" y="323.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.3" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1179.3" y="307.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1179.3" y="291.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1179.3" y="275.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1179.3" y="259.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1179.3" y="243.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.3" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.3" y="227.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.3" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1179.3" y="211.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1179.3" y="195.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1179.3" y="179.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1179.3" y="163.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1179.3" y="147.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.3" y="158.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1179.3" y="131.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.3" y="142.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1179.3" y="115.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.3" y="126.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1179.3" y="99.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.3" y="110.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1179.3" y="83.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.3" y="94.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.10%)</title><rect x="1179.3" y="67.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.3" y="78.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.10%)</title><rect x="1179.3" y="51.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.3" y="62.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.10%)</title><rect x="1179.3" y="35.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.3" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.5" y="323.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.5" y="334.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.10%)</title><rect x="1180.5" y="307.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.5" y="318.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.10%)</title><rect x="1181.7" y="723.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.7" y="734.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.10%)</title><rect x="1181.7" y="707.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.7" y="718.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (3 samples, 0.30%)</title><rect x="1182.9" y="723.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="734.0"></text>
</g>
<g>
<title>nmethod::make_not_entrant_or_zombie(unsigned int) (1 samples, 0.10%)</title><rect x="1182.9" y="707.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.9" y="718.0"></text>
</g>
<g>
<title>NMethodSweeper::report_state_change(nmethod*) (1 samples, 0.10%)</title><rect x="1182.9" y="691.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.9" y="702.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (2 samples, 0.20%)</title><rect x="1184.1" y="707.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.1" y="718.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.10%)</title><rect x="1184.1" y="691.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.1" y="702.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="1184.1" y="675.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.10%)</title><rect x="1185.3" y="691.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.3" y="702.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.10%)</title><rect x="1186.4" y="755.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.4" y="766.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.20%)</title><rect x="1187.6" y="819.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.6" y="830.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.20%)</title><rect x="1187.6" y="803.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.6" y="814.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (1 samples, 0.10%)</title><rect x="1187.6" y="787.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.6" y="798.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.10%)</title><rect x="1188.8" y="787.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.8" y="798.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.10%)</title><rect x="1188.8" y="771.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.8" y="782.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.10%)</title><rect x="1188.8" y="755.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.8" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.10%)</title><rect x="1188.8" y="739.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.8" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_humongous_regions_with_in_cset_fast_test() (1 samples, 0.10%)</title><rect x="1188.8" y="723.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.8" y="734.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.10%)</title><rect x="1188.8" y="707.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.8" y="718.0"></text>
</g>
<g>
<title>RegisterHumongousWithInCSetFastTestClosure::doHeapRegion(HeapRegion*) (1 samples, 0.10%)</title><rect x="1188.8" y="691.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.8" y="702.0"></text>
</g>
</g>
</svg>
