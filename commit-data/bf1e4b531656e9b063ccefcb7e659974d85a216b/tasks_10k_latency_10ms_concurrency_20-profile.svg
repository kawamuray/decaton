<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1206" onload="init(evt)" viewBox="0 0 1200 1206" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1189"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1189"> </text>
<g id="frames">
<g>
<title>all (98 samples, 100.00%)</title><rect x="10.0" y="1155.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1166.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 1.02%)</title><rect x="10.0" y="1139.0" width="12.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>__vsnprintf_chk (1 samples, 1.02%)</title><rect x="10.0" y="1123.0" width="12.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>__strchrnul (1 samples, 1.02%)</title><rect x="10.0" y="1107.0" width="12.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (3 samples, 3.06%)</title><rect x="22.0" y="1139.0" width="36.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.0" y="1150.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (3 samples, 3.06%)</title><rect x="22.0" y="1123.0" width="36.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="25.0" y="1134.0">com..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (3 samples, 3.06%)</title><rect x="22.0" y="1107.0" width="36.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.0" y="1118.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (3 samples, 3.06%)</title><rect x="22.0" y="1091.0" width="36.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.0" y="1102.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (2 samples, 2.04%)</title><rect x="22.0" y="1075.0" width="24.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.0" y="1086.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 2.04%)</title><rect x="22.0" y="1059.0" width="24.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="25.0" y="1070.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 2.04%)</title><rect x="22.0" y="1043.0" width="24.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.0" y="1054.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 2.04%)</title><rect x="22.0" y="1027.0" width="24.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.0" y="1038.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 1.02%)</title><rect x="22.0" y="1011.0" width="12.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 1.02%)</title><rect x="22.0" y="995.0" width="12.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 1.02%)</title><rect x="22.0" y="979.0" width="12.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.0" y="990.0"></text>
</g>
<g>
<title>java/util/Optional.filter (1 samples, 1.02%)</title><rect x="22.0" y="963.0" width="12.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.0" y="974.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 1.02%)</title><rect x="22.0" y="947.0" width="12.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 1.02%)</title><rect x="34.1" y="1011.0" width="12.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="37.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 1.02%)</title><rect x="34.1" y="995.0" width="12.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.maybeRegisterConnectionMetrics (1 samples, 1.02%)</title><rect x="34.1" y="979.0" width="12.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="37.1" y="990.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 1.02%)</title><rect x="34.1" y="963.0" width="12.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="37.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 1.02%)</title><rect x="46.1" y="1075.0" width="12.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="49.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 1.02%)</title><rect x="46.1" y="1059.0" width="12.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="49.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 1.02%)</title><rect x="46.1" y="1043.0" width="12.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="49.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 1.02%)</title><rect x="46.1" y="1027.0" width="12.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="49.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 1.02%)</title><rect x="46.1" y="1011.0" width="12.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="49.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToStagedReceives (1 samples, 1.02%)</title><rect x="46.1" y="995.0" width="12.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="49.1" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 1.02%)</title><rect x="46.1" y="979.0" width="12.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="49.1" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 1.02%)</title><rect x="46.1" y="963.0" width="12.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="49.1" y="974.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 1.02%)</title><rect x="58.2" y="1139.0" width="12.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="61.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 1.02%)</title><rect x="58.2" y="1123.0" width="12.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 1.02%)</title><rect x="58.2" y="1107.0" width="12.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="61.2" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1681407644.run (1 samples, 1.02%)</title><rect x="58.2" y="1091.0" width="12.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="61.2" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (1 samples, 1.02%)</title><rect x="58.2" y="1075.0" width="12.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="61.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (1 samples, 1.02%)</title><rect x="58.2" y="1059.0" width="12.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="61.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (1 samples, 1.02%)</title><rect x="58.2" y="1043.0" width="12.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 1.02%)</title><rect x="58.2" y="1027.0" width="12.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="61.2" y="1038.0"></text>
</g>
<g>
<title>start_thread (93 samples, 94.90%)</title><rect x="70.2" y="1139.0" width="1119.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="73.2" y="1150.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (93 samples, 94.90%)</title><rect x="70.2" y="1123.0" width="1119.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="73.2" y="1134.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 3.06%)</title><rect x="70.2" y="1107.0" width="36.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="73.2" y="1118.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (3 samples, 3.06%)</title><rect x="70.2" y="1091.0" width="36.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="73.2" y="1102.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 3.06%)</title><rect x="70.2" y="1075.0" width="36.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="73.2" y="1086.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 1.02%)</title><rect x="70.2" y="1059.0" width="12.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="73.2" y="1070.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 2.04%)</title><rect x="82.2" y="1059.0" width="24.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="85.2" y="1070.0">G..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (90 samples, 91.84%)</title><rect x="106.3" y="1107.0" width="1083.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="109.3" y="1118.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (90 samples, 91.84%)</title><rect x="106.3" y="1091.0" width="1083.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="109.3" y="1102.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (90 samples, 91.84%)</title><rect x="106.3" y="1075.0" width="1083.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="109.3" y="1086.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (89 samples, 90.82%)</title><rect x="106.3" y="1059.0" width="1071.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="109.3" y="1070.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (89 samples, 90.82%)</title><rect x="106.3" y="1043.0" width="1071.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="109.3" y="1054.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (32 samples, 32.65%)</title><rect x="106.3" y="1027.0" width="385.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="109.3" y="1038.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 1.02%)</title><rect x="106.3" y="1011.0" width="12.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="109.3" y="1022.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 1.02%)</title><rect x="106.3" y="995.0" width="12.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="109.3" y="1006.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 1.02%)</title><rect x="118.4" y="1011.0" width="12.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="121.4" y="1022.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 1.02%)</title><rect x="118.4" y="995.0" width="12.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="121.4" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 1.02%)</title><rect x="118.4" y="979.0" width="12.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="121.4" y="990.0"></text>
</g>
<g>
<title>__memcmp_sse4_1 (1 samples, 1.02%)</title><rect x="118.4" y="963.0" width="12.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="121.4" y="974.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 5.10%)</title><rect x="130.4" y="1011.0" width="60.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="133.4" y="1022.0">Matche..</text>
</g>
<g>
<title>CmpINode::Opcode() const (1 samples, 1.02%)</title><rect x="130.4" y="995.0" width="12.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="133.4" y="1006.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 4.08%)</title><rect x="142.4" y="995.0" width="48.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="145.4" y="1006.0">Matc..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 1.02%)</title><rect x="154.5" y="979.0" width="12.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="157.5" y="990.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 2.04%)</title><rect x="166.5" y="979.0" width="24.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="169.5" y="990.0">M..</text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 1.02%)</title><rect x="178.6" y="963.0" width="12.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="181.6" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 1.02%)</title><rect x="190.6" y="1011.0" width="12.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="193.6" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 1.02%)</title><rect x="190.6" y="995.0" width="12.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="193.6" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 1.02%)</title><rect x="190.6" y="979.0" width="12.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="193.6" y="990.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 1.02%)</title><rect x="190.6" y="963.0" width="12.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="193.6" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (24 samples, 24.49%)</title><rect x="202.7" y="1011.0" width="288.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="205.7" y="1022.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 1.02%)</title><rect x="202.7" y="995.0" width="12.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="205.7" y="1006.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 1.02%)</title><rect x="214.7" y="995.0" width="12.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="217.7" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 2.04%)</title><rect x="226.7" y="995.0" width="24.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="229.7" y="1006.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.02%)</title><rect x="238.8" y="979.0" width="12.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="241.8" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 1.02%)</title><rect x="250.8" y="995.0" width="12.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="253.8" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.02%)</title><rect x="250.8" y="979.0" width="12.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="253.8" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 4.08%)</title><rect x="262.9" y="995.0" width="48.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="265.9" y="1006.0">Phas..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 3.06%)</title><rect x="311.0" y="995.0" width="36.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="314.0" y="1006.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 3.06%)</title><rect x="311.0" y="979.0" width="36.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="314.0" y="990.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 1.02%)</title><rect x="347.1" y="995.0" width="12.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="350.1" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (3 samples, 3.06%)</title><rect x="359.2" y="995.0" width="36.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="362.2" y="1006.0">Pha..</text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 1.02%)</title><rect x="383.3" y="979.0" width="12.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="386.3" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 2.04%)</title><rect x="395.3" y="995.0" width="24.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="398.3" y="1006.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 1.02%)</title><rect x="407.3" y="979.0" width="12.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="410.3" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 2.04%)</title><rect x="419.4" y="995.0" width="24.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="422.4" y="1006.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.02%)</title><rect x="431.4" y="979.0" width="12.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="434.4" y="990.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 2.04%)</title><rect x="443.5" y="995.0" width="24.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="446.5" y="1006.0">P..</text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 1.02%)</title><rect x="467.6" y="995.0" width="12.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="470.6" y="1006.0"></text>
</g>
<g>
<title>storeLNode::oper_input_base() const (1 samples, 1.02%)</title><rect x="479.6" y="995.0" width="12.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="482.6" y="1006.0"></text>
</g>
<g>
<title>Compile::Optimize() (49 samples, 50.00%)</title><rect x="491.6" y="1027.0" width="590.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="494.6" y="1038.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 1.02%)</title><rect x="491.6" y="1011.0" width="12.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="494.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 1.02%)</title><rect x="491.6" y="995.0" width="12.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="494.6" y="1006.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 1.02%)</title><rect x="491.6" y="979.0" width="12.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="494.6" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 2.04%)</title><rect x="503.7" y="1011.0" width="24.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="506.7" y="1022.0">C..</text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 2.04%)</title><rect x="503.7" y="995.0" width="24.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="506.7" y="1006.0">C..</text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 1.02%)</title><rect x="503.7" y="979.0" width="12.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="506.7" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 1.02%)</title><rect x="503.7" y="963.0" width="12.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="506.7" y="974.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 1.02%)</title><rect x="503.7" y="947.0" width="12.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="506.7" y="958.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 1.02%)</title><rect x="503.7" y="931.0" width="12.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="506.7" y="942.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 1.02%)</title><rect x="503.7" y="915.0" width="12.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="506.7" y="926.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 1.02%)</title><rect x="503.7" y="899.0" width="12.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="506.7" y="910.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 1.02%)</title><rect x="503.7" y="883.0" width="12.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="506.7" y="894.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 1.02%)</title><rect x="503.7" y="867.0" width="12.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="506.7" y="878.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 1.02%)</title><rect x="503.7" y="851.0" width="12.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="506.7" y="862.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 1.02%)</title><rect x="503.7" y="835.0" width="12.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="506.7" y="846.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 1.02%)</title><rect x="503.7" y="819.0" width="12.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="506.7" y="830.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 1.02%)</title><rect x="503.7" y="803.0" width="12.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="506.7" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 1.02%)</title><rect x="503.7" y="787.0" width="12.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="506.7" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 1.02%)</title><rect x="503.7" y="771.0" width="12.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="506.7" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 1.02%)</title><rect x="503.7" y="755.0" width="12.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="506.7" y="766.0"></text>
</g>
<g>
<title>ConstantPool::impl_klass_ref_index_at(int, bool) (1 samples, 1.02%)</title><rect x="503.7" y="739.0" width="12.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="506.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 1.02%)</title><rect x="515.7" y="979.0" width="12.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="518.7" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.02%)</title><rect x="515.7" y="963.0" width="12.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="518.7" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.02%)</title><rect x="515.7" y="947.0" width="12.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="518.7" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.02%)</title><rect x="515.7" y="931.0" width="12.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="518.7" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.02%)</title><rect x="515.7" y="915.0" width="12.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="518.7" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.02%)</title><rect x="515.7" y="899.0" width="12.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="518.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.02%)</title><rect x="515.7" y="883.0" width="12.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="518.7" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.02%)</title><rect x="515.7" y="867.0" width="12.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="518.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.02%)</title><rect x="515.7" y="851.0" width="12.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="518.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 1.02%)</title><rect x="515.7" y="835.0" width="12.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="518.7" y="846.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 2.04%)</title><rect x="527.8" y="1011.0" width="24.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="530.8" y="1022.0">P..</text>
</g>
<g>
<title>LoadNKlassNode::Value(PhaseTransform*) const (1 samples, 1.02%)</title><rect x="527.8" y="995.0" width="12.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="530.8" y="1006.0"></text>
</g>
<g>
<title>LoadNode::klass_value_common(PhaseTransform*) const (1 samples, 1.02%)</title><rect x="527.8" y="979.0" width="12.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="530.8" y="990.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 1.02%)</title><rect x="539.8" y="995.0" width="12.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="542.8" y="1006.0"></text>
</g>
<g>
<title>TypeInt::filter_helper(Type const*, bool) const (1 samples, 1.02%)</title><rect x="539.8" y="979.0" width="12.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="542.8" y="990.0"></text>
</g>
<g>
<title>TypeInt::make(int, int, int) (1 samples, 1.02%)</title><rect x="539.8" y="963.0" width="12.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="542.8" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (33 samples, 33.67%)</title><rect x="551.8" y="1011.0" width="397.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="554.8" y="1022.0">PhaseIdealLoop::build_and_optimize(bool, bool)</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 1.02%)</title><rect x="551.8" y="995.0" width="12.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="554.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (29 samples, 29.59%)</title><rect x="563.9" y="995.0" width="349.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="566.9" y="1006.0">PhaseIdealLoop::build_loop_late(VectorSet&amp;, Nod..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (29 samples, 29.59%)</title><rect x="563.9" y="979.0" width="349.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="566.9" y="990.0">PhaseIdealLoop::build_loop_late_post(Node*)</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (29 samples, 29.59%)</title><rect x="563.9" y="963.0" width="349.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="566.9" y="974.0">PhaseIdealLoop::get_late_ctrl(Node*, Node*)</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (27 samples, 27.55%)</title><rect x="588.0" y="947.0" width="325.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="591.0" y="958.0">PhaseIdealLoop::is_dominator(Node*, Node*)</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 1.02%)</title><rect x="913.1" y="995.0" width="12.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="916.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 1.02%)</title><rect x="913.1" y="979.0" width="12.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="916.1" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 1.02%)</title><rect x="913.1" y="963.0" width="12.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="916.1" y="974.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 1.02%)</title><rect x="913.1" y="947.0" width="12.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="916.1" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 1.02%)</title><rect x="925.1" y="995.0" width="12.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="928.1" y="1006.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 1.02%)</title><rect x="937.1" y="995.0" width="12.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="940.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (9 samples, 9.18%)</title><rect x="949.2" y="1011.0" width="108.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="952.2" y="1022.0">PhaseIterGVN:..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 9.18%)</title><rect x="949.2" y="995.0" width="108.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="952.2" y="1006.0">PhaseIterGVN:..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 2.04%)</title><rect x="949.2" y="979.0" width="24.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="952.2" y="990.0">L..</text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 1.02%)</title><rect x="949.2" y="963.0" width="12.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="952.2" y="974.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 1.02%)</title><rect x="949.2" y="947.0" width="12.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="952.2" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 1.02%)</title><rect x="949.2" y="931.0" width="12.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="952.2" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 1.02%)</title><rect x="949.2" y="915.0" width="12.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="952.2" y="926.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 1.02%)</title><rect x="949.2" y="899.0" width="12.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="952.2" y="910.0"></text>
</g>
<g>
<title>ciInstance::java_lang_Class_klass() (1 samples, 1.02%)</title><rect x="949.2" y="883.0" width="12.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="952.2" y="894.0"></text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 1.02%)</title><rect x="949.2" y="867.0" width="12.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="952.2" y="878.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 1.02%)</title><rect x="961.2" y="963.0" width="12.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="964.2" y="974.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 1.02%)</title><rect x="961.2" y="947.0" width="12.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="964.2" y="958.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 1.02%)</title><rect x="961.2" y="931.0" width="12.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="964.2" y="942.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 1.02%)</title><rect x="973.3" y="979.0" width="12.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="976.3" y="990.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 1.02%)</title><rect x="973.3" y="963.0" width="12.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="976.3" y="974.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 1.02%)</title><rect x="973.3" y="947.0" width="12.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="976.3" y="958.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 1.02%)</title><rect x="973.3" y="931.0" width="12.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="976.3" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (5 samples, 5.10%)</title><rect x="985.3" y="979.0" width="60.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="988.3" y="990.0">PhaseI..</text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 2.04%)</title><rect x="1009.4" y="963.0" width="24.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1012.4" y="974.0">P..</text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (2 samples, 2.04%)</title><rect x="1009.4" y="947.0" width="24.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1012.4" y="958.0">N..</text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 1.02%)</title><rect x="1033.5" y="963.0" width="12.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1036.5" y="974.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 1.02%)</title><rect x="1033.5" y="947.0" width="12.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1036.5" y="958.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 1.02%)</title><rect x="1045.5" y="979.0" width="12.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1048.5" y="990.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 1.02%)</title><rect x="1045.5" y="963.0" width="12.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1048.5" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.02%)</title><rect x="1045.5" y="947.0" width="12.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1048.5" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.02%)</title><rect x="1045.5" y="931.0" width="12.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1048.5" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.02%)</title><rect x="1045.5" y="915.0" width="12.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1048.5" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.02%)</title><rect x="1045.5" y="899.0" width="12.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1048.5" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.02%)</title><rect x="1045.5" y="883.0" width="12.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1048.5" y="894.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 1.02%)</title><rect x="1045.5" y="867.0" width="12.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1048.5" y="878.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 1.02%)</title><rect x="1045.5" y="851.0" width="12.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1048.5" y="862.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 1.02%)</title><rect x="1057.6" y="1011.0" width="12.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1060.6" y="1022.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 1.02%)</title><rect x="1057.6" y="995.0" width="12.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1060.6" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 1.02%)</title><rect x="1057.6" y="979.0" width="12.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1060.6" y="990.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 1.02%)</title><rect x="1057.6" y="963.0" width="12.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1060.6" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 1.02%)</title><rect x="1069.6" y="1011.0" width="12.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1072.6" y="1022.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_unlock_node(UnlockNode*) (1 samples, 1.02%)</title><rect x="1069.6" y="995.0" width="12.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1072.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 1.02%)</title><rect x="1069.6" y="979.0" width="12.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1072.6" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) (1 samples, 1.02%)</title><rect x="1069.6" y="963.0" width="12.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1072.6" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 8.16%)</title><rect x="1081.6" y="1027.0" width="96.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1084.6" y="1038.0">ParseGenera..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 8.16%)</title><rect x="1081.6" y="1011.0" width="96.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1084.6" y="1022.0">Parse::Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 8.16%)</title><rect x="1081.6" y="995.0" width="96.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1084.6" y="1006.0">Parse::do_a..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 8.16%)</title><rect x="1081.6" y="979.0" width="96.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.6" y="990.0">Parse::do_o..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 8.16%)</title><rect x="1081.6" y="963.0" width="96.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1084.6" y="974.0">Parse::do_o..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 7.14%)</title><rect x="1081.6" y="947.0" width="84.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1084.6" y="958.0">Parse::do_..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 6.12%)</title><rect x="1081.6" y="931.0" width="72.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1084.6" y="942.0">ParseGen..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 6.12%)</title><rect x="1081.6" y="915.0" width="72.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1084.6" y="926.0">Parse::P..</text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 1.02%)</title><rect x="1081.6" y="899.0" width="12.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1084.6" y="910.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 1.02%)</title><rect x="1081.6" y="883.0" width="12.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1084.6" y="894.0"></text>
</g>
<g>
<title>BoolNode::Value(PhaseTransform*) const (1 samples, 1.02%)</title><rect x="1081.6" y="867.0" width="12.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1084.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 5.10%)</title><rect x="1093.7" y="899.0" width="60.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1096.7" y="910.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 5.10%)</title><rect x="1093.7" y="883.0" width="60.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1096.7" y="894.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 5.10%)</title><rect x="1093.7" y="867.0" width="60.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1096.7" y="878.0">Parse:..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 4.08%)</title><rect x="1093.7" y="851.0" width="48.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1096.7" y="862.0">Pars..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 4.08%)</title><rect x="1093.7" y="835.0" width="48.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.7" y="846.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 4.08%)</title><rect x="1093.7" y="819.0" width="48.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1096.7" y="830.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 4.08%)</title><rect x="1093.7" y="803.0" width="48.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1096.7" y="814.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 4.08%)</title><rect x="1093.7" y="787.0" width="48.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.7" y="798.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 4.08%)</title><rect x="1093.7" y="771.0" width="48.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1096.7" y="782.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 4.08%)</title><rect x="1093.7" y="755.0" width="48.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1096.7" y="766.0">Pars..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 4.08%)</title><rect x="1093.7" y="739.0" width="48.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.7" y="750.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 4.08%)</title><rect x="1093.7" y="723.0" width="48.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.7" y="734.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.06%)</title><rect x="1093.7" y="707.0" width="36.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1096.7" y="718.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.06%)</title><rect x="1093.7" y="691.0" width="36.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.7" y="702.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.06%)</title><rect x="1093.7" y="675.0" width="36.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1096.7" y="686.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.06%)</title><rect x="1093.7" y="659.0" width="36.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1096.7" y="670.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.06%)</title><rect x="1093.7" y="643.0" width="36.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.7" y="654.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.06%)</title><rect x="1093.7" y="627.0" width="36.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1096.7" y="638.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.06%)</title><rect x="1093.7" y="611.0" width="36.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1096.7" y="622.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.06%)</title><rect x="1093.7" y="595.0" width="36.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.7" y="606.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.06%)</title><rect x="1093.7" y="579.0" width="36.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1096.7" y="590.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.06%)</title><rect x="1093.7" y="563.0" width="36.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.7" y="574.0">Par..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 1.02%)</title><rect x="1093.7" y="547.0" width="12.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1096.7" y="558.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 1.02%)</title><rect x="1093.7" y="531.0" width="12.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1096.7" y="542.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 1.02%)</title><rect x="1093.7" y="515.0" width="12.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.7" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 1.02%)</title><rect x="1093.7" y="499.0" width="12.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1096.7" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 1.02%)</title><rect x="1093.7" y="483.0" width="12.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.7" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.02%)</title><rect x="1093.7" y="467.0" width="12.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1096.7" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.02%)</title><rect x="1093.7" y="451.0" width="12.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1096.7" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 1.02%)</title><rect x="1093.7" y="435.0" width="12.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1096.7" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 1.02%)</title><rect x="1093.7" y="419.0" width="12.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1096.7" y="430.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 1.02%)</title><rect x="1093.7" y="403.0" width="12.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1096.7" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 1.02%)</title><rect x="1093.7" y="387.0" width="12.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1096.7" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 1.02%)</title><rect x="1093.7" y="371.0" width="12.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.7" y="382.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 1.02%)</title><rect x="1093.7" y="355.0" width="12.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1096.7" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 1.02%)</title><rect x="1093.7" y="339.0" width="12.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.7" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 1.02%)</title><rect x="1093.7" y="323.0" width="12.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1096.7" y="334.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 1.02%)</title><rect x="1093.7" y="307.0" width="12.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1096.7" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 1.02%)</title><rect x="1093.7" y="291.0" width="12.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1096.7" y="302.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 1.02%)</title><rect x="1093.7" y="275.0" width="12.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1096.7" y="286.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 1.02%)</title><rect x="1093.7" y="259.0" width="12.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1096.7" y="270.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 1.02%)</title><rect x="1093.7" y="243.0" width="12.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.7" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 2.04%)</title><rect x="1105.7" y="547.0" width="24.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.7" y="558.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 2.04%)</title><rect x="1105.7" y="531.0" width="24.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.7" y="542.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 2.04%)</title><rect x="1105.7" y="515.0" width="24.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1108.7" y="526.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 2.04%)</title><rect x="1105.7" y="499.0" width="24.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.7" y="510.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 2.04%)</title><rect x="1105.7" y="483.0" width="24.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1108.7" y="494.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.02%)</title><rect x="1105.7" y="467.0" width="12.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1108.7" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.02%)</title><rect x="1105.7" y="451.0" width="12.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.02%)</title><rect x="1105.7" y="435.0" width="12.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.7" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.02%)</title><rect x="1105.7" y="419.0" width="12.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1108.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.02%)</title><rect x="1105.7" y="403.0" width="12.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.02%)</title><rect x="1105.7" y="387.0" width="12.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.02%)</title><rect x="1105.7" y="371.0" width="12.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1108.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.02%)</title><rect x="1105.7" y="355.0" width="12.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1108.7" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.02%)</title><rect x="1105.7" y="339.0" width="12.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.7" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.02%)</title><rect x="1105.7" y="323.0" width="12.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.02%)</title><rect x="1105.7" y="307.0" width="12.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1108.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.02%)</title><rect x="1105.7" y="291.0" width="12.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1108.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.02%)</title><rect x="1105.7" y="275.0" width="12.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.02%)</title><rect x="1105.7" y="259.0" width="12.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.7" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.02%)</title><rect x="1105.7" y="243.0" width="12.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.7" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.02%)</title><rect x="1105.7" y="227.0" width="12.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1108.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.02%)</title><rect x="1105.7" y="211.0" width="12.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1108.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.02%)</title><rect x="1105.7" y="195.0" width="12.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1108.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.02%)</title><rect x="1105.7" y="179.0" width="12.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 1.02%)</title><rect x="1105.7" y="163.0" width="12.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1108.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 1.02%)</title><rect x="1105.7" y="147.0" width="12.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.7" y="158.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 1.02%)</title><rect x="1105.7" y="131.0" width="12.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.7" y="142.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 1.02%)</title><rect x="1105.7" y="115.0" width="12.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.7" y="126.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 1.02%)</title><rect x="1105.7" y="99.0" width="12.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1108.7" y="110.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 1.02%)</title><rect x="1105.7" y="83.0" width="12.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1108.7" y="94.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 1.02%)</title><rect x="1105.7" y="67.0" width="12.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1108.7" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 1.02%)</title><rect x="1105.7" y="51.0" width="12.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1108.7" y="62.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 1.02%)</title><rect x="1105.7" y="35.0" width="12.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.7" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 1.02%)</title><rect x="1117.8" y="467.0" width="12.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 1.02%)</title><rect x="1117.8" y="451.0" width="12.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.8" y="462.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 1.02%)</title><rect x="1117.8" y="435.0" width="12.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.8" y="446.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 1.02%)</title><rect x="1117.8" y="419.0" width="12.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1120.8" y="430.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 1.02%)</title><rect x="1117.8" y="403.0" width="12.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.8" y="414.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 1.02%)</title><rect x="1117.8" y="387.0" width="12.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 1.02%)</title><rect x="1129.8" y="707.0" width="12.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.8" y="718.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 1.02%)</title><rect x="1129.8" y="691.0" width="12.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.8" y="702.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 1.02%)</title><rect x="1141.8" y="851.0" width="12.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.8" y="862.0"></text>
</g>
<g>
<title>CmpINode::Ideal(PhaseGVN*, bool) (1 samples, 1.02%)</title><rect x="1141.8" y="835.0" width="12.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.8" y="846.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 1.02%)</title><rect x="1141.8" y="819.0" width="12.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.8" y="830.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 1.02%)</title><rect x="1141.8" y="803.0" width="12.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.8" y="814.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 1.02%)</title><rect x="1141.8" y="787.0" width="12.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.8" y="798.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.02%)</title><rect x="1153.9" y="931.0" width="12.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.9" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.02%)</title><rect x="1153.9" y="915.0" width="12.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.9" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.02%)</title><rect x="1153.9" y="899.0" width="12.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.02%)</title><rect x="1153.9" y="883.0" width="12.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.02%)</title><rect x="1153.9" y="867.0" width="12.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.02%)</title><rect x="1153.9" y="851.0" width="12.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.02%)</title><rect x="1153.9" y="835.0" width="12.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.9" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.02%)</title><rect x="1153.9" y="819.0" width="12.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.9" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.02%)</title><rect x="1153.9" y="803.0" width="12.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.02%)</title><rect x="1153.9" y="787.0" width="12.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.02%)</title><rect x="1153.9" y="771.0" width="12.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.02%)</title><rect x="1153.9" y="755.0" width="12.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.02%)</title><rect x="1153.9" y="739.0" width="12.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.9" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.02%)</title><rect x="1153.9" y="723.0" width="12.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.9" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.02%)</title><rect x="1153.9" y="707.0" width="12.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.02%)</title><rect x="1153.9" y="691.0" width="12.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.02%)</title><rect x="1153.9" y="675.0" width="12.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.02%)</title><rect x="1153.9" y="659.0" width="12.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.02%)</title><rect x="1153.9" y="643.0" width="12.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.9" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.02%)</title><rect x="1153.9" y="627.0" width="12.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.9" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.02%)</title><rect x="1153.9" y="611.0" width="12.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.02%)</title><rect x="1153.9" y="595.0" width="12.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.02%)</title><rect x="1153.9" y="579.0" width="12.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.02%)</title><rect x="1153.9" y="563.0" width="12.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.02%)</title><rect x="1153.9" y="547.0" width="12.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.9" y="558.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 1.02%)</title><rect x="1153.9" y="531.0" width="12.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.9" y="542.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 1.02%)</title><rect x="1153.9" y="515.0" width="12.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.9" y="526.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 1.02%)</title><rect x="1153.9" y="499.0" width="12.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.9" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 1.02%)</title><rect x="1153.9" y="483.0" width="12.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.9" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 1.02%)</title><rect x="1153.9" y="467.0" width="12.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.9" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.02%)</title><rect x="1153.9" y="451.0" width="12.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.9" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.02%)</title><rect x="1153.9" y="435.0" width="12.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.9" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 1.02%)</title><rect x="1153.9" y="419.0" width="12.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.9" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 1.02%)</title><rect x="1153.9" y="403.0" width="12.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.9" y="414.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 1.02%)</title><rect x="1153.9" y="387.0" width="12.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.9" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 1.02%)</title><rect x="1153.9" y="371.0" width="12.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.9" y="382.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 1.02%)</title><rect x="1153.9" y="355.0" width="12.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.9" y="366.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 1.02%)</title><rect x="1153.9" y="339.0" width="12.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.9" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 1.02%)</title><rect x="1153.9" y="323.0" width="12.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.9" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 1.02%)</title><rect x="1153.9" y="307.0" width="12.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 1.02%)</title><rect x="1165.9" y="947.0" width="12.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 1.02%)</title><rect x="1165.9" y="931.0" width="12.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.9" y="942.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 1.02%)</title><rect x="1165.9" y="915.0" width="12.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.9" y="926.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 1.02%)</title><rect x="1165.9" y="899.0" width="12.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.9" y="910.0"></text>
</g>
<g>
<title>IdealKit::store(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool) (1 samples, 1.02%)</title><rect x="1165.9" y="883.0" width="12.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.9" y="894.0"></text>
</g>
<g>
<title>StoreNode::bottom_type() const (1 samples, 1.02%)</title><rect x="1165.9" y="867.0" width="12.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.9" y="878.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 1.02%)</title><rect x="1178.0" y="1059.0" width="12.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.0" y="1070.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 1.02%)</title><rect x="1178.0" y="1043.0" width="12.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.0" y="1054.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 1.02%)</title><rect x="1178.0" y="1027.0" width="12.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.0" y="1038.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 1.02%)</title><rect x="1178.0" y="1011.0" width="12.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.0" y="1022.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 1.02%)</title><rect x="1178.0" y="995.0" width="12.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.0" y="1006.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 1.02%)</title><rect x="1178.0" y="979.0" width="12.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.0" y="990.0"></text>
</g>
<g>
<title>ValueMap::ValueMap(ValueMap*) (1 samples, 1.02%)</title><rect x="1178.0" y="963.0" width="12.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.0" y="974.0"></text>
</g>
<g>
<title>BitMap::BitMap(unsigned long, bool) (1 samples, 1.02%)</title><rect x="1178.0" y="947.0" width="12.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.0" y="958.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 1.02%)</title><rect x="1178.0" y="931.0" width="12.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.0" y="942.0"></text>
</g>
</g>
</svg>
