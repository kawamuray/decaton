<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1494" onload="init(evt)" viewBox="0 0 1200 1494" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1477"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1477"> </text>
<g id="frames">
<g>
<title>all (296 samples, 100.00%)</title><rect x="10.0" y="1443.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1454.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (22 samples, 7.43%)</title><rect x="10.0" y="1427.0" width="87.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1438.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.34%)</title><rect x="10.0" y="1411.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.34%)</title><rect x="10.0" y="1395.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.34%)</title><rect x="10.0" y="1379.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.34%)</title><rect x="10.0" y="1363.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.34%)</title><rect x="10.0" y="1347.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.34%)</title><rect x="10.0" y="1331.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.34%)</title><rect x="10.0" y="1315.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.34%)</title><rect x="10.0" y="1299.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.34%)</title><rect x="10.0" y="1283.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.34%)</title><rect x="10.0" y="1267.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.34%)</title><rect x="10.0" y="1251.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.34%)</title><rect x="10.0" y="1235.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.34%)</title><rect x="10.0" y="1219.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.34%)</title><rect x="10.0" y="1203.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.34%)</title><rect x="10.0" y="1187.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.34%)</title><rect x="10.0" y="1171.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.validate (1 samples, 0.34%)</title><rect x="10.0" y="1155.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.validate (1 samples, 0.34%)</title><rect x="10.0" y="1139.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.34%)</title><rect x="10.0" y="1123.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.34%)</title><rect x="10.0" y="1107.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.34%)</title><rect x="10.0" y="1091.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (21 samples, 7.09%)</title><rect x="14.0" y="1411.0" width="83.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.0" y="1422.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.68%)</title><rect x="14.0" y="1395.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.34%)</title><rect x="14.0" y="1379.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.0" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.34%)</title><rect x="14.0" y="1363.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.0" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.34%)</title><rect x="14.0" y="1347.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.0" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.34%)</title><rect x="14.0" y="1331.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.0" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.34%)</title><rect x="14.0" y="1315.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.0" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.34%)</title><rect x="14.0" y="1299.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.0" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.34%)</title><rect x="14.0" y="1283.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="17.0" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.34%)</title><rect x="14.0" y="1267.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.0" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.34%)</title><rect x="14.0" y="1251.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.0" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.34%)</title><rect x="14.0" y="1235.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.0" y="1246.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.34%)</title><rect x="18.0" y="1379.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.0" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$274/1406869685.accept (1 samples, 0.34%)</title><rect x="18.0" y="1363.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.0" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pausePartitions$39 (1 samples, 0.34%)</title><rect x="18.0" y="1347.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.0" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.34%)</title><rect x="22.0" y="1395.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.34%)</title><rect x="22.0" y="1379.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.0" y="1390.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 2.03%)</title><rect x="25.9" y="1395.0" width="24.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.9" y="1406.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/952470404.accept (6 samples, 2.03%)</title><rect x="25.9" y="1379.0" width="24.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.9" y="1390.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (5 samples, 1.69%)</title><rect x="29.9" y="1363.0" width="20.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="32.9" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 0.34%)</title><rect x="29.9" y="1347.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="32.9" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 0.34%)</title><rect x="29.9" y="1331.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.9" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 0.34%)</title><rect x="29.9" y="1315.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.9" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.34%)</title><rect x="29.9" y="1299.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="32.9" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.34%)</title><rect x="29.9" y="1283.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.9" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.34%)</title><rect x="29.9" y="1267.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="32.9" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 1.35%)</title><rect x="33.9" y="1347.0" width="16.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="36.9" y="1358.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.35%)</title><rect x="33.9" y="1331.0" width="16.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.9" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.05%)</title><rect x="49.9" y="1395.0" width="47.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="52.9" y="1406.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.05%)</title><rect x="49.9" y="1379.0" width="47.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="52.9" y="1390.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 3.04%)</title><rect x="53.9" y="1363.0" width="35.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="56.9" y="1374.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.34%)</title><rect x="53.9" y="1347.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="56.9" y="1358.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (1 samples, 0.34%)</title><rect x="53.9" y="1331.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.9" y="1342.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.34%)</title><rect x="53.9" y="1315.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="56.9" y="1326.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.34%)</title><rect x="53.9" y="1299.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="56.9" y="1310.0"></text>
</g>
<g>
<title>JavaThreadBlockedOnMonitorEnterState::contended_enter_begin(JavaThread*) (1 samples, 0.34%)</title><rect x="53.9" y="1283.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="56.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.69%)</title><rect x="57.8" y="1347.0" width="20.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="60.8" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.69%)</title><rect x="57.8" y="1331.0" width="20.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="60.8" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.34%)</title><rect x="57.8" y="1315.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.8" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.34%)</title><rect x="57.8" y="1299.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.8" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.34%)</title><rect x="57.8" y="1283.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.34%)</title><rect x="57.8" y="1267.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="60.8" y="1278.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.34%)</title><rect x="57.8" y="1251.0" width="4.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="60.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.68%)</title><rect x="61.8" y="1315.0" width="8.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="64.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.34%)</title><rect x="61.8" y="1299.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="64.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.34%)</title><rect x="61.8" y="1283.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.34%)</title><rect x="61.8" y="1267.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="64.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.34%)</title><rect x="61.8" y="1251.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$3.read (1 samples, 0.34%)</title><rect x="61.8" y="1235.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.34%)</title><rect x="65.8" y="1299.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="68.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.34%)</title><rect x="65.8" y="1283.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.34%)</title><rect x="65.8" y="1267.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.34%)</title><rect x="65.8" y="1251.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="68.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.34%)</title><rect x="65.8" y="1235.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="68.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.34%)</title><rect x="65.8" y="1219.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="68.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.34%)</title><rect x="65.8" y="1203.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="68.8" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.34%)</title><rect x="65.8" y="1187.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="68.8" y="1198.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="65.8" y="1171.0" width="4.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="68.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$244/1631449487.shouldBlock (1 samples, 0.34%)</title><rect x="69.8" y="1315.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="72.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.34%)</title><rect x="69.8" y="1299.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="72.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.34%)</title><rect x="69.8" y="1283.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="72.8" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.34%)</title><rect x="69.8" y="1267.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="72.8" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.34%)</title><rect x="69.8" y="1251.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="72.8" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.34%)</title><rect x="69.8" y="1235.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="72.8" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.34%)</title><rect x="69.8" y="1219.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="72.8" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.34%)</title><rect x="69.8" y="1203.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="72.8" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.34%)</title><rect x="69.8" y="1187.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.8" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.34%)</title><rect x="69.8" y="1171.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="72.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.34%)</title><rect x="73.8" y="1315.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="76.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.34%)</title><rect x="73.8" y="1299.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.34%)</title><rect x="73.8" y="1283.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="76.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch.countDown (1 samples, 0.34%)</title><rect x="73.8" y="1267.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.8" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.34%)</title><rect x="73.8" y="1251.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 0.68%)</title><rect x="77.8" y="1347.0" width="7.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="80.8" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.68%)</title><rect x="77.8" y="1331.0" width="7.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="80.8" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.68%)</title><rect x="77.8" y="1315.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.68%)</title><rect x="77.8" y="1299.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.34%)</title><rect x="77.8" y="1283.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="80.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.34%)</title><rect x="77.8" y="1267.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="80.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.34%)</title><rect x="77.8" y="1251.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="80.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.34%)</title><rect x="77.8" y="1235.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.34%)</title><rect x="77.8" y="1219.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="80.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.34%)</title><rect x="77.8" y="1203.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.34%)</title><rect x="77.8" y="1187.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.34%)</title><rect x="77.8" y="1171.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="80.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.34%)</title><rect x="81.8" y="1283.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="84.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.34%)</title><rect x="81.8" y="1267.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="84.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.34%)</title><rect x="81.8" y="1251.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="84.8" y="1262.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.34%)</title><rect x="81.8" y="1235.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="84.8" y="1246.0"></text>
</g>
<g>
<title>java/util/Arrays$ArrayList.toArray (1 samples, 0.34%)</title><rect x="81.8" y="1219.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.8" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="81.8" y="1203.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="84.8" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.34%)</title><rect x="81.8" y="1187.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="84.8" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.34%)</title><rect x="81.8" y="1171.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="84.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.34%)</title><rect x="85.7" y="1347.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="88.7" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.34%)</title><rect x="85.7" y="1331.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="88.7" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.34%)</title><rect x="85.7" y="1315.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="88.7" y="1326.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.34%)</title><rect x="85.7" y="1299.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.7" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.34%)</title><rect x="85.7" y="1283.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="88.7" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.34%)</title><rect x="89.7" y="1363.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="92.7" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.34%)</title><rect x="89.7" y="1347.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.7" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.34%)</title><rect x="89.7" y="1331.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="92.7" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.34%)</title><rect x="89.7" y="1315.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="92.7" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.34%)</title><rect x="89.7" y="1299.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="92.7" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.34%)</title><rect x="89.7" y="1283.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="92.7" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.34%)</title><rect x="89.7" y="1267.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="92.7" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.34%)</title><rect x="89.7" y="1251.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="92.7" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.34%)</title><rect x="89.7" y="1235.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="92.7" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.34%)</title><rect x="89.7" y="1219.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="92.7" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.34%)</title><rect x="89.7" y="1203.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.7" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.cancellationRequested (1 samples, 0.34%)</title><rect x="89.7" y="1187.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="92.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.34%)</title><rect x="93.7" y="1363.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="96.7" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.34%)</title><rect x="93.7" y="1347.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="96.7" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.34%)</title><rect x="93.7" y="1331.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="96.7" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.34%)</title><rect x="93.7" y="1315.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="96.7" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.34%)</title><rect x="93.7" y="1299.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="96.7" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.34%)</title><rect x="93.7" y="1283.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="96.7" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.34%)</title><rect x="93.7" y="1267.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.7" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.34%)</title><rect x="93.7" y="1251.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="96.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.34%)</title><rect x="93.7" y="1235.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="96.7" y="1246.0"></text>
</g>
<g>
<title>java/lang/Thread.run (159 samples, 53.72%)</title><rect x="97.7" y="1427.0" width="633.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="100.7" y="1438.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (159 samples, 53.72%)</title><rect x="97.7" y="1411.0" width="633.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="100.7" y="1422.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (159 samples, 53.72%)</title><rect x="97.7" y="1395.0" width="633.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="100.7" y="1406.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/448356566.run (147 samples, 49.66%)</title><rect x="105.7" y="1379.0" width="586.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="108.7" y="1390.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/448356566.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (147 samples, 49.66%)</title><rect x="105.7" y="1363.0" width="586.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="108.7" y="1374.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (147 samples, 49.66%)</title><rect x="105.7" y="1347.0" width="586.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="108.7" y="1358.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (146 samples, 49.32%)</title><rect x="105.7" y="1331.0" width="582.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="108.7" y="1342.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (24 samples, 8.11%)</title><rect x="117.6" y="1315.0" width="95.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="120.6" y="1326.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (24 samples, 8.11%)</title><rect x="117.6" y="1299.0" width="95.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="120.6" y="1310.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (24 samples, 8.11%)</title><rect x="117.6" y="1283.0" width="95.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="120.6" y="1294.0">com/linecor..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="117.6" y="1267.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="120.6" y="1278.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="117.6" y="1251.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="120.6" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="117.6" y="1235.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="120.6" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.34%)</title><rect x="117.6" y="1219.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="120.6" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (23 samples, 7.77%)</title><rect x="121.6" y="1267.0" width="91.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="124.6" y="1278.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (23 samples, 7.77%)</title><rect x="121.6" y="1251.0" width="91.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="124.6" y="1262.0">com/linecor..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (23 samples, 7.77%)</title><rect x="121.6" y="1235.0" width="91.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="124.6" y="1246.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (5 samples, 1.69%)</title><rect x="121.6" y="1219.0" width="20.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="124.6" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 0.68%)</title><rect x="133.6" y="1203.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="136.6" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.34%)</title><rect x="137.6" y="1187.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="140.6" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.34%)</title><rect x="137.6" y="1171.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="140.6" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.34%)</title><rect x="137.6" y="1155.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="140.6" y="1166.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.34%)</title><rect x="137.6" y="1139.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="140.6" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (16 samples, 5.41%)</title><rect x="141.6" y="1219.0" width="63.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="144.6" y="1230.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (2 samples, 0.68%)</title><rect x="141.6" y="1203.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="144.6" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.34%)</title><rect x="149.5" y="1203.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="152.5" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.34%)</title><rect x="149.5" y="1187.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="152.5" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 1.35%)</title><rect x="153.5" y="1203.0" width="16.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="156.5" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 1.01%)</title><rect x="157.5" y="1187.0" width="12.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="160.5" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (9 samples, 3.04%)</title><rect x="169.5" y="1203.0" width="35.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="172.5" y="1214.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.68%)</title><rect x="169.5" y="1187.0" width="7.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="172.5" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.68%)</title><rect x="169.5" y="1171.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="172.5" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (7 samples, 2.36%)</title><rect x="177.4" y="1187.0" width="27.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="180.4" y="1198.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (7 samples, 2.36%)</title><rect x="177.4" y="1171.0" width="27.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="180.4" y="1182.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (7 samples, 2.36%)</title><rect x="177.4" y="1155.0" width="27.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="180.4" y="1166.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.68%)</title><rect x="177.4" y="1139.0" width="8.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="180.4" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.34%)</title><rect x="177.4" y="1123.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="180.4" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.34%)</title><rect x="177.4" y="1107.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="180.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.34%)</title><rect x="177.4" y="1091.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="180.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.34%)</title><rect x="181.4" y="1123.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="184.4" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.68%)</title><rect x="185.4" y="1139.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="188.4" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.68%)</title><rect x="185.4" y="1123.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="188.4" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.68%)</title><rect x="185.4" y="1107.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="188.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.68%)</title><rect x="185.4" y="1091.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="188.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.68%)</title><rect x="185.4" y="1075.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="188.4" y="1086.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.68%)</title><rect x="185.4" y="1059.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="188.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 1.01%)</title><rect x="193.4" y="1139.0" width="11.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="196.4" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 1.01%)</title><rect x="193.4" y="1123.0" width="11.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="196.4" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 1.01%)</title><rect x="193.4" y="1107.0" width="11.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="196.4" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.68%)</title><rect x="197.4" y="1091.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="200.4" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.34%)</title><rect x="201.4" y="1075.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="204.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.68%)</title><rect x="205.3" y="1219.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="208.3" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.34%)</title><rect x="205.3" y="1203.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="208.3" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.34%)</title><rect x="209.3" y="1203.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="212.3" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.34%)</title><rect x="209.3" y="1187.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="212.3" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.34%)</title><rect x="209.3" y="1171.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="212.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.34%)</title><rect x="209.3" y="1155.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="212.3" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (112 samples, 37.84%)</title><rect x="213.3" y="1315.0" width="446.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="216.3" y="1326.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (12 samples, 4.05%)</title><rect x="213.3" y="1299.0" width="47.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.3" y="1310.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (10 samples, 3.38%)</title><rect x="221.3" y="1283.0" width="39.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.3" y="1294.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (8 samples, 2.70%)</title><rect x="229.3" y="1267.0" width="31.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.3" y="1278.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (8 samples, 2.70%)</title><rect x="229.3" y="1251.0" width="31.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="232.3" y="1262.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 1.01%)</title><rect x="249.2" y="1235.0" width="11.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="252.2" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 1.01%)</title><rect x="249.2" y="1219.0" width="11.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="252.2" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.34%)</title><rect x="261.1" y="1299.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="264.1" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.34%)</title><rect x="261.1" y="1283.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="264.1" y="1294.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.34%)</title><rect x="261.1" y="1267.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="264.1" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (30 samples, 10.14%)</title><rect x="265.1" y="1299.0" width="119.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.1" y="1310.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (29 samples, 9.80%)</title><rect x="265.1" y="1283.0" width="115.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="268.1" y="1294.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (15 samples, 5.07%)</title><rect x="265.1" y="1267.0" width="59.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.1" y="1278.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (11 samples, 3.72%)</title><rect x="269.1" y="1251.0" width="43.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="272.1" y="1262.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 3.38%)</title><rect x="273.1" y="1235.0" width="39.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.1" y="1246.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 2.70%)</title><rect x="273.1" y="1219.0" width="31.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="276.1" y="1230.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 2.70%)</title><rect x="273.1" y="1203.0" width="31.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.1" y="1214.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 2.70%)</title><rect x="273.1" y="1187.0" width="31.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.1" y="1198.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 1.35%)</title><rect x="281.1" y="1171.0" width="15.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="284.1" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 1.35%)</title><rect x="281.1" y="1155.0" width="15.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="284.1" y="1166.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.68%)</title><rect x="281.1" y="1139.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="284.1" y="1150.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.68%)</title><rect x="281.1" y="1123.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="284.1" y="1134.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.68%)</title><rect x="289.1" y="1139.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="292.1" y="1150.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.68%)</title><rect x="289.1" y="1123.0" width="7.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="292.1" y="1134.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.34%)</title><rect x="289.1" y="1107.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="292.1" y="1118.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.34%)</title><rect x="293.0" y="1107.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="296.0" y="1118.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.68%)</title><rect x="297.0" y="1171.0" width="8.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="300.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.34%)</title><rect x="305.0" y="1219.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="308.0" y="1230.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="309.0" y="1219.0" width="4.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="312.0" y="1230.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 1.01%)</title><rect x="313.0" y="1251.0" width="11.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="316.0" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.34%)</title><rect x="324.9" y="1267.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="327.9" y="1278.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.34%)</title><rect x="324.9" y="1251.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="327.9" y="1262.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.34%)</title><rect x="324.9" y="1235.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="327.9" y="1246.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (13 samples, 4.39%)</title><rect x="328.9" y="1267.0" width="51.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="331.9" y="1278.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (13 samples, 4.39%)</title><rect x="328.9" y="1251.0" width="51.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="331.9" y="1262.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.34%)</title><rect x="328.9" y="1235.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="331.9" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.34%)</title><rect x="328.9" y="1219.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="331.9" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.34%)</title><rect x="328.9" y="1203.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="331.9" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.34%)</title><rect x="328.9" y="1187.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="331.9" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (12 samples, 4.05%)</title><rect x="332.9" y="1235.0" width="47.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="335.9" y="1246.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (10 samples, 3.38%)</title><rect x="340.9" y="1219.0" width="39.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="343.9" y="1230.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 2.36%)</title><rect x="352.8" y="1203.0" width="27.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="355.8" y="1214.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 1.01%)</title><rect x="360.8" y="1187.0" width="12.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="363.8" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.34%)</title><rect x="372.8" y="1187.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="375.8" y="1198.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.34%)</title><rect x="376.8" y="1187.0" width="3.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="379.8" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.34%)</title><rect x="380.7" y="1283.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="383.7" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (59 samples, 19.93%)</title><rect x="384.7" y="1299.0" width="235.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="387.7" y="1310.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (59 samples, 19.93%)</title><rect x="384.7" y="1283.0" width="235.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="387.7" y="1294.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1515994778.process (50 samples, 16.89%)</title><rect x="400.7" y="1267.0" width="199.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="403.7" y="1278.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (50 samples, 16.89%)</title><rect x="400.7" y="1251.0" width="199.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="403.7" y="1262.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.34%)</title><rect x="404.7" y="1235.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="407.7" y="1246.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.34%)</title><rect x="404.7" y="1219.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="407.7" y="1230.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.34%)</title><rect x="404.7" y="1203.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="407.7" y="1214.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.34%)</title><rect x="404.7" y="1187.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="407.7" y="1198.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.34%)</title><rect x="404.7" y="1171.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="407.7" y="1182.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.34%)</title><rect x="404.7" y="1155.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="407.7" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (48 samples, 16.22%)</title><rect x="408.6" y="1235.0" width="191.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.6" y="1246.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.34%)</title><rect x="408.6" y="1219.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="411.6" y="1230.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.34%)</title><rect x="408.6" y="1203.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="411.6" y="1214.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.34%)</title><rect x="408.6" y="1187.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="411.6" y="1198.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.34%)</title><rect x="408.6" y="1171.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="411.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (46 samples, 15.54%)</title><rect x="412.6" y="1219.0" width="183.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="415.6" y="1230.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task.getProducedTime (1 samples, 0.34%)</title><rect x="412.6" y="1203.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="415.6" y="1214.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.34%)</title><rect x="412.6" y="1187.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="415.6" y="1198.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="412.6" y="1171.0" width="4.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="415.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/Thread.sleep (45 samples, 15.20%)</title><rect x="416.6" y="1203.0" width="179.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="419.6" y="1214.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (40 samples, 13.51%)</title><rect x="432.6" y="1187.0" width="159.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="435.6" y="1198.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.34%)</title><rect x="444.5" y="1171.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="447.5" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="448.5" y="1171.0" width="4.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="451.5" y="1182.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.34%)</title><rect x="452.5" y="1171.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="455.5" y="1182.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (34 samples, 11.49%)</title><rect x="456.5" y="1171.0" width="135.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="459.5" y="1182.0">os::sleep(Thread*..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 1.01%)</title><rect x="484.4" y="1155.0" width="12.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="487.4" y="1166.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 1.01%)</title><rect x="484.4" y="1139.0" width="12.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="487.4" y="1150.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.68%)</title><rect x="496.4" y="1155.0" width="7.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="499.4" y="1166.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.68%)</title><rect x="496.4" y="1139.0" width="7.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="499.4" y="1150.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.01%)</title><rect x="504.3" y="1155.0" width="12.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="507.3" y="1166.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.34%)</title><rect x="516.3" y="1155.0" width="4.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="519.3" y="1166.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (13 samples, 4.39%)</title><rect x="520.3" y="1155.0" width="51.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="523.3" y="1166.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 1.01%)</title><rect x="572.1" y="1155.0" width="12.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="575.1" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.34%)</title><rect x="584.1" y="1155.0" width="3.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="587.1" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.34%)</title><rect x="588.0" y="1155.0" width="4.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="591.0" y="1166.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.34%)</title><rect x="592.0" y="1187.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="595.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.34%)</title><rect x="596.0" y="1219.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="599.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.34%)</title><rect x="600.0" y="1267.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="603.0" y="1278.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.34%)</title><rect x="600.0" y="1251.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="603.0" y="1262.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.34%)</title><rect x="604.0" y="1267.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="607.0" y="1278.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.34%)</title><rect x="604.0" y="1251.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="607.0" y="1262.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 1.01%)</title><rect x="608.0" y="1267.0" width="11.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="611.0" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.34%)</title><rect x="619.9" y="1299.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="622.9" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 3.04%)</title><rect x="623.9" y="1299.0" width="35.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="626.9" y="1310.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 3.04%)</title><rect x="623.9" y="1283.0" width="35.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="626.9" y="1294.0">jav..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.68%)</title><rect x="635.9" y="1267.0" width="8.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="638.9" y="1278.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.68%)</title><rect x="635.9" y="1251.0" width="8.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="638.9" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.35%)</title><rect x="643.9" y="1267.0" width="15.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="646.9" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/1997945096.accept (4 samples, 1.35%)</title><rect x="643.9" y="1251.0" width="15.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="646.9" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (4 samples, 1.35%)</title><rect x="643.9" y="1235.0" width="15.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="646.9" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (4 samples, 1.35%)</title><rect x="643.9" y="1219.0" width="15.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="646.9" y="1230.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 1.35%)</title><rect x="643.9" y="1203.0" width="15.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="646.9" y="1214.0"></text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 1.35%)</title><rect x="643.9" y="1187.0" width="15.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="646.9" y="1198.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.34%)</title><rect x="655.8" y="1171.0" width="4.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="658.8" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="655.8" y="1155.0" width="4.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="658.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.69%)</title><rect x="659.8" y="1315.0" width="19.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="662.8" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.69%)</title><rect x="659.8" y="1299.0" width="19.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="662.8" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.34%)</title><rect x="667.8" y="1283.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="670.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.68%)</title><rect x="671.8" y="1283.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="674.8" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/1997945096.accept (2 samples, 0.68%)</title><rect x="671.8" y="1267.0" width="7.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="674.8" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (2 samples, 0.68%)</title><rect x="671.8" y="1251.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="674.8" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.68%)</title><rect x="671.8" y="1235.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="674.8" y="1246.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.68%)</title><rect x="671.8" y="1219.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="674.8" y="1230.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.68%)</title><rect x="671.8" y="1203.0" width="7.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="674.8" y="1214.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.68%)</title><rect x="679.7" y="1315.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="682.7" y="1326.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.68%)</title><rect x="679.7" y="1299.0" width="8.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="682.7" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.34%)</title><rect x="687.7" y="1331.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="690.7" y="1342.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.34%)</title><rect x="687.7" y="1315.0" width="4.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="690.7" y="1326.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="687.7" y="1299.0" width="4.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="690.7" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.34%)</title><rect x="691.7" y="1379.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="694.7" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.34%)</title><rect x="691.7" y="1363.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="694.7" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.34%)</title><rect x="691.7" y="1347.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="694.7" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.34%)</title><rect x="691.7" y="1331.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="694.7" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (9 samples, 3.04%)</title><rect x="695.7" y="1379.0" width="35.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="698.7" y="1390.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (8 samples, 2.70%)</title><rect x="699.7" y="1363.0" width="31.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="702.7" y="1374.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.34%)</title><rect x="711.6" y="1347.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="714.6" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.34%)</title><rect x="711.6" y="1331.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="714.6" y="1342.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.34%)</title><rect x="711.6" y="1315.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="714.6" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.34%)</title><rect x="711.6" y="1299.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="714.6" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.35%)</title><rect x="715.6" y="1347.0" width="16.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="718.6" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.35%)</title><rect x="715.6" y="1331.0" width="16.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="718.6" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.35%)</title><rect x="715.6" y="1315.0" width="16.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="718.6" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.35%)</title><rect x="715.6" y="1299.0" width="16.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="718.6" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.68%)</title><rect x="731.6" y="1427.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="734.6" y="1438.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.34%)</title><rect x="731.6" y="1411.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="734.6" y="1422.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.34%)</title><rect x="731.6" y="1395.0" width="3.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="734.6" y="1406.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.34%)</title><rect x="731.6" y="1379.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="734.6" y="1390.0"></text>
</g>
<g>
<title>Thread::SpinAcquire(int volatile*, char const*) (1 samples, 0.34%)</title><rect x="731.6" y="1363.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="734.6" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.34%)</title><rect x="735.5" y="1411.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="738.5" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.34%)</title><rect x="735.5" y="1395.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="738.5" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.34%)</title><rect x="735.5" y="1379.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="738.5" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.34%)</title><rect x="735.5" y="1363.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="738.5" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.34%)</title><rect x="735.5" y="1347.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="738.5" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.34%)</title><rect x="735.5" y="1331.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="738.5" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.34%)</title><rect x="735.5" y="1315.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="738.5" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.34%)</title><rect x="735.5" y="1299.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="738.5" y="1310.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.34%)</title><rect x="735.5" y="1283.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="738.5" y="1294.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.34%)</title><rect x="735.5" y="1267.0" width="4.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="738.5" y="1278.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.34%)</title><rect x="735.5" y="1251.0" width="4.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="738.5" y="1262.0"></text>
</g>
<g>
<title>start_thread (112 samples, 37.84%)</title><rect x="739.5" y="1427.0" width="446.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="742.5" y="1438.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (112 samples, 37.84%)</title><rect x="739.5" y="1411.0" width="446.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="742.5" y="1422.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 2.70%)</title><rect x="739.5" y="1395.0" width="31.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="742.5" y="1406.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 2.70%)</title><rect x="739.5" y="1379.0" width="31.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="742.5" y="1390.0">G1..</text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 2.03%)</title><rect x="739.5" y="1363.0" width="23.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="742.5" y="1374.0">G..</text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.34%)</title><rect x="739.5" y="1347.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="742.5" y="1358.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.34%)</title><rect x="739.5" y="1331.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="742.5" y="1342.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.34%)</title><rect x="739.5" y="1315.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="742.5" y="1326.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.34%)</title><rect x="739.5" y="1299.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="742.5" y="1310.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 1.69%)</title><rect x="743.5" y="1347.0" width="19.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="746.5" y="1358.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (5 samples, 1.69%)</title><rect x="743.5" y="1331.0" width="19.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="746.5" y="1342.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.68%)</title><rect x="763.4" y="1363.0" width="8.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="766.4" y="1374.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.68%)</title><rect x="763.4" y="1347.0" width="8.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="766.4" y="1358.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (2 samples, 0.68%)</title><rect x="763.4" y="1331.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="766.4" y="1342.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.68%)</title><rect x="763.4" y="1315.0" width="8.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="766.4" y="1326.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.68%)</title><rect x="763.4" y="1299.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="766.4" y="1310.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.68%)</title><rect x="763.4" y="1283.0" width="8.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="766.4" y="1294.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.34%)</title><rect x="767.4" y="1267.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="770.4" y="1278.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.34%)</title><rect x="767.4" y="1251.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="770.4" y="1262.0"></text>
</g>
<g>
<title>G1ParPushHeapRSClosure::do_oop(unsigned int*) (1 samples, 0.34%)</title><rect x="767.4" y="1235.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="770.4" y="1246.0"></text>
</g>
<g>
<title>JavaThread::run() (104 samples, 35.14%)</title><rect x="771.4" y="1395.0" width="414.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="774.4" y="1406.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (104 samples, 35.14%)</title><rect x="771.4" y="1379.0" width="414.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="774.4" y="1390.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (104 samples, 35.14%)</title><rect x="771.4" y="1363.0" width="414.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="774.4" y="1374.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (104 samples, 35.14%)</title><rect x="771.4" y="1347.0" width="414.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="774.4" y="1358.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (102 samples, 34.46%)</title><rect x="771.4" y="1331.0" width="406.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="774.4" y="1342.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (102 samples, 34.46%)</title><rect x="771.4" y="1315.0" width="406.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="774.4" y="1326.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bo..</text>
</g>
<g>
<title>Compile::Code_Gen() (61 samples, 20.61%)</title><rect x="771.4" y="1299.0" width="243.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="774.4" y="1310.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.34%)</title><rect x="771.4" y="1283.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="774.4" y="1294.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.34%)</title><rect x="771.4" y="1267.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="774.4" y="1278.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.68%)</title><rect x="775.4" y="1283.0" width="8.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="778.4" y="1294.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.68%)</title><rect x="775.4" y="1267.0" width="8.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="778.4" y="1278.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.68%)</title><rect x="775.4" y="1251.0" width="8.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="778.4" y="1262.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.68%)</title><rect x="775.4" y="1235.0" width="8.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="778.4" y="1246.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.35%)</title><rect x="783.4" y="1283.0" width="15.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="786.4" y="1294.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.35%)</title><rect x="783.4" y="1267.0" width="15.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="786.4" y="1278.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 1.35%)</title><rect x="783.4" y="1251.0" width="15.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="786.4" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.01%)</title><rect x="799.3" y="1283.0" width="12.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="802.3" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.01%)</title><rect x="799.3" y="1267.0" width="12.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="802.3" y="1278.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.68%)</title><rect x="799.3" y="1251.0" width="8.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="802.3" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.34%)</title><rect x="803.3" y="1235.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="806.3" y="1246.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.34%)</title><rect x="807.3" y="1251.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="810.3" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (51 samples, 17.23%)</title><rect x="811.3" y="1283.0" width="203.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="814.3" y="1294.0">PhaseChaitin::Register_Allo..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.34%)</title><rect x="815.3" y="1267.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="818.3" y="1278.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.34%)</title><rect x="819.3" y="1267.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="822.3" y="1278.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.34%)</title><rect x="823.2" y="1267.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="826.2" y="1278.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 1.01%)</title><rect x="827.2" y="1267.0" width="12.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="830.2" y="1278.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 1.35%)</title><rect x="839.2" y="1267.0" width="15.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="842.2" y="1278.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="839.2" y="1251.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="842.2" y="1262.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.68%)</title><rect x="843.2" y="1251.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="846.2" y="1262.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.34%)</title><rect x="843.2" y="1235.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="846.2" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="847.2" y="1235.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="850.2" y="1246.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.34%)</title><rect x="851.1" y="1251.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="854.1" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.68%)</title><rect x="855.1" y="1267.0" width="8.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="858.1" y="1278.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.68%)</title><rect x="855.1" y="1251.0" width="8.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="858.1" y="1262.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="859.1" y="1235.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="862.1" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.01%)</title><rect x="863.1" y="1267.0" width="12.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="866.1" y="1278.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.34%)</title><rect x="871.1" y="1251.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="874.1" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.34%)</title><rect x="871.1" y="1235.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="874.1" y="1246.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.34%)</title><rect x="871.1" y="1219.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="874.1" y="1230.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.34%)</title><rect x="871.1" y="1203.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="874.1" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (11 samples, 3.72%)</title><rect x="875.1" y="1267.0" width="43.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="878.1" y="1278.0">Phas..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.68%)</title><rect x="887.0" y="1251.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="890.0" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 1.69%)</title><rect x="895.0" y="1251.0" width="19.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="898.0" y="1262.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.68%)</title><rect x="907.0" y="1235.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="910.0" y="1246.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.34%)</title><rect x="914.9" y="1251.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="917.9" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.34%)</title><rect x="918.9" y="1267.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="921.9" y="1278.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.34%)</title><rect x="918.9" y="1251.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="921.9" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.34%)</title><rect x="922.9" y="1267.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="925.9" y="1278.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 1.35%)</title><rect x="926.9" y="1267.0" width="15.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="929.9" y="1278.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.34%)</title><rect x="934.9" y="1251.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="937.9" y="1262.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.34%)</title><rect x="938.9" y="1251.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="941.9" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.34%)</title><rect x="942.8" y="1267.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="945.8" y="1278.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.34%)</title><rect x="946.8" y="1267.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="949.8" y="1278.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (10 samples, 3.38%)</title><rect x="950.8" y="1267.0" width="39.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="953.8" y="1278.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (10 samples, 3.38%)</title><rect x="950.8" y="1251.0" width="39.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="953.8" y="1262.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (10 samples, 3.38%)</title><rect x="950.8" y="1235.0" width="39.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="953.8" y="1246.0">Pha..</text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.34%)</title><rect x="950.8" y="1219.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="953.8" y="1230.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (4 samples, 1.35%)</title><rect x="954.8" y="1219.0" width="15.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="957.8" y="1230.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (4 samples, 1.35%)</title><rect x="970.7" y="1219.0" width="16.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="973.7" y="1230.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.34%)</title><rect x="986.7" y="1219.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="989.7" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="986.7" y="1203.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="989.7" y="1214.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.34%)</title><rect x="990.7" y="1267.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="993.7" y="1278.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="990.7" y="1251.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="993.7" y="1262.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.34%)</title><rect x="994.7" y="1267.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="997.7" y="1278.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.34%)</title><rect x="994.7" y="1251.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="997.7" y="1262.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.01%)</title><rect x="998.6" y="1267.0" width="12.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1001.6" y="1278.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.34%)</title><rect x="1006.6" y="1251.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1009.6" y="1262.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.34%)</title><rect x="1010.6" y="1267.0" width="4.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1013.6" y="1278.0"></text>
</g>
<g>
<title>Compile::Optimize() (34 samples, 11.49%)</title><rect x="1014.6" y="1299.0" width="135.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1017.6" y="1310.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.34%)</title><rect x="1014.6" y="1283.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1017.6" y="1294.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.34%)</title><rect x="1014.6" y="1267.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1017.6" y="1278.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.34%)</title><rect x="1014.6" y="1251.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1017.6" y="1262.0"></text>
</g>
<g>
<title>Node::subsume_by(Node*, Compile*) (1 samples, 0.34%)</title><rect x="1014.6" y="1235.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1017.6" y="1246.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.34%)</title><rect x="1014.6" y="1219.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1017.6" y="1230.0"></text>
</g>
<g>
<title>Compile::print_method(CompilerPhaseType, int) (1 samples, 0.34%)</title><rect x="1018.6" y="1283.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1021.6" y="1294.0"></text>
</g>
<g>
<title>Ticks::stamp() (1 samples, 0.34%)</title><rect x="1018.6" y="1267.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1021.6" y="1278.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.34%)</title><rect x="1018.6" y="1251.0" width="4.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1021.6" y="1262.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="1018.6" y="1235.0" width="4.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1021.6" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.34%)</title><rect x="1022.6" y="1283.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1025.6" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.34%)</title><rect x="1022.6" y="1267.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1025.6" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1022.6" y="1251.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1025.6" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1022.6" y="1235.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1025.6" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1022.6" y="1219.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1025.6" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1022.6" y="1203.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1025.6" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1022.6" y="1187.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1025.6" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1022.6" y="1171.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1025.6" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1022.6" y="1155.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1025.6" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1022.6" y="1139.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1025.6" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1022.6" y="1123.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1025.6" y="1134.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.34%)</title><rect x="1026.6" y="1283.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1029.6" y="1294.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.34%)</title><rect x="1026.6" y="1267.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1029.6" y="1278.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.68%)</title><rect x="1030.5" y="1283.0" width="8.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1033.5" y="1294.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.68%)</title><rect x="1030.5" y="1267.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1033.5" y="1278.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.34%)</title><rect x="1034.5" y="1251.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1037.5" y="1262.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.34%)</title><rect x="1034.5" y="1235.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1037.5" y="1246.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.34%)</title><rect x="1034.5" y="1219.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1037.5" y="1230.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.34%)</title><rect x="1034.5" y="1203.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.5" y="1214.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.34%)</title><rect x="1034.5" y="1187.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1037.5" y="1198.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.34%)</title><rect x="1034.5" y="1171.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.5" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (26 samples, 8.78%)</title><rect x="1038.5" y="1283.0" width="103.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1041.5" y="1294.0">PhaseIdealLo..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.34%)</title><rect x="1038.5" y="1267.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1041.5" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 1.01%)</title><rect x="1042.5" y="1267.0" width="12.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1045.5" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.34%)</title><rect x="1054.5" y="1267.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1057.5" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (19 samples, 6.42%)</title><rect x="1058.4" y="1267.0" width="75.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1061.4" y="1278.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (18 samples, 6.08%)</title><rect x="1062.4" y="1251.0" width="71.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1065.4" y="1262.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.34%)</title><rect x="1066.4" y="1235.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1069.4" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (16 samples, 5.41%)</title><rect x="1070.4" y="1235.0" width="63.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1073.4" y="1246.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.34%)</title><rect x="1134.2" y="1267.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.2" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.34%)</title><rect x="1134.2" y="1251.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.2" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.34%)</title><rect x="1134.2" y="1235.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.2" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.34%)</title><rect x="1134.2" y="1219.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.2" y="1230.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.34%)</title><rect x="1134.2" y="1203.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.2" y="1214.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.34%)</title><rect x="1138.2" y="1267.0" width="4.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1141.2" y="1278.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.34%)</title><rect x="1142.2" y="1283.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.2" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.34%)</title><rect x="1142.2" y="1267.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.2" y="1278.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.34%)</title><rect x="1146.1" y="1283.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.1" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.34%)</title><rect x="1146.1" y="1267.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.1" y="1278.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1146.1" y="1251.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.1" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.34%)</title><rect x="1146.1" y="1235.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.1" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.34%)</title><rect x="1146.1" y="1219.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.1" y="1230.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.34%)</title><rect x="1146.1" y="1203.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.1" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.03%)</title><rect x="1150.1" y="1299.0" width="24.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.1" y="1310.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.03%)</title><rect x="1150.1" y="1283.0" width="24.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.1" y="1294.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.03%)</title><rect x="1150.1" y="1267.0" width="24.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.1" y="1278.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.03%)</title><rect x="1150.1" y="1251.0" width="24.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.1" y="1262.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.03%)</title><rect x="1150.1" y="1235.0" width="24.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.1" y="1246.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.03%)</title><rect x="1150.1" y="1219.0" width="24.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.1" y="1230.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.03%)</title><rect x="1150.1" y="1203.0" width="24.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.1" y="1214.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.03%)</title><rect x="1150.1" y="1187.0" width="24.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.1" y="1198.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.03%)</title><rect x="1150.1" y="1171.0" width="24.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.1" y="1182.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.03%)</title><rect x="1150.1" y="1155.0" width="24.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.1" y="1166.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.03%)</title><rect x="1150.1" y="1139.0" width="24.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.1" y="1150.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.03%)</title><rect x="1150.1" y="1123.0" width="24.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.1" y="1134.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.34%)</title><rect x="1150.1" y="1107.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.1" y="1118.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.34%)</title><rect x="1150.1" y="1091.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.1" y="1102.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.34%)</title><rect x="1150.1" y="1075.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.1" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.34%)</title><rect x="1150.1" y="1059.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.1" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.34%)</title><rect x="1150.1" y="1043.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.1" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.34%)</title><rect x="1150.1" y="1027.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.1" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.34%)</title><rect x="1150.1" y="1011.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.1" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.34%)</title><rect x="1150.1" y="995.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.1" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.34%)</title><rect x="1150.1" y="979.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.1" y="990.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.34%)</title><rect x="1150.1" y="963.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.1" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1150.1" y="947.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.1" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1150.1" y="931.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.1" y="942.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.34%)</title><rect x="1150.1" y="915.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.1" y="926.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.34%)</title><rect x="1150.1" y="899.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.1" y="910.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1150.1" y="883.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.1" y="894.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.34%)</title><rect x="1150.1" y="867.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.1" y="878.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.34%)</title><rect x="1150.1" y="851.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.1" y="862.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.34%)</title><rect x="1150.1" y="835.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.1" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1154.1" y="1107.0" width="8.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.1" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1154.1" y="1091.0" width="8.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.1" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1154.1" y="1075.0" width="8.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.1" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1154.1" y="1059.0" width="8.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.1" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1154.1" y="1043.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.1" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.68%)</title><rect x="1154.1" y="1027.0" width="8.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.1" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1154.1" y="1011.0" width="8.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.1" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1154.1" y="995.0" width="8.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.1" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1154.1" y="979.0" width="8.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.1" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1154.1" y="963.0" width="8.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.1" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1154.1" y="947.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.1" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.68%)</title><rect x="1154.1" y="931.0" width="8.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.1" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1154.1" y="915.0" width="8.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.1" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1154.1" y="899.0" width="8.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1154.1" y="883.0" width="8.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1154.1" y="867.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1154.1" y="851.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.68%)</title><rect x="1154.1" y="835.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.1" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1154.1" y="819.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.1" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1154.1" y="803.0" width="8.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1154.1" y="787.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1154.1" y="771.0" width="8.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1154.1" y="755.0" width="8.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1154.1" y="739.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.1" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1154.1" y="723.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.1" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1154.1" y="707.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1154.1" y="691.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1154.1" y="675.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1154.1" y="659.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1154.1" y="643.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.1" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1154.1" y="627.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.1" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1154.1" y="611.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1154.1" y="595.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1154.1" y="579.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1154.1" y="563.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.34%)</title><rect x="1154.1" y="547.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.1" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.34%)</title><rect x="1154.1" y="531.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.1" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.34%)</title><rect x="1154.1" y="515.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.1" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.34%)</title><rect x="1154.1" y="499.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.1" y="510.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.34%)</title><rect x="1154.1" y="483.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.1" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1154.1" y="467.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.1" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1154.1" y="451.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.1" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.34%)</title><rect x="1154.1" y="435.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.1" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.34%)</title><rect x="1154.1" y="419.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.1" y="430.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.34%)</title><rect x="1154.1" y="403.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.1" y="414.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.34%)</title><rect x="1154.1" y="387.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.1" y="398.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.34%)</title><rect x="1154.1" y="371.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.1" y="382.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.34%)</title><rect x="1154.1" y="355.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.34%)</title><rect x="1158.1" y="739.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.1" y="750.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.34%)</title><rect x="1158.1" y="723.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.1" y="734.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.34%)</title><rect x="1158.1" y="707.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.1" y="718.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.34%)</title><rect x="1158.1" y="691.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.1" y="702.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.34%)</title><rect x="1158.1" y="675.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.1" y="686.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.34%)</title><rect x="1158.1" y="659.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.1" y="670.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.01%)</title><rect x="1162.1" y="1107.0" width="12.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.1" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.01%)</title><rect x="1162.1" y="1091.0" width="12.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.1" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.01%)</title><rect x="1162.1" y="1075.0" width="12.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.1" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.01%)</title><rect x="1162.1" y="1059.0" width="12.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.1" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.01%)</title><rect x="1162.1" y="1043.0" width="12.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.1" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.01%)</title><rect x="1162.1" y="1027.0" width="12.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.1" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.01%)</title><rect x="1162.1" y="1011.0" width="12.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.1" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.01%)</title><rect x="1162.1" y="995.0" width="12.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.1" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.01%)</title><rect x="1162.1" y="979.0" width="12.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.1" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.01%)</title><rect x="1162.1" y="963.0" width="12.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.1" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.01%)</title><rect x="1162.1" y="947.0" width="12.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.1" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.01%)</title><rect x="1162.1" y="931.0" width="12.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.1" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.68%)</title><rect x="1162.1" y="915.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.1" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1162.1" y="899.0" width="8.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.1" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1162.1" y="883.0" width="8.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1162.1" y="867.0" width="8.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1162.1" y="851.0" width="8.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1162.1" y="835.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.68%)</title><rect x="1162.1" y="819.0" width="8.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.1" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1162.1" y="803.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.1" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1162.1" y="787.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1162.1" y="771.0" width="8.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1162.1" y="755.0" width="8.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1162.1" y="739.0" width="8.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.68%)</title><rect x="1162.1" y="723.0" width="8.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.1" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1162.1" y="707.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.1" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1162.1" y="691.0" width="8.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1162.1" y="675.0" width="8.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1162.1" y="659.0" width="8.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1162.1" y="643.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.68%)</title><rect x="1162.1" y="627.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.1" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1162.1" y="611.0" width="8.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.1" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1162.1" y="595.0" width="8.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1162.1" y="579.0" width="8.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1162.1" y="563.0" width="8.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1162.1" y="547.0" width="8.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1162.1" y="531.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.1" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1162.1" y="515.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.1" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1162.1" y="499.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1162.1" y="483.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1162.1" y="467.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1162.1" y="451.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1162.1" y="435.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.1" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1162.1" y="419.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.1" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1162.1" y="403.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1162.1" y="387.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1162.1" y="371.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1162.1" y="355.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1162.1" y="339.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.1" y="350.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.34%)</title><rect x="1162.1" y="323.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.1" y="334.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.34%)</title><rect x="1162.1" y="307.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.1" y="318.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.34%)</title><rect x="1162.1" y="291.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.1" y="302.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.34%)</title><rect x="1162.1" y="275.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.1" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.34%)</title><rect x="1162.1" y="259.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.1" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.34%)</title><rect x="1162.1" y="243.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.1" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.34%)</title><rect x="1162.1" y="227.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.1" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.34%)</title><rect x="1162.1" y="211.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.1" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.34%)</title><rect x="1162.1" y="195.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.1" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.34%)</title><rect x="1162.1" y="179.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.1" y="190.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.34%)</title><rect x="1162.1" y="163.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.1" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1162.1" y="147.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.1" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1162.1" y="131.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.1" y="142.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.34%)</title><rect x="1162.1" y="115.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.1" y="126.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.34%)</title><rect x="1162.1" y="99.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.1" y="110.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1162.1" y="83.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.1" y="94.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.34%)</title><rect x="1162.1" y="67.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.1" y="78.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.34%)</title><rect x="1162.1" y="51.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.1" y="62.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.34%)</title><rect x="1162.1" y="35.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.1" y="46.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.34%)</title><rect x="1166.1" y="531.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.1" y="542.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.34%)</title><rect x="1166.1" y="515.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.1" y="526.0"></text>
</g>
<g>
<title>TypeKlassPtr::as_instance_type() const (1 samples, 0.34%)</title><rect x="1166.1" y="499.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.1" y="510.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.34%)</title><rect x="1166.1" y="483.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.1" y="494.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.34%)</title><rect x="1166.1" y="467.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.1" y="478.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.34%)</title><rect x="1166.1" y="451.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.1" y="462.0"></text>
</g>
<g>
<title>TypeAryPtr::hash() const (1 samples, 0.34%)</title><rect x="1166.1" y="435.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.34%)</title><rect x="1170.1" y="915.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.1" y="926.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.34%)</title><rect x="1170.1" y="899.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.1" y="910.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.34%)</title><rect x="1170.1" y="883.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.1" y="894.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.34%)</title><rect x="1170.1" y="867.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.1" y="878.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.34%)</title><rect x="1170.1" y="851.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.1" y="862.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.34%)</title><rect x="1170.1" y="835.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.1" y="846.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.34%)</title><rect x="1174.1" y="1299.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.1" y="1310.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.34%)</title><rect x="1174.1" y="1283.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.1" y="1294.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.34%)</title><rect x="1178.0" y="1331.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.0" y="1342.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.34%)</title><rect x="1178.0" y="1315.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.0" y="1326.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.34%)</title><rect x="1178.0" y="1299.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.0" y="1310.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.34%)</title><rect x="1178.0" y="1283.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.0" y="1294.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.34%)</title><rect x="1178.0" y="1267.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.0" y="1278.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.34%)</title><rect x="1178.0" y="1251.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.0" y="1262.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.34%)</title><rect x="1178.0" y="1235.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.0" y="1246.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.34%)</title><rect x="1178.0" y="1219.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.0" y="1230.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.34%)</title><rect x="1178.0" y="1203.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.0" y="1214.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.34%)</title><rect x="1178.0" y="1187.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.0" y="1198.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.34%)</title><rect x="1178.0" y="1171.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.0" y="1182.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.34%)</title><rect x="1178.0" y="1155.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.0" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.34%)</title><rect x="1178.0" y="1139.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.0" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.34%)</title><rect x="1178.0" y="1123.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.0" y="1134.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.34%)</title><rect x="1178.0" y="1107.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.0" y="1118.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.34%)</title><rect x="1178.0" y="1091.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.0" y="1102.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.34%)</title><rect x="1178.0" y="1075.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.0" y="1086.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.34%)</title><rect x="1178.0" y="1059.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.0" y="1070.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::propagate(MethodLiveness*) (1 samples, 0.34%)</title><rect x="1178.0" y="1043.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.0" y="1054.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.34%)</title><rect x="1182.0" y="1331.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.0" y="1342.0"></text>
</g>
<g>
<title>ciObjectFactory::ciObjectFactory(Arena*, int) (1 samples, 0.34%)</title><rect x="1182.0" y="1315.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.0" y="1326.0"></text>
</g>
<g>
<title>sysmalloc (1 samples, 0.34%)</title><rect x="1186.0" y="1427.0" width="4.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1189.0" y="1438.0"></text>
</g>
</g>
</svg>
