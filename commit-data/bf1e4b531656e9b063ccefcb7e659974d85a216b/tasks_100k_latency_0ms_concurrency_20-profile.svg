<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="645"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="645"> </text>
<g id="frames">
<g>
<title>all (141 samples, 100.00%)</title><rect x="10.0" y="611.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="622.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (28 samples, 19.86%)</title><rect x="10.0" y="595.0" width="234.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="606.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (26 samples, 18.44%)</title><rect x="26.7" y="579.0" width="217.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.7" y="590.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.71%)</title><rect x="26.7" y="563.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.71%)</title><rect x="26.7" y="547.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="29.7" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/533588242.accept (1 samples, 0.71%)</title><rect x="26.7" y="531.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="29.7" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.71%)</title><rect x="26.7" y="515.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="29.7" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.71%)</title><rect x="26.7" y="499.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.7" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.71%)</title><rect x="26.7" y="483.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.7" y="494.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (16 samples, 11.35%)</title><rect x="35.1" y="563.0" width="133.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="38.1" y="574.0">java/lang/Iterabl..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/1658075813.accept (15 samples, 10.64%)</title><rect x="35.1" y="547.0" width="125.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="38.1" y="558.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (15 samples, 10.64%)</title><rect x="35.1" y="531.0" width="125.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.1" y="542.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (11 samples, 7.80%)</title><rect x="35.1" y="515.0" width="92.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="38.1" y="526.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (11 samples, 7.80%)</title><rect x="35.1" y="499.0" width="92.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.1" y="510.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (11 samples, 7.80%)</title><rect x="35.1" y="483.0" width="92.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="38.1" y="494.0">com/linecor..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (10 samples, 7.09%)</title><rect x="43.5" y="467.0" width="83.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="46.5" y="478.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (10 samples, 7.09%)</title><rect x="43.5" y="451.0" width="83.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="46.5" y="462.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (10 samples, 7.09%)</title><rect x="43.5" y="435.0" width="83.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="46.5" y="446.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (7 samples, 4.96%)</title><rect x="43.5" y="419.0" width="58.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="46.5" y="430.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.42%)</title><rect x="43.5" y="403.0" width="16.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="46.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.42%)</title><rect x="43.5" y="387.0" width="16.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="46.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 1.42%)</title><rect x="43.5" y="371.0" width="16.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="46.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 3.55%)</title><rect x="60.2" y="403.0" width="41.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="63.2" y="414.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 3.55%)</title><rect x="60.2" y="387.0" width="41.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="63.2" y="398.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 3.55%)</title><rect x="60.2" y="371.0" width="41.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="63.2" y="382.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 3.55%)</title><rect x="60.2" y="355.0" width="41.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="63.2" y="366.0">jav..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (5 samples, 3.55%)</title><rect x="60.2" y="339.0" width="41.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="63.2" y="350.0">sun..</text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 2.84%)</title><rect x="60.2" y="323.0" width="33.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="63.2" y="334.0">Un..</text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 2.84%)</title><rect x="60.2" y="307.0" width="33.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="63.2" y="318.0">__..</text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.71%)</title><rect x="93.7" y="323.0" width="8.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="96.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 2.13%)</title><rect x="102.1" y="419.0" width="25.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="105.1" y="430.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 2.13%)</title><rect x="102.1" y="403.0" width="25.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="105.1" y="414.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 2.13%)</title><rect x="102.1" y="387.0" width="25.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="105.1" y="398.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 2.13%)</title><rect x="102.1" y="371.0" width="25.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="105.1" y="382.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 2.84%)</title><rect x="127.2" y="515.0" width="33.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="130.2" y="526.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 2.84%)</title><rect x="127.2" y="499.0" width="33.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="130.2" y="510.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.71%)</title><rect x="152.3" y="483.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="155.3" y="494.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.71%)</title><rect x="152.3" y="467.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="155.3" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.71%)</title><rect x="152.3" y="451.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="155.3" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.71%)</title><rect x="160.6" y="547.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="163.6" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 6.38%)</title><rect x="169.0" y="563.0" width="75.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="172.0" y="574.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 6.38%)</title><rect x="169.0" y="547.0" width="75.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="172.0" y="558.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (3 samples, 2.13%)</title><rect x="169.0" y="531.0" width="25.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="172.0" y="542.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 2.13%)</title><rect x="169.0" y="515.0" width="25.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="172.0" y="526.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 2.13%)</title><rect x="169.0" y="499.0" width="25.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="172.0" y="510.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 2.13%)</title><rect x="169.0" y="483.0" width="25.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="172.0" y="494.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 2.13%)</title><rect x="169.0" y="467.0" width="25.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="172.0" y="478.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.42%)</title><rect x="169.0" y="451.0" width="16.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="172.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 1.42%)</title><rect x="169.0" y="435.0" width="16.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="172.0" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.71%)</title><rect x="169.0" y="419.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="172.0" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.71%)</title><rect x="169.0" y="403.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="172.0" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.sizeInBytes (1 samples, 0.71%)</title><rect x="169.0" y="387.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="172.0" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getInt (1 samples, 0.71%)</title><rect x="169.0" y="371.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="172.0" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.magic (1 samples, 0.71%)</title><rect x="177.4" y="419.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="180.4" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.71%)</title><rect x="185.7" y="451.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="188.7" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.71%)</title><rect x="185.7" y="435.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="188.7" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.71%)</title><rect x="185.7" y="419.0" width="8.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="188.7" y="430.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.71%)</title><rect x="185.7" y="403.0" width="8.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="188.7" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 2.84%)</title><rect x="194.1" y="531.0" width="33.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="197.1" y="542.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 1.42%)</title><rect x="194.1" y="515.0" width="16.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="197.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.71%)</title><rect x="194.1" y="499.0" width="8.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="197.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.71%)</title><rect x="194.1" y="483.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="197.1" y="494.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toSet (1 samples, 0.71%)</title><rect x="194.1" y="467.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="197.1" y="478.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.71%)</title><rect x="194.1" y="451.0" width="8.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="197.1" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.71%)</title><rect x="202.5" y="499.0" width="8.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="205.5" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.71%)</title><rect x="202.5" y="483.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="205.5" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.71%)</title><rect x="202.5" y="467.0" width="8.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="205.5" y="478.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.71%)</title><rect x="202.5" y="451.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.5" y="462.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.71%)</title><rect x="202.5" y="435.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="205.5" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.71%)</title><rect x="202.5" y="419.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.5" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.71%)</title><rect x="202.5" y="403.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="205.5" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.71%)</title><rect x="202.5" y="387.0" width="8.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="205.5" y="398.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.71%)</title><rect x="202.5" y="371.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.5" y="382.0"></text>
</g>
<g>
<title>java/util/stream/Sink.begin (1 samples, 0.71%)</title><rect x="202.5" y="355.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.5" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 1.42%)</title><rect x="210.9" y="515.0" width="16.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (2 samples, 1.42%)</title><rect x="210.9" y="499.0" width="16.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="213.9" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.access$100 (2 samples, 1.42%)</title><rect x="210.9" y="483.0" width="16.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="213.9" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (2 samples, 1.42%)</title><rect x="210.9" y="467.0" width="16.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="213.9" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.71%)</title><rect x="227.6" y="531.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.6" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.71%)</title><rect x="227.6" y="515.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="230.6" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.71%)</title><rect x="227.6" y="499.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="230.6" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.71%)</title><rect x="227.6" y="483.0" width="8.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.6" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.71%)</title><rect x="227.6" y="467.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="230.6" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.71%)</title><rect x="227.6" y="451.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.6" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.71%)</title><rect x="227.6" y="435.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="230.6" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.71%)</title><rect x="227.6" y="419.0" width="8.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="230.6" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.71%)</title><rect x="227.6" y="403.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.6" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.71%)</title><rect x="227.6" y="387.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.6" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.71%)</title><rect x="227.6" y="371.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="230.6" y="382.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (1 samples, 0.71%)</title><rect x="227.6" y="355.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="230.6" y="366.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.71%)</title><rect x="227.6" y="339.0" width="8.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="230.6" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.71%)</title><rect x="236.0" y="531.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="239.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.71%)</title><rect x="236.0" y="515.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="239.0" y="526.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.71%)</title><rect x="236.0" y="499.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="239.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/1148547321.accept (1 samples, 0.71%)</title><rect x="236.0" y="483.0" width="8.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="239.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.71%)</title><rect x="236.0" y="467.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="239.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.71%)</title><rect x="236.0" y="451.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="239.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.71%)</title><rect x="236.0" y="435.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="239.0" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.71%)</title><rect x="236.0" y="419.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="239.0" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.71%)</title><rect x="236.0" y="403.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="239.0" y="414.0"></text>
</g>
<g>
<title>java/lang/Thread.run (62 samples, 43.97%)</title><rect x="244.3" y="595.0" width="518.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="247.3" y="606.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (62 samples, 43.97%)</title><rect x="244.3" y="579.0" width="518.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.3" y="590.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (62 samples, 43.97%)</title><rect x="244.3" y="563.0" width="518.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="247.3" y="574.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1704419086.run (35 samples, 24.82%)</title><rect x="252.7" y="547.0" width="292.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.7" y="558.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (35 samples, 24.82%)</title><rect x="252.7" y="531.0" width="292.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="255.7" y="542.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (35 samples, 24.82%)</title><rect x="252.7" y="515.0" width="292.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.7" y="526.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (35 samples, 24.82%)</title><rect x="252.7" y="499.0" width="292.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.7" y="510.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (11 samples, 7.80%)</title><rect x="269.4" y="483.0" width="92.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="272.4" y="494.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (11 samples, 7.80%)</title><rect x="269.4" y="467.0" width="92.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="272.4" y="478.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (11 samples, 7.80%)</title><rect x="269.4" y="451.0" width="92.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="272.4" y="462.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (11 samples, 7.80%)</title><rect x="269.4" y="435.0" width="92.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="272.4" y="446.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (11 samples, 7.80%)</title><rect x="269.4" y="419.0" width="92.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="272.4" y="430.0">com/linecor..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (11 samples, 7.80%)</title><rect x="269.4" y="403.0" width="92.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="272.4" y="414.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (5 samples, 3.55%)</title><rect x="269.4" y="387.0" width="41.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.4" y="398.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.71%)</title><rect x="294.5" y="371.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="297.5" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.71%)</title><rect x="294.5" y="355.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="297.5" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.71%)</title><rect x="294.5" y="339.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="297.5" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.71%)</title><rect x="294.5" y="323.0" width="8.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="297.5" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.71%)</title><rect x="294.5" y="307.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="297.5" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.71%)</title><rect x="294.5" y="291.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="297.5" y="302.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.71%)</title><rect x="302.9" y="371.0" width="8.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="305.9" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (6 samples, 4.26%)</title><rect x="311.3" y="387.0" width="50.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="314.3" y="398.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.71%)</title><rect x="311.3" y="371.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="314.3" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 3.55%)</title><rect x="319.6" y="371.0" width="41.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="322.6" y="382.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.71%)</title><rect x="319.6" y="355.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="322.6" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 2.84%)</title><rect x="328.0" y="355.0" width="33.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="331.0" y="366.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 2.84%)</title><rect x="328.0" y="339.0" width="33.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.0" y="350.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 2.84%)</title><rect x="328.0" y="323.0" width="33.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="331.0" y="334.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.71%)</title><rect x="336.4" y="307.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="339.4" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.71%)</title><rect x="336.4" y="291.0" width="8.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="339.4" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.71%)</title><rect x="336.4" y="275.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="339.4" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.71%)</title><rect x="336.4" y="259.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="339.4" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.71%)</title><rect x="336.4" y="243.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="339.4" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.71%)</title><rect x="336.4" y="227.0" width="8.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="339.4" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.71%)</title><rect x="344.8" y="307.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="347.8" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.71%)</title><rect x="344.8" y="291.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="347.8" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.71%)</title><rect x="344.8" y="275.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="347.8" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.71%)</title><rect x="344.8" y="259.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="347.8" y="270.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.71%)</title><rect x="344.8" y="243.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="347.8" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.71%)</title><rect x="353.1" y="307.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="356.1" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.71%)</title><rect x="353.1" y="291.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="356.1" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.71%)</title><rect x="353.1" y="275.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="356.1" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (19 samples, 13.48%)</title><rect x="361.5" y="483.0" width="159.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="364.5" y="494.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (1 samples, 0.71%)</title><rect x="361.5" y="467.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="364.5" y="478.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.71%)</title><rect x="361.5" y="451.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="364.5" y="462.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.71%)</title><rect x="361.5" y="435.0" width="8.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="364.5" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.71%)</title><rect x="361.5" y="419.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="364.5" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.71%)</title><rect x="361.5" y="403.0" width="8.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="364.5" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.71%)</title><rect x="361.5" y="387.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="364.5" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (16 samples, 11.35%)</title><rect x="369.9" y="467.0" width="133.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="372.9" y="478.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (16 samples, 11.35%)</title><rect x="369.9" y="451.0" width="133.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="372.9" y="462.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 5.67%)</title><rect x="369.9" y="435.0" width="66.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="372.9" y="446.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 5.67%)</title><rect x="369.9" y="419.0" width="66.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="372.9" y="430.0">java/la..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 3.55%)</title><rect x="378.2" y="403.0" width="41.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="381.2" y="414.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.42%)</title><rect x="395.0" y="387.0" width="16.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="398.0" y="398.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 1.42%)</title><rect x="395.0" y="371.0" width="16.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="398.0" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.71%)</title><rect x="403.3" y="355.0" width="8.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="406.3" y="366.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.71%)</title><rect x="403.3" y="339.0" width="8.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="406.3" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.71%)</title><rect x="403.3" y="323.0" width="8.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="406.3" y="334.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.71%)</title><rect x="403.3" y="307.0" width="8.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="406.3" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.71%)</title><rect x="403.3" y="291.0" width="8.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="406.3" y="302.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.71%)</title><rect x="411.7" y="387.0" width="8.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="414.7" y="398.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 1.42%)</title><rect x="420.1" y="403.0" width="16.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="423.1" y="414.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.71%)</title><rect x="436.8" y="435.0" width="8.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="439.8" y="446.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.71%)</title><rect x="436.8" y="419.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="439.8" y="430.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.71%)</title><rect x="436.8" y="403.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="439.8" y="414.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (7 samples, 4.96%)</title><rect x="445.2" y="435.0" width="58.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="448.2" y="446.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 4.96%)</title><rect x="445.2" y="419.0" width="58.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="448.2" y="430.0">ch/qos..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 4.96%)</title><rect x="445.2" y="403.0" width="58.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="448.2" y="414.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 4.26%)</title><rect x="453.5" y="387.0" width="50.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="456.5" y="398.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 2.13%)</title><rect x="478.7" y="371.0" width="25.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="481.7" y="382.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.71%)</title><rect x="495.4" y="355.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="498.4" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (1 samples, 0.71%)</title><rect x="503.8" y="467.0" width="8.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="506.8" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.71%)</title><rect x="503.8" y="451.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="506.8" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1649864395.process (1 samples, 0.71%)</title><rect x="503.8" y="435.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="506.8" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.71%)</title><rect x="503.8" y="419.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="506.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.71%)</title><rect x="512.1" y="467.0" width="8.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="515.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.71%)</title><rect x="512.1" y="451.0" width="8.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="515.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 2.13%)</title><rect x="520.5" y="483.0" width="25.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="523.5" y="494.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 2.13%)</title><rect x="520.5" y="467.0" width="25.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="523.5" y="478.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 2.13%)</title><rect x="520.5" y="451.0" width="25.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="523.5" y="462.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$267/802560072.accept (3 samples, 2.13%)</title><rect x="520.5" y="435.0" width="25.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="523.5" y="446.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (3 samples, 2.13%)</title><rect x="520.5" y="419.0" width="25.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="523.5" y="430.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (3 samples, 2.13%)</title><rect x="520.5" y="403.0" width="25.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="523.5" y="414.0">c..</text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 2.13%)</title><rect x="520.5" y="387.0" width="25.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="523.5" y="398.0">j..</text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 2.13%)</title><rect x="520.5" y="371.0" width="25.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="523.5" y="382.0">j..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.71%)</title><rect x="545.6" y="547.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="548.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (7 samples, 4.96%)</title><rect x="554.0" y="547.0" width="58.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="557.0" y="558.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 4.96%)</title><rect x="554.0" y="531.0" width="58.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="557.0" y="542.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (2 samples, 1.42%)</title><rect x="595.8" y="515.0" width="16.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="598.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.71%)</title><rect x="604.2" y="499.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="607.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 1.42%)</title><rect x="612.6" y="547.0" width="16.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="615.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.42%)</title><rect x="612.6" y="531.0" width="16.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="615.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.71%)</title><rect x="612.6" y="515.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="615.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.71%)</title><rect x="612.6" y="499.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="615.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.71%)</title><rect x="620.9" y="515.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="623.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.71%)</title><rect x="620.9" y="499.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="623.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (16 samples, 11.35%)</title><rect x="629.3" y="547.0" width="133.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="632.3" y="558.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (16 samples, 11.35%)</title><rect x="629.3" y="531.0" width="133.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="632.3" y="542.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (11 samples, 7.80%)</title><rect x="646.0" y="515.0" width="92.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="649.0" y="526.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 7.80%)</title><rect x="646.0" y="499.0" width="92.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="649.0" y="510.0">java/util/c..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (11 samples, 7.80%)</title><rect x="646.0" y="483.0" width="92.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="649.0" y="494.0">sun/misc/Un..</text>
</g>
<g>
<title>Unsafe_Park (10 samples, 7.09%)</title><rect x="654.4" y="467.0" width="83.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="657.4" y="478.0">Unsafe_Park</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.71%)</title><rect x="662.8" y="451.0" width="8.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="665.8" y="462.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.71%)</title><rect x="662.8" y="435.0" width="8.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="665.8" y="446.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 1.42%)</title><rect x="671.1" y="451.0" width="16.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="674.1" y="462.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.71%)</title><rect x="687.9" y="451.0" width="8.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="690.9" y="462.0"></text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 2.84%)</title><rect x="696.2" y="451.0" width="33.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="699.2" y="462.0">__..</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.71%)</title><rect x="729.7" y="451.0" width="8.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="732.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 2.13%)</title><rect x="738.1" y="515.0" width="25.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="741.1" y="526.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 2.13%)</title><rect x="738.1" y="499.0" width="25.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="741.1" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 2.13%)</title><rect x="738.1" y="483.0" width="25.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="741.1" y="494.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 2.13%)</title><rect x="738.1" y="467.0" width="25.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="741.1" y="478.0">j..</text>
</g>
<g>
<title>start_thread (51 samples, 36.17%)</title><rect x="763.2" y="595.0" width="426.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="766.2" y="606.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (51 samples, 36.17%)</title><rect x="763.2" y="579.0" width="426.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="766.2" y="590.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (15 samples, 10.64%)</title><rect x="763.2" y="563.0" width="125.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="766.2" y="574.0">GangWorker::loo..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 2.13%)</title><rect x="763.2" y="547.0" width="25.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="766.2" y="558.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 2.13%)</title><rect x="763.2" y="531.0" width="25.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="766.2" y="542.0">G..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.71%)</title><rect x="763.2" y="515.0" width="8.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="766.2" y="526.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.42%)</title><rect x="771.6" y="515.0" width="16.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="774.6" y="526.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (12 samples, 8.51%)</title><rect x="788.3" y="547.0" width="100.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="791.3" y="558.0">G1ParTask::w..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 7.80%)</title><rect x="788.3" y="531.0" width="92.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="791.3" y="542.0">G1ParEvacua..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.71%)</title><rect x="796.7" y="515.0" width="8.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="799.7" y="526.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 2.84%)</title><rect x="805.0" y="515.0" width="33.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="808.0" y="526.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.42%)</title><rect x="821.8" y="499.0" width="16.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="824.8" y="510.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.71%)</title><rect x="830.1" y="483.0" width="8.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="833.1" y="494.0"></text>
</g>
<g>
<title>G1ParScanClosure::do_oop(unsigned int*) (1 samples, 0.71%)</title><rect x="830.1" y="467.0" width="8.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="833.1" y="478.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 2.13%)</title><rect x="838.5" y="515.0" width="25.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="841.5" y="526.0">G..</text>
</g>
<g>
<title>SpinPause (2 samples, 1.42%)</title><rect x="863.6" y="515.0" width="16.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="866.6" y="526.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.71%)</title><rect x="880.4" y="531.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="883.4" y="542.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.71%)</title><rect x="880.4" y="515.0" width="8.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="883.4" y="526.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.71%)</title><rect x="880.4" y="499.0" width="8.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="883.4" y="510.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.71%)</title><rect x="880.4" y="483.0" width="8.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="883.4" y="494.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (36 samples, 25.53%)</title><rect x="888.7" y="563.0" width="301.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="891.7" y="574.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (36 samples, 25.53%)</title><rect x="888.7" y="547.0" width="301.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="891.7" y="558.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (35 samples, 24.82%)</title><rect x="888.7" y="531.0" width="292.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="891.7" y="542.0">CompileBroker::invoke_compiler_on_metho..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (33 samples, 23.40%)</title><rect x="888.7" y="515.0" width="276.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="891.7" y="526.0">C2Compiler::compile_method(ciEnv*, ci..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (33 samples, 23.40%)</title><rect x="888.7" y="499.0" width="276.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="891.7" y="510.0">Compile::Compile(ciEnv*, C2Compiler*,..</text>
</g>
<g>
<title>Compile::Code_Gen() (19 samples, 13.48%)</title><rect x="888.7" y="483.0" width="159.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="891.7" y="494.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.71%)</title><rect x="888.7" y="467.0" width="8.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="891.7" y="478.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.71%)</title><rect x="888.7" y="451.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="891.7" y="462.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.71%)</title><rect x="888.7" y="435.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="891.7" y="446.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.71%)</title><rect x="888.7" y="419.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="891.7" y="430.0"></text>
</g>
<g>
<title>compP_rRegNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.71%)</title><rect x="888.7" y="403.0" width="8.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="891.7" y="414.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.42%)</title><rect x="897.1" y="467.0" width="16.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="900.1" y="478.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 1.42%)</title><rect x="897.1" y="451.0" width="16.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="900.1" y="462.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.71%)</title><rect x="905.5" y="435.0" width="8.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="908.5" y="446.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.71%)</title><rect x="905.5" y="419.0" width="8.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="908.5" y="430.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.71%)</title><rect x="905.5" y="403.0" width="8.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="908.5" y="414.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.71%)</title><rect x="913.8" y="467.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="916.8" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.71%)</title><rect x="913.8" y="451.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="916.8" y="462.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.71%)</title><rect x="922.2" y="467.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="925.2" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.71%)</title><rect x="922.2" y="451.0" width="8.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="925.2" y="462.0"></text>
</g>
<g>
<title>MachCallNode::pinned() const (1 samples, 0.71%)</title><rect x="922.2" y="435.0" width="8.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="925.2" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (14 samples, 9.93%)</title><rect x="930.6" y="467.0" width="117.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="933.6" y="478.0">PhaseChaitin::..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.71%)</title><rect x="930.6" y="451.0" width="8.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="933.6" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.71%)</title><rect x="938.9" y="451.0" width="8.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="941.9" y="462.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.71%)</title><rect x="938.9" y="435.0" width="8.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="941.9" y="446.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.71%)</title><rect x="938.9" y="419.0" width="8.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="941.9" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 1.42%)</title><rect x="947.3" y="451.0" width="16.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="950.3" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 3.55%)</title><rect x="964.0" y="451.0" width="41.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="967.0" y="462.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.71%)</title><rect x="989.1" y="435.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="992.1" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.71%)</title><rect x="997.5" y="435.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1000.5" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.71%)</title><rect x="1005.9" y="451.0" width="8.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1008.9" y="462.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 1.42%)</title><rect x="1014.3" y="451.0" width="16.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1017.3" y="462.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 1.42%)</title><rect x="1014.3" y="435.0" width="16.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1017.3" y="446.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 1.42%)</title><rect x="1014.3" y="419.0" width="16.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1017.3" y="430.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 1.42%)</title><rect x="1014.3" y="403.0" width="16.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1017.3" y="414.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.42%)</title><rect x="1031.0" y="451.0" width="16.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1034.0" y="462.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.71%)</title><rect x="1039.4" y="435.0" width="8.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1042.4" y="446.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.71%)</title><rect x="1039.4" y="419.0" width="8.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1042.4" y="430.0"></text>
</g>
<g>
<title>Compile::Optimize() (9 samples, 6.38%)</title><rect x="1047.7" y="483.0" width="75.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1050.7" y="494.0">Compile:..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.71%)</title><rect x="1047.7" y="467.0" width="8.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1050.7" y="478.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.71%)</title><rect x="1056.1" y="467.0" width="8.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1059.1" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (7 samples, 4.96%)</title><rect x="1064.5" y="467.0" width="58.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1067.5" y="478.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.42%)</title><rect x="1064.5" y="451.0" width="16.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1067.5" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.71%)</title><rect x="1081.2" y="451.0" width="8.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.2" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 1.42%)</title><rect x="1089.6" y="451.0" width="16.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1092.6" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.71%)</title><rect x="1089.6" y="435.0" width="8.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1092.6" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.71%)</title><rect x="1097.9" y="435.0" width="8.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1100.9" y="446.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.71%)</title><rect x="1106.3" y="451.0" width="8.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1109.3" y="462.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.71%)</title><rect x="1106.3" y="435.0" width="8.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1109.3" y="446.0"></text>
</g>
<g>
<title>RootNode::Ideal(PhaseGVN*, bool) (1 samples, 0.71%)</title><rect x="1106.3" y="419.0" width="8.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1109.3" y="430.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.71%)</title><rect x="1114.7" y="451.0" width="8.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.13%)</title><rect x="1123.0" y="483.0" width="25.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.0" y="494.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.13%)</title><rect x="1123.0" y="467.0" width="25.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1126.0" y="478.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.13%)</title><rect x="1123.0" y="451.0" width="25.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.0" y="462.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.13%)</title><rect x="1123.0" y="435.0" width="25.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.0" y="446.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 2.13%)</title><rect x="1123.0" y="419.0" width="25.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.0" y="430.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.13%)</title><rect x="1123.0" y="403.0" width="25.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.0" y="414.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 1.42%)</title><rect x="1123.0" y="387.0" width="16.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1126.0" y="398.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 1.42%)</title><rect x="1123.0" y="371.0" width="16.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.0" y="382.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 1.42%)</title><rect x="1123.0" y="355.0" width="16.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1126.0" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 1.42%)</title><rect x="1123.0" y="339.0" width="16.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.0" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 1.42%)</title><rect x="1123.0" y="323.0" width="16.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.0" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 1.42%)</title><rect x="1123.0" y="307.0" width="16.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.0" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 1.42%)</title><rect x="1123.0" y="291.0" width="16.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1126.0" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.71%)</title><rect x="1123.0" y="275.0" width="8.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.0" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.71%)</title><rect x="1131.4" y="275.0" width="8.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.4" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.71%)</title><rect x="1131.4" y="259.0" width="8.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.4" y="270.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.71%)</title><rect x="1131.4" y="243.0" width="8.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1134.4" y="254.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.71%)</title><rect x="1131.4" y="227.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.4" y="238.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.71%)</title><rect x="1131.4" y="211.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.4" y="222.0"></text>
</g>
<g>
<title>methodHandle::remove() (1 samples, 0.71%)</title><rect x="1131.4" y="195.0" width="8.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.4" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.71%)</title><rect x="1139.8" y="387.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.8" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.71%)</title><rect x="1139.8" y="371.0" width="8.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.71%)</title><rect x="1139.8" y="355.0" width="8.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.71%)</title><rect x="1139.8" y="339.0" width="8.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.71%)</title><rect x="1139.8" y="323.0" width="8.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.71%)</title><rect x="1139.8" y="307.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.8" y="318.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.71%)</title><rect x="1139.8" y="291.0" width="8.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.8" y="302.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.71%)</title><rect x="1139.8" y="275.0" width="8.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.8" y="286.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.71%)</title><rect x="1139.8" y="259.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.8" y="270.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.71%)</title><rect x="1139.8" y="243.0" width="8.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.8" y="254.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 1.42%)</title><rect x="1148.2" y="483.0" width="16.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.2" y="494.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.71%)</title><rect x="1148.2" y="467.0" width="8.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.2" y="478.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.71%)</title><rect x="1156.5" y="467.0" width="8.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.5" y="478.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.42%)</title><rect x="1164.9" y="515.0" width="16.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.9" y="526.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.42%)</title><rect x="1164.9" y="499.0" width="16.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.9" y="510.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.42%)</title><rect x="1164.9" y="483.0" width="16.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.9" y="494.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.42%)</title><rect x="1164.9" y="467.0" width="16.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.9" y="478.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.71%)</title><rect x="1164.9" y="451.0" width="8.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.9" y="462.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.71%)</title><rect x="1164.9" y="435.0" width="8.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.9" y="446.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.71%)</title><rect x="1164.9" y="419.0" width="8.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.9" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.71%)</title><rect x="1164.9" y="403.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.9" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.71%)</title><rect x="1164.9" y="387.0" width="8.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.9" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.71%)</title><rect x="1164.9" y="371.0" width="8.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.9" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.71%)</title><rect x="1164.9" y="355.0" width="8.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.9" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.71%)</title><rect x="1164.9" y="339.0" width="8.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.9" y="350.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.71%)</title><rect x="1164.9" y="323.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.9" y="334.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.71%)</title><rect x="1164.9" y="307.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.9" y="318.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.71%)</title><rect x="1164.9" y="291.0" width="8.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.9" y="302.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.71%)</title><rect x="1164.9" y="275.0" width="8.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.9" y="286.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.71%)</title><rect x="1164.9" y="259.0" width="8.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.9" y="270.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.71%)</title><rect x="1164.9" y="243.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.9" y="254.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.71%)</title><rect x="1164.9" y="227.0" width="8.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.9" y="238.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.71%)</title><rect x="1164.9" y="211.0" width="8.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.9" y="222.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.71%)</title><rect x="1164.9" y="195.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.9" y="206.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.71%)</title><rect x="1164.9" y="179.0" width="8.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.9" y="190.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.71%)</title><rect x="1164.9" y="163.0" width="8.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.9" y="174.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.71%)</title><rect x="1164.9" y="147.0" width="8.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.9" y="158.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.71%)</title><rect x="1164.9" y="131.0" width="8.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.9" y="142.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.71%)</title><rect x="1164.9" y="115.0" width="8.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.9" y="126.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.71%)</title><rect x="1164.9" y="99.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.9" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.71%)</title><rect x="1164.9" y="83.0" width="8.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.9" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.71%)</title><rect x="1164.9" y="67.0" width="8.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.9" y="78.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle, int) (1 samples, 0.71%)</title><rect x="1164.9" y="51.0" width="8.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.9" y="62.0"></text>
</g>
<g>
<title>constantPoolHandle::constantPoolHandle(constantPoolHandle const&amp;) (1 samples, 0.71%)</title><rect x="1164.9" y="35.0" width="8.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.9" y="46.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.71%)</title><rect x="1173.3" y="451.0" width="8.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.3" y="462.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.71%)</title><rect x="1173.3" y="435.0" width="8.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.3" y="446.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.71%)</title><rect x="1173.3" y="419.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.3" y="430.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.71%)</title><rect x="1173.3" y="403.0" width="8.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.3" y="414.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.71%)</title><rect x="1181.6" y="531.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.6" y="542.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.71%)</title><rect x="1181.6" y="515.0" width="8.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.6" y="526.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.71%)</title><rect x="1181.6" y="499.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.6" y="510.0"></text>
</g>
</g>
</svg>
