<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (174 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (24 samples, 13.79%)</title><rect x="10.0" y="883.0" width="162.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="894.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (24 samples, 13.79%)</title><rect x="10.0" y="867.0" width="162.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="878.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.57%)</title><rect x="10.0" y="851.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.57%)</title><rect x="10.0" y="835.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.57%)</title><rect x="10.0" y="819.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.57%)</title><rect x="10.0" y="803.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.57%)</title><rect x="10.0" y="787.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.57%)</title><rect x="10.0" y="771.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.57%)</title><rect x="10.0" y="755.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.57%)</title><rect x="10.0" y="739.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.57%)</title><rect x="10.0" y="723.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.57%)</title><rect x="10.0" y="707.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.57%)</title><rect x="10.0" y="691.0" width="6.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.57%)</title><rect x="16.8" y="851.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.8" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.57%)</title><rect x="16.8" y="835.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.8" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.57%)</title><rect x="16.8" y="819.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.8" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.57%)</title><rect x="16.8" y="803.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.57%)</title><rect x="16.8" y="787.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.8" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.57%)</title><rect x="16.8" y="771.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.8" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.57%)</title><rect x="16.8" y="755.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.8" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.57%)</title><rect x="16.8" y="739.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.8" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.57%)</title><rect x="16.8" y="723.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.8" y="734.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.57%)</title><rect x="16.8" y="707.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.8" y="718.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (14 samples, 8.05%)</title><rect x="23.6" y="851.0" width="94.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.6" y="862.0">java/lang/I..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1503268746.accept (14 samples, 8.05%)</title><rect x="23.6" y="835.0" width="94.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.6" y="846.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (14 samples, 8.05%)</title><rect x="23.6" y="819.0" width="94.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.6" y="830.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (10 samples, 5.75%)</title><rect x="23.6" y="803.0" width="67.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.6" y="814.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (10 samples, 5.75%)</title><rect x="23.6" y="787.0" width="67.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.6" y="798.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (10 samples, 5.75%)</title><rect x="23.6" y="771.0" width="67.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.6" y="782.0">com/lin..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (10 samples, 5.75%)</title><rect x="23.6" y="755.0" width="67.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.6" y="766.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (10 samples, 5.75%)</title><rect x="23.6" y="739.0" width="67.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="26.6" y="750.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (9 samples, 5.17%)</title><rect x="30.3" y="723.0" width="61.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.3" y="734.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (9 samples, 5.17%)</title><rect x="30.3" y="707.0" width="61.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.3" y="718.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.15%)</title><rect x="37.1" y="691.0" width="13.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.15%)</title><rect x="37.1" y="675.0" width="13.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 1.15%)</title><rect x="37.1" y="659.0" width="13.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 1.15%)</title><rect x="37.1" y="643.0" width="13.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 3.45%)</title><rect x="50.7" y="691.0" width="40.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.7" y="702.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 3.45%)</title><rect x="50.7" y="675.0" width="40.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="53.7" y="686.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 3.45%)</title><rect x="50.7" y="659.0" width="40.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.7" y="670.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 3.45%)</title><rect x="50.7" y="643.0" width="40.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="53.7" y="654.0">jav..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (6 samples, 3.45%)</title><rect x="50.7" y="627.0" width="40.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="53.7" y="638.0">sun..</text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 3.45%)</title><rect x="50.7" y="611.0" width="40.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="53.7" y="622.0">Uns..</text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 1.72%)</title><rect x="50.7" y="595.0" width="20.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="53.7" y="606.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 1.72%)</title><rect x="71.0" y="595.0" width="20.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="74.0" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 2.30%)</title><rect x="91.4" y="803.0" width="27.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="94.4" y="814.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.72%)</title><rect x="91.4" y="787.0" width="20.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="94.4" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.57%)</title><rect x="104.9" y="771.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="107.9" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.57%)</title><rect x="104.9" y="755.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="107.9" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.57%)</title><rect x="104.9" y="739.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="107.9" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.57%)</title><rect x="104.9" y="723.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="107.9" y="734.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.57%)</title><rect x="111.7" y="787.0" width="6.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="114.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 4.60%)</title><rect x="118.5" y="851.0" width="54.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="121.5" y="862.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 4.60%)</title><rect x="118.5" y="835.0" width="54.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="121.5" y="846.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (2 samples, 1.15%)</title><rect x="125.3" y="819.0" width="13.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="128.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 1.15%)</title><rect x="125.3" y="803.0" width="13.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="128.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 1.15%)</title><rect x="125.3" y="787.0" width="13.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="128.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.57%)</title><rect x="125.3" y="771.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="128.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.57%)</title><rect x="125.3" y="755.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="128.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.57%)</title><rect x="125.3" y="739.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="128.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.57%)</title><rect x="132.1" y="771.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="135.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.57%)</title><rect x="132.1" y="755.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="135.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 1.15%)</title><rect x="138.9" y="819.0" width="13.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="141.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.57%)</title><rect x="138.9" y="803.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="141.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.57%)</title><rect x="138.9" y="787.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="141.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.57%)</title><rect x="138.9" y="771.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="141.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.57%)</title><rect x="138.9" y="755.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="141.9" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.57%)</title><rect x="138.9" y="739.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="141.9" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.57%)</title><rect x="138.9" y="723.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="141.9" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.57%)</title><rect x="138.9" y="707.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="141.9" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.57%)</title><rect x="138.9" y="691.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="141.9" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.57%)</title><rect x="138.9" y="675.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="141.9" y="686.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.57%)</title><rect x="138.9" y="659.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="141.9" y="670.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.57%)</title><rect x="138.9" y="643.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="141.9" y="654.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.57%)</title><rect x="138.9" y="627.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="141.9" y="638.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.57%)</title><rect x="138.9" y="611.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="141.9" y="622.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.57%)</title><rect x="138.9" y="595.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="141.9" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.57%)</title><rect x="138.9" y="579.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="141.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.57%)</title><rect x="145.6" y="803.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="148.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 1.72%)</title><rect x="152.4" y="819.0" width="20.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="155.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 1.72%)</title><rect x="152.4" y="803.0" width="20.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="155.4" y="814.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.isEmpty (1 samples, 0.57%)</title><rect x="152.4" y="787.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="155.4" y="798.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.57%)</title><rect x="152.4" y="771.0" width="6.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="155.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 1.15%)</title><rect x="159.2" y="787.0" width="13.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="162.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.57%)</title><rect x="159.2" y="771.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="162.2" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.57%)</title><rect x="159.2" y="755.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="162.2" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.57%)</title><rect x="159.2" y="739.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="162.2" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.57%)</title><rect x="159.2" y="723.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="162.2" y="734.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.57%)</title><rect x="159.2" y="707.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="162.2" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.57%)</title><rect x="159.2" y="691.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="162.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.nanoseconds (1 samples, 0.57%)</title><rect x="166.0" y="771.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="169.0" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.57%)</title><rect x="166.0" y="755.0" width="6.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="169.0" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.57%)</title><rect x="166.0" y="739.0" width="6.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="169.0" y="750.0"></text>
</g>
<g>
<title>java/lang/Thread.run (70 samples, 40.23%)</title><rect x="172.8" y="883.0" width="474.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="175.8" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (70 samples, 40.23%)</title><rect x="172.8" y="867.0" width="474.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.8" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (70 samples, 40.23%)</title><rect x="172.8" y="851.0" width="474.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="175.8" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1978585736.run (41 samples, 23.56%)</title><rect x="186.3" y="835.0" width="278.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="189.3" y="846.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (41 samples, 23.56%)</title><rect x="186.3" y="819.0" width="278.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.3" y="830.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (41 samples, 23.56%)</title><rect x="186.3" y="803.0" width="278.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="189.3" y="814.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (37 samples, 21.26%)</title><rect x="193.1" y="787.0" width="250.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="196.1" y="798.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (8 samples, 4.60%)</title><rect x="193.1" y="771.0" width="54.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.1" y="782.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (8 samples, 4.60%)</title><rect x="193.1" y="755.0" width="54.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="196.1" y="766.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (8 samples, 4.60%)</title><rect x="193.1" y="739.0" width="54.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.1" y="750.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 4.60%)</title><rect x="193.1" y="723.0" width="54.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="196.1" y="734.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 4.60%)</title><rect x="193.1" y="707.0" width="54.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.1" y="718.0">com/l..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (8 samples, 4.60%)</title><rect x="193.1" y="691.0" width="54.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="196.1" y="702.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 2.30%)</title><rect x="193.1" y="675.0" width="27.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="196.1" y="686.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 2.30%)</title><rect x="193.1" y="659.0" width="27.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="196.1" y="670.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 2.30%)</title><rect x="193.1" y="643.0" width="27.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="196.1" y="654.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 1.15%)</title><rect x="193.1" y="627.0" width="13.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="196.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 1.15%)</title><rect x="193.1" y="611.0" width="13.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="196.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 1.15%)</title><rect x="206.7" y="627.0" width="13.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="209.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 1.15%)</title><rect x="206.7" y="611.0" width="13.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="209.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.57%)</title><rect x="213.4" y="595.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="216.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (3 samples, 1.72%)</title><rect x="220.2" y="675.0" width="20.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="223.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.57%)</title><rect x="220.2" y="659.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="223.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.57%)</title><rect x="220.2" y="643.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="223.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.57%)</title><rect x="220.2" y="627.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="223.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (2 samples, 1.15%)</title><rect x="227.0" y="659.0" width="13.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (2 samples, 1.15%)</title><rect x="227.0" y="643.0" width="13.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (2 samples, 1.15%)</title><rect x="227.0" y="627.0" width="13.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 1.15%)</title><rect x="227.0" y="611.0" width="13.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.57%)</title><rect x="227.0" y="595.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.57%)</title><rect x="233.8" y="595.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.57%)</title><rect x="233.8" y="579.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="236.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.57%)</title><rect x="233.8" y="563.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.57%)</title><rect x="233.8" y="547.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.8" y="558.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.57%)</title><rect x="233.8" y="531.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="236.8" y="542.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.57%)</title><rect x="233.8" y="515.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.8" y="526.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.57%)</title><rect x="233.8" y="499.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.57%)</title><rect x="240.6" y="675.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.57%)</title><rect x="240.6" y="659.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.57%)</title><rect x="240.6" y="643.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="243.6" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (27 samples, 15.52%)</title><rect x="247.4" y="771.0" width="183.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="250.4" y="782.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (4 samples, 2.30%)</title><rect x="247.4" y="755.0" width="27.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="250.4" y="766.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.57%)</title><rect x="247.4" y="739.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.4" y="750.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 1.72%)</title><rect x="254.1" y="739.0" width="20.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="257.1" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.72%)</title><rect x="254.1" y="723.0" width="20.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="257.1" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.15%)</title><rect x="254.1" y="707.0" width="13.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.1" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.15%)</title><rect x="254.1" y="691.0" width="13.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="257.1" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.57%)</title><rect x="260.9" y="675.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="263.9" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.57%)</title><rect x="260.9" y="659.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="263.9" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.57%)</title><rect x="260.9" y="643.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="263.9" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.57%)</title><rect x="267.7" y="707.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="270.7" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.57%)</title><rect x="267.7" y="691.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="270.7" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.57%)</title><rect x="267.7" y="675.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="270.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (18 samples, 10.34%)</title><rect x="274.5" y="755.0" width="122.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="277.5" y="766.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (18 samples, 10.34%)</title><rect x="274.5" y="739.0" width="122.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="277.5" y="750.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (10 samples, 5.75%)</title><rect x="274.5" y="723.0" width="67.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="277.5" y="734.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 2.30%)</title><rect x="301.6" y="707.0" width="27.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="304.6" y="718.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.15%)</title><rect x="315.2" y="691.0" width="13.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="318.2" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.15%)</title><rect x="315.2" y="675.0" width="13.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="318.2" y="686.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.57%)</title><rect x="322.0" y="659.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="325.0" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.57%)</title><rect x="322.0" y="643.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="325.0" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.57%)</title><rect x="322.0" y="627.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="325.0" y="638.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.57%)</title><rect x="322.0" y="611.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="325.0" y="622.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.57%)</title><rect x="328.7" y="707.0" width="6.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="331.7" y="718.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.57%)</title><rect x="335.5" y="707.0" width="6.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="338.5" y="718.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 4.60%)</title><rect x="342.3" y="723.0" width="54.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="345.3" y="734.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 4.60%)</title><rect x="342.3" y="707.0" width="54.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="345.3" y="718.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.15%)</title><rect x="342.3" y="691.0" width="13.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="345.3" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.15%)</title><rect x="342.3" y="675.0" width="13.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="345.3" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 3.45%)</title><rect x="355.9" y="691.0" width="40.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="358.9" y="702.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 3.45%)</title><rect x="355.9" y="675.0" width="40.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="358.9" y="686.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 1.15%)</title><rect x="355.9" y="659.0" width="13.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="358.9" y="670.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 1.15%)</title><rect x="355.9" y="643.0" width="13.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="358.9" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 2.30%)</title><rect x="369.4" y="659.0" width="27.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="372.4" y="670.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.57%)</title><rect x="389.8" y="643.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="392.8" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (5 samples, 2.87%)</title><rect x="396.6" y="755.0" width="33.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="399.6" y="766.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.57%)</title><rect x="396.6" y="739.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="399.6" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (4 samples, 2.30%)</title><rect x="403.3" y="739.0" width="27.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="406.3" y="750.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.57%)</title><rect x="403.3" y="723.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="406.3" y="734.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.57%)</title><rect x="403.3" y="707.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="406.3" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.57%)</title><rect x="410.1" y="723.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="413.1" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.57%)</title><rect x="410.1" y="707.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="413.1" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.57%)</title><rect x="410.1" y="691.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="413.1" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.57%)</title><rect x="416.9" y="723.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="419.9" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.57%)</title><rect x="416.9" y="707.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="419.9" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.57%)</title><rect x="423.7" y="723.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="426.7" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.57%)</title><rect x="423.7" y="707.0" width="6.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="426.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.15%)</title><rect x="430.5" y="771.0" width="13.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="433.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.57%)</title><rect x="437.2" y="755.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="440.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.57%)</title><rect x="437.2" y="739.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="440.2" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$266/570473439.accept (1 samples, 0.57%)</title><rect x="437.2" y="723.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="440.2" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (1 samples, 0.57%)</title><rect x="437.2" y="707.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1420891706.complete (1 samples, 0.57%)</title><rect x="437.2" y="691.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="440.2" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (1 samples, 0.57%)</title><rect x="437.2" y="675.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="440.2" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.57%)</title><rect x="437.2" y="659.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="440.2" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.57%)</title><rect x="437.2" y="643.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="440.2" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.57%)</title><rect x="437.2" y="627.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="440.2" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.57%)</title><rect x="437.2" y="611.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="440.2" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.57%)</title><rect x="437.2" y="595.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="440.2" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 1.72%)</title><rect x="444.0" y="787.0" width="20.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="447.0" y="798.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.57%)</title><rect x="457.6" y="771.0" width="6.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="460.6" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.57%)</title><rect x="457.6" y="755.0" width="6.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="460.6" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 1.15%)</title><rect x="464.4" y="835.0" width="13.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="467.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.57%)</title><rect x="477.9" y="835.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="480.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.57%)</title><rect x="477.9" y="819.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="480.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.57%)</title><rect x="477.9" y="803.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="480.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.57%)</title><rect x="484.7" y="835.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="487.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (23 samples, 13.22%)</title><rect x="491.5" y="835.0" width="156.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="494.5" y="846.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (22 samples, 12.64%)</title><rect x="498.3" y="819.0" width="149.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="501.3" y="830.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (21 samples, 12.07%)</title><rect x="505.1" y="803.0" width="142.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="508.1" y="814.0">java/util/concurre..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 1.72%)</title><rect x="505.1" y="787.0" width="20.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="508.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (18 samples, 10.34%)</title><rect x="525.4" y="787.0" width="122.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="528.4" y="798.0">java/util/concu..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (18 samples, 10.34%)</title><rect x="525.4" y="771.0" width="122.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="528.4" y="782.0">sun/misc/Unsafe..</text>
</g>
<g>
<title>Unsafe_Park (18 samples, 10.34%)</title><rect x="525.4" y="755.0" width="122.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="528.4" y="766.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.57%)</title><rect x="532.2" y="739.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="535.2" y="750.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.57%)</title><rect x="539.0" y="739.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="542.0" y="750.0"></text>
</g>
<g>
<title>__lll_unlock_wake (8 samples, 4.60%)</title><rect x="545.7" y="739.0" width="54.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="548.7" y="750.0">__lll..</text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 1.15%)</title><rect x="600.0" y="739.0" width="13.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="603.0" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 1.15%)</title><rect x="613.6" y="739.0" width="13.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="616.6" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 1.15%)</title><rect x="627.1" y="739.0" width="13.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="630.1" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.57%)</title><rect x="640.7" y="739.0" width="6.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="643.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.57%)</title><rect x="647.5" y="883.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="650.5" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.57%)</title><rect x="647.5" y="867.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="650.5" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.57%)</title><rect x="647.5" y="851.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="650.5" y="862.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.57%)</title><rect x="647.5" y="835.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="650.5" y="846.0"></text>
</g>
<g>
<title>start_thread (79 samples, 45.40%)</title><rect x="654.3" y="883.0" width="535.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="657.3" y="894.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (79 samples, 45.40%)</title><rect x="654.3" y="867.0" width="535.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="657.3" y="878.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 8.05%)</title><rect x="654.3" y="851.0" width="94.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="657.3" y="862.0">GangWorker:..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 2.30%)</title><rect x="654.3" y="835.0" width="27.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="657.3" y="846.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 2.30%)</title><rect x="654.3" y="819.0" width="27.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="657.3" y="830.0">G..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.57%)</title><rect x="654.3" y="803.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="657.3" y="814.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 1.72%)</title><rect x="661.0" y="803.0" width="20.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="664.0" y="814.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (10 samples, 5.75%)</title><rect x="681.4" y="835.0" width="67.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="684.4" y="846.0">G1ParTa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 5.17%)</title><rect x="681.4" y="819.0" width="61.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="684.4" y="830.0">G1ParE..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 1.72%)</title><rect x="681.4" y="803.0" width="20.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="684.4" y="814.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.57%)</title><rect x="701.7" y="803.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="704.7" y="814.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 2.30%)</title><rect x="708.5" y="803.0" width="27.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="711.5" y="814.0">S..</text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.57%)</title><rect x="735.6" y="803.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="738.6" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.57%)</title><rect x="742.4" y="819.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="745.4" y="830.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.57%)</title><rect x="742.4" y="803.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="745.4" y="814.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.57%)</title><rect x="742.4" y="787.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="745.4" y="798.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.57%)</title><rect x="742.4" y="771.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="745.4" y="782.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.57%)</title><rect x="742.4" y="755.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="745.4" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.57%)</title><rect x="742.4" y="739.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="745.4" y="750.0"></text>
</g>
<g>
<title>InstanceMirrorKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.57%)</title><rect x="742.4" y="723.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="745.4" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.57%)</title><rect x="742.4" y="707.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="745.4" y="718.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.57%)</title><rect x="742.4" y="691.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="745.4" y="702.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (65 samples, 37.36%)</title><rect x="749.2" y="851.0" width="440.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="752.2" y="862.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (65 samples, 37.36%)</title><rect x="749.2" y="835.0" width="440.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="752.2" y="846.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (65 samples, 37.36%)</title><rect x="749.2" y="819.0" width="440.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="752.2" y="830.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (63 samples, 36.21%)</title><rect x="749.2" y="803.0" width="427.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="752.2" y="814.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (63 samples, 36.21%)</title><rect x="749.2" y="787.0" width="427.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="752.2" y="798.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool,..</text>
</g>
<g>
<title>Compile::Code_Gen() (32 samples, 18.39%)</title><rect x="749.2" y="771.0" width="217.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="752.2" y="782.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.57%)</title><rect x="749.2" y="755.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="752.2" y="766.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.57%)</title><rect x="749.2" y="739.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="752.2" y="750.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.57%)</title><rect x="749.2" y="723.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="752.2" y="734.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.72%)</title><rect x="756.0" y="755.0" width="20.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="759.0" y="766.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.72%)</title><rect x="756.0" y="739.0" width="20.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="759.0" y="750.0"></text>
</g>
<g>
<title>Matcher::collect_null_checks(Node*, Node*) (1 samples, 0.57%)</title><rect x="762.8" y="723.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="765.8" y="734.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.57%)</title><rect x="769.5" y="723.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="772.5" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.15%)</title><rect x="776.3" y="755.0" width="13.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="779.3" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.15%)</title><rect x="776.3" y="739.0" width="13.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="779.3" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.57%)</title><rect x="776.3" y="723.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="779.3" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.57%)</title><rect x="776.3" y="707.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="779.3" y="718.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.57%)</title><rect x="776.3" y="691.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="779.3" y="702.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.57%)</title><rect x="776.3" y="675.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="779.3" y="686.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.57%)</title><rect x="776.3" y="659.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="779.3" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.57%)</title><rect x="783.1" y="723.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="786.1" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.57%)</title><rect x="783.1" y="707.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="786.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (26 samples, 14.94%)</title><rect x="789.9" y="755.0" width="176.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="792.9" y="766.0">PhaseChaitin::Register_..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.57%)</title><rect x="789.9" y="739.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="792.9" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.57%)</title><rect x="796.7" y="739.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="799.7" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 2.30%)</title><rect x="803.4" y="739.0" width="27.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="806.4" y="750.0">P..</text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (2 samples, 1.15%)</title><rect x="817.0" y="723.0" width="13.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="820.0" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.57%)</title><rect x="817.0" y="707.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="820.0" y="718.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.57%)</title><rect x="823.8" y="707.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="826.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 4.02%)</title><rect x="830.6" y="739.0" width="47.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="833.6" y="750.0">Phas..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.57%)</title><rect x="857.7" y="723.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="860.7" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.15%)</title><rect x="864.5" y="723.0" width="13.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="867.5" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.15%)</title><rect x="864.5" y="707.0" width="13.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="867.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.57%)</title><rect x="878.0" y="739.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="881.0" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (1 samples, 0.57%)</title><rect x="884.8" y="739.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="887.8" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.57%)</title><rect x="884.8" y="723.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="887.8" y="734.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.57%)</title><rect x="884.8" y="707.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="887.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 2.30%)</title><rect x="891.6" y="739.0" width="27.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="894.6" y="750.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 1.15%)</title><rect x="905.2" y="723.0" width="13.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="908.2" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.57%)</title><rect x="918.7" y="739.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="921.7" y="750.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 2.30%)</title><rect x="925.5" y="739.0" width="27.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="928.5" y="750.0">P..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.15%)</title><rect x="939.1" y="723.0" width="13.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="942.1" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.57%)</title><rect x="945.9" y="707.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="948.9" y="718.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.57%)</title><rect x="952.6" y="739.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="955.6" y="750.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.57%)</title><rect x="959.4" y="739.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="962.4" y="750.0"></text>
</g>
<g>
<title>Compile::Optimize() (25 samples, 14.37%)</title><rect x="966.2" y="771.0" width="169.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="969.2" y="782.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.57%)</title><rect x="966.2" y="755.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="969.2" y="766.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.57%)</title><rect x="966.2" y="739.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="969.2" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.57%)</title><rect x="973.0" y="755.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="976.0" y="766.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.57%)</title><rect x="973.0" y="739.0" width="6.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="976.0" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (21 samples, 12.07%)</title><rect x="979.8" y="755.0" width="142.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="982.8" y="766.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.57%)</title><rect x="979.8" y="739.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="982.8" y="750.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.57%)</title><rect x="986.6" y="739.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="989.6" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.57%)</title><rect x="986.6" y="723.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="989.6" y="734.0"></text>
</g>
<g>
<title>Invariance::clone(Node*, Node*) (1 samples, 0.57%)</title><rect x="986.6" y="707.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="989.6" y="718.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.57%)</title><rect x="986.6" y="691.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="989.6" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.15%)</title><rect x="993.3" y="739.0" width="13.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="996.3" y="750.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.57%)</title><rect x="1000.1" y="723.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1003.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (12 samples, 6.90%)</title><rect x="1006.9" y="739.0" width="81.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1009.9" y="750.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (10 samples, 5.75%)</title><rect x="1020.5" y="723.0" width="67.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1023.5" y="734.0">PhaseId..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.57%)</title><rect x="1027.2" y="707.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1030.2" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (8 samples, 4.60%)</title><rect x="1034.0" y="707.0" width="54.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1037.0" y="718.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.57%)</title><rect x="1047.6" y="691.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1050.6" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.57%)</title><rect x="1047.6" y="675.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1050.6" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.194] (1 samples, 0.57%)</title><rect x="1047.6" y="659.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1050.6" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.57%)</title><rect x="1054.4" y="691.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1057.4" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (4 samples, 2.30%)</title><rect x="1061.1" y="691.0" width="27.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1064.1" y="702.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 1.15%)</title><rect x="1088.3" y="739.0" width="13.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1091.3" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.57%)</title><rect x="1095.1" y="723.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1098.1" y="734.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.57%)</title><rect x="1095.1" y="707.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1098.1" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() (1 samples, 0.57%)</title><rect x="1101.8" y="739.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1104.8" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.57%)</title><rect x="1101.8" y="723.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1104.8" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_predicate(Node*) (1 samples, 0.57%)</title><rect x="1101.8" y="707.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1104.8" y="718.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.57%)</title><rect x="1101.8" y="691.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1104.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 1.15%)</title><rect x="1108.6" y="739.0" width="13.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1111.6" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.57%)</title><rect x="1108.6" y="723.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.6" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.57%)</title><rect x="1115.4" y="723.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1118.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.57%)</title><rect x="1115.4" y="707.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1118.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.57%)</title><rect x="1115.4" y="691.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.4" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.15%)</title><rect x="1122.2" y="755.0" width="13.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1125.2" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.15%)</title><rect x="1122.2" y="739.0" width="13.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.2" y="750.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.57%)</title><rect x="1122.2" y="723.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.2" y="734.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1129.0" y="723.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.0" y="734.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.57%)</title><rect x="1129.0" y="707.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.0" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.57%)</title><rect x="1129.0" y="691.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.0" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.57%)</title><rect x="1129.0" y="675.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.0" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.57%)</title><rect x="1129.0" y="659.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.0" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.57%)</title><rect x="1129.0" y="643.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.0" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.57%)</title><rect x="1129.0" y="627.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.0" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.57%)</title><rect x="1129.0" y="611.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.0" y="622.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.57%)</title><rect x="1129.0" y="595.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.0" y="606.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.57%)</title><rect x="1129.0" y="579.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1132.0" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 3.45%)</title><rect x="1135.7" y="771.0" width="40.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.7" y="782.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 3.45%)</title><rect x="1135.7" y="755.0" width="40.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.7" y="766.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.45%)</title><rect x="1135.7" y="739.0" width="40.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.7" y="750.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.45%)</title><rect x="1135.7" y="723.0" width="40.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.7" y="734.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.45%)</title><rect x="1135.7" y="707.0" width="40.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.7" y="718.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.45%)</title><rect x="1135.7" y="691.0" width="40.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.7" y="702.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.87%)</title><rect x="1135.7" y="675.0" width="34.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.7" y="686.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.87%)</title><rect x="1135.7" y="659.0" width="34.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.7" y="670.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.87%)</title><rect x="1135.7" y="643.0" width="34.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.7" y="654.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.87%)</title><rect x="1135.7" y="627.0" width="34.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.7" y="638.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.87%)</title><rect x="1135.7" y="611.0" width="34.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.7" y="622.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.87%)</title><rect x="1135.7" y="595.0" width="34.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.7" y="606.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.87%)</title><rect x="1135.7" y="579.0" width="34.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.7" y="590.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.87%)</title><rect x="1135.7" y="563.0" width="34.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.7" y="574.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.30%)</title><rect x="1135.7" y="547.0" width="27.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.7" y="558.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.30%)</title><rect x="1135.7" y="531.0" width="27.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.7" y="542.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.30%)</title><rect x="1135.7" y="515.0" width="27.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.7" y="526.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.30%)</title><rect x="1135.7" y="499.0" width="27.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.7" y="510.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.57%)</title><rect x="1135.7" y="483.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.7" y="494.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.57%)</title><rect x="1135.7" y="467.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.7" y="478.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.57%)</title><rect x="1135.7" y="451.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.7" y="462.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.57%)</title><rect x="1135.7" y="435.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.7" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.57%)</title><rect x="1135.7" y="419.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.7" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.57%)</title><rect x="1135.7" y="403.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.7" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="1135.7" y="387.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.7" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="1135.7" y="371.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.7" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.57%)</title><rect x="1135.7" y="355.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.7" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.57%)</title><rect x="1135.7" y="339.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.7" y="350.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.57%)</title><rect x="1135.7" y="323.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.7" y="334.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.57%)</title><rect x="1135.7" y="307.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.7" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.57%)</title><rect x="1135.7" y="291.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.7" y="302.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.57%)</title><rect x="1135.7" y="275.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.7" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.72%)</title><rect x="1142.5" y="483.0" width="20.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.5" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.72%)</title><rect x="1142.5" y="467.0" width="20.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.72%)</title><rect x="1142.5" y="451.0" width="20.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.15%)</title><rect x="1142.5" y="435.0" width="13.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.15%)</title><rect x="1142.5" y="419.0" width="13.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1142.5" y="403.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.5" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1142.5" y="387.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.5" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1142.5" y="371.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1142.5" y="355.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1142.5" y="339.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1142.5" y="323.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1142.5" y="307.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1145.5" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1142.5" y="291.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.5" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1142.5" y="275.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1142.5" y="259.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1142.5" y="243.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1142.5" y="227.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1142.5" y="211.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.5" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1142.5" y="195.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.5" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1142.5" y="179.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1142.5" y="163.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.5" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1142.5" y="147.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1142.5" y="131.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1142.5" y="115.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.5" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1142.5" y="99.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.5" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1142.5" y="83.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.5" y="94.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.57%)</title><rect x="1142.5" y="67.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.5" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.57%)</title><rect x="1142.5" y="51.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.5" y="62.0"></text>
</g>
<g>
<title>TypeInt::filter_helper(Type const*, bool) const (1 samples, 0.57%)</title><rect x="1142.5" y="35.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.5" y="46.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.57%)</title><rect x="1149.3" y="403.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.3" y="414.0"></text>
</g>
<g>
<title>Parse::adjust_map_after_if(BoolTest::mask, Node*, float, Parse::Block*, Parse::Block*) (1 samples, 0.57%)</title><rect x="1149.3" y="387.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.3" y="398.0"></text>
</g>
<g>
<title>Compile::too_many_traps(ciMethod*, int, Deoptimization::DeoptReason) (1 samples, 0.57%)</title><rect x="1149.3" y="371.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.3" y="382.0"></text>
</g>
<g>
<title>ciMethodData::has_trap_at(ProfileData*, int) (1 samples, 0.57%)</title><rect x="1149.3" y="355.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.3" y="366.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.57%)</title><rect x="1156.1" y="435.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.57%)</title><rect x="1162.9" y="547.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.9" y="558.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.57%)</title><rect x="1162.9" y="531.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.9" y="542.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1162.9" y="515.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.9" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1169.7" y="675.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.7" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1169.7" y="659.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.7" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1169.7" y="643.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1169.7" y="627.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1169.7" y="611.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1169.7" y="595.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1169.7" y="579.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.7" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1169.7" y="563.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.7" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1169.7" y="547.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.7" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1169.7" y="531.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1169.7" y="515.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1169.7" y="499.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1169.7" y="483.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1169.7" y="467.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.7" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1169.7" y="451.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.7" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1169.7" y="435.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1169.7" y="419.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1169.7" y="403.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1169.7" y="387.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1169.7" y="371.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.7" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1169.7" y="355.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.7" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1169.7" y="339.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1169.7" y="323.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1169.7" y="307.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1169.7" y="291.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1169.7" y="275.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.7" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1169.7" y="259.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.7" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1169.7" y="243.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1169.7" y="227.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1169.7" y="211.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1169.7" y="195.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.7" y="206.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.57%)</title><rect x="1169.7" y="179.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.7" y="190.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.57%)</title><rect x="1169.7" y="163.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.7" y="174.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.15%)</title><rect x="1176.4" y="803.0" width="13.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.4" y="814.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.15%)</title><rect x="1176.4" y="787.0" width="13.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.4" y="798.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.15%)</title><rect x="1176.4" y="771.0" width="13.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.4" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.15%)</title><rect x="1176.4" y="755.0" width="13.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.4" y="766.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.57%)</title><rect x="1176.4" y="739.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.4" y="750.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.57%)</title><rect x="1176.4" y="723.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.4" y="734.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.57%)</title><rect x="1176.4" y="707.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.4" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.57%)</title><rect x="1176.4" y="691.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.4" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.57%)</title><rect x="1176.4" y="675.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.4" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.57%)</title><rect x="1176.4" y="659.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.4" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.57%)</title><rect x="1176.4" y="643.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.4" y="654.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.57%)</title><rect x="1176.4" y="627.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.4" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.57%)</title><rect x="1176.4" y="611.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.4" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.57%)</title><rect x="1176.4" y="595.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.4" y="606.0"></text>
</g>
<g>
<title>ciInstanceKlass::field_cache() (1 samples, 0.57%)</title><rect x="1176.4" y="579.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.4" y="590.0"></text>
</g>
<g>
<title>ciConstantPoolCache::ciConstantPoolCache(Arena*, int) (1 samples, 0.57%)</title><rect x="1176.4" y="563.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.4" y="574.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.57%)</title><rect x="1183.2" y="739.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.2" y="750.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.57%)</title><rect x="1183.2" y="723.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="734.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.57%)</title><rect x="1183.2" y="707.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="718.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.57%)</title><rect x="1183.2" y="691.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.2" y="702.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.57%)</title><rect x="1183.2" y="675.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.2" y="686.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.57%)</title><rect x="1183.2" y="659.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.2" y="670.0"></text>
</g>
</g>
</svg>
