<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1045"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1045"> </text>
<g id="frames">
<g>
<title>all (1,159 samples, 100.00%)</title><rect x="10.0" y="1011.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1022.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="10.0" y="995.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.09%)</title><rect x="10.0" y="979.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (267 samples, 23.04%)</title><rect x="11.0" y="995.0" width="271.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1006.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.09%)</title><rect x="12.0" y="979.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.09%)</title><rect x="12.0" y="963.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.09%)</title><rect x="12.0" y="947.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.0" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.forEach (1 samples, 0.09%)</title><rect x="12.0" y="931.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$283/865523083.accept (1 samples, 0.09%)</title><rect x="12.0" y="915.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateLastSeenEpochIfNewer (1 samples, 0.09%)</title><rect x="12.0" y="899.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.0" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (1 samples, 0.09%)</title><rect x="12.0" y="883.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.0" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="12.0" y="867.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$284/377910881.get$Lambda (1 samples, 0.09%)</title><rect x="12.0" y="851.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$284/377910881.&lt;init&gt; (1 samples, 0.09%)</title><rect x="12.0" y="835.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (264 samples, 22.78%)</title><rect x="13.1" y="979.0" width="268.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.1" y="990.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (5 samples, 0.43%)</title><rect x="14.1" y="963.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.1" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.43%)</title><rect x="14.1" y="947.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/24125126.accept (5 samples, 0.43%)</title><rect x="14.1" y="931.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (5 samples, 0.43%)</title><rect x="14.1" y="915.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.1" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.43%)</title><rect x="14.1" y="899.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.1" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.43%)</title><rect x="14.1" y="883.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.1" y="894.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (200 samples, 17.26%)</title><rect x="19.2" y="963.0" width="203.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.2" y="974.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/943125262.accept (191 samples, 16.48%)</title><rect x="20.2" y="947.0" width="194.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.2" y="958.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (189 samples, 16.31%)</title><rect x="22.2" y="931.0" width="192.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.2" y="942.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (2 samples, 0.17%)</title><rect x="22.2" y="915.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (155 samples, 13.37%)</title><rect x="24.3" y="915.0" width="157.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.3" y="926.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (155 samples, 13.37%)</title><rect x="24.3" y="899.0" width="157.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.3" y="910.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (155 samples, 13.37%)</title><rect x="24.3" y="883.0" width="157.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.3" y="894.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (155 samples, 13.37%)</title><rect x="24.3" y="867.0" width="157.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.3" y="878.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (155 samples, 13.37%)</title><rect x="24.3" y="851.0" width="157.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="27.3" y="862.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (155 samples, 13.37%)</title><rect x="24.3" y="835.0" width="157.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.3" y="846.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (105 samples, 9.06%)</title><rect x="24.3" y="819.0" width="106.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="27.3" y="830.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (16 samples, 1.38%)</title><rect x="24.3" y="803.0" width="16.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (16 samples, 1.38%)</title><rect x="24.3" y="787.0" width="16.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (11 samples, 0.95%)</title><rect x="29.3" y="771.0" width="11.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (11 samples, 0.95%)</title><rect x="29.3" y="755.0" width="11.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (12 samples, 1.04%)</title><rect x="40.5" y="803.0" width="12.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="43.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (12 samples, 1.04%)</title><rect x="40.5" y="787.0" width="12.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (6 samples, 0.52%)</title><rect x="40.5" y="771.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.5" y="782.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (6 samples, 0.52%)</title><rect x="40.5" y="755.0" width="6.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="43.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (6 samples, 0.52%)</title><rect x="46.7" y="771.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (77 samples, 6.64%)</title><rect x="52.8" y="803.0" width="78.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.8" y="814.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (77 samples, 6.64%)</title><rect x="52.8" y="787.0" width="78.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="55.8" y="798.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (75 samples, 6.47%)</title><rect x="52.8" y="771.0" width="76.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="55.8" y="782.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (74 samples, 6.38%)</title><rect x="52.8" y="755.0" width="75.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.8" y="766.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (73 samples, 6.30%)</title><rect x="53.8" y="739.0" width="74.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.8" y="750.0">sun/misc..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="55.8" y="723.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="58.8" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark (64 samples, 5.52%)</title><rect x="56.8" y="723.0" width="65.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="59.8" y="734.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.26%)</title><rect x="59.9" y="707.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="62.9" y="718.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="62.9" y="707.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="65.9" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="64.0" y="707.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="67.0" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_signal (42 samples, 3.62%)</title><rect x="65.0" y="707.0" width="42.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="68.0" y="718.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.26%)</title><rect x="107.7" y="707.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="110.7" y="718.0"></text>
</g>
<g>
<title>pthread_mutex_lock (11 samples, 0.95%)</title><rect x="110.8" y="707.0" width="11.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="113.8" y="718.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.35%)</title><rect x="122.0" y="723.0" width="4.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="125.0" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.17%)</title><rect x="126.1" y="723.0" width="2.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="129.1" y="734.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1 samples, 0.09%)</title><rect x="128.1" y="755.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="131.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.17%)</title><rect x="129.1" y="771.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="132.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (43 samples, 3.71%)</title><rect x="131.2" y="819.0" width="43.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="134.2" y="830.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (43 samples, 3.71%)</title><rect x="131.2" y="803.0" width="43.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="134.2" y="814.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (43 samples, 3.71%)</title><rect x="131.2" y="787.0" width="43.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="134.2" y="798.0">java..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="172.9" y="771.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="175.9" y="782.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="173.9" y="771.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="176.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.52%)</title><rect x="174.9" y="819.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="177.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (6 samples, 0.52%)</title><rect x="174.9" y="803.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="177.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.52%)</title><rect x="174.9" y="787.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="177.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="180.0" y="771.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="183.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="181.0" y="819.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="184.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="181.0" y="803.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="184.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="181.0" y="787.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="184.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="181.0" y="771.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="184.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (3 samples, 0.26%)</title><rect x="182.1" y="915.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="185.1" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.26%)</title><rect x="182.1" y="899.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="185.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (2 samples, 0.17%)</title><rect x="185.1" y="915.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="188.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.17%)</title><rect x="185.1" y="899.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="188.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.17%)</title><rect x="185.1" y="883.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="188.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (27 samples, 2.33%)</title><rect x="187.2" y="915.0" width="27.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="190.2" y="926.0">c..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.17%)</title><rect x="187.2" y="899.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="190.2" y="910.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (25 samples, 2.16%)</title><rect x="189.2" y="899.0" width="25.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="192.2" y="910.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (11 samples, 0.95%)</title><rect x="202.4" y="883.0" width="11.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="205.4" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 0.60%)</title><rect x="202.4" y="867.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.4" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 0.60%)</title><rect x="202.4" y="851.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.4" y="862.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.60%)</title><rect x="202.4" y="835.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.4" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="206.5" y="819.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="209.5" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="206.5" y="803.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="209.5" y="814.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="207.5" y="819.0" width="2.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="210.5" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.17%)</title><rect x="209.6" y="867.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="212.6" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.17%)</title><rect x="211.6" y="867.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.6" y="878.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="213.6" y="883.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="216.6" y="894.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="214.6" y="947.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="217.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.60%)</title><rect x="215.7" y="947.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="218.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.60%)</title><rect x="215.7" y="931.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="218.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.60%)</title><rect x="215.7" y="915.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.60%)</title><rect x="215.7" y="899.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="218.7" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (4 samples, 0.35%)</title><rect x="218.7" y="883.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 5.00%)</title><rect x="222.8" y="963.0" width="59.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.8" y="974.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (57 samples, 4.92%)</title><rect x="222.8" y="947.0" width="58.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="225.8" y="958.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (34 samples, 2.93%)</title><rect x="223.8" y="931.0" width="34.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="226.8" y="942.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (33 samples, 2.85%)</title><rect x="224.8" y="915.0" width="33.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.8" y="926.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (33 samples, 2.85%)</title><rect x="224.8" y="899.0" width="33.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.8" y="910.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (29 samples, 2.50%)</title><rect x="224.8" y="883.0" width="29.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="227.8" y="894.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (29 samples, 2.50%)</title><rect x="224.8" y="867.0" width="29.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="227.8" y="878.0">or..</text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="226.9" y="851.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="229.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (15 samples, 1.29%)</title><rect x="227.9" y="851.0" width="15.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (8 samples, 0.69%)</title><rect x="235.0" y="835.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (8 samples, 0.69%)</title><rect x="235.0" y="819.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="238.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (8 samples, 0.69%)</title><rect x="235.0" y="803.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (8 samples, 0.69%)</title><rect x="235.0" y="787.0" width="8.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="238.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (8 samples, 0.69%)</title><rect x="235.0" y="771.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="238.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (8 samples, 0.69%)</title><rect x="235.0" y="755.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="238.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (8 samples, 0.69%)</title><rect x="235.0" y="739.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="238.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (11 samples, 0.95%)</title><rect x="243.1" y="851.0" width="11.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.86%)</title><rect x="244.2" y="835.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="247.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (3 samples, 0.26%)</title><rect x="244.2" y="819.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.2" y="830.0"></text>
</g>
<g>
<title>java/util/Optional.of (3 samples, 0.26%)</title><rect x="244.2" y="803.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="247.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (7 samples, 0.60%)</title><rect x="247.2" y="819.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="250.2" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (7 samples, 0.60%)</title><rect x="247.2" y="803.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="250.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.17%)</title><rect x="254.3" y="883.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="257.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.17%)</title><rect x="254.3" y="867.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="257.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="254.3" y="851.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="254.3" y="835.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="257.3" y="846.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="254.3" y="819.0" width="1.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="257.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="255.4" y="851.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="258.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="255.4" y="835.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="255.4" y="819.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="258.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.09%)</title><rect x="256.4" y="883.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="259.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.contains (1 samples, 0.09%)</title><rect x="256.4" y="867.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="259.4" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="256.4" y="851.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="259.4" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="256.4" y="835.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.09%)</title><rect x="256.4" y="819.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="259.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (1 samples, 0.09%)</title><rect x="257.4" y="883.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.09%)</title><rect x="257.4" y="867.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="260.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (8 samples, 0.69%)</title><rect x="258.4" y="931.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.69%)</title><rect x="258.4" y="915.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="261.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.69%)</title><rect x="258.4" y="899.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="261.4" y="910.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.26%)</title><rect x="258.4" y="883.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="261.4" y="894.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="258.4" y="867.0" width="1.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="261.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1671682015.accept (2 samples, 0.17%)</title><rect x="259.4" y="867.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="262.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.17%)</title><rect x="259.4" y="851.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="262.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="259.4" y="835.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="259.4" y="819.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.09%)</title><rect x="259.4" y="803.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="262.4" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="259.4" y="787.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="262.4" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="259.4" y="771.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="262.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="260.5" y="835.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="263.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="260.5" y="819.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="263.5" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.17%)</title><rect x="261.5" y="883.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="264.5" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="261.5" y="867.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="264.5" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.17%)</title><rect x="261.5" y="851.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.5" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="261.5" y="835.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.5" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="261.5" y="819.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.5" y="830.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="261.5" y="803.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.5" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.09%)</title><rect x="261.5" y="787.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.5" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="262.5" y="803.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.5" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$67/1254196542.get (1 samples, 0.09%)</title><rect x="262.5" y="787.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="265.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.26%)</title><rect x="263.5" y="883.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.5" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1600400068.linkToTargetMethod (1 samples, 0.09%)</title><rect x="263.5" y="867.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.5" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1013957428.invokeStatic_J_L (1 samples, 0.09%)</title><rect x="263.5" y="851.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$212/1812559398.get$Lambda (1 samples, 0.09%)</title><rect x="263.5" y="835.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="266.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.17%)</title><rect x="264.5" y="867.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="267.5" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.17%)</title><rect x="264.5" y="851.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.5" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="264.5" y="835.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.5" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="265.5" y="819.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.5" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="265.5" y="803.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.5" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="265.5" y="787.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.5" y="798.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="265.5" y="771.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.5" y="782.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="265.5" y="755.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="268.5" y="766.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.09%)</title><rect x="265.5" y="739.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.5" y="750.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.09%)</title><rect x="265.5" y="723.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.5" y="734.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.09%)</title><rect x="265.5" y="707.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.5" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="265.5" y="691.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="268.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.09%)</title><rect x="266.6" y="931.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.09%)</title><rect x="266.6" y="915.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="269.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.isEmpty (1 samples, 0.09%)</title><rect x="266.6" y="899.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (9 samples, 0.78%)</title><rect x="267.6" y="931.0" width="9.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="270.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (8 samples, 0.69%)</title><rect x="267.6" y="915.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="270.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.17%)</title><rect x="267.6" y="899.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (2 samples, 0.17%)</title><rect x="267.6" y="883.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="270.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (2 samples, 0.17%)</title><rect x="267.6" y="867.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="270.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (2 samples, 0.17%)</title><rect x="267.6" y="851.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="270.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (2 samples, 0.17%)</title><rect x="267.6" y="835.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="270.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (2 samples, 0.17%)</title><rect x="267.6" y="819.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="270.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (2 samples, 0.17%)</title><rect x="267.6" y="803.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="270.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (2 samples, 0.17%)</title><rect x="267.6" y="787.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="270.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.09%)</title><rect x="268.6" y="771.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="271.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.09%)</title><rect x="268.6" y="755.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.09%)</title><rect x="268.6" y="739.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="271.6" y="750.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.09%)</title><rect x="268.6" y="723.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.6" y="734.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.09%)</title><rect x="268.6" y="707.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="271.6" y="718.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (1 samples, 0.09%)</title><rect x="268.6" y="691.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.09%)</title><rect x="269.6" y="899.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.09%)</title><rect x="269.6" y="883.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 0.43%)</title><rect x="270.6" y="899.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="270.6" y="883.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="273.6" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.09%)</title><rect x="270.6" y="867.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="273.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.26%)</title><rect x="271.7" y="883.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.26%)</title><rect x="271.7" y="867.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.26%)</title><rect x="271.7" y="851.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.7" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.17%)</title><rect x="271.7" y="835.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="274.7" y="846.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.17%)</title><rect x="271.7" y="819.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="274.7" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.09%)</title><rect x="272.7" y="803.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="275.7" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="272.7" y="787.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="275.7" y="798.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.09%)</title><rect x="272.7" y="771.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="275.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="273.7" y="835.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="273.7" y="819.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="276.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="273.7" y="803.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="276.7" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="273.7" y="787.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.7" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="273.7" y="771.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="276.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.09%)</title><rect x="274.7" y="883.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="277.7" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.09%)</title><rect x="274.7" y="867.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.7" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.09%)</title><rect x="274.7" y="851.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="277.7" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.09%)</title><rect x="274.7" y="835.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="277.7" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.09%)</title><rect x="274.7" y="819.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.7" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.09%)</title><rect x="274.7" y="803.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="277.7" y="814.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_EPollArrayWrapper_epollWait (1 samples, 0.09%)</title><rect x="274.7" y="787.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="277.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="275.7" y="915.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="278.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="275.7" y="899.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="278.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="275.7" y="883.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="275.7" y="867.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="275.7" y="851.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="278.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="275.7" y="835.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.09%)</title><rect x="275.7" y="819.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="278.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.09%)</title><rect x="275.7" y="803.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="278.7" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.09%)</title><rect x="275.7" y="787.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="278.7" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.09%)</title><rect x="275.7" y="771.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="278.7" y="782.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_method(JavaThread*, Thread*) (1 samples, 0.09%)</title><rect x="275.7" y="755.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="278.7" y="766.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.09%)</title><rect x="275.7" y="739.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="278.7" y="750.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.09%)</title><rect x="275.7" y="723.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="278.7" y="734.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(methodHandle&amp;, KlassHandle&amp;, Bytecodes::Code, constantPoolHandle, int, Thread*) (1 samples, 0.09%)</title><rect x="275.7" y="707.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="278.7" y="718.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="275.7" y="691.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="278.7" y="702.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="275.7" y="675.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="278.7" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.09%)</title><rect x="275.7" y="659.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="278.7" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.09%)</title><rect x="275.7" y="643.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="278.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.26%)</title><rect x="276.7" y="931.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="279.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.26%)</title><rect x="276.7" y="915.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="279.7" y="926.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.09%)</title><rect x="276.7" y="899.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="279.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.09%)</title><rect x="277.8" y="899.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="280.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.09%)</title><rect x="278.8" y="899.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="281.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="278.8" y="883.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.8" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="278.8" y="867.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="281.8" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="278.8" y="851.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="281.8" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="278.8" y="835.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="281.8" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="278.8" y="819.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="281.8" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="278.8" y="803.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="281.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.09%)</title><rect x="279.8" y="931.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="279.8" y="915.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.09%)</title><rect x="280.8" y="947.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="283.8" y="958.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="280.8" y="931.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="283.8" y="942.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="281.8" y="979.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="284.8" y="990.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="281.8" y="963.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="284.8" y="974.0"></text>
</g>
<g>
<title>java/lang/Thread.run (705 samples, 60.83%)</title><rect x="282.9" y="995.0" width="717.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.9" y="1006.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (705 samples, 60.83%)</title><rect x="282.9" y="979.0" width="717.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.9" y="990.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (705 samples, 60.83%)</title><rect x="282.9" y="963.0" width="717.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="285.9" y="974.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1581344107.run (485 samples, 41.85%)</title><rect x="289.0" y="947.0" width="493.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="292.0" y="958.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/158..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (483 samples, 41.67%)</title><rect x="291.0" y="931.0" width="491.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.0" y="942.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (483 samples, 41.67%)</title><rect x="291.0" y="915.0" width="491.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.0" y="926.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (479 samples, 41.33%)</title><rect x="291.0" y="899.0" width="487.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="294.0" y="910.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThen..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="302.2" y="883.0" width="1.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="305.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.35%)</title><rect x="303.2" y="883.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.2" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (142 samples, 12.25%)</title><rect x="307.3" y="883.0" width="144.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.3" y="894.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (142 samples, 12.25%)</title><rect x="307.3" y="867.0" width="144.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="310.3" y="878.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (142 samples, 12.25%)</title><rect x="307.3" y="851.0" width="144.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="310.3" y="862.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (142 samples, 12.25%)</title><rect x="307.3" y="835.0" width="144.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="310.3" y="846.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (142 samples, 12.25%)</title><rect x="307.3" y="819.0" width="144.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="310.3" y="830.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (142 samples, 12.25%)</title><rect x="307.3" y="803.0" width="144.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="310.3" y="814.0">com/fasterxml/jack..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (46 samples, 3.97%)</title><rect x="307.3" y="787.0" width="46.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="310.3" y="798.0">com/..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="318.5" y="771.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="321.5" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.78%)</title><rect x="319.5" y="771.0" width="9.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="322.5" y="782.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="325.6" y="755.0" width="3.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="328.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 0.60%)</title><rect x="328.7" y="771.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="331.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 0.52%)</title><rect x="329.7" y="755.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="332.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (6 samples, 0.52%)</title><rect x="329.7" y="739.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="332.7" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.52%)</title><rect x="329.7" y="723.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="332.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 0.52%)</title><rect x="329.7" y="707.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="332.7" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.52%)</title><rect x="329.7" y="691.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="332.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (18 samples, 1.55%)</title><rect x="335.8" y="771.0" width="18.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="338.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (10 samples, 0.86%)</title><rect x="343.9" y="755.0" width="10.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="346.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (6 samples, 0.52%)</title><rect x="343.9" y="739.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="346.9" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="343.9" y="723.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="346.9" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="343.9" y="707.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="346.9" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="343.9" y="691.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="346.9" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="343.9" y="675.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="346.9" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="343.9" y="659.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="346.9" y="670.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="343.9" y="643.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="346.9" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="343.9" y="627.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="346.9" y="638.0"></text>
</g>
<g>
<title>SurvRateGroup::next_age_index() (1 samples, 0.09%)</title><rect x="343.9" y="611.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="346.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (5 samples, 0.43%)</title><rect x="345.0" y="723.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="348.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 0.35%)</title><rect x="350.1" y="739.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="353.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 0.35%)</title><rect x="350.1" y="723.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="353.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.35%)</title><rect x="350.1" y="707.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="353.1" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.35%)</title><rect x="350.1" y="691.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="353.1" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.09%)</title><rect x="350.1" y="675.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="353.1" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.26%)</title><rect x="351.1" y="675.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="354.1" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="351.1" y="659.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="354.1" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="352.1" y="643.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="355.1" y="654.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.09%)</title><rect x="352.1" y="627.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="355.1" y="638.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.09%)</title><rect x="353.1" y="659.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="356.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (89 samples, 7.68%)</title><rect x="354.1" y="787.0" width="90.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="357.1" y="798.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.09%)</title><rect x="356.2" y="771.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="359.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.09%)</title><rect x="357.2" y="771.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="360.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.35%)</title><rect x="358.2" y="771.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="361.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.35%)</title><rect x="358.2" y="755.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="361.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.52%)</title><rect x="362.3" y="771.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="365.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.52%)</title><rect x="362.3" y="755.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="365.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.43%)</title><rect x="363.3" y="739.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="366.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.09%)</title><rect x="367.4" y="723.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="370.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (9 samples, 0.78%)</title><rect x="368.4" y="771.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="371.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (7 samples, 0.60%)</title><rect x="370.4" y="755.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="373.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (63 samples, 5.44%)</title><rect x="377.5" y="771.0" width="64.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="380.5" y="782.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.55%)</title><rect x="377.5" y="755.0" width="18.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="380.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.09%)</title><rect x="377.5" y="739.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="380.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.69%)</title><rect x="378.6" y="739.0" width="8.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="381.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.69%)</title><rect x="378.6" y="723.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="381.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.69%)</title><rect x="378.6" y="707.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="381.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (8 samples, 0.69%)</title><rect x="378.6" y="691.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="381.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (5 samples, 0.43%)</title><rect x="381.6" y="675.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="384.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (7 samples, 0.60%)</title><rect x="386.7" y="739.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="389.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.09%)</title><rect x="386.7" y="723.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="389.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.09%)</title><rect x="386.7" y="707.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="389.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (6 samples, 0.52%)</title><rect x="387.7" y="723.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="390.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (6 samples, 0.52%)</title><rect x="387.7" y="707.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="390.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (4 samples, 0.35%)</title><rect x="389.8" y="691.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="392.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (4 samples, 0.35%)</title><rect x="389.8" y="675.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="392.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.17%)</title><rect x="393.8" y="739.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="396.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.17%)</title><rect x="393.8" y="723.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="396.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.09%)</title><rect x="395.9" y="755.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="398.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (44 samples, 3.80%)</title><rect x="396.9" y="755.0" width="44.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="399.9" y="766.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (44 samples, 3.80%)</title><rect x="396.9" y="739.0" width="44.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="399.9" y="750.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (44 samples, 3.80%)</title><rect x="396.9" y="723.0" width="44.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="399.9" y="734.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (23 samples, 1.98%)</title><rect x="403.0" y="707.0" width="23.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="406.0" y="718.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.09%)</title><rect x="407.1" y="691.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="410.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.09%)</title><rect x="408.1" y="691.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (12 samples, 1.04%)</title><rect x="409.1" y="691.0" width="12.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="412.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (12 samples, 1.04%)</title><rect x="409.1" y="675.0" width="12.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="412.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (12 samples, 1.04%)</title><rect x="409.1" y="659.0" width="12.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="412.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.26%)</title><rect x="409.1" y="643.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="412.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (9 samples, 0.78%)</title><rect x="412.2" y="643.0" width="9.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="415.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (8 samples, 0.69%)</title><rect x="413.2" y="627.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="416.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.17%)</title><rect x="419.3" y="611.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="422.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (2 samples, 0.17%)</title><rect x="419.3" y="595.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="422.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.09%)</title><rect x="421.3" y="691.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="424.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.09%)</title><rect x="421.3" y="675.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="424.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.26%)</title><rect x="422.3" y="691.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="425.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.26%)</title><rect x="422.3" y="675.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="425.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.17%)</title><rect x="423.4" y="659.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="426.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.09%)</title><rect x="425.4" y="691.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="428.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 0.35%)</title><rect x="426.4" y="707.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="429.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.17%)</title><rect x="428.4" y="691.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="431.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.17%)</title><rect x="428.4" y="675.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="431.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.17%)</title><rect x="428.4" y="659.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="431.4" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.17%)</title><rect x="428.4" y="643.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="431.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.69%)</title><rect x="430.5" y="707.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="433.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.69%)</title><rect x="430.5" y="691.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="433.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.69%)</title><rect x="430.5" y="675.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="433.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (8 samples, 0.69%)</title><rect x="430.5" y="659.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.5" y="670.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (8 samples, 0.69%)</title><rect x="430.5" y="643.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="433.5" y="654.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.52%)</title><rect x="432.5" y="627.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="435.5" y="638.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor5.newInstance (5 samples, 0.43%)</title><rect x="433.5" y="611.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="436.5" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="437.6" y="595.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="440.6" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="437.6" y="579.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="440.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.26%)</title><rect x="438.6" y="707.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="441.6" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.26%)</title><rect x="438.6" y="691.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="441.6" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.26%)</title><rect x="438.6" y="675.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="441.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (2 samples, 0.17%)</title><rect x="441.7" y="771.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="444.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.09%)</title><rect x="443.7" y="771.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="446.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 0.60%)</title><rect x="444.7" y="787.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="447.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 0.52%)</title><rect x="445.8" y="771.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="448.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 0.52%)</title><rect x="445.8" y="755.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="448.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.52%)</title><rect x="445.8" y="739.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="448.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.52%)</title><rect x="445.8" y="723.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="448.8" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (306 samples, 26.40%)</title><rect x="451.9" y="883.0" width="311.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="454.9" y="894.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (55 samples, 4.75%)</title><rect x="452.9" y="867.0" width="56.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="455.9" y="878.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (3 samples, 0.26%)</title><rect x="453.9" y="851.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="456.9" y="862.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (51 samples, 4.40%)</title><rect x="457.0" y="851.0" width="51.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="460.0" y="862.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (48 samples, 4.14%)</title><rect x="460.0" y="835.0" width="48.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="463.0" y="846.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (10 samples, 0.86%)</title><rect x="461.0" y="819.0" width="10.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="464.0" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (10 samples, 0.86%)</title><rect x="461.0" y="803.0" width="10.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="464.0" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (10 samples, 0.86%)</title><rect x="461.0" y="787.0" width="10.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="464.0" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (10 samples, 0.86%)</title><rect x="461.0" y="771.0" width="10.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="464.0" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (4 samples, 0.35%)</title><rect x="467.1" y="755.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="470.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.26%)</title><rect x="468.2" y="739.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="471.2" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (37 samples, 3.19%)</title><rect x="471.2" y="819.0" width="37.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="474.2" y="830.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (32 samples, 2.76%)</title><rect x="476.3" y="803.0" width="32.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="479.3" y="814.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.60%)</title><rect x="501.8" y="787.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="504.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.69%)</title><rect x="508.9" y="867.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="511.9" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.60%)</title><rect x="509.9" y="851.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="512.9" y="862.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.60%)</title><rect x="509.9" y="835.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="512.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (160 samples, 13.81%)</title><rect x="517.0" y="867.0" width="162.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="520.0" y="878.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (160 samples, 13.81%)</title><rect x="517.0" y="851.0" width="162.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="520.0" y="862.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.52%)</title><rect x="526.2" y="835.0" width="6.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="529.2" y="846.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="528.2" y="819.0" width="4.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="531.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (61 samples, 5.26%)</title><rect x="532.3" y="835.0" width="62.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="535.3" y="846.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (39 samples, 3.36%)</title><rect x="541.5" y="819.0" width="39.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="544.5" y="830.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (33 samples, 2.85%)</title><rect x="547.6" y="803.0" width="33.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="550.6" y="814.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (18 samples, 1.55%)</title><rect x="556.7" y="787.0" width="18.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="559.7" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (18 samples, 1.55%)</title><rect x="556.7" y="771.0" width="18.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="559.7" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (18 samples, 1.55%)</title><rect x="556.7" y="755.0" width="18.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="559.7" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.60%)</title><rect x="562.8" y="739.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="565.8" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.26%)</title><rect x="563.9" y="723.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="566.9" y="734.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="563.9" y="707.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="566.9" y="718.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.17%)</title><rect x="564.9" y="707.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="567.9" y="718.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.17%)</title><rect x="564.9" y="691.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="567.9" y="702.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.17%)</title><rect x="564.9" y="675.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="567.9" y="686.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="566.9" y="723.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="569.9" y="734.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="566.9" y="707.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="569.9" y="718.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="567.9" y="723.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="570.9" y="734.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.09%)</title><rect x="568.9" y="723.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="571.9" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="570.0" y="739.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="573.0" y="750.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.35%)</title><rect x="571.0" y="739.0" width="4.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="574.0" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.17%)</title><rect x="575.1" y="787.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="578.1" y="798.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="577.1" y="787.0" width="2.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="580.1" y="798.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.17%)</title><rect x="579.1" y="787.0" width="2.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="582.1" y="798.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.17%)</title><rect x="581.2" y="819.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="584.2" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="581.2" y="803.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="584.2" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="581.2" y="787.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="584.2" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="581.2" y="771.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="584.2" y="782.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.09%)</title><rect x="582.2" y="803.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="585.2" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.09%)</title><rect x="582.2" y="787.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="585.2" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="582.2" y="771.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="585.2" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="582.2" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="585.2" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="582.2" y="739.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="585.2" y="750.0"></text>
</g>
<g>
<title>jshort_arraycopy (4 samples, 0.35%)</title><rect x="583.2" y="819.0" width="4.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="586.2" y="830.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.60%)</title><rect x="587.3" y="819.0" width="7.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="590.3" y="830.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (11 samples, 0.95%)</title><rect x="594.4" y="835.0" width="11.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="597.4" y="846.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.09%)</title><rect x="594.4" y="819.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="597.4" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="594.4" y="803.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="597.4" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="594.4" y="787.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="597.4" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="594.4" y="771.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="597.4" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="594.4" y="755.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="597.4" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.toString (10 samples, 0.86%)</title><rect x="595.4" y="819.0" width="10.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="598.4" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="595.4" y="803.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="598.4" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="595.4" y="787.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="598.4" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="595.4" y="771.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="598.4" y="782.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.09%)</title><rect x="595.4" y="755.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="598.4" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (9 samples, 0.78%)</title><rect x="596.4" y="803.0" width="9.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="599.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="603.6" y="787.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="606.6" y="798.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.09%)</title><rect x="604.6" y="787.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="607.6" y="798.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (71 samples, 6.13%)</title><rect x="605.6" y="835.0" width="72.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="608.6" y="846.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (71 samples, 6.13%)</title><rect x="605.6" y="819.0" width="72.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="608.6" y="830.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.69%)</title><rect x="605.6" y="803.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="608.6" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.69%)</title><rect x="605.6" y="787.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="608.6" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.69%)</title><rect x="605.6" y="771.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="608.6" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.69%)</title><rect x="605.6" y="755.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="608.6" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.17%)</title><rect x="611.7" y="739.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="614.7" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="612.7" y="723.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="615.7" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (63 samples, 5.44%)</title><rect x="613.7" y="803.0" width="64.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="616.7" y="814.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (55 samples, 4.75%)</title><rect x="621.9" y="787.0" width="56.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="624.9" y="798.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (29 samples, 2.50%)</title><rect x="648.4" y="771.0" width="29.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="651.4" y="782.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.09%)</title><rect x="661.6" y="755.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="664.6" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 0.86%)</title><rect x="662.6" y="755.0" width="10.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="665.6" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="670.8" y="739.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="673.8" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (2 samples, 0.17%)</title><rect x="670.8" y="723.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="673.8" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (2 samples, 0.17%)</title><rect x="670.8" y="707.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="673.8" y="718.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.43%)</title><rect x="672.8" y="755.0" width="5.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="675.8" y="766.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.17%)</title><rect x="677.9" y="835.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="680.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (57 samples, 4.92%)</title><rect x="679.9" y="867.0" width="58.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="682.9" y="878.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (57 samples, 4.92%)</title><rect x="679.9" y="851.0" width="58.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="682.9" y="862.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1186306248.process (23 samples, 1.98%)</title><rect x="685.0" y="835.0" width="23.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="688.0" y="846.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (23 samples, 1.98%)</title><rect x="685.0" y="819.0" width="23.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="688.0" y="830.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (16 samples, 1.38%)</title><rect x="685.0" y="803.0" width="16.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="688.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.52%)</title><rect x="686.0" y="787.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="689.0" y="798.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="686.0" y="771.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="689.0" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.43%)</title><rect x="687.0" y="771.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="690.0" y="782.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.43%)</title><rect x="687.0" y="755.0" width="5.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="690.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.09%)</title><rect x="692.1" y="787.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="695.1" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.60%)</title><rect x="693.2" y="787.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="696.2" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.09%)</title><rect x="700.3" y="787.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="703.3" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.09%)</title><rect x="700.3" y="771.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="703.3" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.09%)</title><rect x="700.3" y="755.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="703.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.09%)</title><rect x="700.3" y="739.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="703.3" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="700.3" y="723.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="703.3" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="700.3" y="707.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="703.3" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="700.3" y="691.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="703.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (7 samples, 0.60%)</title><rect x="701.3" y="803.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="704.3" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.35%)</title><rect x="704.4" y="787.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="707.4" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.35%)</title><rect x="704.4" y="771.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="707.4" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.35%)</title><rect x="704.4" y="755.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="707.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/1480539267.complete (1 samples, 0.09%)</title><rect x="708.4" y="835.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="711.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.35%)</title><rect x="709.4" y="835.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="712.4" y="846.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.35%)</title><rect x="709.4" y="819.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="712.4" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (4 samples, 0.35%)</title><rect x="713.5" y="835.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="716.5" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (4 samples, 0.35%)</title><rect x="713.5" y="819.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="716.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/1480539267.get$Lambda (4 samples, 0.35%)</title><rect x="713.5" y="803.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="716.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/1480539267.&lt;init&gt; (4 samples, 0.35%)</title><rect x="713.5" y="787.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="716.5" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (3 samples, 0.26%)</title><rect x="717.6" y="835.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="720.6" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.17%)</title><rect x="718.6" y="819.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="721.6" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (2 samples, 0.17%)</title><rect x="718.6" y="803.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="721.6" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.69%)</title><rect x="720.6" y="835.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="723.6" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.52%)</title><rect x="722.7" y="819.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="725.7" y="830.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.43%)</title><rect x="722.7" y="803.0" width="5.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="725.7" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.09%)</title><rect x="727.8" y="803.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="730.8" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (9 samples, 0.78%)</title><rect x="728.8" y="835.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="731.8" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.09%)</title><rect x="735.9" y="819.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="738.9" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="735.9" y="803.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="738.9" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="735.9" y="787.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="738.9" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="735.9" y="771.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="738.9" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="735.9" y="755.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="738.9" y="766.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="735.9" y="739.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="738.9" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.09%)</title><rect x="736.9" y="819.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="739.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (25 samples, 2.16%)</title><rect x="738.0" y="867.0" width="25.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="741.0" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (25 samples, 2.16%)</title><rect x="738.0" y="851.0" width="25.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="741.0" y="862.0">j..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.43%)</title><rect x="747.1" y="835.0" width="5.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="750.1" y="846.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="748.1" y="819.0" width="4.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="751.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.95%)</title><rect x="752.2" y="835.0" width="11.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="755.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$275/929879032.accept (11 samples, 0.95%)</title><rect x="752.2" y="819.0" width="11.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="755.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (11 samples, 0.95%)</title><rect x="752.2" y="803.0" width="11.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="755.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (11 samples, 0.95%)</title><rect x="752.2" y="787.0" width="11.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="755.2" y="798.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (11 samples, 0.95%)</title><rect x="752.2" y="771.0" width="11.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="755.2" y="782.0"></text>
</g>
<g>
<title>java/time/Duration.create (11 samples, 0.95%)</title><rect x="752.2" y="755.0" width="11.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="755.2" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.52%)</title><rect x="757.3" y="739.0" width="6.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="760.3" y="750.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.43%)</title><rect x="758.3" y="723.0" width="5.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="761.3" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (1 samples, 0.09%)</title><rect x="763.4" y="883.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="766.4" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="763.4" y="867.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="766.4" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/2070784841.get$Lambda (1 samples, 0.09%)</title><rect x="763.4" y="851.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="766.4" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="763.4" y="835.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="766.4" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="763.4" y="819.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="766.4" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="763.4" y="803.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="766.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.86%)</title><rect x="764.4" y="883.0" width="10.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="767.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.86%)</title><rect x="764.4" y="867.0" width="10.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="767.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.78%)</title><rect x="765.4" y="851.0" width="9.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="768.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$275/929879032.accept (9 samples, 0.78%)</title><rect x="765.4" y="835.0" width="9.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="768.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (9 samples, 0.78%)</title><rect x="765.4" y="819.0" width="9.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="768.4" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (9 samples, 0.78%)</title><rect x="765.4" y="803.0" width="9.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="768.4" y="814.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (9 samples, 0.78%)</title><rect x="765.4" y="787.0" width="9.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="768.4" y="798.0"></text>
</g>
<g>
<title>java/time/Duration.create (9 samples, 0.78%)</title><rect x="765.4" y="771.0" width="9.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="768.4" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.35%)</title><rect x="774.6" y="883.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="777.6" y="894.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="774.6" y="867.0" width="4.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="777.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 0.35%)</title><rect x="778.7" y="899.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="781.7" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="778.7" y="883.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="781.7" y="894.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="779.7" y="883.0" width="3.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="782.7" y="894.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="779.7" y="867.0" width="3.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="782.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.35%)</title><rect x="782.8" y="947.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="785.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.35%)</title><rect x="782.8" y="931.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="785.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.35%)</title><rect x="782.8" y="915.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="785.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.35%)</title><rect x="782.8" y="899.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="785.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.09%)</title><rect x="785.8" y="883.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="788.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (210 samples, 18.12%)</title><rect x="786.8" y="947.0" width="213.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="789.8" y="958.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (209 samples, 18.03%)</title><rect x="787.8" y="931.0" width="212.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="790.8" y="942.0">java/util/concurrent/LinkedB..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (175 samples, 15.10%)</title><rect x="809.2" y="915.0" width="178.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="812.2" y="926.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (171 samples, 14.75%)</title><rect x="813.3" y="899.0" width="174.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="816.3" y="910.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (161 samples, 13.89%)</title><rect x="823.5" y="883.0" width="163.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="826.5" y="894.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>Unsafe_Park (150 samples, 12.94%)</title><rect x="827.5" y="867.0" width="152.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="830.5" y="878.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="830.6" y="851.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="833.6" y="862.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.09%)</title><rect x="831.6" y="851.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="834.6" y="862.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (29 samples, 2.50%)</title><rect x="832.6" y="851.0" width="29.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="835.6" y="862.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (13 samples, 1.12%)</title><rect x="839.8" y="835.0" width="13.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="842.8" y="846.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (7 samples, 0.60%)</title><rect x="841.8" y="819.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="844.8" y="830.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (4 samples, 0.35%)</title><rect x="844.9" y="803.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="847.9" y="814.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="848.9" y="819.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="851.9" y="830.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.26%)</title><rect x="849.9" y="819.0" width="3.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="852.9" y="830.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.17%)</title><rect x="853.0" y="835.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="856.0" y="846.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.17%)</title><rect x="855.0" y="835.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="858.0" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.43%)</title><rect x="857.1" y="835.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="860.1" y="846.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="862.2" y="851.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="865.2" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="863.2" y="851.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="866.2" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="864.2" y="851.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="867.2" y="862.0"></text>
</g>
<g>
<title>__lll_lock_wait (10 samples, 0.86%)</title><rect x="865.2" y="851.0" width="10.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="868.2" y="862.0"></text>
</g>
<g>
<title>__lll_unlock_wake (27 samples, 2.33%)</title><rect x="875.4" y="851.0" width="27.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="878.4" y="862.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (49 samples, 4.23%)</title><rect x="902.9" y="851.0" width="49.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="905.9" y="862.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.43%)</title><rect x="952.8" y="851.0" width="5.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="955.8" y="862.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.17%)</title><rect x="957.9" y="851.0" width="2.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="960.9" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.35%)</title><rect x="959.9" y="851.0" width="4.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="962.9" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.17%)</title><rect x="964.0" y="851.0" width="2.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="967.0" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.52%)</title><rect x="966.0" y="851.0" width="6.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="969.0" y="862.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.35%)</title><rect x="972.1" y="851.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="975.1" y="862.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.26%)</title><rect x="976.2" y="851.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="979.2" y="862.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="979.2" y="851.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="982.2" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.26%)</title><rect x="980.3" y="867.0" width="3.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="983.3" y="878.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.35%)</title><rect x="983.3" y="867.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="986.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 1.12%)</title><rect x="987.4" y="915.0" width="13.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="990.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 1.12%)</title><rect x="987.4" y="899.0" width="13.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="990.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 1.12%)</title><rect x="987.4" y="883.0" width="13.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="990.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 1.12%)</title><rect x="987.4" y="867.0" width="13.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="990.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.17%)</title><rect x="1000.6" y="995.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1003.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.09%)</title><rect x="1000.6" y="979.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1003.6" y="990.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.09%)</title><rect x="1000.6" y="963.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1003.6" y="974.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.09%)</title><rect x="1000.6" y="947.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1003.6" y="958.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.09%)</title><rect x="1000.6" y="931.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1003.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1001.6" y="979.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1004.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1001.6" y="963.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1004.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="1001.6" y="947.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1004.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="1001.6" y="931.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1004.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="1001.6" y="915.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1004.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="1001.6" y="899.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1004.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="1001.6" y="883.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1004.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="1001.6" y="867.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1004.6" y="878.0"></text>
</g>
<g>
<title>start_thread (184 samples, 15.88%)</title><rect x="1002.7" y="995.0" width="187.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1005.7" y="1006.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (184 samples, 15.88%)</title><rect x="1002.7" y="979.0" width="187.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1005.7" y="990.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (35 samples, 3.02%)</title><rect x="1002.7" y="963.0" width="35.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1005.7" y="974.0">Gan..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (11 samples, 0.95%)</title><rect x="1002.7" y="947.0" width="11.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1005.7" y="958.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 0.95%)</title><rect x="1002.7" y="931.0" width="11.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1005.7" y="942.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (4 samples, 0.35%)</title><rect x="1002.7" y="915.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1005.7" y="926.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.52%)</title><rect x="1006.7" y="915.0" width="6.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1009.7" y="926.0"></text>
</g>
<g>
<title>__sched_yield (1 samples, 0.09%)</title><rect x="1012.8" y="915.0" width="1.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1015.8" y="926.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (24 samples, 2.07%)</title><rect x="1013.9" y="947.0" width="24.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1016.9" y="958.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 0.86%)</title><rect x="1013.9" y="931.0" width="10.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1016.9" y="942.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.09%)</title><rect x="1013.9" y="915.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1016.9" y="926.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1013.9" y="899.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1016.9" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.09%)</title><rect x="1013.9" y="883.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1016.9" y="894.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.09%)</title><rect x="1014.9" y="915.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1017.9" y="926.0"></text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.09%)</title><rect x="1014.9" y="899.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1017.9" y="910.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.26%)</title><rect x="1015.9" y="915.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1018.9" y="926.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.43%)</title><rect x="1019.0" y="915.0" width="5.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1022.0" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (9 samples, 0.78%)</title><rect x="1024.0" y="931.0" width="9.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1027.0" y="942.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.35%)</title><rect x="1025.1" y="915.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1028.1" y="926.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.17%)</title><rect x="1025.1" y="899.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1028.1" y="910.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.17%)</title><rect x="1025.1" y="883.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1028.1" y="894.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1025.1" y="867.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1028.1" y="878.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1026.1" y="867.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1029.1" y="878.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.17%)</title><rect x="1027.1" y="899.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1030.1" y="910.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.17%)</title><rect x="1027.1" y="883.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1030.1" y="894.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1028.1" y="867.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1031.1" y="878.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1028.1" y="851.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1031.1" y="862.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.09%)</title><rect x="1028.1" y="835.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1031.1" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.35%)</title><rect x="1029.1" y="915.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1032.1" y="926.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.35%)</title><rect x="1029.1" y="899.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1032.1" y="910.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.43%)</title><rect x="1033.2" y="931.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.2" y="942.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.43%)</title><rect x="1033.2" y="915.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.2" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.35%)</title><rect x="1033.2" y="899.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1036.2" y="910.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.35%)</title><rect x="1033.2" y="883.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1036.2" y="894.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.35%)</title><rect x="1033.2" y="867.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1036.2" y="878.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.35%)</title><rect x="1033.2" y="851.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1036.2" y="862.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.17%)</title><rect x="1035.2" y="835.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1038.2" y="846.0"></text>
</g>
<g>
<title>G1BlockOffsetArray::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.09%)</title><rect x="1035.2" y="819.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1038.2" y="830.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.09%)</title><rect x="1036.3" y="819.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1039.3" y="830.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1036.3" y="803.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1039.3" y="814.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1036.3" y="787.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1039.3" y="798.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="1037.3" y="899.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1040.3" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::start_cset_region_for_worker(unsigned int) (1 samples, 0.09%)</title><rect x="1037.3" y="883.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1040.3" y="894.0"></text>
</g>
<g>
<title>JavaThread::run() (145 samples, 12.51%)</title><rect x="1038.3" y="963.0" width="147.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1041.3" y="974.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (145 samples, 12.51%)</title><rect x="1038.3" y="947.0" width="147.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1041.3" y="958.0">JavaThread::thread_..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (144 samples, 12.42%)</title><rect x="1038.3" y="931.0" width="146.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1041.3" y="942.0">CompileBroker::com..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (142 samples, 12.25%)</title><rect x="1038.3" y="915.0" width="144.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1041.3" y="926.0">CompileBroker::inv..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (142 samples, 12.25%)</title><rect x="1038.3" y="899.0" width="144.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1041.3" y="910.0">C2Compiler::compil..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (142 samples, 12.25%)</title><rect x="1038.3" y="883.0" width="144.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1041.3" y="894.0">Compile::Compile(c..</text>
</g>
<g>
<title>Compile::Code_Gen() (86 samples, 7.42%)</title><rect x="1038.3" y="867.0" width="87.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1041.3" y="878.0">Compile::C..</text>
</g>
<g>
<title>Compile::Output() (5 samples, 0.43%)</title><rect x="1038.3" y="851.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1041.3" y="862.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.26%)</title><rect x="1038.3" y="835.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1041.3" y="846.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.17%)</title><rect x="1041.4" y="835.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1044.4" y="846.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.09%)</title><rect x="1042.4" y="819.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1045.4" y="830.0"></text>
</g>
<g>
<title>jmpConNode::short_branch_version(Compile*) (1 samples, 0.09%)</title><rect x="1042.4" y="803.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1045.4" y="814.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="1042.4" y="787.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1045.4" y="798.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.09%)</title><rect x="1043.4" y="851.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1046.4" y="862.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.09%)</title><rect x="1043.4" y="835.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1046.4" y="846.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="1043.4" y="819.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1046.4" y="830.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1043.4" y="803.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1046.4" y="814.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.09%)</title><rect x="1044.4" y="851.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1047.4" y="862.0"></text>
</g>
<g>
<title>Matcher::match() (8 samples, 0.69%)</title><rect x="1045.4" y="851.0" width="8.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1048.4" y="862.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.09%)</title><rect x="1045.4" y="835.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1048.4" y="846.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.60%)</title><rect x="1046.4" y="835.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1049.4" y="846.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="1047.5" y="819.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1050.5" y="830.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.09%)</title><rect x="1048.5" y="819.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1051.5" y="830.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1048.5" y="803.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1051.5" y="814.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1048.5" y="787.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1051.5" y="798.0"></text>
</g>
<g>
<title>MachReturnNode::MachReturnNode() (1 samples, 0.09%)</title><rect x="1048.5" y="771.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1051.5" y="782.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1049.5" y="819.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1052.5" y="830.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.09%)</title><rect x="1049.5" y="803.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1052.5" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="1049.5" y="787.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1052.5" y="798.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (2 samples, 0.17%)</title><rect x="1050.5" y="819.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1053.5" y="830.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.17%)</title><rect x="1050.5" y="803.0" width="2.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1053.5" y="814.0"></text>
</g>
<g>
<title>SafePointNode::jvms() const (1 samples, 0.09%)</title><rect x="1052.6" y="819.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1055.6" y="830.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.09%)</title><rect x="1053.6" y="851.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1056.6" y="862.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.09%)</title><rect x="1053.6" y="835.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1056.6" y="846.0"></text>
</g>
<g>
<title>Block::succ_fall_through(unsigned int) (1 samples, 0.09%)</title><rect x="1053.6" y="819.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1056.6" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.43%)</title><rect x="1054.6" y="851.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1057.6" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.09%)</title><rect x="1054.6" y="835.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1057.6" y="846.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.09%)</title><rect x="1054.6" y="819.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1057.6" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.35%)</title><rect x="1055.6" y="835.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1058.6" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 0.26%)</title><rect x="1055.6" y="819.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1058.6" y="830.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.17%)</title><rect x="1055.6" y="803.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1058.6" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.09%)</title><rect x="1057.6" y="803.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1060.6" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1058.7" y="819.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1061.7" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.09%)</title><rect x="1059.7" y="851.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1062.7" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::PhaseChaitin(unsigned int, PhaseCFG&amp;, Matcher&amp;) (1 samples, 0.09%)</title><rect x="1060.7" y="851.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1063.7" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (62 samples, 5.35%)</title><rect x="1061.7" y="851.0" width="63.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1064.7" y="862.0">PhaseCh..</text>
</g>
<g>
<title>JVMState::debug_end() const (1 samples, 0.09%)</title><rect x="1063.8" y="835.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1066.8" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.17%)</title><rect x="1064.8" y="835.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1067.8" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1064.8" y="819.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1067.8" y="830.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.09%)</title><rect x="1065.8" y="819.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1068.8" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.26%)</title><rect x="1066.8" y="835.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1069.8" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1066.8" y="819.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1069.8" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.17%)</title><rect x="1067.8" y="819.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1070.8" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1068.8" y="803.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1071.8" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 0.69%)</title><rect x="1069.9" y="835.0" width="8.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1072.9" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (13 samples, 1.12%)</title><rect x="1078.0" y="835.0" width="13.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1081.0" y="846.0"></text>
</g>
<g>
<title>MachIdealNode::rule() const (1 samples, 0.09%)</title><rect x="1081.1" y="819.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1084.1" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 0.52%)</title><rect x="1082.1" y="819.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1085.1" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1087.2" y="803.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1090.2" y="814.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.17%)</title><rect x="1088.2" y="819.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1091.2" y="830.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.09%)</title><rect x="1090.2" y="819.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.2" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.09%)</title><rect x="1091.2" y="835.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1094.2" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.60%)</title><rect x="1092.3" y="835.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1095.3" y="846.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.09%)</title><rect x="1096.3" y="819.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1099.3" y="830.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1097.4" y="819.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1100.4" y="830.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.09%)</title><rect x="1098.4" y="819.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1101.4" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.26%)</title><rect x="1099.4" y="835.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1102.4" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.17%)</title><rect x="1100.4" y="819.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1103.4" y="830.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 0.35%)</title><rect x="1102.4" y="835.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1105.4" y="846.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1102.4" y="819.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1105.4" y="830.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.09%)</title><rect x="1102.4" y="803.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1105.4" y="814.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 0.26%)</title><rect x="1103.5" y="819.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.5" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.09%)</title><rect x="1103.5" y="803.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.5" y="814.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.17%)</title><rect x="1104.5" y="803.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1107.5" y="814.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.09%)</title><rect x="1104.5" y="787.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1107.5" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1104.5" y="771.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.5" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.09%)</title><rect x="1105.5" y="787.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.5" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (5 samples, 0.43%)</title><rect x="1106.5" y="835.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.5" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.26%)</title><rect x="1108.6" y="819.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.6" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.26%)</title><rect x="1111.6" y="835.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1114.6" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1112.6" y="819.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1115.6" y="830.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (9 samples, 0.78%)</title><rect x="1114.7" y="835.0" width="9.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.7" y="846.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.09%)</title><rect x="1116.7" y="819.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1119.7" y="830.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (5 samples, 0.43%)</title><rect x="1117.7" y="819.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1120.7" y="830.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.17%)</title><rect x="1119.7" y="803.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.7" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1121.8" y="803.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.8" y="814.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.09%)</title><rect x="1122.8" y="819.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.8" y="830.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1122.8" y="803.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1125.8" y="814.0"></text>
</g>
<g>
<title>PhiNode::in_RegMask(unsigned int) const (1 samples, 0.09%)</title><rect x="1123.8" y="835.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.8" y="846.0"></text>
</g>
<g>
<title>RegionNode::out_RegMask() const (1 samples, 0.09%)</title><rect x="1124.8" y="851.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.8" y="862.0"></text>
</g>
<g>
<title>Compile::Optimize() (42 samples, 3.62%)</title><rect x="1125.9" y="867.0" width="42.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.9" y="878.0">Comp..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="1125.9" y="851.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.9" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1126.9" y="851.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.9" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.09%)</title><rect x="1126.9" y="835.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.9" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1126.9" y="819.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.9" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.09%)</title><rect x="1126.9" y="803.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.9" y="814.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.17%)</title><rect x="1127.9" y="851.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.9" y="862.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.17%)</title><rect x="1127.9" y="835.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.9" y="846.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (2 samples, 0.17%)</title><rect x="1127.9" y="819.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.9" y="830.0"></text>
</g>
<g>
<title>MemNode::Ideal_common_DU_postCCP(PhaseCCP*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1128.9" y="803.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.9" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (25 samples, 2.16%)</title><rect x="1129.9" y="851.0" width="25.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.9" y="862.0">P..</text>
</g>
<g>
<title>HaltNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1129.9" y="835.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.9" y="846.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1130.9" y="835.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.9" y="846.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1130.9" y="819.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.9" y="830.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1130.9" y="803.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1133.9" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1130.9" y="787.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.9" y="798.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.09%)</title><rect x="1130.9" y="771.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1133.9" y="782.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1130.9" y="755.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1133.9" y="766.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1130.9" y="739.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.9" y="750.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1132.0" y="835.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.0" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.43%)</title><rect x="1133.0" y="835.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.0" y="846.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.17%)</title><rect x="1136.0" y="819.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1139.0" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.43%)</title><rect x="1138.1" y="835.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.1" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1142.1" y="819.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.1" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (11 samples, 0.95%)</title><rect x="1143.2" y="835.0" width="11.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.2" y="846.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1144.2" y="819.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.2" y="830.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1144.2" y="803.0" width="1.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1147.2" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (9 samples, 0.78%)</title><rect x="1145.2" y="819.0" width="9.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.2" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (8 samples, 0.69%)</title><rect x="1146.2" y="803.0" width="8.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.2" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.17%)</title><rect x="1151.3" y="787.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.3" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.17%)</title><rect x="1151.3" y="771.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.3" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1152.3" y="755.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.3" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1153.3" y="787.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.3" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1153.3" y="771.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.3" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.09%)</title><rect x="1154.4" y="835.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.4" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (10 samples, 0.86%)</title><rect x="1155.4" y="851.0" width="10.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.4" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (10 samples, 0.86%)</title><rect x="1155.4" y="835.0" width="10.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.4" y="846.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.09%)</title><rect x="1157.4" y="819.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.4" y="830.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1158.4" y="819.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.4" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.17%)</title><rect x="1159.5" y="819.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.5" y="830.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.17%)</title><rect x="1159.5" y="803.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.5" y="814.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1160.5" y="787.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.5" y="798.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1161.5" y="819.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.5" y="830.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.09%)</title><rect x="1161.5" y="803.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.5" y="814.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1162.5" y="819.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.5" y="830.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1162.5" y="803.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.5" y="814.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.09%)</title><rect x="1163.5" y="787.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.5" y="798.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1163.5" y="771.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.5" y="782.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1163.5" y="755.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.5" y="766.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1164.5" y="819.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.5" y="830.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1164.5" y="803.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.5" y="814.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1164.5" y="787.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.5" y="798.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.09%)</title><rect x="1164.5" y="771.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.5" y="782.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1164.5" y="755.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.5" y="766.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1164.5" y="739.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1167.5" y="750.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.17%)</title><rect x="1165.6" y="851.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.6" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.17%)</title><rect x="1165.6" y="835.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.6" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.17%)</title><rect x="1165.6" y="819.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.6" y="830.0"></text>
</g>
<g>
<title>AndLNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1165.6" y="803.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.6" y="814.0"></text>
</g>
<g>
<title>MulNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1165.6" y="787.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.6" y="798.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.09%)</title><rect x="1165.6" y="771.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.6" y="782.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1165.6" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.6" y="766.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1165.6" y="739.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.6" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1165.6" y="723.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.6" y="734.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1165.6" y="707.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.6" y="718.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1166.6" y="803.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.6" y="814.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1166.6" y="787.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.6" y="798.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.09%)</title><rect x="1166.6" y="771.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.6" y="782.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1167.6" y="851.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1170.6" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 1.04%)</title><rect x="1168.6" y="867.0" width="12.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.6" y="878.0"></text>
</g>
<g>
<title>Dependencies::assert_evol_method(ciMethod*) (1 samples, 0.09%)</title><rect x="1168.6" y="851.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.6" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.95%)</title><rect x="1169.6" y="851.0" width="11.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.95%)</title><rect x="1169.6" y="835.0" width="11.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.95%)</title><rect x="1169.6" y="819.0" width="11.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.95%)</title><rect x="1169.6" y="803.0" width="11.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.95%)</title><rect x="1169.6" y="787.0" width="11.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.6" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.78%)</title><rect x="1169.6" y="771.0" width="9.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.6" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.69%)</title><rect x="1169.6" y="755.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.69%)</title><rect x="1169.6" y="739.0" width="8.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.69%)</title><rect x="1169.6" y="723.0" width="8.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.69%)</title><rect x="1169.6" y="707.0" width="8.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.69%)</title><rect x="1169.6" y="691.0" width="8.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.6" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.60%)</title><rect x="1169.6" y="675.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.6" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.60%)</title><rect x="1169.6" y="659.0" width="7.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.60%)</title><rect x="1169.6" y="643.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.60%)</title><rect x="1169.6" y="627.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.60%)</title><rect x="1169.6" y="611.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.60%)</title><rect x="1169.6" y="595.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.6" y="606.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.09%)</title><rect x="1169.6" y="579.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.6" y="590.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1169.6" y="563.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.6" y="574.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1169.6" y="547.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.6" y="558.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.09%)</title><rect x="1169.6" y="531.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.6" y="542.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet_speculative(TypeOopPtr const*) const (1 samples, 0.09%)</title><rect x="1169.6" y="515.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.6" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.43%)</title><rect x="1170.7" y="579.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.7" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.43%)</title><rect x="1170.7" y="563.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.43%)</title><rect x="1170.7" y="547.0" width="5.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1171.7" y="531.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1171.7" y="515.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1171.7" y="499.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.7" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1171.7" y="483.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.7" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1171.7" y="467.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1171.7" y="451.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1171.7" y="435.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1171.7" y="419.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1171.7" y="403.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.7" y="414.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1171.7" y="387.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.7" y="398.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_string_equals() (1 samples, 0.09%)</title><rect x="1171.7" y="371.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.7" y="382.0"></text>
</g>
<g>
<title>BoolNode::BoolNode(Node*, BoolTest::mask) (1 samples, 0.09%)</title><rect x="1171.7" y="355.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.7" y="366.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1171.7" y="339.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.7" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1172.7" y="387.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.7" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1172.7" y="371.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1172.7" y="355.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1172.7" y="339.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1172.7" y="323.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1172.7" y="307.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.7" y="318.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.09%)</title><rect x="1172.7" y="291.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.7" y="302.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.09%)</title><rect x="1172.7" y="275.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.7" y="286.0"></text>
</g>
<g>
<title>TypeTuple::make_range(ciSignature*) (1 samples, 0.09%)</title><rect x="1172.7" y="259.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1173.7" y="403.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1173.7" y="387.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.7" y="398.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1173.7" y="371.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.7" y="382.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.09%)</title><rect x="1173.7" y="355.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.7" y="366.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.09%)</title><rect x="1173.7" y="339.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.09%)</title><rect x="1174.7" y="499.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.7" y="510.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.09%)</title><rect x="1174.7" y="483.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.7" y="494.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.09%)</title><rect x="1174.7" y="467.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.7" y="478.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1174.7" y="451.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.7" y="462.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1174.7" y="435.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.7" y="446.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1174.7" y="419.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.7" y="430.0"></text>
</g>
<g>
<title>CatchProjNode::hash() const (1 samples, 0.09%)</title><rect x="1174.7" y="403.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.7" y="414.0"></text>
</g>
<g>
<title>CatchProjNode::Opcode() const (1 samples, 0.09%)</title><rect x="1174.7" y="387.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.7" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1175.7" y="579.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.7" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1175.7" y="563.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.7" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1175.7" y="547.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1175.7" y="531.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1175.7" y="515.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1175.7" y="499.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1175.7" y="483.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.7" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1175.7" y="467.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.7" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1175.7" y="451.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1175.7" y="435.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1175.7" y="419.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1175.7" y="403.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1175.7" y="387.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.7" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1175.7" y="371.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.7" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1175.7" y="355.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1175.7" y="339.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1175.7" y="323.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1175.7" y="307.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.7" y="318.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1175.7" y="291.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.7" y="302.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1175.7" y="275.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.7" y="286.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.09%)</title><rect x="1175.7" y="259.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.7" y="270.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.09%)</title><rect x="1175.7" y="243.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.7" y="254.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.09%)</title><rect x="1175.7" y="227.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.7" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1176.8" y="675.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.8" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1176.8" y="659.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.8" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1176.8" y="643.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1176.8" y="627.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1176.8" y="611.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1176.8" y="595.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1176.8" y="579.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.8" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1176.8" y="563.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.8" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1176.8" y="547.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1176.8" y="531.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1176.8" y="515.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1176.8" y="499.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1176.8" y="483.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.8" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1176.8" y="467.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.8" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1176.8" y="451.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1176.8" y="435.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1176.8" y="419.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1176.8" y="403.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1176.8" y="387.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.8" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1176.8" y="371.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1176.8" y="355.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1176.8" y="339.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1176.8" y="323.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1176.8" y="307.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1176.8" y="291.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1176.8" y="275.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.8" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1176.8" y="259.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1176.8" y="243.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1176.8" y="227.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1176.8" y="211.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1176.8" y="195.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1176.8" y="179.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.8" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1176.8" y="163.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.8" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1176.8" y="147.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1176.8" y="131.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1176.8" y="115.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1176.8" y="99.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.8" y="110.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1176.8" y="83.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.8" y="94.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1176.8" y="67.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.8" y="78.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1176.8" y="51.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.8" y="62.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.09%)</title><rect x="1176.8" y="35.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.8" y="46.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.8" y="755.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.8" y="766.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1178.8" y="771.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.8" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1178.8" y="755.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.8" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1178.8" y="739.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1178.8" y="723.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1178.8" y="707.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1178.8" y="691.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1178.8" y="675.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1178.8" y="659.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.8" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1178.8" y="643.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1178.8" y="627.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1178.8" y="611.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1178.8" y="595.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1178.8" y="579.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="590.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1178.8" y="563.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.8" y="574.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.09%)</title><rect x="1178.8" y="547.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="558.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1178.8" y="531.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.8" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1178.8" y="515.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="526.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1178.8" y="499.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="510.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.09%)</title><rect x="1178.8" y="483.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="494.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.09%)</title><rect x="1178.8" y="467.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="478.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol*) (1 samples, 0.09%)</title><rect x="1178.8" y="451.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.8" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.8" y="563.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.8" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.8" y="547.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.8" y="531.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.8" y="515.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.8" y="499.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.8" y="483.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.8" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.8" y="467.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.8" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.8" y="451.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.8" y="435.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.8" y="419.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.09%)</title><rect x="1179.8" y="403.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.8" y="414.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.09%)</title><rect x="1179.8" y="387.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.8" y="398.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.09%)</title><rect x="1179.8" y="371.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.8" y="382.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.09%)</title><rect x="1179.8" y="355.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.8" y="366.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.09%)</title><rect x="1179.8" y="339.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.8" y="350.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.17%)</title><rect x="1180.8" y="867.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.8" y="878.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.17%)</title><rect x="1180.8" y="851.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="862.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.17%)</title><rect x="1182.9" y="915.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.9" y="926.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.17%)</title><rect x="1182.9" y="899.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.9" y="910.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.17%)</title><rect x="1182.9" y="883.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.9" y="894.0"></text>
</g>
<g>
<title>CodeHeap::next_free(HeapBlock*) const (1 samples, 0.09%)</title><rect x="1182.9" y="867.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="878.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.09%)</title><rect x="1183.9" y="867.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.9" y="878.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.09%)</title><rect x="1183.9" y="851.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.9" y="862.0"></text>
</g>
<g>
<title>NativeCall::destination() const (1 samples, 0.09%)</title><rect x="1183.9" y="835.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.9" y="846.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.09%)</title><rect x="1184.9" y="931.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.9" y="942.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.09%)</title><rect x="1184.9" y="915.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.9" y="926.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.09%)</title><rect x="1184.9" y="899.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.9" y="910.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.09%)</title><rect x="1184.9" y="883.0" width="1.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1187.9" y="894.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.26%)</title><rect x="1185.9" y="963.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.9" y="974.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.26%)</title><rect x="1185.9" y="947.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.9" y="958.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.17%)</title><rect x="1185.9" y="931.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.9" y="942.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1188.0" y="931.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.0" y="942.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1188.0" y="915.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.0" y="926.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1188.0" y="899.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.0" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1188.0" y="883.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.0" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1188.0" y="867.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.0" y="878.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.09%)</title><rect x="1188.0" y="851.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.0" y="862.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked() (1 samples, 0.09%)</title><rect x="1188.0" y="835.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.0" y="846.0"></text>
</g>
<g>
<title>OtherRegionsTable::clear() (1 samples, 0.09%)</title><rect x="1188.0" y="819.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.0" y="830.0"></text>
</g>
<g>
<title>SparsePRT::clear() (1 samples, 0.09%)</title><rect x="1188.0" y="803.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.0" y="814.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1188.0" y="787.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1191.0" y="798.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.09%)</title><rect x="1189.0" y="963.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="974.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.09%)</title><rect x="1189.0" y="947.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="958.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.09%)</title><rect x="1189.0" y="931.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.0" y="942.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.09%)</title><rect x="1189.0" y="915.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.0" y="926.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.09%)</title><rect x="1189.0" y="899.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.0" y="910.0"></text>
</g>
</g>
</svg>
