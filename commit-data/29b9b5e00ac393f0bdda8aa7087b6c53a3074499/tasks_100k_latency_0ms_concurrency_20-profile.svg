<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1205"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1205"> </text>
<g id="frames">
<g>
<title>all (491 samples, 100.00%)</title><rect x="10.0" y="1171.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1182.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (221 samples, 45.01%)</title><rect x="10.0" y="1155.0" width="531.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessorSubscription.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.20%)</title><rect x="12.4" y="1139.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.4" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.20%)</title><rect x="12.4" y="1123.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="15.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.20%)</title><rect x="12.4" y="1107.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.20%)</title><rect x="12.4" y="1091.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.20%)</title><rect x="12.4" y="1075.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.20%)</title><rect x="12.4" y="1059.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.20%)</title><rect x="12.4" y="1043.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.20%)</title><rect x="12.4" y="1027.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.20%)</title><rect x="12.4" y="1011.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.20%)</title><rect x="12.4" y="995.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.20%)</title><rect x="12.4" y="979.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="15.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.20%)</title><rect x="12.4" y="963.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.20%)</title><rect x="12.4" y="947.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.20%)</title><rect x="12.4" y="931.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.20%)</title><rect x="12.4" y="915.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.20%)</title><rect x="12.4" y="899.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.20%)</title><rect x="12.4" y="883.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.20%)</title><rect x="12.4" y="867.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getFieldOrDefault (1 samples, 0.20%)</title><rect x="12.4" y="851.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$11.isNullable (1 samples, 0.20%)</title><rect x="12.4" y="835.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.4" y="846.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.20%)</title><rect x="12.4" y="819.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="15.4" y="830.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.20%)</title><rect x="12.4" y="803.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="15.4" y="814.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.20%)</title><rect x="12.4" y="787.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="15.4" y="798.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.20%)</title><rect x="12.4" y="771.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.4" y="782.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.20%)</title><rect x="12.4" y="755.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="15.4" y="766.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.20%)</title><rect x="12.4" y="739.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="15.4" y="750.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.20%)</title><rect x="12.4" y="723.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="15.4" y="734.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.20%)</title><rect x="12.4" y="707.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.4" y="718.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (1 samples, 0.20%)</title><rect x="12.4" y="691.0" width="2.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="15.4" y="702.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (1 samples, 0.20%)</title><rect x="12.4" y="675.0" width="2.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="15.4" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (219 samples, 44.60%)</title><rect x="14.8" y="1139.0" width="526.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.8" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.20%)</title><rect x="14.8" y="1123.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="17.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.20%)</title><rect x="14.8" y="1107.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.8" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.20%)</title><rect x="14.8" y="1091.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="17.8" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.20%)</title><rect x="14.8" y="1075.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.8" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.20%)</title><rect x="14.8" y="1059.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.8" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.20%)</title><rect x="14.8" y="1043.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.8" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.20%)</title><rect x="14.8" y="1027.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.8" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.20%)</title><rect x="14.8" y="1011.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.8" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.20%)</title><rect x="14.8" y="995.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.8" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.20%)</title><rect x="14.8" y="979.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.8" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.20%)</title><rect x="14.8" y="963.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.8" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/1392360847.get (1 samples, 0.20%)</title><rect x="14.8" y="947.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.8" y="958.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (204 samples, 41.55%)</title><rect x="17.2" y="1123.0" width="490.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.2" y="1134.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/464908022.accept (204 samples, 41.55%)</title><rect x="17.2" y="1107.0" width="490.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.2" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (204 samples, 41.55%)</title><rect x="17.2" y="1091.0" width="490.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.2" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (197 samples, 40.12%)</title><rect x="24.4" y="1075.0" width="473.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.4" y="1086.0">com/linecorp/decaton/processor/runtime/PartitionContext.addRequest</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (197 samples, 40.12%)</title><rect x="24.4" y="1059.0" width="473.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="27.4" y="1070.0">com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (197 samples, 40.12%)</title><rect x="24.4" y="1043.0" width="473.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="27.4" y="1054.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (197 samples, 40.12%)</title><rect x="24.4" y="1027.0" width="473.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.4" y="1038.0">java/util/concurrent/Executors$DelegatedExecutorService.execute</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (194 samples, 39.51%)</title><rect x="31.6" y="1011.0" width="466.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="34.6" y="1022.0">java/util/concurrent/ThreadPoolExecutor.execute</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (193 samples, 39.31%)</title><rect x="34.0" y="995.0" width="463.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="37.0" y="1006.0">java/util/concurrent/LinkedBlockingQueue.offer</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (189 samples, 38.49%)</title><rect x="43.6" y="979.0" width="454.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="46.6" y="990.0">java/util/concurrent/LinkedBlockingQueue.signalNotEmpty</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (189 samples, 38.49%)</title><rect x="43.6" y="963.0" width="454.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="46.6" y="974.0">java/util/concurrent/locks/ReentrantLock.unlock</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (189 samples, 38.49%)</title><rect x="43.6" y="947.0" width="454.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="46.6" y="958.0">java/util/concurrent/locks/AbstractQueuedSynchronizer.release</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (189 samples, 38.49%)</title><rect x="43.6" y="931.0" width="454.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="46.6" y="942.0">java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSu..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (189 samples, 38.49%)</title><rect x="43.6" y="915.0" width="454.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="46.6" y="926.0">java/util/concurrent/locks/LockSupport.unpark</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (187 samples, 38.09%)</title><rect x="48.5" y="899.0" width="449.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="51.5" y="910.0">sun/misc/Unsafe.unpark</text>
</g>
<g>
<title>Unsafe_Unpark (180 samples, 36.66%)</title><rect x="65.3" y="883.0" width="432.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="68.3" y="894.0">Unsafe_Unpark</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.20%)</title><rect x="67.7" y="867.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="70.7" y="878.0"></text>
</g>
<g>
<title>Parker::unpark() (81 samples, 16.50%)</title><rect x="70.1" y="867.0" width="194.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="73.1" y="878.0">Parker::unpark()</text>
</g>
<g>
<title>__psynch_cvsignal (80 samples, 16.29%)</title><rect x="72.5" y="851.0" width="192.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="75.5" y="862.0">__psynch_cvsignal</text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.20%)</title><rect x="264.7" y="867.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="267.7" y="878.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.20%)</title><rect x="264.7" y="851.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="267.7" y="862.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.20%)</title><rect x="264.7" y="835.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="267.7" y="846.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.20%)</title><rect x="264.7" y="819.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="267.7" y="830.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.20%)</title><rect x="264.7" y="803.0" width="2.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="267.7" y="814.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.20%)</title><rect x="264.7" y="787.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="267.7" y="798.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.20%)</title><rect x="264.7" y="771.0" width="2.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="267.7" y="782.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (94 samples, 19.14%)</title><rect x="267.1" y="867.0" width="226.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="270.1" y="878.0">_pthread_mutex_firstfit_unlock..</text>
</g>
<g>
<title>__psynch_mutexdrop (92 samples, 18.74%)</title><rect x="269.6" y="851.0" width="221.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="272.6" y="862.0">__psynch_mutexdrop</text>
</g>
<g>
<title>pthread_dependency_wait_np (1 samples, 0.20%)</title><rect x="490.7" y="851.0" width="2.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="493.7" y="862.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.41%)</title><rect x="493.1" y="867.0" width="4.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="496.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.20%)</title><rect x="497.9" y="1075.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="500.9" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.20%)</title><rect x="497.9" y="1059.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="500.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.20%)</title><rect x="497.9" y="1043.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="500.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 0.61%)</title><rect x="500.3" y="1075.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="503.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.20%)</title><rect x="500.3" y="1059.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="503.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.41%)</title><rect x="502.7" y="1059.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="505.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.20%)</title><rect x="505.1" y="1043.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="508.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.20%)</title><rect x="505.1" y="1027.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="508.1" y="1038.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.20%)</title><rect x="505.1" y="1011.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="508.1" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.20%)</title><rect x="505.1" y="995.0" width="2.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="508.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 2.85%)</title><rect x="507.5" y="1123.0" width="33.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="510.5" y="1134.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 2.85%)</title><rect x="507.5" y="1107.0" width="33.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="510.5" y="1118.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 1.83%)</title><rect x="507.5" y="1091.0" width="21.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="510.5" y="1102.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.20%)</title><rect x="507.5" y="1075.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="510.5" y="1086.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (1 samples, 0.20%)</title><rect x="507.5" y="1059.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="510.5" y="1070.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.20%)</title><rect x="507.5" y="1043.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="510.5" y="1054.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.20%)</title><rect x="507.5" y="1027.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="510.5" y="1038.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.20%)</title><rect x="507.5" y="1011.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="510.5" y="1022.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.20%)</title><rect x="507.5" y="995.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="510.5" y="1006.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.20%)</title><rect x="507.5" y="979.0" width="2.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="510.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.61%)</title><rect x="509.9" y="1075.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="512.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.61%)</title><rect x="509.9" y="1059.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="512.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.61%)</title><rect x="509.9" y="1043.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="512.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.20%)</title><rect x="509.9" y="1027.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="512.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.20%)</title><rect x="509.9" y="1011.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="512.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.20%)</title><rect x="509.9" y="995.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="512.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.20%)</title><rect x="509.9" y="979.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="512.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.20%)</title><rect x="509.9" y="963.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="512.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.20%)</title><rect x="509.9" y="947.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="512.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.20%)</title><rect x="509.9" y="931.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="512.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.20%)</title><rect x="509.9" y="915.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="512.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.20%)</title><rect x="509.9" y="899.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="512.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.20%)</title><rect x="509.9" y="883.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="512.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$16.read (1 samples, 0.20%)</title><rect x="509.9" y="867.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="512.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$16.read (1 samples, 0.20%)</title><rect x="509.9" y="851.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="512.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords.readableRecords (1 samples, 0.20%)</title><rect x="509.9" y="835.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="512.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.20%)</title><rect x="512.3" y="1027.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="515.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.20%)</title><rect x="512.3" y="1011.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="515.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.20%)</title><rect x="514.7" y="1027.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="517.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.20%)</title><rect x="514.7" y="1011.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="517.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.20%)</title><rect x="514.7" y="995.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="517.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.20%)</title><rect x="514.7" y="979.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="517.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.20%)</title><rect x="514.7" y="963.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="517.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.20%)</title><rect x="514.7" y="947.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="517.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.20%)</title><rect x="514.7" y="931.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="517.7" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.20%)</title><rect x="514.7" y="915.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="517.7" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.20%)</title><rect x="514.7" y="899.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="517.7" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.20%)</title><rect x="514.7" y="883.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="517.7" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.20%)</title><rect x="514.7" y="867.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="517.7" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.20%)</title><rect x="514.7" y="851.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="517.7" y="862.0"></text>
</g>
<g>
<title>read (1 samples, 0.20%)</title><rect x="514.7" y="835.0" width="2.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="517.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.02%)</title><rect x="517.1" y="1075.0" width="12.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="520.1" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.20%)</title><rect x="517.1" y="1059.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="520.1" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.20%)</title><rect x="517.1" y="1043.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="520.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.20%)</title><rect x="519.5" y="1059.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="522.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 0.61%)</title><rect x="521.9" y="1059.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="524.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.41%)</title><rect x="521.9" y="1043.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="524.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.41%)</title><rect x="521.9" y="1027.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="524.9" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.20%)</title><rect x="521.9" y="1011.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="524.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.20%)</title><rect x="521.9" y="995.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="524.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.20%)</title><rect x="524.3" y="1011.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="527.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.20%)</title><rect x="524.3" y="995.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="527.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.20%)</title><rect x="524.3" y="979.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="527.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.20%)</title><rect x="524.3" y="963.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="527.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.20%)</title><rect x="524.3" y="947.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="527.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.20%)</title><rect x="524.3" y="931.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="527.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.20%)</title><rect x="524.3" y="915.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="527.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.20%)</title><rect x="524.3" y="899.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="527.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.20%)</title><rect x="526.7" y="1043.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="529.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.20%)</title><rect x="526.7" y="1027.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="529.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.20%)</title><rect x="526.7" y="1011.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="529.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.20%)</title><rect x="526.7" y="995.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="529.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.20%)</title><rect x="526.7" y="979.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="529.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 0.61%)</title><rect x="529.1" y="1091.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="532.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 0.61%)</title><rect x="529.1" y="1075.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="532.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.41%)</title><rect x="529.1" y="1059.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="532.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.41%)</title><rect x="529.1" y="1043.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="532.1" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toSet (1 samples, 0.20%)</title><rect x="529.1" y="1027.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="532.1" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.20%)</title><rect x="529.1" y="1011.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="532.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.20%)</title><rect x="531.5" y="1027.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="534.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.20%)</title><rect x="533.9" y="1059.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="536.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.20%)</title><rect x="533.9" y="1043.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="536.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.20%)</title><rect x="536.3" y="1091.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="539.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.20%)</title><rect x="536.3" y="1075.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="539.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.20%)</title><rect x="536.3" y="1059.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="539.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.20%)</title><rect x="536.3" y="1043.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="539.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.20%)</title><rect x="536.3" y="1027.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="539.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.20%)</title><rect x="536.3" y="1011.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="539.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.20%)</title><rect x="536.3" y="995.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="539.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.20%)</title><rect x="536.3" y="979.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="539.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.20%)</title><rect x="536.3" y="963.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="539.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.20%)</title><rect x="536.3" y="947.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="539.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.20%)</title><rect x="536.3" y="931.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="539.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.20%)</title><rect x="538.7" y="1091.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="541.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.20%)</title><rect x="538.7" y="1075.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="541.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.20%)</title><rect x="538.7" y="1059.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="541.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.20%)</title><rect x="538.7" y="1043.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="541.7" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.20%)</title><rect x="538.7" y="1027.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="541.7" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (1 samples, 0.20%)</title><rect x="538.7" y="1011.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="541.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.run (105 samples, 21.38%)</title><rect x="541.1" y="1155.0" width="252.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="544.1" y="1166.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (105 samples, 21.38%)</title><rect x="541.1" y="1139.0" width="252.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="544.1" y="1150.0">java/util/concurrent/ThreadPoolExe..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (105 samples, 21.38%)</title><rect x="541.1" y="1123.0" width="252.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="544.1" y="1134.0">java/util/concurrent/ThreadPoolExe..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.20%)</title><rect x="545.9" y="1107.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="548.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$278/1628454641.run (29 samples, 5.91%)</title><rect x="548.3" y="1107.0" width="69.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="551.3" y="1118.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (29 samples, 5.91%)</title><rect x="548.3" y="1091.0" width="69.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="551.3" y="1102.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (29 samples, 5.91%)</title><rect x="548.3" y="1075.0" width="69.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="551.3" y="1086.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (29 samples, 5.91%)</title><rect x="548.3" y="1059.0" width="69.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="551.3" y="1070.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (11 samples, 2.24%)</title><rect x="550.7" y="1043.0" width="26.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="553.7" y="1054.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/299644693.extract (11 samples, 2.24%)</title><rect x="550.7" y="1027.0" width="26.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="553.7" y="1038.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (11 samples, 2.24%)</title><rect x="550.7" y="1011.0" width="26.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="553.7" y="1022.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (11 samples, 2.24%)</title><rect x="550.7" y="995.0" width="26.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="553.7" y="1006.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (11 samples, 2.24%)</title><rect x="550.7" y="979.0" width="26.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="553.7" y="990.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (11 samples, 2.24%)</title><rect x="550.7" y="963.0" width="26.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="553.7" y="974.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 0.81%)</title><rect x="550.7" y="947.0" width="9.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="553.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.20%)</title><rect x="550.7" y="931.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="553.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.20%)</title><rect x="550.7" y="915.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="553.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.20%)</title><rect x="550.7" y="899.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="553.7" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.20%)</title><rect x="550.7" y="883.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="553.7" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.20%)</title><rect x="550.7" y="867.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="553.7" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.20%)</title><rect x="550.7" y="851.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="553.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 0.61%)</title><rect x="553.1" y="931.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="556.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 0.61%)</title><rect x="553.1" y="915.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="556.1" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.20%)</title><rect x="553.1" y="899.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="556.1" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.20%)</title><rect x="553.1" y="883.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="556.1" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(KlassHandle, int, Thread*) (1 samples, 0.20%)</title><rect x="553.1" y="867.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="556.1" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (1 samples, 0.20%)</title><rect x="553.1" y="851.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="556.1" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.20%)</title><rect x="553.1" y="835.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="556.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.20%)</title><rect x="555.5" y="899.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="558.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (1 samples, 0.20%)</title><rect x="555.5" y="883.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="558.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.20%)</title><rect x="557.9" y="899.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="560.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.20%)</title><rect x="557.9" y="883.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="560.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (5 samples, 1.02%)</title><rect x="560.3" y="947.0" width="12.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="563.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.20%)</title><rect x="560.3" y="931.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="563.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.20%)</title><rect x="560.3" y="915.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="563.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.20%)</title><rect x="560.3" y="899.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="563.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.20%)</title><rect x="562.7" y="931.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="565.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.20%)</title><rect x="562.7" y="915.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="565.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.20%)</title><rect x="562.7" y="899.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="565.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 0.61%)</title><rect x="565.2" y="931.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="568.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.20%)</title><rect x="567.6" y="915.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="570.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.20%)</title><rect x="567.6" y="899.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="570.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.20%)</title><rect x="567.6" y="883.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="570.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.20%)</title><rect x="567.6" y="867.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="570.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.20%)</title><rect x="570.0" y="915.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="573.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.20%)</title><rect x="570.0" y="899.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="573.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.20%)</title><rect x="570.0" y="883.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="573.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.20%)</title><rect x="570.0" y="867.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="573.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.41%)</title><rect x="572.4" y="947.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="575.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.41%)</title><rect x="572.4" y="931.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="575.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.41%)</title><rect x="572.4" y="915.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="575.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.41%)</title><rect x="572.4" y="899.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="575.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.41%)</title><rect x="572.4" y="883.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="575.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (15 samples, 3.05%)</title><rect x="577.2" y="1043.0" width="36.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="580.2" y="1054.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (2 samples, 0.41%)</title><rect x="577.2" y="1027.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="580.2" y="1038.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (2 samples, 0.41%)</title><rect x="577.2" y="1011.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="580.2" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (2 samples, 0.41%)</title><rect x="577.2" y="995.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="580.2" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 0.41%)</title><rect x="577.2" y="979.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="580.2" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.41%)</title><rect x="577.2" y="963.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="580.2" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.41%)</title><rect x="577.2" y="947.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="580.2" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (6 samples, 1.22%)</title><rect x="582.0" y="1027.0" width="14.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="585.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (6 samples, 1.22%)</title><rect x="582.0" y="1011.0" width="14.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="585.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 0.81%)</title><rect x="582.0" y="995.0" width="9.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="585.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 0.81%)</title><rect x="582.0" y="979.0" width="9.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="585.0" y="990.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.81%)</title><rect x="582.0" y="963.0" width="9.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="585.0" y="974.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.81%)</title><rect x="582.0" y="947.0" width="9.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="585.0" y="958.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.81%)</title><rect x="582.0" y="931.0" width="9.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="585.0" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.61%)</title><rect x="584.4" y="915.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="587.4" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.20%)</title><rect x="584.4" y="899.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="587.4" y="910.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.20%)</title><rect x="584.4" y="883.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="587.4" y="894.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.20%)</title><rect x="584.4" y="867.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="587.4" y="878.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.20%)</title><rect x="584.4" y="851.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="587.4" y="862.0"></text>
</g>
<g>
<title>OopMapStream::OopMapStream(OopMap*, int) (1 samples, 0.20%)</title><rect x="584.4" y="835.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="587.4" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_store_pre_barrier(JavaThread*) (1 samples, 0.20%)</title><rect x="586.8" y="899.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="589.8" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.20%)</title><rect x="586.8" y="883.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="589.8" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.20%)</title><rect x="589.2" y="899.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="592.2" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (1 samples, 0.20%)</title><rect x="589.2" y="883.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="592.2" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.20%)</title><rect x="589.2" y="867.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="592.2" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.20%)</title><rect x="589.2" y="851.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="592.2" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned int*, unsigned int*) (1 samples, 0.20%)</title><rect x="589.2" y="835.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="592.2" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.20%)</title><rect x="589.2" y="819.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="592.2" y="830.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.20%)</title><rect x="589.2" y="803.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="592.2" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.20%)</title><rect x="589.2" y="787.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="592.2" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.20%)</title><rect x="589.2" y="771.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="592.2" y="782.0"></text>
</g>
<g>
<title>FreeRegionList::remove_region(bool) (1 samples, 0.20%)</title><rect x="589.2" y="755.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="592.2" y="766.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (2 samples, 0.41%)</title><rect x="591.6" y="995.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="594.6" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.20%)</title><rect x="591.6" y="979.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="594.6" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (1 samples, 0.20%)</title><rect x="591.6" y="963.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="594.6" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.20%)</title><rect x="591.6" y="947.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="594.6" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.20%)</title><rect x="591.6" y="931.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="594.6" y="942.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.20%)</title><rect x="591.6" y="915.0" width="2.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="594.6" y="926.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.20%)</title><rect x="594.0" y="979.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="597.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (5 samples, 1.02%)</title><rect x="596.4" y="1027.0" width="12.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="599.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (5 samples, 1.02%)</title><rect x="596.4" y="1011.0" width="12.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="599.4" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.20%)</title><rect x="596.4" y="995.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="599.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.metadata (1 samples, 0.20%)</title><rect x="598.8" y="995.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="601.8" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.20%)</title><rect x="598.8" y="979.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="601.8" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.20%)</title><rect x="601.2" y="995.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="604.2" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.20%)</title><rect x="601.2" y="979.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="604.2" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.20%)</title><rect x="603.6" y="995.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="606.6" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.20%)</title><rect x="603.6" y="979.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="606.6" y="990.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.20%)</title><rect x="603.6" y="963.0" width="2.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="606.6" y="974.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.20%)</title><rect x="606.0" y="995.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="609.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.20%)</title><rect x="608.4" y="1027.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="611.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.&lt;init&gt; (1 samples, 0.20%)</title><rect x="608.4" y="1011.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="611.4" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.20%)</title><rect x="608.4" y="995.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="611.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.20%)</title><rect x="610.8" y="1027.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="613.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.20%)</title><rect x="610.8" y="1011.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="613.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.20%)</title><rect x="610.8" y="995.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="613.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.20%)</title><rect x="613.2" y="1043.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="616.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.20%)</title><rect x="613.2" y="1027.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="616.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.20%)</title><rect x="613.2" y="1011.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="616.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/688002824.accept (1 samples, 0.20%)</title><rect x="613.2" y="995.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="616.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.20%)</title><rect x="613.2" y="979.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="616.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.20%)</title><rect x="613.2" y="963.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="616.2" y="974.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.20%)</title><rect x="613.2" y="947.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="616.2" y="958.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.20%)</title><rect x="613.2" y="931.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="616.2" y="942.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.20%)</title><rect x="615.6" y="1043.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="618.6" y="1054.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.20%)</title><rect x="615.6" y="1027.0" width="2.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="618.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.20%)</title><rect x="618.0" y="1107.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="621.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.20%)</title><rect x="618.0" y="1091.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="621.0" y="1102.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.20%)</title><rect x="618.0" y="1075.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="621.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (72 samples, 14.66%)</title><rect x="620.4" y="1107.0" width="173.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="623.4" y="1118.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (72 samples, 14.66%)</title><rect x="620.4" y="1091.0" width="173.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="623.4" y="1102.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (72 samples, 14.66%)</title><rect x="620.4" y="1075.0" width="173.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="623.4" y="1086.0">java/util/concurrent/l..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (71 samples, 14.46%)</title><rect x="622.8" y="1059.0" width="170.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="625.8" y="1070.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (71 samples, 14.46%)</title><rect x="622.8" y="1043.0" width="170.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="625.8" y="1054.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>Unsafe_Park (69 samples, 14.05%)</title><rect x="627.6" y="1027.0" width="165.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="630.6" y="1038.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.20%)</title><rect x="627.6" y="1011.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="630.6" y="1022.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.20%)</title><rect x="630.0" y="1011.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="633.0" y="1022.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (66 samples, 13.44%)</title><rect x="632.4" y="1011.0" width="158.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="635.4" y="1022.0">Parker::park(bool, l..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.20%)</title><rect x="634.8" y="995.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="637.8" y="1006.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.20%)</title><rect x="634.8" y="979.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="637.8" y="990.0"></text>
</g>
<g>
<title>__psynch_cvwait (45 samples, 9.16%)</title><rect x="637.3" y="995.0" width="108.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="640.3" y="1006.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (19 samples, 3.87%)</title><rect x="745.4" y="995.0" width="45.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="748.4" y="1006.0">_pth..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (19 samples, 3.87%)</title><rect x="745.4" y="979.0" width="45.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="748.4" y="990.0">_pth..</text>
</g>
<g>
<title>__psynch_mutexwait (19 samples, 3.87%)</title><rect x="745.4" y="963.0" width="45.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="748.4" y="974.0">__ps..</text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.20%)</title><rect x="791.1" y="1011.0" width="2.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="794.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.20%)</title><rect x="793.5" y="1155.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="796.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.20%)</title><rect x="793.5" y="1139.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="796.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.20%)</title><rect x="793.5" y="1123.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="796.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.20%)</title><rect x="793.5" y="1107.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="796.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.20%)</title><rect x="793.5" y="1091.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="796.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.20%)</title><rect x="793.5" y="1075.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="796.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.20%)</title><rect x="793.5" y="1059.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="796.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.20%)</title><rect x="793.5" y="1043.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="796.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.20%)</title><rect x="793.5" y="1027.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="796.5" y="1038.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.20%)</title><rect x="793.5" y="1011.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="796.5" y="1022.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.20%)</title><rect x="793.5" y="995.0" width="2.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="796.5" y="1006.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.20%)</title><rect x="793.5" y="979.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="796.5" y="990.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.20%)</title><rect x="793.5" y="963.0" width="2.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="796.5" y="974.0"></text>
</g>
<g>
<title>thread_start (164 samples, 33.40%)</title><rect x="795.9" y="1155.0" width="394.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="798.9" y="1166.0">thread_start</text>
</g>
<g>
<title>_pthread_start (164 samples, 33.40%)</title><rect x="795.9" y="1139.0" width="394.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="798.9" y="1150.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (164 samples, 33.40%)</title><rect x="795.9" y="1123.0" width="394.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="798.9" y="1134.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (164 samples, 33.40%)</title><rect x="795.9" y="1107.0" width="394.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="798.9" y="1118.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 1.43%)</title><rect x="795.9" y="1091.0" width="16.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="798.9" y="1102.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 1.02%)</title><rect x="795.9" y="1075.0" width="12.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="798.9" y="1086.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 1.02%)</title><rect x="795.9" y="1059.0" width="12.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="798.9" y="1070.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (4 samples, 0.81%)</title><rect x="795.9" y="1043.0" width="9.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="798.9" y="1054.0"></text>
</g>
<g>
<title>xdrmem_ops_aligned (4 samples, 0.81%)</title><rect x="795.9" y="1027.0" width="9.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="798.9" y="1038.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.20%)</title><rect x="805.5" y="1043.0" width="2.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="808.5" y="1054.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.41%)</title><rect x="807.9" y="1075.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="810.9" y="1086.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.41%)</title><rect x="807.9" y="1059.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="810.9" y="1070.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.20%)</title><rect x="807.9" y="1043.0" width="2.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="810.9" y="1054.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.20%)</title><rect x="807.9" y="1027.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="810.9" y="1038.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.20%)</title><rect x="807.9" y="1011.0" width="2.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="810.9" y="1022.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.20%)</title><rect x="810.3" y="1043.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="813.3" y="1054.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.20%)</title><rect x="810.3" y="1027.0" width="2.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="813.3" y="1038.0"></text>
</g>
<g>
<title>JavaThread::run() (156 samples, 31.77%)</title><rect x="812.7" y="1091.0" width="374.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="815.7" y="1102.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (156 samples, 31.77%)</title><rect x="812.7" y="1075.0" width="374.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="815.7" y="1086.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (154 samples, 31.36%)</title><rect x="812.7" y="1059.0" width="370.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="815.7" y="1070.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (148 samples, 30.14%)</title><rect x="812.7" y="1043.0" width="355.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="815.7" y="1054.0">CompileBroker::invoke_compiler_on_method(Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (142 samples, 28.92%)</title><rect x="812.7" y="1027.0" width="341.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="815.7" y="1038.0">C2Compiler::compile_method(ciEnv*, ciMethod*, ..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (142 samples, 28.92%)</title><rect x="812.7" y="1011.0" width="341.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="815.7" y="1022.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod..</text>
</g>
<g>
<title>Compile::Code_Gen() (84 samples, 17.11%)</title><rect x="812.7" y="995.0" width="201.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="815.7" y="1006.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.41%)</title><rect x="812.7" y="979.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="815.7" y="990.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.20%)</title><rect x="812.7" y="963.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="815.7" y="974.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.20%)</title><rect x="815.1" y="963.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="818.1" y="974.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.20%)</title><rect x="815.1" y="947.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="818.1" y="958.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 1.02%)</title><rect x="817.5" y="979.0" width="12.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="820.5" y="990.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.41%)</title><rect x="817.5" y="963.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="820.5" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.41%)</title><rect x="817.5" y="947.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="820.5" y="958.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.20%)</title><rect x="817.5" y="931.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="820.5" y="942.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.20%)</title><rect x="817.5" y="915.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="820.5" y="926.0"></text>
</g>
<g>
<title>CompressedWriteStream::write(unsigned char) (1 samples, 0.20%)</title><rect x="817.5" y="899.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="820.5" y="910.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.20%)</title><rect x="819.9" y="931.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="822.9" y="942.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.20%)</title><rect x="822.3" y="963.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="825.3" y="974.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (1 samples, 0.20%)</title><rect x="824.7" y="963.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="827.7" y="974.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.20%)</title><rect x="824.7" y="947.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="827.7" y="958.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.20%)</title><rect x="824.7" y="931.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="827.7" y="942.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.20%)</title><rect x="824.7" y="915.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="827.7" y="926.0"></text>
</g>
<g>
<title>xaddINode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.20%)</title><rect x="827.1" y="963.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="830.1" y="974.0"></text>
</g>
<g>
<title>AbstractAssembler::AbstractAssembler(CodeBuffer*) (1 samples, 0.20%)</title><rect x="827.1" y="947.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="830.1" y="958.0"></text>
</g>
<g>
<title>Matcher::match() (9 samples, 1.83%)</title><rect x="829.5" y="979.0" width="21.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="832.5" y="990.0">M..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.41%)</title><rect x="829.5" y="963.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="832.5" y="974.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 1.43%)</title><rect x="834.3" y="963.0" width="16.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="837.3" y="974.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.20%)</title><rect x="836.7" y="947.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="839.7" y="958.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.20%)</title><rect x="839.1" y="947.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="842.1" y="958.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.20%)</title><rect x="839.1" y="931.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="842.1" y="942.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.61%)</title><rect x="841.5" y="947.0" width="7.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="844.5" y="958.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.61%)</title><rect x="841.5" y="931.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="844.5" y="942.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.20%)</title><rect x="841.5" y="915.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="844.5" y="926.0"></text>
</g>
<g>
<title>TypeOopPtr::singleton() const (1 samples, 0.20%)</title><rect x="841.5" y="899.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="844.5" y="910.0"></text>
</g>
<g>
<title>Node::match_edge(unsigned int) const (1 samples, 0.20%)</title><rect x="843.9" y="915.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="846.9" y="926.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.20%)</title><rect x="846.3" y="915.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="849.3" y="926.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.20%)</title><rect x="848.7" y="947.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="851.7" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.61%)</title><rect x="851.1" y="979.0" width="7.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="854.1" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.61%)</title><rect x="851.1" y="963.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="854.1" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.20%)</title><rect x="851.1" y="947.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="854.1" y="958.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.20%)</title><rect x="851.1" y="931.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="854.1" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.41%)</title><rect x="853.5" y="947.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="856.5" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (64 samples, 13.03%)</title><rect x="858.4" y="979.0" width="153.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="861.4" y="990.0">PhaseChaitin::Regis..</text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.20%)</title><rect x="858.4" y="963.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="861.4" y="974.0"></text>
</g>
<g>
<title>Node::jvms() const (2 samples, 0.41%)</title><rect x="860.8" y="963.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="863.8" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.61%)</title><rect x="865.6" y="963.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="868.6" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.20%)</title><rect x="865.6" y="947.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="868.6" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.41%)</title><rect x="868.0" y="947.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="871.0" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.20%)</title><rect x="868.0" y="931.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="871.0" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.20%)</title><rect x="870.4" y="931.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="873.4" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.20%)</title><rect x="872.8" y="963.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="875.8" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.20%)</title><rect x="872.8" y="947.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="875.8" y="958.0"></text>
</g>
<g>
<title>IndexSet::remove(unsigned int) (1 samples, 0.20%)</title><rect x="872.8" y="931.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="875.8" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 1.43%)</title><rect x="875.2" y="963.0" width="16.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="878.2" y="974.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.20%)</title><rect x="889.6" y="947.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="892.6" y="958.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.20%)</title><rect x="889.6" y="931.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="892.6" y="942.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.20%)</title><rect x="889.6" y="915.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="892.6" y="926.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.20%)</title><rect x="889.6" y="899.0" width="2.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="892.6" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 1.83%)</title><rect x="892.0" y="963.0" width="21.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="895.0" y="974.0">P..</text>
</g>
<g>
<title>Block::end_idx() const (1 samples, 0.20%)</title><rect x="896.8" y="947.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="899.8" y="958.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.20%)</title><rect x="899.2" y="947.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="902.2" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 1.02%)</title><rect x="901.6" y="947.0" width="12.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="904.6" y="958.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.61%)</title><rect x="901.6" y="931.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="904.6" y="942.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.20%)</title><rect x="906.4" y="915.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="909.4" y="926.0"></text>
</g>
<g>
<title>IndexSet::alloc_block() (1 samples, 0.20%)</title><rect x="906.4" y="899.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="909.4" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.20%)</title><rect x="908.8" y="931.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="911.8" y="942.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.20%)</title><rect x="911.2" y="931.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="914.2" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.41%)</title><rect x="913.6" y="963.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="916.6" y="974.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.20%)</title><rect x="913.6" y="947.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="916.6" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.20%)</title><rect x="916.0" y="947.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="919.0" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (14 samples, 2.85%)</title><rect x="918.4" y="963.0" width="33.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="921.4" y="974.0">Ph..</text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (2 samples, 0.41%)</title><rect x="930.4" y="947.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="933.4" y="958.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.20%)</title><rect x="932.9" y="931.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="935.9" y="942.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (1 samples, 0.20%)</title><rect x="935.3" y="947.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="938.3" y="958.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.20%)</title><rect x="937.7" y="947.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="940.7" y="958.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (3 samples, 0.61%)</title><rect x="940.1" y="947.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="943.1" y="958.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.20%)</title><rect x="944.9" y="931.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="947.9" y="942.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (2 samples, 0.41%)</title><rect x="947.3" y="947.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="950.3" y="958.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.20%)</title><rect x="947.3" y="931.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="950.3" y="942.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.20%)</title><rect x="949.7" y="931.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="952.7" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.20%)</title><rect x="952.1" y="963.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="955.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (9 samples, 1.83%)</title><rect x="954.5" y="963.0" width="21.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="957.5" y="974.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 1.02%)</title><rect x="961.7" y="947.0" width="12.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="964.7" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.20%)</title><rect x="971.3" y="931.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="974.3" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.20%)</title><rect x="971.3" y="915.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="974.3" y="926.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.20%)</title><rect x="971.3" y="899.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="974.3" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::skip_copies(Node*) (1 samples, 0.20%)</title><rect x="973.7" y="947.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="976.7" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 0.81%)</title><rect x="976.1" y="963.0" width="9.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="979.1" y="974.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.20%)</title><rect x="976.1" y="947.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="979.1" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.20%)</title><rect x="978.5" y="947.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="981.5" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.41%)</title><rect x="980.9" y="947.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="983.9" y="958.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (10 samples, 2.04%)</title><rect x="985.7" y="963.0" width="24.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="988.7" y="974.0">P..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.20%)</title><rect x="992.9" y="947.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="995.9" y="958.0"></text>
</g>
<g>
<title>IndexSet::clear() (1 samples, 0.20%)</title><rect x="995.3" y="947.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="998.3" y="958.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.81%)</title><rect x="997.7" y="947.0" width="9.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1000.7" y="958.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.41%)</title><rect x="997.7" y="931.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1000.7" y="942.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.20%)</title><rect x="1000.1" y="915.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1003.1" y="926.0"></text>
</g>
<g>
<title>IndexSet::alloc_block() (1 samples, 0.20%)</title><rect x="1000.1" y="899.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1003.1" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.20%)</title><rect x="1002.5" y="931.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1005.5" y="942.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.20%)</title><rect x="1004.9" y="931.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1007.9" y="942.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.20%)</title><rect x="1007.4" y="947.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1010.4" y="958.0"></text>
</g>
<g>
<title>loadConNKlassNode::bottom_type() const (1 samples, 0.20%)</title><rect x="1009.8" y="963.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1012.8" y="974.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.20%)</title><rect x="1012.2" y="979.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1015.2" y="990.0"></text>
</g>
<g>
<title>MachNode::peephole(Block*, int, PhaseRegAlloc*, int&amp;, Compile*) (1 samples, 0.20%)</title><rect x="1012.2" y="963.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1015.2" y="974.0"></text>
</g>
<g>
<title>Compile::Optimize() (40 samples, 8.15%)</title><rect x="1014.6" y="995.0" width="96.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1017.6" y="1006.0">Compile::Op..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (4 samples, 0.81%)</title><rect x="1014.6" y="979.0" width="9.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1017.6" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.20%)</title><rect x="1019.4" y="963.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1022.4" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.20%)</title><rect x="1019.4" y="947.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1022.4" y="958.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1019.4" y="931.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1022.4" y="942.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.20%)</title><rect x="1019.4" y="915.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1022.4" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1019.4" y="899.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1022.4" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1019.4" y="883.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1022.4" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1019.4" y="867.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1022.4" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1019.4" y="851.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1022.4" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1019.4" y="835.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1022.4" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1019.4" y="819.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1022.4" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1019.4" y="803.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1022.4" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1019.4" y="787.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1022.4" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1019.4" y="771.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1022.4" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1019.4" y="755.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1022.4" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1019.4" y="739.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1022.4" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1019.4" y="723.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1022.4" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1019.4" y="707.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1022.4" y="718.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.20%)</title><rect x="1019.4" y="691.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1022.4" y="702.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.20%)</title><rect x="1019.4" y="675.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1022.4" y="686.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.20%)</title><rect x="1021.8" y="963.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1024.8" y="974.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.20%)</title><rect x="1021.8" y="947.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1024.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.20%)</title><rect x="1024.2" y="979.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1027.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.20%)</title><rect x="1024.2" y="963.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1027.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.20%)</title><rect x="1024.2" y="947.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1027.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.20%)</title><rect x="1024.2" y="931.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1027.2" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.20%)</title><rect x="1024.2" y="915.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1027.2" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.20%)</title><rect x="1024.2" y="899.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1027.2" y="910.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.20%)</title><rect x="1024.2" y="883.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1027.2" y="894.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.20%)</title><rect x="1024.2" y="867.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1027.2" y="878.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.20%)</title><rect x="1024.2" y="851.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1027.2" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (29 samples, 5.91%)</title><rect x="1026.6" y="979.0" width="69.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1029.6" y="990.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.81%)</title><rect x="1026.6" y="963.0" width="9.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1029.6" y="974.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.41%)</title><rect x="1026.6" y="947.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1029.6" y="958.0"></text>
</g>
<g>
<title>GrowableArray&lt;Node*&gt;::append(Node* const&amp;) (1 samples, 0.20%)</title><rect x="1029.0" y="931.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1032.0" y="942.0"></text>
</g>
<g>
<title>NTarjan::LINK(NTarjan*, NTarjan*) (2 samples, 0.41%)</title><rect x="1031.4" y="947.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.4" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 1.22%)</title><rect x="1036.2" y="963.0" width="14.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1039.2" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.20%)</title><rect x="1041.0" y="947.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1044.0" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.20%)</title><rect x="1041.0" y="931.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1044.0" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.20%)</title><rect x="1041.0" y="915.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1044.0" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.20%)</title><rect x="1043.4" y="947.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1046.4" y="958.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (2 samples, 0.41%)</title><rect x="1045.8" y="947.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1048.8" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 1.43%)</title><rect x="1050.6" y="963.0" width="16.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1053.6" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 1.02%)</title><rect x="1055.4" y="947.0" width="12.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1058.4" y="958.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.20%)</title><rect x="1055.4" y="931.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1058.4" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.20%)</title><rect x="1057.8" y="931.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1060.8" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.41%)</title><rect x="1060.2" y="931.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1063.2" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.20%)</title><rect x="1060.2" y="915.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1063.2" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.20%)</title><rect x="1060.2" y="899.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1063.2" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.20%)</title><rect x="1060.2" y="883.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1063.2" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (1 samples, 0.20%)</title><rect x="1060.2" y="867.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1063.2" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.20%)</title><rect x="1062.6" y="915.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1065.6" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (1 samples, 0.20%)</title><rect x="1062.6" y="899.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1065.6" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (1 samples, 0.20%)</title><rect x="1065.0" y="931.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1068.0" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.61%)</title><rect x="1067.4" y="963.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1070.4" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.41%)</title><rect x="1069.8" y="947.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1072.8" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::init_dom_lca_tags() (1 samples, 0.20%)</title><rect x="1074.6" y="963.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1077.6" y="974.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.20%)</title><rect x="1074.6" y="947.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1077.6" y="958.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.20%)</title><rect x="1074.6" y="931.0" width="2.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1077.6" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (6 samples, 1.22%)</title><rect x="1077.0" y="963.0" width="14.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.0" y="974.0"></text>
</g>
<g>
<title>CmpPNode::Opcode() const (1 samples, 0.20%)</title><rect x="1077.0" y="947.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1080.0" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dominated_by(Node*, Node*, bool, bool) (1 samples, 0.20%)</title><rect x="1079.5" y="947.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1082.5" y="958.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_proj(Deoptimization::DeoptReason) (1 samples, 0.20%)</title><rect x="1079.5" y="931.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1082.5" y="942.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.20%)</title><rect x="1079.5" y="915.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1082.5" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.20%)</title><rect x="1081.9" y="947.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1084.9" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.61%)</title><rect x="1084.3" y="947.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1087.3" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.20%)</title><rect x="1084.3" y="931.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1087.3" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.20%)</title><rect x="1086.7" y="931.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1089.7" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.20%)</title><rect x="1089.1" y="931.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.1" y="942.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.20%)</title><rect x="1089.1" y="915.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1092.1" y="926.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.20%)</title><rect x="1089.1" y="899.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.1" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.41%)</title><rect x="1091.5" y="963.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1094.5" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.41%)</title><rect x="1091.5" y="947.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1094.5" y="958.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1091.5" y="931.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1094.5" y="942.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1091.5" y="915.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1094.5" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.20%)</title><rect x="1093.9" y="931.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1096.9" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.20%)</title><rect x="1093.9" y="915.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1096.9" y="926.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.20%)</title><rect x="1093.9" y="899.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1096.9" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.81%)</title><rect x="1096.3" y="979.0" width="9.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1099.3" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.61%)</title><rect x="1096.3" y="963.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1099.3" y="974.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.20%)</title><rect x="1096.3" y="947.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1099.3" y="958.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.20%)</title><rect x="1096.3" y="931.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.3" y="942.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.20%)</title><rect x="1096.3" y="915.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1099.3" y="926.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.20%)</title><rect x="1096.3" y="899.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1099.3" y="910.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1098.7" y="947.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1101.7" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.20%)</title><rect x="1098.7" y="931.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1101.7" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.20%)</title><rect x="1098.7" y="915.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1101.7" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.20%)</title><rect x="1098.7" y="899.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.7" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.20%)</title><rect x="1101.1" y="947.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1104.1" y="958.0"></text>
</g>
<g>
<title>Type::singleton() const (1 samples, 0.20%)</title><rect x="1103.5" y="963.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.5" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.41%)</title><rect x="1105.9" y="979.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.9" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.41%)</title><rect x="1105.9" y="963.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.9" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.41%)</title><rect x="1105.9" y="947.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.9" y="958.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.20%)</title><rect x="1105.9" y="931.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1108.9" y="942.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1108.3" y="931.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.3" y="942.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.20%)</title><rect x="1108.3" y="915.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1111.3" y="926.0"></text>
</g>
<g>
<title>MemNode::optimize_simple_memory_chain(Node*, TypeOopPtr const*, Node*, PhaseGVN*) (1 samples, 0.20%)</title><rect x="1108.3" y="899.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.3" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (16 samples, 3.26%)</title><rect x="1110.7" y="995.0" width="38.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1113.7" y="1006.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (16 samples, 3.26%)</title><rect x="1110.7" y="979.0" width="38.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.7" y="990.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (16 samples, 3.26%)</title><rect x="1110.7" y="963.0" width="38.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.7" y="974.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (16 samples, 3.26%)</title><rect x="1110.7" y="947.0" width="38.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1113.7" y="958.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (16 samples, 3.26%)</title><rect x="1110.7" y="931.0" width="38.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1113.7" y="942.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (16 samples, 3.26%)</title><rect x="1110.7" y="915.0" width="38.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1113.7" y="926.0">Par..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.20%)</title><rect x="1110.7" y="899.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.7" y="910.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.20%)</title><rect x="1110.7" y="883.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.7" y="894.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.20%)</title><rect x="1110.7" y="867.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1113.7" y="878.0"></text>
</g>
<g>
<title>InlineTree::should_inline(ciMethod*, ciMethod*, int, ciCallProfile&amp;, WarmCallInfo*) (1 samples, 0.20%)</title><rect x="1110.7" y="851.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1113.7" y="862.0"></text>
</g>
<g>
<title>ciMethod::should_inline() (1 samples, 0.20%)</title><rect x="1110.7" y="835.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1113.7" y="846.0"></text>
</g>
<g>
<title>check_predicate(OracleCommand, methodHandle) (1 samples, 0.20%)</title><rect x="1110.7" y="819.0" width="2.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1113.7" y="830.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1113.1" y="899.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.1" y="910.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.20%)</title><rect x="1113.1" y="883.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1116.1" y="894.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.20%)</title><rect x="1113.1" y="867.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.1" y="878.0"></text>
</g>
<g>
<title>Node::add_req_batch(Node*, unsigned int) (1 samples, 0.20%)</title><rect x="1113.1" y="851.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.1" y="862.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.20%)</title><rect x="1113.1" y="835.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1116.1" y="846.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.20%)</title><rect x="1113.1" y="819.0" width="2.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1116.1" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 1.63%)</title><rect x="1115.5" y="899.0" width="19.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1118.5" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 1.43%)</title><rect x="1115.5" y="883.0" width="16.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1118.5" y="894.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.20%)</title><rect x="1115.5" y="867.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.5" y="878.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.20%)</title><rect x="1115.5" y="851.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.22%)</title><rect x="1117.9" y="867.0" width="14.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1120.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.22%)</title><rect x="1117.9" y="851.0" width="14.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.22%)</title><rect x="1117.9" y="835.0" width="14.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1120.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.22%)</title><rect x="1117.9" y="819.0" width="14.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.9" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.22%)</title><rect x="1117.9" y="803.0" width="14.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1120.9" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.22%)</title><rect x="1117.9" y="787.0" width="14.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.9" y="798.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.20%)</title><rect x="1117.9" y="771.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1120.9" y="782.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (1 samples, 0.20%)</title><rect x="1117.9" y="755.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.9" y="766.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.20%)</title><rect x="1117.9" y="739.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1120.9" y="750.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.20%)</title><rect x="1117.9" y="723.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1120.9" y="734.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.20%)</title><rect x="1117.9" y="707.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1120.9" y="718.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.20%)</title><rect x="1117.9" y="691.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1120.9" y="702.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.20%)</title><rect x="1117.9" y="675.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1120.9" y="686.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.20%)</title><rect x="1117.9" y="659.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.02%)</title><rect x="1120.3" y="771.0" width="12.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.02%)</title><rect x="1120.3" y="755.0" width="12.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.02%)</title><rect x="1120.3" y="739.0" width="12.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.02%)</title><rect x="1120.3" y="723.0" width="12.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1123.3" y="734.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.20%)</title><rect x="1120.3" y="707.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.3" y="718.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.20%)</title><rect x="1120.3" y="691.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.3" y="702.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.20%)</title><rect x="1120.3" y="675.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1123.3" y="686.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.20%)</title><rect x="1120.3" y="659.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.3" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.20%)</title><rect x="1120.3" y="643.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.3" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.20%)</title><rect x="1120.3" y="627.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1123.3" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.20%)</title><rect x="1120.3" y="611.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1123.3" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.20%)</title><rect x="1120.3" y="595.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1123.3" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.20%)</title><rect x="1120.3" y="579.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1123.3" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.20%)</title><rect x="1120.3" y="563.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.3" y="574.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.20%)</title><rect x="1120.3" y="547.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1123.3" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1120.3" y="531.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.3" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1120.3" y="515.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.3" y="526.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.20%)</title><rect x="1120.3" y="499.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.3" y="510.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.20%)</title><rect x="1120.3" y="483.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.3" y="494.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1120.3" y="467.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1123.3" y="478.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.20%)</title><rect x="1120.3" y="451.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1123.3" y="462.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.20%)</title><rect x="1120.3" y="435.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.81%)</title><rect x="1122.7" y="707.0" width="9.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.7" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.81%)</title><rect x="1122.7" y="691.0" width="9.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.81%)</title><rect x="1122.7" y="675.0" width="9.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.81%)</title><rect x="1122.7" y="659.0" width="9.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.81%)</title><rect x="1122.7" y="643.0" width="9.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.61%)</title><rect x="1122.7" y="627.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.7" y="638.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.20%)</title><rect x="1122.7" y="611.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.7" y="622.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.20%)</title><rect x="1122.7" y="595.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.7" y="606.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.20%)</title><rect x="1122.7" y="579.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.7" y="590.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.20%)</title><rect x="1122.7" y="563.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.7" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.20%)</title><rect x="1122.7" y="547.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.7" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.20%)</title><rect x="1122.7" y="531.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.7" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.20%)</title><rect x="1122.7" y="515.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.7" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.20%)</title><rect x="1122.7" y="499.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.7" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::compute_exceptions() (1 samples, 0.20%)</title><rect x="1122.7" y="483.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.7" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.41%)</title><rect x="1125.1" y="611.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.1" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.41%)</title><rect x="1125.1" y="595.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.41%)</title><rect x="1125.1" y="579.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.41%)</title><rect x="1125.1" y="563.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.41%)</title><rect x="1125.1" y="547.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.41%)</title><rect x="1125.1" y="531.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.1" y="542.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.20%)</title><rect x="1125.1" y="515.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.1" y="526.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.20%)</title><rect x="1125.1" y="499.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.1" y="510.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.20%)</title><rect x="1125.1" y="483.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1128.1" y="494.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.20%)</title><rect x="1125.1" y="467.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.1" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.20%)</title><rect x="1125.1" y="451.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.1" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.20%)</title><rect x="1125.1" y="435.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.1" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.20%)</title><rect x="1125.1" y="419.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.1" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.20%)</title><rect x="1125.1" y="403.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1128.1" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.20%)</title><rect x="1125.1" y="387.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1128.1" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.20%)</title><rect x="1125.1" y="371.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1128.1" y="382.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.20%)</title><rect x="1125.1" y="355.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.1" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.20%)</title><rect x="1125.1" y="339.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.1" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.20%)</title><rect x="1125.1" y="323.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.1" y="334.0"></text>
</g>
<g>
<title>ciInstanceKlass::field_cache() (1 samples, 0.20%)</title><rect x="1125.1" y="307.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.1" y="318.0"></text>
</g>
<g>
<title>ciConstantPoolCache::ciConstantPoolCache(Arena*, int) (1 samples, 0.20%)</title><rect x="1125.1" y="291.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.1" y="302.0"></text>
</g>
<g>
<title>GrowableArray&lt;long&gt;::GrowableArray(Arena*, int, int, long const&amp;) (1 samples, 0.20%)</title><rect x="1125.1" y="275.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.1" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1127.5" y="515.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.5" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1127.5" y="499.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1127.5" y="483.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1127.5" y="467.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1127.5" y="451.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1127.5" y="435.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.5" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1127.5" y="419.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.5" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1127.5" y="403.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1127.5" y="387.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1127.5" y="371.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1127.5" y="355.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1127.5" y="339.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.5" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1127.5" y="323.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.5" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1127.5" y="307.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1130.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1127.5" y="291.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1127.5" y="275.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1127.5" y="259.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1127.5" y="243.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.5" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1127.5" y="227.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.5" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1127.5" y="211.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1127.5" y="195.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1127.5" y="179.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1127.5" y="163.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.5" y="174.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.20%)</title><rect x="1127.5" y="147.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.5" y="158.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.20%)</title><rect x="1127.5" y="131.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.5" y="142.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.20%)</title><rect x="1127.5" y="115.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.5" y="126.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1127.5" y="99.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.5" y="110.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.20%)</title><rect x="1127.5" y="83.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1130.5" y="94.0"></text>
</g>
<g>
<title>Node::is_dead_loop_safe() const (1 samples, 0.20%)</title><rect x="1127.5" y="67.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.5" y="78.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.20%)</title><rect x="1129.9" y="627.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.9" y="638.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.20%)</title><rect x="1129.9" y="611.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.9" y="622.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.20%)</title><rect x="1129.9" y="595.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.9" y="606.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.20%)</title><rect x="1129.9" y="579.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.9" y="590.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1129.9" y="563.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.9" y="574.0"></text>
</g>
<g>
<title>SafePointNode::set_next_exception(SafePointNode*) (1 samples, 0.20%)</title><rect x="1132.3" y="883.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.3" y="894.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (6 samples, 1.22%)</title><rect x="1134.7" y="899.0" width="14.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.7" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.22%)</title><rect x="1134.7" y="883.0" width="14.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.7" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.22%)</title><rect x="1134.7" y="867.0" width="14.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.22%)</title><rect x="1134.7" y="851.0" width="14.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.22%)</title><rect x="1134.7" y="835.0" width="14.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.22%)</title><rect x="1134.7" y="819.0" width="14.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.22%)</title><rect x="1134.7" y="803.0" width="14.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.7" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.02%)</title><rect x="1134.7" y="787.0" width="12.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.7" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.02%)</title><rect x="1134.7" y="771.0" width="12.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.02%)</title><rect x="1134.7" y="755.0" width="12.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.02%)</title><rect x="1134.7" y="739.0" width="12.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.02%)</title><rect x="1134.7" y="723.0" width="12.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.02%)</title><rect x="1134.7" y="707.0" width="12.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.7" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.02%)</title><rect x="1134.7" y="691.0" width="12.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.7" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.02%)</title><rect x="1134.7" y="675.0" width="12.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.02%)</title><rect x="1134.7" y="659.0" width="12.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.02%)</title><rect x="1134.7" y="643.0" width="12.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.02%)</title><rect x="1134.7" y="627.0" width="12.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.81%)</title><rect x="1134.7" y="611.0" width="9.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.7" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.61%)</title><rect x="1134.7" y="595.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.7" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.61%)</title><rect x="1134.7" y="579.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.61%)</title><rect x="1134.7" y="563.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.61%)</title><rect x="1134.7" y="547.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.61%)</title><rect x="1134.7" y="531.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.61%)</title><rect x="1134.7" y="515.0" width="7.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.7" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.61%)</title><rect x="1134.7" y="499.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.7" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.61%)</title><rect x="1134.7" y="483.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.41%)</title><rect x="1134.7" y="467.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.41%)</title><rect x="1134.7" y="451.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.41%)</title><rect x="1134.7" y="435.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.41%)</title><rect x="1134.7" y="419.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.7" y="430.0"></text>
</g>
<g>
<title>VirtualCallGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1134.7" y="403.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.7" y="414.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.20%)</title><rect x="1134.7" y="387.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.7" y="398.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.20%)</title><rect x="1134.7" y="371.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.7" y="382.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.20%)</title><rect x="1134.7" y="355.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.7" y="366.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.20%)</title><rect x="1134.7" y="339.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.7" y="350.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.20%)</title><rect x="1134.7" y="323.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.7" y="334.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.20%)</title><rect x="1134.7" y="307.0" width="2.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1137.7" y="318.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.20%)</title><rect x="1137.1" y="403.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.1" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1137.1" y="387.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.1" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1137.1" y="371.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.1" y="382.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1137.1" y="355.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.1" y="366.0"></text>
</g>
<g>
<title>ciObjectFactory::get_unloaded_klass(ciKlass*, ciSymbol*, bool) (1 samples, 0.20%)</title><rect x="1137.1" y="339.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.20%)</title><rect x="1139.5" y="467.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.5" y="478.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.20%)</title><rect x="1139.5" y="451.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.5" y="462.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.20%)</title><rect x="1139.5" y="435.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.5" y="446.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.20%)</title><rect x="1139.5" y="419.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.5" y="430.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.20%)</title><rect x="1139.5" y="403.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.5" y="414.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.20%)</title><rect x="1139.5" y="387.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.5" y="398.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.20%)</title><rect x="1139.5" y="371.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.5" y="382.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.20%)</title><rect x="1139.5" y="355.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.5" y="366.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.20%)</title><rect x="1139.5" y="339.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.5" y="350.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.20%)</title><rect x="1139.5" y="323.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.5" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1141.9" y="595.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.9" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1141.9" y="579.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.9" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1141.9" y="563.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1141.9" y="547.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1141.9" y="531.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1141.9" y="515.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1141.9" y="499.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.9" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1141.9" y="483.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.9" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1141.9" y="467.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1141.9" y="451.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1141.9" y="435.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1141.9" y="419.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1141.9" y="403.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.9" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1141.9" y="387.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.9" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1141.9" y="371.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1141.9" y="355.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1141.9" y="339.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1141.9" y="323.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1141.9" y="307.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.9" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1141.9" y="291.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.9" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1141.9" y="275.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1141.9" y="259.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1141.9" y="243.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1141.9" y="227.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1141.9" y="211.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.9" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1141.9" y="195.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.9" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1141.9" y="179.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1141.9" y="163.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1141.9" y="147.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1141.9" y="131.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.20%)</title><rect x="1141.9" y="115.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.20%)</title><rect x="1141.9" y="99.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.9" y="110.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.20%)</title><rect x="1141.9" y="83.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.9" y="94.0"></text>
</g>
<g>
<title>GraphKit::post_barrier(Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.20%)</title><rect x="1141.9" y="67.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.9" y="78.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.20%)</title><rect x="1141.9" y="51.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.9" y="62.0"></text>
</g>
<g>
<title>URShiftLNode::bottom_type() const (1 samples, 0.20%)</title><rect x="1141.9" y="35.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.9" y="46.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.20%)</title><rect x="1144.3" y="611.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.3" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1146.7" y="787.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.7" y="798.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (1 samples, 0.20%)</title><rect x="1146.7" y="771.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.7" y="782.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.20%)</title><rect x="1146.7" y="755.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.7" y="766.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.20%)</title><rect x="1146.7" y="739.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.7" y="750.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.20%)</title><rect x="1146.7" y="723.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.7" y="734.0"></text>
</g>
<g>
<title>PhasePeephole::PhasePeephole(PhaseRegAlloc*, PhaseCFG&amp;) (1 samples, 0.20%)</title><rect x="1149.1" y="995.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.1" y="1006.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.20%)</title><rect x="1151.5" y="995.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.5" y="1006.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (1 samples, 0.20%)</title><rect x="1151.5" y="979.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.5" y="990.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.20%)</title><rect x="1151.5" y="963.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.5" y="974.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.20%)</title><rect x="1151.5" y="947.0" width="2.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1154.5" y="958.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (5 samples, 1.02%)</title><rect x="1154.0" y="1027.0" width="12.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.0" y="1038.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (5 samples, 1.02%)</title><rect x="1154.0" y="1011.0" width="12.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.0" y="1022.0"></text>
</g>
<g>
<title>Compilation::compile_method() (5 samples, 1.02%)</title><rect x="1154.0" y="995.0" width="12.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.0" y="1006.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (5 samples, 1.02%)</title><rect x="1154.0" y="979.0" width="12.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.0" y="990.0"></text>
</g>
<g>
<title>Compilation::build_hir() (5 samples, 1.02%)</title><rect x="1154.0" y="963.0" width="12.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.0" y="974.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (5 samples, 1.02%)</title><rect x="1154.0" y="947.0" width="12.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.0" y="958.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (5 samples, 1.02%)</title><rect x="1154.0" y="931.0" width="12.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.0" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (5 samples, 1.02%)</title><rect x="1154.0" y="915.0" width="12.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.0" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (5 samples, 1.02%)</title><rect x="1154.0" y="899.0" width="12.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.0" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (5 samples, 1.02%)</title><rect x="1154.0" y="883.0" width="12.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.0" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (5 samples, 1.02%)</title><rect x="1154.0" y="867.0" width="12.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.0" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (5 samples, 1.02%)</title><rect x="1154.0" y="851.0" width="12.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.0" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (5 samples, 1.02%)</title><rect x="1154.0" y="835.0" width="12.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.0" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (5 samples, 1.02%)</title><rect x="1154.0" y="819.0" width="12.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.0" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (5 samples, 1.02%)</title><rect x="1154.0" y="803.0" width="12.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.0" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.61%)</title><rect x="1154.0" y="787.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.0" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.20%)</title><rect x="1156.4" y="771.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.4" y="782.0"></text>
</g>
<g>
<title>ciMethod::can_be_compiled() (1 samples, 0.20%)</title><rect x="1156.4" y="755.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.4" y="766.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.20%)</title><rect x="1158.8" y="771.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.8" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::method_return(Instruction*) (2 samples, 0.41%)</title><rect x="1161.2" y="787.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.2" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.20%)</title><rect x="1166.0" y="1027.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.0" y="1038.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.20%)</title><rect x="1166.0" y="1011.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.0" y="1022.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.20%)</title><rect x="1166.0" y="995.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.0" y="1006.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1166.0" y="979.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.0" y="990.0"></text>
</g>
<g>
<title>CompileQueue::get() (6 samples, 1.22%)</title><rect x="1168.4" y="1043.0" width="14.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.4" y="1054.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 1.02%)</title><rect x="1168.4" y="1027.0" width="12.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.4" y="1038.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 1.02%)</title><rect x="1168.4" y="1011.0" width="12.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.4" y="1022.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 1.02%)</title><rect x="1168.4" y="995.0" width="12.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.4" y="1006.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 1.02%)</title><rect x="1168.4" y="979.0" width="12.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1171.4" y="990.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.20%)</title><rect x="1180.4" y="1027.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.4" y="1038.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.20%)</title><rect x="1180.4" y="1011.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.4" y="1022.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.20%)</title><rect x="1182.8" y="1059.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.8" y="1070.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.20%)</title><rect x="1182.8" y="1043.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.8" y="1054.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.20%)</title><rect x="1182.8" y="1027.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="1038.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.20%)</title><rect x="1182.8" y="1011.0" width="2.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1185.8" y="1022.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.20%)</title><rect x="1182.8" y="995.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.8" y="1006.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.20%)</title><rect x="1182.8" y="979.0" width="2.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1185.8" y="990.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.20%)</title><rect x="1185.2" y="1059.0" width="2.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1188.2" y="1070.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(AttachOperation*, outputStream*) (1 samples, 0.20%)</title><rect x="1185.2" y="1043.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.2" y="1054.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.20%)</title><rect x="1185.2" y="1027.0" width="2.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1188.2" y="1038.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.20%)</title><rect x="1185.2" y="1011.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="1022.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.20%)</title><rect x="1185.2" y="995.0" width="2.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1188.2" y="1006.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.20%)</title><rect x="1187.6" y="1091.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.6" y="1102.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.20%)</title><rect x="1187.6" y="1075.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.6" y="1086.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.20%)</title><rect x="1187.6" y="1059.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.6" y="1070.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.20%)</title><rect x="1187.6" y="1043.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.6" y="1054.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.20%)</title><rect x="1187.6" y="1027.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.6" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.20%)</title><rect x="1187.6" y="1011.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.6" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.20%)</title><rect x="1187.6" y="995.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.6" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.20%)</title><rect x="1187.6" y="979.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.6" y="990.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.20%)</title><rect x="1187.6" y="963.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.6" y="974.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.20%)</title><rect x="1187.6" y="947.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.6" y="958.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.20%)</title><rect x="1187.6" y="931.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.6" y="942.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.20%)</title><rect x="1187.6" y="915.0" width="2.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1190.6" y="926.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.20%)</title><rect x="1187.6" y="899.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.6" y="910.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.20%)</title><rect x="1187.6" y="883.0" width="2.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1190.6" y="894.0"></text>
</g>
</g>
</svg>
