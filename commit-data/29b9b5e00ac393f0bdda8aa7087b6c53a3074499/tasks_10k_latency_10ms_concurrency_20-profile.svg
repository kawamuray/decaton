<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="581"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="581"> </text>
<g id="frames">
<g>
<title>all (224 samples, 100.00%)</title><rect x="10.0" y="547.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="558.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (5 samples, 2.23%)</title><rect x="10.0" y="531.0" width="26.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="542.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (5 samples, 2.23%)</title><rect x="10.0" y="515.0" width="26.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="526.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.45%)</title><rect x="10.0" y="499.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.45%)</title><rect x="10.0" y="483.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1417108960.accept (1 samples, 0.45%)</title><rect x="10.0" y="467.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.45%)</title><rect x="10.0" y="451.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.45%)</title><rect x="15.3" y="499.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.3" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/155185504.accept (1 samples, 0.45%)</title><rect x="15.3" y="483.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.3" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (1 samples, 0.45%)</title><rect x="15.3" y="467.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.3" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.45%)</title><rect x="15.3" y="451.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="18.3" y="462.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.45%)</title><rect x="15.3" y="435.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.3" y="446.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.45%)</title><rect x="15.3" y="419.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.3" y="430.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.45%)</title><rect x="15.3" y="403.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.3" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.45%)</title><rect x="15.3" y="387.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.3" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (3 samples, 1.34%)</title><rect x="20.5" y="499.0" width="15.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (3 samples, 1.34%)</title><rect x="20.5" y="483.0" width="15.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="23.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (2 samples, 0.89%)</title><rect x="20.5" y="467.0" width="10.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="23.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.89%)</title><rect x="20.5" y="451.0" width="10.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="23.5" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.89%)</title><rect x="20.5" y="435.0" width="10.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.5" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.89%)</title><rect x="20.5" y="419.0" width="10.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.5" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.89%)</title><rect x="20.5" y="403.0" width="10.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="23.5" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (2 samples, 0.89%)</title><rect x="20.5" y="387.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (2 samples, 0.89%)</title><rect x="20.5" y="371.0" width="10.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (2 samples, 0.89%)</title><rect x="20.5" y="355.0" width="10.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (2 samples, 0.89%)</title><rect x="20.5" y="339.0" width="10.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.poll (1 samples, 0.45%)</title><rect x="20.5" y="323.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.kevent0 (1 samples, 0.45%)</title><rect x="20.5" y="307.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.5" y="318.0"></text>
</g>
<g>
<title>kevent (1 samples, 0.45%)</title><rect x="20.5" y="291.0" width="5.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="23.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.45%)</title><rect x="25.8" y="323.0" width="5.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.8" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.45%)</title><rect x="31.1" y="467.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.45%)</title><rect x="31.1" y="451.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.1" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.45%)</title><rect x="31.1" y="435.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="34.1" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.45%)</title><rect x="31.1" y="419.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="34.1" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.45%)</title><rect x="31.1" y="403.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.1" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.45%)</title><rect x="31.1" y="387.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="34.1" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.45%)</title><rect x="31.1" y="371.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="34.1" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.45%)</title><rect x="31.1" y="355.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.1" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.45%)</title><rect x="31.1" y="339.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.1" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.45%)</title><rect x="31.1" y="323.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.1" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.45%)</title><rect x="31.1" y="307.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="34.1" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.45%)</title><rect x="31.1" y="291.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.1" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.45%)</title><rect x="31.1" y="275.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="34.1" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.45%)</title><rect x="31.1" y="259.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.1" y="270.0"></text>
</g>
<g>
<title>java/lang/Thread.run (182 samples, 81.25%)</title><rect x="36.3" y="531.0" width="958.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="39.3" y="542.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (182 samples, 81.25%)</title><rect x="36.3" y="515.0" width="958.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.3" y="526.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (182 samples, 81.25%)</title><rect x="36.3" y="499.0" width="958.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="39.3" y="510.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/405225669.run (174 samples, 77.68%)</title><rect x="41.6" y="483.0" width="916.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.6" y="494.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/405225669.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (174 samples, 77.68%)</title><rect x="41.6" y="467.0" width="916.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.6" y="478.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (174 samples, 77.68%)</title><rect x="41.6" y="451.0" width="916.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="44.6" y="462.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (174 samples, 77.68%)</title><rect x="41.6" y="435.0" width="916.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="44.6" y="446.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (5 samples, 2.23%)</title><rect x="41.6" y="419.0" width="26.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="44.6" y="430.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/299644693.extract (5 samples, 2.23%)</title><rect x="41.6" y="403.0" width="26.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="44.6" y="414.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (5 samples, 2.23%)</title><rect x="41.6" y="387.0" width="26.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.6" y="398.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (5 samples, 2.23%)</title><rect x="41.6" y="371.0" width="26.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.6" y="382.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (5 samples, 2.23%)</title><rect x="41.6" y="355.0" width="26.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="44.6" y="366.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (5 samples, 2.23%)</title><rect x="41.6" y="339.0" width="26.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="44.6" y="350.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (2 samples, 0.89%)</title><rect x="41.6" y="323.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.6" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 0.89%)</title><rect x="41.6" y="307.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="44.6" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.89%)</title><rect x="41.6" y="291.0" width="10.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="44.6" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 0.89%)</title><rect x="41.6" y="275.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="44.6" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (3 samples, 1.34%)</title><rect x="52.1" y="323.0" width="15.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.1" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.45%)</title><rect x="52.1" y="307.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.1" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.45%)</title><rect x="52.1" y="291.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="55.1" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.45%)</title><rect x="52.1" y="275.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.1" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.45%)</title><rect x="52.1" y="259.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="55.1" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.45%)</title><rect x="57.4" y="307.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="60.4" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.45%)</title><rect x="57.4" y="291.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="60.4" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (1 samples, 0.45%)</title><rect x="62.7" y="307.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="65.7" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.45%)</title><rect x="62.7" y="291.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="65.7" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.45%)</title><rect x="62.7" y="275.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.7" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.45%)</title><rect x="62.7" y="259.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="65.7" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.45%)</title><rect x="62.7" y="243.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="65.7" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.45%)</title><rect x="62.7" y="227.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.7" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.45%)</title><rect x="62.7" y="211.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.7" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.45%)</title><rect x="62.7" y="195.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="65.7" y="206.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.45%)</title><rect x="62.7" y="179.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="65.7" y="190.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (169 samples, 75.45%)</title><rect x="67.9" y="419.0" width="890.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="70.9" y="430.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (2 samples, 0.89%)</title><rect x="67.9" y="403.0" width="10.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="70.9" y="414.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (2 samples, 0.89%)</title><rect x="67.9" y="387.0" width="10.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="70.9" y="398.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (2 samples, 0.89%)</title><rect x="67.9" y="371.0" width="10.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="70.9" y="382.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 0.89%)</title><rect x="67.9" y="355.0" width="10.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="70.9" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.89%)</title><rect x="67.9" y="339.0" width="10.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="70.9" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.89%)</title><rect x="67.9" y="323.0" width="10.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.9" y="334.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.89%)</title><rect x="67.9" y="307.0" width="10.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.9" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (8 samples, 3.57%)</title><rect x="78.5" y="403.0" width="42.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="81.5" y="414.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (8 samples, 3.57%)</title><rect x="78.5" y="387.0" width="42.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="81.5" y="398.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (5 samples, 2.23%)</title><rect x="78.5" y="371.0" width="26.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="81.5" y="382.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (2 samples, 0.89%)</title><rect x="78.5" y="355.0" width="10.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="81.5" y="366.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (2 samples, 0.89%)</title><rect x="78.5" y="339.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.5" y="350.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.34%)</title><rect x="89.0" y="355.0" width="15.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.0" y="366.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.89%)</title><rect x="89.0" y="339.0" width="10.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="92.0" y="350.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.45%)</title><rect x="94.3" y="323.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="97.3" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.45%)</title><rect x="94.3" y="307.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="97.3" y="318.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.45%)</title><rect x="94.3" y="291.0" width="5.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="97.3" y="302.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.45%)</title><rect x="94.3" y="275.0" width="5.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="97.3" y="286.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.45%)</title><rect x="99.6" y="339.0" width="5.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="102.6" y="350.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 1.34%)</title><rect x="104.8" y="371.0" width="15.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="107.8" y="382.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 1.34%)</title><rect x="104.8" y="355.0" width="15.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="107.8" y="366.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.34%)</title><rect x="104.8" y="339.0" width="15.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="107.8" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.89%)</title><rect x="110.1" y="323.0" width="10.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="113.1" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.89%)</title><rect x="110.1" y="307.0" width="10.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="113.1" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.89%)</title><rect x="110.1" y="291.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="113.1" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.45%)</title><rect x="115.4" y="275.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="118.4" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.45%)</title><rect x="115.4" y="259.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="118.4" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(KlassHandle, int, Thread*) (1 samples, 0.45%)</title><rect x="115.4" y="243.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="118.4" y="254.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (157 samples, 70.09%)</title><rect x="120.6" y="403.0" width="827.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="123.6" y="414.0">com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (157 samples, 70.09%)</title><rect x="120.6" y="387.0" width="827.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="123.6" y="398.0">com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1419027151.process (155 samples, 69.20%)</title><rect x="131.2" y="371.0" width="816.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="134.2" y="382.0">com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1419027151.process</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (155 samples, 69.20%)</title><rect x="131.2" y="355.0" width="816.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="134.2" y="366.0">com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (155 samples, 69.20%)</title><rect x="131.2" y="339.0" width="816.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="134.2" y="350.0">com/linecorp/decaton/benchmark/Recording.process</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.45%)</title><rect x="131.2" y="323.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="134.2" y="334.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (1 samples, 0.45%)</title><rect x="131.2" y="307.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="134.2" y="318.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (1 samples, 0.45%)</title><rect x="131.2" y="291.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="134.2" y="302.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (1 samples, 0.45%)</title><rect x="131.2" y="275.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="134.2" y="286.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (1 samples, 0.45%)</title><rect x="131.2" y="259.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="134.2" y="270.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.45%)</title><rect x="131.2" y="243.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="134.2" y="254.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (1 samples, 0.45%)</title><rect x="131.2" y="227.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="134.2" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.45%)</title><rect x="131.2" y="211.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="134.2" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.45%)</title><rect x="131.2" y="195.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="134.2" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.45%)</title><rect x="131.2" y="179.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="134.2" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.45%)</title><rect x="131.2" y="163.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="134.2" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.45%)</title><rect x="131.2" y="147.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="134.2" y="158.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (154 samples, 68.75%)</title><rect x="136.4" y="323.0" width="811.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="139.4" y="334.0">com/linecorp/decaton/benchmark/Recording$ChildRecording.process</text>
</g>
<g>
<title>java/lang/Thread.sleep (154 samples, 68.75%)</title><rect x="136.4" y="307.0" width="811.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="139.4" y="318.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (148 samples, 66.07%)</title><rect x="168.0" y="291.0" width="779.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="171.0" y="302.0">JVM_Sleep</text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (148 samples, 66.07%)</title><rect x="168.0" y="275.0" width="779.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="171.0" y="286.0">os::sleep(Thread*, long, bool)</text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.45%)</title><rect x="168.0" y="259.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="171.0" y="270.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.45%)</title><rect x="168.0" y="243.0" width="5.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="171.0" y="254.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.45%)</title><rect x="168.0" y="227.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="171.0" y="238.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.45%)</title><rect x="168.0" y="211.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="171.0" y="222.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.45%)</title><rect x="168.0" y="195.0" width="5.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="171.0" y="206.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.45%)</title><rect x="168.0" y="179.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="171.0" y="190.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.45%)</title><rect x="168.0" y="163.0" width="5.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="171.0" y="174.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (146 samples, 65.18%)</title><rect x="173.3" y="259.0" width="769.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="176.3" y="270.0">os::PlatformEvent::park(long)</text>
</g>
<g>
<title>__gettimeofday (3 samples, 1.34%)</title><rect x="173.3" y="243.0" width="15.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="176.3" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (143 samples, 63.84%)</title><rect x="189.1" y="243.0" width="753.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="192.1" y="254.0">__psynch_cvwait</text>
</g>
<g>
<title>pthread_cond_timedwait (1 samples, 0.45%)</title><rect x="942.4" y="259.0" width="5.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="945.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.89%)</title><rect x="947.7" y="403.0" width="10.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="950.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.89%)</title><rect x="947.7" y="387.0" width="10.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="950.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.45%)</title><rect x="952.9" y="371.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="955.9" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1758550400.accept (1 samples, 0.45%)</title><rect x="952.9" y="355.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="955.9" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.45%)</title><rect x="952.9" y="339.0" width="5.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="955.9" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.45%)</title><rect x="952.9" y="323.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="955.9" y="334.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.45%)</title><rect x="952.9" y="307.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="955.9" y="318.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.45%)</title><rect x="952.9" y="291.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="955.9" y="302.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.45%)</title><rect x="952.9" y="275.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="955.9" y="286.0"></text>
</g>
<g>
<title>_res (1 samples, 0.45%)</title><rect x="952.9" y="259.0" width="5.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="955.9" y="270.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.45%)</title><rect x="958.2" y="483.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="961.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 2.68%)</title><rect x="963.5" y="483.0" width="31.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="966.5" y="494.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 2.23%)</title><rect x="968.8" y="467.0" width="26.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="971.8" y="478.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (5 samples, 2.23%)</title><rect x="968.8" y="451.0" width="26.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="971.8" y="462.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (5 samples, 2.23%)</title><rect x="968.8" y="435.0" width="26.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="971.8" y="446.0">j..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (5 samples, 2.23%)</title><rect x="968.8" y="419.0" width="26.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="971.8" y="430.0">s..</text>
</g>
<g>
<title>Unsafe_Park (5 samples, 2.23%)</title><rect x="968.8" y="403.0" width="26.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="971.8" y="414.0">U..</text>
</g>
<g>
<title>Parker::park(bool, long) (5 samples, 2.23%)</title><rect x="968.8" y="387.0" width="26.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="971.8" y="398.0">P..</text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 2.23%)</title><rect x="968.8" y="371.0" width="26.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="971.8" y="382.0">_..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.89%)</title><rect x="995.1" y="531.0" width="10.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="998.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.89%)</title><rect x="995.1" y="515.0" width="10.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="998.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.89%)</title><rect x="995.1" y="499.0" width="10.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="998.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.45%)</title><rect x="995.1" y="483.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="998.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.45%)</title><rect x="995.1" y="467.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="998.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.45%)</title><rect x="995.1" y="451.0" width="5.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="998.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.45%)</title><rect x="995.1" y="435.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="998.1" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.45%)</title><rect x="995.1" y="419.0" width="5.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="998.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.45%)</title><rect x="995.1" y="403.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="998.1" y="414.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.45%)</title><rect x="995.1" y="387.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="998.1" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.45%)</title><rect x="995.1" y="371.0" width="5.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="998.1" y="382.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.45%)</title><rect x="995.1" y="355.0" width="5.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="998.1" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.45%)</title><rect x="995.1" y="339.0" width="5.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="998.1" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.45%)</title><rect x="1000.4" y="483.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1003.4" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.45%)</title><rect x="1000.4" y="467.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1003.4" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.45%)</title><rect x="1000.4" y="451.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1003.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.45%)</title><rect x="1000.4" y="435.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1003.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.45%)</title><rect x="1000.4" y="419.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1003.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1 samples, 0.45%)</title><rect x="1000.4" y="403.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1003.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.poll (1 samples, 0.45%)</title><rect x="1000.4" y="387.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1003.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.updateRegistrations (1 samples, 0.45%)</title><rect x="1000.4" y="371.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1003.4" y="382.0"></text>
</g>
<g>
<title>thread_start (35 samples, 15.62%)</title><rect x="1005.6" y="531.0" width="184.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1008.6" y="542.0">thread_start</text>
</g>
<g>
<title>_pthread_start (35 samples, 15.62%)</title><rect x="1005.6" y="515.0" width="184.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1008.6" y="526.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (35 samples, 15.62%)</title><rect x="1005.6" y="499.0" width="184.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1008.6" y="510.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (35 samples, 15.62%)</title><rect x="1005.6" y="483.0" width="184.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1008.6" y="494.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (5 samples, 2.23%)</title><rect x="1005.6" y="467.0" width="26.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1008.6" y="478.0">G..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (4 samples, 1.79%)</title><rect x="1005.6" y="451.0" width="21.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1008.6" y="462.0">G..</text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 1.79%)</title><rect x="1005.6" y="435.0" width="21.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1008.6" y="446.0">G..</text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 1.79%)</title><rect x="1005.6" y="419.0" width="21.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1008.6" y="430.0">G..</text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.45%)</title><rect x="1005.6" y="403.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1008.6" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.45%)</title><rect x="1005.6" y="387.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1008.6" y="398.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.45%)</title><rect x="1005.6" y="371.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1008.6" y="382.0"></text>
</g>
<g>
<title>ScanRSClosure::scan_strong_code_roots(HeapRegion*) (1 samples, 0.45%)</title><rect x="1005.6" y="355.0" width="5.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1008.6" y="366.0"></text>
</g>
<g>
<title>CodeRootSetTable::nmethods_do(CodeBlobClosure*) (1 samples, 0.45%)</title><rect x="1005.6" y="339.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1008.6" y="350.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.45%)</title><rect x="1005.6" y="323.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1008.6" y="334.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.45%)</title><rect x="1005.6" y="307.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1008.6" y="318.0"></text>
</g>
<g>
<title>oop_Relocation::oop_value() (1 samples, 0.45%)</title><rect x="1005.6" y="291.0" width="5.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1008.6" y="302.0"></text>
</g>
<g>
<title>Assembler::locate_operand(unsigned char*, Assembler::WhichOperand) (1 samples, 0.45%)</title><rect x="1005.6" y="275.0" width="5.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1008.6" y="286.0"></text>
</g>
<g>
<title>G1RemSet::updateRS(DirtyCardQueue*, unsigned int) (3 samples, 1.34%)</title><rect x="1010.9" y="403.0" width="15.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1013.9" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 1.34%)</title><rect x="1010.9" y="387.0" width="15.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1013.9" y="398.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 1.34%)</title><rect x="1010.9" y="371.0" width="15.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1013.9" y="382.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer_helper(CardTableEntryClosure*, unsigned int, BufferNode*) (3 samples, 1.34%)</title><rect x="1010.9" y="355.0" width="15.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1013.9" y="366.0"></text>
</g>
<g>
<title>DirtyCardQueue::apply_closure_to_buffer(CardTableEntryClosure*, void**, unsigned long, unsigned long, bool, unsigned int) (3 samples, 1.34%)</title><rect x="1010.9" y="339.0" width="15.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1013.9" y="350.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 1.34%)</title><rect x="1010.9" y="323.0" width="15.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.9" y="334.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 1.34%)</title><rect x="1010.9" y="307.0" width="15.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1013.9" y="318.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 1.34%)</title><rect x="1010.9" y="291.0" width="15.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1013.9" y="302.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.89%)</title><rect x="1016.2" y="275.0" width="10.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1019.2" y="286.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.45%)</title><rect x="1026.7" y="451.0" width="5.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1029.7" y="462.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.45%)</title><rect x="1026.7" y="435.0" width="5.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1029.7" y="446.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.45%)</title><rect x="1026.7" y="419.0" width="5.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1029.7" y="430.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.45%)</title><rect x="1026.7" y="403.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1029.7" y="414.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.45%)</title><rect x="1026.7" y="387.0" width="5.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1029.7" y="398.0"></text>
</g>
<g>
<title>JavaThread::run() (29 samples, 12.95%)</title><rect x="1032.0" y="467.0" width="152.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1035.0" y="478.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (29 samples, 12.95%)</title><rect x="1032.0" y="451.0" width="152.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1035.0" y="462.0">JavaThread::thread_..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (27 samples, 12.05%)</title><rect x="1032.0" y="435.0" width="142.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1035.0" y="446.0">CompileBroker::com..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (25 samples, 11.16%)</title><rect x="1032.0" y="419.0" width="131.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1035.0" y="430.0">CompileBroker::i..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (24 samples, 10.71%)</title><rect x="1032.0" y="403.0" width="126.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1035.0" y="414.0">C2Compiler::comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (24 samples, 10.71%)</title><rect x="1032.0" y="387.0" width="126.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1035.0" y="398.0">Compile::Compile..</text>
</g>
<g>
<title>CallGenerator::for_osr(ciMethod*, int) (1 samples, 0.45%)</title><rect x="1032.0" y="371.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1035.0" y="382.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.45%)</title><rect x="1032.0" y="355.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1035.0" y="366.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.45%)</title><rect x="1032.0" y="339.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1035.0" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.45%)</title><rect x="1032.0" y="323.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1035.0" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.45%)</title><rect x="1032.0" y="307.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1035.0" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.45%)</title><rect x="1032.0" y="291.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1035.0" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.45%)</title><rect x="1032.0" y="275.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1035.0" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.45%)</title><rect x="1032.0" y="259.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1035.0" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.45%)</title><rect x="1032.0" y="243.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1035.0" y="254.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.45%)</title><rect x="1032.0" y="227.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1035.0" y="238.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.45%)</title><rect x="1032.0" y="211.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1035.0" y="222.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.45%)</title><rect x="1032.0" y="195.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1035.0" y="206.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.45%)</title><rect x="1032.0" y="179.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1035.0" y="190.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.45%)</title><rect x="1032.0" y="163.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1035.0" y="174.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.45%)</title><rect x="1032.0" y="147.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1035.0" y="158.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.45%)</title><rect x="1032.0" y="131.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1035.0" y="142.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.45%)</title><rect x="1032.0" y="115.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1035.0" y="126.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.45%)</title><rect x="1032.0" y="99.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1035.0" y="110.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::OverpassLookupMode) const (1 samples, 0.45%)</title><rect x="1032.0" y="83.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1035.0" y="94.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.45%)</title><rect x="1032.0" y="67.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1035.0" y="78.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt;*, Symbol*) (1 samples, 0.45%)</title><rect x="1032.0" y="51.0" width="5.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1035.0" y="62.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (11 samples, 4.91%)</title><rect x="1037.2" y="371.0" width="58.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1040.2" y="382.0">Compil..</text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.45%)</title><rect x="1037.2" y="355.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1040.2" y="366.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.45%)</title><rect x="1037.2" y="339.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1040.2" y="350.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.45%)</title><rect x="1037.2" y="323.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1040.2" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (10 samples, 4.46%)</title><rect x="1042.5" y="355.0" width="52.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1045.5" y="366.0">Phase..</text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.45%)</title><rect x="1042.5" y="339.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1045.5" y="350.0"></text>
</g>
<g>
<title>LiveRangeMap::find(Node const*) (1 samples, 0.45%)</title><rect x="1042.5" y="323.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1045.5" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.89%)</title><rect x="1047.8" y="339.0" width="10.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1050.8" y="350.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.45%)</title><rect x="1047.8" y="323.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1050.8" y="334.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.45%)</title><rect x="1047.8" y="307.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1050.8" y="318.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.45%)</title><rect x="1053.0" y="323.0" width="5.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1056.0" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.45%)</title><rect x="1058.3" y="339.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1061.3" y="350.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.45%)</title><rect x="1058.3" y="323.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.3" y="334.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.45%)</title><rect x="1058.3" y="307.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.3" y="318.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.45%)</title><rect x="1063.6" y="339.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1066.6" y="350.0"></text>
</g>
<g>
<title>Block::end_idx() const (1 samples, 0.45%)</title><rect x="1063.6" y="323.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1066.6" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.45%)</title><rect x="1068.8" y="339.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1071.8" y="350.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.45%)</title><rect x="1068.8" y="323.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1071.8" y="334.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.45%)</title><rect x="1068.8" y="307.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1071.8" y="318.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.45%)</title><rect x="1074.1" y="339.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1077.1" y="350.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.45%)</title><rect x="1074.1" y="323.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1077.1" y="334.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.45%)</title><rect x="1079.4" y="339.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1082.4" y="350.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.45%)</title><rect x="1079.4" y="323.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1082.4" y="334.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.45%)</title><rect x="1079.4" y="307.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1082.4" y="318.0"></text>
</g>
<g>
<title>Block::has_uncommon_code() const (1 samples, 0.45%)</title><rect x="1079.4" y="291.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1082.4" y="302.0"></text>
</g>
<g>
<title>Block::end() const (1 samples, 0.45%)</title><rect x="1079.4" y="275.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1082.4" y="286.0"></text>
</g>
<g>
<title>Block::end_idx() const (1 samples, 0.45%)</title><rect x="1079.4" y="259.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1082.4" y="270.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.45%)</title><rect x="1084.6" y="339.0" width="5.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1087.6" y="350.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.45%)</title><rect x="1084.6" y="323.0" width="5.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1087.6" y="334.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.45%)</title><rect x="1084.6" y="307.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1087.6" y="318.0"></text>
</g>
<g>
<title>RegMask::find_last_elem() const (1 samples, 0.45%)</title><rect x="1089.9" y="339.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.9" y="350.0"></text>
</g>
<g>
<title>Compile::Optimize() (8 samples, 3.57%)</title><rect x="1095.2" y="371.0" width="42.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.2" y="382.0">Comp..</text>
</g>
<g>
<title>MergeMemNode::bottom_type() const (1 samples, 0.45%)</title><rect x="1095.2" y="355.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1098.2" y="366.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.45%)</title><rect x="1100.4" y="355.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1103.4" y="366.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (5 samples, 2.23%)</title><rect x="1105.7" y="355.0" width="26.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1108.7" y="366.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.45%)</title><rect x="1105.7" y="339.0" width="5.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1108.7" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.45%)</title><rect x="1105.7" y="323.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1108.7" y="334.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 1.34%)</title><rect x="1111.0" y="339.0" width="15.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1114.0" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.45%)</title><rect x="1121.5" y="323.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.5" y="334.0"></text>
</g>
<g>
<title>Node_Array::Node_Array(Arena*) (1 samples, 0.45%)</title><rect x="1121.5" y="307.0" width="5.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.5" y="318.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.45%)</title><rect x="1126.8" y="339.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.8" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.45%)</title><rect x="1126.8" y="323.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.8" y="334.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.45%)</title><rect x="1126.8" y="307.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1129.8" y="318.0"></text>
</g>
<g>
<title>TraceTime::TraceTime(char const*, elapsedTimer*, bool, bool) (1 samples, 0.45%)</title><rect x="1132.1" y="355.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.1" y="366.0"></text>
</g>
<g>
<title>CompileWrapper::CompileWrapper(Compile*) (1 samples, 0.45%)</title><rect x="1137.3" y="371.0" width="5.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.3" y="382.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.45%)</title><rect x="1137.3" y="355.0" width="5.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.3" y="366.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.45%)</title><rect x="1137.3" y="339.0" width="5.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.3" y="350.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.45%)</title><rect x="1137.3" y="323.0" width="5.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1140.3" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.89%)</title><rect x="1142.6" y="371.0" width="10.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.6" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.89%)</title><rect x="1142.6" y="355.0" width="10.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.89%)</title><rect x="1142.6" y="339.0" width="10.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.89%)</title><rect x="1142.6" y="323.0" width="10.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.89%)</title><rect x="1142.6" y="307.0" width="10.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.89%)</title><rect x="1142.6" y="291.0" width="10.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.6" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.89%)</title><rect x="1142.6" y="275.0" width="10.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.6" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.89%)</title><rect x="1142.6" y="259.0" width="10.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.89%)</title><rect x="1142.6" y="243.0" width="10.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.89%)</title><rect x="1142.6" y="227.0" width="10.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.89%)</title><rect x="1142.6" y="211.0" width="10.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1142.6" y="195.0" width="5.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.6" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1142.6" y="179.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.6" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1142.6" y="163.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1142.6" y="147.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1142.6" y="131.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.45%)</title><rect x="1142.6" y="115.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.6" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1142.6" y="99.0" width="5.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.6" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1142.6" y="83.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.6" y="94.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1142.6" y="67.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.6" y="78.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.45%)</title><rect x="1142.6" y="51.0" width="5.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.6" y="62.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.45%)</title><rect x="1142.6" y="35.0" width="5.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.6" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.45%)</title><rect x="1147.9" y="195.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.45%)</title><rect x="1147.9" y="179.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.9" y="190.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.45%)</title><rect x="1147.9" y="163.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.9" y="174.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.45%)</title><rect x="1153.1" y="371.0" width="5.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.1" y="382.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.45%)</title><rect x="1153.1" y="355.0" width="5.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.1" y="366.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.45%)</title><rect x="1153.1" y="339.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.1" y="350.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.45%)</title><rect x="1158.4" y="403.0" width="5.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.4" y="414.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.45%)</title><rect x="1158.4" y="387.0" width="5.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.4" y="398.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.45%)</title><rect x="1158.4" y="371.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.4" y="382.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.45%)</title><rect x="1158.4" y="355.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.4" y="366.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.45%)</title><rect x="1158.4" y="339.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.4" y="350.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.45%)</title><rect x="1158.4" y="323.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.4" y="334.0"></text>
</g>
<g>
<title>LinearScan::add_register_hints(LIR_Op*) (1 samples, 0.45%)</title><rect x="1158.4" y="307.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.4" y="318.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.89%)</title><rect x="1163.7" y="419.0" width="10.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.7" y="430.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.89%)</title><rect x="1163.7" y="403.0" width="10.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.7" y="414.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.89%)</title><rect x="1163.7" y="387.0" width="10.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.7" y="398.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.89%)</title><rect x="1163.7" y="371.0" width="10.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.7" y="382.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.89%)</title><rect x="1163.7" y="355.0" width="10.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1166.7" y="366.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (2 samples, 0.89%)</title><rect x="1174.2" y="435.0" width="10.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1177.2" y="446.0"></text>
</g>
<g>
<title>AttachListener::dequeue() (1 samples, 0.45%)</title><rect x="1174.2" y="419.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.2" y="430.0"></text>
</g>
<g>
<title>__accept (1 samples, 0.45%)</title><rect x="1174.2" y="403.0" width="5.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1177.2" y="414.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(AttachOperation*, outputStream*) (1 samples, 0.45%)</title><rect x="1179.5" y="419.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.5" y="430.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.45%)</title><rect x="1179.5" y="403.0" width="5.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1182.5" y="414.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.45%)</title><rect x="1179.5" y="387.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.5" y="398.0"></text>
</g>
<g>
<title>Profiler::runInternal(Arguments&amp;, std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;) (1 samples, 0.45%)</title><rect x="1179.5" y="371.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.5" y="382.0"></text>
</g>
<g>
<title>std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;::flush() (1 samples, 0.45%)</title><rect x="1179.5" y="355.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.5" y="366.0"></text>
</g>
<g>
<title>std::__1::basic_filebuf&lt;char, std::__1::char_traits&lt;char&gt; &gt;::sync() (1 samples, 0.45%)</title><rect x="1179.5" y="339.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.5" y="350.0"></text>
</g>
<g>
<title>fflush (1 samples, 0.45%)</title><rect x="1179.5" y="323.0" width="5.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1182.5" y="334.0"></text>
</g>
<g>
<title>__sflush (1 samples, 0.45%)</title><rect x="1179.5" y="307.0" width="5.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1182.5" y="318.0"></text>
</g>
<g>
<title>write$NOCANCEL (1 samples, 0.45%)</title><rect x="1179.5" y="291.0" width="5.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1182.5" y="302.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.45%)</title><rect x="1184.7" y="467.0" width="5.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.7" y="478.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.45%)</title><rect x="1184.7" y="451.0" width="5.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.7" y="462.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.45%)</title><rect x="1184.7" y="435.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.7" y="446.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.45%)</title><rect x="1184.7" y="419.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.7" y="430.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.45%)</title><rect x="1184.7" y="403.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.7" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.45%)</title><rect x="1184.7" y="387.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.7" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.45%)</title><rect x="1184.7" y="371.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.7" y="382.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.45%)</title><rect x="1184.7" y="355.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.7" y="366.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.45%)</title><rect x="1184.7" y="339.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.7" y="350.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.45%)</title><rect x="1184.7" y="323.0" width="5.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1187.7" y="334.0"></text>
</g>
</g>
</svg>
