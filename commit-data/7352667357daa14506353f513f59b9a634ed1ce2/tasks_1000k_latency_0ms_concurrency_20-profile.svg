<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,341 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2035.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2019.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2003.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1987.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1971.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1955.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1939.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1923.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1907.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1891.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1875.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1859.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1827.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1811.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1795.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1779.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1763.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1747.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1731.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1715.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1699.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1683.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1667.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1651.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1635.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1619.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1603.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1587.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1571.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1555.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1539.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1523.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1507.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1491.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1475.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1459.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1443.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1427.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1395.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1379.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1315.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1299.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1283.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1267.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1251.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1235.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1219.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1203.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1187.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1171.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1155.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1107.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1091.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="979.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="963.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="947.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="931.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="915.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="899.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="835.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="819.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="803.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="787.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="771.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="755.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="739.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="723.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="707.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="691.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="675.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="659.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="643.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="627.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="611.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="595.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="579.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="563.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="547.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="531.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="515.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="499.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="483.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="467.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="451.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="435.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="419.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="403.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="387.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="371.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="355.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="339.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="323.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="307.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="291.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="275.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="259.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="243.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="227.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="211.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="195.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="179.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="163.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="147.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="131.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="115.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="99.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="83.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="67.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="51.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="35.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.07%)</title><rect x="10.9" y="2035.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.9" y="2046.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (263 samples, 19.61%)</title><rect x="11.8" y="2035.0" width="231.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.8" y="2046.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (263 samples, 19.61%)</title><rect x="11.8" y="2019.0" width="231.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.8" y="2030.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (3 samples, 0.22%)</title><rect x="12.6" y="2003.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.6" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.22%)</title><rect x="12.6" y="1987.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.6" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1415701699.accept (3 samples, 0.22%)</title><rect x="12.6" y="1971.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.6" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (3 samples, 0.22%)</title><rect x="12.6" y="1955.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.6" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.22%)</title><rect x="12.6" y="1939.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.6" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.15%)</title><rect x="13.5" y="1923.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.5" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.15%)</title><rect x="15.3" y="2003.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.3" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.15%)</title><rect x="15.3" y="1987.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.3" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.15%)</title><rect x="15.3" y="1971.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.3" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.15%)</title><rect x="15.3" y="1955.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="18.3" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.07%)</title><rect x="15.3" y="1939.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="18.3" y="1950.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.07%)</title><rect x="15.3" y="1923.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.3" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="15.3" y="1907.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.3" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="15.3" y="1891.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.3" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="15.3" y="1875.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="16.2" y="1939.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.2" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="16.2" y="1923.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="16.2" y="1907.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.2" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="16.2" y="1891.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.2" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="16.2" y="1875.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.2" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="16.2" y="1859.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.2" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="16.2" y="1843.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.2" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$169/429372467.get (1 samples, 0.07%)</title><rect x="16.2" y="1827.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (200 samples, 14.91%)</title><rect x="17.0" y="2003.0" width="176.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.0" y="2014.0">java/lang/Iterable.forE..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/149208169.accept (197 samples, 14.69%)</title><rect x="17.0" y="1987.0" width="173.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.0" y="1998.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (195 samples, 14.54%)</title><rect x="18.8" y="1971.0" width="171.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="21.8" y="1982.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (2 samples, 0.15%)</title><rect x="18.8" y="1955.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="21.8" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (153 samples, 11.41%)</title><rect x="20.6" y="1955.0" width="134.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.6" y="1966.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (153 samples, 11.41%)</title><rect x="20.6" y="1939.0" width="134.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="23.6" y="1950.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (153 samples, 11.41%)</title><rect x="20.6" y="1923.0" width="134.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.6" y="1934.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (153 samples, 11.41%)</title><rect x="20.6" y="1907.0" width="134.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.6" y="1918.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (153 samples, 11.41%)</title><rect x="20.6" y="1891.0" width="134.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.6" y="1902.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (153 samples, 11.41%)</title><rect x="20.6" y="1875.0" width="134.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.6" y="1886.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (116 samples, 8.65%)</title><rect x="20.6" y="1859.0" width="102.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.6" y="1870.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (34 samples, 2.54%)</title><rect x="20.6" y="1843.0" width="29.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.6" y="1854.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (34 samples, 2.54%)</title><rect x="20.6" y="1827.0" width="29.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.6" y="1838.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (24 samples, 1.79%)</title><rect x="29.4" y="1811.0" width="21.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="32.4" y="1822.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (24 samples, 1.79%)</title><rect x="29.4" y="1795.0" width="21.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.4" y="1806.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.22%)</title><rect x="50.5" y="1843.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="53.5" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (3 samples, 0.22%)</title><rect x="50.5" y="1827.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.5" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.15%)</title><rect x="50.5" y="1811.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="53.5" y="1822.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.15%)</title><rect x="50.5" y="1795.0" width="1.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="53.5" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.07%)</title><rect x="52.2" y="1811.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="55.2" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (79 samples, 5.89%)</title><rect x="53.1" y="1843.0" width="69.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.1" y="1854.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (79 samples, 5.89%)</title><rect x="53.1" y="1827.0" width="69.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="56.1" y="1838.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (78 samples, 5.82%)</title><rect x="53.1" y="1811.0" width="68.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="56.1" y="1822.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (78 samples, 5.82%)</title><rect x="53.1" y="1795.0" width="68.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="56.1" y="1806.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (75 samples, 5.59%)</title><rect x="55.8" y="1779.0" width="66.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="58.8" y="1790.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (69 samples, 5.15%)</title><rect x="55.8" y="1763.0" width="60.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="58.8" y="1774.0">Unsafe..</text>
</g>
<g>
<title>__pthread_cond_signal (52 samples, 3.88%)</title><rect x="57.5" y="1747.0" width="45.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="60.5" y="1758.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.15%)</title><rect x="103.3" y="1747.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="106.3" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 0.97%)</title><rect x="105.0" y="1747.0" width="11.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="108.0" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.30%)</title><rect x="116.5" y="1763.0" width="3.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="119.5" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.07%)</title><rect x="120.0" y="1763.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="123.0" y="1774.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="120.9" y="1763.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="123.9" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.07%)</title><rect x="121.8" y="1811.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="124.8" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (37 samples, 2.76%)</title><rect x="122.6" y="1859.0" width="32.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="125.6" y="1870.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (37 samples, 2.76%)</title><rect x="122.6" y="1843.0" width="32.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="125.6" y="1854.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (37 samples, 2.76%)</title><rect x="122.6" y="1827.0" width="32.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="125.6" y="1838.0">ja..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="154.3" y="1811.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="157.3" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (3 samples, 0.22%)</title><rect x="155.2" y="1955.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="158.2" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.22%)</title><rect x="155.2" y="1939.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="158.2" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (5 samples, 0.37%)</title><rect x="157.8" y="1955.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="160.8" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.37%)</title><rect x="157.8" y="1939.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="160.8" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.37%)</title><rect x="157.8" y="1923.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="160.8" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (32 samples, 2.39%)</title><rect x="162.2" y="1955.0" width="28.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="165.2" y="1966.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (14 samples, 1.04%)</title><rect x="176.3" y="1939.0" width="12.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="179.3" y="1950.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (14 samples, 1.04%)</title><rect x="176.3" y="1923.0" width="12.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.3" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.67%)</title><rect x="176.3" y="1907.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.3" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 0.67%)</title><rect x="176.3" y="1891.0" width="7.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="179.3" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.67%)</title><rect x="176.3" y="1875.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="179.3" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="180.7" y="1859.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="183.7" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="180.7" y="1843.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="183.7" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="180.7" y="1827.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="183.7" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.22%)</title><rect x="181.6" y="1859.0" width="2.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="184.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (5 samples, 0.37%)</title><rect x="184.2" y="1907.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="187.2" y="1918.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="188.6" y="1939.0" width="1.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="191.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.22%)</title><rect x="190.4" y="1987.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="193.4" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.22%)</title><rect x="190.4" y="1971.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="193.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.22%)</title><rect x="190.4" y="1955.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="193.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.22%)</title><rect x="190.4" y="1939.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="193.4" y="1950.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.07%)</title><rect x="192.1" y="1923.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="195.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (57 samples, 4.25%)</title><rect x="193.0" y="2003.0" width="50.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="196.0" y="2014.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (57 samples, 4.25%)</title><rect x="193.0" y="1987.0" width="50.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.0" y="1998.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (37 samples, 2.76%)</title><rect x="193.0" y="1971.0" width="32.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="196.0" y="1982.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (37 samples, 2.76%)</title><rect x="193.0" y="1955.0" width="32.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="196.0" y="1966.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (37 samples, 2.76%)</title><rect x="193.0" y="1939.0" width="32.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="196.0" y="1950.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (32 samples, 2.39%)</title><rect x="193.0" y="1923.0" width="28.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.0" y="1934.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (32 samples, 2.39%)</title><rect x="193.0" y="1907.0" width="28.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="196.0" y="1918.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (20 samples, 1.49%)</title><rect x="193.0" y="1891.0" width="17.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="196.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (8 samples, 0.60%)</title><rect x="201.8" y="1875.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="204.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (8 samples, 0.60%)</title><rect x="201.8" y="1859.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="204.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (8 samples, 0.60%)</title><rect x="201.8" y="1843.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="204.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (8 samples, 0.60%)</title><rect x="201.8" y="1827.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="204.8" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (8 samples, 0.60%)</title><rect x="201.8" y="1811.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="204.8" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (8 samples, 0.60%)</title><rect x="201.8" y="1795.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="204.8" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (8 samples, 0.60%)</title><rect x="201.8" y="1779.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="204.8" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.07%)</title><rect x="208.9" y="1875.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="211.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.07%)</title><rect x="208.9" y="1859.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="211.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.07%)</title><rect x="208.9" y="1843.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="211.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="209.7" y="1875.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="212.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.07%)</title><rect x="209.7" y="1859.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="212.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="209.7" y="1843.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="212.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="209.7" y="1827.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="212.7" y="1838.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.07%)</title><rect x="209.7" y="1811.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="212.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (12 samples, 0.89%)</title><rect x="210.6" y="1891.0" width="10.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="213.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 0.89%)</title><rect x="210.6" y="1875.0" width="10.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="213.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (12 samples, 0.89%)</title><rect x="210.6" y="1859.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="213.6" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (12 samples, 0.89%)</title><rect x="210.6" y="1843.0" width="10.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="213.6" y="1854.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (10 samples, 0.75%)</title><rect x="212.4" y="1827.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="215.4" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (10 samples, 0.75%)</title><rect x="212.4" y="1811.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.4" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (10 samples, 0.75%)</title><rect x="212.4" y="1795.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="215.4" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (10 samples, 0.75%)</title><rect x="212.4" y="1779.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="215.4" y="1790.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="219.4" y="1763.0" width="1.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="222.4" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.22%)</title><rect x="221.2" y="1923.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="224.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.22%)</title><rect x="221.2" y="1907.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="224.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (2 samples, 0.15%)</title><rect x="221.2" y="1891.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="224.2" y="1902.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (2 samples, 0.15%)</title><rect x="221.2" y="1875.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="224.2" y="1886.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (2 samples, 0.15%)</title><rect x="221.2" y="1859.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="224.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="222.9" y="1891.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="225.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="222.9" y="1875.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="225.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.15%)</title><rect x="223.8" y="1923.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="226.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.15%)</title><rect x="223.8" y="1907.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="226.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="223.8" y="1891.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="226.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="224.7" y="1875.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="227.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="224.7" y="1859.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="227.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.67%)</title><rect x="225.6" y="1971.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="228.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.60%)</title><rect x="225.6" y="1955.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.60%)</title><rect x="225.6" y="1939.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.6" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.22%)</title><rect x="225.6" y="1923.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1790680995.accept (3 samples, 0.22%)</title><rect x="225.6" y="1907.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (3 samples, 0.22%)</title><rect x="225.6" y="1891.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="225.6" y="1875.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.07%)</title><rect x="225.6" y="1859.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="228.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$211/149904124.apply (1 samples, 0.07%)</title><rect x="225.6" y="1843.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="228.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.07%)</title><rect x="225.6" y="1827.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (2 samples, 0.15%)</title><rect x="226.5" y="1875.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="229.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.07%)</title><rect x="226.5" y="1859.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.07%)</title><rect x="226.5" y="1843.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.5" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.07%)</title><rect x="227.3" y="1859.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.07%)</title><rect x="227.3" y="1843.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.3" y="1854.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="227.3" y="1827.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="230.3" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="227.3" y="1811.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.3" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="228.2" y="1923.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="228.2" y="1907.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.2" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="228.2" y="1891.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.2" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="228.2" y="1875.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="231.2" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="228.2" y="1859.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.2" y="1870.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="228.2" y="1843.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="231.2" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.07%)</title><rect x="228.2" y="1827.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="231.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.15%)</title><rect x="229.1" y="1923.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="232.1" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="230.0" y="1907.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="233.0" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="230.0" y="1891.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.0" y="1902.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="230.0" y="1875.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="233.0" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="230.0" y="1859.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.15%)</title><rect x="230.9" y="1923.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="233.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.15%)</title><rect x="230.9" y="1907.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="233.9" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="231.7" y="1891.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="234.7" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="231.7" y="1875.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="231.7" y="1859.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.7" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="231.7" y="1843.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.7" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="231.7" y="1827.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.7" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="231.7" y="1811.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="234.7" y="1822.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="231.7" y="1795.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.7" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="231.7" y="1779.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="234.7" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="231.7" y="1763.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="234.7" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="231.7" y="1747.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="234.7" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$214/1595575088.test (1 samples, 0.07%)</title><rect x="231.7" y="1731.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.7" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.07%)</title><rect x="232.6" y="1955.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="235.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.07%)</title><rect x="232.6" y="1939.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="235.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.subscription (1 samples, 0.07%)</title><rect x="232.6" y="1923.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="235.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.07%)</title><rect x="233.5" y="1971.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.07%)</title><rect x="233.5" y="1955.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.isEmpty (1 samples, 0.07%)</title><rect x="233.5" y="1939.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="236.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (8 samples, 0.60%)</title><rect x="234.4" y="1971.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (8 samples, 0.60%)</title><rect x="234.4" y="1955.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.07%)</title><rect x="234.4" y="1939.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.07%)</title><rect x="234.4" y="1923.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="237.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.07%)</title><rect x="234.4" y="1907.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="237.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/Errors.forCode (1 samples, 0.07%)</title><rect x="234.4" y="1891.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.4" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="234.4" y="1875.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.4" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="234.4" y="1859.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="237.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.07%)</title><rect x="235.3" y="1939.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.07%)</title><rect x="235.3" y="1923.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="238.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.hasExpiredRequest (1 samples, 0.07%)</title><rect x="235.3" y="1907.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="238.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.45%)</title><rect x="236.1" y="1939.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="239.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="236.1" y="1923.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="239.1" y="1934.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="236.1" y="1907.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="239.1" y="1918.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="236.1" y="1891.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="239.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="237.0" y="1907.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.07%)</title><rect x="237.0" y="1891.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="240.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.07%)</title><rect x="237.0" y="1875.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="240.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="237.0" y="1859.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="240.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.07%)</title><rect x="237.9" y="1923.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="240.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.07%)</title><rect x="237.9" y="1907.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.07%)</title><rect x="237.9" y="1891.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="240.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="237.9" y="1875.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="237.9" y="1859.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="240.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="237.9" y="1843.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="240.9" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.07%)</title><rect x="237.9" y="1827.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.9" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.15%)</title><rect x="238.8" y="1923.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.15%)</title><rect x="238.8" y="1907.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="241.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.15%)</title><rect x="238.8" y="1891.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="241.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.15%)</title><rect x="238.8" y="1875.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.15%)</title><rect x="238.8" y="1859.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="241.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.15%)</title><rect x="238.8" y="1843.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="241.8" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.15%)</title><rect x="238.8" y="1827.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="241.8" y="1838.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.07%)</title><rect x="238.8" y="1811.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.8" y="1822.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="239.7" y="1811.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="242.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.07%)</title><rect x="240.5" y="1923.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="243.5" y="1934.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.07%)</title><rect x="240.5" y="1907.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="243.5" y="1918.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.07%)</title><rect x="240.5" y="1891.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.5" y="1902.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.07%)</title><rect x="240.5" y="1875.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="243.5" y="1886.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.07%)</title><rect x="240.5" y="1859.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="243.5" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="240.5" y="1843.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="243.5" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="240.5" y="1827.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="243.5" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.15%)</title><rect x="241.4" y="1971.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.15%)</title><rect x="241.4" y="1955.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.07%)</title><rect x="241.4" y="1939.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="244.4" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.07%)</title><rect x="241.4" y="1923.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="244.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.07%)</title><rect x="241.4" y="1907.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="244.4" y="1918.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.07%)</title><rect x="241.4" y="1891.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="244.4" y="1902.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.07%)</title><rect x="241.4" y="1875.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="244.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.07%)</title><rect x="242.3" y="1939.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.07%)</title><rect x="242.3" y="1923.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="245.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.07%)</title><rect x="242.3" y="1907.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.07%)</title><rect x="242.3" y="1891.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.3" y="1902.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="242.3" y="1875.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="245.3" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="242.3" y="1859.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="245.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.07%)</title><rect x="242.3" y="1843.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/Thread.run (718 samples, 53.54%)</title><rect x="243.2" y="2035.0" width="631.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="246.2" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (718 samples, 53.54%)</title><rect x="243.2" y="2019.0" width="631.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="246.2" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (718 samples, 53.54%)</title><rect x="243.2" y="2003.0" width="631.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="246.2" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/561460082.run (468 samples, 34.90%)</title><rect x="246.7" y="1987.0" width="411.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="249.7" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$La..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (468 samples, 34.90%)</title><rect x="246.7" y="1971.0" width="411.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="249.7" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lam..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (468 samples, 34.90%)</title><rect x="246.7" y="1955.0" width="411.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="249.7" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (463 samples, 34.53%)</title><rect x="246.7" y="1939.0" width="407.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="249.7" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.07%)</title><rect x="255.5" y="1923.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="258.5" y="1934.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.07%)</title><rect x="255.5" y="1907.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="258.5" y="1918.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.07%)</title><rect x="255.5" y="1891.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="258.5" y="1902.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.07%)</title><rect x="255.5" y="1875.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="258.5" y="1886.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.07%)</title><rect x="255.5" y="1859.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="258.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.07%)</title><rect x="255.5" y="1843.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="258.5" y="1854.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.07%)</title><rect x="256.4" y="1923.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="259.4" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (154 samples, 11.48%)</title><rect x="257.3" y="1923.0" width="135.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="260.3" y="1934.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (154 samples, 11.48%)</title><rect x="257.3" y="1907.0" width="135.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="260.3" y="1918.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (154 samples, 11.48%)</title><rect x="257.3" y="1891.0" width="135.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.3" y="1902.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (154 samples, 11.48%)</title><rect x="257.3" y="1875.0" width="135.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="260.3" y="1886.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (154 samples, 11.48%)</title><rect x="257.3" y="1859.0" width="135.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="260.3" y="1870.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (154 samples, 11.48%)</title><rect x="257.3" y="1843.0" width="135.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="260.3" y="1854.0">com/fasterxml/jac..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (42 samples, 3.13%)</title><rect x="257.3" y="1827.0" width="36.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="260.3" y="1838.0">com..</text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.67%)</title><rect x="264.3" y="1811.0" width="7.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="267.3" y="1822.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.52%)</title><rect x="266.1" y="1795.0" width="6.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="269.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 0.52%)</title><rect x="272.2" y="1811.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="275.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 0.30%)</title><rect x="274.9" y="1795.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="277.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.30%)</title><rect x="274.9" y="1779.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="277.9" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.22%)</title><rect x="274.9" y="1763.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="277.9" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.22%)</title><rect x="274.9" y="1747.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.9" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.22%)</title><rect x="274.9" y="1731.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.9" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.07%)</title><rect x="277.5" y="1763.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="280.5" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.07%)</title><rect x="277.5" y="1747.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="280.5" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.07%)</title><rect x="277.5" y="1731.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="280.5" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.07%)</title><rect x="277.5" y="1715.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="280.5" y="1726.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="277.5" y="1699.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="280.5" y="1710.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="277.5" y="1683.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="280.5" y="1694.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="277.5" y="1667.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="280.5" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (18 samples, 1.34%)</title><rect x="278.4" y="1811.0" width="15.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (8 samples, 0.60%)</title><rect x="287.2" y="1795.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="290.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 0.37%)</title><rect x="287.2" y="1779.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="290.2" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="287.2" y="1763.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="290.2" y="1774.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="287.2" y="1747.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="290.2" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="287.2" y="1731.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="290.2" y="1742.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="287.2" y="1715.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="290.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (4 samples, 0.30%)</title><rect x="288.1" y="1763.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="291.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.15%)</title><rect x="291.6" y="1779.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="294.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.15%)</title><rect x="291.6" y="1763.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="294.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.07%)</title><rect x="291.6" y="1747.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="294.6" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="291.6" y="1731.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="294.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.07%)</title><rect x="292.5" y="1747.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.5" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="292.5" y="1731.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="295.5" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="292.5" y="1715.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="295.5" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="292.5" y="1699.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="295.5" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="292.5" y="1683.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="295.5" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.07%)</title><rect x="293.3" y="1779.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (101 samples, 7.53%)</title><rect x="294.2" y="1827.0" width="88.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="297.2" y="1838.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.15%)</title><rect x="295.1" y="1811.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="298.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.07%)</title><rect x="296.9" y="1811.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="299.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 0.45%)</title><rect x="297.7" y="1811.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.7" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.30%)</title><rect x="299.5" y="1795.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="302.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (12 samples, 0.89%)</title><rect x="303.0" y="1811.0" width="10.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="306.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 0.89%)</title><rect x="303.0" y="1795.0" width="10.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="306.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (9 samples, 0.67%)</title><rect x="304.8" y="1779.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="307.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (8 samples, 0.60%)</title><rect x="305.7" y="1763.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="308.7" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="310.1" y="1747.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="313.1" y="1758.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="310.1" y="1731.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="313.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.15%)</title><rect x="310.9" y="1747.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="313.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="312.7" y="1779.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="315.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 0.52%)</title><rect x="313.6" y="1811.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="316.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.30%)</title><rect x="316.2" y="1795.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="319.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (69 samples, 5.15%)</title><rect x="319.7" y="1811.0" width="60.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="322.7" y="1822.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.27%)</title><rect x="320.6" y="1795.0" width="15.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="323.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.45%)</title><rect x="324.1" y="1779.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="327.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.45%)</title><rect x="324.1" y="1763.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="327.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.45%)</title><rect x="324.1" y="1747.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="327.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (6 samples, 0.45%)</title><rect x="324.1" y="1731.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.07%)</title><rect x="328.5" y="1715.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="331.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.07%)</title><rect x="329.4" y="1779.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="332.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.07%)</title><rect x="329.4" y="1763.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="332.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.07%)</title><rect x="329.4" y="1747.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="332.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.07%)</title><rect x="329.4" y="1731.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="332.4" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.getAndSet (1 samples, 0.07%)</title><rect x="329.4" y="1715.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="332.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.07%)</title><rect x="330.3" y="1779.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="333.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.07%)</title><rect x="330.3" y="1763.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="333.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (5 samples, 0.37%)</title><rect x="331.2" y="1779.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="334.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.07%)</title><rect x="335.6" y="1795.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="338.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (50 samples, 3.73%)</title><rect x="336.5" y="1795.0" width="44.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="339.5" y="1806.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (50 samples, 3.73%)</title><rect x="336.5" y="1779.0" width="44.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="339.5" y="1790.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (49 samples, 3.65%)</title><rect x="337.3" y="1763.0" width="43.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="340.3" y="1774.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.67%)</title><rect x="339.1" y="1747.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="342.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.07%)</title><rect x="340.9" y="1731.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="343.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.37%)</title><rect x="341.7" y="1731.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="344.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.37%)</title><rect x="341.7" y="1715.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="344.7" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.37%)</title><rect x="341.7" y="1699.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="344.7" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.07%)</title><rect x="341.7" y="1683.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="344.7" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.30%)</title><rect x="342.6" y="1683.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="345.6" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="346.1" y="1731.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="349.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (10 samples, 0.75%)</title><rect x="347.0" y="1747.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="350.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (8 samples, 0.60%)</title><rect x="348.8" y="1731.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="351.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.60%)</title><rect x="348.8" y="1715.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="351.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.60%)</title><rect x="348.8" y="1699.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="351.8" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (8 samples, 0.60%)</title><rect x="348.8" y="1683.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="351.8" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.15%)</title><rect x="355.8" y="1747.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="358.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.60%)</title><rect x="357.6" y="1747.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="360.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.60%)</title><rect x="357.6" y="1731.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="360.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.60%)</title><rect x="357.6" y="1715.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="360.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (8 samples, 0.60%)</title><rect x="357.6" y="1699.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="360.6" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (8 samples, 0.60%)</title><rect x="357.6" y="1683.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="360.6" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 0.37%)</title><rect x="358.5" y="1667.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="361.5" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor10.newInstance (2 samples, 0.15%)</title><rect x="361.1" y="1651.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="364.1" y="1662.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor10.newInstance (2 samples, 0.15%)</title><rect x="362.9" y="1667.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="365.9" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.52%)</title><rect x="364.6" y="1747.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="367.6" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.52%)</title><rect x="364.6" y="1731.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="367.6" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.52%)</title><rect x="364.6" y="1715.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="367.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="369.9" y="1699.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="372.9" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (11 samples, 0.82%)</title><rect x="370.8" y="1747.0" width="9.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="373.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (2 samples, 0.15%)</title><rect x="378.7" y="1731.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="381.7" y="1742.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.15%)</title><rect x="378.7" y="1715.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="381.7" y="1726.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.15%)</title><rect x="378.7" y="1699.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="381.7" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.15%)</title><rect x="378.7" y="1683.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="381.7" y="1694.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="379.6" y="1667.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="382.6" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (2 samples, 0.15%)</title><rect x="380.5" y="1811.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="383.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.07%)</title><rect x="382.2" y="1811.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="385.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 0.82%)</title><rect x="383.1" y="1827.0" width="9.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="386.1" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (11 samples, 0.82%)</title><rect x="383.1" y="1811.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="386.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (11 samples, 0.82%)</title><rect x="383.1" y="1795.0" width="9.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="386.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (11 samples, 0.82%)</title><rect x="383.1" y="1779.0" width="9.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="386.1" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (11 samples, 0.82%)</title><rect x="383.1" y="1763.0" width="9.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="386.1" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (277 samples, 20.66%)</title><rect x="392.8" y="1923.0" width="243.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="395.8" y="1934.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (39 samples, 2.91%)</title><rect x="392.8" y="1907.0" width="34.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="395.8" y="1918.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (39 samples, 2.91%)</title><rect x="392.8" y="1891.0" width="34.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="395.8" y="1902.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (37 samples, 2.76%)</title><rect x="394.5" y="1875.0" width="32.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="397.5" y="1886.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 0.67%)</title><rect x="394.5" y="1859.0" width="8.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="397.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 0.67%)</title><rect x="394.5" y="1843.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="397.5" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (9 samples, 0.67%)</title><rect x="394.5" y="1827.0" width="8.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="397.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 0.67%)</title><rect x="394.5" y="1811.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="397.5" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.07%)</title><rect x="401.6" y="1795.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="404.6" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.07%)</title><rect x="401.6" y="1779.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="404.6" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (28 samples, 2.09%)</title><rect x="402.5" y="1859.0" width="24.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="405.5" y="1870.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (10 samples, 0.75%)</title><rect x="418.3" y="1843.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="421.3" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 0.75%)</title><rect x="418.3" y="1827.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="421.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.07%)</title><rect x="426.2" y="1811.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="429.2" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (11 samples, 0.82%)</title><rect x="427.1" y="1907.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="430.1" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (10 samples, 0.75%)</title><rect x="428.0" y="1891.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="431.0" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (10 samples, 0.75%)</title><rect x="428.0" y="1875.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="431.0" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (160 samples, 11.93%)</title><rect x="436.8" y="1907.0" width="140.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="439.8" y="1918.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (160 samples, 11.93%)</title><rect x="436.8" y="1891.0" width="140.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="439.8" y="1902.0">com/linecorp/decat..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.45%)</title><rect x="437.7" y="1875.0" width="5.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="440.7" y="1886.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.37%)</title><rect x="438.5" y="1859.0" width="4.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="441.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (50 samples, 3.73%)</title><rect x="442.9" y="1875.0" width="44.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="445.9" y="1886.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (34 samples, 2.54%)</title><rect x="450.0" y="1859.0" width="29.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="453.0" y="1870.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (34 samples, 2.54%)</title><rect x="450.0" y="1843.0" width="29.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="453.0" y="1854.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (20 samples, 1.49%)</title><rect x="455.2" y="1827.0" width="17.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="458.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (20 samples, 1.49%)</title><rect x="455.2" y="1811.0" width="17.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="458.2" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (20 samples, 1.49%)</title><rect x="455.2" y="1795.0" width="17.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="458.2" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.07%)</title><rect x="459.6" y="1779.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="462.6" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (10 samples, 0.75%)</title><rect x="460.5" y="1779.0" width="8.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="463.5" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.22%)</title><rect x="462.3" y="1763.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="465.3" y="1774.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="462.3" y="1747.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="465.3" y="1758.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="462.3" y="1731.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="465.3" y="1742.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.15%)</title><rect x="463.2" y="1747.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="466.2" y="1758.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="463.2" y="1731.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="466.2" y="1742.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.07%)</title><rect x="464.0" y="1731.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="467.0" y="1742.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.37%)</title><rect x="464.9" y="1763.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="467.9" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (5 samples, 0.37%)</title><rect x="464.9" y="1747.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="467.9" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="465.8" y="1731.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="468.8" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="465.8" y="1715.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="468.8" y="1726.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="465.8" y="1699.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="468.8" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="465.8" y="1683.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="468.8" y="1694.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="465.8" y="1667.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="468.8" y="1678.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.07%)</title><rect x="465.8" y="1651.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="468.8" y="1662.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="465.8" y="1635.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="468.8" y="1646.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="465.8" y="1619.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="468.8" y="1630.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="466.7" y="1731.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="469.7" y="1742.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="467.6" y="1731.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="470.6" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="467.6" y="1715.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="470.6" y="1726.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="468.4" y="1731.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="471.4" y="1742.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.30%)</title><rect x="469.3" y="1779.0" width="3.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="472.3" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.37%)</title><rect x="472.8" y="1827.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="475.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="477.2" y="1827.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="480.2" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="478.1" y="1827.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="481.1" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="479.0" y="1827.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="482.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (3 samples, 0.22%)</title><rect x="479.9" y="1859.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="482.9" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="480.8" y="1843.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="483.8" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="480.8" y="1827.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="483.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.07%)</title><rect x="481.6" y="1843.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="484.6" y="1854.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.07%)</title><rect x="481.6" y="1827.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="484.6" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="481.6" y="1811.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="484.6" y="1822.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="482.5" y="1859.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="485.5" y="1870.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.30%)</title><rect x="483.4" y="1859.0" width="3.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="486.4" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.45%)</title><rect x="486.9" y="1875.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="489.9" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.07%)</title><rect x="486.9" y="1859.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="489.9" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="486.9" y="1843.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="489.9" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="486.9" y="1827.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="489.9" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="486.9" y="1811.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="489.9" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="486.9" y="1795.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="489.9" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="486.9" y="1779.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="489.9" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.37%)</title><rect x="487.8" y="1859.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="490.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.37%)</title><rect x="487.8" y="1843.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="490.8" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="491.3" y="1827.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="494.3" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="491.3" y="1811.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="494.3" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="491.3" y="1795.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="494.3" y="1806.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (97 samples, 7.23%)</title><rect x="492.2" y="1875.0" width="85.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="495.2" y="1886.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (83 samples, 6.19%)</title><rect x="502.8" y="1859.0" width="73.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="505.8" y="1870.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.37%)</title><rect x="504.5" y="1843.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="507.5" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.37%)</title><rect x="504.5" y="1827.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="507.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.37%)</title><rect x="504.5" y="1811.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="507.5" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.37%)</title><rect x="504.5" y="1795.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="507.5" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.07%)</title><rect x="508.0" y="1779.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="511.0" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="508.0" y="1763.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="511.0" y="1774.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (76 samples, 5.67%)</title><rect x="508.9" y="1843.0" width="66.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="511.9" y="1854.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (71 samples, 5.29%)</title><rect x="513.3" y="1827.0" width="62.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="516.3" y="1838.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (40 samples, 2.98%)</title><rect x="540.6" y="1811.0" width="35.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="543.6" y="1822.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.22%)</title><rect x="561.7" y="1795.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="564.7" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 0.75%)</title><rect x="564.4" y="1795.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="567.4" y="1806.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.22%)</title><rect x="573.2" y="1795.0" width="2.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="576.2" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (2 samples, 0.15%)</title><rect x="575.8" y="1859.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="578.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (42 samples, 3.13%)</title><rect x="577.6" y="1907.0" width="36.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="580.6" y="1918.0">com..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.07%)</title><rect x="577.6" y="1891.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="580.6" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (41 samples, 3.06%)</title><rect x="578.4" y="1891.0" width="36.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="581.4" y="1902.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="580.2" y="1875.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="583.2" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1404852367.process (20 samples, 1.49%)</title><rect x="581.1" y="1875.0" width="17.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="584.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (20 samples, 1.49%)</title><rect x="581.1" y="1859.0" width="17.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="584.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (15 samples, 1.12%)</title><rect x="581.1" y="1843.0" width="13.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="584.1" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.15%)</title><rect x="589.0" y="1827.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="592.0" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.15%)</title><rect x="589.0" y="1811.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="592.0" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.15%)</title><rect x="589.0" y="1795.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="592.0" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.15%)</title><rect x="589.0" y="1779.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="592.0" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.07%)</title><rect x="589.9" y="1763.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="592.9" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (3 samples, 0.22%)</title><rect x="590.8" y="1827.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="593.8" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.22%)</title><rect x="590.8" y="1811.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="593.8" y="1822.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="590.8" y="1795.0" width="2.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="593.8" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.07%)</title><rect x="593.4" y="1827.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="596.4" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (5 samples, 0.37%)</title><rect x="594.3" y="1843.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="597.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.37%)</title><rect x="594.3" y="1827.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="597.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.37%)</title><rect x="594.3" y="1811.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="597.3" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.37%)</title><rect x="594.3" y="1795.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="597.3" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.37%)</title><rect x="598.7" y="1875.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="601.7" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="598.7" y="1859.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="601.7" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="598.7" y="1843.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="601.7" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="598.7" y="1827.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="601.7" y="1838.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.07%)</title><rect x="598.7" y="1811.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="601.7" y="1822.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.30%)</title><rect x="599.6" y="1859.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="602.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (3 samples, 0.22%)</title><rect x="603.1" y="1875.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="606.1" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (3 samples, 0.22%)</title><rect x="603.1" y="1859.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="606.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$265/925594691.get$Lambda (3 samples, 0.22%)</title><rect x="603.1" y="1843.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="606.1" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$265/925594691.&lt;init&gt; (2 samples, 0.15%)</title><rect x="604.0" y="1827.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="607.0" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.15%)</title><rect x="605.7" y="1875.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="608.7" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.07%)</title><rect x="606.6" y="1859.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="609.6" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.30%)</title><rect x="607.5" y="1875.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="610.5" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.30%)</title><rect x="607.5" y="1859.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="610.5" y="1870.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="607.5" y="1843.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="610.5" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.22%)</title><rect x="608.4" y="1843.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="611.4" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.22%)</title><rect x="611.0" y="1875.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="614.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.22%)</title><rect x="611.0" y="1859.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="614.0" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.07%)</title><rect x="613.6" y="1875.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="616.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.07%)</title><rect x="613.6" y="1859.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="616.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1719235445.linkToTargetMethod (1 samples, 0.07%)</title><rect x="614.5" y="1907.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="617.5" y="1918.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/110771485.invokeStatic_L3_L (1 samples, 0.07%)</title><rect x="614.5" y="1891.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="617.5" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/253437274.get$Lambda (1 samples, 0.07%)</title><rect x="614.5" y="1875.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="617.5" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="614.5" y="1859.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="617.5" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="614.5" y="1843.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="617.5" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="614.5" y="1827.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="617.5" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="614.5" y="1811.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="617.5" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="614.5" y="1795.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="617.5" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (24 samples, 1.79%)</title><rect x="615.4" y="1907.0" width="21.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="618.4" y="1918.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (24 samples, 1.79%)</title><rect x="615.4" y="1891.0" width="21.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="618.4" y="1902.0">j..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.52%)</title><rect x="621.6" y="1875.0" width="6.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="624.6" y="1886.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.52%)</title><rect x="621.6" y="1859.0" width="6.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="624.6" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.60%)</title><rect x="627.7" y="1875.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="630.7" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/253437274.accept (8 samples, 0.60%)</title><rect x="627.7" y="1859.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="630.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (8 samples, 0.60%)</title><rect x="627.7" y="1843.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="630.7" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (8 samples, 0.60%)</title><rect x="627.7" y="1827.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="630.7" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (8 samples, 0.60%)</title><rect x="627.7" y="1811.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="630.7" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.create (8 samples, 0.60%)</title><rect x="627.7" y="1795.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="630.7" y="1806.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.15%)</title><rect x="631.2" y="1779.0" width="1.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="634.2" y="1790.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.15%)</title><rect x="631.2" y="1763.0" width="1.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="634.2" y="1774.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.15%)</title><rect x="633.0" y="1779.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="636.0" y="1790.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.15%)</title><rect x="634.8" y="1875.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="637.8" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 0.97%)</title><rect x="636.5" y="1923.0" width="11.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="639.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 0.97%)</title><rect x="636.5" y="1907.0" width="11.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="639.5" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="636.5" y="1891.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="639.5" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="636.5" y="1875.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="639.5" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="636.5" y="1859.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="639.5" y="1870.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="636.5" y="1843.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="639.5" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 0.89%)</title><rect x="637.4" y="1891.0" width="10.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="640.4" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/253437274.accept (12 samples, 0.89%)</title><rect x="637.4" y="1875.0" width="10.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="640.4" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (12 samples, 0.89%)</title><rect x="637.4" y="1859.0" width="10.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="640.4" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (12 samples, 0.89%)</title><rect x="637.4" y="1843.0" width="10.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="640.4" y="1854.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (12 samples, 0.89%)</title><rect x="637.4" y="1827.0" width="10.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="640.4" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.create (12 samples, 0.89%)</title><rect x="637.4" y="1811.0" width="10.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="640.4" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.52%)</title><rect x="648.0" y="1923.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="651.0" y="1934.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.52%)</title><rect x="648.0" y="1907.0" width="6.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="651.0" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 0.37%)</title><rect x="654.1" y="1939.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="657.1" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.22%)</title><rect x="655.0" y="1923.0" width="2.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="658.0" y="1934.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="655.0" y="1907.0" width="2.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="658.0" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.07%)</title><rect x="657.6" y="1923.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="660.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (10 samples, 0.75%)</title><rect x="658.5" y="1987.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="661.5" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.75%)</title><rect x="658.5" y="1971.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="661.5" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.75%)</title><rect x="658.5" y="1955.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="661.5" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.75%)</title><rect x="658.5" y="1939.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="661.5" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/561460082.run (3 samples, 0.22%)</title><rect x="664.7" y="1923.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="667.7" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (236 samples, 17.60%)</title><rect x="667.3" y="1987.0" width="207.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="670.3" y="1998.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (234 samples, 17.45%)</title><rect x="669.1" y="1971.0" width="205.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="672.1" y="1982.0">java/util/concurrent/Linked..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (3 samples, 0.22%)</title><rect x="675.2" y="1955.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="678.2" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (2 samples, 0.15%)</title><rect x="677.9" y="1955.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="680.9" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.15%)</title><rect x="677.9" y="1939.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="680.9" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (215 samples, 16.03%)</title><rect x="679.6" y="1955.0" width="189.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="682.6" y="1966.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (29 samples, 2.16%)</title><rect x="685.8" y="1939.0" width="25.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="688.8" y="1950.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.22%)</title><rect x="685.8" y="1923.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="688.8" y="1934.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.22%)</title><rect x="685.8" y="1907.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="688.8" y="1918.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.22%)</title><rect x="685.8" y="1891.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="688.8" y="1902.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.15%)</title><rect x="686.7" y="1875.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="689.7" y="1886.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="686.7" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="689.7" y="1870.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.07%)</title><rect x="687.6" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="690.6" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (26 samples, 1.94%)</title><rect x="688.4" y="1923.0" width="22.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="691.4" y="1934.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (26 samples, 1.94%)</title><rect x="688.4" y="1907.0" width="22.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="691.4" y="1918.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (178 samples, 13.27%)</title><rect x="711.3" y="1939.0" width="156.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="714.3" y="1950.0">java/util/concurrent..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (167 samples, 12.45%)</title><rect x="721.0" y="1923.0" width="146.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="724.0" y="1934.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="726.3" y="1907.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="729.3" y="1918.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.15%)</title><rect x="727.2" y="1907.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="730.2" y="1918.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="728.9" y="1907.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="731.9" y="1918.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.15%)</title><rect x="729.8" y="1907.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="732.8" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (152 samples, 11.33%)</title><rect x="731.6" y="1907.0" width="133.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="734.6" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="734.2" y="1891.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="737.2" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (32 samples, 2.39%)</title><rect x="735.1" y="1891.0" width="28.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="738.1" y="1902.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (11 samples, 0.82%)</title><rect x="748.3" y="1875.0" width="9.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="751.3" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.30%)</title><rect x="749.1" y="1859.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="752.1" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.15%)</title><rect x="750.9" y="1843.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="753.9" y="1854.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="752.7" y="1859.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="755.7" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (5 samples, 0.37%)</title><rect x="753.5" y="1859.0" width="4.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="756.5" y="1870.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="757.9" y="1875.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="760.9" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.37%)</title><rect x="758.8" y="1875.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="761.8" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="763.2" y="1891.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="766.2" y="1902.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.07%)</title><rect x="764.1" y="1891.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="767.1" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.60%)</title><rect x="765.0" y="1891.0" width="7.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="768.0" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (36 samples, 2.68%)</title><rect x="772.0" y="1891.0" width="31.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="775.0" y="1902.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (47 samples, 3.50%)</title><rect x="803.7" y="1891.0" width="41.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="806.7" y="1902.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (6 samples, 0.45%)</title><rect x="845.1" y="1891.0" width="5.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="848.1" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.07%)</title><rect x="850.3" y="1891.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="853.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.22%)</title><rect x="851.2" y="1891.0" width="2.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="854.2" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.37%)</title><rect x="853.9" y="1891.0" width="4.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="856.9" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.07%)</title><rect x="858.3" y="1891.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="861.3" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.22%)</title><rect x="859.1" y="1891.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="862.1" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.15%)</title><rect x="861.8" y="1891.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="864.8" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.15%)</title><rect x="863.5" y="1891.0" width="1.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="866.5" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.22%)</title><rect x="865.3" y="1907.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="868.3" y="1918.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.07%)</title><rect x="867.9" y="1939.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="870.9" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (6 samples, 0.45%)</title><rect x="868.8" y="1955.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="871.8" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (6 samples, 0.45%)</title><rect x="868.8" y="1939.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="871.8" y="1950.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (6 samples, 0.45%)</title><rect x="868.8" y="1923.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="871.8" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.07%)</title><rect x="874.1" y="1955.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="877.1" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.07%)</title><rect x="874.1" y="1939.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="877.1" y="1950.0"></text>
</g>
<g>
<title>start_thread (358 samples, 26.70%)</title><rect x="875.0" y="2035.0" width="315.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="878.0" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (358 samples, 26.70%)</title><rect x="875.0" y="2019.0" width="315.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="878.0" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 1.57%)</title><rect x="875.0" y="2003.0" width="18.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="878.0" y="2014.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 0.52%)</title><rect x="875.0" y="1987.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="878.0" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.52%)</title><rect x="875.0" y="1971.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="878.0" y="1982.0"></text>
</g>
<g>
<title>SpinPause (7 samples, 0.52%)</title><rect x="875.0" y="1955.0" width="6.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="878.0" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.04%)</title><rect x="881.1" y="1987.0" width="12.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="884.1" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.15%)</title><rect x="881.1" y="1971.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="884.1" y="1982.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.07%)</title><rect x="881.1" y="1955.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="884.1" y="1966.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.07%)</title><rect x="881.1" y="1939.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="884.1" y="1950.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.07%)</title><rect x="881.1" y="1923.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="884.1" y="1934.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.07%)</title><rect x="882.0" y="1955.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="885.0" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.37%)</title><rect x="882.9" y="1971.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="885.9" y="1982.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="882.9" y="1955.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="885.9" y="1966.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.07%)</title><rect x="882.9" y="1939.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="885.9" y="1950.0"></text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.07%)</title><rect x="882.9" y="1923.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="885.9" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::par_allocate_during_gc(InCSetState, unsigned long, unsigned char) (1 samples, 0.07%)</title><rect x="882.9" y="1907.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="885.9" y="1918.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.07%)</title><rect x="882.9" y="1891.0" width="0.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="885.9" y="1902.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.15%)</title><rect x="883.8" y="1955.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="886.8" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.07%)</title><rect x="883.8" y="1939.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="886.8" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.07%)</title><rect x="883.8" y="1923.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="886.8" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.07%)</title><rect x="883.8" y="1907.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="886.8" y="1918.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="884.7" y="1939.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="887.7" y="1950.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="884.7" y="1923.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="887.7" y="1934.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="884.7" y="1907.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="887.7" y="1918.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.15%)</title><rect x="885.5" y="1955.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="888.5" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.15%)</title><rect x="885.5" y="1939.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="888.5" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.45%)</title><rect x="887.3" y="1971.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="890.3" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.45%)</title><rect x="887.3" y="1955.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="890.3" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.45%)</title><rect x="887.3" y="1939.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="890.3" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.45%)</title><rect x="887.3" y="1923.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="890.3" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.45%)</title><rect x="887.3" y="1907.0" width="5.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="890.3" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.37%)</title><rect x="888.2" y="1891.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="891.2" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.30%)</title><rect x="889.1" y="1875.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="892.1" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.15%)</title><rect x="889.1" y="1859.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="892.1" y="1870.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.07%)</title><rect x="890.8" y="1859.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="893.8" y="1870.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.07%)</title><rect x="891.7" y="1859.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="894.7" y="1870.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.07%)</title><rect x="891.7" y="1843.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="894.7" y="1854.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="892.6" y="1971.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="895.6" y="1982.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="892.6" y="1955.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="895.6" y="1966.0"></text>
</g>
<g>
<title>JavaThread::run() (334 samples, 24.91%)</title><rect x="893.5" y="2003.0" width="293.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="896.5" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (334 samples, 24.91%)</title><rect x="893.5" y="1987.0" width="293.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="896.5" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (333 samples, 24.83%)</title><rect x="893.5" y="1971.0" width="293.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="896.5" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (333 samples, 24.83%)</title><rect x="893.5" y="1955.0" width="293.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="896.5" y="1966.0">CompileBroker::invoke_compiler_on_metho..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (333 samples, 24.83%)</title><rect x="893.5" y="1939.0" width="293.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="896.5" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMe..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (333 samples, 24.83%)</title><rect x="893.5" y="1923.0" width="293.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="896.5" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, c..</text>
</g>
<g>
<title>Compile::Code_Gen() (172 samples, 12.83%)</title><rect x="893.5" y="1907.0" width="151.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="896.5" y="1918.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (5 samples, 0.37%)</title><rect x="893.5" y="1891.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="896.5" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.15%)</title><rect x="893.5" y="1875.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="896.5" y="1886.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.15%)</title><rect x="895.2" y="1875.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="898.2" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.15%)</title><rect x="895.2" y="1859.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="898.2" y="1870.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.15%)</title><rect x="895.2" y="1843.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="898.2" y="1854.0"></text>
</g>
<g>
<title>CallStaticJavaDirectNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.07%)</title><rect x="895.2" y="1827.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="898.2" y="1838.0"></text>
</g>
<g>
<title>CodeSection::relocate(unsigned char*, RelocationHolder const&amp;, int) (1 samples, 0.07%)</title><rect x="895.2" y="1811.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="898.2" y="1822.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.07%)</title><rect x="896.1" y="1827.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="899.1" y="1838.0"></text>
</g>
<g>
<title>AbstractAssembler::AbstractAssembler(CodeBuffer*) (1 samples, 0.07%)</title><rect x="896.1" y="1811.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="899.1" y="1822.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.07%)</title><rect x="897.0" y="1875.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="900.0" y="1886.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (9 samples, 0.67%)</title><rect x="897.9" y="1891.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="900.9" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.15%)</title><rect x="899.6" y="1875.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="902.6" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="899.6" y="1859.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="902.6" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="899.6" y="1843.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="902.6" y="1854.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="900.5" y="1859.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="903.5" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (3 samples, 0.22%)</title><rect x="901.4" y="1875.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="904.4" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.15%)</title><rect x="902.3" y="1859.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="905.3" y="1870.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (2 samples, 0.15%)</title><rect x="904.0" y="1875.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="907.0" y="1886.0"></text>
</g>
<g>
<title>Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&amp;, int) (1 samples, 0.07%)</title><rect x="904.9" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="907.9" y="1870.0"></text>
</g>
<g>
<title>Matcher::match() (17 samples, 1.27%)</title><rect x="905.8" y="1891.0" width="14.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="908.8" y="1902.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (16 samples, 1.19%)</title><rect x="905.8" y="1875.0" width="14.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="908.8" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (10 samples, 0.75%)</title><rect x="906.7" y="1859.0" width="8.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="909.7" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.07%)</title><rect x="915.5" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="918.5" y="1870.0"></text>
</g>
<g>
<title>CallNode::match_edge(unsigned int) const (1 samples, 0.07%)</title><rect x="915.5" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="918.5" y="1854.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 0.30%)</title><rect x="916.3" y="1859.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="919.3" y="1870.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.15%)</title><rect x="918.1" y="1843.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="921.1" y="1854.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.07%)</title><rect x="918.1" y="1827.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="921.1" y="1838.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="918.1" y="1811.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="921.1" y="1822.0"></text>
</g>
<g>
<title>cmpFastLockNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.07%)</title><rect x="918.1" y="1795.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="921.1" y="1806.0"></text>
</g>
<g>
<title>MachProjNode::MachProjNode(Node*, unsigned int, RegMask const&amp;, unsigned int) (1 samples, 0.07%)</title><rect x="918.1" y="1779.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="921.1" y="1790.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 0.07%)</title><rect x="919.0" y="1827.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="922.0" y="1838.0"></text>
</g>
<g>
<title>MachOper::operator new(unsigned long, Compile*) (1 samples, 0.07%)</title><rect x="919.0" y="1811.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="922.0" y="1822.0"></text>
</g>
<g>
<title>ParmNode::Opcode() const (1 samples, 0.07%)</title><rect x="919.9" y="1875.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="922.9" y="1886.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.07%)</title><rect x="920.7" y="1891.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="923.7" y="1902.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.07%)</title><rect x="920.7" y="1875.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="923.7" y="1886.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="920.7" y="1859.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="923.7" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (7 samples, 0.52%)</title><rect x="921.6" y="1891.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="924.6" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (7 samples, 0.52%)</title><rect x="921.6" y="1875.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="924.6" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="921.6" y="1859.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="924.6" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 0.22%)</title><rect x="922.5" y="1859.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="925.5" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.15%)</title><rect x="922.5" y="1843.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="925.5" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.07%)</title><rect x="924.3" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="927.3" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="925.1" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="928.1" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.07%)</title><rect x="925.1" y="1843.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="928.1" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (2 samples, 0.15%)</title><rect x="926.0" y="1859.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="929.0" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.07%)</title><rect x="927.8" y="1891.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="930.8" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (130 samples, 9.69%)</title><rect x="928.7" y="1891.0" width="114.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="931.7" y="1902.0">PhaseChaitin::..</text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.07%)</title><rect x="930.4" y="1875.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="933.4" y="1886.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.07%)</title><rect x="931.3" y="1875.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="934.3" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (4 samples, 0.30%)</title><rect x="932.2" y="1875.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="935.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (9 samples, 0.67%)</title><rect x="935.7" y="1875.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="938.7" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="936.6" y="1859.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="939.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (5 samples, 0.37%)</title><rect x="937.5" y="1859.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="940.5" y="1870.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="939.2" y="1843.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="942.2" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.15%)</title><rect x="940.1" y="1843.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="943.1" y="1854.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.07%)</title><rect x="941.9" y="1859.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="944.9" y="1870.0"></text>
</g>
<g>
<title>VectorSet::operator[](unsigned int) const (1 samples, 0.07%)</title><rect x="942.7" y="1859.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="945.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (7 samples, 0.52%)</title><rect x="943.6" y="1875.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="946.6" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="944.5" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="947.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (5 samples, 0.37%)</title><rect x="945.4" y="1859.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="948.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (18 samples, 1.34%)</title><rect x="949.8" y="1875.0" width="15.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="952.8" y="1886.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="961.2" y="1859.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="964.2" y="1870.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.07%)</title><rect x="962.1" y="1859.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="965.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.07%)</title><rect x="963.0" y="1859.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="966.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.07%)</title><rect x="963.0" y="1843.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="966.0" y="1854.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.07%)</title><rect x="963.0" y="1827.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="966.0" y="1838.0"></text>
</g>
<g>
<title>loadRangeNode::rule() const (2 samples, 0.15%)</title><rect x="963.9" y="1859.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="966.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (25 samples, 1.86%)</title><rect x="965.6" y="1875.0" width="22.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="968.6" y="1886.0">P..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.07%)</title><rect x="970.0" y="1859.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="973.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="970.9" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="973.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (16 samples, 1.19%)</title><rect x="971.8" y="1859.0" width="14.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="974.8" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.22%)</title><rect x="983.2" y="1843.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="986.2" y="1854.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.07%)</title><rect x="985.9" y="1859.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="988.9" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="986.7" y="1859.0" width="0.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="989.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.07%)</title><rect x="987.6" y="1875.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="990.6" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.07%)</title><rect x="987.6" y="1859.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="990.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (2 samples, 0.15%)</title><rect x="988.5" y="1875.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="991.5" y="1886.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="989.4" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="992.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (8 samples, 0.60%)</title><rect x="990.3" y="1875.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="993.3" y="1886.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="994.7" y="1859.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="997.7" y="1870.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.07%)</title><rect x="995.5" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="998.5" y="1870.0"></text>
</g>
<g>
<title>loadConUL32Node::bottom_type() const (1 samples, 0.07%)</title><rect x="996.4" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="999.4" y="1870.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="996.4" y="1843.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="999.4" y="1854.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="996.4" y="1827.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="999.4" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (10 samples, 0.75%)</title><rect x="997.3" y="1875.0" width="8.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1000.3" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (6 samples, 0.45%)</title><rect x="999.1" y="1859.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1002.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.07%)</title><rect x="1004.3" y="1859.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1007.3" y="1870.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.07%)</title><rect x="1005.2" y="1859.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1008.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.07%)</title><rect x="1006.1" y="1875.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1009.1" y="1886.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (14 samples, 1.04%)</title><rect x="1007.0" y="1875.0" width="12.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1010.0" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (14 samples, 1.04%)</title><rect x="1007.0" y="1859.0" width="12.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1010.0" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (14 samples, 1.04%)</title><rect x="1007.0" y="1843.0" width="12.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1010.0" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.22%)</title><rect x="1007.0" y="1827.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1010.0" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (10 samples, 0.75%)</title><rect x="1009.6" y="1827.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1012.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.07%)</title><rect x="1018.4" y="1827.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1021.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 0.30%)</title><rect x="1019.3" y="1875.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1022.3" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.15%)</title><rect x="1021.1" y="1859.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1024.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (5 samples, 0.37%)</title><rect x="1022.8" y="1875.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1025.8" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.15%)</title><rect x="1025.5" y="1859.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1028.5" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (15 samples, 1.12%)</title><rect x="1027.2" y="1875.0" width="13.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1030.2" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="1034.3" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1037.3" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (6 samples, 0.45%)</title><rect x="1035.1" y="1859.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1038.1" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.15%)</title><rect x="1038.7" y="1843.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1041.7" y="1854.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.07%)</title><rect x="1040.4" y="1875.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1043.4" y="1886.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1041.3" y="1875.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1044.3" y="1886.0"></text>
</g>
<g>
<title>checkCastPPNode::oper_input_base() const (1 samples, 0.07%)</title><rect x="1042.2" y="1875.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1045.2" y="1886.0"></text>
</g>
<g>
<title>loadLNode::peephole(Block*, int, PhaseRegAlloc*, int&amp;, Compile*) (1 samples, 0.07%)</title><rect x="1043.0" y="1891.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1046.0" y="1902.0"></text>
</g>
<g>
<title>storeNNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.07%)</title><rect x="1043.9" y="1891.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1046.9" y="1902.0"></text>
</g>
<g>
<title>Compile::Optimize() (146 samples, 10.89%)</title><rect x="1044.8" y="1907.0" width="128.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1047.8" y="1918.0">Compile::Optimiz..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.07%)</title><rect x="1044.8" y="1891.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1047.8" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="1044.8" y="1875.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.8" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (5 samples, 0.37%)</title><rect x="1045.7" y="1891.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1048.7" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 0.37%)</title><rect x="1045.7" y="1875.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1048.7" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.07%)</title><rect x="1045.7" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1048.7" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::get_addp_base(Node*) (1 samples, 0.07%)</title><rect x="1045.7" y="1843.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1048.7" y="1854.0"></text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.07%)</title><rect x="1045.7" y="1827.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1048.7" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="1046.6" y="1859.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1049.6" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.07%)</title><rect x="1046.6" y="1843.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1049.6" y="1854.0"></text>
</g>
<g>
<title>PointsToNode::PointsToNode(ConnectionGraph*, Node*, PointsToNode::EscapeState, PointsToNode::NodeType) (1 samples, 0.07%)</title><rect x="1046.6" y="1827.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1049.6" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="1047.4" y="1859.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1050.4" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.07%)</title><rect x="1047.4" y="1843.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1050.4" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.07%)</title><rect x="1047.4" y="1827.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1050.4" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1048.3" y="1843.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1051.3" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_init_values(JavaObjectNode*, PointsToNode*, PhaseTransform*) (1 samples, 0.07%)</title><rect x="1048.3" y="1827.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1051.3" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1049.2" y="1859.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1052.2" y="1870.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="1049.2" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1052.2" y="1854.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1049.2" y="1827.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1052.2" y="1838.0"></text>
</g>
<g>
<title>IfNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1050.1" y="1891.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1053.1" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 0.22%)</title><rect x="1051.0" y="1891.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1054.0" y="1902.0"></text>
</g>
<g>
<title>CatchNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1051.8" y="1875.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1054.8" y="1886.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1052.7" y="1875.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1055.7" y="1886.0"></text>
</g>
<g>
<title>TypeNarrowPtr::filter_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1052.7" y="1859.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1055.7" y="1870.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1052.7" y="1843.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1055.7" y="1854.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1052.7" y="1827.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1055.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (112 samples, 8.35%)</title><rect x="1053.6" y="1891.0" width="98.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1056.6" y="1902.0">PhaseIdealLo..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1053.6" y="1875.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1056.6" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1053.6" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1056.6" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1053.6" y="1843.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1056.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.07%)</title><rect x="1053.6" y="1827.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1056.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.07%)</title><rect x="1053.6" y="1811.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1056.6" y="1822.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (2 samples, 0.15%)</title><rect x="1054.5" y="1875.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1057.5" y="1886.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.07%)</title><rect x="1056.2" y="1875.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1059.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (8 samples, 0.60%)</title><rect x="1057.1" y="1875.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1060.1" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (4 samples, 0.30%)</title><rect x="1060.6" y="1859.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1063.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 0.60%)</title><rect x="1064.2" y="1875.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1067.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1069.4" y="1859.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1072.4" y="1870.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.07%)</title><rect x="1070.3" y="1859.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1073.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (75 samples, 5.59%)</title><rect x="1071.2" y="1875.0" width="66.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1074.2" y="1886.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (66 samples, 4.92%)</title><rect x="1079.1" y="1859.0" width="58.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1082.1" y="1870.0">PhaseI..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1080.0" y="1843.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1083.0" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.15%)</title><rect x="1080.9" y="1843.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1083.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1082.6" y="1843.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1085.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (61 samples, 4.55%)</title><rect x="1083.5" y="1843.0" width="53.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1086.5" y="1854.0">Phase..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1128.4" y="1827.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.4" y="1838.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1128.4" y="1811.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.4" y="1822.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1128.4" y="1795.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.4" y="1806.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.07%)</title><rect x="1128.4" y="1779.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.4" y="1790.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1128.4" y="1763.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.4" y="1774.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.15%)</title><rect x="1129.3" y="1827.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.15%)</title><rect x="1129.3" y="1811.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.3" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 0.45%)</title><rect x="1131.0" y="1827.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1136.3" y="1827.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1139.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1136.3" y="1811.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.3" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (5 samples, 0.37%)</title><rect x="1137.2" y="1875.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.07%)</title><rect x="1140.7" y="1859.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (5 samples, 0.37%)</title><rect x="1141.6" y="1875.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.22%)</title><rect x="1142.5" y="1859.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca(Node*, Node*) const (1 samples, 0.07%)</title><rect x="1142.5" y="1843.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_internal(Node*, Node*) const (1 samples, 0.07%)</title><rect x="1142.5" y="1827.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1143.4" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.07%)</title><rect x="1144.2" y="1843.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1144.2" y="1827.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.2" y="1838.0"></text>
</g>
<g>
<title>RegionNode::Opcode() const (1 samples, 0.07%)</title><rect x="1145.1" y="1859.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.45%)</title><rect x="1146.0" y="1875.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.37%)</title><rect x="1146.9" y="1859.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.9" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.22%)</title><rect x="1147.8" y="1843.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.8" y="1854.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1147.8" y="1827.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.8" y="1838.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.15%)</title><rect x="1148.6" y="1827.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.6" y="1838.0"></text>
</g>
<g>
<title>RootNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1150.4" y="1843.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.4" y="1854.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.07%)</title><rect x="1151.3" y="1875.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (19 samples, 1.42%)</title><rect x="1152.2" y="1891.0" width="16.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.2" y="1902.0"></text>
</g>
<g>
<title>CProjNode::hash() const (1 samples, 0.07%)</title><rect x="1153.0" y="1875.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (17 samples, 1.27%)</title><rect x="1153.9" y="1875.0" width="15.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.9" y="1886.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1155.7" y="1859.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.7" y="1870.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1155.7" y="1843.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.7" y="1854.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.07%)</title><rect x="1155.7" y="1827.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.7" y="1838.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1155.7" y="1811.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.7" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1155.7" y="1795.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.7" y="1806.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1155.7" y="1779.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.7" y="1790.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1155.7" y="1763.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.7" y="1774.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.07%)</title><rect x="1155.7" y="1747.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.7" y="1758.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1156.6" y="1843.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.6" y="1854.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1156.6" y="1827.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.6" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1156.6" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.6" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1156.6" y="1795.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.6" y="1806.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1157.4" y="1859.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 0.30%)</title><rect x="1158.3" y="1859.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (3 samples, 0.22%)</title><rect x="1159.2" y="1843.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.2" y="1854.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1160.1" y="1827.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.1" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1161.0" y="1827.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.0" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1161.8" y="1859.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.8" y="1870.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1161.8" y="1843.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.8" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1162.7" y="1859.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.7" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (5 samples, 0.37%)</title><rect x="1163.6" y="1859.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.15%)</title><rect x="1164.5" y="1843.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.15%)</title><rect x="1164.5" y="1827.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.5" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (2 samples, 0.15%)</title><rect x="1164.5" y="1811.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.5" y="1822.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.15%)</title><rect x="1166.2" y="1843.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.2" y="1854.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.07%)</title><rect x="1167.1" y="1827.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.1" y="1838.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1168.0" y="1859.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.0" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1168.0" y="1843.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.0" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.0" y="1827.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.0" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.0" y="1811.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.0" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.0" y="1795.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.0" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.0" y="1779.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.0" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.0" y="1763.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.0" y="1774.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1168.0" y="1747.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.0" y="1758.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1168.0" y="1731.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.0" y="1742.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (2 samples, 0.15%)</title><rect x="1168.9" y="1891.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.9" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (2 samples, 0.15%)</title><rect x="1168.9" y="1875.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.07%)</title><rect x="1168.9" y="1859.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1168.9" y="1843.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.9" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1169.8" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.8" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (3 samples, 0.22%)</title><rect x="1170.6" y="1891.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.6" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.22%)</title><rect x="1170.6" y="1875.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.22%)</title><rect x="1170.6" y="1859.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.6" y="1870.0"></text>
</g>
<g>
<title>MulNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1170.6" y="1843.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.6" y="1854.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.07%)</title><rect x="1170.6" y="1827.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.6" y="1838.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1170.6" y="1811.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.6" y="1822.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1170.6" y="1795.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.6" y="1806.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.07%)</title><rect x="1170.6" y="1779.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.6" y="1790.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1171.5" y="1843.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.5" y="1854.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="1171.5" y="1827.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.5" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1172.4" y="1843.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.4" y="1854.0"></text>
</g>
<g>
<title>TypeNarrowPtr::filter_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1172.4" y="1827.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.4" y="1838.0"></text>
</g>
<g>
<title>TypePtr::empty() const (1 samples, 0.07%)</title><rect x="1172.4" y="1811.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.4" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.89%)</title><rect x="1173.3" y="1907.0" width="10.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.3" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.89%)</title><rect x="1173.3" y="1891.0" width="10.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.3" y="1902.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.07%)</title><rect x="1173.3" y="1875.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.3" y="1886.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="1173.3" y="1859.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.3" y="1870.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.82%)</title><rect x="1174.2" y="1875.0" width="9.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.2" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.82%)</title><rect x="1174.2" y="1859.0" width="9.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.2" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.82%)</title><rect x="1174.2" y="1843.0" width="9.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.2" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.82%)</title><rect x="1174.2" y="1827.0" width="9.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.2" y="1838.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1174.2" y="1811.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.2" y="1822.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1174.2" y="1795.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.2" y="1806.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1174.2" y="1779.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.2" y="1790.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1174.2" y="1763.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.2" y="1774.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1174.2" y="1747.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.2" y="1758.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1174.2" y="1731.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.2" y="1742.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1174.2" y="1715.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.2" y="1726.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1174.2" y="1699.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.2" y="1710.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1174.2" y="1683.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.2" y="1694.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1174.2" y="1667.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.2" y="1678.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1174.2" y="1651.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.2" y="1662.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1174.2" y="1635.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.2" y="1646.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1174.2" y="1619.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.2" y="1630.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1174.2" y="1603.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.2" y="1614.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1174.2" y="1587.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.2" y="1598.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.60%)</title><rect x="1175.0" y="1811.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.0" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.60%)</title><rect x="1175.0" y="1795.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.0" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.60%)</title><rect x="1175.0" y="1779.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.0" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.60%)</title><rect x="1175.0" y="1763.0" width="7.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.0" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.60%)</title><rect x="1175.0" y="1747.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.0" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.60%)</title><rect x="1175.0" y="1731.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.0" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.45%)</title><rect x="1175.0" y="1715.0" width="5.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.0" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.45%)</title><rect x="1175.0" y="1699.0" width="5.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.0" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.45%)</title><rect x="1175.0" y="1683.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.0" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.45%)</title><rect x="1175.0" y="1667.0" width="5.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.0" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.45%)</title><rect x="1175.0" y="1651.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.0" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.45%)</title><rect x="1175.0" y="1635.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.0" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.45%)</title><rect x="1175.0" y="1619.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.0" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.45%)</title><rect x="1175.0" y="1603.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.0" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.45%)</title><rect x="1175.0" y="1587.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.0" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.45%)</title><rect x="1175.0" y="1571.0" width="5.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.0" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.45%)</title><rect x="1175.0" y="1555.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.0" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.45%)</title><rect x="1175.0" y="1539.0" width="5.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.0" y="1550.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.0" y="1523.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.0" y="1534.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.07%)</title><rect x="1175.0" y="1507.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.0" y="1518.0"></text>
</g>
<g>
<title>Node::init_req(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="1175.0" y="1491.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.0" y="1502.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.30%)</title><rect x="1175.9" y="1523.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.9" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.30%)</title><rect x="1175.9" y="1507.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.9" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.30%)</title><rect x="1175.9" y="1491.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.9" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.30%)</title><rect x="1175.9" y="1475.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.30%)</title><rect x="1175.9" y="1459.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.30%)</title><rect x="1175.9" y="1443.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.9" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.30%)</title><rect x="1175.9" y="1427.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.9" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.30%)</title><rect x="1175.9" y="1411.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.9" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.30%)</title><rect x="1175.9" y="1395.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.9" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.30%)</title><rect x="1175.9" y="1379.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.30%)</title><rect x="1175.9" y="1363.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.30%)</title><rect x="1175.9" y="1347.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.9" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.30%)</title><rect x="1175.9" y="1331.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.9" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.30%)</title><rect x="1175.9" y="1315.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.9" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.30%)</title><rect x="1175.9" y="1299.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.9" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.30%)</title><rect x="1175.9" y="1283.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.9" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.30%)</title><rect x="1175.9" y="1267.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.9" y="1278.0"></text>
</g>
<g>
<title>MulNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1175.9" y="1251.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.9" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1176.8" y="1251.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.8" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1176.8" y="1235.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.8" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1176.8" y="1219.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1176.8" y="1203.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.8" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1176.8" y="1187.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1176.8" y="1171.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.8" y="1155.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.8" y="1166.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1176.8" y="1139.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.8" y="1150.0"></text>
</g>
<g>
<title>InlineTree::find_subtree_from_root(InlineTree*, JVMState*, ciMethod*) (1 samples, 0.07%)</title><rect x="1176.8" y="1123.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.8" y="1134.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1177.7" y="1155.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1177.7" y="1139.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="1150.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.07%)</title><rect x="1177.7" y="1123.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="1134.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1177.7" y="1107.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.7" y="1118.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1177.7" y="1091.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.7" y="1102.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1177.7" y="1075.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1178.6" y="1251.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.6" y="1262.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1178.6" y="1235.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.6" y="1246.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.07%)</title><rect x="1178.6" y="1219.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.6" y="1230.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1178.6" y="1203.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.6" y="1214.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1178.6" y="1187.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.6" y="1198.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1178.6" y="1171.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1181.6" y="1182.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.4" y="1523.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.4" y="1534.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.4" y="1507.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.4" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.4" y="1491.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.4" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.4" y="1475.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.4" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.4" y="1459.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.4" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.4" y="1443.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.4" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.4" y="1427.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.4" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.4" y="1411.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.4" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.4" y="1395.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.4" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.4" y="1379.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.4" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.4" y="1363.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.4" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.4" y="1347.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.4" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.4" y="1331.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.4" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.4" y="1315.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.4" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.4" y="1299.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.4" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.4" y="1283.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.4" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.4" y="1267.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.4" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.4" y="1251.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.4" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.4" y="1235.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.4" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.4" y="1219.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.4" y="1203.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.4" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.4" y="1187.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.4" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.4" y="1171.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.4" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.4" y="1155.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.4" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.4" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.4" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.4" y="1123.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.4" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.4" y="1107.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.4" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.4" y="1091.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.4" y="1075.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.4" y="1059.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.4" y="1043.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1179.4" y="1027.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1179.4" y="1011.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.4" y="1022.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1179.4" y="995.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.4" y="1006.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1179.4" y="979.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.4" y="990.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.07%)</title><rect x="1179.4" y="963.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.4" y="974.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.07%)</title><rect x="1179.4" y="947.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="958.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1180.3" y="1715.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.3" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1180.3" y="1699.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.3" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1180.3" y="1683.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.3" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1180.3" y="1667.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.3" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1180.3" y="1651.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1180.3" y="1635.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.3" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1180.3" y="1619.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.3" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1180.3" y="1603.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.3" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1180.3" y="1587.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.3" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1180.3" y="1571.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.3" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1180.3" y="1555.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.3" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1180.3" y="1539.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.3" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1180.3" y="1523.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.3" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1180.3" y="1507.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.3" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1180.3" y="1491.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.3" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1180.3" y="1475.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.3" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1180.3" y="1459.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.3" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1180.3" y="1443.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.3" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1180.3" y="1427.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.3" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1180.3" y="1411.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.3" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1180.3" y="1395.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.3" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1180.3" y="1379.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1180.3" y="1363.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1180.3" y="1347.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.3" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1180.3" y="1331.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.3" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1180.3" y="1315.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.3" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1180.3" y="1299.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1180.3" y="1283.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1180.3" y="1267.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1180.3" y="1251.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.3" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1180.3" y="1235.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.3" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1180.3" y="1219.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.3" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1180.3" y="1203.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1180.3" y="1187.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1180.3" y="1171.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1180.3" y="1155.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.3" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1180.3" y="1139.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="1150.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.07%)</title><rect x="1180.3" y="1123.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.3" y="1134.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.07%)</title><rect x="1180.3" y="1107.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.3" y="1118.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1180.3" y="1091.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.3" y="1102.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1180.3" y="1075.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.3" y="1086.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="1123.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.2" y="1134.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="1107.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="1091.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.2" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.2" y="1075.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.2" y="1059.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.2" y="1043.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.2" y="1027.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.2" y="1011.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.2" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="995.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.2" y="979.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.2" y="963.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.2" y="947.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.2" y="931.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.2" y="915.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.2" y="926.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1181.2" y="899.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="910.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1181.2" y="883.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.2" y="894.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1181.2" y="867.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.2" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1181.2" y="851.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.2" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1181.2" y="835.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.2" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1181.2" y="819.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.2" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1181.2" y="803.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1181.2" y="787.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1181.2" y="771.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="782.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1181.2" y="755.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.2" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1181.2" y="739.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1181.2" y="723.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.2" y="734.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1181.2" y="707.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="718.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1181.2" y="691.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.2" y="702.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1181.2" y="675.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.2" y="686.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.07%)</title><rect x="1181.2" y="659.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.2" y="670.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol*) (1 samples, 0.07%)</title><rect x="1181.2" y="643.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="654.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1182.1" y="1811.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.1" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1182.1" y="1795.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.1" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1182.1" y="1779.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.1" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1182.1" y="1763.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.1" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1182.1" y="1747.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.1" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1182.1" y="1731.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.1" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1182.1" y="1715.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.1" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1182.1" y="1699.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.1" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1182.1" y="1683.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.1" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1182.1" y="1667.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.1" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1182.1" y="1651.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.1" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1182.1" y="1635.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.1" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1182.1" y="1619.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.1" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1182.1" y="1603.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.1" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1182.1" y="1587.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1182.1" y="1571.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.1" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1182.1" y="1555.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.1" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1182.1" y="1539.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.1" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1182.1" y="1523.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.1" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1182.1" y="1507.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1182.1" y="1491.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.1" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1182.1" y="1475.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1182.1" y="1459.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.1" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1182.1" y="1443.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.1" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1182.1" y="1427.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.1" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1182.1" y="1411.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.1" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1182.1" y="1395.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.1" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1182.1" y="1379.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.1" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1182.1" y="1363.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.1" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1182.1" y="1347.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.1" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1182.1" y="1331.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.1" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1182.1" y="1315.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.1" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1182.1" y="1299.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.1" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1182.1" y="1283.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1182.1" y="1267.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1182.1" y="1251.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.1" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1182.1" y="1235.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.1" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.1" y="1219.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.1" y="1203.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.1" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.1" y="1187.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.1" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.1" y="1171.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.1" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.1" y="1155.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.1" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.1" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.1" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.1" y="1123.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.1" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.1" y="1107.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.1" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.1" y="1091.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.1" y="1075.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.1" y="1059.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.1" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.1" y="1043.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.1" y="1054.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.1" y="1027.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="1038.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind) (1 samples, 0.07%)</title><rect x="1182.1" y="1011.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.1" y="1022.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1182.1" y="995.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.1" y="1006.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1182.1" y="979.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.1" y="990.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.0" y="1219.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.0" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.0" y="1203.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.0" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.0" y="1187.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.0" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.0" y="1171.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.0" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.0" y="1155.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.0" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.0" y="1139.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.0" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.0" y="1123.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.0" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.0" y="1107.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.0" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.0" y="1091.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.0" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.0" y="1075.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.0" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.0" y="1059.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.0" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.0" y="1043.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.0" y="1054.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1183.0" y="1027.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.0" y="1038.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1183.0" y="1011.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.0" y="1022.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.07%)</title><rect x="1183.0" y="995.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.0" y="1006.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.07%)</title><rect x="1183.0" y="979.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.0" y="990.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1183.0" y="963.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.0" y="974.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1183.0" y="947.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.0" y="958.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.07%)</title><rect x="1183.0" y="931.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.0" y="942.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1183.0" y="915.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1186.0" y="926.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (3 samples, 0.22%)</title><rect x="1183.8" y="1907.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.8" y="1918.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1183.8" y="1891.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.8" y="1902.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.15%)</title><rect x="1184.7" y="1891.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.7" y="1902.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1186.5" y="1971.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.5" y="1982.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1186.5" y="1955.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.5" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1186.5" y="1939.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.5" y="1950.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1186.5" y="1923.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1189.5" y="1934.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.07%)</title><rect x="1186.5" y="1907.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.5" y="1918.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1186.5" y="1891.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1189.5" y="1902.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.22%)</title><rect x="1187.4" y="2003.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.4" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.22%)</title><rect x="1187.4" y="1987.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.4" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.07%)</title><rect x="1187.4" y="1971.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.4" y="1982.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.15%)</title><rect x="1188.2" y="1971.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.2" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.15%)</title><rect x="1188.2" y="1955.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.2" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.15%)</title><rect x="1188.2" y="1939.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.2" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.15%)</title><rect x="1188.2" y="1923.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.2" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.07%)</title><rect x="1189.1" y="1907.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.1" y="1918.0"></text>
</g>
<g>
<title>DerivedPointerTable::update_pointers() (1 samples, 0.07%)</title><rect x="1189.1" y="1891.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.1" y="1902.0"></text>
</g>
</g>
</svg>
