<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="789"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="789"> </text>
<g id="frames">
<g>
<title>all (172 samples, 100.00%)</title><rect x="10.0" y="755.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="766.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (38 samples, 22.09%)</title><rect x="10.0" y="739.0" width="260.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="750.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (37 samples, 21.51%)</title><rect x="16.9" y="723.0" width="253.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.9" y="734.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.58%)</title><rect x="16.9" y="707.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.9" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.58%)</title><rect x="16.9" y="691.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.9" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.58%)</title><rect x="16.9" y="675.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.9" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.58%)</title><rect x="16.9" y="659.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.9" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.58%)</title><rect x="16.9" y="643.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.9" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.58%)</title><rect x="16.9" y="627.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.9" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.58%)</title><rect x="16.9" y="611.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.9" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.58%)</title><rect x="16.9" y="595.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.9" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.58%)</title><rect x="16.9" y="579.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.9" y="590.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (24 samples, 13.95%)</title><rect x="23.7" y="707.0" width="164.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.7" y="718.0">java/lang/Iterable.fo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/579708423.accept (20 samples, 11.63%)</title><rect x="23.7" y="691.0" width="137.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.7" y="702.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (20 samples, 11.63%)</title><rect x="23.7" y="675.0" width="137.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.7" y="686.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (16 samples, 9.30%)</title><rect x="23.7" y="659.0" width="109.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.7" y="670.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (16 samples, 9.30%)</title><rect x="23.7" y="643.0" width="109.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.7" y="654.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (16 samples, 9.30%)</title><rect x="23.7" y="627.0" width="109.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.7" y="638.0">com/linecorp/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (16 samples, 9.30%)</title><rect x="23.7" y="611.0" width="109.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.7" y="622.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (16 samples, 9.30%)</title><rect x="23.7" y="595.0" width="109.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.7" y="606.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (14 samples, 8.14%)</title><rect x="37.4" y="579.0" width="96.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="40.4" y="590.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (13 samples, 7.56%)</title><rect x="44.3" y="563.0" width="89.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="47.3" y="574.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 6.40%)</title><rect x="58.0" y="547.0" width="75.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="61.0" y="558.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 6.40%)</title><rect x="58.0" y="531.0" width="75.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="61.0" y="542.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 6.40%)</title><rect x="58.0" y="515.0" width="75.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="61.0" y="526.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 6.40%)</title><rect x="58.0" y="499.0" width="75.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="61.0" y="510.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (11 samples, 6.40%)</title><rect x="58.0" y="483.0" width="75.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="61.0" y="494.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Unpark (10 samples, 5.81%)</title><rect x="58.0" y="467.0" width="68.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="61.0" y="478.0">Unsafe_..</text>
</g>
<g>
<title>__pthread_cond_signal (7 samples, 4.07%)</title><rect x="64.9" y="451.0" width="48.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="67.9" y="462.0">__pt..</text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 1.16%)</title><rect x="112.9" y="451.0" width="13.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="115.9" y="462.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.58%)</title><rect x="126.6" y="467.0" width="6.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="129.6" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.58%)</title><rect x="133.5" y="659.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="136.5" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.58%)</title><rect x="133.5" y="643.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="136.5" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.58%)</title><rect x="133.5" y="627.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="136.5" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.74%)</title><rect x="140.3" y="659.0" width="20.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="143.3" y="670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.74%)</title><rect x="140.3" y="643.0" width="20.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="143.3" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.58%)</title><rect x="147.2" y="627.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="150.2" y="638.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.58%)</title><rect x="147.2" y="611.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="150.2" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.58%)</title><rect x="147.2" y="595.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="150.2" y="606.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.58%)</title><rect x="154.1" y="627.0" width="6.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="157.1" y="638.0"></text>
</g>
<g>
<title>itable stub (2 samples, 1.16%)</title><rect x="160.9" y="691.0" width="13.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="163.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 1.16%)</title><rect x="174.7" y="691.0" width="13.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="177.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 1.16%)</title><rect x="174.7" y="675.0" width="13.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="177.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 1.16%)</title><rect x="174.7" y="659.0" width="13.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="177.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 1.16%)</title><rect x="174.7" y="643.0" width="13.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="177.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.58%)</title><rect x="181.5" y="627.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="184.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 6.98%)</title><rect x="188.4" y="707.0" width="82.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="191.4" y="718.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 6.98%)</title><rect x="188.4" y="691.0" width="82.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.4" y="702.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 4.07%)</title><rect x="188.4" y="675.0" width="48.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="191.4" y="686.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.58%)</title><rect x="188.4" y="659.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="191.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.58%)</title><rect x="188.4" y="643.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="191.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.58%)</title><rect x="188.4" y="627.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="191.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 3.49%)</title><rect x="195.2" y="659.0" width="41.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="198.2" y="670.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 2.91%)</title><rect x="195.2" y="643.0" width="34.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="198.2" y="654.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 2.91%)</title><rect x="195.2" y="627.0" width="34.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="198.2" y="638.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 2.91%)</title><rect x="195.2" y="611.0" width="34.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="198.2" y="622.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (4 samples, 2.33%)</title><rect x="202.1" y="595.0" width="27.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="205.1" y="606.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 1.74%)</title><rect x="202.1" y="579.0" width="20.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="205.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 1.74%)</title><rect x="202.1" y="563.0" width="20.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (3 samples, 1.74%)</title><rect x="202.1" y="547.0" width="20.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="205.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (3 samples, 1.74%)</title><rect x="202.1" y="531.0" width="20.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="205.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (3 samples, 1.74%)</title><rect x="202.1" y="515.0" width="20.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="205.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (3 samples, 1.74%)</title><rect x="202.1" y="499.0" width="20.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.1" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.array (1 samples, 0.58%)</title><rect x="202.1" y="483.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="205.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 1.16%)</title><rect x="209.0" y="483.0" width="13.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="212.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.58%)</title><rect x="222.7" y="579.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="225.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.58%)</title><rect x="222.7" y="563.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="225.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.58%)</title><rect x="222.7" y="547.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.58%)</title><rect x="222.7" y="531.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="225.7" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.58%)</title><rect x="222.7" y="515.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="225.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/ByteUtils.readVarint (1 samples, 0.58%)</title><rect x="222.7" y="499.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="225.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/ByteUtils.readUnsignedVarint (1 samples, 0.58%)</title><rect x="222.7" y="483.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="225.7" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.58%)</title><rect x="229.5" y="643.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.5" y="654.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.58%)</title><rect x="229.5" y="627.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="232.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 1.16%)</title><rect x="236.4" y="675.0" width="13.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="239.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.58%)</title><rect x="236.4" y="659.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="239.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.58%)</title><rect x="236.4" y="643.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="239.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.58%)</title><rect x="236.4" y="627.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.58%)</title><rect x="236.4" y="611.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="239.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.58%)</title><rect x="236.4" y="595.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="239.4" y="606.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.58%)</title><rect x="236.4" y="579.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="239.4" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.58%)</title><rect x="236.4" y="563.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.4" y="574.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.58%)</title><rect x="236.4" y="547.0" width="6.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="239.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.58%)</title><rect x="243.3" y="659.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="246.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.58%)</title><rect x="243.3" y="643.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="246.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.access$100 (1 samples, 0.58%)</title><rect x="243.3" y="627.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.3" y="638.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.58%)</title><rect x="243.3" y="611.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="246.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.58%)</title><rect x="250.1" y="675.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="253.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.58%)</title><rect x="250.1" y="659.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="253.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.hasNext (1 samples, 0.58%)</title><rect x="250.1" y="643.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 1.16%)</title><rect x="257.0" y="675.0" width="13.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="260.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 1.16%)</title><rect x="257.0" y="659.0" width="13.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.58%)</title><rect x="257.0" y="643.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="260.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.58%)</title><rect x="257.0" y="627.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="260.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.58%)</title><rect x="257.0" y="611.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="260.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient$InFlightRequest.&lt;init&gt; (1 samples, 0.58%)</title><rect x="257.0" y="595.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="260.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.requestIterator (1 samples, 0.58%)</title><rect x="263.8" y="643.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="266.8" y="654.0"></text>
</g>
<g>
<title>java/lang/Thread.run (52 samples, 30.23%)</title><rect x="270.7" y="739.0" width="356.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.7" y="750.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (52 samples, 30.23%)</title><rect x="270.7" y="723.0" width="356.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.7" y="734.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (52 samples, 30.23%)</title><rect x="270.7" y="707.0" width="356.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="273.7" y="718.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/36971569.run (35 samples, 20.35%)</title><rect x="284.4" y="691.0" width="240.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="287.4" y="702.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (35 samples, 20.35%)</title><rect x="284.4" y="675.0" width="240.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.4" y="686.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (35 samples, 20.35%)</title><rect x="284.4" y="659.0" width="240.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="287.4" y="670.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (35 samples, 20.35%)</title><rect x="284.4" y="643.0" width="240.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.4" y="654.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (19 samples, 11.05%)</title><rect x="284.4" y="627.0" width="130.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.4" y="638.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (19 samples, 11.05%)</title><rect x="284.4" y="611.0" width="130.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.4" y="622.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (19 samples, 11.05%)</title><rect x="284.4" y="595.0" width="130.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="287.4" y="606.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (19 samples, 11.05%)</title><rect x="284.4" y="579.0" width="130.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="287.4" y="590.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (19 samples, 11.05%)</title><rect x="284.4" y="563.0" width="130.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="287.4" y="574.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (19 samples, 11.05%)</title><rect x="284.4" y="547.0" width="130.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="287.4" y="558.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (5 samples, 2.91%)</title><rect x="284.4" y="531.0" width="34.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="287.4" y="542.0">co..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.58%)</title><rect x="284.4" y="515.0" width="6.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="287.4" y="526.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.58%)</title><rect x="284.4" y="499.0" width="6.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="287.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.58%)</title><rect x="291.3" y="515.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.58%)</title><rect x="291.3" y="499.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="294.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.58%)</title><rect x="291.3" y="483.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="294.3" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.58%)</title><rect x="291.3" y="467.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="294.3" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.58%)</title><rect x="291.3" y="451.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="294.3" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.58%)</title><rect x="291.3" y="435.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="294.3" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.74%)</title><rect x="298.1" y="515.0" width="20.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="301.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 1.74%)</title><rect x="298.1" y="499.0" width="20.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="301.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.58%)</title><rect x="298.1" y="483.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="301.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.58%)</title><rect x="298.1" y="467.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="301.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.58%)</title><rect x="298.1" y="451.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.1" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.58%)</title><rect x="298.1" y="435.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="301.1" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.58%)</title><rect x="298.1" y="419.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="301.1" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 1.16%)</title><rect x="305.0" y="483.0" width="13.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (13 samples, 7.56%)</title><rect x="318.7" y="531.0" width="89.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="321.7" y="542.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.58%)</title><rect x="318.7" y="515.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="321.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.58%)</title><rect x="325.6" y="515.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="328.6" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.58%)</title><rect x="332.4" y="515.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="335.4" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.58%)</title><rect x="339.3" y="515.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="342.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.58%)</title><rect x="339.3" y="499.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="342.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 1.16%)</title><rect x="346.2" y="515.0" width="13.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="349.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.58%)</title><rect x="353.0" y="499.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="356.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 1.16%)</title><rect x="359.9" y="515.0" width="13.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="362.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 1.16%)</title><rect x="359.9" y="499.0" width="13.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="362.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 2.91%)</title><rect x="373.6" y="515.0" width="34.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="376.6" y="526.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.16%)</title><rect x="373.6" y="499.0" width="13.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="376.6" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.58%)</title><rect x="373.6" y="483.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="376.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.58%)</title><rect x="373.6" y="467.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="376.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.58%)</title><rect x="373.6" y="451.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="376.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.58%)</title><rect x="373.6" y="435.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="376.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.58%)</title><rect x="373.6" y="419.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="376.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.58%)</title><rect x="380.5" y="483.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="383.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.58%)</title><rect x="380.5" y="467.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="383.5" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.74%)</title><rect x="387.3" y="499.0" width="20.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="390.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.74%)</title><rect x="387.3" y="483.0" width="20.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="390.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.74%)</title><rect x="387.3" y="467.0" width="20.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="390.3" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.58%)</title><rect x="387.3" y="451.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="390.3" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.58%)</title><rect x="387.3" y="435.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="390.3" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.58%)</title><rect x="387.3" y="419.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="390.3" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.58%)</title><rect x="387.3" y="403.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="390.3" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.58%)</title><rect x="387.3" y="387.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="390.3" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.58%)</title><rect x="394.2" y="451.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="397.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.58%)</title><rect x="394.2" y="435.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="397.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.58%)</title><rect x="394.2" y="419.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="397.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.58%)</title><rect x="394.2" y="403.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="397.2" y="414.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.58%)</title><rect x="394.2" y="387.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="397.2" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.58%)</title><rect x="401.0" y="451.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="404.0" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.58%)</title><rect x="401.0" y="435.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="404.0" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.58%)</title><rect x="401.0" y="419.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="404.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.58%)</title><rect x="407.9" y="531.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="410.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.58%)</title><rect x="407.9" y="515.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="410.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.58%)</title><rect x="407.9" y="499.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="410.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.58%)</title><rect x="407.9" y="483.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="410.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.58%)</title><rect x="407.9" y="467.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="410.9" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (16 samples, 9.30%)</title><rect x="414.8" y="627.0" width="109.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="417.8" y="638.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (5 samples, 2.91%)</title><rect x="414.8" y="611.0" width="34.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="417.8" y="622.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (5 samples, 2.91%)</title><rect x="414.8" y="595.0" width="34.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="417.8" y="606.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (5 samples, 2.91%)</title><rect x="414.8" y="579.0" width="34.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="417.8" y="590.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.58%)</title><rect x="414.8" y="563.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="417.8" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.58%)</title><rect x="414.8" y="547.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="417.8" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.58%)</title><rect x="414.8" y="531.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="417.8" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 2.33%)</title><rect x="421.6" y="563.0" width="27.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="424.6" y="574.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 1.16%)</title><rect x="435.3" y="547.0" width="13.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="438.3" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (9 samples, 5.23%)</title><rect x="449.1" y="611.0" width="61.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="452.1" y="622.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (9 samples, 5.23%)</title><rect x="449.1" y="595.0" width="61.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="452.1" y="606.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (1 samples, 0.58%)</title><rect x="455.9" y="579.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="458.9" y="590.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.58%)</title><rect x="455.9" y="563.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="458.9" y="574.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.58%)</title><rect x="455.9" y="547.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="458.9" y="558.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.58%)</title><rect x="455.9" y="531.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="458.9" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.58%)</title><rect x="455.9" y="515.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="458.9" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.58%)</title><rect x="455.9" y="499.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="458.9" y="510.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.58%)</title><rect x="455.9" y="483.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="458.9" y="494.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.58%)</title><rect x="455.9" y="467.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="458.9" y="478.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.58%)</title><rect x="462.8" y="579.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="465.8" y="590.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.58%)</title><rect x="462.8" y="563.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="465.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.topic (1 samples, 0.58%)</title><rect x="469.7" y="579.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="472.7" y="590.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 2.91%)</title><rect x="476.5" y="579.0" width="34.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="479.5" y="590.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 2.91%)</title><rect x="476.5" y="563.0" width="34.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="479.5" y="574.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.58%)</title><rect x="476.5" y="547.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="479.5" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.58%)</title><rect x="476.5" y="531.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="479.5" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.58%)</title><rect x="476.5" y="515.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="479.5" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.58%)</title><rect x="476.5" y="499.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="479.5" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 2.33%)</title><rect x="483.4" y="547.0" width="27.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="486.4" y="558.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 2.33%)</title><rect x="483.4" y="531.0" width="27.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="486.4" y="542.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.16%)</title><rect x="497.1" y="515.0" width="13.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="500.1" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.58%)</title><rect x="497.1" y="499.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="500.1" y="510.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.58%)</title><rect x="504.0" y="499.0" width="6.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="507.0" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (2 samples, 1.16%)</title><rect x="510.8" y="611.0" width="13.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="513.8" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 1.16%)</title><rect x="510.8" y="595.0" width="13.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="513.8" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1062177384.process (1 samples, 0.58%)</title><rect x="510.8" y="579.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="513.8" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.58%)</title><rect x="510.8" y="563.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="513.8" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.58%)</title><rect x="510.8" y="547.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="513.8" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.58%)</title><rect x="510.8" y="531.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="513.8" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.58%)</title><rect x="510.8" y="515.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="513.8" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.58%)</title><rect x="510.8" y="499.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="513.8" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.58%)</title><rect x="510.8" y="483.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="513.8" y="494.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.58%)</title><rect x="510.8" y="467.0" width="6.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="513.8" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.58%)</title><rect x="517.7" y="579.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="520.7" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.58%)</title><rect x="517.7" y="563.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="520.7" y="574.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.58%)</title><rect x="524.5" y="691.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="527.5" y="702.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.58%)</title><rect x="524.5" y="675.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="527.5" y="686.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.58%)</title><rect x="524.5" y="659.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="527.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 1.16%)</title><rect x="531.4" y="691.0" width="13.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="534.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.16%)</title><rect x="531.4" y="675.0" width="13.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="534.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.58%)</title><rect x="538.3" y="659.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="541.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.beforeExecute (1 samples, 0.58%)</title><rect x="545.1" y="691.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="548.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (11 samples, 6.40%)</title><rect x="552.0" y="691.0" width="75.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="555.0" y="702.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (11 samples, 6.40%)</title><rect x="552.0" y="675.0" width="75.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="555.0" y="686.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (9 samples, 5.23%)</title><rect x="565.7" y="659.0" width="61.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="568.7" y="670.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (9 samples, 5.23%)</title><rect x="565.7" y="643.0" width="61.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="568.7" y="654.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (9 samples, 5.23%)</title><rect x="565.7" y="627.0" width="61.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="568.7" y="638.0">sun/mi..</text>
</g>
<g>
<title>Unsafe_Park (8 samples, 4.65%)</title><rect x="572.6" y="611.0" width="54.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="575.6" y="622.0">Unsaf..</text>
</g>
<g>
<title>BarrierSet::write_barrier(oopDesc*) (1 samples, 0.58%)</title><rect x="572.6" y="595.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="575.6" y="606.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.58%)</title><rect x="579.4" y="595.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="582.4" y="606.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.58%)</title><rect x="586.3" y="595.0" width="6.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="589.3" y="606.0"></text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 2.33%)</title><rect x="593.1" y="595.0" width="27.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="596.1" y="606.0">_..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.58%)</title><rect x="620.6" y="595.0" width="6.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="623.6" y="606.0"></text>
</g>
<g>
<title>start_thread (82 samples, 47.67%)</title><rect x="627.4" y="739.0" width="562.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="630.4" y="750.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (82 samples, 47.67%)</title><rect x="627.4" y="723.0" width="562.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="630.4" y="734.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 6.40%)</title><rect x="627.4" y="707.0" width="75.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="630.4" y="718.0">GangWork..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 1.74%)</title><rect x="627.4" y="691.0" width="20.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="630.4" y="702.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 1.74%)</title><rect x="627.4" y="675.0" width="20.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="630.4" y="686.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.58%)</title><rect x="627.4" y="659.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="630.4" y="670.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.16%)</title><rect x="634.3" y="659.0" width="13.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="637.3" y="670.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (7 samples, 4.07%)</title><rect x="648.0" y="691.0" width="48.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="651.0" y="702.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 3.49%)</title><rect x="648.0" y="675.0" width="41.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="651.0" y="686.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 1.74%)</title><rect x="648.0" y="659.0" width="20.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="651.0" y="670.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.16%)</title><rect x="654.9" y="643.0" width="13.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="657.9" y="654.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 1.74%)</title><rect x="668.6" y="659.0" width="20.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="671.6" y="670.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.58%)</title><rect x="689.2" y="675.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="692.2" y="686.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.58%)</title><rect x="689.2" y="659.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="692.2" y="670.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.58%)</title><rect x="689.2" y="643.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="692.2" y="654.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.58%)</title><rect x="689.2" y="627.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="692.2" y="638.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.58%)</title><rect x="689.2" y="611.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="692.2" y="622.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.58%)</title><rect x="689.2" y="595.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="692.2" y="606.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.58%)</title><rect x="696.0" y="691.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="699.0" y="702.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.58%)</title><rect x="696.0" y="675.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="699.0" y="686.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.58%)</title><rect x="696.0" y="659.0" width="6.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="699.0" y="670.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (71 samples, 41.28%)</title><rect x="702.9" y="707.0" width="487.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="705.9" y="718.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (71 samples, 41.28%)</title><rect x="702.9" y="691.0" width="487.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="705.9" y="702.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (71 samples, 41.28%)</title><rect x="702.9" y="675.0" width="487.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="705.9" y="686.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (68 samples, 39.53%)</title><rect x="702.9" y="659.0" width="466.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="705.9" y="670.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (68 samples, 39.53%)</title><rect x="702.9" y="643.0" width="466.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="705.9" y="654.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool..</text>
</g>
<g>
<title>Compile::Code_Gen() (37 samples, 21.51%)</title><rect x="702.9" y="627.0" width="253.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="705.9" y="638.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 2.33%)</title><rect x="702.9" y="611.0" width="27.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="705.9" y="622.0">C..</text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.58%)</title><rect x="716.6" y="595.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="719.6" y="606.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.58%)</title><rect x="716.6" y="579.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="719.6" y="590.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.58%)</title><rect x="716.6" y="563.0" width="6.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="719.6" y="574.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.58%)</title><rect x="723.5" y="595.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="726.5" y="606.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.74%)</title><rect x="730.3" y="611.0" width="20.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="733.3" y="622.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.58%)</title><rect x="730.3" y="595.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="733.3" y="606.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.58%)</title><rect x="737.2" y="595.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="740.2" y="606.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.58%)</title><rect x="744.1" y="595.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="747.1" y="606.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.58%)</title><rect x="744.1" y="579.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="747.1" y="590.0"></text>
</g>
<g>
<title>MachNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.58%)</title><rect x="744.1" y="563.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="747.1" y="574.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.58%)</title><rect x="750.9" y="611.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="753.9" y="622.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.58%)</title><rect x="750.9" y="595.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="753.9" y="606.0"></text>
</g>
<g>
<title>Block::num_fall_throughs() (1 samples, 0.58%)</title><rect x="750.9" y="579.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="753.9" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.74%)</title><rect x="757.8" y="611.0" width="20.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="760.8" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.74%)</title><rect x="757.8" y="595.0" width="20.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="760.8" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.58%)</title><rect x="757.8" y="579.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="760.8" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 1.16%)</title><rect x="764.7" y="579.0" width="13.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="767.7" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.58%)</title><rect x="764.7" y="563.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="767.7" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.58%)</title><rect x="771.5" y="563.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="774.5" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (26 samples, 15.12%)</title><rect x="778.4" y="611.0" width="178.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="781.4" y="622.0">PhaseChaitin::Register_..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.58%)</title><rect x="778.4" y="595.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="781.4" y="606.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.58%)</title><rect x="785.2" y="595.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="788.2" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 2.33%)</title><rect x="792.1" y="595.0" width="27.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="795.1" y="606.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.58%)</title><rect x="805.8" y="579.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="808.8" y="590.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.58%)</title><rect x="812.7" y="579.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="815.7" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.58%)</title><rect x="819.5" y="595.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="822.5" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.58%)</title><rect x="819.5" y="579.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="822.5" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.58%)</title><rect x="826.4" y="595.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="829.4" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 5.23%)</title><rect x="833.3" y="595.0" width="61.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="836.3" y="606.0">PhaseC..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 2.33%)</title><rect x="860.7" y="579.0" width="27.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="863.7" y="590.0">P..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.58%)</title><rect x="867.6" y="563.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="870.6" y="574.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.58%)</title><rect x="874.4" y="563.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="877.4" y="574.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.58%)</title><rect x="881.3" y="563.0" width="6.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="884.3" y="574.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.58%)</title><rect x="888.1" y="579.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="891.1" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 1.16%)</title><rect x="895.0" y="595.0" width="13.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="898.0" y="606.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.58%)</title><rect x="901.9" y="579.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="904.9" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.58%)</title><rect x="908.7" y="595.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="911.7" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.16%)</title><rect x="915.6" y="595.0" width="13.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="918.6" y="606.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.58%)</title><rect x="915.6" y="579.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="918.6" y="590.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.58%)</title><rect x="922.4" y="579.0" width="6.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="925.4" y="590.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.58%)</title><rect x="929.3" y="595.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="932.3" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.58%)</title><rect x="929.3" y="579.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="932.3" y="590.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.16%)</title><rect x="936.2" y="595.0" width="13.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="939.2" y="606.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.58%)</title><rect x="943.0" y="579.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="946.0" y="590.0"></text>
</g>
<g>
<title>loadBNode::oper_input_base() const (1 samples, 0.58%)</title><rect x="949.9" y="595.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="952.9" y="606.0"></text>
</g>
<g>
<title>Compile::Optimize() (24 samples, 13.95%)</title><rect x="956.7" y="627.0" width="164.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="959.7" y="638.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.58%)</title><rect x="956.7" y="611.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="959.7" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.58%)</title><rect x="956.7" y="595.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="959.7" y="606.0"></text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.58%)</title><rect x="956.7" y="579.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="959.7" y="590.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 1.74%)</title><rect x="963.6" y="611.0" width="20.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="966.6" y="622.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.58%)</title><rect x="970.5" y="595.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="973.5" y="606.0"></text>
</g>
<g>
<title>MemBarNode::Value(PhaseTransform*) const (1 samples, 0.58%)</title><rect x="977.3" y="595.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="980.3" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (17 samples, 9.88%)</title><rect x="984.2" y="611.0" width="116.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="987.2" y="622.0">PhaseIdealLoop..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 1.16%)</title><rect x="984.2" y="595.0" width="13.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="987.2" y="606.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 1.16%)</title><rect x="984.2" y="579.0" width="13.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="987.2" y="590.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.58%)</title><rect x="984.2" y="563.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="987.2" y="574.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.58%)</title><rect x="984.2" y="547.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="987.2" y="558.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.58%)</title><rect x="984.2" y="531.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="987.2" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.58%)</title><rect x="984.2" y="515.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="987.2" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_phi_for_loop(Node*, unsigned int, Node*, Node*, LoopNode*) (1 samples, 0.58%)</title><rect x="984.2" y="499.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="987.2" y="510.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.58%)</title><rect x="984.2" y="483.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="987.2" y="494.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.58%)</title><rect x="984.2" y="467.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="987.2" y="478.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.58%)</title><rect x="991.0" y="563.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="994.0" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.58%)</title><rect x="991.0" y="547.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="994.0" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.58%)</title><rect x="991.0" y="531.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="994.0" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.16%)</title><rect x="997.9" y="595.0" width="13.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1000.9" y="606.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 1.16%)</title><rect x="997.9" y="579.0" width="13.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1000.9" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.58%)</title><rect x="1011.6" y="595.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1014.6" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.58%)</title><rect x="1011.6" y="579.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1014.6" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 2.91%)</title><rect x="1018.5" y="595.0" width="34.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1021.5" y="606.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 2.33%)</title><rect x="1025.3" y="579.0" width="27.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1028.3" y="590.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.58%)</title><rect x="1032.2" y="563.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1035.2" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 1.16%)</title><rect x="1039.1" y="563.0" width="13.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1042.1" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 1.16%)</title><rect x="1039.1" y="547.0" width="13.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1042.1" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 2.33%)</title><rect x="1052.8" y="595.0" width="27.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1055.8" y="606.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (4 samples, 2.33%)</title><rect x="1052.8" y="579.0" width="27.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.8" y="590.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.58%)</title><rect x="1052.8" y="563.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1055.8" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (2 samples, 1.16%)</title><rect x="1059.7" y="563.0" width="13.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1062.7" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 1.16%)</title><rect x="1059.7" y="547.0" width="13.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1062.7" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::try_move_shenandoah_read_barrier(Node*, Node*) (1 samples, 0.58%)</title><rect x="1073.4" y="563.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1076.4" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.58%)</title><rect x="1080.2" y="595.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1083.2" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.58%)</title><rect x="1080.2" y="579.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1083.2" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.58%)</title><rect x="1080.2" y="563.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1083.2" y="574.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.58%)</title><rect x="1080.2" y="547.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1083.2" y="558.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.58%)</title><rect x="1087.1" y="595.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1090.1" y="606.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.58%)</title><rect x="1094.0" y="595.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.0" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.74%)</title><rect x="1100.8" y="611.0" width="20.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.8" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.74%)</title><rect x="1100.8" y="595.0" width="20.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.8" y="606.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.58%)</title><rect x="1100.8" y="579.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1103.8" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.58%)</title><rect x="1100.8" y="563.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1103.8" y="574.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.58%)</title><rect x="1100.8" y="547.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1103.8" y="558.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.58%)</title><rect x="1107.7" y="579.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1110.7" y="590.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.58%)</title><rect x="1107.7" y="563.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.7" y="574.0"></text>
</g>
<g>
<title>MemNode::optimize_simple_memory_chain(Node*, TypeOopPtr const*, Node*, PhaseGVN*) (1 samples, 0.58%)</title><rect x="1107.7" y="547.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1110.7" y="558.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.58%)</title><rect x="1114.5" y="579.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.5" y="590.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.58%)</title><rect x="1114.5" y="563.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1117.5" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1114.5" y="547.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1117.5" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1114.5" y="531.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.5" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1114.5" y="515.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.5" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1114.5" y="499.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.5" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1114.5" y="483.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.5" y="494.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.58%)</title><rect x="1114.5" y="467.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.5" y="478.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.58%)</title><rect x="1114.5" y="451.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.5" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 3.49%)</title><rect x="1121.4" y="627.0" width="41.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1124.4" y="638.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 3.49%)</title><rect x="1121.4" y="611.0" width="41.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.4" y="622.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.49%)</title><rect x="1121.4" y="595.0" width="41.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1124.4" y="606.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.49%)</title><rect x="1121.4" y="579.0" width="41.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.4" y="590.0">Par..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.58%)</title><rect x="1121.4" y="563.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.4" y="574.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.58%)</title><rect x="1121.4" y="547.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1124.4" y="558.0"></text>
</g>
<g>
<title>GraphKit::combine_exception_states(SafePointNode*, SafePointNode*) (1 samples, 0.58%)</title><rect x="1121.4" y="531.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.91%)</title><rect x="1128.3" y="563.0" width="34.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1131.3" y="574.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.91%)</title><rect x="1128.3" y="547.0" width="34.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.3" y="558.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.16%)</title><rect x="1128.3" y="531.0" width="13.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.3" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.16%)</title><rect x="1128.3" y="515.0" width="13.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.16%)</title><rect x="1128.3" y="499.0" width="13.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.16%)</title><rect x="1128.3" y="483.0" width="13.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.16%)</title><rect x="1128.3" y="467.0" width="13.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.3" y="478.0"></text>
</g>
<g>
<title>Parse::Block::successor_for_bci(int) (1 samples, 0.58%)</title><rect x="1128.3" y="451.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1135.1" y="451.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.1" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1135.1" y="435.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.1" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1135.1" y="419.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1135.1" y="403.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1135.1" y="387.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1135.1" y="371.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.58%)</title><rect x="1135.1" y="355.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.58%)</title><rect x="1135.1" y="339.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.1" y="350.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.58%)</title><rect x="1135.1" y="323.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.1" y="334.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.58%)</title><rect x="1135.1" y="307.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.1" y="318.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.58%)</title><rect x="1135.1" y="291.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.1" y="302.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.74%)</title><rect x="1142.0" y="531.0" width="20.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.0" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.16%)</title><rect x="1142.0" y="515.0" width="13.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.0" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.16%)</title><rect x="1142.0" y="499.0" width="13.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.16%)</title><rect x="1142.0" y="483.0" width="13.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.16%)</title><rect x="1142.0" y="467.0" width="13.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.16%)</title><rect x="1142.0" y="451.0" width="13.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.16%)</title><rect x="1142.0" y="435.0" width="13.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.0" y="446.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.58%)</title><rect x="1142.0" y="419.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.0" y="430.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.58%)</title><rect x="1142.0" y="403.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.0" y="414.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_single(ciBytecodeStream*) (1 samples, 0.58%)</title><rect x="1142.0" y="387.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.0" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1148.8" y="419.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1148.8" y="403.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1148.8" y="387.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1148.8" y="371.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1148.8" y="355.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1148.8" y="339.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.8" y="350.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.58%)</title><rect x="1148.8" y="323.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.8" y="334.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.58%)</title><rect x="1148.8" y="307.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.8" y="318.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.58%)</title><rect x="1148.8" y="291.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.8" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.58%)</title><rect x="1148.8" y="275.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.8" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.58%)</title><rect x="1148.8" y="259.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.8" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.58%)</title><rect x="1148.8" y="243.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.8" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.58%)</title><rect x="1148.8" y="227.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.8" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.58%)</title><rect x="1148.8" y="211.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.8" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.58%)</title><rect x="1148.8" y="195.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.8" y="206.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.58%)</title><rect x="1148.8" y="179.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.8" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="1148.8" y="163.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.8" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="1148.8" y="147.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.8" y="158.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.58%)</title><rect x="1148.8" y="131.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.8" y="142.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.58%)</title><rect x="1148.8" y="115.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.8" y="126.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.58%)</title><rect x="1148.8" y="99.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.8" y="110.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, char const*, Thread*) (1 samples, 0.58%)</title><rect x="1148.8" y="83.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.8" y="94.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.58%)</title><rect x="1148.8" y="67.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.8" y="78.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.58%)</title><rect x="1148.8" y="51.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.8" y="62.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.58%)</title><rect x="1148.8" y="35.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.8" y="46.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1155.7" y="515.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.7" y="526.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.58%)</title><rect x="1155.7" y="499.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.7" y="510.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.58%)</title><rect x="1155.7" y="483.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.7" y="494.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_input_for_runtime_call(SafePointNode*) (1 samples, 0.58%)</title><rect x="1155.7" y="467.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.7" y="478.0"></text>
</g>
<g>
<title>MergeMemNode::bottom_type() const (1 samples, 0.58%)</title><rect x="1155.7" y="451.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.7" y="462.0"></text>
</g>
<g>
<title>TraceTime::~TraceTime() (1 samples, 0.58%)</title><rect x="1162.6" y="627.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.6" y="638.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.74%)</title><rect x="1169.4" y="659.0" width="20.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.4" y="670.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.74%)</title><rect x="1169.4" y="643.0" width="20.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.4" y="654.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.74%)</title><rect x="1169.4" y="627.0" width="20.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.4" y="638.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.74%)</title><rect x="1169.4" y="611.0" width="20.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.4" y="622.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 1.16%)</title><rect x="1169.4" y="595.0" width="13.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.4" y="606.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 1.16%)</title><rect x="1169.4" y="579.0" width="13.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.4" y="590.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 1.16%)</title><rect x="1169.4" y="563.0" width="13.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.4" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 1.16%)</title><rect x="1169.4" y="547.0" width="13.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.4" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 1.16%)</title><rect x="1169.4" y="531.0" width="13.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.4" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 1.16%)</title><rect x="1169.4" y="515.0" width="13.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.4" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 1.16%)</title><rect x="1169.4" y="499.0" width="13.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.4" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 1.16%)</title><rect x="1169.4" y="483.0" width="13.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.4" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 1.16%)</title><rect x="1169.4" y="467.0" width="13.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.4" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 1.16%)</title><rect x="1169.4" y="451.0" width="13.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.4" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 1.16%)</title><rect x="1169.4" y="435.0" width="13.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.4" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 1.16%)</title><rect x="1169.4" y="419.0" width="13.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.4" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.58%)</title><rect x="1169.4" y="403.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.4" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::handle_exception(Instruction*) (1 samples, 0.58%)</title><rect x="1169.4" y="387.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.4" y="398.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.58%)</title><rect x="1176.3" y="403.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.3" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="1176.3" y="387.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.3" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="1176.3" y="371.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.3" y="382.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.58%)</title><rect x="1176.3" y="355.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.3" y="366.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.58%)</title><rect x="1176.3" y="339.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.3" y="350.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="1176.3" y="323.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.3" y="334.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.58%)</title><rect x="1176.3" y="307.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.3" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.58%)</title><rect x="1176.3" y="291.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.3" y="302.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.58%)</title><rect x="1176.3" y="275.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="286.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.58%)</title><rect x="1176.3" y="259.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.3" y="270.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.58%)</title><rect x="1176.3" y="243.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.3" y="254.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.58%)</title><rect x="1183.1" y="595.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.1" y="606.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.58%)</title><rect x="1183.1" y="579.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.1" y="590.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.58%)</title><rect x="1183.1" y="563.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.1" y="574.0"></text>
</g>
<g>
<title>Assembler::movq(Address, RegisterImpl*) (1 samples, 0.58%)</title><rect x="1183.1" y="547.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.1" y="558.0"></text>
</g>
</g>
</svg>
