<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1270" onload="init(evt)" viewBox="0 0 1200 1270" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1253"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1253"> </text>
<g id="frames">
<g>
<title>all (1,294 samples, 100.00%)</title><rect x="10.0" y="1219.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1230.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="10.0" y="1203.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.08%)</title><rect x="10.0" y="1187.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (309 samples, 23.88%)</title><rect x="10.9" y="1203.0" width="281.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="1214.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.08%)</title><rect x="10.9" y="1187.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.08%)</title><rect x="10.9" y="1171.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.08%)</title><rect x="10.9" y="1155.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.08%)</title><rect x="10.9" y="1139.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="10.9" y="1123.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="10.9" y="1107.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="10.9" y="1091.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.08%)</title><rect x="10.9" y="1075.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.08%)</title><rect x="10.9" y="1059.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.08%)</title><rect x="10.9" y="1043.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.08%)</title><rect x="10.9" y="1027.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="10.9" y="1011.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.read (1 samples, 0.08%)</title><rect x="10.9" y="995.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.9" y="1006.0"></text>
</g>
<g>
<title>InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int) (1 samples, 0.08%)</title><rect x="10.9" y="979.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.9" y="990.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::push(Metadata* const&amp;) (1 samples, 0.08%)</title><rect x="10.9" y="963.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.9" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (308 samples, 23.80%)</title><rect x="11.8" y="1187.0" width="280.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.8" y="1198.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (5 samples, 0.39%)</title><rect x="11.8" y="1171.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.8" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.39%)</title><rect x="11.8" y="1155.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.8" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1952376939.accept (5 samples, 0.39%)</title><rect x="11.8" y="1139.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.8" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (5 samples, 0.39%)</title><rect x="11.8" y="1123.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="14.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.39%)</title><rect x="11.8" y="1107.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.8" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.31%)</title><rect x="12.7" y="1091.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.7" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.08%)</title><rect x="16.4" y="1171.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.4" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.08%)</title><rect x="16.4" y="1155.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.4" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="16.4" y="1139.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.4" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="16.4" y="1123.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.4" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="16.4" y="1107.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.4" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.08%)</title><rect x="16.4" y="1091.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.4" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.08%)</title><rect x="16.4" y="1075.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.4" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="16.4" y="1059.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (242 samples, 18.70%)</title><rect x="17.3" y="1171.0" width="220.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.3" y="1182.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1218505439.accept (233 samples, 18.01%)</title><rect x="17.3" y="1155.0" width="212.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.3" y="1166.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (233 samples, 18.01%)</title><rect x="17.3" y="1139.0" width="212.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.3" y="1150.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (2 samples, 0.15%)</title><rect x="17.3" y="1123.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (186 samples, 14.37%)</title><rect x="19.1" y="1123.0" width="169.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.1" y="1134.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (186 samples, 14.37%)</title><rect x="19.1" y="1107.0" width="169.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.1" y="1118.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (186 samples, 14.37%)</title><rect x="19.1" y="1091.0" width="169.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.1" y="1102.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (186 samples, 14.37%)</title><rect x="19.1" y="1075.0" width="169.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.1" y="1086.0">java/util/concurrent/E..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (186 samples, 14.37%)</title><rect x="19.1" y="1059.0" width="169.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.1" y="1070.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (186 samples, 14.37%)</title><rect x="19.1" y="1043.0" width="169.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="22.1" y="1054.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (129 samples, 9.97%)</title><rect x="19.1" y="1027.0" width="117.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.1" y="1038.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (24 samples, 1.85%)</title><rect x="19.1" y="1011.0" width="21.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.1" y="1022.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (24 samples, 1.85%)</title><rect x="19.1" y="995.0" width="21.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.1" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (17 samples, 1.31%)</title><rect x="25.5" y="979.0" width="15.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (17 samples, 1.31%)</title><rect x="25.5" y="963.0" width="15.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.39%)</title><rect x="41.0" y="1011.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="44.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (5 samples, 0.39%)</title><rect x="41.0" y="995.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.08%)</title><rect x="43.7" y="979.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="46.7" y="990.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.08%)</title><rect x="43.7" y="963.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="46.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.08%)</title><rect x="44.7" y="979.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (100 samples, 7.73%)</title><rect x="45.6" y="1011.0" width="91.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="48.6" y="1022.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (100 samples, 7.73%)</title><rect x="45.6" y="995.0" width="91.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.6" y="1006.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (99 samples, 7.65%)</title><rect x="45.6" y="979.0" width="90.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="48.6" y="990.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (99 samples, 7.65%)</title><rect x="45.6" y="963.0" width="90.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="48.6" y="974.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (99 samples, 7.65%)</title><rect x="45.6" y="947.0" width="90.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.6" y="958.0">sun/misc/U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="46.5" y="931.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="49.5" y="942.0"></text>
</g>
<g>
<title>Unsafe_Unpark (88 samples, 6.80%)</title><rect x="47.4" y="931.0" width="80.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="50.4" y="942.0">Unsafe_Un..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.15%)</title><rect x="50.1" y="915.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="53.1" y="926.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.08%)</title><rect x="51.9" y="915.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="54.9" y="926.0"></text>
</g>
<g>
<title>__pthread_cond_signal (46 samples, 3.55%)</title><rect x="52.9" y="915.0" width="41.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="55.9" y="926.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (7 samples, 0.54%)</title><rect x="94.8" y="915.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="97.8" y="926.0"></text>
</g>
<g>
<title>pthread_mutex_lock (29 samples, 2.24%)</title><rect x="101.2" y="915.0" width="26.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="104.2" y="926.0">p..</text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.39%)</title><rect x="127.6" y="931.0" width="4.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="130.6" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.31%)</title><rect x="132.2" y="931.0" width="3.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="135.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="135.8" y="979.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="138.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (50 samples, 3.86%)</title><rect x="136.8" y="1027.0" width="45.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="139.8" y="1038.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (50 samples, 3.86%)</title><rect x="136.8" y="1011.0" width="45.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="139.8" y="1022.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (50 samples, 3.86%)</title><rect x="136.8" y="995.0" width="45.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="139.8" y="1006.0">java..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.23%)</title><rect x="179.6" y="979.0" width="2.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="182.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.15%)</title><rect x="182.3" y="1027.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.15%)</title><rect x="182.3" y="1011.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.15%)</title><rect x="182.3" y="995.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="185.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.39%)</title><rect x="184.2" y="1027.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="187.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.39%)</title><rect x="184.2" y="1011.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="187.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.23%)</title><rect x="184.2" y="995.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="187.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="186.0" y="979.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="189.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.15%)</title><rect x="186.9" y="995.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.08%)</title><rect x="187.8" y="979.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.8" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (5 samples, 0.39%)</title><rect x="188.7" y="1123.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="191.7" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (5 samples, 0.39%)</title><rect x="188.7" y="1107.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="191.7" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (5 samples, 0.39%)</title><rect x="193.3" y="1123.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.3" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.39%)</title><rect x="193.3" y="1107.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="196.3" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.39%)</title><rect x="193.3" y="1091.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (35 samples, 2.70%)</title><rect x="197.9" y="1123.0" width="31.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="200.9" y="1134.0">co..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.08%)</title><rect x="197.9" y="1107.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="200.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (33 samples, 2.55%)</title><rect x="198.8" y="1107.0" width="30.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="201.8" y="1118.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (13 samples, 1.00%)</title><rect x="217.0" y="1091.0" width="11.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="220.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (11 samples, 0.85%)</title><rect x="217.0" y="1075.0" width="10.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="220.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (11 samples, 0.85%)</title><rect x="217.0" y="1059.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.0" y="1070.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (11 samples, 0.85%)</title><rect x="217.0" y="1043.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="220.0" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="222.5" y="1027.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="225.5" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="222.5" y="1011.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="225.5" y="1022.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="222.5" y="995.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="225.5" y="1006.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="222.5" y="979.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="225.5" y="990.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="222.5" y="963.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="225.5" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.31%)</title><rect x="223.4" y="1027.0" width="3.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="226.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.15%)</title><rect x="227.0" y="1075.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.0" y="1086.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="228.9" y="1107.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="231.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (8 samples, 0.62%)</title><rect x="229.8" y="1155.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (8 samples, 0.62%)</title><rect x="229.8" y="1139.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.62%)</title><rect x="229.8" y="1123.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="232.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.62%)</title><rect x="229.8" y="1107.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.08%)</title><rect x="237.1" y="1155.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 4.64%)</title><rect x="238.0" y="1171.0" width="54.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="241.0" y="1182.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 4.64%)</title><rect x="238.0" y="1155.0" width="54.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="241.0" y="1166.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (33 samples, 2.55%)</title><rect x="238.0" y="1139.0" width="30.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="241.0" y="1150.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (33 samples, 2.55%)</title><rect x="238.0" y="1123.0" width="30.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="241.0" y="1134.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (33 samples, 2.55%)</title><rect x="238.0" y="1107.0" width="30.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="241.0" y="1118.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (30 samples, 2.32%)</title><rect x="238.0" y="1091.0" width="27.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.0" y="1102.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (30 samples, 2.32%)</title><rect x="238.0" y="1075.0" width="27.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="241.0" y="1086.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (14 samples, 1.08%)</title><rect x="240.7" y="1059.0" width="12.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="243.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (10 samples, 0.77%)</title><rect x="244.4" y="1043.0" width="9.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="247.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (10 samples, 0.77%)</title><rect x="244.4" y="1027.0" width="9.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="247.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (10 samples, 0.77%)</title><rect x="244.4" y="1011.0" width="9.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="247.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (10 samples, 0.77%)</title><rect x="244.4" y="995.0" width="9.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="247.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (10 samples, 0.77%)</title><rect x="244.4" y="979.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (10 samples, 0.77%)</title><rect x="244.4" y="963.0" width="9.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="247.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (9 samples, 0.70%)</title><rect x="245.3" y="947.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="248.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (12 samples, 0.93%)</title><rect x="253.5" y="1059.0" width="10.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="256.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 0.93%)</title><rect x="253.5" y="1043.0" width="10.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.54%)</title><rect x="253.5" y="1027.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.5" y="1038.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.54%)</title><rect x="253.5" y="1011.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="256.5" y="1022.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="258.9" y="995.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="261.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (5 samples, 0.39%)</title><rect x="259.9" y="1027.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="262.9" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (5 samples, 0.39%)</title><rect x="259.9" y="1011.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.08%)</title><rect x="264.4" y="1059.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="267.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.08%)</title><rect x="265.3" y="1091.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="268.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.08%)</title><rect x="265.3" y="1075.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="265.3" y="1059.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="265.3" y="1043.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="265.3" y="1027.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="265.3" y="1011.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="265.3" y="995.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.15%)</title><rect x="266.2" y="1091.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="269.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.15%)</title><rect x="266.2" y="1075.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="269.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="266.2" y="1059.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="269.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="266.2" y="1043.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="266.2" y="1027.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="269.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="267.2" y="1011.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="270.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (15 samples, 1.16%)</title><rect x="268.1" y="1139.0" width="13.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="271.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (15 samples, 1.16%)</title><rect x="268.1" y="1123.0" width="13.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (13 samples, 1.00%)</title><rect x="268.1" y="1107.0" width="11.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.15%)</title><rect x="269.9" y="1091.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="272.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1439321916.accept (2 samples, 0.15%)</title><rect x="269.9" y="1075.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="272.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.15%)</title><rect x="269.9" y="1059.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="272.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="269.9" y="1043.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="269.9" y="1027.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="272.9" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="269.9" y="1011.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="269.9" y="995.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.08%)</title><rect x="269.9" y="979.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="272.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.08%)</title><rect x="270.8" y="1043.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="273.8" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="271.7" y="1091.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.7" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.15%)</title><rect x="272.6" y="1091.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.15%)</title><rect x="272.6" y="1075.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.15%)</title><rect x="272.6" y="1059.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="275.6" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.15%)</title><rect x="272.6" y="1043.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.6" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.15%)</title><rect x="272.6" y="1027.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.6" y="1038.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (2 samples, 0.15%)</title><rect x="272.6" y="1011.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.6" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.08%)</title><rect x="272.6" y="995.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="275.6" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.08%)</title><rect x="273.5" y="995.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (3 samples, 0.23%)</title><rect x="274.5" y="1091.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="277.5" y="1102.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (3 samples, 0.23%)</title><rect x="274.5" y="1075.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="277.5" y="1086.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (3 samples, 0.23%)</title><rect x="274.5" y="1059.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="277.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.23%)</title><rect x="274.5" y="1043.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="277.5" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.23%)</title><rect x="274.5" y="1027.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="277.5" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.15%)</title><rect x="274.5" y="1011.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="277.5" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.08%)</title><rect x="274.5" y="995.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="277.5" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.08%)</title><rect x="275.4" y="995.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.4" y="1006.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.08%)</title><rect x="276.3" y="1011.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="279.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.23%)</title><rect x="277.2" y="1091.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="280.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.23%)</title><rect x="277.2" y="1075.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.2" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.23%)</title><rect x="277.2" y="1059.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="280.2" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.23%)</title><rect x="277.2" y="1043.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="280.2" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.08%)</title><rect x="278.1" y="1027.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="281.1" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="279.0" y="1027.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="279.0" y="1011.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.08%)</title><rect x="279.0" y="995.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.08%)</title><rect x="279.0" y="979.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="282.0" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="279.0" y="963.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.0" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.08%)</title><rect x="279.0" y="947.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.15%)</title><rect x="279.9" y="1107.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="282.9" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.15%)</title><rect x="279.9" y="1091.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.9" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.15%)</title><rect x="279.9" y="1075.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="282.9" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.15%)</title><rect x="279.9" y="1059.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.9" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.15%)</title><rect x="279.9" y="1043.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.9" y="1054.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.08%)</title><rect x="279.9" y="1027.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="282.9" y="1038.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.08%)</title><rect x="279.9" y="1011.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="282.9" y="1022.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.08%)</title><rect x="279.9" y="995.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="282.9" y="1006.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.08%)</title><rect x="279.9" y="979.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="282.9" y="990.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.08%)</title><rect x="279.9" y="963.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="282.9" y="974.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.08%)</title><rect x="279.9" y="947.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="282.9" y="958.0"></text>
</g>
<g>
<title>Method::load_signature_classes(methodHandle, Thread*) (1 samples, 0.08%)</title><rect x="279.9" y="931.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="282.9" y="942.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.08%)</title><rect x="279.9" y="915.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="282.9" y="926.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.08%)</title><rect x="279.9" y="899.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="282.9" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="280.8" y="1027.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="283.8" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="280.8" y="1011.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.8" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="280.8" y="995.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.8" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.08%)</title><rect x="280.8" y="979.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.8" y="990.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.08%)</title><rect x="280.8" y="963.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.8" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="280.8" y="947.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.8" y="958.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.08%)</title><rect x="280.8" y="931.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$223/1589554154.test (1 samples, 0.08%)</title><rect x="280.8" y="915.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$hasAllFetchPositions$4 (1 samples, 0.08%)</title><rect x="280.8" y="899.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="283.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$2400 (1 samples, 0.08%)</title><rect x="280.8" y="883.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.hasValidPosition (1 samples, 0.08%)</title><rect x="280.8" y="867.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="283.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.39%)</title><rect x="281.7" y="1139.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.39%)</title><rect x="281.7" y="1123.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="284.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 0.39%)</title><rect x="281.7" y="1107.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="284.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="281.7" y="1091.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="284.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="281.7" y="1075.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.31%)</title><rect x="282.7" y="1091.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="285.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (4 samples, 0.31%)</title><rect x="282.7" y="1075.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="285.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (4 samples, 0.31%)</title><rect x="282.7" y="1059.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="285.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (4 samples, 0.31%)</title><rect x="282.7" y="1043.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (4 samples, 0.31%)</title><rect x="282.7" y="1027.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (4 samples, 0.31%)</title><rect x="282.7" y="1011.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="285.7" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (4 samples, 0.31%)</title><rect x="282.7" y="995.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.7" y="1006.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.08%)</title><rect x="282.7" y="979.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.7" y="990.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.08%)</title><rect x="282.7" y="963.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="285.7" y="974.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="283.6" y="979.0" width="0.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="286.6" y="990.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="284.5" y="979.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="287.5" y="990.0"></text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.08%)</title><rect x="285.4" y="979.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="288.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.23%)</title><rect x="286.3" y="1139.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.23%)</title><rect x="286.3" y="1123.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="289.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="286.3" y="1107.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="289.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/815766703.accept (1 samples, 0.08%)</title><rect x="286.3" y="1091.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.08%)</title><rect x="286.3" y="1075.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="289.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="286.3" y="1059.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="289.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.08%)</title><rect x="286.3" y="1043.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="289.3" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="286.3" y="1027.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="289.3" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="286.3" y="1011.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="289.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.15%)</title><rect x="287.2" y="1107.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="290.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.15%)</title><rect x="287.2" y="1091.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.2" y="1102.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.08%)</title><rect x="287.2" y="1075.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.2" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="288.1" y="1075.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="291.1" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="288.1" y="1059.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="291.1" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="288.1" y="1043.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.1" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="288.1" y="1027.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="291.1" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="288.1" y="1011.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="291.1" y="1022.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="288.1" y="995.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="291.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (3 samples, 0.23%)</title><rect x="289.0" y="1139.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.23%)</title><rect x="289.0" y="1123.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="292.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="290.9" y="1107.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="293.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="290.9" y="1091.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="293.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="290.9" y="1075.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="293.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.08%)</title><rect x="290.9" y="1059.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Avg.update (1 samples, 0.08%)</title><rect x="290.9" y="1043.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.08%)</title><rect x="291.8" y="1139.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="291.8" y="1123.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="294.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="291.8" y="1107.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="294.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="291.8" y="1091.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="291.8" y="1075.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.run (692 samples, 53.48%)</title><rect x="292.7" y="1203.0" width="631.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="295.7" y="1214.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (692 samples, 53.48%)</title><rect x="292.7" y="1187.0" width="631.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.7" y="1198.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (692 samples, 53.48%)</title><rect x="292.7" y="1171.0" width="631.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.7" y="1182.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/194043057.run (453 samples, 35.01%)</title><rect x="292.7" y="1155.0" width="413.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.7" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lam..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (453 samples, 35.01%)</title><rect x="292.7" y="1139.0" width="413.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="295.7" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lamb..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (453 samples, 35.01%)</title><rect x="292.7" y="1123.0" width="413.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="295.7" y="1134.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (446 samples, 34.47%)</title><rect x="292.7" y="1107.0" width="406.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.7" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.s..</text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.77%)</title><rect x="304.5" y="1091.0" width="9.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="307.5" y="1102.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.62%)</title><rect x="306.4" y="1075.0" width="7.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="309.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (148 samples, 11.44%)</title><rect x="313.7" y="1091.0" width="134.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="316.7" y="1102.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (146 samples, 11.28%)</title><rect x="315.5" y="1075.0" width="133.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="318.5" y="1086.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (146 samples, 11.28%)</title><rect x="315.5" y="1059.0" width="133.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="318.5" y="1070.0">com/linecorp/deca..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="315.5" y="1043.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="318.5" y="1054.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="315.5" y="1027.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="318.5" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="315.5" y="1011.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="318.5" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="315.5" y="995.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="318.5" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (145 samples, 11.21%)</title><rect x="316.4" y="1043.0" width="132.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.4" y="1054.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (145 samples, 11.21%)</title><rect x="316.4" y="1027.0" width="132.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.4" y="1038.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (145 samples, 11.21%)</title><rect x="316.4" y="1011.0" width="132.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="319.4" y="1022.0">com/fasterxml/ja..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="316.4" y="995.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="319.4" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="316.4" y="979.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="319.4" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="316.4" y="963.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="319.4" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="316.4" y="947.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="319.4" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="316.4" y="931.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="319.4" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="316.4" y="915.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="319.4" y="926.0"></text>
</g>
<g>
<title>Thread::is_VM_thread() const (1 samples, 0.08%)</title><rect x="316.4" y="899.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="319.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (47 samples, 3.63%)</title><rect x="317.3" y="995.0" width="42.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="320.3" y="1006.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (11 samples, 0.85%)</title><rect x="317.3" y="979.0" width="10.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="320.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (11 samples, 0.85%)</title><rect x="317.3" y="963.0" width="10.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="320.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (11 samples, 0.85%)</title><rect x="317.3" y="947.0" width="10.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="320.3" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (11 samples, 0.85%)</title><rect x="317.3" y="931.0" width="10.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="320.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (36 samples, 2.78%)</title><rect x="327.3" y="979.0" width="32.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="330.3" y="990.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (36 samples, 2.78%)</title><rect x="327.3" y="963.0" width="32.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="330.3" y="974.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (12 samples, 0.93%)</title><rect x="327.3" y="947.0" width="11.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="330.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (12 samples, 0.93%)</title><rect x="327.3" y="931.0" width="11.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="330.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (2 samples, 0.15%)</title><rect x="336.5" y="915.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="339.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (18 samples, 1.39%)</title><rect x="338.3" y="947.0" width="16.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="341.3" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="338.3" y="931.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="341.3" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="339.2" y="931.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="342.2" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="339.2" y="915.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="342.2" y="926.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.08%)</title><rect x="340.1" y="931.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="343.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (15 samples, 1.16%)</title><rect x="341.0" y="931.0" width="13.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="344.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.08%)</title><rect x="349.2" y="915.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="352.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (2 samples, 0.15%)</title><rect x="350.1" y="915.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="353.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.08%)</title><rect x="352.0" y="915.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="355.0" y="926.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.15%)</title><rect x="352.9" y="915.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="355.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (6 samples, 0.46%)</title><rect x="354.7" y="947.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="357.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (3 samples, 0.23%)</title><rect x="354.7" y="931.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="357.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.08%)</title><rect x="356.5" y="915.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="359.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (3 samples, 0.23%)</title><rect x="357.4" y="931.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="360.4" y="942.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.15%)</title><rect x="358.3" y="915.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="361.3" y="926.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.08%)</title><rect x="359.3" y="899.0" width="0.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="362.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (87 samples, 6.72%)</title><rect x="360.2" y="995.0" width="79.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="363.2" y="1006.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.39%)</title><rect x="360.2" y="979.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="363.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (5 samples, 0.39%)</title><rect x="360.2" y="963.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="363.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (5 samples, 0.39%)</title><rect x="360.2" y="947.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="363.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (5 samples, 0.39%)</title><rect x="360.2" y="931.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="363.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.08%)</title><rect x="360.2" y="915.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="363.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.08%)</title><rect x="360.2" y="899.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="363.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (1 samples, 0.08%)</title><rect x="360.2" y="883.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="363.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 0.31%)</title><rect x="361.1" y="915.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="364.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.39%)</title><rect x="364.7" y="979.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="367.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.39%)</title><rect x="364.7" y="963.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="367.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (12 samples, 0.93%)</title><rect x="369.3" y="979.0" width="10.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="372.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.77%)</title><rect x="371.1" y="963.0" width="9.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="374.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (10 samples, 0.77%)</title><rect x="371.1" y="947.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="374.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (7 samples, 0.54%)</title><rect x="373.8" y="931.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="376.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.15%)</title><rect x="378.4" y="915.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="381.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 0.54%)</title><rect x="380.2" y="979.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="383.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.15%)</title><rect x="380.2" y="963.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="383.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.39%)</title><rect x="382.1" y="963.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="385.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (58 samples, 4.48%)</title><rect x="386.6" y="979.0" width="52.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="389.6" y="990.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.70%)</title><rect x="386.6" y="963.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="389.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.08%)</title><rect x="386.6" y="947.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="389.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.08%)</title><rect x="386.6" y="931.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="389.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.08%)</title><rect x="386.6" y="915.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="389.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (7 samples, 0.54%)</title><rect x="387.5" y="947.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="390.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="393.9" y="947.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="396.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="393.9" y="931.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="396.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (49 samples, 3.79%)</title><rect x="394.8" y="963.0" width="44.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="397.8" y="974.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (49 samples, 3.79%)</title><rect x="394.8" y="947.0" width="44.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="397.8" y="958.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (48 samples, 3.71%)</title><rect x="395.7" y="931.0" width="43.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="398.7" y="942.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.24%)</title><rect x="397.6" y="915.0" width="14.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="400.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.39%)</title><rect x="402.1" y="899.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="405.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.39%)</title><rect x="402.1" y="883.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="405.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.39%)</title><rect x="402.1" y="867.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="405.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.23%)</title><rect x="403.9" y="851.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="406.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.31%)</title><rect x="406.7" y="899.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="409.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="410.3" y="899.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="413.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="410.3" y="883.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="413.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.08%)</title><rect x="411.2" y="899.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="414.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.54%)</title><rect x="412.1" y="915.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="415.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.31%)</title><rect x="414.9" y="899.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="417.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.31%)</title><rect x="414.9" y="883.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="417.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.31%)</title><rect x="414.9" y="867.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="417.9" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 0.31%)</title><rect x="414.9" y="851.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="417.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.08%)</title><rect x="418.5" y="915.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="421.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (9 samples, 0.70%)</title><rect x="419.4" y="915.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="422.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (9 samples, 0.70%)</title><rect x="419.4" y="899.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="422.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (9 samples, 0.70%)</title><rect x="419.4" y="883.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="422.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (9 samples, 0.70%)</title><rect x="419.4" y="867.0" width="8.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="422.4" y="878.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (9 samples, 0.70%)</title><rect x="419.4" y="851.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="422.4" y="862.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (9 samples, 0.70%)</title><rect x="419.4" y="835.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="422.4" y="846.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (9 samples, 0.70%)</title><rect x="419.4" y="819.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="422.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.46%)</title><rect x="427.7" y="915.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="430.7" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.46%)</title><rect x="427.7" y="899.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="430.7" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.46%)</title><rect x="427.7" y="883.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="430.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.15%)</title><rect x="431.3" y="867.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="434.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (7 samples, 0.54%)</title><rect x="433.1" y="915.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="436.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="438.6" y="899.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="441.6" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="438.6" y="883.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="441.6" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="438.6" y="867.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="441.6" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="438.6" y="851.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="441.6" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="438.6" y="835.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="441.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (10 samples, 0.77%)</title><rect x="439.5" y="995.0" width="9.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="442.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (10 samples, 0.77%)</title><rect x="439.5" y="979.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="442.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (10 samples, 0.77%)</title><rect x="439.5" y="963.0" width="9.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="442.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (10 samples, 0.77%)</title><rect x="439.5" y="947.0" width="9.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="442.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 0.77%)</title><rect x="439.5" y="931.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="442.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.08%)</title><rect x="447.7" y="915.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="450.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (260 samples, 20.09%)</title><rect x="448.6" y="1091.0" width="237.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="451.6" y="1102.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (51 samples, 3.94%)</title><rect x="449.5" y="1075.0" width="46.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="452.5" y="1086.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (51 samples, 3.94%)</title><rect x="449.5" y="1059.0" width="46.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="452.5" y="1070.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (50 samples, 3.86%)</title><rect x="450.4" y="1043.0" width="45.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="453.4" y="1054.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (30 samples, 2.32%)</title><rect x="451.4" y="1027.0" width="27.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="454.4" y="1038.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (30 samples, 2.32%)</title><rect x="451.4" y="1011.0" width="27.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="454.4" y="1022.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (30 samples, 2.32%)</title><rect x="451.4" y="995.0" width="27.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="454.4" y="1006.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (30 samples, 2.32%)</title><rect x="451.4" y="979.0" width="27.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="454.4" y="990.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (30 samples, 2.32%)</title><rect x="451.4" y="963.0" width="27.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="454.4" y="974.0">j..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (19 samples, 1.47%)</title><rect x="478.7" y="1027.0" width="17.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="481.7" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 0.46%)</title><rect x="490.6" y="1011.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="493.6" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 0.46%)</title><rect x="490.6" y="995.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="493.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.46%)</title><rect x="496.0" y="1075.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="499.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.46%)</title><rect x="496.0" y="1059.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="499.0" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.46%)</title><rect x="496.0" y="1043.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="499.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (141 samples, 10.90%)</title><rect x="501.5" y="1075.0" width="128.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="504.5" y="1086.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (140 samples, 10.82%)</title><rect x="502.4" y="1059.0" width="127.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="505.4" y="1070.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (54 samples, 4.17%)</title><rect x="505.2" y="1043.0" width="49.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="508.2" y="1054.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (33 samples, 2.55%)</title><rect x="517.0" y="1027.0" width="30.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="520.0" y="1038.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (31 samples, 2.40%)</title><rect x="518.8" y="1011.0" width="28.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="521.8" y="1022.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (21 samples, 1.62%)</title><rect x="523.4" y="995.0" width="19.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="526.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (21 samples, 1.62%)</title><rect x="523.4" y="979.0" width="19.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="526.4" y="990.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (21 samples, 1.62%)</title><rect x="523.4" y="963.0" width="19.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="526.4" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 0.39%)</title><rect x="532.5" y="947.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="535.5" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.15%)</title><rect x="532.5" y="931.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="535.5" y="942.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="532.5" y="915.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="535.5" y="926.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="533.4" y="915.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="536.4" y="926.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="533.4" y="899.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="536.4" y="910.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.08%)</title><rect x="533.4" y="883.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="536.4" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.23%)</title><rect x="534.3" y="931.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="537.3" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.23%)</title><rect x="534.3" y="915.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="537.3" y="926.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.08%)</title><rect x="534.3" y="899.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="537.3" y="910.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="535.3" y="899.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="538.3" y="910.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="536.2" y="899.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="539.2" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="536.2" y="883.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="539.2" y="894.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.46%)</title><rect x="537.1" y="947.0" width="5.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="540.1" y="958.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.23%)</title><rect x="542.6" y="995.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="545.6" y="1006.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="545.3" y="995.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="548.3" y="1006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="546.2" y="995.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="549.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.08%)</title><rect x="547.1" y="1027.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="550.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.08%)</title><rect x="547.1" y="1011.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="550.1" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.08%)</title><rect x="547.1" y="995.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="550.1" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="547.1" y="979.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="550.1" y="990.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="548.0" y="1027.0" width="0.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="551.0" y="1038.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.46%)</title><rect x="548.9" y="1027.0" width="5.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="551.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.15%)</title><rect x="554.4" y="1043.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="557.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.15%)</title><rect x="554.4" y="1027.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="557.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.15%)</title><rect x="554.4" y="1011.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="557.4" y="1022.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (81 samples, 6.26%)</title><rect x="556.2" y="1043.0" width="73.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="559.2" y="1054.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (78 samples, 6.03%)</title><rect x="559.0" y="1027.0" width="71.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="562.0" y="1038.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.31%)</title><rect x="559.0" y="1011.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="562.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.31%)</title><rect x="559.0" y="995.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="562.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.31%)</title><rect x="559.0" y="979.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="562.0" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.31%)</title><rect x="559.0" y="963.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="562.0" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (74 samples, 5.72%)</title><rect x="562.6" y="1011.0" width="67.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="565.6" y="1022.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (66 samples, 5.10%)</title><rect x="569.9" y="995.0" width="60.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="572.9" y="1006.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (32 samples, 2.47%)</title><rect x="600.9" y="979.0" width="29.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="603.9" y="990.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.15%)</title><rect x="619.1" y="963.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="622.1" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.62%)</title><rect x="621.0" y="963.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="624.0" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.15%)</title><rect x="626.4" y="947.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="629.4" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.15%)</title><rect x="626.4" y="931.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="629.4" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.15%)</title><rect x="626.4" y="915.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="629.4" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.15%)</title><rect x="626.4" y="899.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="629.4" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="626.4" y="883.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="629.4" y="894.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="627.4" y="883.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="630.4" y="894.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.15%)</title><rect x="628.3" y="963.0" width="1.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="631.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (45 samples, 3.48%)</title><rect x="630.1" y="1075.0" width="41.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="633.1" y="1086.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="630.1" y="1059.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="633.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (44 samples, 3.40%)</title><rect x="631.0" y="1059.0" width="40.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="634.0" y="1070.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1702093299.process (18 samples, 1.39%)</title><rect x="631.9" y="1043.0" width="16.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="634.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (18 samples, 1.39%)</title><rect x="631.9" y="1027.0" width="16.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="634.9" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (17 samples, 1.31%)</title><rect x="631.9" y="1011.0" width="15.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="634.9" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.15%)</title><rect x="631.9" y="995.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="634.9" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.15%)</title><rect x="631.9" y="979.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="634.9" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.15%)</title><rect x="631.9" y="963.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="634.9" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.08%)</title><rect x="632.8" y="947.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="635.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.08%)</title><rect x="632.8" y="931.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="635.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.08%)</title><rect x="632.8" y="915.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="635.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.46%)</title><rect x="633.7" y="995.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="636.7" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="633.7" y="979.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="636.7" y="990.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="633.7" y="963.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="636.7" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.39%)</title><rect x="634.7" y="979.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="637.7" y="990.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.39%)</title><rect x="634.7" y="963.0" width="4.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="637.7" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.70%)</title><rect x="639.2" y="995.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="642.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="646.5" y="979.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="649.5" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="646.5" y="963.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="649.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="647.4" y="1011.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="650.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="647.4" y="995.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="650.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="647.4" y="979.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="650.4" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="647.4" y="963.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="650.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="648.3" y="1043.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="651.3" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.08%)</title><rect x="648.3" y="1027.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="651.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (3 samples, 0.23%)</title><rect x="649.2" y="1043.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="652.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (3 samples, 0.23%)</title><rect x="649.2" y="1027.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="652.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/1062298710.get$Lambda (3 samples, 0.23%)</title><rect x="649.2" y="1011.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="652.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/1062298710.&lt;init&gt; (3 samples, 0.23%)</title><rect x="649.2" y="995.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="652.2" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="652.0" y="1043.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="655.0" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="652.0" y="1027.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="655.0" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (11 samples, 0.85%)</title><rect x="652.9" y="1043.0" width="10.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="655.9" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.70%)</title><rect x="654.7" y="1027.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="657.7" y="1038.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.23%)</title><rect x="655.6" y="1011.0" width="2.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="658.6" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (5 samples, 0.39%)</title><rect x="658.4" y="1011.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="661.4" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (9 samples, 0.70%)</title><rect x="662.9" y="1043.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="665.9" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.46%)</title><rect x="665.7" y="1027.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="668.7" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.08%)</title><rect x="671.1" y="1075.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="674.1" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="671.1" y="1059.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="674.1" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="671.1" y="1043.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="674.1" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="671.1" y="1027.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="674.1" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="671.1" y="1011.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="674.1" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="671.1" y="995.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="674.1" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="671.1" y="979.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="674.1" y="990.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="671.1" y="963.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="674.1" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="671.1" y="947.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="674.1" y="958.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="671.1" y="931.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="674.1" y="942.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.08%)</title><rect x="671.1" y="915.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="674.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.23%)</title><rect x="672.0" y="1075.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="675.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 0.93%)</title><rect x="674.8" y="1075.0" width="10.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="677.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 0.93%)</title><rect x="674.8" y="1059.0" width="10.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="677.8" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.31%)</title><rect x="678.4" y="1043.0" width="3.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="681.4" y="1054.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.31%)</title><rect x="678.4" y="1027.0" width="3.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="681.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.31%)</title><rect x="682.1" y="1043.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="685.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$265/1903481898.accept (2 samples, 0.15%)</title><rect x="682.1" y="1027.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="685.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (2 samples, 0.15%)</title><rect x="682.1" y="1011.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="685.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.15%)</title><rect x="682.1" y="995.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="685.1" y="1006.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.15%)</title><rect x="682.1" y="979.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="685.1" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.15%)</title><rect x="682.1" y="963.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="685.1" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.15%)</title><rect x="682.1" y="947.0" width="1.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="685.1" y="958.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.15%)</title><rect x="682.1" y="931.0" width="1.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="685.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$266/1560846623.accept (2 samples, 0.15%)</title><rect x="683.9" y="1027.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="686.9" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.15%)</title><rect x="683.9" y="1011.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="686.9" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.15%)</title><rect x="683.9" y="995.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="686.9" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.15%)</title><rect x="683.9" y="979.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="686.9" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="684.8" y="963.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="687.8" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="684.8" y="947.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="687.8" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="684.8" y="931.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="687.8" y="942.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="684.8" y="915.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="687.8" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="684.8" y="899.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="687.8" y="910.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="684.8" y="883.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="687.8" y="894.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="684.8" y="867.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="687.8" y="878.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="684.8" y="851.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="687.8" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (1 samples, 0.08%)</title><rect x="685.7" y="1091.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="688.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (1 samples, 0.08%)</title><rect x="685.7" y="1075.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="688.7" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$266/1560846623.get$Lambda (1 samples, 0.08%)</title><rect x="685.7" y="1059.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="688.7" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="685.7" y="1043.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="688.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.77%)</title><rect x="686.6" y="1091.0" width="9.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="689.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.77%)</title><rect x="686.6" y="1075.0" width="9.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="689.6" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (2 samples, 0.15%)</title><rect x="686.6" y="1059.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="689.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.62%)</title><rect x="688.5" y="1059.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="691.5" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$265/1903481898.accept (8 samples, 0.62%)</title><rect x="688.5" y="1043.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="691.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (8 samples, 0.62%)</title><rect x="688.5" y="1027.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="691.5" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (8 samples, 0.62%)</title><rect x="688.5" y="1011.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="691.5" y="1022.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (8 samples, 0.62%)</title><rect x="688.5" y="995.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="691.5" y="1006.0"></text>
</g>
<g>
<title>java/time/Duration.create (8 samples, 0.62%)</title><rect x="688.5" y="979.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="691.5" y="990.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.23%)</title><rect x="695.7" y="1091.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="698.7" y="1102.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.15%)</title><rect x="696.7" y="1075.0" width="1.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="699.7" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="698.5" y="1091.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="701.5" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (7 samples, 0.54%)</title><rect x="699.4" y="1107.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="702.4" y="1118.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.39%)</title><rect x="701.2" y="1091.0" width="4.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="704.2" y="1102.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.39%)</title><rect x="701.2" y="1075.0" width="4.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="704.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.39%)</title><rect x="705.8" y="1155.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="708.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.39%)</title><rect x="705.8" y="1139.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="708.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.39%)</title><rect x="705.8" y="1123.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="708.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.39%)</title><rect x="705.8" y="1107.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="708.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (234 samples, 18.08%)</title><rect x="710.3" y="1155.0" width="213.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="713.3" y="1166.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (229 samples, 17.70%)</title><rect x="714.0" y="1139.0" width="208.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="717.0" y="1150.0">java/util/concurrent/Linked..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (4 samples, 0.31%)</title><rect x="722.2" y="1123.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="725.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (202 samples, 15.61%)</title><rect x="725.8" y="1123.0" width="184.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="728.8" y="1134.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.08%)</title><rect x="735.9" y="1107.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="738.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.08%)</title><rect x="735.9" y="1091.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="738.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (20 samples, 1.55%)</title><rect x="736.8" y="1107.0" width="18.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="739.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (9 samples, 0.70%)</title><rect x="755.0" y="1107.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="758.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.70%)</title><rect x="755.0" y="1091.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="758.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.70%)</title><rect x="755.0" y="1075.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="758.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.70%)</title><rect x="755.0" y="1059.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="758.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (161 samples, 12.44%)</title><rect x="763.2" y="1107.0" width="146.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="766.2" y="1118.0">java/util/concurre..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (160 samples, 12.36%)</title><rect x="764.1" y="1091.0" width="145.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="767.1" y="1102.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.08%)</title><rect x="766.0" y="1075.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="769.0" y="1086.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.15%)</title><rect x="766.9" y="1075.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="769.9" y="1086.0"></text>
</g>
<g>
<title>Unsafe_Park (149 samples, 11.51%)</title><rect x="768.7" y="1075.0" width="135.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="771.7" y="1086.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.31%)</title><rect x="774.2" y="1059.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="777.2" y="1070.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.15%)</title><rect x="777.8" y="1059.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="780.8" y="1070.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (24 samples, 1.85%)</title><rect x="779.6" y="1059.0" width="21.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="782.6" y="1070.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.39%)</title><rect x="789.7" y="1043.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="792.7" y="1054.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.31%)</title><rect x="790.6" y="1027.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="793.6" y="1038.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.15%)</title><rect x="792.4" y="1011.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="795.4" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.54%)</title><rect x="794.2" y="1043.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="797.2" y="1054.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="800.6" y="1043.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="803.6" y="1054.0"></text>
</g>
<g>
<title>__lll_lock_wait (12 samples, 0.93%)</title><rect x="801.5" y="1059.0" width="11.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="804.5" y="1070.0"></text>
</g>
<g>
<title>__lll_unlock_wake (32 samples, 2.47%)</title><rect x="812.5" y="1059.0" width="29.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="815.5" y="1070.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (44 samples, 3.40%)</title><rect x="841.7" y="1059.0" width="40.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="844.7" y="1070.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.39%)</title><rect x="881.8" y="1059.0" width="4.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="884.8" y="1070.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (4 samples, 0.31%)</title><rect x="886.3" y="1059.0" width="3.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="889.3" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.31%)</title><rect x="890.0" y="1059.0" width="3.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="893.0" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.15%)</title><rect x="893.6" y="1059.0" width="1.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="896.6" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.31%)</title><rect x="895.5" y="1059.0" width="3.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="898.5" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (3 samples, 0.23%)</title><rect x="899.1" y="1059.0" width="2.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="902.1" y="1070.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="901.8" y="1059.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="904.8" y="1070.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.15%)</title><rect x="902.8" y="1059.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="905.8" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.31%)</title><rect x="904.6" y="1075.0" width="3.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="907.6" y="1086.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.15%)</title><rect x="908.2" y="1075.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="911.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (14 samples, 1.08%)</title><rect x="910.0" y="1123.0" width="12.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="913.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (14 samples, 1.08%)</title><rect x="910.0" y="1107.0" width="12.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="913.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (10 samples, 0.77%)</title><rect x="910.0" y="1091.0" width="9.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="913.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.31%)</title><rect x="919.2" y="1091.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="922.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.31%)</title><rect x="919.2" y="1075.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="922.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.31%)</title><rect x="919.2" y="1059.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="922.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (1 samples, 0.08%)</title><rect x="922.8" y="1139.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="925.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="923.7" y="1203.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="926.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="923.7" y="1187.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="926.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="923.7" y="1171.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="926.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.clean (1 samples, 0.08%)</title><rect x="923.7" y="1155.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="926.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.remove (1 samples, 0.08%)</title><rect x="923.7" y="1139.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="926.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.replaceNode (1 samples, 0.08%)</title><rect x="923.7" y="1123.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="926.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.addCount (1 samples, 0.08%)</title><rect x="923.7" y="1107.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="926.7" y="1118.0"></text>
</g>
<g>
<title>start_thread (291 samples, 22.49%)</title><rect x="924.6" y="1203.0" width="265.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="927.6" y="1214.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (291 samples, 22.49%)</title><rect x="924.6" y="1187.0" width="265.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="927.6" y="1198.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (22 samples, 1.70%)</title><rect x="924.6" y="1171.0" width="20.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="927.6" y="1182.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 0.31%)</title><rect x="924.6" y="1155.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="927.6" y="1166.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.31%)</title><rect x="924.6" y="1139.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="927.6" y="1150.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.15%)</title><rect x="924.6" y="1123.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="927.6" y="1134.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.15%)</title><rect x="926.5" y="1123.0" width="1.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="929.5" y="1134.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (18 samples, 1.39%)</title><rect x="928.3" y="1155.0" width="16.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="931.3" y="1166.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.23%)</title><rect x="928.3" y="1139.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="931.3" y="1150.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.15%)</title><rect x="928.3" y="1123.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="931.3" y="1134.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.08%)</title><rect x="930.1" y="1123.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="933.1" y="1134.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (12 samples, 0.93%)</title><rect x="931.0" y="1139.0" width="11.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="934.0" y="1150.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.31%)</title><rect x="931.0" y="1123.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="934.0" y="1134.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (3 samples, 0.23%)</title><rect x="931.0" y="1107.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="934.0" y="1118.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (3 samples, 0.23%)</title><rect x="931.0" y="1091.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="934.0" y="1102.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (3 samples, 0.23%)</title><rect x="931.0" y="1075.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="934.0" y="1086.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="933.8" y="1107.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="936.8" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (8 samples, 0.62%)</title><rect x="934.7" y="1123.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="937.7" y="1134.0"></text>
</g>
<g>
<title>Management::oops_do(OopClosure*) (1 samples, 0.08%)</title><rect x="934.7" y="1107.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="937.7" y="1118.0"></text>
</g>
<g>
<title>MemoryService::oops_do(OopClosure*) (1 samples, 0.08%)</title><rect x="934.7" y="1091.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="937.7" y="1102.0"></text>
</g>
<g>
<title>MemoryPool::oops_do(OopClosure*) (1 samples, 0.08%)</title><rect x="934.7" y="1075.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="937.7" y="1086.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (7 samples, 0.54%)</title><rect x="935.6" y="1107.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="938.6" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (3 samples, 0.23%)</title><rect x="942.0" y="1139.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="945.0" y="1150.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (3 samples, 0.23%)</title><rect x="942.0" y="1123.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="945.0" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.23%)</title><rect x="942.0" y="1107.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="945.0" y="1118.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.23%)</title><rect x="942.0" y="1091.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="945.0" y="1102.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="942.0" y="1075.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="945.0" y="1086.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.15%)</title><rect x="942.9" y="1075.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="945.9" y="1086.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.15%)</title><rect x="942.9" y="1059.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="945.9" y="1070.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.15%)</title><rect x="942.9" y="1043.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="945.9" y="1054.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.08%)</title><rect x="942.9" y="1027.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="945.9" y="1038.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.08%)</title><rect x="943.8" y="1027.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="946.8" y="1038.0"></text>
</g>
<g>
<title>JavaThread::run() (267 samples, 20.63%)</title><rect x="944.7" y="1171.0" width="243.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="947.7" y="1182.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (267 samples, 20.63%)</title><rect x="944.7" y="1155.0" width="243.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="947.7" y="1166.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (267 samples, 20.63%)</title><rect x="944.7" y="1139.0" width="243.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="947.7" y="1150.0">CompileBroker::compiler_thread_l..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (267 samples, 20.63%)</title><rect x="944.7" y="1123.0" width="243.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="947.7" y="1134.0">CompileBroker::invoke_compiler_o..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (266 samples, 20.56%)</title><rect x="944.7" y="1107.0" width="242.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="947.7" y="1118.0">C2Compiler::compile_method(ciEnv..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (266 samples, 20.56%)</title><rect x="944.7" y="1091.0" width="242.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="947.7" y="1102.0">Compile::Compile(ciEnv*, C2Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (78 samples, 6.03%)</title><rect x="944.7" y="1075.0" width="71.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="947.7" y="1086.0">Compile:..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.08%)</title><rect x="944.7" y="1059.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="947.7" y="1070.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="944.7" y="1043.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="947.7" y="1054.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.23%)</title><rect x="945.6" y="1059.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="948.6" y="1070.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.15%)</title><rect x="946.5" y="1043.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="949.5" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="947.4" y="1027.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="950.4" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="947.4" y="1011.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="950.4" y="1022.0"></text>
</g>
<g>
<title>MachNode::alignment_required() const (1 samples, 0.08%)</title><rect x="948.3" y="1059.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="951.3" y="1070.0"></text>
</g>
<g>
<title>Matcher::match() (11 samples, 0.85%)</title><rect x="949.3" y="1059.0" width="10.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="952.3" y="1070.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.08%)</title><rect x="949.3" y="1043.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="952.3" y="1054.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (9 samples, 0.70%)</title><rect x="950.2" y="1043.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="953.2" y="1054.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.08%)</title><rect x="952.0" y="1027.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="955.0" y="1038.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.08%)</title><rect x="952.9" y="1027.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="955.9" y="1038.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="952.9" y="1011.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="955.9" y="1022.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="952.9" y="995.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="955.9" y="1006.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.23%)</title><rect x="953.8" y="1027.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="956.8" y="1038.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.23%)</title><rect x="953.8" y="1011.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="956.8" y="1022.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (2 samples, 0.15%)</title><rect x="953.8" y="995.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="956.8" y="1006.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="953.8" y="979.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="956.8" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="954.7" y="979.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="957.7" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="954.7" y="963.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="957.7" y="974.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="955.6" y="995.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="958.6" y="1006.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="956.6" y="1027.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="959.6" y="1038.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.08%)</title><rect x="957.5" y="1027.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="960.5" y="1038.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="957.5" y="1011.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="960.5" y="1022.0"></text>
</g>
<g>
<title>ParmNode::Opcode() const (1 samples, 0.08%)</title><rect x="958.4" y="1043.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="961.4" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.08%)</title><rect x="959.3" y="1059.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="962.3" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.08%)</title><rect x="959.3" y="1043.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="962.3" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.31%)</title><rect x="960.2" y="1059.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="963.2" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.08%)</title><rect x="960.2" y="1043.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="963.2" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::do_DFS(Tarjan*, unsigned int) (1 samples, 0.08%)</title><rect x="960.2" y="1027.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="963.2" y="1038.0"></text>
</g>
<g>
<title>Block_Stack::most_frequent_successor(Block*) (1 samples, 0.08%)</title><rect x="960.2" y="1011.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="963.2" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.23%)</title><rect x="961.1" y="1043.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="964.1" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.15%)</title><rect x="961.1" y="1027.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="964.1" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (2 samples, 0.15%)</title><rect x="961.1" y="1011.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="964.1" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.08%)</title><rect x="962.9" y="1027.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="965.9" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.08%)</title><rect x="963.8" y="1059.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="966.8" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (56 samples, 4.33%)</title><rect x="964.8" y="1059.0" width="51.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="967.8" y="1070.0">Phase..</text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.08%)</title><rect x="965.7" y="1043.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="968.7" y="1054.0"></text>
</g>
<g>
<title>MachSafePointNode::in_RegMask(unsigned int) const (1 samples, 0.08%)</title><rect x="966.6" y="1043.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="969.6" y="1054.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.08%)</title><rect x="967.5" y="1043.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="970.5" y="1054.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.08%)</title><rect x="968.4" y="1043.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="971.4" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.23%)</title><rect x="969.3" y="1043.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="972.3" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="970.2" y="1027.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="973.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.08%)</title><rect x="971.1" y="1027.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="974.1" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="971.1" y="1011.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="974.1" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.23%)</title><rect x="972.1" y="1043.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="975.1" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.23%)</title><rect x="972.1" y="1027.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="975.1" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (10 samples, 0.77%)</title><rect x="974.8" y="1043.0" width="9.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="977.8" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.08%)</title><rect x="982.1" y="1027.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="985.1" y="1038.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="982.1" y="1011.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="985.1" y="1022.0"></text>
</g>
<g>
<title>decodeKlass_not_nullNode::rule() const (1 samples, 0.08%)</title><rect x="983.0" y="1027.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.0" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.62%)</title><rect x="983.9" y="1043.0" width="7.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="986.9" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.15%)</title><rect x="987.6" y="1027.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="990.6" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.15%)</title><rect x="989.4" y="1027.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="992.4" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="990.3" y="1011.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="993.3" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.08%)</title><rect x="991.2" y="1043.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="994.2" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="991.2" y="1027.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="994.2" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.39%)</title><rect x="992.1" y="1043.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="995.1" y="1054.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="995.8" y="1027.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="998.8" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="996.7" y="1043.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="999.7" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.31%)</title><rect x="997.6" y="1043.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1000.6" y="1054.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="1000.3" y="1027.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1003.3" y="1038.0"></text>
</g>
<g>
<title>rRegLOper::type() const (1 samples, 0.08%)</title><rect x="1000.3" y="1011.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1003.3" y="1022.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 0.31%)</title><rect x="1001.2" y="1043.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1004.2" y="1054.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 0.31%)</title><rect x="1001.2" y="1027.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1004.2" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.08%)</title><rect x="1001.2" y="1011.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1004.2" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 0.23%)</title><rect x="1002.1" y="1011.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1005.1" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.08%)</title><rect x="1002.1" y="995.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1005.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.08%)</title><rect x="1003.1" y="995.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1006.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.08%)</title><rect x="1004.0" y="995.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1007.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.15%)</title><rect x="1004.9" y="1043.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1007.9" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.15%)</title><rect x="1004.9" y="1027.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1007.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.08%)</title><rect x="1006.7" y="1043.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1009.7" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.46%)</title><rect x="1007.6" y="1043.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1010.6" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.15%)</title><rect x="1011.3" y="1027.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1014.3" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1012.2" y="1011.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1015.2" y="1022.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (2 samples, 0.15%)</title><rect x="1013.1" y="1043.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1016.1" y="1054.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1014.9" y="1043.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1017.9" y="1054.0"></text>
</g>
<g>
<title>Compile::Optimize() (178 samples, 13.76%)</title><rect x="1015.8" y="1075.0" width="162.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1018.8" y="1086.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1015.8" y="1059.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1018.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.08%)</title><rect x="1015.8" y="1043.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1018.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.46%)</title><rect x="1016.7" y="1059.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1019.7" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 0.46%)</title><rect x="1016.7" y="1043.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1019.7" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1016.7" y="1027.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1019.7" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.08%)</title><rect x="1016.7" y="1011.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1019.7" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.08%)</title><rect x="1016.7" y="995.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1019.7" y="1006.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1016.7" y="979.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1019.7" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1016.7" y="963.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1019.7" y="974.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1016.7" y="947.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1019.7" y="958.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1016.7" y="931.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1019.7" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.08%)</title><rect x="1016.7" y="915.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1019.7" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (5 samples, 0.39%)</title><rect x="1017.7" y="1027.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1020.7" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.31%)</title><rect x="1017.7" y="1011.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1020.7" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1017.7" y="995.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1020.7" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1017.7" y="979.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1020.7" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1017.7" y="963.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1020.7" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1017.7" y="947.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1020.7" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1017.7" y="931.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1020.7" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1017.7" y="915.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1020.7" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1017.7" y="899.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1020.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1017.7" y="883.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1020.7" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1017.7" y="867.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1020.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1017.7" y="851.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1020.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1017.7" y="835.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1020.7" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1017.7" y="819.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1020.7" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1017.7" y="803.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1020.7" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1017.7" y="787.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1020.7" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1017.7" y="771.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1020.7" y="782.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1017.7" y="755.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1020.7" y="766.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.08%)</title><rect x="1017.7" y="739.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1020.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.23%)</title><rect x="1018.6" y="995.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1021.6" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1018.6" y="979.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1021.6" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="1019.5" y="979.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1022.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="1019.5" y="963.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1022.5" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="1019.5" y="947.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1022.5" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="1019.5" y="931.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1022.5" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1019.5" y="915.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1022.5" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1019.5" y="899.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1022.5" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1019.5" y="883.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1022.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1019.5" y="867.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1022.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1019.5" y="851.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1022.5" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1019.5" y="835.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1022.5" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1019.5" y="819.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1022.5" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1019.5" y="803.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1022.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1019.5" y="787.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1022.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1019.5" y="771.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1022.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1019.5" y="755.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1022.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1019.5" y="739.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1022.5" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1019.5" y="723.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1022.5" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1019.5" y="707.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1022.5" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1019.5" y="691.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1022.5" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1019.5" y="675.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1022.5" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1019.5" y="659.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1022.5" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1019.5" y="643.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1022.5" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1019.5" y="627.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1022.5" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1019.5" y="611.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1022.5" y="622.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1019.5" y="595.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1022.5" y="606.0"></text>
</g>
<g>
<title>InitializeNode::allocation() (1 samples, 0.08%)</title><rect x="1020.4" y="915.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1023.4" y="926.0"></text>
</g>
<g>
<title>MergeMemNode::memory_at(unsigned int) const (1 samples, 0.08%)</title><rect x="1021.3" y="1011.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1024.3" y="1022.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 0.23%)</title><rect x="1022.2" y="1059.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1025.2" y="1070.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1023.1" y="1043.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1026.1" y="1054.0"></text>
</g>
<g>
<title>AddNode::add_of_identity(Type const*, Type const*) const (1 samples, 0.08%)</title><rect x="1023.1" y="1027.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1026.1" y="1038.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1023.1" y="1011.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1026.1" y="1022.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1023.1" y="995.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1026.1" y="1006.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="1023.1" y="979.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1026.1" y="990.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1024.0" y="1043.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1027.0" y="1054.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1024.0" y="1027.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1027.0" y="1038.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1024.0" y="1011.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1027.0" y="1022.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1024.0" y="995.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1027.0" y="1006.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.08%)</title><rect x="1024.0" y="979.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1027.0" y="990.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.08%)</title><rect x="1024.9" y="1059.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1027.9" y="1070.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.08%)</title><rect x="1024.9" y="1043.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1027.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (148 samples, 11.44%)</title><rect x="1025.9" y="1059.0" width="134.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1028.9" y="1070.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1025.9" y="1043.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1028.9" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1025.9" y="1027.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1028.9" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1025.9" y="1011.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1028.9" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1025.9" y="995.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1028.9" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1025.9" y="979.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1028.9" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1025.9" y="963.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1028.9" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1025.9" y="947.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1028.9" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1025.9" y="931.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1028.9" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1025.9" y="915.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1028.9" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1025.9" y="899.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1028.9" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1025.9" y="883.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1028.9" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::reorg_offsets(IdealLoopTree*) (1 samples, 0.08%)</title><rect x="1025.9" y="867.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1028.9" y="878.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.08%)</title><rect x="1026.8" y="1043.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1029.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (6 samples, 0.46%)</title><rect x="1027.7" y="1043.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1030.7" y="1054.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (3 samples, 0.23%)</title><rect x="1029.5" y="1027.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1032.5" y="1038.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1032.2" y="1027.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1035.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.31%)</title><rect x="1033.2" y="1043.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1036.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1034.1" y="1027.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1037.1" y="1038.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (2 samples, 0.15%)</title><rect x="1035.0" y="1027.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1038.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (124 samples, 9.58%)</title><rect x="1036.8" y="1043.0" width="113.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1039.8" y="1054.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (118 samples, 9.12%)</title><rect x="1042.3" y="1027.0" width="107.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1045.3" y="1038.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 0.46%)</title><rect x="1043.2" y="1011.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1046.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (111 samples, 8.58%)</title><rect x="1048.7" y="1011.0" width="101.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1051.7" y="1022.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.15%)</title><rect x="1129.8" y="995.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.15%)</title><rect x="1129.8" y="979.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.8" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1130.7" y="963.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.7" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (19 samples, 1.47%)</title><rect x="1131.6" y="995.0" width="17.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1149.0" y="995.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.23%)</title><rect x="1149.9" y="1043.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (5 samples, 0.39%)</title><rect x="1152.6" y="1043.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (4 samples, 0.31%)</title><rect x="1153.5" y="1027.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::conditional_move(Node*) (2 samples, 0.15%)</title><rect x="1153.5" y="1011.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.08%)</title><rect x="1155.3" y="1011.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.08%)</title><rect x="1156.3" y="1011.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1156.3" y="995.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1157.2" y="1043.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1157.2" y="1027.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.2" y="1038.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1157.2" y="1011.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.2" y="1022.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (2 samples, 0.15%)</title><rect x="1158.1" y="1043.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.1" y="1054.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1159.9" y="1043.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1162.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (16 samples, 1.24%)</title><rect x="1160.8" y="1059.0" width="14.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.8" y="1070.0"></text>
</g>
<g>
<title>BoolNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1160.8" y="1043.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (15 samples, 1.16%)</title><rect x="1161.7" y="1043.0" width="13.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.7" y="1054.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1161.7" y="1027.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.7" y="1038.0"></text>
</g>
<g>
<title>IfNode::up_one_dom(Node*, bool) (1 samples, 0.08%)</title><rect x="1161.7" y="1011.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1162.6" y="1011.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1162.6" y="995.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.6" y="1006.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1162.6" y="979.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.6" y="990.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1163.6" y="1027.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.6" y="1038.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.15%)</title><rect x="1163.6" y="1011.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.6" y="1022.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.15%)</title><rect x="1163.6" y="995.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.6" y="1006.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.15%)</title><rect x="1163.6" y="979.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.6" y="990.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1165.4" y="1027.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 0.31%)</title><rect x="1166.3" y="1027.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.15%)</title><rect x="1168.1" y="1011.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.1" y="1022.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1169.0" y="995.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.0" y="1006.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1169.9" y="1027.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.9" y="1038.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.08%)</title><rect x="1170.9" y="1027.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.9" y="1038.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.08%)</title><rect x="1170.9" y="1011.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.9" y="1022.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (4 samples, 0.31%)</title><rect x="1171.8" y="1027.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.8" y="1038.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.08%)</title><rect x="1171.8" y="1011.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.8" y="1022.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.08%)</title><rect x="1172.7" y="1011.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.7" y="1022.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.08%)</title><rect x="1172.7" y="995.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.7" y="1006.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.15%)</title><rect x="1173.6" y="1011.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.6" y="1022.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1175.4" y="1059.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.4" y="1070.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1175.4" y="1043.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.4" y="1054.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.08%)</title><rect x="1175.4" y="1027.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.4" y="1038.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_card_mark(Node*) (1 samples, 0.08%)</title><rect x="1175.4" y="1011.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.4" y="1022.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.08%)</title><rect x="1175.4" y="995.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.4" y="1006.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1175.4" y="979.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.4" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.08%)</title><rect x="1176.3" y="1059.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1176.3" y="1043.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1176.3" y="1027.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="1038.0"></text>
</g>
<g>
<title>MergeMemNode::hash() const (1 samples, 0.08%)</title><rect x="1176.3" y="1011.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.3" y="1022.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1177.2" y="1059.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1180.2" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.70%)</title><rect x="1178.1" y="1075.0" width="8.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.1" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.70%)</title><rect x="1178.1" y="1059.0" width="8.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.1" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.70%)</title><rect x="1178.1" y="1043.0" width="8.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.1" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.70%)</title><rect x="1178.1" y="1027.0" width="8.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.1" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.70%)</title><rect x="1178.1" y="1011.0" width="8.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.1" y="1022.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1178.1" y="995.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.1" y="1006.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.08%)</title><rect x="1178.1" y="979.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.1" y="990.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.08%)</title><rect x="1178.1" y="963.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.1" y="974.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.08%)</title><rect x="1178.1" y="947.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.1" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.62%)</title><rect x="1179.1" y="995.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.1" y="1006.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1179.1" y="979.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.1" y="990.0"></text>
</g>
<g>
<title>ciMethod::scale_count(int, float) (1 samples, 0.08%)</title><rect x="1179.1" y="963.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.1" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.54%)</title><rect x="1180.0" y="979.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.0" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.54%)</title><rect x="1180.0" y="963.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.0" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.54%)</title><rect x="1180.0" y="947.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.54%)</title><rect x="1180.0" y="931.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.54%)</title><rect x="1180.0" y="915.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.54%)</title><rect x="1180.0" y="899.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.0" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.54%)</title><rect x="1180.0" y="883.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.0" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.54%)</title><rect x="1180.0" y="867.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.54%)</title><rect x="1180.0" y="851.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.54%)</title><rect x="1180.0" y="835.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.54%)</title><rect x="1180.0" y="819.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.46%)</title><rect x="1180.0" y="803.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.0" y="814.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1180.0" y="787.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.0" y="798.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1180.0" y="771.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.0" y="782.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1180.0" y="755.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.0" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1180.0" y="739.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.0" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1180.0" y="723.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.0" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1180.0" y="707.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.0" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1180.0" y="691.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.0" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1180.0" y="675.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.0" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1180.0" y="659.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.0" y="670.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1180.0" y="643.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.0" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1180.0" y="627.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.0" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1180.0" y="611.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.0" y="622.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1180.0" y="595.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.0" y="606.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1180.0" y="579.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.0" y="590.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1180.0" y="563.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.0" y="574.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.08%)</title><rect x="1180.0" y="547.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.0" y="558.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.08%)</title><rect x="1180.0" y="531.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.0" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.39%)</title><rect x="1180.9" y="787.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.39%)</title><rect x="1180.9" y="771.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.39%)</title><rect x="1180.9" y="755.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.39%)</title><rect x="1180.9" y="739.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.39%)</title><rect x="1180.9" y="723.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.39%)</title><rect x="1180.9" y="707.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.31%)</title><rect x="1180.9" y="691.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.31%)</title><rect x="1180.9" y="675.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.31%)</title><rect x="1180.9" y="659.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.31%)</title><rect x="1180.9" y="643.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.31%)</title><rect x="1180.9" y="627.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.31%)</title><rect x="1180.9" y="611.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="622.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1180.9" y="595.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.9" y="606.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1180.9" y="579.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.9" y="590.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1180.9" y="563.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1180.9" y="547.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1180.9" y="531.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1180.9" y="515.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1180.9" y="499.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.9" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.23%)</title><rect x="1181.8" y="595.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.8" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.23%)</title><rect x="1181.8" y="579.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.23%)</title><rect x="1181.8" y="563.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.23%)</title><rect x="1181.8" y="547.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.23%)</title><rect x="1181.8" y="531.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.23%)</title><rect x="1181.8" y="515.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.8" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.23%)</title><rect x="1181.8" y="499.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.8" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.23%)</title><rect x="1181.8" y="483.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.23%)</title><rect x="1181.8" y="467.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.23%)</title><rect x="1181.8" y="451.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.23%)</title><rect x="1181.8" y="435.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.23%)</title><rect x="1181.8" y="419.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.8" y="430.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.8" y="403.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.8" y="414.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind) (1 samples, 0.08%)</title><rect x="1181.8" y="387.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="398.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1181.8" y="371.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.8" y="382.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.08%)</title><rect x="1181.8" y="355.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.8" y="366.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.08%)</title><rect x="1181.8" y="339.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="350.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.08%)</title><rect x="1181.8" y="323.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1182.7" y="403.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.7" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1182.7" y="387.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1182.7" y="371.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.7" y="382.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1182.7" y="355.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.7" y="366.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.08%)</title><rect x="1182.7" y="339.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.7" y="350.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.08%)</title><rect x="1182.7" y="323.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.6" y="355.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.6" y="339.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.6" y="323.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.6" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.6" y="307.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.6" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.6" y="291.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.6" y="275.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.6" y="259.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.6" y="243.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1183.6" y="227.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1183.6" y="211.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.6" y="222.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1183.6" y="195.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.6" y="206.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.08%)</title><rect x="1183.6" y="179.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.6" y="190.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.08%)</title><rect x="1183.6" y="163.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.6" y="174.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.08%)</title><rect x="1183.6" y="147.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.6" y="158.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1183.6" y="131.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.6" y="142.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1183.6" y="115.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.6" y="126.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1183.6" y="99.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.6" y="110.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.08%)</title><rect x="1183.6" y="83.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.6" y="94.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1183.6" y="67.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.6" y="78.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.08%)</title><rect x="1183.6" y="51.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.6" y="62.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1183.6" y="35.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.6" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.5" y="691.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.5" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.5" y="675.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.5" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.5" y="659.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.5" y="643.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.5" y="627.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.5" y="611.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.5" y="595.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.5" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.5" y="579.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.5" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.5" y="563.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.5" y="547.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.5" y="531.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.5" y="515.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.5" y="499.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.5" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.5" y="483.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.5" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.5" y="467.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.5" y="451.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.5" y="435.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.5" y="419.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.5" y="403.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.5" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.5" y="387.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.5" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.5" y="371.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.5" y="355.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.5" y="339.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.5" y="323.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.5" y="334.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.08%)</title><rect x="1184.5" y="307.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.5" y="318.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.08%)</title><rect x="1185.4" y="803.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.4" y="814.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="1185.4" y="787.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.4" y="798.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.08%)</title><rect x="1185.4" y="771.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.4" y="782.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1185.4" y="755.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.4" y="766.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1186.4" y="1075.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.4" y="1086.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1186.4" y="1059.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.4" y="1070.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1187.3" y="1107.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.3" y="1118.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1187.3" y="1091.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.3" y="1102.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1187.3" y="1075.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.3" y="1086.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1187.3" y="1059.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.3" y="1070.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.08%)</title><rect x="1187.3" y="1043.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.3" y="1054.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.08%)</title><rect x="1187.3" y="1027.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.3" y="1038.0"></text>
</g>
<g>
<title>LinearScan::resolve_data_flow() (1 samples, 0.08%)</title><rect x="1187.3" y="1011.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.3" y="1022.0"></text>
</g>
<g>
<title>LinearScan::resolve_collect_mappings(BlockBegin*, BlockBegin*, MoveResolver&amp;) (1 samples, 0.08%)</title><rect x="1187.3" y="995.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.3" y="1006.0"></text>
</g>
<g>
<title>LinearScan::split_child_at_op_id(Interval*, int, LIR_OpVisitState::OprMode) (1 samples, 0.08%)</title><rect x="1187.3" y="979.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.3" y="990.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.15%)</title><rect x="1188.2" y="1171.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.2" y="1182.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.15%)</title><rect x="1188.2" y="1155.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.2" y="1166.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.08%)</title><rect x="1188.2" y="1139.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.2" y="1150.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1189.1" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.1" y="1150.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.1" y="1123.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.1" y="1134.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.1" y="1107.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.1" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1189.1" y="1091.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.1" y="1102.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::accumulate_statistics_before_gc() (1 samples, 0.08%)</title><rect x="1189.1" y="1075.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.1" y="1086.0"></text>
</g>
</g>
</svg>
