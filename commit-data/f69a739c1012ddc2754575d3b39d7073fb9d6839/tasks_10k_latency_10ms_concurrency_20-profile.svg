<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1302" onload="init(evt)" viewBox="0 0 1200 1302" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1285"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1285"> </text>
<g id="frames">
<g>
<title>all (87 samples, 100.00%)</title><rect x="10.0" y="1251.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1262.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (5 samples, 5.75%)</title><rect x="10.0" y="1235.0" width="67.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1246.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (5 samples, 5.75%)</title><rect x="10.0" y="1219.0" width="67.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1230.0">com/lin..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 1.15%)</title><rect x="10.0" y="1203.0" width="13.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1862192422.accept (1 samples, 1.15%)</title><rect x="10.0" y="1187.0" width="13.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (1 samples, 1.15%)</title><rect x="10.0" y="1171.0" width="13.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 1.15%)</title><rect x="10.0" y="1155.0" width="13.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 1.15%)</title><rect x="10.0" y="1139.0" width="13.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 1.15%)</title><rect x="10.0" y="1123.0" width="13.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 1.15%)</title><rect x="10.0" y="1107.0" width="13.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 1.15%)</title><rect x="10.0" y="1091.0" width="13.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 1.15%)</title><rect x="10.0" y="1075.0" width="13.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (1 samples, 1.15%)</title><rect x="10.0" y="1059.0" width="13.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 1.15%)</title><rect x="10.0" y="1043.0" width="13.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 1.15%)</title><rect x="10.0" y="1027.0" width="13.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 1.15%)</title><rect x="10.0" y="1011.0" width="13.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (4 samples, 4.60%)</title><rect x="23.6" y="1203.0" width="54.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.6" y="1214.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (4 samples, 4.60%)</title><rect x="23.6" y="1187.0" width="54.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.6" y="1198.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (3 samples, 3.45%)</title><rect x="23.6" y="1171.0" width="40.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.6" y="1182.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 2.30%)</title><rect x="23.6" y="1155.0" width="27.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.6" y="1166.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 2.30%)</title><rect x="23.6" y="1139.0" width="27.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="26.6" y="1150.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 1.15%)</title><rect x="23.6" y="1123.0" width="13.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 1.15%)</title><rect x="23.6" y="1107.0" width="13.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 1.15%)</title><rect x="23.6" y="1091.0" width="13.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.6" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 1.15%)</title><rect x="23.6" y="1075.0" width="13.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.6" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 1.15%)</title><rect x="23.6" y="1059.0" width="13.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.6" y="1070.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 1.15%)</title><rect x="23.6" y="1043.0" width="13.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="26.6" y="1054.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 1.15%)</title><rect x="23.6" y="1027.0" width="13.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="26.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 1.15%)</title><rect x="37.1" y="1123.0" width="13.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 1.15%)</title><rect x="37.1" y="1107.0" width="13.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 1.15%)</title><rect x="37.1" y="1091.0" width="13.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch.countDown (1 samples, 1.15%)</title><rect x="37.1" y="1075.0" width="13.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 1.15%)</title><rect x="37.1" y="1059.0" width="13.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (1 samples, 1.15%)</title><rect x="37.1" y="1043.0" width="13.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (1 samples, 1.15%)</title><rect x="50.7" y="1155.0" width="13.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="53.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 1.15%)</title><rect x="50.7" y="1139.0" width="13.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 1.15%)</title><rect x="50.7" y="1123.0" width="13.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="53.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 1.15%)</title><rect x="50.7" y="1107.0" width="13.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="53.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 1.15%)</title><rect x="50.7" y="1091.0" width="13.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 1.15%)</title><rect x="50.7" y="1075.0" width="13.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="53.7" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 1.15%)</title><rect x="50.7" y="1059.0" width="13.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="53.7" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 1.15%)</title><rect x="50.7" y="1043.0" width="13.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="53.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 1.15%)</title><rect x="64.3" y="1171.0" width="13.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="67.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 1.15%)</title><rect x="64.3" y="1155.0" width="13.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sessionHandler (1 samples, 1.15%)</title><rect x="64.3" y="1139.0" width="13.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="67.3" y="1150.0"></text>
</g>
<g>
<title>start_thread (82 samples, 94.25%)</title><rect x="77.8" y="1235.0" width="1112.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="80.8" y="1246.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (82 samples, 94.25%)</title><rect x="77.8" y="1219.0" width="1112.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="80.8" y="1230.0">java_start(Thread*)</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (82 samples, 94.25%)</title><rect x="77.8" y="1203.0" width="1112.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="80.8" y="1214.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (82 samples, 94.25%)</title><rect x="77.8" y="1187.0" width="1112.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="80.8" y="1198.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (82 samples, 94.25%)</title><rect x="77.8" y="1171.0" width="1112.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="80.8" y="1182.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (79 samples, 90.80%)</title><rect x="77.8" y="1155.0" width="1071.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="80.8" y="1166.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (79 samples, 90.80%)</title><rect x="77.8" y="1139.0" width="1071.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="80.8" y="1150.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (48 samples, 55.17%)</title><rect x="77.8" y="1123.0" width="651.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="80.8" y="1134.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (5 samples, 5.75%)</title><rect x="77.8" y="1107.0" width="67.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="80.8" y="1118.0">Compile..</text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 3.45%)</title><rect x="77.8" y="1091.0" width="40.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="80.8" y="1102.0">Com..</text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 1.15%)</title><rect x="104.9" y="1075.0" width="13.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="107.9" y="1086.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 2.30%)</title><rect x="118.5" y="1091.0" width="27.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="121.5" y="1102.0">C..</text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 2.30%)</title><rect x="118.5" y="1075.0" width="27.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="121.5" y="1086.0">C..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 1.15%)</title><rect x="145.6" y="1107.0" width="13.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="148.6" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 1.15%)</title><rect x="145.6" y="1091.0" width="13.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="148.6" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 1.15%)</title><rect x="145.6" y="1075.0" width="13.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="148.6" y="1086.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 4.60%)</title><rect x="159.2" y="1107.0" width="54.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="162.2" y="1118.0">Match..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 1.15%)</title><rect x="159.2" y="1091.0" width="13.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="162.2" y="1102.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 3.45%)</title><rect x="172.8" y="1091.0" width="40.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="175.8" y="1102.0">Mat..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 1.15%)</title><rect x="172.8" y="1075.0" width="13.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="175.8" y="1086.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 2.30%)</title><rect x="186.3" y="1075.0" width="27.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="189.3" y="1086.0">M..</text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 2.30%)</title><rect x="186.3" y="1059.0" width="27.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="189.3" y="1070.0">M..</text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 2.30%)</title><rect x="186.3" y="1043.0" width="27.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="189.3" y="1054.0">M..</text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 1.15%)</title><rect x="186.3" y="1027.0" width="13.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="189.3" y="1038.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 1.15%)</title><rect x="186.3" y="1011.0" width="13.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="189.3" y="1022.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 1.15%)</title><rect x="199.9" y="1027.0" width="13.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="202.9" y="1038.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 1.15%)</title><rect x="199.9" y="1011.0" width="13.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="202.9" y="1022.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 1.15%)</title><rect x="199.9" y="995.0" width="13.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="202.9" y="1006.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 1.15%)</title><rect x="199.9" y="979.0" width="13.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="202.9" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 1.15%)</title><rect x="213.4" y="1107.0" width="13.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="216.4" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 1.15%)</title><rect x="213.4" y="1091.0" width="13.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="216.4" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 3.45%)</title><rect x="227.0" y="1107.0" width="40.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="230.0" y="1118.0">Pha..</text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 1.15%)</title><rect x="227.0" y="1091.0" width="13.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="230.0" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::do_DFS(Tarjan*, unsigned int) (1 samples, 1.15%)</title><rect x="227.0" y="1075.0" width="13.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="230.0" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 2.30%)</title><rect x="240.6" y="1091.0" width="27.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="243.6" y="1102.0">P..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 1.15%)</title><rect x="240.6" y="1075.0" width="13.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="243.6" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 1.15%)</title><rect x="240.6" y="1059.0" width="13.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="243.6" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 1.15%)</title><rect x="254.1" y="1075.0" width="13.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="257.1" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (34 samples, 39.08%)</title><rect x="267.7" y="1107.0" width="461.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="270.7" y="1118.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 1.15%)</title><rect x="267.7" y="1091.0" width="13.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="270.7" y="1102.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 1.15%)</title><rect x="281.3" y="1091.0" width="13.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="284.3" y="1102.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 1.15%)</title><rect x="294.8" y="1091.0" width="13.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="297.8" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 1.15%)</title><rect x="308.4" y="1091.0" width="13.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="311.4" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 1.15%)</title><rect x="308.4" y="1075.0" width="13.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="311.4" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 2.30%)</title><rect x="322.0" y="1091.0" width="27.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="325.0" y="1102.0">P..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 1.15%)</title><rect x="335.5" y="1075.0" width="13.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="338.5" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 9.20%)</title><rect x="349.1" y="1091.0" width="108.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="352.1" y="1102.0">PhaseChaitin:..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 8.05%)</title><rect x="457.6" y="1091.0" width="94.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="460.6" y="1102.0">PhaseChaiti..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 1.15%)</title><rect x="471.1" y="1075.0" width="13.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="474.1" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 2.30%)</title><rect x="484.7" y="1075.0" width="27.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="487.7" y="1086.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 2.30%)</title><rect x="484.7" y="1059.0" width="27.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="487.7" y="1070.0">I..</text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 1.15%)</title><rect x="511.8" y="1075.0" width="13.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="514.8" y="1086.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 1.15%)</title><rect x="525.4" y="1075.0" width="13.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="528.4" y="1086.0"></text>
</g>
<g>
<title>xorL_rRegNode::rule() const (1 samples, 1.15%)</title><rect x="539.0" y="1075.0" width="13.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="542.0" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 1.15%)</title><rect x="552.5" y="1091.0" width="13.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="555.5" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (3 samples, 3.45%)</title><rect x="566.1" y="1091.0" width="40.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="569.1" y="1102.0">Pha..</text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 1.15%)</title><rect x="593.2" y="1075.0" width="13.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="596.2" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 3.45%)</title><rect x="606.8" y="1091.0" width="40.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="609.8" y="1102.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 2.30%)</title><rect x="620.3" y="1075.0" width="27.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="623.3" y="1086.0">P..</text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 1.15%)</title><rect x="647.5" y="1091.0" width="13.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="650.5" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.15%)</title><rect x="647.5" y="1075.0" width="13.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="650.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 1.15%)</title><rect x="661.0" y="1091.0" width="13.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="664.0" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.15%)</title><rect x="661.0" y="1075.0" width="13.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="664.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 1.15%)</title><rect x="674.6" y="1091.0" width="13.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="677.6" y="1102.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 1.15%)</title><rect x="674.6" y="1075.0" width="13.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="677.6" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 3.45%)</title><rect x="688.2" y="1091.0" width="40.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="691.2" y="1102.0">Pha..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 1.15%)</title><rect x="688.2" y="1075.0" width="13.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="691.2" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 2.30%)</title><rect x="701.7" y="1075.0" width="27.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="704.7" y="1086.0">P..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 1.15%)</title><rect x="701.7" y="1059.0" width="13.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="704.7" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.15%)</title><rect x="715.3" y="1059.0" width="13.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="718.3" y="1070.0"></text>
</g>
<g>
<title>Compile::Optimize() (21 samples, 24.14%)</title><rect x="728.9" y="1123.0" width="284.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="731.9" y="1134.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 1.15%)</title><rect x="728.9" y="1107.0" width="13.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="731.9" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 1.15%)</title><rect x="728.9" y="1091.0" width="13.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="731.9" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 1.15%)</title><rect x="728.9" y="1075.0" width="13.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="731.9" y="1086.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 1.15%)</title><rect x="742.4" y="1107.0" width="13.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="745.4" y="1118.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 1.15%)</title><rect x="742.4" y="1091.0" width="13.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="745.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (16 samples, 18.39%)</title><rect x="756.0" y="1107.0" width="217.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="759.0" y="1118.0">PhaseIdealLoop::build_and_opt..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 1.15%)</title><rect x="756.0" y="1091.0" width="13.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="759.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (11 samples, 12.64%)</title><rect x="769.5" y="1091.0" width="149.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="772.5" y="1102.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>ConLNode::Opcode() const (1 samples, 1.15%)</title><rect x="783.1" y="1075.0" width="13.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="786.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (9 samples, 10.34%)</title><rect x="796.7" y="1075.0" width="122.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="799.7" y="1086.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (8 samples, 9.20%)</title><rect x="810.2" y="1059.0" width="108.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="813.2" y="1070.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 2.30%)</title><rect x="810.2" y="1043.0" width="27.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="813.2" y="1054.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 1.15%)</title><rect x="823.8" y="1027.0" width="13.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="826.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.194] (1 samples, 1.15%)</title><rect x="823.8" y="1011.0" width="13.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="826.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (6 samples, 6.90%)</title><rect x="837.4" y="1043.0" width="81.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="840.4" y="1054.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 1.15%)</title><rect x="918.7" y="1091.0" width="13.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="921.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 1.15%)</title><rect x="932.3" y="1091.0" width="13.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="935.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 1.15%)</title><rect x="932.3" y="1075.0" width="13.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="935.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::handle_use(Node*, Node*, small_cache*, Node*, Node*, Node*, Node*, Node*) (1 samples, 1.15%)</title><rect x="932.3" y="1059.0" width="13.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="935.3" y="1070.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 1.15%)</title><rect x="932.3" y="1043.0" width="13.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="935.3" y="1054.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 1.15%)</title><rect x="932.3" y="1027.0" width="13.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="935.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 2.30%)</title><rect x="945.9" y="1091.0" width="27.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="948.9" y="1102.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 2.30%)</title><rect x="945.9" y="1075.0" width="27.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="948.9" y="1086.0">P..</text>
</g>
<g>
<title>CatchProjNode::Identity(PhaseTransform*) (1 samples, 1.15%)</title><rect x="945.9" y="1059.0" width="13.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="948.9" y="1070.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 1.15%)</title><rect x="959.4" y="1059.0" width="13.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="962.4" y="1070.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 1.15%)</title><rect x="959.4" y="1043.0" width="13.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="962.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 3.45%)</title><rect x="973.0" y="1107.0" width="40.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="976.0" y="1118.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 3.45%)</title><rect x="973.0" y="1091.0" width="40.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="976.0" y="1102.0">Pha..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 1.15%)</title><rect x="973.0" y="1075.0" width="13.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="976.0" y="1086.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 1.15%)</title><rect x="973.0" y="1059.0" width="13.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="976.0" y="1070.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 1.15%)</title><rect x="973.0" y="1043.0" width="13.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="976.0" y="1054.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 1.15%)</title><rect x="973.0" y="1027.0" width="13.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="976.0" y="1038.0"></text>
</g>
<g>
<title>MergeMemNode::Identity(PhaseTransform*) (1 samples, 1.15%)</title><rect x="986.6" y="1075.0" width="13.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="989.6" y="1086.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 1.15%)</title><rect x="1000.1" y="1075.0" width="13.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1003.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 1.15%)</title><rect x="1000.1" y="1059.0" width="13.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1003.1" y="1070.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 1.15%)</title><rect x="1000.1" y="1043.0" width="13.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1003.1" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 6.90%)</title><rect x="1013.7" y="1123.0" width="81.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1016.7" y="1134.0">ParseGene..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 6.90%)</title><rect x="1013.7" y="1107.0" width="81.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1016.7" y="1118.0">Parse::Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 6.90%)</title><rect x="1013.7" y="1091.0" width="81.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1016.7" y="1102.0">Parse::do..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 6.90%)</title><rect x="1013.7" y="1075.0" width="81.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1016.7" y="1086.0">Parse::do..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 6.90%)</title><rect x="1013.7" y="1059.0" width="81.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1016.7" y="1070.0">Parse::do..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 6.90%)</title><rect x="1013.7" y="1043.0" width="81.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1016.7" y="1054.0">Parse::do..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 4.60%)</title><rect x="1013.7" y="1027.0" width="54.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1016.7" y="1038.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 4.60%)</title><rect x="1013.7" y="1011.0" width="54.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1016.7" y="1022.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 4.60%)</title><rect x="1013.7" y="995.0" width="54.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1016.7" y="1006.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 4.60%)</title><rect x="1013.7" y="979.0" width="54.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1016.7" y="990.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 4.60%)</title><rect x="1013.7" y="963.0" width="54.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1016.7" y="974.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 4.60%)</title><rect x="1013.7" y="947.0" width="54.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1016.7" y="958.0">Parse..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 4.60%)</title><rect x="1013.7" y="931.0" width="54.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1016.7" y="942.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 4.60%)</title><rect x="1013.7" y="915.0" width="54.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1016.7" y="926.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 4.60%)</title><rect x="1013.7" y="899.0" width="54.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1016.7" y="910.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 4.60%)</title><rect x="1013.7" y="883.0" width="54.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1016.7" y="894.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 4.60%)</title><rect x="1013.7" y="867.0" width="54.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1016.7" y="878.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 4.60%)</title><rect x="1013.7" y="851.0" width="54.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1016.7" y="862.0">Parse..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 4.60%)</title><rect x="1013.7" y="835.0" width="54.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1016.7" y="846.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 4.60%)</title><rect x="1013.7" y="819.0" width="54.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1016.7" y="830.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 4.60%)</title><rect x="1013.7" y="803.0" width="54.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1016.7" y="814.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 4.60%)</title><rect x="1013.7" y="787.0" width="54.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1016.7" y="798.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 4.60%)</title><rect x="1013.7" y="771.0" width="54.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1016.7" y="782.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 4.60%)</title><rect x="1013.7" y="755.0" width="54.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1016.7" y="766.0">Parse..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.45%)</title><rect x="1013.7" y="739.0" width="40.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1016.7" y="750.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.45%)</title><rect x="1013.7" y="723.0" width="40.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1016.7" y="734.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.45%)</title><rect x="1013.7" y="707.0" width="40.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1016.7" y="718.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.45%)</title><rect x="1013.7" y="691.0" width="40.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1016.7" y="702.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.45%)</title><rect x="1013.7" y="675.0" width="40.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1016.7" y="686.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.45%)</title><rect x="1013.7" y="659.0" width="40.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1016.7" y="670.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 2.30%)</title><rect x="1013.7" y="643.0" width="27.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1016.7" y="654.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 2.30%)</title><rect x="1013.7" y="627.0" width="27.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1016.7" y="638.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 2.30%)</title><rect x="1013.7" y="611.0" width="27.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1016.7" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 2.30%)</title><rect x="1013.7" y="595.0" width="27.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1016.7" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 2.30%)</title><rect x="1013.7" y="579.0" width="27.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1016.7" y="590.0">P..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 2.30%)</title><rect x="1013.7" y="563.0" width="27.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1016.7" y="574.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 2.30%)</title><rect x="1013.7" y="547.0" width="27.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1016.7" y="558.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 2.30%)</title><rect x="1013.7" y="531.0" width="27.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1016.7" y="542.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 2.30%)</title><rect x="1013.7" y="515.0" width="27.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1016.7" y="526.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 2.30%)</title><rect x="1013.7" y="499.0" width="27.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1016.7" y="510.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 2.30%)</title><rect x="1013.7" y="483.0" width="27.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1016.7" y="494.0">P..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 2.30%)</title><rect x="1013.7" y="467.0" width="27.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1016.7" y="478.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 1.15%)</title><rect x="1013.7" y="451.0" width="13.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1016.7" y="462.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 1.15%)</title><rect x="1013.7" y="435.0" width="13.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1016.7" y="446.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 1.15%)</title><rect x="1013.7" y="419.0" width="13.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1016.7" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 1.15%)</title><rect x="1013.7" y="403.0" width="13.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1016.7" y="414.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 1.15%)</title><rect x="1013.7" y="387.0" width="13.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1016.7" y="398.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 1.15%)</title><rect x="1013.7" y="371.0" width="13.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1016.7" y="382.0"></text>
</g>
<g>
<title>ciMethodBlocks::make_block_at(int) (1 samples, 1.15%)</title><rect x="1013.7" y="355.0" width="13.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1016.7" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.15%)</title><rect x="1027.2" y="451.0" width="13.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1030.2" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.15%)</title><rect x="1027.2" y="435.0" width="13.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1030.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.15%)</title><rect x="1027.2" y="419.0" width="13.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1030.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.15%)</title><rect x="1027.2" y="403.0" width="13.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1030.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.15%)</title><rect x="1027.2" y="387.0" width="13.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1030.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.15%)</title><rect x="1027.2" y="371.0" width="13.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1030.2" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.15%)</title><rect x="1027.2" y="355.0" width="13.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1030.2" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.15%)</title><rect x="1027.2" y="339.0" width="13.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1030.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.15%)</title><rect x="1027.2" y="323.0" width="13.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1030.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.15%)</title><rect x="1027.2" y="307.0" width="13.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1030.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.15%)</title><rect x="1027.2" y="291.0" width="13.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1030.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.15%)</title><rect x="1027.2" y="275.0" width="13.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1030.2" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.15%)</title><rect x="1027.2" y="259.0" width="13.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1030.2" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.15%)</title><rect x="1027.2" y="243.0" width="13.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1030.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.15%)</title><rect x="1027.2" y="227.0" width="13.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1030.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.15%)</title><rect x="1027.2" y="211.0" width="13.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1030.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.15%)</title><rect x="1027.2" y="195.0" width="13.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1030.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.15%)</title><rect x="1027.2" y="179.0" width="13.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1030.2" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.15%)</title><rect x="1027.2" y="163.0" width="13.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1030.2" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.15%)</title><rect x="1027.2" y="147.0" width="13.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1030.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.15%)</title><rect x="1027.2" y="131.0" width="13.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1030.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.15%)</title><rect x="1027.2" y="115.0" width="13.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1030.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.15%)</title><rect x="1027.2" y="99.0" width="13.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1030.2" y="110.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 1.15%)</title><rect x="1027.2" y="83.0" width="13.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1030.2" y="94.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 1.15%)</title><rect x="1027.2" y="67.0" width="13.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1030.2" y="78.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 1.15%)</title><rect x="1027.2" y="51.0" width="13.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1030.2" y="62.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 1.15%)</title><rect x="1027.2" y="35.0" width="13.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1030.2" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.15%)</title><rect x="1040.8" y="643.0" width="13.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1043.8" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.15%)</title><rect x="1040.8" y="627.0" width="13.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1043.8" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.15%)</title><rect x="1040.8" y="611.0" width="13.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1043.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.15%)</title><rect x="1040.8" y="595.0" width="13.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1043.8" y="606.0"></text>
</g>
<g>
<title>ciBytecodeStream::reset_to_bci(int) (1 samples, 1.15%)</title><rect x="1040.8" y="579.0" width="13.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1043.8" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.15%)</title><rect x="1054.4" y="739.0" width="13.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1057.4" y="750.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.15%)</title><rect x="1054.4" y="723.0" width="13.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1057.4" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.15%)</title><rect x="1054.4" y="707.0" width="13.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1057.4" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.15%)</title><rect x="1054.4" y="691.0" width="13.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1057.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.15%)</title><rect x="1054.4" y="675.0" width="13.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1057.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.15%)</title><rect x="1054.4" y="659.0" width="13.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1057.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.15%)</title><rect x="1054.4" y="643.0" width="13.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1057.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.15%)</title><rect x="1054.4" y="627.0" width="13.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1057.4" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.15%)</title><rect x="1054.4" y="611.0" width="13.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1057.4" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.15%)</title><rect x="1054.4" y="595.0" width="13.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1057.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.15%)</title><rect x="1054.4" y="579.0" width="13.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1057.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.15%)</title><rect x="1054.4" y="563.0" width="13.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1057.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.15%)</title><rect x="1054.4" y="547.0" width="13.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1057.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 1.15%)</title><rect x="1054.4" y="531.0" width="13.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1057.4" y="542.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 1.15%)</title><rect x="1054.4" y="515.0" width="13.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1057.4" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 2.30%)</title><rect x="1067.9" y="1027.0" width="27.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1070.9" y="1038.0">P..</text>
</g>
<g>
<title>MergeMemNode::set_base_memory(Node*) (1 samples, 1.15%)</title><rect x="1067.9" y="1011.0" width="13.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1070.9" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.15%)</title><rect x="1081.5" y="1011.0" width="13.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1084.5" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.15%)</title><rect x="1081.5" y="995.0" width="13.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1084.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.15%)</title><rect x="1081.5" y="979.0" width="13.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1084.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.15%)</title><rect x="1081.5" y="963.0" width="13.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1084.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.15%)</title><rect x="1081.5" y="947.0" width="13.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1084.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.15%)</title><rect x="1081.5" y="931.0" width="13.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1084.5" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.15%)</title><rect x="1081.5" y="915.0" width="13.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1084.5" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.15%)</title><rect x="1081.5" y="899.0" width="13.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1084.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.15%)</title><rect x="1081.5" y="883.0" width="13.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1084.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.15%)</title><rect x="1081.5" y="867.0" width="13.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.15%)</title><rect x="1081.5" y="851.0" width="13.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.15%)</title><rect x="1081.5" y="835.0" width="13.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1084.5" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.15%)</title><rect x="1081.5" y="819.0" width="13.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1084.5" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.15%)</title><rect x="1081.5" y="803.0" width="13.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1084.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.15%)</title><rect x="1081.5" y="787.0" width="13.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1084.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.15%)</title><rect x="1081.5" y="771.0" width="13.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1084.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.15%)</title><rect x="1081.5" y="755.0" width="13.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1084.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.15%)</title><rect x="1081.5" y="739.0" width="13.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1084.5" y="750.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.15%)</title><rect x="1081.5" y="723.0" width="13.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1084.5" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.15%)</title><rect x="1081.5" y="707.0" width="13.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1084.5" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.15%)</title><rect x="1081.5" y="691.0" width="13.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1084.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.15%)</title><rect x="1081.5" y="675.0" width="13.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1084.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.15%)</title><rect x="1081.5" y="659.0" width="13.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1084.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.15%)</title><rect x="1081.5" y="643.0" width="13.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1084.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.15%)</title><rect x="1081.5" y="627.0" width="13.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1084.5" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.15%)</title><rect x="1081.5" y="611.0" width="13.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1084.5" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.15%)</title><rect x="1081.5" y="595.0" width="13.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.15%)</title><rect x="1081.5" y="579.0" width="13.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1084.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.15%)</title><rect x="1081.5" y="563.0" width="13.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1084.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.15%)</title><rect x="1081.5" y="547.0" width="13.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1084.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.15%)</title><rect x="1081.5" y="531.0" width="13.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1084.5" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.15%)</title><rect x="1081.5" y="515.0" width="13.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1084.5" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.15%)</title><rect x="1081.5" y="499.0" width="13.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1084.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.15%)</title><rect x="1081.5" y="483.0" width="13.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1084.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.15%)</title><rect x="1081.5" y="467.0" width="13.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1084.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.15%)</title><rect x="1081.5" y="451.0" width="13.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1084.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.15%)</title><rect x="1081.5" y="435.0" width="13.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1084.5" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.15%)</title><rect x="1081.5" y="419.0" width="13.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.5" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.15%)</title><rect x="1081.5" y="403.0" width="13.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1084.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.15%)</title><rect x="1081.5" y="387.0" width="13.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1084.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.15%)</title><rect x="1081.5" y="371.0" width="13.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1084.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.15%)</title><rect x="1081.5" y="355.0" width="13.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1084.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.15%)</title><rect x="1081.5" y="339.0" width="13.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1084.5" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.15%)</title><rect x="1081.5" y="323.0" width="13.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.5" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.15%)</title><rect x="1081.5" y="307.0" width="13.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1084.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.15%)</title><rect x="1081.5" y="291.0" width="13.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.15%)</title><rect x="1081.5" y="275.0" width="13.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1084.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.15%)</title><rect x="1081.5" y="259.0" width="13.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 1.15%)</title><rect x="1081.5" y="243.0" width="13.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 1.15%)</title><rect x="1081.5" y="227.0" width="13.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1084.5" y="238.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 1.15%)</title><rect x="1081.5" y="211.0" width="13.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1084.5" y="222.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 1.15%)</title><rect x="1081.5" y="195.0" width="13.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.5" y="206.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 1.15%)</title><rect x="1081.5" y="179.0" width="13.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.5" y="190.0"></text>
</g>
<g>
<title>IdealKit::copy_cvstate() (1 samples, 1.15%)</title><rect x="1081.5" y="163.0" width="13.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1084.5" y="174.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (3 samples, 3.45%)</title><rect x="1095.1" y="1123.0" width="40.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1098.1" y="1134.0">Pha..</text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 1.15%)</title><rect x="1095.1" y="1107.0" width="13.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.1" y="1118.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 2.30%)</title><rect x="1108.6" y="1107.0" width="27.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.6" y="1118.0">C..</text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 1.15%)</title><rect x="1135.7" y="1123.0" width="13.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.7" y="1134.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 1.15%)</title><rect x="1135.7" y="1107.0" width="13.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.7" y="1118.0"></text>
</g>
<g>
<title>CodeBuffer::finalize_oop_references(methodHandle) (1 samples, 1.15%)</title><rect x="1135.7" y="1091.0" width="13.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.7" y="1102.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 3.45%)</title><rect x="1149.3" y="1155.0" width="40.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.3" y="1166.0">Com..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 3.45%)</title><rect x="1149.3" y="1139.0" width="40.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.3" y="1150.0">Com..</text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 3.45%)</title><rect x="1149.3" y="1123.0" width="40.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.3" y="1134.0">Com..</text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 3.45%)</title><rect x="1149.3" y="1107.0" width="40.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.3" y="1118.0">Com..</text>
</g>
<g>
<title>Compilation::build_hir() (3 samples, 3.45%)</title><rect x="1149.3" y="1091.0" width="40.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.3" y="1102.0">Com..</text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 1.15%)</title><rect x="1149.3" y="1075.0" width="13.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.3" y="1086.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 1.15%)</title><rect x="1149.3" y="1059.0" width="13.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.3" y="1070.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 1.15%)</title><rect x="1149.3" y="1043.0" width="13.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.3" y="1054.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 1.15%)</title><rect x="1149.3" y="1027.0" width="13.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.3" y="1038.0"></text>
</g>
<g>
<title>Invoke::state_values_do(ValueVisitor*) (1 samples, 1.15%)</title><rect x="1149.3" y="1011.0" width="13.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.3" y="1022.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 1.15%)</title><rect x="1149.3" y="995.0" width="13.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.3" y="1006.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 2.30%)</title><rect x="1162.9" y="1075.0" width="27.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.9" y="1086.0">I..</text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 2.30%)</title><rect x="1162.9" y="1059.0" width="27.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.9" y="1070.0">I..</text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 2.30%)</title><rect x="1162.9" y="1043.0" width="27.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.9" y="1054.0">G..</text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 2.30%)</title><rect x="1162.9" y="1027.0" width="27.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.9" y="1038.0">G..</text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 2.30%)</title><rect x="1162.9" y="1011.0" width="27.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.9" y="1022.0">G..</text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 2.30%)</title><rect x="1162.9" y="995.0" width="27.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.9" y="1006.0">G..</text>
</g>
<g>
<title>GraphBuilder::profile_call(ciMethod*, Instruction*, ciKlass*, Values*, bool) (1 samples, 1.15%)</title><rect x="1162.9" y="979.0" width="13.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.9" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 1.15%)</title><rect x="1176.4" y="979.0" width="13.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.4" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 1.15%)</title><rect x="1176.4" y="963.0" width="13.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.4" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 1.15%)</title><rect x="1176.4" y="947.0" width="13.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.4" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 1.15%)</title><rect x="1176.4" y="931.0" width="13.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.4" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 1.15%)</title><rect x="1176.4" y="915.0" width="13.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.4" y="926.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 1.15%)</title><rect x="1176.4" y="899.0" width="13.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.4" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 1.15%)</title><rect x="1176.4" y="883.0" width="13.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.4" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 1.15%)</title><rect x="1176.4" y="867.0" width="13.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.4" y="878.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 1.15%)</title><rect x="1176.4" y="851.0" width="13.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.4" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 1.15%)</title><rect x="1176.4" y="835.0" width="13.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.4" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 1.15%)</title><rect x="1176.4" y="819.0" width="13.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.4" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 1.15%)</title><rect x="1176.4" y="803.0" width="13.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.4" y="814.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 1.15%)</title><rect x="1176.4" y="787.0" width="13.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.4" y="798.0"></text>
</g>
</g>
</svg>
