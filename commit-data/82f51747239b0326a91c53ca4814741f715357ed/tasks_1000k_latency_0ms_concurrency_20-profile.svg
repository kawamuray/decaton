<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,439 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2035.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2019.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2003.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1987.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1971.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1955.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1939.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1923.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1907.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1891.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1763.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1731.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1715.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1683.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1667.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1651.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1635.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1619.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1603.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1587.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1571.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1555.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1539.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1523.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1507.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1491.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1475.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1459.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1443.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1427.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1395.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1379.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1299.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1283.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1267.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1251.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1235.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1219.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1155.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1123.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="915.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="899.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="835.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="819.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="787.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="771.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="755.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="739.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="723.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="707.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="691.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="675.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="659.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="643.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="627.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="611.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="595.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="579.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="563.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="547.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="531.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="515.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="483.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="467.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="451.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="435.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="419.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="403.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="387.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="371.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="355.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="339.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="323.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="307.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="291.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="275.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="259.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="243.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="227.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="211.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="195.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="179.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="163.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="147.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="131.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="115.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="99.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="83.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="67.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="51.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="10.0" y="35.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.21%)</title><rect x="10.8" y="2035.0" width="2.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.8" y="2046.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.07%)</title><rect x="10.8" y="2019.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="13.8" y="2030.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.07%)</title><rect x="10.8" y="2003.0" width="0.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="13.8" y="2014.0"></text>
</g>
<g>
<title>_int_malloc (2 samples, 0.14%)</title><rect x="11.6" y="2019.0" width="1.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="14.6" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (283 samples, 19.67%)</title><rect x="13.3" y="2035.0" width="232.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.3" y="2046.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (283 samples, 19.67%)</title><rect x="13.3" y="2019.0" width="232.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="16.3" y="2030.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (3 samples, 0.21%)</title><rect x="13.3" y="2003.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.3" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.07%)</title><rect x="14.9" y="1987.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.9" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1839207692.accept (1 samples, 0.07%)</title><rect x="14.9" y="1971.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.9" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.07%)</title><rect x="14.9" y="1955.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.9" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.07%)</title><rect x="14.9" y="1939.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.9" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.07%)</title><rect x="14.9" y="1923.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.9" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.28%)</title><rect x="15.7" y="2003.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="18.7" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.28%)</title><rect x="15.7" y="1987.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="18.7" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.28%)</title><rect x="15.7" y="1971.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.7" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.28%)</title><rect x="15.7" y="1955.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.7" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.28%)</title><rect x="15.7" y="1939.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.7" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.21%)</title><rect x="15.7" y="1923.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.7" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.21%)</title><rect x="15.7" y="1907.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.7" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.14%)</title><rect x="15.7" y="1891.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.7" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="16.6" y="1875.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.6" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="16.6" y="1859.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.6" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="17.4" y="1891.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.4" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="17.4" y="1875.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.4" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="17.4" y="1859.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.4" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="17.4" y="1843.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.4" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$169/408572376.get (1 samples, 0.07%)</title><rect x="17.4" y="1827.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.4" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.07%)</title><rect x="18.2" y="1923.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.07%)</title><rect x="18.2" y="1907.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="21.2" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="18.2" y="1891.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="21.2" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.07%)</title><rect x="19.0" y="2003.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.0" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.07%)</title><rect x="19.0" y="1987.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="22.0" y="1998.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="19.0" y="1971.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.0" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="19.0" y="1955.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="22.0" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="19.0" y="1939.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="22.0" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (215 samples, 14.94%)</title><rect x="19.8" y="2003.0" width="176.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="22.8" y="2014.0">java/lang/Iterable.forE..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/845115886.accept (211 samples, 14.66%)</title><rect x="19.8" y="1987.0" width="173.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.8" y="1998.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (209 samples, 14.52%)</title><rect x="21.5" y="1971.0" width="171.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.5" y="1982.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (2 samples, 0.14%)</title><rect x="21.5" y="1955.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.5" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (164 samples, 11.40%)</title><rect x="23.1" y="1955.0" width="134.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="26.1" y="1966.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (164 samples, 11.40%)</title><rect x="23.1" y="1939.0" width="134.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.1" y="1950.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (164 samples, 11.40%)</title><rect x="23.1" y="1923.0" width="134.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.1" y="1934.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (164 samples, 11.40%)</title><rect x="23.1" y="1907.0" width="134.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.1" y="1918.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (164 samples, 11.40%)</title><rect x="23.1" y="1891.0" width="134.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="26.1" y="1902.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (164 samples, 11.40%)</title><rect x="23.1" y="1875.0" width="134.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.1" y="1886.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (114 samples, 7.92%)</title><rect x="23.1" y="1859.0" width="93.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="26.1" y="1870.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (24 samples, 1.67%)</title><rect x="23.1" y="1843.0" width="19.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.1" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (24 samples, 1.67%)</title><rect x="23.1" y="1827.0" width="19.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="26.1" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (19 samples, 1.32%)</title><rect x="27.2" y="1811.0" width="15.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="30.2" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (19 samples, 1.32%)</title><rect x="27.2" y="1795.0" width="15.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.2" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.42%)</title><rect x="42.8" y="1843.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="45.8" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 0.42%)</title><rect x="42.8" y="1827.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="45.8" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.21%)</title><rect x="44.4" y="1811.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="47.4" y="1822.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.21%)</title><rect x="44.4" y="1795.0" width="2.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="47.4" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.07%)</title><rect x="46.9" y="1811.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="49.9" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (84 samples, 5.84%)</title><rect x="47.7" y="1843.0" width="68.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="50.7" y="1854.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (84 samples, 5.84%)</title><rect x="47.7" y="1827.0" width="68.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.7" y="1838.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (82 samples, 5.70%)</title><rect x="48.5" y="1811.0" width="67.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="51.5" y="1822.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (82 samples, 5.70%)</title><rect x="48.5" y="1795.0" width="67.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="51.5" y="1806.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (82 samples, 5.70%)</title><rect x="48.5" y="1779.0" width="67.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.5" y="1790.0">sun/mis..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="49.4" y="1763.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="52.4" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Unpark (68 samples, 4.73%)</title><rect x="50.2" y="1763.0" width="55.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="53.2" y="1774.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="52.6" y="1747.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="55.6" y="1758.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="53.5" y="1747.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="56.5" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (47 samples, 3.27%)</title><rect x="54.3" y="1747.0" width="38.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="57.3" y="1758.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (5 samples, 0.35%)</title><rect x="92.8" y="1747.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="95.8" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (11 samples, 0.76%)</title><rect x="96.9" y="1747.0" width="9.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="99.9" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (8 samples, 0.56%)</title><rect x="105.9" y="1763.0" width="6.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="108.9" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.28%)</title><rect x="112.5" y="1763.0" width="3.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="115.5" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.07%)</title><rect x="115.8" y="1811.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="118.8" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (39 samples, 2.71%)</title><rect x="116.6" y="1859.0" width="32.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="119.6" y="1870.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (39 samples, 2.71%)</title><rect x="116.6" y="1843.0" width="32.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="119.6" y="1854.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (39 samples, 2.71%)</title><rect x="116.6" y="1827.0" width="32.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="119.6" y="1838.0">ja..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="146.9" y="1811.0" width="1.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="149.9" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.63%)</title><rect x="148.6" y="1859.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="151.6" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (9 samples, 0.63%)</title><rect x="148.6" y="1843.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="151.6" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (9 samples, 0.63%)</title><rect x="148.6" y="1827.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="151.6" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.28%)</title><rect x="152.7" y="1811.0" width="3.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="155.7" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.14%)</title><rect x="156.0" y="1859.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="159.0" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.14%)</title><rect x="156.0" y="1843.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="159.0" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.14%)</title><rect x="156.0" y="1827.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="159.0" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.07%)</title><rect x="156.0" y="1811.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="159.0" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.07%)</title><rect x="156.8" y="1811.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.8" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (3 samples, 0.21%)</title><rect x="157.6" y="1955.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="160.6" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.21%)</title><rect x="157.6" y="1939.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="160.6" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (6 samples, 0.42%)</title><rect x="160.1" y="1955.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="163.1" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.42%)</title><rect x="160.1" y="1939.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="163.1" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.42%)</title><rect x="160.1" y="1923.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="163.1" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (34 samples, 2.36%)</title><rect x="165.0" y="1955.0" width="27.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="168.0" y="1966.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (34 samples, 2.36%)</title><rect x="165.0" y="1939.0" width="27.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="168.0" y="1950.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 0.69%)</title><rect x="182.2" y="1923.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="185.2" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.14%)</title><rect x="183.8" y="1907.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="186.8" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.14%)</title><rect x="183.8" y="1891.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="186.8" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.14%)</title><rect x="183.8" y="1875.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="186.8" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.21%)</title><rect x="185.5" y="1907.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="188.5" y="1918.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.21%)</title><rect x="187.9" y="1907.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="190.9" y="1918.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.21%)</title><rect x="190.4" y="1923.0" width="2.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="193.4" y="1934.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="192.9" y="1987.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="195.9" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.21%)</title><rect x="193.7" y="1987.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="196.7" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.21%)</title><rect x="193.7" y="1971.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="196.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.21%)</title><rect x="193.7" y="1955.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="196.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.21%)</title><rect x="193.7" y="1939.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="196.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 4.17%)</title><rect x="196.1" y="2003.0" width="49.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="199.1" y="2014.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 4.17%)</title><rect x="196.1" y="1987.0" width="49.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="199.1" y="1998.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (38 samples, 2.64%)</title><rect x="196.1" y="1971.0" width="31.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="199.1" y="1982.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="196.1" y="1955.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="196.1" y="1939.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="199.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.07%)</title><rect x="196.1" y="1923.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="199.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.07%)</title><rect x="196.1" y="1907.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="199.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.07%)</title><rect x="196.1" y="1891.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.07%)</title><rect x="196.1" y="1875.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="199.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="196.1" y="1859.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="199.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="196.1" y="1843.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="199.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (37 samples, 2.57%)</title><rect x="197.0" y="1955.0" width="30.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="200.0" y="1966.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (36 samples, 2.50%)</title><rect x="197.0" y="1939.0" width="29.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="200.0" y="1950.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (28 samples, 1.95%)</title><rect x="197.8" y="1923.0" width="22.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="200.8" y="1934.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (28 samples, 1.95%)</title><rect x="197.8" y="1907.0" width="22.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="200.8" y="1918.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (16 samples, 1.11%)</title><rect x="198.6" y="1891.0" width="13.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="201.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.07%)</title><rect x="204.3" y="1875.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="207.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.movePartitionToEnd (1 samples, 0.07%)</title><rect x="204.3" y="1859.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="207.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.moveToEnd (1 samples, 0.07%)</title><rect x="204.3" y="1843.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="207.3" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.07%)</title><rect x="204.3" y="1827.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="207.3" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.07%)</title><rect x="204.3" y="1811.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="207.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.07%)</title><rect x="204.3" y="1795.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="207.3" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (8 samples, 0.56%)</title><rect x="205.2" y="1875.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (8 samples, 0.56%)</title><rect x="205.2" y="1859.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="208.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (8 samples, 0.56%)</title><rect x="205.2" y="1843.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="208.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (8 samples, 0.56%)</title><rect x="205.2" y="1827.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="208.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (8 samples, 0.56%)</title><rect x="205.2" y="1811.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="208.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (8 samples, 0.56%)</title><rect x="205.2" y="1795.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="208.2" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (8 samples, 0.56%)</title><rect x="205.2" y="1779.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="208.2" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (10 samples, 0.69%)</title><rect x="211.7" y="1891.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.69%)</title><rect x="211.7" y="1875.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="214.7" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="213.4" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="216.4" y="1870.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="213.4" y="1843.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="216.4" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="213.4" y="1827.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="216.4" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="213.4" y="1811.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="216.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (3 samples, 0.21%)</title><rect x="214.2" y="1859.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="217.2" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.of (3 samples, 0.21%)</title><rect x="214.2" y="1843.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="217.2" y="1854.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="215.0" y="1827.0" width="1.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="218.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.28%)</title><rect x="216.6" y="1859.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.6" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.28%)</title><rect x="216.6" y="1843.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="219.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.07%)</title><rect x="219.9" y="1891.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (4 samples, 0.28%)</title><rect x="220.7" y="1923.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="223.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (4 samples, 0.28%)</title><rect x="220.7" y="1907.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="223.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.14%)</title><rect x="220.7" y="1891.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="223.7" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.14%)</title><rect x="220.7" y="1875.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="223.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="222.4" y="1891.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="225.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="222.4" y="1875.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="225.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="223.2" y="1859.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="226.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="223.2" y="1843.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="226.2" y="1854.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="223.2" y="1827.0" width="0.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="226.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (3 samples, 0.21%)</title><rect x="224.0" y="1923.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (3 samples, 0.21%)</title><rect x="224.0" y="1907.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="227.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.14%)</title><rect x="224.0" y="1891.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="227.0" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.14%)</title><rect x="224.0" y="1875.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="227.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="224.8" y="1859.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="225.7" y="1891.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="228.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="225.7" y="1875.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="228.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="225.7" y="1859.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="228.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="225.7" y="1843.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.07%)</title><rect x="225.7" y="1827.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (1 samples, 0.07%)</title><rect x="225.7" y="1811.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.07%)</title><rect x="226.5" y="1939.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="229.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (13 samples, 0.90%)</title><rect x="227.3" y="1971.0" width="10.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="230.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (12 samples, 0.83%)</title><rect x="227.3" y="1955.0" width="9.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="230.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (10 samples, 0.69%)</title><rect x="227.3" y="1939.0" width="8.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="230.3" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.14%)</title><rect x="228.1" y="1923.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="231.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1148168779.accept (2 samples, 0.14%)</title><rect x="228.1" y="1907.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.14%)</title><rect x="228.1" y="1891.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="231.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.14%)</title><rect x="228.1" y="1875.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.07%)</title><rect x="228.1" y="1859.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="231.1" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="228.1" y="1843.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="231.1" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="228.1" y="1827.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.07%)</title><rect x="228.9" y="1859.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.07%)</title><rect x="228.9" y="1843.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.9" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="228.9" y="1827.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.9" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="228.9" y="1811.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.9" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.07%)</title><rect x="229.8" y="1923.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.8" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="230.6" y="1923.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="233.6" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="230.6" y="1907.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="233.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (3 samples, 0.21%)</title><rect x="231.4" y="1923.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="234.4" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (3 samples, 0.21%)</title><rect x="231.4" y="1907.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.4" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (3 samples, 0.21%)</title><rect x="231.4" y="1891.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.4" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (2 samples, 0.14%)</title><rect x="231.4" y="1875.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="234.4" y="1886.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (2 samples, 0.14%)</title><rect x="231.4" y="1859.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.4" y="1870.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (2 samples, 0.14%)</title><rect x="231.4" y="1843.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="234.4" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.07%)</title><rect x="233.0" y="1875.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="236.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="233.0" y="1859.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.14%)</title><rect x="233.9" y="1923.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="236.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.14%)</title><rect x="233.9" y="1907.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="236.9" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.14%)</title><rect x="233.9" y="1891.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="236.9" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="233.9" y="1875.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.9" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="233.9" y="1859.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="236.9" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="233.9" y="1843.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="236.9" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="233.9" y="1827.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="236.9" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="233.9" y="1811.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.9" y="1822.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="233.9" y="1795.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.9" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="233.9" y="1779.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.9" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="233.9" y="1763.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="236.9" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="233.9" y="1747.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="236.9" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$214/49146861.test (1 samples, 0.07%)</title><rect x="233.9" y="1731.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="236.9" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.07%)</title><rect x="234.7" y="1827.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.7" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.07%)</title><rect x="234.7" y="1811.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.7" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="234.7" y="1795.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="237.7" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="234.7" y="1779.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="237.7" y="1790.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="234.7" y="1763.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="237.7" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.14%)</title><rect x="235.5" y="1939.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.5" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.07%)</title><rect x="236.3" y="1923.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="239.3" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="236.3" y="1907.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="239.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.07%)</title><rect x="237.1" y="1955.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.07%)</title><rect x="237.1" y="1939.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="240.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.07%)</title><rect x="237.1" y="1923.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="240.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.07%)</title><rect x="237.1" y="1907.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.07%)</title><rect x="237.1" y="1891.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.07%)</title><rect x="237.1" y="1875.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="240.1" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="237.1" y="1859.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.1" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="237.1" y="1843.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="240.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.49%)</title><rect x="238.0" y="1971.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="241.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.28%)</title><rect x="238.8" y="1955.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="241.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.07%)</title><rect x="239.6" y="1939.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.07%)</title><rect x="239.6" y="1923.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="242.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.07%)</title><rect x="239.6" y="1907.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="242.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getInt (1 samples, 0.07%)</title><rect x="239.6" y="1891.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.07%)</title><rect x="239.6" y="1875.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="242.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.07%)</title><rect x="239.6" y="1859.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="242.6" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="239.6" y="1843.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.6" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="239.6" y="1827.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="242.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.14%)</title><rect x="240.4" y="1939.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="243.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.14%)</title><rect x="240.4" y="1923.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="243.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.07%)</title><rect x="240.4" y="1907.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="243.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.07%)</title><rect x="240.4" y="1891.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="243.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.07%)</title><rect x="240.4" y="1875.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.07%)</title><rect x="240.4" y="1859.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="243.4" y="1870.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.07%)</title><rect x="240.4" y="1843.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="243.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.07%)</title><rect x="241.2" y="1907.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.07%)</title><rect x="241.2" y="1891.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="244.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.07%)</title><rect x="241.2" y="1875.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="244.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.07%)</title><rect x="241.2" y="1859.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.07%)</title><rect x="241.2" y="1843.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="244.2" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.07%)</title><rect x="241.2" y="1827.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="244.2" y="1838.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="241.2" y="1811.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="244.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.14%)</title><rect x="242.1" y="1955.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="245.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.14%)</title><rect x="242.1" y="1939.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.14%)</title><rect x="242.1" y="1923.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.14%)</title><rect x="242.1" y="1907.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="245.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.send (1 samples, 0.07%)</title><rect x="242.1" y="1891.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="245.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.setSend (1 samples, 0.07%)</title><rect x="242.1" y="1875.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.addInterestOps (1 samples, 0.07%)</title><rect x="242.1" y="1859.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.1" y="1870.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (1 samples, 0.07%)</title><rect x="242.1" y="1843.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.1" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioInterestOps (1 samples, 0.07%)</title><rect x="242.1" y="1827.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="245.1" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetInterestOps (1 samples, 0.07%)</title><rect x="242.1" y="1811.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="245.1" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.putEventOps (1 samples, 0.07%)</title><rect x="242.1" y="1795.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.1" y="1806.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.setInterest (1 samples, 0.07%)</title><rect x="242.1" y="1779.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="245.1" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.07%)</title><rect x="242.9" y="1891.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="245.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.07%)</title><rect x="242.9" y="1875.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.07%)</title><rect x="242.9" y="1859.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.07%)</title><rect x="242.9" y="1843.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.07%)</title><rect x="242.9" y="1827.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="245.9" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.14%)</title><rect x="243.7" y="1971.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="246.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.14%)</title><rect x="243.7" y="1955.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.14%)</title><rect x="243.7" y="1939.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.7" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="243.7" y="1923.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.7" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="243.7" y="1907.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.07%)</title><rect x="244.5" y="1923.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="247.5" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="244.5" y="1907.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="247.5" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="244.5" y="1891.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="247.5" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="244.5" y="1875.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="247.5" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.07%)</title><rect x="244.5" y="1859.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="247.5" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.07%)</title><rect x="244.5" y="1843.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="247.5" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="244.5" y="1827.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/Thread.run (683 samples, 47.46%)</title><rect x="245.3" y="2035.0" width="560.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.3" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (683 samples, 47.46%)</title><rect x="245.3" y="2019.0" width="560.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.3" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (683 samples, 47.46%)</title><rect x="245.3" y="2003.0" width="560.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="248.3" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.run (436 samples, 30.30%)</title><rect x="246.2" y="1987.0" width="357.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.2" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorU..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (436 samples, 30.30%)</title><rect x="246.2" y="1971.0" width="357.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.2" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorU..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (436 samples, 30.30%)</title><rect x="246.2" y="1955.0" width="357.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="249.2" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorU..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (430 samples, 29.88%)</title><rect x="246.2" y="1939.0" width="352.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.2" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPi..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.14%)</title><rect x="250.3" y="1923.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="253.3" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (136 samples, 9.45%)</title><rect x="251.9" y="1923.0" width="111.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="254.9" y="1934.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (136 samples, 9.45%)</title><rect x="251.9" y="1907.0" width="111.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="254.9" y="1918.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (136 samples, 9.45%)</title><rect x="251.9" y="1891.0" width="111.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="254.9" y="1902.0">com/linecorp/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="251.9" y="1875.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="254.9" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="251.9" y="1859.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="254.9" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="251.9" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="254.9" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="251.9" y="1827.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="254.9" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="251.9" y="1811.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="254.9" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="251.9" y="1795.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="254.9" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (135 samples, 9.38%)</title><rect x="252.7" y="1875.0" width="110.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="255.7" y="1886.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (135 samples, 9.38%)</title><rect x="252.7" y="1859.0" width="110.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.7" y="1870.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (135 samples, 9.38%)</title><rect x="252.7" y="1843.0" width="110.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.7" y="1854.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (46 samples, 3.20%)</title><rect x="252.7" y="1827.0" width="37.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.7" y="1838.0">com..</text>
</g>
<g>
<title>__clock_gettime (11 samples, 0.76%)</title><rect x="259.3" y="1811.0" width="9.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="262.3" y="1822.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.63%)</title><rect x="260.9" y="1795.0" width="7.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="263.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (8 samples, 0.56%)</title><rect x="268.3" y="1811.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="271.3" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (7 samples, 0.49%)</title><rect x="269.1" y="1795.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (7 samples, 0.49%)</title><rect x="269.1" y="1779.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="272.1" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.49%)</title><rect x="269.1" y="1763.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="272.1" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (7 samples, 0.49%)</title><rect x="269.1" y="1747.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.1" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 0.49%)</title><rect x="269.1" y="1731.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="272.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (19 samples, 1.32%)</title><rect x="274.9" y="1811.0" width="15.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (17 samples, 1.18%)</title><rect x="274.9" y="1795.0" width="13.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="277.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (5 samples, 0.35%)</title><rect x="284.7" y="1779.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (5 samples, 0.35%)</title><rect x="284.7" y="1763.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="287.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (5 samples, 0.35%)</title><rect x="284.7" y="1747.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="287.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.14%)</title><rect x="288.8" y="1795.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="291.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (85 samples, 5.91%)</title><rect x="290.4" y="1827.0" width="69.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="293.4" y="1838.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.14%)</title><rect x="292.9" y="1811.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (2 samples, 0.14%)</title><rect x="294.5" y="1811.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.14%)</title><rect x="296.2" y="1811.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="299.2" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="297.0" y="1795.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="300.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (11 samples, 0.76%)</title><rect x="297.8" y="1811.0" width="9.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="300.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.76%)</title><rect x="297.8" y="1795.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="300.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (8 samples, 0.56%)</title><rect x="300.3" y="1779.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="303.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (6 samples, 0.42%)</title><rect x="301.9" y="1763.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="304.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.14%)</title><rect x="305.2" y="1747.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="308.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.21%)</title><rect x="306.8" y="1811.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="309.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.21%)</title><rect x="306.8" y="1795.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="309.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (58 samples, 4.03%)</title><rect x="309.3" y="1811.0" width="47.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="312.3" y="1822.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.25%)</title><rect x="312.6" y="1795.0" width="14.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="315.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.14%)</title><rect x="312.6" y="1779.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="315.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.14%)</title><rect x="312.6" y="1763.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="315.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.14%)</title><rect x="312.6" y="1747.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="315.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (16 samples, 1.11%)</title><rect x="314.2" y="1779.0" width="13.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="317.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.07%)</title><rect x="327.3" y="1795.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="330.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (35 samples, 2.43%)</title><rect x="328.2" y="1795.0" width="28.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="331.2" y="1806.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (35 samples, 2.43%)</title><rect x="328.2" y="1779.0" width="28.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="331.2" y="1790.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (34 samples, 2.36%)</title><rect x="329.0" y="1763.0" width="27.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="332.0" y="1774.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.49%)</title><rect x="331.4" y="1747.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="334.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.07%)</title><rect x="331.4" y="1731.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="334.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.28%)</title><rect x="332.3" y="1731.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="335.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.28%)</title><rect x="332.3" y="1715.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="335.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.28%)</title><rect x="332.3" y="1699.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="335.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.14%)</title><rect x="333.9" y="1683.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.9" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.14%)</title><rect x="335.5" y="1731.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="338.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.14%)</title><rect x="335.5" y="1715.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="338.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="336.4" y="1699.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="339.4" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (9 samples, 0.63%)</title><rect x="337.2" y="1747.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="340.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (9 samples, 0.63%)</title><rect x="337.2" y="1731.0" width="7.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="340.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (9 samples, 0.63%)</title><rect x="337.2" y="1715.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="340.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (9 samples, 0.63%)</title><rect x="337.2" y="1699.0" width="7.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="340.2" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (9 samples, 0.63%)</title><rect x="337.2" y="1683.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="340.2" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.07%)</title><rect x="344.6" y="1747.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="347.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.07%)</title><rect x="344.6" y="1731.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="347.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.07%)</title><rect x="344.6" y="1715.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="347.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.07%)</title><rect x="344.6" y="1699.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="347.6" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.07%)</title><rect x="344.6" y="1683.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="347.6" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.07%)</title><rect x="344.6" y="1667.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="347.6" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor4.newInstance (1 samples, 0.07%)</title><rect x="344.6" y="1651.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="347.6" y="1662.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="344.6" y="1635.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="347.6" y="1646.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="344.6" y="1619.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="347.6" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (8 samples, 0.56%)</title><rect x="345.4" y="1747.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="348.4" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.56%)</title><rect x="345.4" y="1731.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="348.4" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.56%)</title><rect x="345.4" y="1715.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="348.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (6 samples, 0.42%)</title><rect x="351.9" y="1747.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="354.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (6 samples, 0.42%)</title><rect x="351.9" y="1731.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="354.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.07%)</title><rect x="356.9" y="1811.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="359.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.14%)</title><rect x="357.7" y="1811.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="360.7" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.07%)</title><rect x="359.3" y="1811.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="362.3" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.07%)</title><rect x="359.3" y="1795.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="362.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 0.28%)</title><rect x="360.1" y="1827.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="363.1" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.07%)</title><rect x="360.1" y="1811.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="363.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.21%)</title><rect x="361.0" y="1811.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="364.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 0.21%)</title><rect x="361.0" y="1795.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="364.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.21%)</title><rect x="361.0" y="1779.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="364.0" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.21%)</title><rect x="361.0" y="1763.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="364.0" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (262 samples, 18.21%)</title><rect x="363.4" y="1923.0" width="214.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="366.4" y="1934.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (53 samples, 3.68%)</title><rect x="363.4" y="1907.0" width="43.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="366.4" y="1918.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (49 samples, 3.41%)</title><rect x="366.7" y="1891.0" width="40.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="369.7" y="1902.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (49 samples, 3.41%)</title><rect x="366.7" y="1875.0" width="40.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="369.7" y="1886.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.35%)</title><rect x="368.3" y="1859.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="371.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.35%)</title><rect x="368.3" y="1843.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="371.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.35%)</title><rect x="368.3" y="1827.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="371.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.35%)</title><rect x="368.3" y="1811.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="371.3" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="372.4" y="1859.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="375.4" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="372.4" y="1843.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="375.4" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="372.4" y="1827.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="375.4" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.07%)</title><rect x="372.4" y="1811.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="375.4" y="1822.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (41 samples, 2.85%)</title><rect x="373.3" y="1859.0" width="33.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="376.3" y="1870.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (16 samples, 1.11%)</title><rect x="393.8" y="1843.0" width="13.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="396.8" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (16 samples, 1.11%)</title><rect x="393.8" y="1827.0" width="13.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="396.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.21%)</title><rect x="402.8" y="1811.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="405.8" y="1822.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.14%)</title><rect x="405.2" y="1811.0" width="1.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="408.2" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.42%)</title><rect x="406.9" y="1907.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="409.9" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.42%)</title><rect x="406.9" y="1891.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="409.9" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.42%)</title><rect x="406.9" y="1875.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="409.9" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (147 samples, 10.22%)</title><rect x="411.8" y="1907.0" width="120.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="414.8" y="1918.0">com/linecorp/de..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="412.6" y="1891.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="415.6" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="412.6" y="1875.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="415.6" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="412.6" y="1859.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="415.6" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="412.6" y="1843.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="415.6" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="412.6" y="1827.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="415.6" y="1838.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="413.4" y="1891.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="416.4" y="1902.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="413.4" y="1875.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="416.4" y="1886.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.35%)</title><rect x="414.3" y="1891.0" width="4.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="417.3" y="1902.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.35%)</title><rect x="414.3" y="1875.0" width="4.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="417.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (139 samples, 9.66%)</title><rect x="418.4" y="1891.0" width="113.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="421.4" y="1902.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (35 samples, 2.43%)</title><rect x="427.4" y="1875.0" width="28.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="430.4" y="1886.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (33 samples, 2.29%)</title><rect x="427.4" y="1859.0" width="27.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="430.4" y="1870.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (33 samples, 2.29%)</title><rect x="427.4" y="1843.0" width="27.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="430.4" y="1854.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (19 samples, 1.32%)</title><rect x="427.4" y="1827.0" width="15.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="430.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (19 samples, 1.32%)</title><rect x="427.4" y="1811.0" width="15.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="430.4" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (19 samples, 1.32%)</title><rect x="427.4" y="1795.0" width="15.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="430.4" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (10 samples, 0.69%)</title><rect x="430.7" y="1779.0" width="8.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="433.7" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.21%)</title><rect x="431.5" y="1763.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="434.5" y="1774.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.14%)</title><rect x="431.5" y="1747.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="434.5" y="1758.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="432.3" y="1731.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="435.3" y="1742.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="433.1" y="1747.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="436.1" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.07%)</title><rect x="433.1" y="1731.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="436.1" y="1742.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.07%)</title><rect x="433.1" y="1715.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="436.1" y="1726.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.07%)</title><rect x="433.9" y="1763.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="436.9" y="1774.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.35%)</title><rect x="434.8" y="1763.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="437.8" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.28%)</title><rect x="434.8" y="1747.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="437.8" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="434.8" y="1731.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="437.8" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="435.6" y="1731.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="438.6" y="1742.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="436.4" y="1731.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="439.4" y="1742.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.07%)</title><rect x="436.4" y="1715.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="439.4" y="1726.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="437.2" y="1731.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="440.2" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="438.0" y="1747.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="441.0" y="1758.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.35%)</title><rect x="438.9" y="1779.0" width="4.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="441.9" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (14 samples, 0.97%)</title><rect x="443.0" y="1827.0" width="11.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="446.0" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.28%)</title><rect x="451.2" y="1811.0" width="3.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="454.2" y="1822.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.14%)</title><rect x="454.4" y="1859.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="457.4" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="454.4" y="1843.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="457.4" y="1854.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="454.4" y="1827.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="457.4" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="454.4" y="1811.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="457.4" y="1822.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.07%)</title><rect x="454.4" y="1795.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="457.4" y="1806.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.07%)</title><rect x="455.3" y="1843.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="458.3" y="1854.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.07%)</title><rect x="455.3" y="1827.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="458.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (9 samples, 0.63%)</title><rect x="456.1" y="1875.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="459.1" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (4 samples, 0.28%)</title><rect x="456.1" y="1859.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="459.1" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (4 samples, 0.28%)</title><rect x="456.1" y="1843.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="459.1" y="1854.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.35%)</title><rect x="459.4" y="1859.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="462.4" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.35%)</title><rect x="459.4" y="1843.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="462.4" y="1854.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="463.5" y="1875.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="466.5" y="1886.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="464.3" y="1875.0" width="1.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="467.3" y="1886.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (81 samples, 5.63%)</title><rect x="465.9" y="1875.0" width="66.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="468.9" y="1886.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (78 samples, 5.42%)</title><rect x="468.4" y="1859.0" width="63.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="471.4" y="1870.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.42%)</title><rect x="468.4" y="1843.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="471.4" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.42%)</title><rect x="468.4" y="1827.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="471.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.42%)</title><rect x="468.4" y="1811.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="471.4" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.42%)</title><rect x="468.4" y="1795.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="471.4" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (72 samples, 5.00%)</title><rect x="473.3" y="1843.0" width="59.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="476.3" y="1854.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (68 samples, 4.73%)</title><rect x="476.6" y="1827.0" width="55.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="479.6" y="1838.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (44 samples, 3.06%)</title><rect x="496.3" y="1811.0" width="36.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="499.3" y="1822.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (7 samples, 0.49%)</title><rect x="514.3" y="1795.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="517.3" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 0.76%)</title><rect x="520.0" y="1795.0" width="9.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="523.0" y="1806.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.28%)</title><rect x="529.1" y="1795.0" width="3.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="532.1" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (34 samples, 2.36%)</title><rect x="532.3" y="1907.0" width="27.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="535.3" y="1918.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (34 samples, 2.36%)</title><rect x="532.3" y="1891.0" width="27.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="535.3" y="1902.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/911397161.process (21 samples, 1.46%)</title><rect x="532.3" y="1875.0" width="17.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="535.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (21 samples, 1.46%)</title><rect x="532.3" y="1859.0" width="17.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="535.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (16 samples, 1.11%)</title><rect x="533.2" y="1843.0" width="13.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="536.2" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="534.8" y="1827.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="537.8" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="534.8" y="1811.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="537.8" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.07%)</title><rect x="534.8" y="1795.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="537.8" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.07%)</title><rect x="534.8" y="1779.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="537.8" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.07%)</title><rect x="534.8" y="1763.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="537.8" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (7 samples, 0.49%)</title><rect x="535.6" y="1827.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="538.6" y="1838.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="536.4" y="1811.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="539.4" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.35%)</title><rect x="537.3" y="1811.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="540.3" y="1822.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.35%)</title><rect x="537.3" y="1795.0" width="4.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="540.3" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.42%)</title><rect x="541.4" y="1827.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="544.4" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (4 samples, 0.28%)</title><rect x="546.3" y="1843.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="549.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.14%)</title><rect x="547.9" y="1827.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="550.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="548.7" y="1811.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="551.7" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="548.7" y="1795.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="551.7" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.21%)</title><rect x="549.6" y="1875.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="552.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.21%)</title><rect x="549.6" y="1859.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="552.6" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.49%)</title><rect x="552.0" y="1875.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="555.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.35%)</title><rect x="553.7" y="1859.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="556.7" y="1870.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.21%)</title><rect x="554.5" y="1843.0" width="2.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="557.5" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.07%)</title><rect x="556.9" y="1843.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="559.9" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="557.8" y="1875.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="560.8" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="557.8" y="1859.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="560.8" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.14%)</title><rect x="558.6" y="1875.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="561.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.07%)</title><rect x="559.4" y="1859.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="562.4" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.07%)</title><rect x="559.4" y="1843.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="562.4" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="559.4" y="1827.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="562.4" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="559.4" y="1811.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="562.4" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="559.4" y="1795.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="562.4" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 1.53%)</title><rect x="560.2" y="1907.0" width="18.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="563.2" y="1918.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.21%)</title><rect x="565.1" y="1891.0" width="2.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="568.1" y="1902.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.21%)</title><rect x="565.1" y="1875.0" width="2.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="568.1" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 0.90%)</title><rect x="567.6" y="1891.0" width="10.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="570.6" y="1902.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.35%)</title><rect x="570.9" y="1875.0" width="4.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="573.9" y="1886.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.28%)</title><rect x="571.7" y="1859.0" width="3.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="574.7" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.21%)</title><rect x="575.0" y="1875.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="578.0" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/1308674145.accept (3 samples, 0.21%)</title><rect x="575.0" y="1859.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="578.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (3 samples, 0.21%)</title><rect x="575.0" y="1843.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="578.0" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/498704266.complete (3 samples, 0.21%)</title><rect x="575.0" y="1827.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="578.0" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (3 samples, 0.21%)</title><rect x="575.0" y="1811.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="578.0" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (3 samples, 0.21%)</title><rect x="575.0" y="1795.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="578.0" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 0.21%)</title><rect x="575.0" y="1779.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="578.0" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 0.21%)</title><rect x="575.0" y="1763.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="578.0" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.21%)</title><rect x="575.0" y="1747.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="578.0" y="1758.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.21%)</title><rect x="575.0" y="1731.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="578.0" y="1742.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="577.4" y="1875.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="580.4" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.11%)</title><rect x="578.3" y="1923.0" width="13.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="581.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (15 samples, 1.04%)</title><rect x="579.1" y="1907.0" width="12.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="582.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (15 samples, 1.04%)</title><rect x="579.1" y="1891.0" width="12.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="582.1" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/654837509.accept (1 samples, 0.07%)</title><rect x="579.1" y="1875.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="582.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.07%)</title><rect x="579.1" y="1859.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="582.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="579.1" y="1843.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="582.1" y="1854.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="579.1" y="1827.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="582.1" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="579.1" y="1811.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="582.1" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="579.1" y="1795.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="582.1" y="1806.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="579.1" y="1779.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="582.1" y="1790.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.07%)</title><rect x="579.1" y="1763.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="582.1" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/1308674145.accept (14 samples, 0.97%)</title><rect x="579.9" y="1875.0" width="11.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="582.9" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (14 samples, 0.97%)</title><rect x="579.9" y="1859.0" width="11.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="582.9" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/498704266.complete (14 samples, 0.97%)</title><rect x="579.9" y="1843.0" width="11.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="582.9" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (14 samples, 0.97%)</title><rect x="579.9" y="1827.0" width="11.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="582.9" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (14 samples, 0.97%)</title><rect x="579.9" y="1811.0" width="11.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="582.9" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 0.97%)</title><rect x="579.9" y="1795.0" width="11.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="582.9" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 0.97%)</title><rect x="579.9" y="1779.0" width="11.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="582.9" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (14 samples, 0.97%)</title><rect x="579.9" y="1763.0" width="11.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="582.9" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (14 samples, 0.97%)</title><rect x="579.9" y="1747.0" width="11.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="582.9" y="1758.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.63%)</title><rect x="591.4" y="1923.0" width="7.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="594.4" y="1934.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.63%)</title><rect x="591.4" y="1907.0" width="7.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="594.4" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (6 samples, 0.42%)</title><rect x="598.8" y="1939.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="601.8" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.21%)</title><rect x="601.2" y="1923.0" width="2.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="604.2" y="1934.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="602.1" y="1907.0" width="1.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="605.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.28%)</title><rect x="603.7" y="1987.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="606.7" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.28%)</title><rect x="603.7" y="1971.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="606.7" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.28%)</title><rect x="603.7" y="1955.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="606.7" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.28%)</title><rect x="603.7" y="1939.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="606.7" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.run (1 samples, 0.07%)</title><rect x="606.2" y="1923.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="609.2" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (242 samples, 16.82%)</title><rect x="607.0" y="1987.0" width="198.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="610.0" y="1998.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (241 samples, 16.75%)</title><rect x="607.8" y="1971.0" width="197.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="610.8" y="1982.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (216 samples, 15.01%)</title><rect x="609.4" y="1955.0" width="177.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="612.4" y="1966.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (38 samples, 2.64%)</title><rect x="617.6" y="1939.0" width="31.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="620.6" y="1950.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 0.28%)</title><rect x="648.8" y="1939.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="651.8" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.28%)</title><rect x="648.8" y="1923.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="651.8" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.28%)</title><rect x="648.8" y="1907.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="651.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.28%)</title><rect x="648.8" y="1891.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="651.8" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (163 samples, 11.33%)</title><rect x="652.1" y="1939.0" width="133.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="655.1" y="1950.0">java/util/concurr..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (163 samples, 11.33%)</title><rect x="652.1" y="1923.0" width="133.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="655.1" y="1934.0">sun/misc/Unsafe.p..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="655.4" y="1907.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="658.4" y="1918.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.07%)</title><rect x="656.2" y="1907.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="659.2" y="1918.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="657.0" y="1907.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="660.0" y="1918.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.07%)</title><rect x="657.8" y="1907.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="660.8" y="1918.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.21%)</title><rect x="658.6" y="1907.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="661.6" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (147 samples, 10.22%)</title><rect x="661.1" y="1907.0" width="120.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="664.1" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>Parker::park(bool, long) (26 samples, 1.81%)</title><rect x="666.0" y="1891.0" width="21.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="669.0" y="1902.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (12 samples, 0.83%)</title><rect x="674.2" y="1875.0" width="9.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="677.2" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.28%)</title><rect x="675.9" y="1859.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="678.9" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.14%)</title><rect x="677.5" y="1843.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="680.5" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.14%)</title><rect x="679.1" y="1859.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="682.1" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (4 samples, 0.28%)</title><rect x="680.8" y="1859.0" width="3.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="683.8" y="1870.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.28%)</title><rect x="684.1" y="1875.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="687.1" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.14%)</title><rect x="687.3" y="1891.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="690.3" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.14%)</title><rect x="689.0" y="1891.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="692.0" y="1902.0"></text>
</g>
<g>
<title>_L_cond_lock_847 (1 samples, 0.07%)</title><rect x="690.6" y="1891.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="693.6" y="1902.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.07%)</title><rect x="691.4" y="1891.0" width="0.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="694.4" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.49%)</title><rect x="692.3" y="1891.0" width="5.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="695.3" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (35 samples, 2.43%)</title><rect x="698.0" y="1891.0" width="28.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="701.0" y="1902.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (44 samples, 3.06%)</title><rect x="726.7" y="1891.0" width="36.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="729.7" y="1902.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (6 samples, 0.42%)</title><rect x="762.8" y="1891.0" width="4.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="765.8" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.28%)</title><rect x="767.7" y="1891.0" width="3.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="770.7" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.14%)</title><rect x="771.0" y="1891.0" width="1.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="774.0" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.21%)</title><rect x="772.6" y="1891.0" width="2.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="775.6" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.07%)</title><rect x="775.1" y="1891.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="778.1" y="1902.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="775.9" y="1891.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="778.9" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.07%)</title><rect x="776.7" y="1891.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="779.7" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.14%)</title><rect x="777.5" y="1891.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="780.5" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.14%)</title><rect x="779.2" y="1891.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="782.2" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="780.8" y="1891.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="783.8" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.14%)</title><rect x="781.6" y="1907.0" width="1.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="784.6" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.14%)</title><rect x="783.3" y="1907.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="786.3" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="784.9" y="1907.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="787.9" y="1918.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.07%)</title><rect x="785.7" y="1939.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="788.7" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.07%)</title><rect x="786.6" y="1955.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="789.6" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.07%)</title><rect x="786.6" y="1939.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="789.6" y="1950.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.07%)</title><rect x="786.6" y="1923.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="789.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.07%)</title><rect x="786.6" y="1907.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="789.6" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (22 samples, 1.53%)</title><rect x="787.4" y="1955.0" width="18.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="790.4" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (22 samples, 1.53%)</title><rect x="787.4" y="1939.0" width="18.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="790.4" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (22 samples, 1.53%)</title><rect x="787.4" y="1923.0" width="18.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="790.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (22 samples, 1.53%)</title><rect x="787.4" y="1907.0" width="18.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="790.4" y="1918.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.07%)</title><rect x="805.4" y="2035.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="808.4" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="806.2" y="2035.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="809.2" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="806.2" y="2019.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="809.2" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="806.2" y="2003.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="809.2" y="2014.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.isEmpty (1 samples, 0.07%)</title><rect x="806.2" y="1987.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="809.2" y="1998.0"></text>
</g>
<g>
<title>start_thread (467 samples, 32.45%)</title><rect x="807.1" y="2035.0" width="382.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="810.1" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (467 samples, 32.45%)</title><rect x="807.1" y="2019.0" width="382.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="810.1" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (30 samples, 2.08%)</title><rect x="807.1" y="2003.0" width="24.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="810.1" y="2014.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (13 samples, 0.90%)</title><rect x="807.1" y="1987.0" width="10.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="810.1" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (13 samples, 0.90%)</title><rect x="807.1" y="1971.0" width="10.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="810.1" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (5 samples, 0.35%)</title><rect x="807.9" y="1955.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="810.9" y="1966.0"></text>
</g>
<g>
<title>SpinPause (7 samples, 0.49%)</title><rect x="812.0" y="1955.0" width="5.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="815.0" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (17 samples, 1.18%)</title><rect x="817.7" y="1987.0" width="14.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="820.7" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.49%)</title><rect x="817.7" y="1971.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="820.7" y="1982.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.07%)</title><rect x="817.7" y="1955.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="820.7" y="1966.0"></text>
</g>
<g>
<title>Klass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.07%)</title><rect x="817.7" y="1939.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="820.7" y="1950.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.42%)</title><rect x="818.5" y="1955.0" width="5.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="821.5" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.42%)</title><rect x="823.5" y="1971.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="826.5" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.21%)</title><rect x="824.3" y="1955.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="827.3" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.14%)</title><rect x="824.3" y="1939.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="827.3" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.14%)</title><rect x="824.3" y="1923.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="827.3" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.07%)</title><rect x="824.3" y="1907.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="827.3" y="1918.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="825.1" y="1907.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="828.1" y="1918.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.07%)</title><rect x="825.1" y="1891.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="828.1" y="1902.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="825.9" y="1939.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="828.9" y="1950.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="825.9" y="1923.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="828.9" y="1934.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.07%)</title><rect x="825.9" y="1907.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="828.9" y="1918.0"></text>
</g>
<g>
<title>HeapRegion::add_strong_code_root(nmethod*) (1 samples, 0.07%)</title><rect x="825.9" y="1891.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="828.9" y="1902.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.14%)</title><rect x="826.7" y="1955.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="829.7" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.14%)</title><rect x="826.7" y="1939.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="829.7" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.28%)</title><rect x="828.4" y="1971.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="831.4" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.28%)</title><rect x="828.4" y="1955.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="831.4" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.28%)</title><rect x="828.4" y="1939.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="831.4" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.28%)</title><rect x="828.4" y="1923.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="831.4" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.28%)</title><rect x="828.4" y="1907.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="831.4" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.28%)</title><rect x="828.4" y="1891.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="831.4" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.14%)</title><rect x="830.0" y="1875.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="833.0" y="1886.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.07%)</title><rect x="830.8" y="1859.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="833.8" y="1870.0"></text>
</g>
<g>
<title>JavaThread::run() (435 samples, 30.23%)</title><rect x="831.7" y="2003.0" width="356.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="834.7" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (435 samples, 30.23%)</title><rect x="831.7" y="1987.0" width="356.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="834.7" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (434 samples, 30.16%)</title><rect x="831.7" y="1971.0" width="355.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="834.7" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (434 samples, 30.16%)</title><rect x="831.7" y="1955.0" width="355.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="834.7" y="1966.0">CompileBroker::invoke_compiler_on_method(Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (433 samples, 30.09%)</title><rect x="831.7" y="1939.0" width="355.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="834.7" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (433 samples, 30.09%)</title><rect x="831.7" y="1923.0" width="355.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="834.7" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*,..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.07%)</title><rect x="831.7" y="1907.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="834.7" y="1918.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.07%)</title><rect x="831.7" y="1891.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="834.7" y="1902.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="831.7" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="834.7" y="1886.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="831.7" y="1859.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="834.7" y="1870.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="831.7" y="1843.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="834.7" y="1854.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="831.7" y="1827.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="834.7" y="1838.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="831.7" y="1811.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="834.7" y="1822.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="831.7" y="1795.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="834.7" y="1806.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="831.7" y="1779.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="834.7" y="1790.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="831.7" y="1763.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="834.7" y="1774.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="831.7" y="1747.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="834.7" y="1758.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="831.7" y="1731.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="834.7" y="1742.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="831.7" y="1715.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="834.7" y="1726.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="831.7" y="1699.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="834.7" y="1710.0"></text>
</g>
<g>
<title>Reflection::verify_class_access(Klass*, Klass*, bool) (1 samples, 0.07%)</title><rect x="831.7" y="1683.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="834.7" y="1694.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (155 samples, 10.77%)</title><rect x="832.5" y="1907.0" width="127.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="835.5" y="1918.0">Compile::Code_Ge..</text>
</g>
<g>
<title>Compile::Output() (7 samples, 0.49%)</title><rect x="832.5" y="1891.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="835.5" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (4 samples, 0.28%)</title><rect x="832.5" y="1875.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="835.5" y="1886.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.21%)</title><rect x="835.8" y="1875.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="838.8" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (3 samples, 0.21%)</title><rect x="835.8" y="1859.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="838.8" y="1870.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.14%)</title><rect x="836.6" y="1843.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="839.6" y="1854.0"></text>
</g>
<g>
<title>membar_volatileNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.07%)</title><rect x="837.4" y="1827.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="840.4" y="1838.0"></text>
</g>
<g>
<title>Assembler::lock() (1 samples, 0.07%)</title><rect x="837.4" y="1811.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="840.4" y="1822.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (9 samples, 0.63%)</title><rect x="838.2" y="1891.0" width="7.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="841.2" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (6 samples, 0.42%)</title><rect x="839.0" y="1875.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="842.0" y="1886.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="839.0" y="1859.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="842.0" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (5 samples, 0.35%)</title><rect x="839.9" y="1859.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="842.9" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (5 samples, 0.35%)</title><rect x="839.9" y="1843.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="842.9" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.14%)</title><rect x="844.0" y="1875.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="847.0" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.14%)</title><rect x="844.0" y="1859.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="847.0" y="1870.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.07%)</title><rect x="845.6" y="1891.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="848.6" y="1902.0"></text>
</g>
<g>
<title>Matcher::match() (14 samples, 0.97%)</title><rect x="846.4" y="1891.0" width="11.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="849.4" y="1902.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.07%)</title><rect x="846.4" y="1875.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="849.4" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (13 samples, 0.90%)</title><rect x="847.2" y="1875.0" width="10.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="850.2" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (8 samples, 0.56%)</title><rect x="850.5" y="1859.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="853.5" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.07%)</title><rect x="857.1" y="1859.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="860.1" y="1870.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.07%)</title><rect x="857.9" y="1891.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="860.9" y="1902.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.07%)</title><rect x="857.9" y="1875.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="860.9" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (7 samples, 0.49%)</title><rect x="858.7" y="1891.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="861.7" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.07%)</title><rect x="858.7" y="1875.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="861.7" y="1886.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.07%)</title><rect x="858.7" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="861.7" y="1870.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.07%)</title><rect x="858.7" y="1843.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="861.7" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 0.42%)</title><rect x="859.5" y="1875.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="862.5" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.07%)</title><rect x="860.4" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="863.4" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (4 samples, 0.28%)</title><rect x="861.2" y="1859.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="864.2" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.14%)</title><rect x="862.0" y="1843.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="865.0" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.07%)</title><rect x="863.6" y="1843.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="866.6" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (116 samples, 8.06%)</title><rect x="864.5" y="1891.0" width="95.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="867.5" y="1902.0">PhaseChaiti..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="864.5" y="1875.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="867.5" y="1886.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (2 samples, 0.14%)</title><rect x="865.3" y="1875.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="868.3" y="1886.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.07%)</title><rect x="866.9" y="1875.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="869.9" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.14%)</title><rect x="867.7" y="1875.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="870.7" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (7 samples, 0.49%)</title><rect x="869.4" y="1875.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="872.4" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="871.8" y="1859.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="874.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.21%)</title><rect x="872.7" y="1859.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="875.7" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="874.3" y="1843.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="877.3" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (9 samples, 0.63%)</title><rect x="875.1" y="1875.0" width="7.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="878.1" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="875.9" y="1859.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="878.9" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="876.8" y="1859.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="879.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (6 samples, 0.42%)</title><rect x="877.6" y="1859.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="880.6" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.35%)</title><rect x="878.4" y="1843.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="881.4" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (18 samples, 1.25%)</title><rect x="882.5" y="1875.0" width="14.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="885.5" y="1886.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="894.0" y="1859.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="897.0" y="1870.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.07%)</title><rect x="894.8" y="1859.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="897.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.07%)</title><rect x="895.6" y="1859.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="898.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.07%)</title><rect x="895.6" y="1843.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="898.6" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.07%)</title><rect x="896.4" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="899.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.07%)</title><rect x="896.4" y="1843.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="899.4" y="1854.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="896.4" y="1827.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="899.4" y="1838.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="896.4" y="1811.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="899.4" y="1822.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (19 samples, 1.32%)</title><rect x="897.3" y="1875.0" width="15.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="900.3" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.07%)</title><rect x="901.4" y="1859.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="904.4" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="902.2" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="905.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (11 samples, 0.76%)</title><rect x="903.0" y="1859.0" width="9.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="906.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.35%)</title><rect x="907.9" y="1843.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="910.9" y="1854.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="912.0" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="915.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.49%)</title><rect x="912.8" y="1875.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="915.8" y="1886.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="916.9" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="919.9" y="1870.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.07%)</title><rect x="917.8" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="920.8" y="1870.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="917.8" y="1843.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="920.8" y="1854.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="917.8" y="1827.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="920.8" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (4 samples, 0.28%)</title><rect x="918.6" y="1875.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="921.6" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.07%)</title><rect x="921.0" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="924.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (9 samples, 0.63%)</title><rect x="921.9" y="1875.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="924.9" y="1886.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.07%)</title><rect x="922.7" y="1859.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="925.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.21%)</title><rect x="923.5" y="1859.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="926.5" y="1870.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (3 samples, 0.21%)</title><rect x="926.0" y="1859.0" width="2.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="929.0" y="1870.0"></text>
</g>
<g>
<title>rRegLOper::type() const (1 samples, 0.07%)</title><rect x="928.4" y="1859.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="931.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (2 samples, 0.14%)</title><rect x="929.2" y="1875.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="932.2" y="1886.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="930.1" y="1859.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="933.1" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (14 samples, 0.97%)</title><rect x="930.9" y="1875.0" width="11.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="933.9" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.07%)</title><rect x="930.9" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="933.9" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.07%)</title><rect x="930.9" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="933.9" y="1854.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (13 samples, 0.90%)</title><rect x="931.7" y="1859.0" width="10.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="934.7" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (3 samples, 0.21%)</title><rect x="931.7" y="1843.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="934.7" y="1854.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (10 samples, 0.69%)</title><rect x="934.2" y="1843.0" width="8.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="937.2" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.21%)</title><rect x="934.2" y="1827.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="937.2" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (5 samples, 0.35%)</title><rect x="936.6" y="1827.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="939.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.14%)</title><rect x="940.7" y="1827.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="943.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 0.28%)</title><rect x="942.4" y="1875.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="945.4" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="944.8" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="947.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.07%)</title><rect x="945.6" y="1875.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="948.6" y="1886.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="945.6" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="948.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.07%)</title><rect x="946.5" y="1875.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="949.5" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="946.5" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="949.5" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (15 samples, 1.04%)</title><rect x="947.3" y="1875.0" width="12.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="950.3" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (3 samples, 0.21%)</title><rect x="953.0" y="1859.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="956.0" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (5 samples, 0.35%)</title><rect x="955.5" y="1859.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="958.5" y="1870.0"></text>
</g>
<g>
<title>Compile::Optimize() (261 samples, 18.14%)</title><rect x="959.6" y="1907.0" width="214.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="962.6" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.14%)</title><rect x="959.6" y="1891.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="962.6" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.14%)</title><rect x="959.6" y="1875.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="962.6" y="1886.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (2 samples, 0.14%)</title><rect x="961.2" y="1891.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="964.2" y="1902.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (2 samples, 0.14%)</title><rect x="961.2" y="1875.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="964.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.07%)</title><rect x="961.2" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="964.2" y="1870.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="962.0" y="1859.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="965.0" y="1870.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="962.0" y="1843.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="965.0" y="1854.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="962.9" y="1891.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="965.9" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (7 samples, 0.49%)</title><rect x="963.7" y="1891.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="966.7" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (7 samples, 0.49%)</title><rect x="963.7" y="1875.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="966.7" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="964.5" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="967.5" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (5 samples, 0.35%)</title><rect x="965.3" y="1859.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="968.3" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="967.0" y="1843.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="970.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="967.0" y="1827.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="970.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="967.0" y="1811.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="970.0" y="1822.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="967.0" y="1795.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="970.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="967.8" y="1811.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="970.8" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="967.8" y="1795.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="970.8" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="967.8" y="1779.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="970.8" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="967.8" y="1763.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="970.8" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="967.8" y="1747.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="970.8" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="967.8" y="1731.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="970.8" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="967.8" y="1715.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="970.8" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="967.8" y="1699.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="970.8" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="967.8" y="1683.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="970.8" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="967.8" y="1667.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="970.8" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="967.8" y="1651.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="970.8" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="967.8" y="1635.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="970.8" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="967.8" y="1619.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="970.8" y="1630.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="967.8" y="1603.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="970.8" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="968.6" y="1619.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="971.6" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="968.6" y="1603.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="971.6" y="1614.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (4 samples, 0.28%)</title><rect x="969.4" y="1891.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="972.4" y="1902.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="971.9" y="1875.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="974.9" y="1886.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="971.9" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.9" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="971.9" y="1843.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="974.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (213 samples, 14.80%)</title><rect x="972.7" y="1891.0" width="174.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="975.7" y="1902.0">PhaseIdealLoop::build_..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.07%)</title><rect x="972.7" y="1875.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="975.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (6 samples, 0.42%)</title><rect x="973.5" y="1875.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="976.5" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.14%)</title><rect x="976.8" y="1859.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="979.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 0.63%)</title><rect x="978.4" y="1875.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="981.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="982.5" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="985.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.07%)</title><rect x="983.4" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="986.4" y="1870.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (2 samples, 0.14%)</title><rect x="984.2" y="1859.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="987.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (183 samples, 12.72%)</title><rect x="985.8" y="1875.0" width="150.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="988.8" y="1886.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (174 samples, 12.09%)</title><rect x="991.6" y="1859.0" width="142.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="994.6" y="1870.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.07%)</title><rect x="993.2" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="996.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 0.35%)</title><rect x="994.0" y="1843.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="997.0" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (166 samples, 11.54%)</title><rect x="998.1" y="1843.0" width="136.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1001.1" y="1854.0">PhaseIdealLoop::g..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1102.3" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1105.3" y="1838.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1102.3" y="1811.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1105.3" y="1822.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.07%)</title><rect x="1102.3" y="1795.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1105.3" y="1806.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.21%)</title><rect x="1103.1" y="1827.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1106.1" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.14%)</title><rect x="1103.9" y="1811.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.9" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (32 samples, 2.22%)</title><rect x="1105.5" y="1827.0" width="26.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.5" y="1838.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.21%)</title><rect x="1131.8" y="1827.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1134.8" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.14%)</title><rect x="1132.6" y="1811.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1135.6" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.07%)</title><rect x="1134.2" y="1859.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.2" y="1870.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1135.1" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.14%)</title><rect x="1135.9" y="1875.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (6 samples, 0.42%)</title><rect x="1137.5" y="1875.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.5" y="1886.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.07%)</title><rect x="1138.3" y="1859.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1141.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.07%)</title><rect x="1139.2" y="1859.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.21%)</title><rect x="1140.0" y="1859.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca(Node*, Node*) const (1 samples, 0.07%)</title><rect x="1140.0" y="1843.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.0" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_internal(Node*, Node*) const (1 samples, 0.07%)</title><rect x="1140.0" y="1827.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (2 samples, 0.14%)</title><rect x="1140.8" y="1843.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.8" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1140.8" y="1827.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.8" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.07%)</title><rect x="1141.6" y="1827.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.35%)</title><rect x="1142.4" y="1875.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.35%)</title><rect x="1142.4" y="1859.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1145.4" y="1870.0"></text>
</g>
<g>
<title>ConvI2LNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1143.3" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.3" y="1854.0"></text>
</g>
<g>
<title>TypeLong::make(long, long, int) (1 samples, 0.07%)</title><rect x="1143.3" y="1827.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1144.1" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.1" y="1854.0"></text>
</g>
<g>
<title>CProjNode::hash() const (1 samples, 0.07%)</title><rect x="1144.1" y="1827.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.1" y="1838.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1144.9" y="1843.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.9" y="1854.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1144.9" y="1827.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.9" y="1838.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1145.7" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.7" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1145.7" y="1827.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.7" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1145.7" y="1811.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.7" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1145.7" y="1795.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.7" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1145.7" y="1779.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.7" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1145.7" y="1763.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.7" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1145.7" y="1747.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.7" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1145.7" y="1731.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.7" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1145.7" y="1715.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.7" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1145.7" y="1699.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.7" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1145.7" y="1683.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.7" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1145.7" y="1667.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.7" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1145.7" y="1651.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.7" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1145.7" y="1635.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.7" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1145.7" y="1619.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.7" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1145.7" y="1603.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.7" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1145.7" y="1587.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.7" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1145.7" y="1571.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.7" y="1582.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1145.7" y="1555.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.7" y="1566.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1145.7" y="1539.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.7" y="1550.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.07%)</title><rect x="1146.5" y="1875.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1147.4" y="1891.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.4" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1147.4" y="1875.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (29 samples, 2.02%)</title><rect x="1148.2" y="1891.0" width="23.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.2" y="1902.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (27 samples, 1.88%)</title><rect x="1149.8" y="1875.0" width="22.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.8" y="1886.0">P..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (3 samples, 0.21%)</title><rect x="1150.6" y="1859.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::register_new_node_with_optimizer(Node*, Node*) (2 samples, 0.14%)</title><rect x="1150.6" y="1843.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.6" y="1854.0"></text>
</g>
<g>
<title>ProjNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1151.5" y="1827.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.5" y="1838.0"></text>
</g>
<g>
<title>IfNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1151.5" y="1811.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.5" y="1822.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1152.3" y="1843.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.3" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1152.3" y="1827.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.3" y="1838.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1152.3" y="1811.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.3" y="1822.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (4 samples, 0.28%)</title><rect x="1153.1" y="1859.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.1" y="1870.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1153.1" y="1843.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.1" y="1854.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (2 samples, 0.14%)</title><rect x="1153.1" y="1827.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.1" y="1838.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (2 samples, 0.14%)</title><rect x="1153.1" y="1811.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.1" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (2 samples, 0.14%)</title><rect x="1153.1" y="1795.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.1" y="1806.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1153.1" y="1779.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.1" y="1790.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1153.1" y="1763.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.1" y="1774.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1153.1" y="1747.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.1" y="1758.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.07%)</title><rect x="1153.1" y="1731.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.1" y="1742.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.07%)</title><rect x="1153.1" y="1715.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.1" y="1726.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1153.9" y="1779.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.9" y="1790.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1153.9" y="1763.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.9" y="1774.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1153.9" y="1747.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.9" y="1758.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.14%)</title><rect x="1154.7" y="1843.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.7" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.14%)</title><rect x="1154.7" y="1827.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.7" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.14%)</title><rect x="1154.7" y="1811.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.7" y="1822.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1156.4" y="1859.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.4" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.14%)</title><rect x="1157.2" y="1859.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.2" y="1870.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1158.0" y="1843.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.0" y="1854.0"></text>
</g>
<g>
<title>Type::hash() const (1 samples, 0.07%)</title><rect x="1158.0" y="1827.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1158.8" y="1859.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (7 samples, 0.49%)</title><rect x="1159.7" y="1859.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (3 samples, 0.21%)</title><rect x="1162.9" y="1843.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.9" y="1854.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (3 samples, 0.21%)</title><rect x="1162.9" y="1827.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.9" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1165.4" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1165.4" y="1843.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.4" y="1854.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1165.4" y="1827.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.4" y="1838.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1166.2" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.2" y="1870.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.07%)</title><rect x="1166.2" y="1843.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.2" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1167.0" y="1859.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1167.0" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.0" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1167.0" y="1827.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.0" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.07%)</title><rect x="1167.0" y="1811.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.0" y="1822.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1167.9" y="1843.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.9" y="1854.0"></text>
</g>
<g>
<title>RootNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1168.7" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.7" y="1870.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1169.5" y="1859.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.5" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1169.5" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.5" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.5" y="1827.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.5" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.5" y="1811.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.5" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.5" y="1795.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.5" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.5" y="1779.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.5" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.5" y="1763.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.5" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.5" y="1747.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.5" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.5" y="1731.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.5" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.5" y="1715.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.5" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.5" y="1699.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.5" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.5" y="1683.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.5" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.5" y="1667.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.5" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.5" y="1651.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.5" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.5" y="1635.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.5" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.5" y="1619.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.5" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.5" y="1603.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.5" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.5" y="1587.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.5" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.5" y="1571.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.5" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.5" y="1555.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.5" y="1566.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.5" y="1539.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.5" y="1550.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1169.5" y="1523.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.5" y="1534.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1169.5" y="1507.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.5" y="1518.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="1170.3" y="1859.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.3" y="1870.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.07%)</title><rect x="1170.3" y="1843.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.3" y="1854.0"></text>
</g>
<g>
<title>URShiftLNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1171.1" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.1" y="1870.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1171.1" y="1843.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.1" y="1854.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1171.1" y="1827.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.1" y="1838.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.07%)</title><rect x="1171.1" y="1811.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.1" y="1822.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1171.1" y="1795.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1174.1" y="1806.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.07%)</title><rect x="1172.0" y="1891.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.0" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1172.0" y="1875.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1172.0" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1172.0" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.0" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1172.0" y="1827.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.0" y="1838.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1172.0" y="1811.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.0" y="1822.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1172.8" y="1891.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1175.8" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 0.97%)</title><rect x="1173.6" y="1907.0" width="11.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.6" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 0.97%)</title><rect x="1173.6" y="1891.0" width="11.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.6" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.97%)</title><rect x="1173.6" y="1875.0" width="11.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.6" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.97%)</title><rect x="1173.6" y="1859.0" width="11.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.6" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 0.97%)</title><rect x="1173.6" y="1843.0" width="11.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.6" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (14 samples, 0.97%)</title><rect x="1173.6" y="1827.0" width="11.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.6" y="1838.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1173.6" y="1811.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.6" y="1822.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1173.6" y="1795.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.6" y="1806.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1173.6" y="1779.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.6" y="1790.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1173.6" y="1763.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.6" y="1774.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1173.6" y="1747.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.6" y="1758.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1173.6" y="1731.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.6" y="1742.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1173.6" y="1715.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.6" y="1726.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1173.6" y="1699.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.6" y="1710.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1173.6" y="1683.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.6" y="1694.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1173.6" y="1667.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.6" y="1678.0"></text>
</g>
<g>
<title>ConstantPool::has_appendix_at_if_loaded(constantPoolHandle, int) (1 samples, 0.07%)</title><rect x="1174.4" y="1811.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.4" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.63%)</title><rect x="1175.2" y="1811.0" width="7.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.2" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.63%)</title><rect x="1175.2" y="1795.0" width="7.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.2" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.63%)</title><rect x="1175.2" y="1779.0" width="7.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.2" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.63%)</title><rect x="1175.2" y="1763.0" width="7.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.2" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.63%)</title><rect x="1175.2" y="1747.0" width="7.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.2" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.56%)</title><rect x="1175.2" y="1731.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.2" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.49%)</title><rect x="1175.2" y="1715.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.2" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.49%)</title><rect x="1175.2" y="1699.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.2" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.49%)</title><rect x="1175.2" y="1683.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.2" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.49%)</title><rect x="1175.2" y="1667.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.2" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.49%)</title><rect x="1175.2" y="1651.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.2" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.42%)</title><rect x="1175.2" y="1635.0" width="5.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.2" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.42%)</title><rect x="1175.2" y="1619.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.2" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.42%)</title><rect x="1175.2" y="1603.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.2" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.35%)</title><rect x="1175.2" y="1587.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.2" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.35%)</title><rect x="1175.2" y="1571.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.2" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.35%)</title><rect x="1175.2" y="1555.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.2" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.28%)</title><rect x="1175.2" y="1539.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.2" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1175.2" y="1523.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.2" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1175.2" y="1507.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1175.2" y="1491.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.2" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1175.2" y="1475.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.2" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1175.2" y="1459.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1175.2" y="1443.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.2" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1175.2" y="1427.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.2" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1175.2" y="1411.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.2" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1175.2" y="1395.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.2" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1175.2" y="1379.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.2" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1175.2" y="1363.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.2" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1175.2" y="1347.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.2" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1175.2" y="1331.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.2" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1175.2" y="1315.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.2" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1175.2" y="1299.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.2" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1175.2" y="1283.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.2" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1175.2" y="1267.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.2" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1175.2" y="1251.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.2" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1175.2" y="1235.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1175.2" y="1219.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.2" y="1230.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.07%)</title><rect x="1175.2" y="1203.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.2" y="1214.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1175.2" y="1187.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.2" y="1198.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.07%)</title><rect x="1175.2" y="1171.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.2" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.1" y="1203.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.1" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.1" y="1187.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.1" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.1" y="1171.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.1" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.1" y="1155.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.1" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.1" y="1139.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.1" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.1" y="1123.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.1" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.1" y="1107.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.1" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.1" y="1091.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.1" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.1" y="1075.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.1" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.1" y="1059.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.1" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.1" y="1043.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.1" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.1" y="1027.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.1" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.1" y="1011.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.1" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.1" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.1" y="1006.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.07%)</title><rect x="1176.1" y="979.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.1" y="990.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.07%)</title><rect x="1176.1" y="963.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.1" y="974.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.07%)</title><rect x="1176.1" y="947.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.1" y="958.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1176.1" y="931.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.1" y="942.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1176.1" y="915.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.1" y="926.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1176.1" y="899.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.1" y="910.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.9" y="1427.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.9" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.9" y="1411.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.9" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.9" y="1395.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.9" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.9" y="1379.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.9" y="1363.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.9" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.9" y="1331.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.9" y="1342.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1176.9" y="1315.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.9" y="1326.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1176.9" y="1299.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.9" y="1310.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1176.9" y="1283.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.9" y="1294.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1176.9" y="1267.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.9" y="1278.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1176.9" y="1251.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.9" y="1262.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1176.9" y="1235.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.9" y="1246.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1176.9" y="1219.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.9" y="1230.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1176.9" y="1203.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.9" y="1214.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1176.9" y="1187.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.9" y="1198.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1176.9" y="1171.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.9" y="1182.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1176.9" y="1155.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="1166.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1176.9" y="1139.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.9" y="1150.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1176.9" y="1123.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.9" y="1134.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1176.9" y="1107.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.9" y="1118.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1176.9" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.9" y="1102.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.07%)</title><rect x="1176.9" y="1075.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.9" y="1086.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.07%)</title><rect x="1176.9" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.9" y="1070.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1176.9" y="1043.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.9" y="1054.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1176.9" y="1027.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="1038.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1176.9" y="1011.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.9" y="1022.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1176.9" y="995.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="1006.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.7" y="1523.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.7" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.7" y="1507.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.7" y="1491.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.7" y="1475.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.7" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.7" y="1459.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.7" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.7" y="1443.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.7" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.7" y="1427.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.7" y="1411.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.7" y="1395.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.7" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.7" y="1379.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.7" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.7" y="1363.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.7" y="1347.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.7" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.7" y="1331.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.7" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.7" y="1315.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.7" y="1299.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.7" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.7" y="1283.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.7" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.7" y="1267.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.7" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.7" y="1251.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.7" y="1262.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1177.7" y="1235.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.7" y="1246.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1177.7" y="1219.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.7" y="1230.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1177.7" y="1203.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.7" y="1214.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1177.7" y="1187.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.7" y="1198.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.07%)</title><rect x="1177.7" y="1171.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.7" y="1182.0"></text>
</g>
<g>
<title>AddNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1177.7" y="1155.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.07%)</title><rect x="1178.5" y="1539.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.5" y="1550.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.07%)</title><rect x="1178.5" y="1523.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.5" y="1534.0"></text>
</g>
<g>
<title>GraphKit::maybe_cast_profiled_receiver(Node*, ciKlass*, ciKlass*, bool) (1 samples, 0.07%)</title><rect x="1178.5" y="1507.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.5" y="1518.0"></text>
</g>
<g>
<title>GraphKit::profile_has_unique_klass() (1 samples, 0.07%)</title><rect x="1178.5" y="1491.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.5" y="1502.0"></text>
</g>
<g>
<title>CounterData::is_CounterData() const (1 samples, 0.07%)</title><rect x="1178.5" y="1475.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.5" y="1486.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.07%)</title><rect x="1179.3" y="1587.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.3" y="1598.0"></text>
</g>
<g>
<title>MergeMemNode::set_base_memory(Node*) (1 samples, 0.07%)</title><rect x="1179.3" y="1571.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.3" y="1582.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1180.2" y="1635.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.2" y="1646.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1180.2" y="1619.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.2" y="1630.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1180.2" y="1603.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.2" y="1614.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1180.2" y="1587.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.2" y="1598.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1180.2" y="1571.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.2" y="1582.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1180.2" y="1555.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.2" y="1566.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1180.2" y="1539.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.2" y="1550.0"></text>
</g>
<g>
<title>TypeInstPtr::xdual() const (1 samples, 0.07%)</title><rect x="1180.2" y="1523.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.2" y="1534.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1180.2" y="1507.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.2" y="1518.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.07%)</title><rect x="1180.2" y="1491.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.2" y="1502.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.0" y="1715.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.0" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.0" y="1699.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.0" y="1683.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.0" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.0" y="1667.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.0" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.0" y="1651.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.0" y="1635.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.0" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.0" y="1619.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.0" y="1603.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.0" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.0" y="1587.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.0" y="1571.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.0" y="1555.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.0" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.0" y="1539.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.0" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.0" y="1523.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.0" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.0" y="1507.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.0" y="1491.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.0" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.0" y="1475.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.0" y="1459.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.0" y="1443.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.0" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.0" y="1427.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.0" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.0" y="1411.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.0" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.0" y="1395.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.0" y="1379.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.0" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.0" y="1363.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.0" y="1347.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.0" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.0" y="1331.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.0" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.0" y="1315.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.0" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.0" y="1299.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.0" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.0" y="1283.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.0" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.0" y="1267.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.0" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.0" y="1251.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.0" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.0" y="1235.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.0" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.0" y="1219.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.0" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.0" y="1203.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.0" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.0" y="1187.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.0" y="1171.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.0" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.0" y="1155.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.0" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.0" y="1139.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.0" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.0" y="1123.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.0" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.0" y="1107.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.0" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.0" y="1091.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.0" y="1075.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.0" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.0" y="1059.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.0" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.0" y="1043.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.0" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.0" y="1027.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.0" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.0" y="1011.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.0" y="995.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.0" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.0" y="979.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.0" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.0" y="963.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.0" y="974.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.07%)</title><rect x="1181.0" y="947.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1181.8" y="1731.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.8" y="1742.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1181.8" y="1715.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.8" y="1726.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.07%)</title><rect x="1181.8" y="1699.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="1710.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1182.6" y="1811.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.6" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1182.6" y="1795.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.6" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1182.6" y="1779.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.6" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1182.6" y="1763.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.6" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1182.6" y="1747.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.6" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1182.6" y="1731.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.6" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1182.6" y="1715.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.6" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1182.6" y="1699.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.6" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1182.6" y="1683.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.6" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1182.6" y="1667.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.6" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1182.6" y="1651.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.6" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1182.6" y="1635.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.6" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1182.6" y="1619.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.6" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1182.6" y="1603.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.6" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1182.6" y="1587.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.6" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1182.6" y="1571.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.6" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1182.6" y="1555.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.6" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1182.6" y="1539.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.6" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1182.6" y="1523.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.6" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1182.6" y="1507.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1182.6" y="1491.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.6" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1182.6" y="1475.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.6" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1182.6" y="1459.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.6" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1182.6" y="1443.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1182.6" y="1427.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.6" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1182.6" y="1411.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.6" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1182.6" y="1395.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.6" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1182.6" y="1379.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.6" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1182.6" y="1363.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.6" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1182.6" y="1347.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.6" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1182.6" y="1331.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.6" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1182.6" y="1315.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.6" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1182.6" y="1299.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.6" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1182.6" y="1283.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.6" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1182.6" y="1267.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.6" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1182.6" y="1251.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.6" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1182.6" y="1235.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.6" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1182.6" y="1219.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.6" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1182.6" y="1203.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.6" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1182.6" y="1187.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1182.6" y="1171.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.6" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1182.6" y="1155.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.6" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1182.6" y="1139.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.6" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1182.6" y="1123.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1182.6" y="1107.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.6" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1182.6" y="1091.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.6" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1182.6" y="1075.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.6" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1182.6" y="1059.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.6" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1182.6" y="1043.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.6" y="1054.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1182.6" y="1027.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.6" y="1038.0"></text>
</g>
<g>
<title>InlineTree::find_subtree_from_root(InlineTree*, JVMState*, ciMethod*) (1 samples, 0.07%)</title><rect x="1182.6" y="1011.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.6" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.4" y="1027.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.4" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.4" y="1011.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.4" y="1022.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.07%)</title><rect x="1183.4" y="995.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.4" y="1006.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1183.4" y="979.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.4" y="990.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1183.4" y="963.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.4" y="974.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.07%)</title><rect x="1183.4" y="947.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.4" y="958.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.3" y="1507.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.3" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.3" y="1491.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.3" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.3" y="1475.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.3" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.3" y="1459.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.3" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.3" y="1443.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.3" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.3" y="1427.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.3" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.3" y="1411.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.3" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.3" y="1395.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.3" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.3" y="1379.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.3" y="1363.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.3" y="1347.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.3" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.3" y="1331.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.3" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.3" y="1315.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.3" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.3" y="1299.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.3" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.3" y="1283.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.3" y="1267.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.3" y="1251.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.3" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.3" y="1235.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.3" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.3" y="1219.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.3" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.3" y="1203.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.3" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.3" y="1187.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.3" y="1171.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.3" y="1155.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.3" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.3" y="1139.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.3" y="1150.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1184.3" y="1123.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.3" y="1134.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1184.3" y="1107.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.3" y="1118.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1184.3" y="1091.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="1102.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1184.3" y="1075.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.3" y="1086.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1184.3" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.3" y="1070.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1184.3" y="1043.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.3" y="1054.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1184.3" y="1027.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.3" y="1038.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="1185.1" y="1907.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.1" y="1918.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1185.1" y="1891.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.1" y="1902.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.07%)</title><rect x="1185.9" y="1907.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.9" y="1918.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.07%)</title><rect x="1185.9" y="1891.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.9" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.07%)</title><rect x="1185.9" y="1875.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.9" y="1886.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.07%)</title><rect x="1186.7" y="1939.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.7" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.07%)</title><rect x="1186.7" y="1923.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.7" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.07%)</title><rect x="1186.7" y="1907.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.7" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.07%)</title><rect x="1186.7" y="1891.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.7" y="1902.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.07%)</title><rect x="1186.7" y="1875.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.7" y="1886.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.07%)</title><rect x="1186.7" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.7" y="1870.0"></text>
</g>
<g>
<title>LinearScan::resolve_exception_handlers() (1 samples, 0.07%)</title><rect x="1186.7" y="1843.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.7" y="1854.0"></text>
</g>
<g>
<title>LinearScan::resolve_exception_entry(BlockBegin*, MoveResolver&amp;) (1 samples, 0.07%)</title><rect x="1186.7" y="1827.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.7" y="1838.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1187.5" y="1971.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.5" y="1982.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1187.5" y="1955.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.5" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1187.5" y="1939.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.5" y="1950.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1187.5" y="1923.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1190.5" y="1934.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.07%)</title><rect x="1187.5" y="1907.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.5" y="1918.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.07%)</title><rect x="1187.5" y="1891.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.5" y="1902.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.14%)</title><rect x="1188.4" y="2003.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.4" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.14%)</title><rect x="1188.4" y="1987.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.4" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.14%)</title><rect x="1188.4" y="1971.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.4" y="1982.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.07%)</title><rect x="1189.2" y="1955.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.2" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.07%)</title><rect x="1189.2" y="1939.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.2" y="1950.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1189.2" y="1923.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.2" y="1934.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1189.2" y="1907.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.2" y="1918.0"></text>
</g>
<g>
<title>StackFrameStream::StackFrameStream(JavaThread*, bool) (1 samples, 0.07%)</title><rect x="1189.2" y="1891.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.2" y="1902.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="1189.2" y="1875.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.2" y="1886.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="1189.2" y="1859.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.2" y="1870.0"></text>
</g>
</g>
</svg>
