<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="725"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="725"> </text>
<g id="frames">
<g>
<title>all (166 samples, 100.00%)</title><rect x="10.0" y="691.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="702.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (35 samples, 21.08%)</title><rect x="10.0" y="675.0" width="248.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="686.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.60%)</title><rect x="10.0" y="659.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.60%)</title><rect x="10.0" y="643.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.60%)</title><rect x="10.0" y="627.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.60%)</title><rect x="10.0" y="611.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.60%)</title><rect x="10.0" y="595.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.60%)</title><rect x="10.0" y="579.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.60%)</title><rect x="10.0" y="563.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.60%)</title><rect x="10.0" y="547.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.60%)</title><rect x="10.0" y="531.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.60%)</title><rect x="10.0" y="515.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.60%)</title><rect x="10.0" y="499.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.60%)</title><rect x="10.0" y="483.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.60%)</title><rect x="10.0" y="467.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.60%)</title><rect x="10.0" y="451.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.60%)</title><rect x="10.0" y="435.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.60%)</title><rect x="10.0" y="419.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.60%)</title><rect x="10.0" y="403.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.60%)</title><rect x="10.0" y="387.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.60%)</title><rect x="10.0" y="371.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.60%)</title><rect x="10.0" y="355.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (34 samples, 20.48%)</title><rect x="17.1" y="659.0" width="241.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.1" y="670.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (21 samples, 12.65%)</title><rect x="17.1" y="643.0" width="149.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.1" y="654.0">java/lang/Iterable...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/598853106.accept (19 samples, 11.45%)</title><rect x="17.1" y="627.0" width="135.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.1" y="638.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (19 samples, 11.45%)</title><rect x="17.1" y="611.0" width="135.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.1" y="622.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (14 samples, 8.43%)</title><rect x="24.2" y="595.0" width="99.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.2" y="606.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (14 samples, 8.43%)</title><rect x="24.2" y="579.0" width="99.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.2" y="590.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (14 samples, 8.43%)</title><rect x="24.2" y="563.0" width="99.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.2" y="574.0">com/linecorp..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/667447085.linkToTargetMethod (1 samples, 0.60%)</title><rect x="24.2" y="547.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="27.2" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.60%)</title><rect x="24.2" y="531.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.2" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/952734339.get$Lambda (1 samples, 0.60%)</title><rect x="24.2" y="515.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="27.2" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.60%)</title><rect x="24.2" y="499.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="27.2" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.60%)</title><rect x="24.2" y="483.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="27.2" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.60%)</title><rect x="24.2" y="467.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="27.2" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.60%)</title><rect x="24.2" y="451.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="27.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (13 samples, 7.83%)</title><rect x="31.3" y="547.0" width="92.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="34.3" y="558.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (13 samples, 7.83%)</title><rect x="31.3" y="531.0" width="92.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.3" y="542.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (13 samples, 7.83%)</title><rect x="31.3" y="515.0" width="92.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.3" y="526.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (11 samples, 6.63%)</title><rect x="31.3" y="499.0" width="78.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.3" y="510.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 1.81%)</title><rect x="31.3" y="483.0" width="21.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.3" y="494.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 1.81%)</title><rect x="31.3" y="467.0" width="21.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.3" y="478.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 1.81%)</title><rect x="31.3" y="451.0" width="21.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="34.3" y="462.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (3 samples, 1.81%)</title><rect x="31.3" y="435.0" width="21.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.3" y="446.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.60%)</title><rect x="52.7" y="483.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.60%)</title><rect x="52.7" y="467.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="55.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.60%)</title><rect x="52.7" y="451.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="55.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 4.22%)</title><rect x="59.8" y="483.0" width="49.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="62.8" y="494.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 4.22%)</title><rect x="59.8" y="467.0" width="49.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="62.8" y="478.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 4.22%)</title><rect x="59.8" y="451.0" width="49.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="62.8" y="462.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 4.22%)</title><rect x="59.8" y="435.0" width="49.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.8" y="446.0">java/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (7 samples, 4.22%)</title><rect x="59.8" y="419.0" width="49.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="62.8" y="430.0">sun/m..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.179] (1 samples, 0.60%)</title><rect x="59.8" y="403.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="62.8" y="414.0"></text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 3.61%)</title><rect x="66.9" y="403.0" width="42.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="69.9" y="414.0">Unsa..</text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 1.20%)</title><rect x="66.9" y="387.0" width="14.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="69.9" y="398.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.60%)</title><rect x="81.1" y="387.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="84.1" y="398.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 1.81%)</title><rect x="88.2" y="387.0" width="21.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="91.2" y="398.0">p..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.20%)</title><rect x="109.5" y="499.0" width="14.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="112.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.20%)</title><rect x="109.5" y="483.0" width="14.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="112.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 1.20%)</title><rect x="109.5" y="467.0" width="14.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="112.5" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.60%)</title><rect x="116.6" y="451.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="119.6" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 2.41%)</title><rect x="123.7" y="595.0" width="28.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="126.7" y="606.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.81%)</title><rect x="130.8" y="579.0" width="21.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="133.8" y="590.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.60%)</title><rect x="145.1" y="563.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="148.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.60%)</title><rect x="152.2" y="627.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="155.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.60%)</title><rect x="152.2" y="611.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="155.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.60%)</title><rect x="159.3" y="627.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="162.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.60%)</title><rect x="159.3" y="611.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="162.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.60%)</title><rect x="159.3" y="595.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="162.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.60%)</title><rect x="159.3" y="579.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="162.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 7.83%)</title><rect x="166.4" y="643.0" width="92.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="169.4" y="654.0">org/apache/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 7.83%)</title><rect x="166.4" y="627.0" width="92.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="169.4" y="638.0">org/apache/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 4.22%)</title><rect x="166.4" y="611.0" width="49.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="169.4" y="622.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 4.22%)</title><rect x="166.4" y="595.0" width="49.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="169.4" y="606.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (7 samples, 4.22%)</title><rect x="166.4" y="579.0" width="49.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="169.4" y="590.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 3.01%)</title><rect x="166.4" y="563.0" width="35.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="169.4" y="574.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 3.01%)</title><rect x="166.4" y="547.0" width="35.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="169.4" y="558.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.20%)</title><rect x="166.4" y="531.0" width="14.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="169.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.60%)</title><rect x="166.4" y="515.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="169.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.60%)</title><rect x="166.4" y="499.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="169.4" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.60%)</title><rect x="166.4" y="483.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="169.4" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.60%)</title><rect x="166.4" y="467.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="169.4" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.60%)</title><rect x="166.4" y="451.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="169.4" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.60%)</title><rect x="166.4" y="435.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="169.4" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.60%)</title><rect x="166.4" y="419.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="169.4" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.60%)</title><rect x="173.5" y="515.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="176.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.60%)</title><rect x="173.5" y="499.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="176.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 1.81%)</title><rect x="180.6" y="531.0" width="21.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="183.6" y="542.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (3 samples, 1.81%)</title><rect x="180.6" y="515.0" width="21.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="183.6" y="526.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 1.20%)</title><rect x="180.6" y="499.0" width="14.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="183.6" y="510.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 1.20%)</title><rect x="180.6" y="483.0" width="14.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="183.6" y="494.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.60%)</title><rect x="187.7" y="467.0" width="7.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="190.7" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.60%)</title><rect x="194.8" y="499.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="197.8" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.60%)</title><rect x="194.8" y="483.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="197.8" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.60%)</title><rect x="201.9" y="563.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.60%)</title><rect x="201.9" y="547.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="204.9" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.60%)</title><rect x="201.9" y="531.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="204.9" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.60%)</title><rect x="201.9" y="515.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.9" y="526.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.60%)</title><rect x="201.9" y="499.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.9" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.60%)</title><rect x="209.0" y="563.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="212.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.60%)</title><rect x="209.0" y="547.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="212.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.60%)</title><rect x="209.0" y="531.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="212.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.60%)</title><rect x="209.0" y="515.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="212.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.60%)</title><rect x="209.0" y="499.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="212.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.60%)</title><rect x="209.0" y="483.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="212.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (1 samples, 0.60%)</title><rect x="209.0" y="467.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="212.0" y="478.0"></text>
</g>
<g>
<title>java/lang/Math.min (1 samples, 0.60%)</title><rect x="209.0" y="451.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="212.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.60%)</title><rect x="216.1" y="611.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="219.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.60%)</title><rect x="216.1" y="595.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="219.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.60%)</title><rect x="216.1" y="579.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="219.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.60%)</title><rect x="216.1" y="563.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="219.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.60%)</title><rect x="216.1" y="547.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="219.1" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.60%)</title><rect x="216.1" y="531.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="219.1" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.60%)</title><rect x="216.1" y="515.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.1" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.60%)</title><rect x="216.1" y="499.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="219.1" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.60%)</title><rect x="216.1" y="483.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="219.1" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.60%)</title><rect x="216.1" y="467.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="219.1" y="478.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.60%)</title><rect x="216.1" y="451.0" width="7.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="219.1" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 2.41%)</title><rect x="223.3" y="611.0" width="28.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="226.3" y="622.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 1.81%)</title><rect x="223.3" y="595.0" width="21.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.3" y="606.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.60%)</title><rect x="223.3" y="579.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="226.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.60%)</title><rect x="223.3" y="563.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="226.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.60%)</title><rect x="223.3" y="547.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="226.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getInt (1 samples, 0.60%)</title><rect x="223.3" y="531.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.3" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.60%)</title><rect x="223.3" y="515.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="226.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getFieldOrDefault (1 samples, 0.60%)</title><rect x="223.3" y="499.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="226.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 1.20%)</title><rect x="230.4" y="579.0" width="14.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.60%)</title><rect x="230.4" y="563.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="233.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$IdleExpiryManager.update (1 samples, 0.60%)</title><rect x="230.4" y="547.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.maybeRegisterConnectionMetrics (1 samples, 0.60%)</title><rect x="230.4" y="531.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="233.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.60%)</title><rect x="237.5" y="563.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="240.5" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.60%)</title><rect x="237.5" y="547.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="240.5" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.60%)</title><rect x="237.5" y="531.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.5" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.60%)</title><rect x="237.5" y="515.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="240.5" y="526.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.60%)</title><rect x="237.5" y="499.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.5" y="510.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.60%)</title><rect x="237.5" y="483.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="240.5" y="494.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.60%)</title><rect x="237.5" y="467.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="240.5" y="478.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.60%)</title><rect x="237.5" y="451.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="240.5" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.60%)</title><rect x="244.6" y="595.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.pollDelayMs (1 samples, 0.60%)</title><rect x="244.6" y="579.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.pollDelayMs (1 samples, 0.60%)</title><rect x="244.6" y="563.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="247.6" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.connectionDelay (1 samples, 0.60%)</title><rect x="244.6" y="547.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="247.6" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.60%)</title><rect x="251.7" y="611.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="254.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.60%)</title><rect x="251.7" y="595.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="254.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.60%)</title><rect x="251.7" y="579.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="254.7" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.60%)</title><rect x="251.7" y="563.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="254.7" y="574.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.60%)</title><rect x="251.7" y="547.0" width="7.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="254.7" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.run (58 samples, 34.94%)</title><rect x="258.8" y="675.0" width="412.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="261.8" y="686.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (58 samples, 34.94%)</title><rect x="258.8" y="659.0" width="412.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="261.8" y="670.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (58 samples, 34.94%)</title><rect x="258.8" y="643.0" width="412.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.8" y="654.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/952734339.run (38 samples, 22.89%)</title><rect x="287.2" y="627.0" width="270.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="290.2" y="638.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (38 samples, 22.89%)</title><rect x="287.2" y="611.0" width="270.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.2" y="622.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (38 samples, 22.89%)</title><rect x="287.2" y="595.0" width="270.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.2" y="606.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (38 samples, 22.89%)</title><rect x="287.2" y="579.0" width="270.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.2" y="590.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (12 samples, 7.23%)</title><rect x="294.3" y="563.0" width="85.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="297.3" y="574.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (12 samples, 7.23%)</title><rect x="294.3" y="547.0" width="85.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="297.3" y="558.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (12 samples, 7.23%)</title><rect x="294.3" y="531.0" width="85.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="297.3" y="542.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 7.23%)</title><rect x="294.3" y="515.0" width="85.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.3" y="526.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 7.23%)</title><rect x="294.3" y="499.0" width="85.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="297.3" y="510.0">com/lineco..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (12 samples, 7.23%)</title><rect x="294.3" y="483.0" width="85.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="297.3" y="494.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (5 samples, 3.01%)</title><rect x="294.3" y="467.0" width="35.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="297.3" y="478.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 3.01%)</title><rect x="294.3" y="451.0" width="35.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.3" y="462.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 3.01%)</title><rect x="294.3" y="435.0" width="35.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="297.3" y="446.0">com..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.81%)</title><rect x="308.6" y="419.0" width="21.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="311.6" y="430.0">_..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.60%)</title><rect x="322.8" y="403.0" width="7.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="325.8" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (6 samples, 3.61%)</title><rect x="329.9" y="467.0" width="42.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="332.9" y="478.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 1.20%)</title><rect x="329.9" y="451.0" width="14.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="332.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 1.20%)</title><rect x="329.9" y="435.0" width="14.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="332.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.60%)</title><rect x="344.1" y="451.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="347.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.60%)</title><rect x="344.1" y="435.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="347.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.60%)</title><rect x="344.1" y="419.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="347.1" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.60%)</title><rect x="344.1" y="403.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="347.1" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.60%)</title><rect x="344.1" y="387.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="347.1" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 1.81%)</title><rect x="351.2" y="451.0" width="21.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="354.2" y="462.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.81%)</title><rect x="351.2" y="435.0" width="21.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="354.2" y="446.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.81%)</title><rect x="351.2" y="419.0" width="21.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="354.2" y="430.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.81%)</title><rect x="351.2" y="403.0" width="21.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="354.2" y="414.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.81%)</title><rect x="351.2" y="387.0" width="21.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="354.2" y="398.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.60%)</title><rect x="365.4" y="371.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="368.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.60%)</title><rect x="365.4" y="355.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="368.4" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.60%)</title><rect x="365.4" y="339.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="368.4" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.60%)</title><rect x="365.4" y="323.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="368.4" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.60%)</title><rect x="365.4" y="307.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="368.4" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.60%)</title><rect x="365.4" y="291.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="368.4" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.60%)</title><rect x="365.4" y="275.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="368.4" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.60%)</title><rect x="372.5" y="467.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="375.5" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.60%)</title><rect x="372.5" y="451.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="375.5" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.60%)</title><rect x="372.5" y="435.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="375.5" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (1 samples, 0.60%)</title><rect x="372.5" y="419.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="375.5" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (24 samples, 14.46%)</title><rect x="379.6" y="563.0" width="170.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="382.6" y="574.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (3 samples, 1.81%)</title><rect x="379.6" y="547.0" width="21.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="382.6" y="558.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 1.81%)</title><rect x="379.6" y="531.0" width="21.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="382.6" y="542.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.81%)</title><rect x="379.6" y="515.0" width="21.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="382.6" y="526.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.60%)</title><rect x="379.6" y="499.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="382.6" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.60%)</title><rect x="379.6" y="483.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="382.6" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.60%)</title><rect x="379.6" y="467.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="382.6" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.60%)</title><rect x="379.6" y="451.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="382.6" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.60%)</title><rect x="379.6" y="435.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="382.6" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.60%)</title><rect x="386.7" y="499.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="389.7" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.60%)</title><rect x="393.9" y="499.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="396.9" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (12 samples, 7.23%)</title><rect x="401.0" y="547.0" width="85.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="404.0" y="558.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (12 samples, 7.23%)</title><rect x="401.0" y="531.0" width="85.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="404.0" y="542.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (5 samples, 3.01%)</title><rect x="401.0" y="515.0" width="35.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="404.0" y="526.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.81%)</title><rect x="408.1" y="499.0" width="21.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="411.1" y="510.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.81%)</title><rect x="408.1" y="483.0" width="21.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="411.1" y="494.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.81%)</title><rect x="408.1" y="467.0" width="21.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="411.1" y="478.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.81%)</title><rect x="408.1" y="451.0" width="21.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="411.1" y="462.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.60%)</title><rect x="422.3" y="435.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="425.3" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.60%)</title><rect x="422.3" y="419.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="425.3" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.60%)</title><rect x="422.3" y="403.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="425.3" y="414.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::end_reserve() (1 samples, 0.60%)</title><rect x="422.3" y="387.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="425.3" y="398.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.60%)</title><rect x="429.4" y="499.0" width="7.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="432.4" y="510.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 1.20%)</title><rect x="436.5" y="515.0" width="14.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="439.5" y="526.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.60%)</title><rect x="443.6" y="499.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="446.6" y="510.0"></text>
</g>
<g>
<title>java/lang/Long.stringSize (1 samples, 0.60%)</title><rect x="443.6" y="483.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="446.6" y="494.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 3.01%)</title><rect x="450.7" y="515.0" width="35.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="453.7" y="526.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 3.01%)</title><rect x="450.7" y="499.0" width="35.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="453.7" y="510.0">ch/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 3.01%)</title><rect x="450.7" y="483.0" width="35.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="453.7" y="494.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 2.41%)</title><rect x="457.8" y="467.0" width="28.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="460.8" y="478.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.60%)</title><rect x="479.2" y="451.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="482.2" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.60%)</title><rect x="479.2" y="435.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="482.2" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (7 samples, 4.22%)</title><rect x="486.3" y="547.0" width="49.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="489.3" y="558.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (6 samples, 3.61%)</title><rect x="493.4" y="531.0" width="42.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="496.4" y="542.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/701735847.process (2 samples, 1.20%)</title><rect x="493.4" y="515.0" width="14.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="496.4" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (2 samples, 1.20%)</title><rect x="493.4" y="499.0" width="14.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="496.4" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.60%)</title><rect x="493.4" y="483.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="496.4" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.60%)</title><rect x="493.4" y="467.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="496.4" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.60%)</title><rect x="500.5" y="483.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="503.5" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.60%)</title><rect x="500.5" y="467.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="503.5" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.60%)</title><rect x="500.5" y="451.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="503.5" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.60%)</title><rect x="500.5" y="435.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="503.5" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.60%)</title><rect x="507.6" y="515.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="510.6" y="526.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.60%)</title><rect x="507.6" y="499.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="510.6" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 1.20%)</title><rect x="514.7" y="515.0" width="14.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="517.7" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.60%)</title><rect x="521.8" y="499.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="524.8" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.60%)</title><rect x="521.8" y="483.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="524.8" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.60%)</title><rect x="528.9" y="515.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="531.9" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.60%)</title><rect x="528.9" y="499.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="531.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.20%)</title><rect x="536.0" y="547.0" width="14.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="539.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.20%)</title><rect x="536.0" y="531.0" width="14.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="539.0" y="542.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.20%)</title><rect x="536.0" y="515.0" width="14.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="539.0" y="526.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.20%)</title><rect x="536.0" y="499.0" width="14.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="539.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.60%)</title><rect x="550.2" y="563.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="553.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.60%)</title><rect x="550.2" y="547.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="553.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.60%)</title><rect x="550.2" y="531.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="553.2" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$279/781736058.accept (1 samples, 0.60%)</title><rect x="550.2" y="515.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="553.2" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.60%)</title><rect x="550.2" y="499.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="553.2" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.60%)</title><rect x="550.2" y="483.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="553.2" y="494.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.60%)</title><rect x="550.2" y="467.0" width="7.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="553.2" y="478.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.60%)</title><rect x="550.2" y="451.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="553.2" y="462.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 1.20%)</title><rect x="557.3" y="627.0" width="14.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="560.3" y="638.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 1.20%)</title><rect x="557.3" y="611.0" width="14.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="560.3" y="622.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.60%)</title><rect x="557.3" y="595.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="560.3" y="606.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.60%)</title><rect x="564.5" y="595.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="567.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (14 samples, 8.43%)</title><rect x="571.6" y="627.0" width="99.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="574.6" y="638.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (12 samples, 7.23%)</title><rect x="585.8" y="611.0" width="85.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="588.8" y="622.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (11 samples, 6.63%)</title><rect x="585.8" y="595.0" width="78.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="588.8" y="606.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 6.63%)</title><rect x="585.8" y="579.0" width="78.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="588.8" y="590.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (11 samples, 6.63%)</title><rect x="585.8" y="563.0" width="78.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="588.8" y="574.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Park (10 samples, 6.02%)</title><rect x="592.9" y="547.0" width="71.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="595.9" y="558.0">Unsafe_P..</text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.60%)</title><rect x="592.9" y="531.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="595.9" y="542.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.60%)</title><rect x="600.0" y="531.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="603.0" y="542.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.81%)</title><rect x="607.1" y="531.0" width="21.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="610.1" y="542.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 3.01%)</title><rect x="628.4" y="531.0" width="35.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="631.4" y="542.0">__p..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.60%)</title><rect x="664.0" y="595.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="667.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.60%)</title><rect x="664.0" y="579.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="667.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.60%)</title><rect x="664.0" y="563.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="667.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.60%)</title><rect x="664.0" y="547.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="667.0" y="558.0"></text>
</g>
<g>
<title>start_thread (73 samples, 43.98%)</title><rect x="671.1" y="675.0" width="518.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="674.1" y="686.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (73 samples, 43.98%)</title><rect x="671.1" y="659.0" width="518.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="674.1" y="670.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 6.63%)</title><rect x="671.1" y="643.0" width="78.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="674.1" y="654.0">GangWorke..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (11 samples, 6.63%)</title><rect x="671.1" y="627.0" width="78.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="674.1" y="638.0">G1ParTask..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 6.02%)</title><rect x="671.1" y="611.0" width="71.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="674.1" y="622.0">G1ParEva..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 1.81%)</title><rect x="671.1" y="595.0" width="21.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="674.1" y="606.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.60%)</title><rect x="678.2" y="579.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="681.2" y="590.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.60%)</title><rect x="685.3" y="579.0" width="7.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="688.3" y="590.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (5 samples, 3.01%)</title><rect x="692.4" y="595.0" width="35.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="695.4" y="606.0">Gen..</text>
</g>
<g>
<title>SpinPause (1 samples, 0.60%)</title><rect x="728.0" y="595.0" width="7.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="731.0" y="606.0"></text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.60%)</title><rect x="735.1" y="595.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="738.1" y="606.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.60%)</title><rect x="742.2" y="611.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="745.2" y="622.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.60%)</title><rect x="742.2" y="595.0" width="7.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="745.2" y="606.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.60%)</title><rect x="742.2" y="579.0" width="7.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="745.2" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.60%)</title><rect x="742.2" y="563.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="745.2" y="574.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.60%)</title><rect x="742.2" y="547.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="745.2" y="558.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.60%)</title><rect x="742.2" y="531.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="745.2" y="542.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.60%)</title><rect x="742.2" y="515.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="745.2" y="526.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.60%)</title><rect x="742.2" y="499.0" width="7.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="745.2" y="510.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (62 samples, 37.35%)</title><rect x="749.3" y="643.0" width="440.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="752.3" y="654.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (62 samples, 37.35%)</title><rect x="749.3" y="627.0" width="440.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="752.3" y="638.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (61 samples, 36.75%)</title><rect x="749.3" y="611.0" width="433.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="752.3" y="622.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (59 samples, 35.54%)</title><rect x="749.3" y="595.0" width="419.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="752.3" y="606.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (59 samples, 35.54%)</title><rect x="749.3" y="579.0" width="419.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="752.3" y="590.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, boo..</text>
</g>
<g>
<title>Compile::Code_Gen() (32 samples, 19.28%)</title><rect x="749.3" y="563.0" width="227.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="752.3" y="574.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 1.20%)</title><rect x="749.3" y="547.0" width="14.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="752.3" y="558.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 1.20%)</title><rect x="749.3" y="531.0" width="14.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="752.3" y="542.0"></text>
</g>
<g>
<title>MachNode::is_TrapBasedCheckNode() const (1 samples, 0.60%)</title><rect x="763.5" y="547.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="766.5" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.60%)</title><rect x="770.6" y="547.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="773.6" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.60%)</title><rect x="770.6" y="531.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="773.6" y="542.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.60%)</title><rect x="770.6" y="515.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="773.6" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.60%)</title><rect x="777.7" y="547.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="780.7" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.60%)</title><rect x="777.7" y="531.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="780.7" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.60%)</title><rect x="777.7" y="515.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="780.7" y="526.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.60%)</title><rect x="777.7" y="499.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="780.7" y="510.0"></text>
</g>
<g>
<title>MachTypeNode::bottom_type() const (1 samples, 0.60%)</title><rect x="777.7" y="483.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="780.7" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (27 samples, 16.27%)</title><rect x="784.8" y="547.0" width="191.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="787.8" y="558.0">PhaseChaitin::Register_Al..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.60%)</title><rect x="784.8" y="531.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="787.8" y="542.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.60%)</title><rect x="791.9" y="531.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="794.9" y="542.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 1.20%)</title><rect x="799.0" y="531.0" width="14.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="802.0" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 2.41%)</title><rect x="813.3" y="531.0" width="28.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="816.3" y="542.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.60%)</title><rect x="820.4" y="515.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="823.4" y="526.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 1.20%)</title><rect x="827.5" y="515.0" width="14.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="830.5" y="526.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.60%)</title><rect x="834.6" y="499.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="837.6" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.60%)</title><rect x="841.7" y="531.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="844.7" y="542.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.60%)</title><rect x="841.7" y="515.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="844.7" y="526.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.60%)</title><rect x="841.7" y="499.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="844.7" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 1.20%)</title><rect x="848.8" y="531.0" width="14.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="851.8" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.60%)</title><rect x="855.9" y="515.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="858.9" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.60%)</title><rect x="855.9" y="499.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="858.9" y="510.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.60%)</title><rect x="855.9" y="483.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="858.9" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.60%)</title><rect x="863.0" y="531.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="866.0" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.60%)</title><rect x="870.1" y="531.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="873.1" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (3 samples, 1.81%)</title><rect x="877.2" y="531.0" width="21.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="880.2" y="542.0">P..</text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 1.20%)</title><rect x="884.3" y="515.0" width="14.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="887.3" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.20%)</title><rect x="898.6" y="531.0" width="14.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="901.6" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.60%)</title><rect x="912.8" y="531.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="915.8" y="542.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 1.81%)</title><rect x="919.9" y="531.0" width="21.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="922.9" y="542.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.60%)</title><rect x="934.1" y="515.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="937.1" y="526.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.60%)</title><rect x="941.2" y="531.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="944.2" y="542.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.60%)</title><rect x="941.2" y="515.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="944.2" y="526.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 2.41%)</title><rect x="948.3" y="531.0" width="28.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="951.3" y="542.0">Ph..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.20%)</title><rect x="962.5" y="515.0" width="14.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="965.5" y="526.0"></text>
</g>
<g>
<title>Compile::Optimize() (20 samples, 12.05%)</title><rect x="976.7" y="563.0" width="142.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="979.7" y="574.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 1.20%)</title><rect x="976.7" y="547.0" width="14.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="979.7" y="558.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 1.20%)</title><rect x="976.7" y="531.0" width="14.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="979.7" y="542.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.60%)</title><rect x="991.0" y="547.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="994.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.60%)</title><rect x="998.1" y="547.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1001.1" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.60%)</title><rect x="998.1" y="531.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1001.1" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.60%)</title><rect x="998.1" y="515.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1001.1" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::add_local_var_and_edge(Node*, PointsToNode::EscapeState, Node*, Unique_Node_List*) [clone .isra.295] (1 samples, 0.60%)</title><rect x="998.1" y="499.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1001.1" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (14 samples, 8.43%)</title><rect x="1005.2" y="547.0" width="99.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1008.2" y="558.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.20%)</title><rect x="1005.2" y="531.0" width="14.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1008.2" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.81%)</title><rect x="1019.4" y="531.0" width="21.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1022.4" y="542.0">P..</text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.60%)</title><rect x="1033.6" y="515.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1036.6" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 2.41%)</title><rect x="1040.7" y="531.0" width="28.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1043.7" y="542.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 2.41%)</title><rect x="1040.7" y="515.0" width="28.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1043.7" y="526.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 1.20%)</title><rect x="1054.9" y="499.0" width="14.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1057.9" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.60%)</title><rect x="1069.2" y="531.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1072.2" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 2.41%)</title><rect x="1076.3" y="531.0" width="28.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1079.3" y="542.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 1.81%)</title><rect x="1083.4" y="515.0" width="21.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1086.4" y="526.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.60%)</title><rect x="1083.4" y="499.0" width="7.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1086.4" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.60%)</title><rect x="1090.5" y="499.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.5" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.60%)</title><rect x="1097.6" y="499.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1100.6" y="510.0"></text>
</g>
<g>
<title>CallLeafNode::has_only_g1_wb_pre_uses(Node*) (1 samples, 0.60%)</title><rect x="1097.6" y="483.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1100.6" y="494.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.20%)</title><rect x="1104.7" y="547.0" width="14.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1107.7" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.20%)</title><rect x="1104.7" y="531.0" width="14.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.7" y="542.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.60%)</title><rect x="1104.7" y="515.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1107.7" y="526.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.60%)</title><rect x="1104.7" y="499.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.7" y="510.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.60%)</title><rect x="1111.8" y="515.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1114.8" y="526.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.60%)</title><rect x="1111.8" y="499.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.8" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 3.61%)</title><rect x="1118.9" y="563.0" width="42.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1121.9" y="574.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 3.61%)</title><rect x="1118.9" y="547.0" width="42.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.9" y="558.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.61%)</title><rect x="1118.9" y="531.0" width="42.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1121.9" y="542.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.61%)</title><rect x="1118.9" y="515.0" width="42.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.9" y="526.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.61%)</title><rect x="1118.9" y="499.0" width="42.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1121.9" y="510.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.61%)</title><rect x="1118.9" y="483.0" width="42.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.9" y="494.0">Pars..</text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1118.9" y="467.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.9" y="478.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.60%)</title><rect x="1118.9" y="451.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.9" y="462.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.60%)</title><rect x="1118.9" y="435.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.9" y="446.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.60%)</title><rect x="1118.9" y="419.0" width="7.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1121.9" y="430.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.60%)</title><rect x="1118.9" y="403.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.9" y="414.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.60%)</title><rect x="1126.0" y="467.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.0" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.81%)</title><rect x="1133.1" y="467.0" width="21.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.1" y="478.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.81%)</title><rect x="1133.1" y="451.0" width="21.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.1" y="462.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.20%)</title><rect x="1133.1" y="435.0" width="14.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.20%)</title><rect x="1133.1" y="419.0" width="14.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.20%)</title><rect x="1133.1" y="403.0" width="14.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.20%)</title><rect x="1133.1" y="387.0" width="14.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.1" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.20%)</title><rect x="1133.1" y="371.0" width="14.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.1" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.20%)</title><rect x="1133.1" y="355.0" width="14.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.20%)</title><rect x="1133.1" y="339.0" width="14.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.20%)</title><rect x="1133.1" y="323.0" width="14.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.20%)</title><rect x="1133.1" y="307.0" width="14.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.60%)</title><rect x="1133.1" y="291.0" width="7.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1136.1" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1133.1" y="275.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.1" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.60%)</title><rect x="1133.1" y="259.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.60%)</title><rect x="1133.1" y="243.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.60%)</title><rect x="1133.1" y="227.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.60%)</title><rect x="1133.1" y="211.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.60%)</title><rect x="1133.1" y="195.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.1" y="206.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.60%)</title><rect x="1133.1" y="179.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.1" y="190.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.60%)</title><rect x="1133.1" y="163.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.1" y="174.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.60%)</title><rect x="1133.1" y="147.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.1" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.60%)</title><rect x="1133.1" y="131.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.1" y="142.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.60%)</title><rect x="1133.1" y="115.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.1" y="126.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.60%)</title><rect x="1133.1" y="99.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.1" y="110.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.60%)</title><rect x="1133.1" y="83.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.1" y="94.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.60%)</title><rect x="1133.1" y="67.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.1" y="78.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.60%)</title><rect x="1133.1" y="51.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.1" y="62.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.60%)</title><rect x="1133.1" y="35.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.1" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.60%)</title><rect x="1140.2" y="291.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.60%)</title><rect x="1140.2" y="275.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.2" y="286.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.60%)</title><rect x="1140.2" y="259.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.2" y="270.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.60%)</title><rect x="1140.2" y="243.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.2" y="254.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.60%)</title><rect x="1140.2" y="227.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.2" y="238.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.60%)</title><rect x="1140.2" y="211.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.2" y="222.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.60%)</title><rect x="1140.2" y="195.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.2" y="206.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.60%)</title><rect x="1140.2" y="179.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.2" y="190.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.60%)</title><rect x="1140.2" y="163.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.2" y="174.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.188] (1 samples, 0.60%)</title><rect x="1147.3" y="435.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.3" y="446.0"></text>
</g>
<g>
<title>CounterData::cell_count() const (1 samples, 0.60%)</title><rect x="1147.3" y="419.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.3" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1154.5" y="467.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.5" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1154.5" y="451.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.5" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.60%)</title><rect x="1154.5" y="435.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.60%)</title><rect x="1154.5" y="419.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.60%)</title><rect x="1154.5" y="403.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.60%)</title><rect x="1154.5" y="387.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.5" y="398.0"></text>
</g>
<g>
<title>PhaseTransform::makecon(Type const*) (1 samples, 0.60%)</title><rect x="1154.5" y="371.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.5" y="382.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.60%)</title><rect x="1161.6" y="563.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.6" y="574.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.60%)</title><rect x="1161.6" y="547.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.6" y="558.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.60%)</title><rect x="1161.6" y="531.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.6" y="542.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.60%)</title><rect x="1161.6" y="515.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.6" y="526.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.60%)</title><rect x="1161.6" y="499.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.6" y="510.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.20%)</title><rect x="1168.7" y="595.0" width="14.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.7" y="606.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.20%)</title><rect x="1168.7" y="579.0" width="14.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.7" y="590.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.20%)</title><rect x="1168.7" y="563.0" width="14.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.7" y="574.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.20%)</title><rect x="1168.7" y="547.0" width="14.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.7" y="558.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.60%)</title><rect x="1168.7" y="531.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.7" y="542.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.60%)</title><rect x="1168.7" y="515.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.7" y="526.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.60%)</title><rect x="1168.7" y="499.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.7" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.60%)</title><rect x="1168.7" y="483.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.7" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.60%)</title><rect x="1168.7" y="467.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.7" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.60%)</title><rect x="1168.7" y="451.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.7" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.60%)</title><rect x="1168.7" y="435.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.7" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.60%)</title><rect x="1168.7" y="419.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.7" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.60%)</title><rect x="1168.7" y="403.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.7" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.60%)</title><rect x="1168.7" y="387.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.7" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.60%)</title><rect x="1168.7" y="371.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.7" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.60%)</title><rect x="1168.7" y="355.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.7" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::collect_args_for_profiling(Values*, ciMethod*, bool) (1 samples, 0.60%)</title><rect x="1168.7" y="339.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.7" y="350.0"></text>
</g>
<g>
<title>ProfileData::is_CallTypeData() const (1 samples, 0.60%)</title><rect x="1168.7" y="323.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.7" y="334.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.60%)</title><rect x="1175.8" y="531.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.8" y="542.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_exception_handler() (1 samples, 0.60%)</title><rect x="1175.8" y="515.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.8" y="526.0"></text>
</g>
<g>
<title>MacroAssembler::stop(char const*) (1 samples, 0.60%)</title><rect x="1175.8" y="499.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.8" y="510.0"></text>
</g>
<g>
<title>Assembler::mov_literal64(RegisterImpl*, long, RelocationHolder const&amp;) (1 samples, 0.60%)</title><rect x="1175.8" y="483.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.8" y="494.0"></text>
</g>
<g>
<title>relocInfo::initialize(CodeSection*, Relocation*) (1 samples, 0.60%)</title><rect x="1175.8" y="467.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.8" y="478.0"></text>
</g>
<g>
<title>external_word_Relocation::pack_data_to(CodeSection*) (1 samples, 0.60%)</title><rect x="1175.8" y="451.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.8" y="462.0"></text>
</g>
<g>
<title>StubCodeDesc::desc_for(unsigned char*) (1 samples, 0.60%)</title><rect x="1175.8" y="435.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.8" y="446.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.60%)</title><rect x="1182.9" y="611.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.9" y="622.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.60%)</title><rect x="1182.9" y="595.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="606.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.60%)</title><rect x="1182.9" y="579.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.9" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.60%)</title><rect x="1182.9" y="563.0" width="7.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1185.9" y="574.0"></text>
</g>
</g>
</svg>
