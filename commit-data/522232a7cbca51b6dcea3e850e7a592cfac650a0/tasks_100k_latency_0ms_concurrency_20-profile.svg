<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1029"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1029"> </text>
<g id="frames">
<g>
<title>all (149 samples, 100.00%)</title><rect x="10.0" y="995.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1006.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (29 samples, 19.46%)</title><rect x="10.0" y="979.0" width="229.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="990.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (29 samples, 19.46%)</title><rect x="10.0" y="963.0" width="229.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="974.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.67%)</title><rect x="10.0" y="947.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.67%)</title><rect x="10.0" y="931.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.67%)</title><rect x="10.0" y="915.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.67%)</title><rect x="10.0" y="899.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.67%)</title><rect x="10.0" y="883.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.67%)</title><rect x="10.0" y="867.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.67%)</title><rect x="10.0" y="851.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.67%)</title><rect x="10.0" y="835.0" width="7.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (16 samples, 10.74%)</title><rect x="17.9" y="947.0" width="126.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.9" y="958.0">java/lang/Iterab..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1503268746.accept (14 samples, 9.40%)</title><rect x="17.9" y="931.0" width="110.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.9" y="942.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (14 samples, 9.40%)</title><rect x="17.9" y="915.0" width="110.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.9" y="926.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (13 samples, 8.72%)</title><rect x="17.9" y="899.0" width="103.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.9" y="910.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (13 samples, 8.72%)</title><rect x="17.9" y="883.0" width="103.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.9" y="894.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (13 samples, 8.72%)</title><rect x="17.9" y="867.0" width="103.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.9" y="878.0">com/linecorp..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (13 samples, 8.72%)</title><rect x="17.9" y="851.0" width="103.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.9" y="862.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (13 samples, 8.72%)</title><rect x="17.9" y="835.0" width="103.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.9" y="846.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (10 samples, 6.71%)</title><rect x="41.7" y="819.0" width="79.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="44.7" y="830.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (9 samples, 6.04%)</title><rect x="49.6" y="803.0" width="71.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="52.6" y="814.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.34%)</title><rect x="65.4" y="787.0" width="15.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="68.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.34%)</title><rect x="65.4" y="771.0" width="15.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="68.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 1.34%)</title><rect x="65.4" y="755.0" width="15.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="68.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 3.36%)</title><rect x="81.3" y="787.0" width="39.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="84.3" y="798.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 3.36%)</title><rect x="81.3" y="771.0" width="39.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="84.3" y="782.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 3.36%)</title><rect x="81.3" y="755.0" width="39.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="84.3" y="766.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 3.36%)</title><rect x="81.3" y="739.0" width="39.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="84.3" y="750.0">jav..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (5 samples, 3.36%)</title><rect x="81.3" y="723.0" width="39.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="84.3" y="734.0">sun..</text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 3.36%)</title><rect x="81.3" y="707.0" width="39.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="84.3" y="718.0">Uns..</text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 2.01%)</title><rect x="81.3" y="691.0" width="23.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="84.3" y="702.0">_..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.67%)</title><rect x="105.0" y="691.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="108.0" y="702.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.67%)</title><rect x="113.0" y="691.0" width="7.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="116.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.67%)</title><rect x="120.9" y="899.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="123.9" y="910.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.67%)</title><rect x="120.9" y="883.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="123.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 1.34%)</title><rect x="128.8" y="931.0" width="15.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="131.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 1.34%)</title><rect x="128.8" y="915.0" width="15.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="131.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 1.34%)</title><rect x="128.8" y="899.0" width="15.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="131.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 1.34%)</title><rect x="128.8" y="883.0" width="15.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="131.8" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (2 samples, 1.34%)</title><rect x="128.8" y="867.0" width="15.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="131.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 1.34%)</title><rect x="128.8" y="851.0" width="15.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="131.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 8.05%)</title><rect x="144.6" y="947.0" width="95.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="147.6" y="958.0">org/apache/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 8.05%)</title><rect x="144.6" y="931.0" width="95.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="147.6" y="942.0">org/apache/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 2.68%)</title><rect x="144.6" y="915.0" width="31.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="147.6" y="926.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 2.68%)</title><rect x="144.6" y="899.0" width="31.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="147.6" y="910.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 2.68%)</title><rect x="144.6" y="883.0" width="31.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="147.6" y="894.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 2.01%)</title><rect x="144.6" y="867.0" width="23.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="147.6" y="878.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 2.01%)</title><rect x="144.6" y="851.0" width="23.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="147.6" y="862.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 2.01%)</title><rect x="144.6" y="835.0" width="23.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="147.6" y="846.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (3 samples, 2.01%)</title><rect x="144.6" y="819.0" width="23.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="147.6" y="830.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 2.01%)</title><rect x="144.6" y="803.0" width="23.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="147.6" y="814.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 2.01%)</title><rect x="144.6" y="787.0" width="23.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="147.6" y="798.0">j..</text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (2 samples, 1.34%)</title><rect x="152.6" y="771.0" width="15.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="155.6" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (2 samples, 1.34%)</title><rect x="152.6" y="755.0" width="15.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="155.6" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (2 samples, 1.34%)</title><rect x="152.6" y="739.0" width="15.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="155.6" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 1.34%)</title><rect x="152.6" y="723.0" width="15.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="155.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.67%)</title><rect x="168.4" y="867.0" width="7.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="171.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 2.68%)</title><rect x="176.3" y="915.0" width="31.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="179.3" y="926.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 2.68%)</title><rect x="176.3" y="899.0" width="31.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.3" y="910.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 1.34%)</title><rect x="176.3" y="883.0" width="15.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="179.3" y="894.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.67%)</title><rect x="176.3" y="867.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="179.3" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.67%)</title><rect x="176.3" y="851.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="179.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.67%)</title><rect x="184.2" y="867.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="187.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.67%)</title><rect x="184.2" y="851.0" width="7.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="187.2" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.67%)</title><rect x="184.2" y="835.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="187.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 1.34%)</title><rect x="192.1" y="883.0" width="15.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="195.1" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 1.34%)</title><rect x="192.1" y="867.0" width="15.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="195.1" y="878.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps.makeRef (2 samples, 1.34%)</title><rect x="192.1" y="851.0" width="15.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.1" y="862.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.67%)</title><rect x="192.1" y="835.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.1" y="846.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.&lt;init&gt; (1 samples, 0.67%)</title><rect x="200.1" y="835.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 2.01%)</title><rect x="208.0" y="915.0" width="23.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="211.0" y="926.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 1.34%)</title><rect x="208.0" y="899.0" width="15.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="211.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.67%)</title><rect x="208.0" y="883.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.67%)</title><rect x="208.0" y="867.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/ResponseHeader.parse (1 samples, 0.67%)</title><rect x="208.0" y="851.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/ResponseHeaderData.&lt;init&gt; (1 samples, 0.67%)</title><rect x="208.0" y="835.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="211.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/ResponseHeaderData.read (1 samples, 0.67%)</title><rect x="208.0" y="819.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="211.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ByteBufferAccessor.readInt (1 samples, 0.67%)</title><rect x="208.0" y="803.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.0" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getInt (1 samples, 0.67%)</title><rect x="208.0" y="787.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="211.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.67%)</title><rect x="215.9" y="883.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="218.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.67%)</title><rect x="215.9" y="867.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.9" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.67%)</title><rect x="215.9" y="851.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.67%)</title><rect x="215.9" y="835.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="218.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.67%)</title><rect x="223.8" y="899.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="226.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.67%)</title><rect x="223.8" y="883.0" width="7.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="226.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.67%)</title><rect x="223.8" y="867.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="226.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.67%)</title><rect x="223.8" y="851.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="226.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.send (1 samples, 0.67%)</title><rect x="223.8" y="835.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="226.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.destination (1 samples, 0.67%)</title><rect x="223.8" y="819.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="226.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.67%)</title><rect x="231.7" y="915.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.67%)</title><rect x="231.7" y="899.0" width="8.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="234.7" y="910.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.67%)</title><rect x="231.7" y="883.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.67%)</title><rect x="231.7" y="867.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.7" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.run (71 samples, 47.65%)</title><rect x="239.7" y="979.0" width="562.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="242.7" y="990.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (71 samples, 47.65%)</title><rect x="239.7" y="963.0" width="562.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="242.7" y="974.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (71 samples, 47.65%)</title><rect x="239.7" y="947.0" width="562.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.7" y="958.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1978585736.run (44 samples, 29.53%)</title><rect x="271.3" y="931.0" width="348.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="274.3" y="942.0">com/linecorp/decaton/processor/runtime/Processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (44 samples, 29.53%)</title><rect x="271.3" y="915.0" width="348.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.3" y="926.0">com/linecorp/decaton/processor/runtime/Processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (44 samples, 29.53%)</title><rect x="271.3" y="899.0" width="348.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.3" y="910.0">com/linecorp/decaton/processor/runtime/Processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (44 samples, 29.53%)</title><rect x="271.3" y="883.0" width="348.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.3" y="894.0">com/linecorp/decaton/processor/runtime/ProcessP..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (11 samples, 7.38%)</title><rect x="271.3" y="867.0" width="87.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="274.3" y="878.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (11 samples, 7.38%)</title><rect x="271.3" y="851.0" width="87.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.3" y="862.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (11 samples, 7.38%)</title><rect x="271.3" y="835.0" width="87.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="274.3" y="846.0">com/lineco..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.67%)</title><rect x="271.3" y="819.0" width="8.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="274.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 6.71%)</title><rect x="279.3" y="819.0" width="79.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.3" y="830.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 6.71%)</title><rect x="279.3" y="803.0" width="79.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.3" y="814.0">com/linec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (10 samples, 6.71%)</title><rect x="279.3" y="787.0" width="79.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.3" y="798.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 4.03%)</title><rect x="279.3" y="771.0" width="47.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="282.3" y="782.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 4.03%)</title><rect x="279.3" y="755.0" width="47.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="282.3" y="766.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 4.03%)</title><rect x="279.3" y="739.0" width="47.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="282.3" y="750.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.67%)</title><rect x="295.1" y="723.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="298.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.67%)</title><rect x="295.1" y="707.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="298.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 2.01%)</title><rect x="303.0" y="723.0" width="23.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="306.0" y="734.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (3 samples, 2.01%)</title><rect x="303.0" y="707.0" width="23.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="306.0" y="718.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (3 samples, 2.01%)</title><rect x="303.0" y="691.0" width="23.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="306.0" y="702.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (4 samples, 2.68%)</title><rect x="326.8" y="771.0" width="31.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="329.8" y="782.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.67%)</title><rect x="326.8" y="755.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="329.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.67%)</title><rect x="326.8" y="739.0" width="7.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="329.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.67%)</title><rect x="326.8" y="723.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="329.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.67%)</title><rect x="326.8" y="707.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="329.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.67%)</title><rect x="326.8" y="691.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="329.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.67%)</title><rect x="326.8" y="675.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="329.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (1 samples, 0.67%)</title><rect x="326.8" y="659.0" width="7.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="329.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.67%)</title><rect x="326.8" y="643.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="329.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.67%)</title><rect x="334.7" y="755.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="337.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.67%)</title><rect x="334.7" y="739.0" width="7.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="337.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.67%)</title><rect x="334.7" y="723.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="337.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.67%)</title><rect x="334.7" y="707.0" width="7.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="337.7" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.67%)</title><rect x="334.7" y="691.0" width="7.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="337.7" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.67%)</title><rect x="334.7" y="675.0" width="7.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="337.7" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.67%)</title><rect x="334.7" y="659.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="337.7" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.67%)</title><rect x="334.7" y="643.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="337.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (2 samples, 1.34%)</title><rect x="342.6" y="755.0" width="15.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="345.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.67%)</title><rect x="342.6" y="739.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="345.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.67%)</title><rect x="342.6" y="723.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="345.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.67%)</title><rect x="342.6" y="707.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="345.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.67%)</title><rect x="342.6" y="691.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="345.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.67%)</title><rect x="350.5" y="739.0" width="8.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="353.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.67%)</title><rect x="350.5" y="723.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="353.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.67%)</title><rect x="350.5" y="707.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="353.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.67%)</title><rect x="350.5" y="691.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="353.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.67%)</title><rect x="350.5" y="675.0" width="8.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="353.5" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.67%)</title><rect x="350.5" y="659.0" width="8.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="353.5" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (31 samples, 20.81%)</title><rect x="358.5" y="867.0" width="245.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="361.5" y="878.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (7 samples, 4.70%)</title><rect x="358.5" y="851.0" width="55.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="361.5" y="862.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (7 samples, 4.70%)</title><rect x="358.5" y="835.0" width="55.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="361.5" y="846.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (6 samples, 4.03%)</title><rect x="366.4" y="819.0" width="47.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="369.4" y="830.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.34%)</title><rect x="366.4" y="803.0" width="15.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="369.4" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.34%)</title><rect x="366.4" y="787.0" width="15.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="369.4" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 2.68%)</title><rect x="382.2" y="803.0" width="31.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="385.2" y="814.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 1.34%)</title><rect x="398.1" y="787.0" width="15.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="401.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 1.34%)</title><rect x="398.1" y="771.0" width="15.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="401.1" y="782.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 1.34%)</title><rect x="398.1" y="755.0" width="15.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="401.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 2.01%)</title><rect x="413.9" y="851.0" width="23.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="416.9" y="862.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 2.01%)</title><rect x="413.9" y="835.0" width="23.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="416.9" y="846.0">c..</text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 2.01%)</title><rect x="413.9" y="819.0" width="23.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="416.9" y="830.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (16 samples, 10.74%)</title><rect x="437.7" y="851.0" width="126.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.7" y="862.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (16 samples, 10.74%)</title><rect x="437.7" y="835.0" width="126.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="440.7" y="846.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 2.68%)</title><rect x="453.5" y="819.0" width="31.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="456.5" y="830.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 2.01%)</title><rect x="453.5" y="803.0" width="23.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="456.5" y="814.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.34%)</title><rect x="461.4" y="787.0" width="15.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="464.4" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.67%)</title><rect x="469.3" y="771.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="472.3" y="782.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.67%)</title><rect x="477.2" y="803.0" width="8.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="480.2" y="814.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.67%)</title><rect x="485.2" y="819.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="488.2" y="830.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (9 samples, 6.04%)</title><rect x="493.1" y="819.0" width="71.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="496.1" y="830.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (9 samples, 6.04%)</title><rect x="493.1" y="803.0" width="71.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="496.1" y="814.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 2.01%)</title><rect x="493.1" y="787.0" width="23.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="496.1" y="798.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 2.01%)</title><rect x="493.1" y="771.0" width="23.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="496.1" y="782.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.34%)</title><rect x="501.0" y="755.0" width="15.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="504.0" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.34%)</title><rect x="501.0" y="739.0" width="15.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="504.0" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 1.34%)</title><rect x="501.0" y="723.0" width="15.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="504.0" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.34%)</title><rect x="516.8" y="787.0" width="15.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="519.8" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 1.34%)</title><rect x="516.8" y="771.0" width="15.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="519.8" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 1.34%)</title><rect x="516.8" y="755.0" width="15.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="519.8" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.34%)</title><rect x="516.8" y="739.0" width="15.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="519.8" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 2.68%)</title><rect x="532.7" y="787.0" width="31.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="535.7" y="798.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.34%)</title><rect x="548.5" y="771.0" width="15.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="551.5" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.67%)</title><rect x="556.4" y="755.0" width="8.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="559.4" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.67%)</title><rect x="556.4" y="739.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="559.4" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (5 samples, 3.36%)</title><rect x="564.4" y="851.0" width="39.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="567.4" y="862.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (5 samples, 3.36%)</title><rect x="564.4" y="835.0" width="39.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="567.4" y="846.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/969553632.process (1 samples, 0.67%)</title><rect x="572.3" y="819.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="575.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.67%)</title><rect x="572.3" y="803.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="575.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.67%)</title><rect x="572.3" y="787.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="575.3" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.67%)</title><rect x="572.3" y="771.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="575.3" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.67%)</title><rect x="572.3" y="755.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="575.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.67%)</title><rect x="572.3" y="739.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="575.3" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.67%)</title><rect x="572.3" y="723.0" width="7.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="575.3" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.67%)</title><rect x="572.3" y="707.0" width="7.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="575.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.67%)</title><rect x="580.2" y="819.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="583.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.67%)</title><rect x="580.2" y="803.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="583.2" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.67%)</title><rect x="588.1" y="819.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="591.1" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.67%)</title><rect x="588.1" y="803.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="591.1" y="814.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.67%)</title><rect x="588.1" y="787.0" width="7.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="591.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.&lt;init&gt; (1 samples, 0.67%)</title><rect x="596.0" y="819.0" width="8.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="599.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.34%)</title><rect x="604.0" y="867.0" width="15.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="607.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.34%)</title><rect x="604.0" y="851.0" width="15.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="607.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.34%)</title><rect x="604.0" y="835.0" width="15.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="607.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/611555357.accept (2 samples, 1.34%)</title><rect x="604.0" y="819.0" width="15.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="607.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (2 samples, 1.34%)</title><rect x="604.0" y="803.0" width="15.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="607.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 1.34%)</title><rect x="604.0" y="787.0" width="15.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="607.0" y="798.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 1.34%)</title><rect x="604.0" y="771.0" width="15.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="607.0" y="782.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 1.34%)</title><rect x="604.0" y="755.0" width="15.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="607.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.67%)</title><rect x="619.8" y="931.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="622.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.67%)</title><rect x="619.8" y="915.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="622.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.67%)</title><rect x="619.8" y="899.0" width="7.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="622.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.67%)</title><rect x="627.7" y="931.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="630.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (21 samples, 14.09%)</title><rect x="635.6" y="931.0" width="166.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="638.6" y="942.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (18 samples, 12.08%)</title><rect x="659.4" y="915.0" width="142.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="662.4" y="926.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.getAndDecrement (1 samples, 0.67%)</title><rect x="667.3" y="899.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="670.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (15 samples, 10.07%)</title><rect x="675.2" y="899.0" width="118.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="678.2" y="910.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.67%)</title><rect x="675.2" y="883.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="678.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 1.34%)</title><rect x="683.2" y="883.0" width="15.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="686.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.34%)</title><rect x="683.2" y="867.0" width="15.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="686.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 1.34%)</title><rect x="683.2" y="851.0" width="15.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="686.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 1.34%)</title><rect x="683.2" y="835.0" width="15.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="686.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (12 samples, 8.05%)</title><rect x="699.0" y="883.0" width="95.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="702.0" y="894.0">java/util/c..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (12 samples, 8.05%)</title><rect x="699.0" y="867.0" width="95.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="702.0" y="878.0">sun/misc/Un..</text>
</g>
<g>
<title>Unsafe_Park (10 samples, 6.71%)</title><rect x="714.8" y="851.0" width="79.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="717.8" y="862.0">Unsafe_Park</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.67%)</title><rect x="714.8" y="835.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="717.8" y="846.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 1.34%)</title><rect x="722.8" y="835.0" width="15.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="725.8" y="846.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.34%)</title><rect x="738.6" y="835.0" width="15.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="741.6" y="846.0"></text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 2.68%)</title><rect x="754.4" y="835.0" width="31.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="757.4" y="846.0">__..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.67%)</title><rect x="786.1" y="835.0" width="7.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="789.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.67%)</title><rect x="794.0" y="899.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="797.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.67%)</title><rect x="794.0" y="883.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="797.0" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.67%)</title><rect x="794.0" y="867.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="797.0" y="878.0"></text>
</g>
<g>
<title>start_thread (49 samples, 32.89%)</title><rect x="801.9" y="979.0" width="388.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="804.9" y="990.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (49 samples, 32.89%)</title><rect x="801.9" y="963.0" width="388.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="804.9" y="974.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 9.40%)</title><rect x="801.9" y="947.0" width="110.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="804.9" y="958.0">GangWorker::l..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 2.68%)</title><rect x="801.9" y="931.0" width="31.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="804.9" y="942.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 2.68%)</title><rect x="801.9" y="915.0" width="31.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="804.9" y="926.0">G1..</text>
</g>
<g>
<title>SpinPause (4 samples, 2.68%)</title><rect x="801.9" y="899.0" width="31.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="804.9" y="910.0">Sp..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (10 samples, 6.71%)</title><rect x="833.6" y="931.0" width="79.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="836.6" y="942.0">G1ParTask..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 4.70%)</title><rect x="833.6" y="915.0" width="55.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="836.6" y="926.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 2.68%)</title><rect x="833.6" y="899.0" width="31.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="836.6" y="910.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.67%)</title><rect x="857.4" y="883.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="860.4" y="894.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 1.34%)</title><rect x="865.3" y="899.0" width="15.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="868.3" y="910.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.67%)</title><rect x="881.1" y="899.0" width="8.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="884.1" y="910.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.67%)</title><rect x="889.1" y="915.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="892.1" y="926.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.67%)</title><rect x="889.1" y="899.0" width="7.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="892.1" y="910.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.67%)</title><rect x="889.1" y="883.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="892.1" y="894.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.67%)</title><rect x="889.1" y="867.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="892.1" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 1.34%)</title><rect x="897.0" y="915.0" width="15.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="900.0" y="926.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 1.34%)</title><rect x="897.0" y="899.0" width="15.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="900.0" y="910.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 1.34%)</title><rect x="897.0" y="883.0" width="15.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="900.0" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 1.34%)</title><rect x="897.0" y="867.0" width="15.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="900.0" y="878.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (2 samples, 1.34%)</title><rect x="897.0" y="851.0" width="15.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="900.0" y="862.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (2 samples, 1.34%)</title><rect x="897.0" y="835.0" width="15.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="900.0" y="846.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (2 samples, 1.34%)</title><rect x="897.0" y="819.0" width="15.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="900.0" y="830.0"></text>
</g>
<g>
<title>metadata_Relocation::fix_metadata_relocation() (1 samples, 0.67%)</title><rect x="904.9" y="803.0" width="7.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="907.9" y="814.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (35 samples, 23.49%)</title><rect x="912.8" y="947.0" width="277.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="915.8" y="958.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (35 samples, 23.49%)</title><rect x="912.8" y="931.0" width="277.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="915.8" y="942.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (35 samples, 23.49%)</title><rect x="912.8" y="915.0" width="277.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="915.8" y="926.0">CompileBroker::invoke_compiler_on_met..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (32 samples, 21.48%)</title><rect x="912.8" y="899.0" width="253.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="915.8" y="910.0">C2Compiler::compile_method(ciEnv*,..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (32 samples, 21.48%)</title><rect x="912.8" y="883.0" width="253.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="915.8" y="894.0">Compile::Compile(ciEnv*, C2Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (22 samples, 14.77%)</title><rect x="912.8" y="867.0" width="174.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="915.8" y="878.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.67%)</title><rect x="912.8" y="851.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="915.8" y="862.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.67%)</title><rect x="912.8" y="835.0" width="7.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="915.8" y="846.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.67%)</title><rect x="912.8" y="819.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="915.8" y="830.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.67%)</title><rect x="920.7" y="851.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="923.7" y="862.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 2.01%)</title><rect x="928.7" y="851.0" width="23.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="931.7" y="862.0">M..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 2.01%)</title><rect x="928.7" y="835.0" width="23.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="931.7" y="846.0">M..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.34%)</title><rect x="928.7" y="819.0" width="15.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="931.7" y="830.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.67%)</title><rect x="928.7" y="803.0" width="7.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="931.7" y="814.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.67%)</title><rect x="928.7" y="787.0" width="7.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="931.7" y="798.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.67%)</title><rect x="928.7" y="771.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="931.7" y="782.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.67%)</title><rect x="928.7" y="755.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="931.7" y="766.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.67%)</title><rect x="928.7" y="739.0" width="7.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="931.7" y="750.0"></text>
</g>
<g>
<title>State::_sub_Op_ConL(Node const*) (1 samples, 0.67%)</title><rect x="928.7" y="723.0" width="7.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="931.7" y="734.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.67%)</title><rect x="936.6" y="803.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="939.6" y="814.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.67%)</title><rect x="936.6" y="787.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="939.6" y="798.0"></text>
</g>
<g>
<title>SafePointNode::adr_type() const (1 samples, 0.67%)</title><rect x="944.5" y="819.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="947.5" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.67%)</title><rect x="952.4" y="851.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="955.4" y="862.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.67%)</title><rect x="952.4" y="835.0" width="7.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="955.4" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (16 samples, 10.74%)</title><rect x="960.3" y="851.0" width="126.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="963.3" y="862.0">PhaseChaitin::Re..</text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.67%)</title><rect x="960.3" y="835.0" width="8.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="963.3" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.34%)</title><rect x="968.3" y="835.0" width="15.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="971.3" y="846.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.67%)</title><rect x="976.2" y="819.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="979.2" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 1.34%)</title><rect x="984.1" y="835.0" width="15.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="987.1" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.67%)</title><rect x="992.0" y="819.0" width="7.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="995.0" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.67%)</title><rect x="999.9" y="835.0" width="8.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1002.9" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.67%)</title><rect x="1007.9" y="835.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1010.9" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.67%)</title><rect x="1015.8" y="835.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1018.8" y="846.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.67%)</title><rect x="1015.8" y="819.0" width="7.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1018.8" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.34%)</title><rect x="1023.7" y="835.0" width="15.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1026.7" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.67%)</title><rect x="1031.6" y="819.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.6" y="830.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.67%)</title><rect x="1039.5" y="835.0" width="7.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1042.5" y="846.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.67%)</title><rect x="1039.5" y="819.0" width="7.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1042.5" y="830.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 2.68%)</title><rect x="1047.4" y="835.0" width="31.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1050.4" y="846.0">Ph..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.34%)</title><rect x="1063.3" y="819.0" width="15.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1066.3" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.34%)</title><rect x="1063.3" y="803.0" width="15.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1066.3" y="814.0"></text>
</g>
<g>
<title>jmpDirNode::oper_input_base() const (1 samples, 0.67%)</title><rect x="1079.1" y="835.0" width="7.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1082.1" y="846.0"></text>
</g>
<g>
<title>Compile::Optimize() (6 samples, 4.03%)</title><rect x="1087.0" y="867.0" width="47.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1090.0" y="878.0">Comp..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.67%)</title><rect x="1087.0" y="851.0" width="8.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1090.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.67%)</title><rect x="1087.0" y="835.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.67%)</title><rect x="1087.0" y="819.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1090.0" y="830.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.67%)</title><rect x="1095.0" y="851.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.0" y="862.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.67%)</title><rect x="1095.0" y="835.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1098.0" y="846.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.67%)</title><rect x="1095.0" y="819.0" width="7.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1098.0" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (3 samples, 2.01%)</title><rect x="1102.9" y="851.0" width="23.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.9" y="862.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.67%)</title><rect x="1102.9" y="835.0" width="7.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1105.9" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.67%)</title><rect x="1102.9" y="819.0" width="7.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1105.9" y="830.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.67%)</title><rect x="1102.9" y="803.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1105.9" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 1.34%)</title><rect x="1110.8" y="835.0" width="15.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1113.8" y="846.0"></text>
</g>
<g>
<title>LoadNNode::Opcode() const (1 samples, 0.67%)</title><rect x="1118.7" y="819.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.7" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.67%)</title><rect x="1126.6" y="851.0" width="8.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.6" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.67%)</title><rect x="1126.6" y="835.0" width="8.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.6" y="846.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.67%)</title><rect x="1126.6" y="819.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.6" y="830.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.67%)</title><rect x="1126.6" y="803.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.6" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.34%)</title><rect x="1134.6" y="867.0" width="15.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.6" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.34%)</title><rect x="1134.6" y="851.0" width="15.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.34%)</title><rect x="1134.6" y="835.0" width="15.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.34%)</title><rect x="1134.6" y="819.0" width="15.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.34%)</title><rect x="1134.6" y="803.0" width="15.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.34%)</title><rect x="1134.6" y="787.0" width="15.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.6" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.34%)</title><rect x="1134.6" y="771.0" width="15.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.6" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.34%)</title><rect x="1134.6" y="755.0" width="15.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.34%)</title><rect x="1134.6" y="739.0" width="15.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.34%)</title><rect x="1134.6" y="723.0" width="15.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.34%)</title><rect x="1134.6" y="707.0" width="15.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.34%)</title><rect x="1134.6" y="691.0" width="15.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.6" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.34%)</title><rect x="1134.6" y="675.0" width="15.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.6" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.34%)</title><rect x="1134.6" y="659.0" width="15.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.34%)</title><rect x="1134.6" y="643.0" width="15.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.34%)</title><rect x="1134.6" y="627.0" width="15.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.34%)</title><rect x="1134.6" y="611.0" width="15.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.34%)</title><rect x="1134.6" y="595.0" width="15.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.6" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.34%)</title><rect x="1134.6" y="579.0" width="15.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.6" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.34%)</title><rect x="1134.6" y="563.0" width="15.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.34%)</title><rect x="1134.6" y="547.0" width="15.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.34%)</title><rect x="1134.6" y="531.0" width="15.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.34%)</title><rect x="1134.6" y="515.0" width="15.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.34%)</title><rect x="1134.6" y="499.0" width="15.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.6" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.34%)</title><rect x="1134.6" y="483.0" width="15.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.6" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.34%)</title><rect x="1134.6" y="467.0" width="15.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.34%)</title><rect x="1134.6" y="451.0" width="15.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.34%)</title><rect x="1134.6" y="435.0" width="15.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.34%)</title><rect x="1134.6" y="419.0" width="15.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.67%)</title><rect x="1134.6" y="403.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.6" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.67%)</title><rect x="1134.6" y="387.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.6" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.67%)</title><rect x="1134.6" y="371.0" width="7.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.67%)</title><rect x="1134.6" y="355.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.67%)</title><rect x="1134.6" y="339.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.67%)</title><rect x="1134.6" y="323.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.67%)</title><rect x="1134.6" y="307.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.6" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.67%)</title><rect x="1134.6" y="291.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.6" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.67%)</title><rect x="1134.6" y="275.0" width="7.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.67%)</title><rect x="1134.6" y="259.0" width="7.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.67%)</title><rect x="1134.6" y="243.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.67%)</title><rect x="1134.6" y="227.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.67%)</title><rect x="1134.6" y="211.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.6" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.67%)</title><rect x="1134.6" y="195.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.6" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.67%)</title><rect x="1134.6" y="179.0" width="7.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.67%)</title><rect x="1134.6" y="163.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.67%)</title><rect x="1134.6" y="147.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.67%)</title><rect x="1134.6" y="131.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.67%)</title><rect x="1134.6" y="115.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.6" y="126.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.67%)</title><rect x="1134.6" y="99.0" width="7.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.6" y="110.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.67%)</title><rect x="1134.6" y="83.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.6" y="94.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.67%)</title><rect x="1134.6" y="67.0" width="7.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.6" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.67%)</title><rect x="1134.6" y="51.0" width="7.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.6" y="62.0"></text>
</g>
<g>
<title>CatchNode::Value(PhaseTransform*) const (1 samples, 0.67%)</title><rect x="1134.6" y="35.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.6" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.67%)</title><rect x="1142.5" y="403.0" width="7.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.67%)</title><rect x="1142.5" y="387.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.5" y="398.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.67%)</title><rect x="1142.5" y="371.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.5" y="382.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.67%)</title><rect x="1150.4" y="867.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.4" y="878.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.67%)</title><rect x="1150.4" y="851.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.4" y="862.0"></text>
</g>
<g>
<title>Node::has_special_unique_user() const (1 samples, 0.67%)</title><rect x="1150.4" y="835.0" width="7.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.4" y="846.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.67%)</title><rect x="1158.3" y="867.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.3" y="878.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (1 samples, 0.67%)</title><rect x="1158.3" y="851.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.3" y="862.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.67%)</title><rect x="1158.3" y="835.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.3" y="846.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 2.01%)</title><rect x="1166.2" y="899.0" width="23.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.2" y="910.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 2.01%)</title><rect x="1166.2" y="883.0" width="23.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.2" y="894.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 2.01%)</title><rect x="1166.2" y="867.0" width="23.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.2" y="878.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 2.01%)</title><rect x="1166.2" y="851.0" width="23.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.2" y="862.0">C..</text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 1.34%)</title><rect x="1166.2" y="835.0" width="15.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.2" y="846.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.67%)</title><rect x="1166.2" y="819.0" width="8.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.2" y="830.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.67%)</title><rect x="1166.2" y="803.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.2" y="814.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.67%)</title><rect x="1166.2" y="787.0" width="8.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.2" y="798.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.67%)</title><rect x="1166.2" y="771.0" width="8.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.2" y="782.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.67%)</title><rect x="1166.2" y="755.0" width="8.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.2" y="766.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.67%)</title><rect x="1166.2" y="739.0" width="8.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.2" y="750.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.67%)</title><rect x="1174.2" y="819.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.2" y="830.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.67%)</title><rect x="1174.2" y="803.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.2" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.67%)</title><rect x="1174.2" y="787.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.2" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.67%)</title><rect x="1174.2" y="771.0" width="7.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.2" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.67%)</title><rect x="1174.2" y="755.0" width="7.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.2" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.67%)</title><rect x="1174.2" y="739.0" width="7.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.2" y="750.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.67%)</title><rect x="1174.2" y="723.0" width="7.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.2" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.67%)</title><rect x="1174.2" y="707.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.2" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.67%)</title><rect x="1174.2" y="691.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.2" y="702.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.67%)</title><rect x="1174.2" y="675.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.2" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.67%)</title><rect x="1174.2" y="659.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.2" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.67%)</title><rect x="1174.2" y="643.0" width="7.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.2" y="654.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.67%)</title><rect x="1174.2" y="627.0" width="7.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.2" y="638.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.67%)</title><rect x="1182.1" y="835.0" width="7.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.1" y="846.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.67%)</title><rect x="1182.1" y="819.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="830.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.67%)</title><rect x="1182.1" y="803.0" width="7.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.1" y="814.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.67%)</title><rect x="1182.1" y="787.0" width="7.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.1" y="798.0"></text>
</g>
<g>
<title>LinearScan::color_lir_opr(LIR_OprDesc*, int, LIR_OpVisitState::OprMode) (1 samples, 0.67%)</title><rect x="1182.1" y="771.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.1" y="782.0"></text>
</g>
</g>
</svg>
