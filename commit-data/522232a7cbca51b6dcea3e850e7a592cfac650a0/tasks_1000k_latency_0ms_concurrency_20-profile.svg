<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1958" onload="init(evt)" viewBox="0 0 1200 1958" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1941"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1941"> </text>
<g id="frames">
<g>
<title>all (1,366 samples, 100.00%)</title><rect x="10.0" y="1907.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1918.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (261 samples, 19.11%)</title><rect x="10.0" y="1891.0" width="225.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1902.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (261 samples, 19.11%)</title><rect x="10.0" y="1875.0" width="225.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1886.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (3 samples, 0.22%)</title><rect x="10.0" y="1859.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.22%)</title><rect x="10.0" y="1843.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/369517040.accept (2 samples, 0.15%)</title><rect x="10.9" y="1827.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.9" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.15%)</title><rect x="10.9" y="1811.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.9" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.15%)</title><rect x="10.9" y="1795.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.15%)</title><rect x="10.9" y="1779.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.9" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.22%)</title><rect x="12.6" y="1859.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.22%)</title><rect x="12.6" y="1843.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.6" y="1854.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="12.6" y="1827.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.6" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="12.6" y="1811.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.6" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="12.6" y="1795.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.6" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.15%)</title><rect x="13.5" y="1827.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.5" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.15%)</title><rect x="13.5" y="1811.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.5" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="14.3" y="1795.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.3" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="14.3" y="1779.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.3" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="14.3" y="1763.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.3" y="1774.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="14.3" y="1747.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.3" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="14.3" y="1731.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.3" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="14.3" y="1715.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.3" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/1901461515.test (1 samples, 0.07%)</title><rect x="14.3" y="1699.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.3" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.07%)</title><rect x="15.2" y="1859.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.07%)</title><rect x="15.2" y="1843.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (199 samples, 14.57%)</title><rect x="16.0" y="1859.0" width="172.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.0" y="1870.0">java/lang/Iterable.for..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/828407024.accept (190 samples, 13.91%)</title><rect x="16.9" y="1843.0" width="164.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.9" y="1854.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (189 samples, 13.84%)</title><rect x="17.8" y="1827.0" width="163.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.8" y="1838.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.07%)</title><rect x="17.8" y="1811.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.8" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (160 samples, 11.71%)</title><rect x="18.6" y="1811.0" width="138.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.6" y="1822.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (160 samples, 11.71%)</title><rect x="18.6" y="1795.0" width="138.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.6" y="1806.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (160 samples, 11.71%)</title><rect x="18.6" y="1779.0" width="138.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.6" y="1790.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (160 samples, 11.71%)</title><rect x="18.6" y="1763.0" width="138.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.6" y="1774.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (160 samples, 11.71%)</title><rect x="18.6" y="1747.0" width="138.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.6" y="1758.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (129 samples, 9.44%)</title><rect x="44.6" y="1731.0" width="111.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.6" y="1742.0">java/util/con..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="66.1" y="1715.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="69.1" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="66.1" y="1699.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="69.1" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.07%)</title><rect x="66.1" y="1683.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="69.1" y="1694.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.07%)</title><rect x="66.1" y="1667.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="69.1" y="1678.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.07%)</title><rect x="66.1" y="1651.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="69.1" y="1662.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.07%)</title><rect x="66.1" y="1635.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="69.1" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (101 samples, 7.39%)</title><rect x="67.0" y="1715.0" width="87.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="70.0" y="1726.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (24 samples, 1.76%)</title><rect x="76.5" y="1699.0" width="20.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="79.5" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (23 samples, 1.68%)</title><rect x="77.4" y="1683.0" width="19.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.4" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (23 samples, 1.68%)</title><rect x="77.4" y="1667.0" width="19.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="80.4" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (66 samples, 4.83%)</title><rect x="97.2" y="1699.0" width="57.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="100.2" y="1710.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (66 samples, 4.83%)</title><rect x="97.2" y="1683.0" width="57.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="100.2" y="1694.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (66 samples, 4.83%)</title><rect x="97.2" y="1667.0" width="57.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="100.2" y="1678.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (66 samples, 4.83%)</title><rect x="97.2" y="1651.0" width="57.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="100.2" y="1662.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (66 samples, 4.83%)</title><rect x="97.2" y="1635.0" width="57.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="100.2" y="1646.0">sun/mi..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="97.2" y="1619.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="100.2" y="1630.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="98.1" y="1619.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="101.1" y="1630.0"></text>
</g>
<g>
<title>Unsafe_Unpark (59 samples, 4.32%)</title><rect x="99.0" y="1619.0" width="50.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="102.0" y="1630.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.15%)</title><rect x="100.7" y="1603.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="103.7" y="1614.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.22%)</title><rect x="102.4" y="1603.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="105.4" y="1614.0"></text>
</g>
<g>
<title>__pthread_cond_signal (38 samples, 2.78%)</title><rect x="105.0" y="1603.0" width="32.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="108.0" y="1614.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.07%)</title><rect x="137.8" y="1603.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="140.8" y="1614.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 0.95%)</title><rect x="138.7" y="1603.0" width="11.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="141.7" y="1614.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.22%)</title><rect x="149.9" y="1619.0" width="2.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="152.9" y="1630.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.15%)</title><rect x="152.5" y="1619.0" width="1.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="155.5" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.15%)</title><rect x="154.3" y="1715.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="157.3" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.15%)</title><rect x="154.3" y="1699.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="157.3" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.15%)</title><rect x="154.3" y="1683.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="157.3" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.15%)</title><rect x="154.3" y="1667.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="157.3" y="1678.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="156.0" y="1731.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="159.0" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (3 samples, 0.22%)</title><rect x="156.9" y="1811.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="159.9" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.22%)</title><rect x="156.9" y="1795.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="159.9" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.22%)</title><rect x="159.4" y="1811.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="162.4" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.22%)</title><rect x="159.4" y="1795.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="162.4" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.22%)</title><rect x="159.4" y="1779.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="162.4" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (22 samples, 1.61%)</title><rect x="162.0" y="1811.0" width="19.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="165.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (22 samples, 1.61%)</title><rect x="162.0" y="1795.0" width="19.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="165.0" y="1806.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 0.44%)</title><rect x="172.4" y="1779.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="175.4" y="1790.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.22%)</title><rect x="172.4" y="1763.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.4" y="1774.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.22%)</title><rect x="172.4" y="1747.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.4" y="1758.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.22%)</title><rect x="172.4" y="1731.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="175.4" y="1742.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="174.1" y="1715.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="177.1" y="1726.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.15%)</title><rect x="175.0" y="1763.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="178.0" y="1774.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.07%)</title><rect x="176.7" y="1763.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="179.7" y="1774.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="177.6" y="1779.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="180.6" y="1790.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.22%)</title><rect x="178.4" y="1779.0" width="2.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="181.4" y="1790.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.07%)</title><rect x="181.0" y="1843.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="184.0" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.07%)</title><rect x="181.0" y="1827.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="184.0" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="181.0" y="1811.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="184.0" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="181.0" y="1795.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="184.0" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.07%)</title><rect x="181.0" y="1779.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="184.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.07%)</title><rect x="181.9" y="1843.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="184.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.07%)</title><rect x="181.9" y="1827.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="184.9" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="181.9" y="1811.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="184.9" y="1822.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="181.9" y="1795.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="184.9" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.44%)</title><rect x="182.8" y="1843.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="185.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.44%)</title><rect x="182.8" y="1827.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="185.8" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.44%)</title><rect x="182.8" y="1811.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="185.8" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.44%)</title><rect x="182.8" y="1795.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="185.8" y="1806.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (4 samples, 0.29%)</title><rect x="182.8" y="1779.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="185.8" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (2 samples, 0.15%)</title><rect x="186.2" y="1779.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="189.2" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.15%)</title><rect x="186.2" y="1763.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="189.2" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 4.03%)</title><rect x="188.0" y="1859.0" width="47.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="191.0" y="1870.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 4.03%)</title><rect x="188.0" y="1843.0" width="47.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="191.0" y="1854.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (31 samples, 2.27%)</title><rect x="189.7" y="1827.0" width="26.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="192.7" y="1838.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (31 samples, 2.27%)</title><rect x="189.7" y="1811.0" width="26.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="192.7" y="1822.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (31 samples, 2.27%)</title><rect x="189.7" y="1795.0" width="26.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="192.7" y="1806.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (26 samples, 1.90%)</title><rect x="190.5" y="1779.0" width="22.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="193.5" y="1790.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (26 samples, 1.90%)</title><rect x="190.5" y="1763.0" width="22.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="193.5" y="1774.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (14 samples, 1.02%)</title><rect x="190.5" y="1747.0" width="12.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="193.5" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.07%)</title><rect x="197.5" y="1731.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="200.5" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.movePartitionToEnd (1 samples, 0.07%)</title><rect x="197.5" y="1715.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="200.5" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.moveToEnd (1 samples, 0.07%)</title><rect x="197.5" y="1699.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="200.5" y="1710.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="197.5" y="1683.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="200.5" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.37%)</title><rect x="198.3" y="1731.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="201.3" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.37%)</title><rect x="198.3" y="1715.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="201.3" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.37%)</title><rect x="198.3" y="1699.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="201.3" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.37%)</title><rect x="198.3" y="1683.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="201.3" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.37%)</title><rect x="198.3" y="1667.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="201.3" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.37%)</title><rect x="198.3" y="1651.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="201.3" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.37%)</title><rect x="198.3" y="1635.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="201.3" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (11 samples, 0.81%)</title><rect x="202.6" y="1747.0" width="9.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="205.6" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (11 samples, 0.81%)</title><rect x="202.6" y="1731.0" width="9.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="205.6" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.51%)</title><rect x="202.6" y="1715.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="205.6" y="1726.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.51%)</title><rect x="202.6" y="1699.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.6" y="1710.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="207.0" y="1683.0" width="1.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="210.0" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.29%)</title><rect x="208.7" y="1715.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="211.7" y="1726.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.29%)</title><rect x="208.7" y="1699.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="211.7" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.07%)</title><rect x="212.1" y="1747.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.1" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.15%)</title><rect x="213.0" y="1779.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.15%)</title><rect x="213.0" y="1763.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="216.0" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.15%)</title><rect x="213.0" y="1747.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.0" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.15%)</title><rect x="213.0" y="1731.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.0" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.07%)</title><rect x="214.7" y="1779.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.7" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.07%)</title><rect x="214.7" y="1763.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="217.7" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="214.7" y="1747.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="217.7" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="214.7" y="1731.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="217.7" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="214.7" y="1715.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="217.7" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.07%)</title><rect x="215.6" y="1779.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="218.6" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$400 (1 samples, 0.07%)</title><rect x="215.6" y="1763.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.6" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.position (1 samples, 0.07%)</title><rect x="215.6" y="1747.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="218.6" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.hasValidPosition (1 samples, 0.07%)</title><rect x="215.6" y="1731.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="218.6" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (10 samples, 0.73%)</title><rect x="216.5" y="1827.0" width="8.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="219.5" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.66%)</title><rect x="216.5" y="1811.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="219.5" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.59%)</title><rect x="216.5" y="1795.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="219.5" y="1806.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="216.5" y="1779.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="219.5" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1800290800.accept (1 samples, 0.07%)</title><rect x="216.5" y="1763.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="219.5" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.07%)</title><rect x="216.5" y="1747.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="219.5" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.07%)</title><rect x="216.5" y="1731.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="219.5" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.07%)</title><rect x="216.5" y="1715.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="219.5" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.07%)</title><rect x="216.5" y="1699.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="219.5" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.07%)</title><rect x="216.5" y="1683.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="219.5" y="1694.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="217.3" y="1779.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="220.3" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="217.3" y="1763.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.3" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="217.3" y="1747.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="220.3" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="217.3" y="1731.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.3" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="217.3" y="1715.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.3" y="1726.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="217.3" y="1699.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="220.3" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (4 samples, 0.29%)</title><rect x="218.2" y="1779.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.2" y="1790.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (4 samples, 0.29%)</title><rect x="218.2" y="1763.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="221.2" y="1774.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (4 samples, 0.29%)</title><rect x="218.2" y="1747.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="221.2" y="1758.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.07%)</title><rect x="218.2" y="1731.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="221.2" y="1742.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.07%)</title><rect x="218.2" y="1715.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.2" y="1726.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.07%)</title><rect x="218.2" y="1699.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.2" y="1710.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.22%)</title><rect x="219.0" y="1731.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.0" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.22%)</title><rect x="219.0" y="1715.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.0" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.07%)</title><rect x="220.8" y="1699.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.8" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.15%)</title><rect x="221.6" y="1779.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="224.6" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.15%)</title><rect x="221.6" y="1763.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="224.6" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="222.5" y="1747.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="225.5" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="222.5" y="1731.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="225.5" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="222.5" y="1715.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.5" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.07%)</title><rect x="223.4" y="1795.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="226.4" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.07%)</title><rect x="223.4" y="1779.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="226.4" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="223.4" y="1763.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="226.4" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="223.4" y="1747.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="226.4" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="223.4" y="1731.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="226.4" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="223.4" y="1715.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="226.4" y="1726.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="223.4" y="1699.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.4" y="1710.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.07%)</title><rect x="223.4" y="1683.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.4" y="1694.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.07%)</title><rect x="223.4" y="1667.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="226.4" y="1678.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.07%)</title><rect x="223.4" y="1651.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.4" y="1662.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="223.4" y="1635.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="226.4" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.07%)</title><rect x="224.2" y="1811.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.07%)</title><rect x="224.2" y="1795.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="227.2" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.07%)</title><rect x="224.2" y="1779.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="227.2" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.07%)</title><rect x="224.2" y="1763.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="227.2" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.07%)</title><rect x="224.2" y="1747.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="227.2" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.07%)</title><rect x="224.2" y="1731.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="227.2" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="224.2" y="1715.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.2" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="224.2" y="1699.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.2" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.44%)</title><rect x="225.1" y="1827.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="228.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.44%)</title><rect x="225.1" y="1811.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.1" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.44%)</title><rect x="225.1" y="1795.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.1" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="225.1" y="1779.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="228.1" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="225.1" y="1763.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="228.1" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.22%)</title><rect x="226.0" y="1779.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.maybeRegisterConnectionMetrics (1 samples, 0.07%)</title><rect x="226.0" y="1763.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="229.0" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.07%)</title><rect x="226.0" y="1747.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="229.0" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="226.0" y="1731.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="229.0" y="1742.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="226.0" y="1715.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="229.0" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.07%)</title><rect x="226.8" y="1763.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="229.8" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="226.8" y="1747.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.8" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="226.8" y="1731.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.8" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.07%)</title><rect x="226.8" y="1715.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="229.8" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.07%)</title><rect x="226.8" y="1699.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="229.8" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (1 samples, 0.07%)</title><rect x="227.7" y="1763.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.7" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="227.7" y="1747.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="230.7" y="1758.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="227.7" y="1731.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="230.7" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (2 samples, 0.15%)</title><rect x="228.6" y="1779.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.6" y="1790.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (2 samples, 0.15%)</title><rect x="228.6" y="1763.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.6" y="1774.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (2 samples, 0.15%)</title><rect x="228.6" y="1747.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.6" y="1758.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (2 samples, 0.15%)</title><rect x="228.6" y="1731.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.6" y="1742.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.07%)</title><rect x="228.6" y="1715.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.6" y="1726.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.07%)</title><rect x="228.6" y="1699.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.6" y="1710.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_EPollArrayWrapper_epollWait (1 samples, 0.07%)</title><rect x="228.6" y="1683.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="231.6" y="1694.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.07%)</title><rect x="229.4" y="1715.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="232.4" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="229.4" y="1699.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="232.4" y="1710.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="229.4" y="1683.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="232.4" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.37%)</title><rect x="230.3" y="1827.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="233.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.29%)</title><rect x="231.1" y="1811.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="234.1" y="1822.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.15%)</title><rect x="231.1" y="1795.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="234.1" y="1806.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.15%)</title><rect x="231.1" y="1779.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.1" y="1790.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="231.1" y="1763.0" width="0.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="234.1" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/518864124.accept (1 samples, 0.07%)</title><rect x="232.0" y="1763.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="235.0" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.15%)</title><rect x="232.9" y="1795.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.9" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.15%)</title><rect x="232.9" y="1779.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="235.9" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="233.7" y="1763.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="236.7" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="233.7" y="1747.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.7" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="233.7" y="1731.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.7" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="233.7" y="1715.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="236.7" y="1726.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="233.7" y="1699.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="236.7" y="1710.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="233.7" y="1683.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.7" y="1694.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="233.7" y="1667.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.7" y="1678.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="233.7" y="1651.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="236.7" y="1662.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="233.7" y="1635.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="236.7" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$242/1395615294.test (1 samples, 0.07%)</title><rect x="233.7" y="1619.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.7" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.07%)</title><rect x="233.7" y="1603.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="236.7" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$241/1804882521.test (1 samples, 0.07%)</title><rect x="233.7" y="1587.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="236.7" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (1 samples, 0.07%)</title><rect x="233.7" y="1571.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.7" y="1582.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="233.7" y="1555.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="236.7" y="1566.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="233.7" y="1539.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="236.7" y="1550.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="233.7" y="1523.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="236.7" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.07%)</title><rect x="234.6" y="1827.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="234.6" y="1811.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="237.6" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="234.6" y="1795.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="237.6" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.07%)</title><rect x="234.6" y="1779.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.6" y="1790.0"></text>
</g>
<g>
<title>java/lang/Thread.run (687 samples, 50.29%)</title><rect x="235.5" y="1891.0" width="593.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.5" y="1902.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (687 samples, 50.29%)</title><rect x="235.5" y="1875.0" width="593.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="238.5" y="1886.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (687 samples, 50.29%)</title><rect x="235.5" y="1859.0" width="593.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="238.5" y="1870.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1180903529.run (457 samples, 33.46%)</title><rect x="248.4" y="1843.0" width="394.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.4" y="1854.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (455 samples, 33.31%)</title><rect x="250.1" y="1827.0" width="393.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="253.1" y="1838.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (455 samples, 33.31%)</title><rect x="250.1" y="1811.0" width="393.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="253.1" y="1822.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (444 samples, 32.50%)</title><rect x="250.1" y="1795.0" width="383.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="253.1" y="1806.0">com/linecorp/decaton/processor/runtime/ProcessPipeli..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="255.3" y="1779.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="258.3" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (142 samples, 10.40%)</title><rect x="256.2" y="1779.0" width="122.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="259.2" y="1790.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (142 samples, 10.40%)</title><rect x="256.2" y="1763.0" width="122.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.2" y="1774.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (142 samples, 10.40%)</title><rect x="256.2" y="1747.0" width="122.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="259.2" y="1758.0">com/linecorp/de..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="256.2" y="1731.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="259.2" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="256.2" y="1715.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="259.2" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="256.2" y="1699.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="259.2" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="256.2" y="1683.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="259.2" y="1694.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="256.2" y="1667.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="259.2" y="1678.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="256.2" y="1651.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="259.2" y="1662.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (1 samples, 0.07%)</title><rect x="256.2" y="1635.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="259.2" y="1646.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit_prologue() (1 samples, 0.07%)</title><rect x="256.2" y="1619.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="259.2" y="1630.0"></text>
</g>
<g>
<title>InstanceRefKlass::acquire_pending_list_lock(BasicLock*) (1 samples, 0.07%)</title><rect x="256.2" y="1603.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="259.2" y="1614.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (141 samples, 10.32%)</title><rect x="257.1" y="1731.0" width="121.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="260.1" y="1742.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (141 samples, 10.32%)</title><rect x="257.1" y="1715.0" width="121.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="260.1" y="1726.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (141 samples, 10.32%)</title><rect x="257.1" y="1699.0" width="121.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="260.1" y="1710.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (44 samples, 3.22%)</title><rect x="257.1" y="1683.0" width="38.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.1" y="1694.0">com..</text>
</g>
<g>
<title>[vdso] (4 samples, 0.29%)</title><rect x="270.0" y="1667.0" width="3.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="273.0" y="1678.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.22%)</title><rect x="273.5" y="1667.0" width="2.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="276.5" y="1678.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.15%)</title><rect x="274.3" y="1651.0" width="1.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="277.3" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 0.29%)</title><rect x="276.1" y="1667.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.1" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.22%)</title><rect x="276.9" y="1651.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="279.9" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.22%)</title><rect x="276.9" y="1635.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="279.9" y="1646.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.22%)</title><rect x="276.9" y="1619.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.9" y="1630.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.22%)</title><rect x="276.9" y="1603.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.9" y="1614.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.22%)</title><rect x="276.9" y="1587.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.9" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (18 samples, 1.32%)</title><rect x="279.5" y="1667.0" width="15.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="282.5" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (15 samples, 1.10%)</title><rect x="279.5" y="1651.0" width="13.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="282.5" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 0.37%)</title><rect x="284.7" y="1635.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="287.7" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (5 samples, 0.37%)</title><rect x="284.7" y="1619.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="287.7" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 0.29%)</title><rect x="289.0" y="1635.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="292.0" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 0.29%)</title><rect x="289.0" y="1619.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.0" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.29%)</title><rect x="289.0" y="1603.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="292.0" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 0.22%)</title><rect x="292.5" y="1651.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.5" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (88 samples, 6.44%)</title><rect x="295.1" y="1683.0" width="76.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="298.1" y="1694.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.07%)</title><rect x="295.9" y="1667.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="298.9" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.07%)</title><rect x="296.8" y="1667.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="299.8" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.15%)</title><rect x="297.7" y="1667.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="300.7" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="298.5" y="1651.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="301.5" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.59%)</title><rect x="299.4" y="1667.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="302.4" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.51%)</title><rect x="300.2" y="1651.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="303.2" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.44%)</title><rect x="301.1" y="1635.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="304.1" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.29%)</title><rect x="302.8" y="1619.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="305.8" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.07%)</title><rect x="305.4" y="1603.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="308.4" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.29%)</title><rect x="306.3" y="1667.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="309.3" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.22%)</title><rect x="307.2" y="1651.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="310.2" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (69 samples, 5.05%)</title><rect x="309.8" y="1667.0" width="59.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="312.8" y="1678.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.17%)</title><rect x="311.5" y="1651.0" width="13.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="314.5" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.07%)</title><rect x="317.5" y="1635.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="320.5" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.37%)</title><rect x="318.4" y="1635.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="321.4" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.37%)</title><rect x="318.4" y="1619.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="321.4" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.37%)</title><rect x="318.4" y="1603.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="321.4" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (3 samples, 0.22%)</title><rect x="322.7" y="1635.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="325.7" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 0.22%)</title><rect x="325.3" y="1651.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="328.3" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (48 samples, 3.51%)</title><rect x="327.9" y="1651.0" width="41.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="330.9" y="1662.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (48 samples, 3.51%)</title><rect x="327.9" y="1635.0" width="41.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="330.9" y="1646.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (47 samples, 3.44%)</title><rect x="328.8" y="1619.0" width="40.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="331.8" y="1630.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.32%)</title><rect x="333.1" y="1603.0" width="15.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="336.1" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.22%)</title><rect x="333.9" y="1587.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="336.9" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (11 samples, 0.81%)</title><rect x="336.5" y="1587.0" width="9.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="339.5" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (11 samples, 0.81%)</title><rect x="336.5" y="1571.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="339.5" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (11 samples, 0.81%)</title><rect x="336.5" y="1555.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="339.5" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (6 samples, 0.44%)</title><rect x="340.8" y="1539.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="343.8" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (6 samples, 0.44%)</title><rect x="340.8" y="1523.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="343.8" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (4 samples, 0.29%)</title><rect x="342.6" y="1507.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="345.6" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (4 samples, 0.29%)</title><rect x="342.6" y="1491.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="345.6" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.22%)</title><rect x="346.0" y="1587.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="349.0" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.22%)</title><rect x="346.0" y="1571.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="349.0" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="347.8" y="1555.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="350.8" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (10 samples, 0.73%)</title><rect x="348.6" y="1603.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="351.6" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (8 samples, 0.59%)</title><rect x="350.4" y="1587.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="353.4" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.59%)</title><rect x="350.4" y="1571.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="353.4" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.59%)</title><rect x="350.4" y="1555.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="353.4" y="1566.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (8 samples, 0.59%)</title><rect x="350.4" y="1539.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="353.4" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.07%)</title><rect x="357.3" y="1603.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="360.3" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 0.29%)</title><rect x="358.1" y="1603.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="361.1" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (4 samples, 0.29%)</title><rect x="358.1" y="1587.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="361.1" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 0.29%)</title><rect x="358.1" y="1571.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="361.1" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (4 samples, 0.29%)</title><rect x="358.1" y="1555.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="361.1" y="1566.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.29%)</title><rect x="358.1" y="1539.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="361.1" y="1550.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.29%)</title><rect x="358.1" y="1523.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="361.1" y="1534.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (4 samples, 0.29%)</title><rect x="358.1" y="1507.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="361.1" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.29%)</title><rect x="361.6" y="1603.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="364.6" y="1614.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.29%)</title><rect x="361.6" y="1587.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="364.6" y="1598.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.29%)</title><rect x="361.6" y="1571.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="364.6" y="1582.0"></text>
</g>
<g>
<title>_new_array_Java (1 samples, 0.07%)</title><rect x="363.3" y="1555.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="366.3" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="364.2" y="1555.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="367.2" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (5 samples, 0.37%)</title><rect x="365.0" y="1603.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="368.0" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.15%)</title><rect x="367.6" y="1587.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="370.6" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.15%)</title><rect x="369.4" y="1667.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="372.4" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (9 samples, 0.66%)</title><rect x="371.1" y="1683.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="374.1" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.07%)</title><rect x="371.1" y="1667.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="374.1" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (8 samples, 0.59%)</title><rect x="371.9" y="1667.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="374.9" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (8 samples, 0.59%)</title><rect x="371.9" y="1651.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="374.9" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (8 samples, 0.59%)</title><rect x="371.9" y="1635.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="374.9" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.59%)</title><rect x="371.9" y="1619.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="374.9" y="1630.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (280 samples, 20.50%)</title><rect x="378.9" y="1779.0" width="241.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="381.9" y="1790.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (46 samples, 3.37%)</title><rect x="379.7" y="1763.0" width="39.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="382.7" y="1774.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.07%)</title><rect x="379.7" y="1747.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="382.7" y="1758.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (45 samples, 3.29%)</title><rect x="380.6" y="1747.0" width="38.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="383.6" y="1758.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (40 samples, 2.93%)</title><rect x="384.9" y="1731.0" width="34.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="387.9" y="1742.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (15 samples, 1.10%)</title><rect x="384.9" y="1715.0" width="13.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="387.9" y="1726.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (15 samples, 1.10%)</title><rect x="384.9" y="1699.0" width="13.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="387.9" y="1710.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.59%)</title><rect x="391.0" y="1683.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="394.0" y="1694.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.59%)</title><rect x="391.0" y="1667.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="394.0" y="1678.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (8 samples, 0.59%)</title><rect x="391.0" y="1651.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="394.0" y="1662.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="397.9" y="1715.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="400.9" y="1726.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="397.9" y="1699.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="400.9" y="1710.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="397.9" y="1683.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="400.9" y="1694.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (24 samples, 1.76%)</title><rect x="398.7" y="1715.0" width="20.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="401.7" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (21 samples, 1.54%)</title><rect x="401.3" y="1699.0" width="18.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="404.3" y="1710.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.07%)</title><rect x="402.2" y="1683.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="405.2" y="1694.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (9 samples, 0.66%)</title><rect x="403.0" y="1683.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="406.0" y="1694.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (9 samples, 0.66%)</title><rect x="403.0" y="1667.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="406.0" y="1678.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 0.73%)</title><rect x="410.8" y="1683.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="413.8" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (10 samples, 0.73%)</title><rect x="419.5" y="1763.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="422.5" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.59%)</title><rect x="421.2" y="1747.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="424.2" y="1758.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (8 samples, 0.59%)</title><rect x="421.2" y="1731.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="424.2" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (153 samples, 11.20%)</title><rect x="428.1" y="1763.0" width="132.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="431.1" y="1774.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (153 samples, 11.20%)</title><rect x="428.1" y="1747.0" width="132.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="431.1" y="1758.0">com/linecorp/dec..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.37%)</title><rect x="428.1" y="1731.0" width="4.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="431.1" y="1742.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.37%)</title><rect x="428.1" y="1715.0" width="4.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="431.1" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (65 samples, 4.76%)</title><rect x="432.4" y="1731.0" width="56.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="435.4" y="1742.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (65 samples, 4.76%)</title><rect x="432.4" y="1715.0" width="56.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="435.4" y="1726.0">java/l..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (38 samples, 2.78%)</title><rect x="448.0" y="1699.0" width="32.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="451.0" y="1710.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (16 samples, 1.17%)</title><rect x="458.3" y="1683.0" width="13.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="461.3" y="1694.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (16 samples, 1.17%)</title><rect x="458.3" y="1667.0" width="13.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="461.3" y="1678.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (16 samples, 1.17%)</title><rect x="458.3" y="1651.0" width="13.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="461.3" y="1662.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (8 samples, 0.59%)</title><rect x="462.7" y="1635.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="465.7" y="1646.0"></text>
</g>
<g>
<title>CodeBlob::is_nmethod() const (1 samples, 0.07%)</title><rect x="462.7" y="1619.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="465.7" y="1630.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.37%)</title><rect x="463.5" y="1619.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="466.5" y="1630.0"></text>
</g>
<g>
<title>CodeBlob::is_nmethod() const (1 samples, 0.07%)</title><rect x="463.5" y="1603.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="466.5" y="1614.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.07%)</title><rect x="464.4" y="1603.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="467.4" y="1614.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="465.2" y="1603.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="468.2" y="1614.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.15%)</title><rect x="466.1" y="1603.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="469.1" y="1614.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.15%)</title><rect x="466.1" y="1587.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="469.1" y="1598.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="466.1" y="1571.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="469.1" y="1582.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.07%)</title><rect x="467.0" y="1571.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="470.0" y="1582.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.15%)</title><rect x="467.8" y="1619.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="470.8" y="1630.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="467.8" y="1603.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="470.8" y="1614.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.07%)</title><rect x="467.8" y="1587.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="470.8" y="1598.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.07%)</title><rect x="468.7" y="1603.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="471.7" y="1614.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.22%)</title><rect x="469.6" y="1635.0" width="2.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="472.6" y="1646.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.51%)</title><rect x="472.2" y="1683.0" width="6.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="475.2" y="1694.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="478.2" y="1683.0" width="1.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="481.2" y="1694.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="479.9" y="1683.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="482.9" y="1694.0"></text>
</g>
<g>
<title>jshort_arraycopy (4 samples, 0.29%)</title><rect x="480.8" y="1699.0" width="3.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="483.8" y="1710.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.37%)</title><rect x="484.2" y="1699.0" width="4.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="487.2" y="1710.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (5 samples, 0.37%)</title><rect x="488.6" y="1731.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="491.6" y="1742.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.07%)</title><rect x="488.6" y="1715.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="491.6" y="1726.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="488.6" y="1699.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="491.6" y="1710.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="488.6" y="1683.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="491.6" y="1694.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="488.6" y="1667.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="491.6" y="1678.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.29%)</title><rect x="489.4" y="1715.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="492.4" y="1726.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.29%)</title><rect x="489.4" y="1699.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="492.4" y="1710.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (78 samples, 5.71%)</title><rect x="492.9" y="1731.0" width="67.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="495.9" y="1742.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (72 samples, 5.27%)</title><rect x="497.2" y="1715.0" width="62.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="500.2" y="1726.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (20 samples, 1.46%)</title><rect x="497.2" y="1699.0" width="17.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="500.2" y="1710.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (20 samples, 1.46%)</title><rect x="497.2" y="1683.0" width="17.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="500.2" y="1694.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (10 samples, 0.73%)</title><rect x="505.8" y="1667.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="508.8" y="1678.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (10 samples, 0.73%)</title><rect x="505.8" y="1651.0" width="8.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="508.8" y="1662.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (10 samples, 0.73%)</title><rect x="505.8" y="1635.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="508.8" y="1646.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="514.5" y="1699.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="517.5" y="1710.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="514.5" y="1683.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="517.5" y="1694.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="514.5" y="1667.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="517.5" y="1678.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="514.5" y="1651.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="517.5" y="1662.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (51 samples, 3.73%)</title><rect x="515.3" y="1699.0" width="44.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="518.3" y="1710.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (45 samples, 3.29%)</title><rect x="520.5" y="1683.0" width="38.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="523.5" y="1694.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 0.44%)</title><rect x="523.1" y="1667.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="526.1" y="1678.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.44%)</title><rect x="523.1" y="1651.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="526.1" y="1662.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (36 samples, 2.64%)</title><rect x="528.3" y="1667.0" width="31.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="531.3" y="1678.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.07%)</title><rect x="545.6" y="1651.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="548.6" y="1662.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (12 samples, 0.88%)</title><rect x="546.4" y="1651.0" width="10.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="549.4" y="1662.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (5 samples, 0.37%)</title><rect x="552.5" y="1635.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="555.5" y="1646.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.22%)</title><rect x="554.2" y="1619.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="557.2" y="1630.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.22%)</title><rect x="554.2" y="1603.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="557.2" y="1614.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="555.9" y="1587.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="558.9" y="1598.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.07%)</title><rect x="555.9" y="1571.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="558.9" y="1582.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.22%)</title><rect x="556.8" y="1651.0" width="2.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="559.8" y="1662.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.07%)</title><rect x="559.4" y="1715.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="562.4" y="1726.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.07%)</title><rect x="559.4" y="1699.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="562.4" y="1710.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.07%)</title><rect x="559.4" y="1683.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="562.4" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (50 samples, 3.66%)</title><rect x="560.3" y="1763.0" width="43.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="563.3" y="1774.0">com/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.07%)</title><rect x="560.3" y="1747.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="563.3" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (49 samples, 3.59%)</title><rect x="561.1" y="1747.0" width="42.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="564.1" y="1758.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1850758064.process (21 samples, 1.54%)</title><rect x="564.6" y="1731.0" width="18.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="567.6" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (20 samples, 1.46%)</title><rect x="564.6" y="1715.0" width="17.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="567.6" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (19 samples, 1.39%)</title><rect x="565.4" y="1699.0" width="16.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="568.4" y="1710.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.15%)</title><rect x="566.3" y="1683.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="569.3" y="1694.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.15%)</title><rect x="566.3" y="1667.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="569.3" y="1678.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.15%)</title><rect x="566.3" y="1651.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="569.3" y="1662.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.15%)</title><rect x="566.3" y="1635.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="569.3" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.15%)</title><rect x="566.3" y="1619.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="569.3" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.07%)</title><rect x="567.2" y="1603.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="570.2" y="1614.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (7 samples, 0.51%)</title><rect x="568.0" y="1683.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="571.0" y="1694.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.44%)</title><rect x="568.9" y="1667.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="571.9" y="1678.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.44%)</title><rect x="568.9" y="1651.0" width="5.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="571.9" y="1662.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.66%)</title><rect x="574.1" y="1683.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="577.1" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="581.9" y="1715.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="584.9" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="582.7" y="1731.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="585.7" y="1742.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.07%)</title><rect x="582.7" y="1715.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="585.7" y="1726.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (8 samples, 0.59%)</title><rect x="583.6" y="1731.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="586.6" y="1742.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (8 samples, 0.59%)</title><rect x="583.6" y="1715.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="586.6" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/2004068025.get$Lambda (8 samples, 0.59%)</title><rect x="583.6" y="1699.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="586.6" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/2004068025.&lt;init&gt; (8 samples, 0.59%)</title><rect x="583.6" y="1683.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="586.6" y="1694.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (10 samples, 0.73%)</title><rect x="590.5" y="1731.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="593.5" y="1742.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (10 samples, 0.73%)</title><rect x="590.5" y="1715.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="593.5" y="1726.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.37%)</title><rect x="590.5" y="1699.0" width="4.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="593.5" y="1710.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (5 samples, 0.37%)</title><rect x="594.8" y="1699.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="597.8" y="1710.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.37%)</title><rect x="599.1" y="1731.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="602.1" y="1742.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.07%)</title><rect x="602.6" y="1715.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="605.6" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (20 samples, 1.46%)</title><rect x="603.5" y="1763.0" width="17.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="606.5" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (20 samples, 1.46%)</title><rect x="603.5" y="1747.0" width="17.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="606.5" y="1758.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="604.3" y="1731.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="607.3" y="1742.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.37%)</title><rect x="605.2" y="1731.0" width="4.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="608.2" y="1742.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.37%)</title><rect x="605.2" y="1715.0" width="4.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="608.2" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 0.88%)</title><rect x="609.5" y="1731.0" width="10.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="612.5" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$267/930014169.accept (12 samples, 0.88%)</title><rect x="609.5" y="1715.0" width="10.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="612.5" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (12 samples, 0.88%)</title><rect x="609.5" y="1699.0" width="10.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="612.5" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (12 samples, 0.88%)</title><rect x="609.5" y="1683.0" width="10.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="612.5" y="1694.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (12 samples, 0.88%)</title><rect x="609.5" y="1667.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="612.5" y="1678.0"></text>
</g>
<g>
<title>java/time/Duration.create (12 samples, 0.88%)</title><rect x="609.5" y="1651.0" width="10.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="612.5" y="1662.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.51%)</title><rect x="613.8" y="1635.0" width="6.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="616.8" y="1646.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.51%)</title><rect x="613.8" y="1619.0" width="6.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="616.8" y="1630.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="619.9" y="1731.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="622.9" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 0.81%)</title><rect x="620.7" y="1779.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="623.7" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 0.81%)</title><rect x="620.7" y="1763.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="623.7" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.81%)</title><rect x="620.7" y="1747.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="623.7" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$267/930014169.accept (11 samples, 0.81%)</title><rect x="620.7" y="1731.0" width="9.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="623.7" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (11 samples, 0.81%)</title><rect x="620.7" y="1715.0" width="9.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="623.7" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (11 samples, 0.81%)</title><rect x="620.7" y="1699.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="623.7" y="1710.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (11 samples, 0.81%)</title><rect x="620.7" y="1683.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="623.7" y="1694.0"></text>
</g>
<g>
<title>java/time/Duration.create (11 samples, 0.81%)</title><rect x="620.7" y="1667.0" width="9.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="623.7" y="1678.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.29%)</title><rect x="630.2" y="1779.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="633.2" y="1790.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.29%)</title><rect x="630.2" y="1763.0" width="3.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="633.2" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (11 samples, 0.81%)</title><rect x="633.7" y="1795.0" width="9.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="636.7" y="1806.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.29%)</title><rect x="638.9" y="1779.0" width="3.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="641.9" y="1790.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="639.7" y="1763.0" width="2.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="642.7" y="1774.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="642.3" y="1779.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="645.3" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (215 samples, 15.74%)</title><rect x="643.2" y="1843.0" width="185.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="646.2" y="1854.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (214 samples, 15.67%)</title><rect x="644.1" y="1827.0" width="184.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="647.1" y="1838.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (167 samples, 12.23%)</title><rect x="681.2" y="1811.0" width="144.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="684.2" y="1822.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (15 samples, 1.10%)</title><rect x="684.7" y="1795.0" width="12.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="687.7" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 1.10%)</title><rect x="684.7" y="1779.0" width="12.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="687.7" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 1.10%)</title><rect x="684.7" y="1763.0" width="12.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="687.7" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (15 samples, 1.10%)</title><rect x="684.7" y="1747.0" width="12.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="687.7" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (147 samples, 10.76%)</title><rect x="697.6" y="1795.0" width="127.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="700.6" y="1806.0">java/util/concur..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (146 samples, 10.69%)</title><rect x="698.5" y="1779.0" width="126.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="701.5" y="1790.0">sun/misc/Unsafe...</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.15%)</title><rect x="702.8" y="1763.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="705.8" y="1774.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="704.5" y="1763.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="707.5" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Park (135 samples, 9.88%)</title><rect x="705.4" y="1763.0" width="116.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="708.4" y="1774.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.22%)</title><rect x="707.1" y="1747.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="710.1" y="1758.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (26 samples, 1.90%)</title><rect x="709.7" y="1747.0" width="22.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="712.7" y="1758.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (13 samples, 0.95%)</title><rect x="717.5" y="1731.0" width="11.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="720.5" y="1742.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="717.5" y="1715.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="720.5" y="1726.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.44%)</title><rect x="718.3" y="1715.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="721.3" y="1726.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.22%)</title><rect x="720.9" y="1699.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="723.9" y="1710.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.15%)</title><rect x="723.5" y="1715.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="726.5" y="1726.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="725.3" y="1715.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="728.3" y="1726.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.22%)</title><rect x="726.1" y="1715.0" width="2.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="729.1" y="1726.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="728.7" y="1731.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="731.7" y="1742.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.22%)</title><rect x="729.6" y="1731.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="732.6" y="1742.0"></text>
</g>
<g>
<title>__lll_lock_wait (9 samples, 0.66%)</title><rect x="732.2" y="1747.0" width="7.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="735.2" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (31 samples, 2.27%)</title><rect x="739.9" y="1747.0" width="26.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="742.9" y="1758.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (40 samples, 2.93%)</title><rect x="766.7" y="1747.0" width="34.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="769.7" y="1758.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (8 samples, 0.59%)</title><rect x="801.3" y="1747.0" width="6.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="804.3" y="1758.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.22%)</title><rect x="808.2" y="1747.0" width="2.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="811.2" y="1758.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.22%)</title><rect x="810.8" y="1747.0" width="2.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="813.8" y="1758.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.22%)</title><rect x="813.4" y="1747.0" width="2.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="816.4" y="1758.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.07%)</title><rect x="816.0" y="1747.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="819.0" y="1758.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.29%)</title><rect x="816.8" y="1747.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="819.8" y="1758.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.15%)</title><rect x="820.3" y="1747.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="823.3" y="1758.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.15%)</title><rect x="822.0" y="1763.0" width="1.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="825.0" y="1774.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="823.7" y="1763.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="826.7" y="1774.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.07%)</title><rect x="824.6" y="1795.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="827.6" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.07%)</title><rect x="825.5" y="1811.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="828.5" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.07%)</title><rect x="825.5" y="1795.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="828.5" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="825.5" y="1779.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="828.5" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="825.5" y="1763.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="828.5" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="825.5" y="1747.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="828.5" y="1758.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.07%)</title><rect x="825.5" y="1731.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="828.5" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.22%)</title><rect x="826.3" y="1811.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="829.3" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.22%)</title><rect x="826.3" y="1795.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="829.3" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.22%)</title><rect x="826.3" y="1779.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="829.3" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.22%)</title><rect x="826.3" y="1763.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="829.3" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="828.9" y="1891.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="831.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="828.9" y="1875.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="831.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="828.9" y="1859.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="831.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.07%)</title><rect x="828.9" y="1843.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="831.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.07%)</title><rect x="828.9" y="1827.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="831.9" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.07%)</title><rect x="828.9" y="1811.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="831.9" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.07%)</title><rect x="828.9" y="1795.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="831.9" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="828.9" y="1779.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="831.9" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="828.9" y="1763.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="831.9" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.07%)</title><rect x="828.9" y="1747.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="831.9" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.07%)</title><rect x="828.9" y="1731.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="831.9" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.findMissing (1 samples, 0.07%)</title><rect x="828.9" y="1715.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="831.9" y="1726.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.contains (1 samples, 0.07%)</title><rect x="828.9" y="1699.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="831.9" y="1710.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="828.9" y="1683.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="831.9" y="1694.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="828.9" y="1667.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="831.9" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.07%)</title><rect x="828.9" y="1651.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="831.9" y="1662.0"></text>
</g>
<g>
<title>start_thread (416 samples, 30.45%)</title><rect x="829.8" y="1891.0" width="359.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="832.8" y="1902.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (416 samples, 30.45%)</title><rect x="829.8" y="1875.0" width="359.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="832.8" y="1886.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 1.68%)</title><rect x="829.8" y="1859.0" width="19.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="832.8" y="1870.0"></text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.07%)</title><rect x="829.8" y="1843.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="832.8" y="1854.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (6 samples, 0.44%)</title><rect x="830.6" y="1843.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="833.6" y="1854.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.44%)</title><rect x="830.6" y="1827.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="833.6" y="1838.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.07%)</title><rect x="830.6" y="1811.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="833.6" y="1822.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.37%)</title><rect x="831.5" y="1811.0" width="4.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="834.5" y="1822.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 1.10%)</title><rect x="835.8" y="1843.0" width="13.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="838.8" y="1854.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.15%)</title><rect x="835.8" y="1827.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="838.8" y="1838.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.07%)</title><rect x="835.8" y="1811.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="838.8" y="1822.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.07%)</title><rect x="835.8" y="1795.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="838.8" y="1806.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.07%)</title><rect x="836.7" y="1811.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="839.7" y="1822.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.37%)</title><rect x="837.6" y="1827.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="840.6" y="1838.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.37%)</title><rect x="837.6" y="1811.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="840.6" y="1822.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.22%)</title><rect x="837.6" y="1795.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="840.6" y="1806.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="839.3" y="1779.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="842.3" y="1790.0"></text>
</g>
<g>
<title>SymbolPropertyTable::oops_do(OopClosure*) (1 samples, 0.07%)</title><rect x="840.1" y="1795.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="843.1" y="1806.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.07%)</title><rect x="841.0" y="1795.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="844.0" y="1806.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.07%)</title><rect x="841.0" y="1779.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="844.0" y="1790.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (8 samples, 0.59%)</title><rect x="841.9" y="1827.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="844.9" y="1838.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (8 samples, 0.59%)</title><rect x="841.9" y="1811.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="844.9" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.51%)</title><rect x="841.9" y="1795.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="844.9" y="1806.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.51%)</title><rect x="841.9" y="1779.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="844.9" y="1790.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.51%)</title><rect x="841.9" y="1763.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="844.9" y="1774.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.51%)</title><rect x="841.9" y="1747.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="844.9" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.07%)</title><rect x="842.7" y="1731.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="845.7" y="1742.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.37%)</title><rect x="843.6" y="1731.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="846.6" y="1742.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.15%)</title><rect x="843.6" y="1715.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="846.6" y="1726.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.15%)</title><rect x="845.3" y="1715.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="848.3" y="1726.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.07%)</title><rect x="847.1" y="1715.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="850.1" y="1726.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.07%)</title><rect x="847.1" y="1699.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="850.1" y="1710.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.07%)</title><rect x="847.9" y="1795.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="850.9" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::start_cset_region_for_worker(unsigned int) (1 samples, 0.07%)</title><rect x="847.9" y="1779.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="850.9" y="1790.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.07%)</title><rect x="848.8" y="1843.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="851.8" y="1854.0"></text>
</g>
<g>
<title>JavaThread::run() (391 samples, 28.62%)</title><rect x="849.6" y="1859.0" width="337.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="852.6" y="1870.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (391 samples, 28.62%)</title><rect x="849.6" y="1843.0" width="337.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="852.6" y="1854.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (390 samples, 28.55%)</title><rect x="849.6" y="1827.0" width="336.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="852.6" y="1838.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (389 samples, 28.48%)</title><rect x="849.6" y="1811.0" width="336.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="852.6" y="1822.0">CompileBroker::invoke_compiler_on_method(Compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (389 samples, 28.48%)</title><rect x="849.6" y="1795.0" width="336.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="852.6" y="1806.0">C2Compiler::compile_method(ciEnv*, ciMethod*, ..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (389 samples, 28.48%)</title><rect x="849.6" y="1779.0" width="336.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="852.6" y="1790.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.07%)</title><rect x="849.6" y="1763.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="852.6" y="1774.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.07%)</title><rect x="849.6" y="1747.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="852.6" y="1758.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="849.6" y="1731.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="852.6" y="1742.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="849.6" y="1715.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="852.6" y="1726.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="849.6" y="1699.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="852.6" y="1710.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="849.6" y="1683.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="852.6" y="1694.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="849.6" y="1667.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="852.6" y="1678.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (135 samples, 9.88%)</title><rect x="850.5" y="1763.0" width="116.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="853.5" y="1774.0">Compile::Code_..</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.29%)</title><rect x="850.5" y="1747.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="853.5" y="1758.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.22%)</title><rect x="850.5" y="1731.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="853.5" y="1742.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.07%)</title><rect x="851.4" y="1715.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="854.4" y="1726.0"></text>
</g>
<g>
<title>OopFlow::make(Arena*, int, Compile*) (1 samples, 0.07%)</title><rect x="852.2" y="1715.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="855.2" y="1726.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.07%)</title><rect x="853.1" y="1731.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="856.1" y="1742.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.07%)</title><rect x="853.1" y="1715.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="856.1" y="1726.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.07%)</title><rect x="853.1" y="1699.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="856.1" y="1710.0"></text>
</g>
<g>
<title>loadConNKlassNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.07%)</title><rect x="853.1" y="1683.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="856.1" y="1694.0"></text>
</g>
<g>
<title>MacroAssembler::set_narrow_klass(RegisterImpl*, Klass*) (1 samples, 0.07%)</title><rect x="853.1" y="1667.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="856.1" y="1678.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.07%)</title><rect x="853.1" y="1651.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="856.1" y="1662.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_initialize() (1 samples, 0.07%)</title><rect x="853.1" y="1635.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="856.1" y="1646.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (7 samples, 0.51%)</title><rect x="854.0" y="1747.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="857.0" y="1758.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.22%)</title><rect x="854.8" y="1731.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="857.8" y="1742.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.15%)</title><rect x="854.8" y="1715.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="857.8" y="1726.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.15%)</title><rect x="854.8" y="1699.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="857.8" y="1710.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="856.6" y="1715.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="859.6" y="1726.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="856.6" y="1699.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="859.6" y="1710.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (3 samples, 0.22%)</title><rect x="857.4" y="1731.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="860.4" y="1742.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (3 samples, 0.22%)</title><rect x="857.4" y="1715.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="860.4" y="1726.0"></text>
</g>
<g>
<title>Matcher::match() (12 samples, 0.88%)</title><rect x="860.0" y="1747.0" width="10.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="863.0" y="1758.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.07%)</title><rect x="860.0" y="1731.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="863.0" y="1742.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (11 samples, 0.81%)</title><rect x="860.9" y="1731.0" width="9.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="863.9" y="1742.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (10 samples, 0.73%)</title><rect x="861.7" y="1715.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="864.7" y="1726.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (9 samples, 0.66%)</title><rect x="870.4" y="1747.0" width="7.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="873.4" y="1758.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.07%)</title><rect x="870.4" y="1731.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="873.4" y="1742.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (8 samples, 0.59%)</title><rect x="871.2" y="1731.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="874.2" y="1742.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.07%)</title><rect x="871.2" y="1715.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="874.2" y="1726.0"></text>
</g>
<g>
<title>PhaseCFG::latency_from_uses(Node*) (1 samples, 0.07%)</title><rect x="871.2" y="1699.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="874.2" y="1710.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="872.1" y="1715.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="875.1" y="1726.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (5 samples, 0.37%)</title><rect x="873.0" y="1715.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="876.0" y="1726.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.07%)</title><rect x="873.0" y="1699.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="876.0" y="1710.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.07%)</title><rect x="873.8" y="1699.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="876.8" y="1710.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.15%)</title><rect x="874.7" y="1699.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="877.7" y="1710.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.07%)</title><rect x="875.6" y="1683.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="878.6" y="1694.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.07%)</title><rect x="875.6" y="1667.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="878.6" y="1678.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.07%)</title><rect x="876.4" y="1699.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="879.4" y="1710.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1715.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="880.3" y="1726.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.07%)</title><rect x="878.2" y="1747.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="881.2" y="1758.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (102 samples, 7.47%)</title><rect x="879.0" y="1747.0" width="88.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="882.0" y="1758.0">PhaseChait..</text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.07%)</title><rect x="879.0" y="1731.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="882.0" y="1742.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.07%)</title><rect x="879.9" y="1731.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="882.9" y="1742.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.07%)</title><rect x="880.7" y="1731.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="883.7" y="1742.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.15%)</title><rect x="881.6" y="1731.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="884.6" y="1742.0"></text>
</g>
<g>
<title>LiveRangeMap::compress_uf_map_for_nodes() (1 samples, 0.07%)</title><rect x="882.5" y="1715.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="885.5" y="1726.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (6 samples, 0.44%)</title><rect x="883.3" y="1731.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="886.3" y="1742.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="883.3" y="1715.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="886.3" y="1726.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.07%)</title><rect x="884.2" y="1715.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="887.2" y="1726.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.07%)</title><rect x="884.2" y="1699.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="887.2" y="1710.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (4 samples, 0.29%)</title><rect x="885.1" y="1715.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="888.1" y="1726.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="885.9" y="1699.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="888.9" y="1710.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.15%)</title><rect x="886.8" y="1699.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="889.8" y="1710.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (7 samples, 0.51%)</title><rect x="888.5" y="1731.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="891.5" y="1742.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="888.5" y="1715.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="891.5" y="1726.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (6 samples, 0.44%)</title><rect x="889.4" y="1715.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="892.4" y="1726.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.22%)</title><rect x="892.0" y="1699.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="895.0" y="1710.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (13 samples, 0.95%)</title><rect x="894.6" y="1731.0" width="11.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="897.6" y="1742.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.07%)</title><rect x="904.9" y="1715.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="907.9" y="1726.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (16 samples, 1.17%)</title><rect x="905.8" y="1731.0" width="13.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="908.8" y="1742.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (3 samples, 0.22%)</title><rect x="910.1" y="1715.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="913.1" y="1726.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="911.8" y="1699.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="914.8" y="1710.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (8 samples, 0.59%)</title><rect x="912.7" y="1715.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="915.7" y="1726.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.22%)</title><rect x="917.0" y="1699.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="920.0" y="1710.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.15%)</title><rect x="919.6" y="1731.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="922.6" y="1742.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.15%)</title><rect x="919.6" y="1715.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="922.6" y="1726.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.22%)</title><rect x="921.3" y="1731.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="924.3" y="1742.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="923.1" y="1715.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="926.1" y="1726.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (9 samples, 0.66%)</title><rect x="923.9" y="1731.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="926.9" y="1742.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (7 samples, 0.51%)</title><rect x="924.8" y="1715.0" width="6.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="927.8" y="1726.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1699.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="933.0" y="1710.0"></text>
</g>
<g>
<title>RegMask::num_registers(unsigned int) (1 samples, 0.07%)</title><rect x="930.8" y="1715.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="933.8" y="1726.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.07%)</title><rect x="931.7" y="1731.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="934.7" y="1742.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (14 samples, 1.02%)</title><rect x="932.6" y="1731.0" width="12.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="935.6" y="1742.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 0.15%)</title><rect x="932.6" y="1715.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="935.6" y="1726.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.07%)</title><rect x="933.4" y="1699.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="936.4" y="1710.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (12 samples, 0.88%)</title><rect x="934.3" y="1715.0" width="10.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="937.3" y="1726.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (2 samples, 0.15%)</title><rect x="935.2" y="1699.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="938.2" y="1710.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (9 samples, 0.66%)</title><rect x="936.9" y="1699.0" width="7.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="939.9" y="1710.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (7 samples, 0.51%)</title><rect x="936.9" y="1683.0" width="6.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="939.9" y="1694.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.15%)</title><rect x="942.9" y="1683.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="945.9" y="1694.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 0.29%)</title><rect x="944.7" y="1731.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="947.7" y="1742.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.29%)</title><rect x="944.7" y="1715.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="947.7" y="1726.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (6 samples, 0.44%)</title><rect x="948.1" y="1731.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="951.1" y="1742.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.22%)</title><rect x="950.7" y="1715.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="953.7" y="1726.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (12 samples, 0.88%)</title><rect x="953.3" y="1731.0" width="10.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="956.3" y="1742.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (5 samples, 0.37%)</title><rect x="959.4" y="1715.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="962.4" y="1726.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="960.2" y="1699.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="963.2" y="1710.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.22%)</title><rect x="961.1" y="1699.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="964.1" y="1710.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.07%)</title><rect x="963.7" y="1731.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="966.7" y="1742.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.07%)</title><rect x="964.5" y="1731.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="967.5" y="1742.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.15%)</title><rect x="965.4" y="1731.0" width="1.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="968.4" y="1742.0"></text>
</g>
<g>
<title>Compile::Optimize() (238 samples, 17.42%)</title><rect x="967.1" y="1763.0" width="205.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="970.1" y="1774.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (9 samples, 0.66%)</title><rect x="967.1" y="1747.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="970.1" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (9 samples, 0.66%)</title><rect x="967.1" y="1731.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="970.1" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.1" y="1715.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="970.1" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="967.1" y="1699.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="970.1" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (8 samples, 0.59%)</title><rect x="968.0" y="1715.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="971.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (7 samples, 0.51%)</title><rect x="968.0" y="1699.0" width="6.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="971.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.44%)</title><rect x="968.0" y="1683.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="971.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (2 samples, 0.15%)</title><rect x="968.0" y="1667.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="971.0" y="1678.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="968.0" y="1651.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="971.0" y="1662.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="968.9" y="1651.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="971.9" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.29%)</title><rect x="969.7" y="1667.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="972.7" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.29%)</title><rect x="969.7" y="1651.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="972.7" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.29%)</title><rect x="969.7" y="1635.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="972.7" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="969.7" y="1619.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="972.7" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1603.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="972.7" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1587.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="972.7" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1571.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="972.7" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1555.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="972.7" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1539.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="972.7" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1523.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="972.7" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1507.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="972.7" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1491.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="972.7" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1475.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="972.7" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1459.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="972.7" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1443.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="972.7" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1427.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="972.7" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1411.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="972.7" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1395.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="972.7" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1379.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="972.7" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1363.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="972.7" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1347.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="972.7" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1331.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="972.7" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1315.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="972.7" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1299.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="972.7" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1283.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="972.7" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1267.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="972.7" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1251.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="972.7" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1235.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="972.7" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1219.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="972.7" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1203.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="972.7" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1187.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="972.7" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1171.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="972.7" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1155.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="972.7" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="972.7" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1123.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="972.7" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1107.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="972.7" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1091.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="972.7" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1075.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="972.7" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1059.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="972.7" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1043.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="972.7" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1027.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="972.7" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1011.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="972.7" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="995.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="972.7" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="979.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="972.7" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="963.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="972.7" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="947.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="972.7" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="931.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="972.7" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="915.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="972.7" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="899.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="972.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="883.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="972.7" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="867.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="972.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="851.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="972.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="835.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="972.7" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="819.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="972.7" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="803.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="972.7" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="787.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="972.7" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="771.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="972.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="755.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="972.7" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="739.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="972.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="723.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="972.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="707.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="972.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="691.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="972.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="675.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="972.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="659.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="972.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="643.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="972.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="627.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="972.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="611.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="972.7" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="595.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="972.7" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="579.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="972.7" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="563.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="972.7" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="547.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="972.7" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="531.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="972.7" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="515.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="972.7" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="499.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="972.7" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="483.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="972.7" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="467.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="972.7" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="451.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="972.7" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="435.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="972.7" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="419.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="972.7" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="403.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="972.7" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="387.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="972.7" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="371.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="972.7" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="355.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="972.7" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="339.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="972.7" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="323.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="972.7" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="307.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="972.7" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="291.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="972.7" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="275.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="972.7" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="259.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="972.7" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="243.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="972.7" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="227.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="972.7" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="211.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="972.7" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="195.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="972.7" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="179.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="972.7" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="163.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="972.7" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="147.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="972.7" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="131.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="972.7" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="115.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="972.7" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="99.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="972.7" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="83.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="972.7" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="67.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="972.7" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="51.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="972.7" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="969.7" y="35.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="972.7" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="970.6" y="1603.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="973.6" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="970.6" y="1587.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="973.6" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="970.6" y="1571.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="973.6" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="970.6" y="1555.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="973.6" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1539.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="973.6" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1523.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="973.6" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1507.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="973.6" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1491.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="973.6" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1475.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="973.6" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1459.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="973.6" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1443.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="973.6" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1427.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="973.6" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1411.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="973.6" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1395.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="973.6" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1379.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="973.6" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1363.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="973.6" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1347.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="973.6" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1331.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="973.6" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1315.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="973.6" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1299.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="973.6" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1283.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="973.6" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1267.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="973.6" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1251.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="973.6" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1235.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="973.6" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1219.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="973.6" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1203.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="973.6" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="973.6" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1171.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="973.6" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1155.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="973.6" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1139.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="973.6" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1123.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="973.6" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1107.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="973.6" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1091.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="973.6" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1075.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="973.6" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1059.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="973.6" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1043.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="973.6" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1027.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="973.6" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1011.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="973.6" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="995.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="973.6" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="979.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="973.6" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="963.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="973.6" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="947.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="973.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="931.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="973.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="915.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="973.6" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="899.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="973.6" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="883.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="973.6" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="867.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="973.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="851.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="973.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="835.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="973.6" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="819.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="973.6" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="803.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="973.6" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="787.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="973.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="771.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="973.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="755.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="973.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="739.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="973.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="723.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="973.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="707.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="973.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="691.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="973.6" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="675.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="973.6" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="659.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="973.6" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="643.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="973.6" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="627.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="973.6" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="611.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="973.6" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="595.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="973.6" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="579.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="973.6" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="563.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="973.6" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="547.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="973.6" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="531.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="973.6" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="515.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="973.6" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="499.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="973.6" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="483.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="973.6" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="467.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="973.6" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="451.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="973.6" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="435.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="973.6" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="419.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="973.6" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="403.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="973.6" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="387.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="973.6" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="371.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="973.6" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="355.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="973.6" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="339.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="973.6" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="323.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="973.6" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="307.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="973.6" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="291.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="973.6" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="275.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="973.6" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="259.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="973.6" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="243.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="973.6" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="227.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="973.6" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="211.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="973.6" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="195.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="973.6" y="206.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="970.6" y="179.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="973.6" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1539.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="974.4" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1523.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.4" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1507.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="974.4" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1491.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="974.4" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1475.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="974.4" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1459.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.4" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1443.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="974.4" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1427.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="974.4" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1411.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="974.4" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1395.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="974.4" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1379.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="974.4" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1363.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="974.4" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1347.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="974.4" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1331.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.4" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1315.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="974.4" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1299.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="974.4" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1283.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="974.4" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1267.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="974.4" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1251.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="974.4" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1235.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="974.4" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1219.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="974.4" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1203.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="974.4" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="971.4" y="1187.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="974.4" y="1198.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.07%)</title><rect x="971.4" y="1171.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="974.4" y="1182.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="971.4" y="1155.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="974.4" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.3" y="1619.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="975.3" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.3" y="1603.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="975.3" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.3" y="1587.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="975.3" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.3" y="1571.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="975.3" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.3" y="1555.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="975.3" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="972.3" y="1539.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="975.3" y="1550.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="973.2" y="1683.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="976.2" y="1694.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="973.2" y="1667.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="976.2" y="1678.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="973.2" y="1651.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="976.2" y="1662.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="974.0" y="1699.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="977.0" y="1710.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.15%)</title><rect x="974.9" y="1747.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="977.9" y="1758.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="975.8" y="1731.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="978.8" y="1742.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="975.8" y="1715.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="978.8" y="1726.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.07%)</title><rect x="975.8" y="1699.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="978.8" y="1710.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.07%)</title><rect x="975.8" y="1683.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="978.8" y="1694.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.07%)</title><rect x="975.8" y="1667.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="978.8" y="1678.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.15%)</title><rect x="976.6" y="1747.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="979.6" y="1758.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.15%)</title><rect x="976.6" y="1731.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="979.6" y="1742.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.07%)</title><rect x="977.5" y="1715.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="980.5" y="1726.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="977.5" y="1699.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="980.5" y="1710.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="977.5" y="1683.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="980.5" y="1694.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="977.5" y="1667.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="980.5" y="1678.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="977.5" y="1651.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="980.5" y="1662.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.07%)</title><rect x="977.5" y="1635.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="980.5" y="1646.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (2 samples, 0.15%)</title><rect x="978.4" y="1747.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="981.4" y="1758.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.15%)</title><rect x="978.4" y="1731.0" width="1.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="981.4" y="1742.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (198 samples, 14.49%)</title><rect x="980.1" y="1747.0" width="171.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="983.1" y="1758.0">PhaseIdealLoop::build_..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (3 samples, 0.22%)</title><rect x="980.1" y="1731.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="983.1" y="1742.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.15%)</title><rect x="980.1" y="1715.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="983.1" y="1726.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.15%)</title><rect x="980.1" y="1699.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="983.1" y="1710.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (2 samples, 0.15%)</title><rect x="980.1" y="1683.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="983.1" y="1694.0"></text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (2 samples, 0.15%)</title><rect x="980.1" y="1667.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="983.1" y="1678.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="981.0" y="1651.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="984.0" y="1662.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.07%)</title><rect x="981.8" y="1715.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="984.8" y="1726.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.07%)</title><rect x="981.8" y="1699.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="984.8" y="1710.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.07%)</title><rect x="981.8" y="1683.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="984.8" y="1694.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.07%)</title><rect x="982.7" y="1731.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="985.7" y="1742.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.37%)</title><rect x="983.5" y="1731.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="986.5" y="1742.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.22%)</title><rect x="987.9" y="1731.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="990.9" y="1742.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.07%)</title><rect x="989.6" y="1715.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="992.6" y="1726.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (176 samples, 12.88%)</title><rect x="990.5" y="1731.0" width="152.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="993.5" y="1742.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (173 samples, 12.66%)</title><rect x="993.0" y="1715.0" width="149.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="996.0" y="1726.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.07%)</title><rect x="995.6" y="1699.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="998.6" y="1710.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (8 samples, 0.59%)</title><rect x="996.5" y="1699.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="999.5" y="1710.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (160 samples, 11.71%)</title><rect x="1003.4" y="1699.0" width="138.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1006.4" y="1710.0">PhaseIdealLoop::g..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (27 samples, 1.98%)</title><rect x="1117.4" y="1683.0" width="23.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.4" y="1694.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1140.8" y="1683.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.8" y="1694.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.07%)</title><rect x="1141.6" y="1699.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.6" y="1710.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (9 samples, 0.66%)</title><rect x="1142.5" y="1731.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.5" y="1742.0"></text>
</g>
<g>
<title>MemBarAcquireNode::Opcode() const (1 samples, 0.07%)</title><rect x="1148.5" y="1715.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.5" y="1726.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.07%)</title><rect x="1149.4" y="1715.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.4" y="1726.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.07%)</title><rect x="1149.4" y="1699.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.4" y="1710.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1150.3" y="1731.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.3" y="1742.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1150.3" y="1715.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.3" y="1726.0"></text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1150.3" y="1699.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.3" y="1710.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1150.3" y="1683.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.3" y="1694.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.07%)</title><rect x="1150.3" y="1667.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.3" y="1678.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (22 samples, 1.61%)</title><rect x="1151.1" y="1747.0" width="19.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.1" y="1758.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (21 samples, 1.54%)</title><rect x="1152.0" y="1731.0" width="18.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.0" y="1742.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1152.9" y="1715.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.9" y="1726.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1153.7" y="1715.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.7" y="1726.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1153.7" y="1699.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.7" y="1710.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1153.7" y="1683.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.7" y="1694.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1153.7" y="1667.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.7" y="1678.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (3 samples, 0.22%)</title><rect x="1154.6" y="1715.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.6" y="1726.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1157.2" y="1715.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.2" y="1726.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (6 samples, 0.44%)</title><rect x="1158.0" y="1715.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.0" y="1726.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="1161.5" y="1699.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.5" y="1710.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1161.5" y="1683.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.5" y="1694.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1161.5" y="1667.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.5" y="1678.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.07%)</title><rect x="1161.5" y="1651.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.5" y="1662.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1161.5" y="1635.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.5" y="1646.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1162.4" y="1699.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.4" y="1710.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1162.4" y="1683.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.4" y="1694.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (4 samples, 0.29%)</title><rect x="1163.2" y="1715.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.2" y="1726.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.15%)</title><rect x="1164.9" y="1699.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.9" y="1710.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1166.7" y="1715.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.7" y="1726.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.22%)</title><rect x="1167.5" y="1715.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.5" y="1726.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1167.5" y="1699.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.5" y="1710.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1168.4" y="1699.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.4" y="1710.0"></text>
</g>
<g>
<title>RegionNode::try_clean_mem_phi(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1169.3" y="1699.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.3" y="1710.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (2 samples, 0.15%)</title><rect x="1170.1" y="1747.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.1" y="1758.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (2 samples, 0.15%)</title><rect x="1170.1" y="1731.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.1" y="1742.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="1170.1" y="1715.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.1" y="1726.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (2 samples, 0.15%)</title><rect x="1170.1" y="1699.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.1" y="1710.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1170.1" y="1683.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1173.1" y="1694.0"></text>
</g>
<g>
<title>scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*) (1 samples, 0.07%)</title><rect x="1171.0" y="1683.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1174.0" y="1694.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.07%)</title><rect x="1171.9" y="1747.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.9" y="1758.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.07%)</title><rect x="1171.9" y="1731.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.9" y="1742.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1171.9" y="1715.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.9" y="1726.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1171.9" y="1699.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.9" y="1710.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1171.9" y="1683.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.9" y="1694.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.88%)</title><rect x="1172.7" y="1763.0" width="10.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.7" y="1774.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.88%)</title><rect x="1172.7" y="1747.0" width="10.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.7" y="1758.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.88%)</title><rect x="1172.7" y="1731.0" width="10.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.7" y="1742.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.88%)</title><rect x="1172.7" y="1715.0" width="10.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.7" y="1726.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 0.88%)</title><rect x="1172.7" y="1699.0" width="10.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.7" y="1710.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 0.88%)</title><rect x="1172.7" y="1683.0" width="10.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.7" y="1694.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.66%)</title><rect x="1172.7" y="1667.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.7" y="1678.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.66%)</title><rect x="1172.7" y="1651.0" width="7.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.7" y="1662.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.66%)</title><rect x="1172.7" y="1635.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.7" y="1646.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.66%)</title><rect x="1172.7" y="1619.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.7" y="1630.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.66%)</title><rect x="1172.7" y="1603.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.7" y="1614.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.66%)</title><rect x="1172.7" y="1587.0" width="7.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.7" y="1598.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.51%)</title><rect x="1172.7" y="1571.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.7" y="1582.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.51%)</title><rect x="1172.7" y="1555.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.7" y="1566.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.51%)</title><rect x="1172.7" y="1539.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.7" y="1550.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.51%)</title><rect x="1172.7" y="1523.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.7" y="1534.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.51%)</title><rect x="1172.7" y="1507.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.7" y="1518.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.51%)</title><rect x="1172.7" y="1491.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.7" y="1502.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.07%)</title><rect x="1172.7" y="1475.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.7" y="1486.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.07%)</title><rect x="1172.7" y="1459.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.7" y="1470.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.07%)</title><rect x="1172.7" y="1443.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.7" y="1454.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.07%)</title><rect x="1172.7" y="1427.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.7" y="1438.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int) (1 samples, 0.07%)</title><rect x="1172.7" y="1411.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.7" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.44%)</title><rect x="1173.6" y="1475.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.6" y="1486.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.44%)</title><rect x="1173.6" y="1459.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.6" y="1470.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.44%)</title><rect x="1173.6" y="1443.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.6" y="1454.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.07%)</title><rect x="1173.6" y="1427.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.6" y="1438.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="1173.6" y="1411.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.6" y="1422.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.37%)</title><rect x="1174.5" y="1427.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.5" y="1438.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.37%)</title><rect x="1174.5" y="1411.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.5" y="1422.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.37%)</title><rect x="1174.5" y="1395.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.5" y="1406.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.15%)</title><rect x="1174.5" y="1379.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.5" y="1390.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1174.5" y="1363.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.5" y="1374.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1174.5" y="1347.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.5" y="1358.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1174.5" y="1331.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.5" y="1342.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1174.5" y="1315.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.5" y="1326.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1174.5" y="1299.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1177.5" y="1310.0"></text>
</g>
<g>
<title>Compile::find_intrinsic(ciMethod*, bool) (1 samples, 0.07%)</title><rect x="1175.3" y="1363.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.3" y="1374.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1176.2" y="1379.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.2" y="1390.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1176.2" y="1363.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.2" y="1374.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1176.2" y="1347.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.2" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1176.2" y="1331.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.2" y="1342.0"></text>
</g>
<g>
<title>GraphKit::stopped() (1 samples, 0.07%)</title><rect x="1176.2" y="1315.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.2" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.0" y="1315.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.0" y="1326.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.0" y="1299.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.0" y="1310.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.07%)</title><rect x="1177.0" y="1283.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.0" y="1294.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.07%)</title><rect x="1177.0" y="1267.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.0" y="1278.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.07%)</title><rect x="1177.0" y="1251.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.0" y="1262.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1177.0" y="1235.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.0" y="1246.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1177.0" y="1219.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.0" y="1230.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1177.0" y="1203.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.0" y="1214.0"></text>
</g>
<g>
<title>SignatureStream::~SignatureStream() (1 samples, 0.07%)</title><rect x="1177.0" y="1187.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.0" y="1198.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.9" y="1379.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.9" y="1390.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.9" y="1363.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.9" y="1374.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.9" y="1347.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.9" y="1331.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.9" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.9" y="1315.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.9" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.9" y="1299.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.9" y="1310.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.9" y="1283.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="1294.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.9" y="1267.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.9" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.9" y="1251.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.9" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.9" y="1235.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.9" y="1219.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.9" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.9" y="1203.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.9" y="1187.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.9" y="1171.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.9" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.9" y="1155.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.9" y="1139.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.9" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.9" y="1123.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.9" y="1107.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.9" y="1091.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.9" y="1075.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.9" y="1059.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.9" y="1043.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.9" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.9" y="1027.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.9" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.9" y="1011.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1177.9" y="995.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1177.9" y="979.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.9" y="990.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1177.9" y="963.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.9" y="974.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1177.9" y="947.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.9" y="958.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.07%)</title><rect x="1177.9" y="931.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="942.0"></text>
</g>
<g>
<title>IdealKit::make_leaf_call(TypeFunc const*, unsigned char*, char const*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1177.9" y="915.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.9" y="926.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1177.9" y="899.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.9" y="910.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1177.9" y="883.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.9" y="894.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1178.8" y="1571.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="1582.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1178.8" y="1555.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.8" y="1566.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1178.8" y="1539.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.8" y="1550.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1178.8" y="1523.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="1534.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1178.8" y="1507.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.8" y="1518.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1178.8" y="1491.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="1502.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1178.8" y="1475.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.8" y="1486.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1178.8" y="1459.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.8" y="1470.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1178.8" y="1443.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.8" y="1454.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1178.8" y="1427.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.8" y="1438.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1178.8" y="1411.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.8" y="1422.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1178.8" y="1395.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="1406.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1178.8" y="1379.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="1390.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.8" y="1363.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="1374.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.8" y="1347.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.8" y="1358.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.8" y="1331.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.8" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.8" y="1315.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.8" y="1299.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.8" y="1310.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.8" y="1283.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.8" y="1294.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.8" y="1267.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.8" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.8" y="1251.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.8" y="1235.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.8" y="1219.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.8" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.8" y="1203.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.8" y="1187.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.8" y="1171.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.8" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.8" y="1155.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.8" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.8" y="1139.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.8" y="1123.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.8" y="1107.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.8" y="1091.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.8" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.8" y="1075.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.8" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.8" y="1059.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.8" y="1043.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.8" y="1027.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.8" y="1011.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.8" y="995.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="1006.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1178.8" y="979.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.8" y="990.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1178.8" y="963.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.8" y="974.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1178.8" y="947.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="958.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1178.8" y="931.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.8" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1178.8" y="915.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1178.8" y="899.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.8" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1178.8" y="883.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.8" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1178.8" y="867.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1178.8" y="851.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1178.8" y="835.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="846.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1178.8" y="819.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.8" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1178.8" y="803.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1178.8" y="787.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="798.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1178.8" y="771.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.8" y="782.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1178.8" y="755.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="766.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1178.8" y="739.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="750.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1178.8" y="723.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.8" y="734.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1178.8" y="707.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="718.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.07%)</title><rect x="1178.8" y="691.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="702.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.6" y="1363.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.6" y="1374.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1179.6" y="1347.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.6" y="1358.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1179.6" y="1331.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="1342.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.07%)</title><rect x="1179.6" y="1315.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.6" y="1326.0"></text>
</g>
<g>
<title>TypeInt::make(int) (1 samples, 0.07%)</title><rect x="1179.6" y="1299.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="1310.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1180.5" y="1667.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.5" y="1678.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1180.5" y="1651.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.5" y="1662.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1180.5" y="1635.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.5" y="1646.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1180.5" y="1619.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.5" y="1630.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1180.5" y="1603.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.5" y="1614.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1180.5" y="1587.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.5" y="1598.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1180.5" y="1571.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.5" y="1582.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1180.5" y="1555.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.5" y="1566.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1180.5" y="1539.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.5" y="1550.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1180.5" y="1523.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.5" y="1534.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1180.5" y="1507.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.5" y="1518.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1180.5" y="1491.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.5" y="1502.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1180.5" y="1475.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.5" y="1486.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1180.5" y="1459.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.5" y="1470.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1180.5" y="1443.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.5" y="1454.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1180.5" y="1427.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.5" y="1438.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1180.5" y="1411.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.5" y="1422.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1180.5" y="1395.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.5" y="1406.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1180.5" y="1379.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.5" y="1390.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1180.5" y="1363.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.5" y="1374.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1180.5" y="1347.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.5" y="1358.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1180.5" y="1331.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.5" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1180.5" y="1315.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.5" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1180.5" y="1299.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.5" y="1310.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1180.5" y="1283.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.5" y="1294.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1180.5" y="1267.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.5" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1180.5" y="1251.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1180.5" y="1235.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.5" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1180.5" y="1219.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.5" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1180.5" y="1203.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1180.5" y="1187.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.5" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1180.5" y="1171.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.5" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1180.5" y="1155.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1180.5" y="1139.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1180.5" y="1123.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1180.5" y="1107.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1180.5" y="1091.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.5" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1180.5" y="1075.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.5" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1180.5" y="1059.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1180.5" y="1043.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1180.5" y="1027.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1180.5" y="1011.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1180.5" y="995.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.5" y="1006.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.07%)</title><rect x="1180.5" y="979.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.5" y="990.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1180.5" y="963.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.5" y="974.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1180.5" y="947.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.5" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.07%)</title><rect x="1180.5" y="931.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.5" y="942.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1180.5" y="915.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.5" y="926.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1180.5" y="899.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.5" y="910.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.07%)</title><rect x="1180.5" y="883.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.5" y="894.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1180.5" y="867.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.5" y="878.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1180.5" y="851.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.5" y="862.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1180.5" y="835.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.5" y="846.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.07%)</title><rect x="1180.5" y="819.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.5" y="830.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.07%)</title><rect x="1180.5" y="803.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.5" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.4" y="979.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.4" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.4" y="963.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.4" y="947.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.4" y="931.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.4" y="915.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.4" y="899.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.4" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.4" y="883.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.4" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.4" y="867.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.4" y="851.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.4" y="835.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.4" y="819.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.4" y="803.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.4" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.4" y="787.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.4" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.4" y="771.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.4" y="755.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.4" y="739.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.4" y="723.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1181.4" y="707.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.4" y="718.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.07%)</title><rect x="1181.4" y="691.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.4" y="702.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1181.4" y="675.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1184.4" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.2" y="1171.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.2" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.2" y="1155.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.2" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.2" y="1139.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.2" y="1123.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.2" y="1107.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.2" y="1091.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.2" y="1075.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.2" y="1059.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.2" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.2" y="1043.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.2" y="1027.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.2" y="1011.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.2" y="995.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.2" y="979.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.2" y="963.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.2" y="947.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.2" y="931.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.2" y="915.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.2" y="899.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.2" y="883.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.2" y="894.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1182.2" y="867.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1182.2" y="851.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.2" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1182.2" y="835.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.2" y="846.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1182.2" y="819.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="830.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1182.2" y="803.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="814.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1182.2" y="787.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1182.2" y="771.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.2" y="782.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.07%)</title><rect x="1182.2" y="755.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="766.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (3 samples, 0.22%)</title><rect x="1183.1" y="1763.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.1" y="1774.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1184.0" y="1747.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.0" y="1758.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1184.8" y="1747.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.8" y="1758.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.07%)</title><rect x="1185.7" y="1811.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.7" y="1822.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.07%)</title><rect x="1185.7" y="1795.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.7" y="1806.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.07%)</title><rect x="1185.7" y="1779.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.7" y="1790.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.07%)</title><rect x="1185.7" y="1763.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.7" y="1774.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1186.5" y="1827.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.5" y="1838.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1186.5" y="1811.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.5" y="1822.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1186.5" y="1795.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.5" y="1806.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1186.5" y="1779.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1189.5" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::get_jmethod_id(instanceKlassHandle, methodHandle) (1 samples, 0.07%)</title><rect x="1186.5" y="1763.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.5" y="1774.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.15%)</title><rect x="1187.4" y="1859.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.4" y="1870.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.15%)</title><rect x="1187.4" y="1843.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.4" y="1854.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.15%)</title><rect x="1187.4" y="1827.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.4" y="1838.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.15%)</title><rect x="1187.4" y="1811.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.4" y="1822.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.15%)</title><rect x="1187.4" y="1795.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.4" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.15%)</title><rect x="1187.4" y="1779.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.4" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.07%)</title><rect x="1187.4" y="1763.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.4" y="1774.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.07%)</title><rect x="1187.4" y="1747.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.4" y="1758.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked() (1 samples, 0.07%)</title><rect x="1187.4" y="1731.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.4" y="1742.0"></text>
</g>
<g>
<title>OtherRegionsTable::clear() (1 samples, 0.07%)</title><rect x="1187.4" y="1715.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.4" y="1726.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_prologue(bool) (1 samples, 0.07%)</title><rect x="1188.3" y="1763.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.3" y="1774.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::accumulate_statistics_before_gc() (1 samples, 0.07%)</title><rect x="1188.3" y="1747.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.3" y="1758.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::accumulate_statistics() (1 samples, 0.07%)</title><rect x="1188.3" y="1731.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.3" y="1742.0"></text>
</g>
<g>
<title>sysmalloc (1 samples, 0.07%)</title><rect x="1189.1" y="1891.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1192.1" y="1902.0"></text>
</g>
</g>
</svg>
