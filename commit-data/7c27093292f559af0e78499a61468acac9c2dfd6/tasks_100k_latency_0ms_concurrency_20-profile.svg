<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="773"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="773"> </text>
<g id="frames">
<g>
<title>all (134 samples, 100.00%)</title><rect x="10.0" y="739.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="750.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.75%)</title><rect x="10.0" y="723.0" width="8.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>Deoptimization::uncommon_trap(JavaThread*, int) (1 samples, 0.75%)</title><rect x="10.0" y="707.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>Deoptimization::uncommon_trap_inner(JavaThread*, int) (1 samples, 0.75%)</title><rect x="10.0" y="691.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>Deoptimization::query_update_method_data(MethodData*, int, Deoptimization::DeoptReason, Method*, unsigned int&amp;, bool&amp;, bool&amp;) (1 samples, 0.75%)</title><rect x="10.0" y="675.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>BranchData::cell_count() const (1 samples, 0.75%)</title><rect x="10.0" y="659.0" width="8.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (28 samples, 20.90%)</title><rect x="18.8" y="723.0" width="246.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.8" y="734.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (27 samples, 20.15%)</title><rect x="27.6" y="707.0" width="237.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="30.6" y="718.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (21 samples, 15.67%)</title><rect x="27.6" y="691.0" width="184.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.6" y="702.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1468705868.accept (20 samples, 14.93%)</title><rect x="27.6" y="675.0" width="176.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="30.6" y="686.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (20 samples, 14.93%)</title><rect x="27.6" y="659.0" width="176.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="30.6" y="670.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (16 samples, 11.94%)</title><rect x="27.6" y="643.0" width="140.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.6" y="654.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (16 samples, 11.94%)</title><rect x="27.6" y="627.0" width="140.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.6" y="638.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (16 samples, 11.94%)</title><rect x="27.6" y="611.0" width="140.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.6" y="622.0">com/linecorp/decat..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (16 samples, 11.94%)</title><rect x="27.6" y="595.0" width="140.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="30.6" y="606.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (16 samples, 11.94%)</title><rect x="27.6" y="579.0" width="140.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.6" y="590.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (16 samples, 11.94%)</title><rect x="27.6" y="563.0" width="140.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.6" y="574.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (10 samples, 7.46%)</title><rect x="71.6" y="547.0" width="88.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="74.6" y="558.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.49%)</title><rect x="71.6" y="531.0" width="17.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="74.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.49%)</title><rect x="71.6" y="515.0" width="17.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="74.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 1.49%)</title><rect x="71.6" y="499.0" width="17.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="74.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 1.49%)</title><rect x="89.3" y="531.0" width="17.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="92.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (2 samples, 1.49%)</title><rect x="89.3" y="515.0" width="17.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="92.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.75%)</title><rect x="98.1" y="499.0" width="8.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="101.1" y="510.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.75%)</title><rect x="98.1" y="483.0" width="8.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="101.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 4.48%)</title><rect x="106.9" y="531.0" width="52.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="109.9" y="542.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 4.48%)</title><rect x="106.9" y="515.0" width="52.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="109.9" y="526.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 4.48%)</title><rect x="106.9" y="499.0" width="52.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="109.9" y="510.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 4.48%)</title><rect x="106.9" y="483.0" width="52.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="109.9" y="494.0">java/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (6 samples, 4.48%)</title><rect x="106.9" y="467.0" width="52.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="109.9" y="478.0">sun/m..</text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 4.48%)</title><rect x="106.9" y="451.0" width="52.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="109.9" y="462.0">Unsaf..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.75%)</title><rect x="106.9" y="435.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="109.9" y="446.0"></text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 2.99%)</title><rect x="115.7" y="435.0" width="35.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="118.7" y="446.0">__p..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.75%)</title><rect x="150.9" y="435.0" width="8.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="153.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.75%)</title><rect x="159.7" y="547.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="162.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.75%)</title><rect x="159.7" y="531.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="162.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.75%)</title><rect x="159.7" y="515.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="162.7" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 2.24%)</title><rect x="168.5" y="643.0" width="26.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="171.5" y="654.0">c..</text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 2.24%)</title><rect x="168.5" y="627.0" width="26.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="171.5" y="638.0">j..</text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 2.24%)</title><rect x="168.5" y="611.0" width="26.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="171.5" y="622.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.75%)</title><rect x="194.9" y="643.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="197.9" y="654.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.75%)</title><rect x="194.9" y="627.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="197.9" y="638.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.75%)</title><rect x="194.9" y="611.0" width="8.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="197.9" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.75%)</title><rect x="194.9" y="595.0" width="8.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="197.9" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.75%)</title><rect x="194.9" y="579.0" width="8.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="197.9" y="590.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.75%)</title><rect x="194.9" y="563.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="197.9" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.75%)</title><rect x="194.9" y="547.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="197.9" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.75%)</title><rect x="203.7" y="675.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.75%)</title><rect x="203.7" y="659.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="206.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.75%)</title><rect x="203.7" y="643.0" width="8.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="206.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.75%)</title><rect x="203.7" y="627.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="206.7" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.75%)</title><rect x="203.7" y="611.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="206.7" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.75%)</title><rect x="203.7" y="595.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="206.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (6 samples, 4.48%)</title><rect x="212.5" y="691.0" width="52.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="215.5" y="702.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (6 samples, 4.48%)</title><rect x="212.5" y="675.0" width="52.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="215.5" y="686.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (3 samples, 2.24%)</title><rect x="212.5" y="659.0" width="26.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="215.5" y="670.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 2.24%)</title><rect x="212.5" y="643.0" width="26.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="215.5" y="654.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 2.24%)</title><rect x="212.5" y="627.0" width="26.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="215.5" y="638.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 2.24%)</title><rect x="212.5" y="611.0" width="26.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.5" y="622.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 2.24%)</title><rect x="212.5" y="595.0" width="26.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="215.5" y="606.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.49%)</title><rect x="212.5" y="579.0" width="17.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="215.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 1.49%)</title><rect x="212.5" y="563.0" width="17.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="215.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 1.49%)</title><rect x="212.5" y="547.0" width="17.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 1.49%)</title><rect x="212.5" y="531.0" width="17.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="215.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 1.49%)</title><rect x="212.5" y="515.0" width="17.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="215.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 1.49%)</title><rect x="212.5" y="499.0" width="17.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="215.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 1.49%)</title><rect x="212.5" y="483.0" width="17.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="215.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 1.49%)</title><rect x="212.5" y="467.0" width="17.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.75%)</title><rect x="230.1" y="579.0" width="8.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="233.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.75%)</title><rect x="230.1" y="563.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.75%)</title><rect x="230.1" y="547.0" width="8.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="233.1" y="558.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.75%)</title><rect x="230.1" y="531.0" width="8.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="233.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 1.49%)</title><rect x="239.0" y="659.0" width="17.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="242.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.75%)</title><rect x="239.0" y="643.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.75%)</title><rect x="239.0" y="627.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.75%)</title><rect x="239.0" y="611.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="242.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toSet (1 samples, 0.75%)</title><rect x="239.0" y="595.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="242.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.75%)</title><rect x="239.0" y="579.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.75%)</title><rect x="247.8" y="643.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="250.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.75%)</title><rect x="247.8" y="627.0" width="8.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="250.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.75%)</title><rect x="256.6" y="659.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="259.6" y="670.0"></text>
</g>
<g>
<title>java/lang/Thread.run (51 samples, 38.06%)</title><rect x="265.4" y="723.0" width="449.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.4" y="734.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (51 samples, 38.06%)</title><rect x="265.4" y="707.0" width="449.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="268.4" y="718.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (51 samples, 38.06%)</title><rect x="265.4" y="691.0" width="449.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="268.4" y="702.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1291078737.run (33 samples, 24.63%)</title><rect x="291.8" y="675.0" width="290.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="294.8" y="686.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (33 samples, 24.63%)</title><rect x="291.8" y="659.0" width="290.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="294.8" y="670.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (33 samples, 24.63%)</title><rect x="291.8" y="643.0" width="290.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.8" y="654.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (33 samples, 24.63%)</title><rect x="291.8" y="627.0" width="290.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="294.8" y="638.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (13 samples, 9.70%)</title><rect x="291.8" y="611.0" width="114.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="294.8" y="622.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (12 samples, 8.96%)</title><rect x="291.8" y="595.0" width="105.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.8" y="606.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (12 samples, 8.96%)</title><rect x="291.8" y="579.0" width="105.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="294.8" y="590.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 8.96%)</title><rect x="291.8" y="563.0" width="105.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="294.8" y="574.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 8.96%)</title><rect x="291.8" y="547.0" width="105.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.8" y="558.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (12 samples, 8.96%)</title><rect x="291.8" y="531.0" width="105.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="294.8" y="542.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.75%)</title><rect x="300.6" y="515.0" width="8.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="303.6" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.75%)</title><rect x="300.6" y="499.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.6" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.75%)</title><rect x="300.6" y="483.0" width="8.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="303.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.75%)</title><rect x="300.6" y="467.0" width="8.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.6" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.75%)</title><rect x="300.6" y="451.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="303.6" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.75%)</title><rect x="300.6" y="435.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.6" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.75%)</title><rect x="300.6" y="419.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="303.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (10 samples, 7.46%)</title><rect x="309.4" y="515.0" width="88.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="312.4" y="526.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.75%)</title><rect x="309.4" y="499.0" width="8.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="312.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.75%)</title><rect x="309.4" y="483.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="312.4" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.75%)</title><rect x="309.4" y="467.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="312.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.75%)</title><rect x="309.4" y="451.0" width="8.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="312.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.75%)</title><rect x="309.4" y="435.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="312.4" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.75%)</title><rect x="309.4" y="419.0" width="8.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="312.4" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.75%)</title><rect x="318.2" y="499.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="321.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.75%)</title><rect x="318.2" y="483.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="321.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.75%)</title><rect x="318.2" y="467.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="321.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.75%)</title><rect x="318.2" y="451.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="321.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.75%)</title><rect x="327.0" y="499.0" width="8.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="330.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.75%)</title><rect x="327.0" y="483.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="330.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.75%)</title><rect x="327.0" y="467.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="330.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.75%)</title><rect x="327.0" y="451.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="330.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.75%)</title><rect x="327.0" y="435.0" width="8.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="330.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (7 samples, 5.22%)</title><rect x="335.8" y="499.0" width="61.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="338.8" y="510.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.49%)</title><rect x="335.8" y="483.0" width="17.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="338.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 1.49%)</title><rect x="335.8" y="467.0" width="17.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="338.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 3.73%)</title><rect x="353.4" y="483.0" width="44.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="356.4" y="494.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 3.73%)</title><rect x="353.4" y="467.0" width="44.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="356.4" y="478.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 3.73%)</title><rect x="353.4" y="451.0" width="44.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="356.4" y="462.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 1.49%)</title><rect x="362.2" y="435.0" width="17.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="365.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.75%)</title><rect x="371.0" y="419.0" width="8.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="374.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.75%)</title><rect x="371.0" y="403.0" width="8.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="374.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.75%)</title><rect x="371.0" y="387.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="374.0" y="398.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.75%)</title><rect x="371.0" y="371.0" width="8.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="374.0" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.75%)</title><rect x="379.9" y="435.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="382.9" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.75%)</title><rect x="379.9" y="419.0" width="8.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="382.9" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.75%)</title><rect x="379.9" y="403.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="382.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.75%)</title><rect x="388.7" y="435.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="391.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.75%)</title><rect x="388.7" y="419.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="391.7" y="430.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.75%)</title><rect x="397.5" y="595.0" width="8.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="400.5" y="606.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.75%)</title><rect x="397.5" y="579.0" width="8.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="400.5" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (20 samples, 14.93%)</title><rect x="406.3" y="611.0" width="176.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="409.3" y="622.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (4 samples, 2.99%)</title><rect x="406.3" y="595.0" width="35.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="409.3" y="606.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 2.99%)</title><rect x="406.3" y="579.0" width="35.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="409.3" y="590.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (4 samples, 2.99%)</title><rect x="406.3" y="563.0" width="35.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="409.3" y="574.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.49%)</title><rect x="406.3" y="547.0" width="17.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="409.3" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.49%)</title><rect x="406.3" y="531.0" width="17.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="409.3" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.75%)</title><rect x="415.1" y="515.0" width="8.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="418.1" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.75%)</title><rect x="415.1" y="499.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="418.1" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.75%)</title><rect x="415.1" y="483.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="418.1" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.75%)</title><rect x="423.9" y="547.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="426.9" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.75%)</title><rect x="423.9" y="531.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="426.9" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.75%)</title><rect x="423.9" y="515.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="426.9" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.75%)</title><rect x="423.9" y="499.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="426.9" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.75%)</title><rect x="432.7" y="547.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="435.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.75%)</title><rect x="432.7" y="531.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="435.7" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.75%)</title><rect x="441.5" y="595.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="444.5" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.75%)</title><rect x="441.5" y="579.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="444.5" y="590.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.75%)</title><rect x="441.5" y="563.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="444.5" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (12 samples, 8.96%)</title><rect x="450.3" y="595.0" width="105.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="453.3" y="606.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (11 samples, 8.21%)</title><rect x="450.3" y="579.0" width="96.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="453.3" y="590.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (5 samples, 3.73%)</title><rect x="459.1" y="563.0" width="44.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="462.1" y="574.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.49%)</title><rect x="459.1" y="547.0" width="17.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="462.1" y="558.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.75%)</title><rect x="467.9" y="531.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="470.9" y="542.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.75%)</title><rect x="467.9" y="515.0" width="8.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="470.9" y="526.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.75%)</title><rect x="476.7" y="547.0" width="8.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="479.7" y="558.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 1.49%)</title><rect x="485.5" y="547.0" width="17.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="488.5" y="558.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 3.73%)</title><rect x="503.1" y="563.0" width="44.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="506.1" y="574.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (4 samples, 2.99%)</title><rect x="511.9" y="547.0" width="35.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="514.9" y="558.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.75%)</title><rect x="511.9" y="531.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="514.9" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.75%)</title><rect x="511.9" y="515.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="514.9" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 2.24%)</title><rect x="520.7" y="531.0" width="26.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="523.7" y="542.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 2.24%)</title><rect x="520.7" y="515.0" width="26.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="523.7" y="526.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 2.24%)</title><rect x="520.7" y="499.0" width="26.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="523.7" y="510.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.75%)</title><rect x="520.7" y="483.0" width="8.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="523.7" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.75%)</title><rect x="529.6" y="483.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="532.6" y="494.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.75%)</title><rect x="538.4" y="483.0" width="8.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="541.4" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.75%)</title><rect x="547.2" y="579.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="550.2" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (2 samples, 1.49%)</title><rect x="556.0" y="595.0" width="17.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="559.0" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 1.49%)</title><rect x="556.0" y="579.0" width="17.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="559.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (2 samples, 1.49%)</title><rect x="556.0" y="563.0" width="17.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="559.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.75%)</title><rect x="573.6" y="595.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="576.6" y="606.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.75%)</title><rect x="573.6" y="579.0" width="8.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="576.6" y="590.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.75%)</title><rect x="582.4" y="675.0" width="8.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="585.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.75%)</title><rect x="591.2" y="675.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="594.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.75%)</title><rect x="591.2" y="659.0" width="8.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="594.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.75%)</title><rect x="591.2" y="643.0" width="8.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="594.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 1.49%)</title><rect x="600.0" y="675.0" width="17.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="603.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.75%)</title><rect x="608.8" y="659.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="611.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.75%)</title><rect x="608.8" y="643.0" width="8.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="611.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (11 samples, 8.21%)</title><rect x="617.6" y="675.0" width="96.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="620.6" y="686.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (11 samples, 8.21%)</title><rect x="617.6" y="659.0" width="96.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="620.6" y="670.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (9 samples, 6.72%)</title><rect x="635.2" y="643.0" width="79.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="638.2" y="654.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (9 samples, 6.72%)</title><rect x="635.2" y="627.0" width="79.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="638.2" y="638.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (9 samples, 6.72%)</title><rect x="635.2" y="611.0" width="79.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="638.2" y="622.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Park (9 samples, 6.72%)</title><rect x="635.2" y="595.0" width="79.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="638.2" y="606.0">Unsafe_Park</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.75%)</title><rect x="644.0" y="579.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="647.0" y="590.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 1.49%)</title><rect x="652.8" y="579.0" width="17.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="655.8" y="590.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.75%)</title><rect x="661.6" y="563.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="664.6" y="574.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.75%)</title><rect x="661.6" y="547.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="664.6" y="558.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 2.99%)</title><rect x="670.4" y="579.0" width="35.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="673.4" y="590.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.75%)</title><rect x="705.7" y="579.0" width="8.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="708.7" y="590.0"></text>
</g>
<g>
<title>start_thread (54 samples, 40.30%)</title><rect x="714.5" y="723.0" width="475.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="717.5" y="734.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (54 samples, 40.30%)</title><rect x="714.5" y="707.0" width="475.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="717.5" y="718.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 9.70%)</title><rect x="714.5" y="691.0" width="114.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="717.5" y="702.0">GangWorker::lo..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 2.99%)</title><rect x="714.5" y="675.0" width="35.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="717.5" y="686.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 2.99%)</title><rect x="714.5" y="659.0" width="35.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="717.5" y="670.0">G1P..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 1.49%)</title><rect x="714.5" y="643.0" width="17.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="717.5" y="654.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.49%)</title><rect x="732.1" y="643.0" width="17.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="735.1" y="654.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (9 samples, 6.72%)</title><rect x="749.7" y="675.0" width="79.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="752.7" y="686.0">G1ParTask..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 5.22%)</title><rect x="749.7" y="659.0" width="61.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="752.7" y="670.0">G1ParE..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.75%)</title><rect x="758.5" y="643.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="761.5" y="654.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 1.49%)</title><rect x="767.3" y="643.0" width="17.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="770.3" y="654.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.75%)</title><rect x="776.1" y="627.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="779.1" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.75%)</title><rect x="776.1" y="611.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="779.1" y="622.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.75%)</title><rect x="776.1" y="595.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="779.1" y="606.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 1.49%)</title><rect x="784.9" y="643.0" width="17.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="787.9" y="654.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.75%)</title><rect x="802.5" y="643.0" width="8.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="805.5" y="654.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.75%)</title><rect x="811.3" y="659.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="814.3" y="670.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.75%)</title><rect x="820.1" y="659.0" width="8.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="823.1" y="670.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (41 samples, 30.60%)</title><rect x="829.0" y="691.0" width="361.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="832.0" y="702.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (41 samples, 30.60%)</title><rect x="829.0" y="675.0" width="361.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="832.0" y="686.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (39 samples, 29.10%)</title><rect x="829.0" y="659.0" width="343.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="832.0" y="670.0">CompileBroker::invoke_compiler_on_method(Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (36 samples, 26.87%)</title><rect x="829.0" y="643.0" width="317.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="832.0" y="654.0">C2Compiler::compile_method(ciEnv*, ciMethod..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (36 samples, 26.87%)</title><rect x="829.0" y="627.0" width="317.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="832.0" y="638.0">Compile::Compile(ciEnv*, C2Compiler*, ciMet..</text>
</g>
<g>
<title>Compile::Code_Gen() (14 samples, 10.45%)</title><rect x="829.0" y="611.0" width="123.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="832.0" y="622.0">Compile::Code_G..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.49%)</title><rect x="829.0" y="595.0" width="17.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="832.0" y="606.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.75%)</title><rect x="829.0" y="579.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="832.0" y="590.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.75%)</title><rect x="829.0" y="563.0" width="8.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="832.0" y="574.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.75%)</title><rect x="829.0" y="547.0" width="8.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="832.0" y="558.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.75%)</title><rect x="837.8" y="579.0" width="8.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="840.8" y="590.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 2.99%)</title><rect x="846.6" y="595.0" width="35.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="849.6" y="606.0">Mat..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 2.99%)</title><rect x="846.6" y="579.0" width="35.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="849.6" y="590.0">Mat..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.75%)</title><rect x="864.2" y="563.0" width="8.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="867.2" y="574.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.75%)</title><rect x="873.0" y="563.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="876.0" y="574.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.75%)</title><rect x="873.0" y="547.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="876.0" y="558.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.75%)</title><rect x="873.0" y="531.0" width="8.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="876.0" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (8 samples, 5.97%)</title><rect x="881.8" y="595.0" width="70.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="884.8" y="606.0">PhaseCha..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.75%)</title><rect x="881.8" y="579.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="884.8" y="590.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.75%)</title><rect x="881.8" y="563.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="884.8" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 2.24%)</title><rect x="890.6" y="579.0" width="26.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="893.6" y="590.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.75%)</title><rect x="908.2" y="563.0" width="8.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="911.2" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (2 samples, 1.49%)</title><rect x="917.0" y="579.0" width="17.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="920.0" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.75%)</title><rect x="934.6" y="579.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="937.6" y="590.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.75%)</title><rect x="943.4" y="579.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="946.4" y="590.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.75%)</title><rect x="943.4" y="563.0" width="8.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="946.4" y="574.0"></text>
</g>
<g>
<title>Compile::Optimize() (16 samples, 11.94%)</title><rect x="952.2" y="611.0" width="140.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="955.2" y="622.0">Compile::Optimize()</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (9 samples, 6.72%)</title><rect x="952.2" y="595.0" width="79.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="955.2" y="606.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.75%)</title><rect x="952.2" y="579.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="955.2" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 2.99%)</title><rect x="961.0" y="579.0" width="35.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="964.0" y="590.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 1.49%)</title><rect x="978.7" y="563.0" width="17.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="981.7" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.75%)</title><rect x="987.5" y="547.0" width="8.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="990.5" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.75%)</title><rect x="987.5" y="531.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="990.5" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.75%)</title><rect x="996.3" y="579.0" width="8.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="999.3" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.75%)</title><rect x="1005.1" y="579.0" width="8.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1008.1" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.75%)</title><rect x="1005.1" y="563.0" width="8.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1008.1" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.75%)</title><rect x="1005.1" y="547.0" width="8.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1008.1" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.75%)</title><rect x="1013.9" y="579.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1016.9" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.75%)</title><rect x="1013.9" y="563.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1016.9" y="574.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.75%)</title><rect x="1013.9" y="547.0" width="8.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1016.9" y="558.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.75%)</title><rect x="1022.7" y="579.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1025.7" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 2.99%)</title><rect x="1031.5" y="595.0" width="35.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1034.5" y="606.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 2.24%)</title><rect x="1040.3" y="579.0" width="26.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1043.3" y="590.0">P..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.75%)</title><rect x="1040.3" y="563.0" width="8.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1043.3" y="574.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.75%)</title><rect x="1049.1" y="563.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1052.1" y="574.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.75%)</title><rect x="1049.1" y="547.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1052.1" y="558.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.75%)</title><rect x="1049.1" y="531.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1052.1" y="542.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.75%)</title><rect x="1049.1" y="515.0" width="8.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1052.1" y="526.0"></text>
</g>
<g>
<title>Node::nonnull_req() const (1 samples, 0.75%)</title><rect x="1049.1" y="499.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1052.1" y="510.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.75%)</title><rect x="1057.9" y="563.0" width="8.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1060.9" y="574.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.75%)</title><rect x="1057.9" y="547.0" width="8.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1060.9" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.75%)</title><rect x="1057.9" y="531.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1060.9" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.75%)</title><rect x="1057.9" y="515.0" width="8.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1060.9" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.75%)</title><rect x="1057.9" y="499.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1060.9" y="510.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.75%)</title><rect x="1066.7" y="595.0" width="8.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1069.7" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.75%)</title><rect x="1066.7" y="579.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1069.7" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.75%)</title><rect x="1066.7" y="563.0" width="8.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1069.7" y="574.0"></text>
</g>
<g>
<title>ClearArrayNode::Ideal(PhaseGVN*, bool) (1 samples, 0.75%)</title><rect x="1066.7" y="547.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1069.7" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.75%)</title><rect x="1066.7" y="531.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1069.7" y="542.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.75%)</title><rect x="1066.7" y="515.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1069.7" y="526.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.75%)</title><rect x="1066.7" y="499.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1069.7" y="510.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 1.49%)</title><rect x="1075.5" y="595.0" width="17.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1078.5" y="606.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.75%)</title><rect x="1093.1" y="611.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.1" y="622.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (1 samples, 0.75%)</title><rect x="1093.1" y="595.0" width="8.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1096.1" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.75%)</title><rect x="1093.1" y="579.0" width="8.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1096.1" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.75%)</title><rect x="1093.1" y="563.0" width="8.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.75%)</title><rect x="1093.1" y="547.0" width="8.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1096.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.75%)</title><rect x="1093.1" y="531.0" width="8.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1096.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.75%)</title><rect x="1093.1" y="515.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.75%)</title><rect x="1093.1" y="499.0" width="8.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1096.1" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.75%)</title><rect x="1093.1" y="483.0" width="8.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.1" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.75%)</title><rect x="1093.1" y="467.0" width="8.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1096.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.75%)</title><rect x="1093.1" y="451.0" width="8.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1096.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.75%)</title><rect x="1093.1" y="435.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.75%)</title><rect x="1093.1" y="419.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1096.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.75%)</title><rect x="1093.1" y="403.0" width="8.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1096.1" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.75%)</title><rect x="1093.1" y="387.0" width="8.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.1" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.75%)</title><rect x="1093.1" y="371.0" width="8.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1096.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.75%)</title><rect x="1093.1" y="355.0" width="8.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1096.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.75%)</title><rect x="1093.1" y="339.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.75%)</title><rect x="1093.1" y="323.0" width="8.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1096.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.75%)</title><rect x="1093.1" y="307.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.1" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.75%)</title><rect x="1093.1" y="291.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1096.1" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.75%)</title><rect x="1093.1" y="275.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1096.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.75%)</title><rect x="1093.1" y="259.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.75%)</title><rect x="1093.1" y="243.0" width="8.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1096.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.75%)</title><rect x="1093.1" y="227.0" width="8.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1096.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.75%)</title><rect x="1093.1" y="211.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.1" y="222.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.75%)</title><rect x="1093.1" y="195.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.1" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.75%)</title><rect x="1093.1" y="179.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1096.1" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.75%)</title><rect x="1093.1" y="163.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.1" y="174.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.75%)</title><rect x="1093.1" y="147.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.1" y="158.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.75%)</title><rect x="1093.1" y="131.0" width="8.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1096.1" y="142.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.75%)</title><rect x="1093.1" y="115.0" width="8.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1096.1" y="126.0"></text>
</g>
<g>
<title>JavaFieldStream::JavaFieldStream(instanceKlassHandle) (1 samples, 0.75%)</title><rect x="1093.1" y="99.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1096.1" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 3.73%)</title><rect x="1101.9" y="611.0" width="44.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1104.9" y="622.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 3.73%)</title><rect x="1101.9" y="595.0" width="44.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1104.9" y="606.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 3.73%)</title><rect x="1101.9" y="579.0" width="44.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1104.9" y="590.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 3.73%)</title><rect x="1101.9" y="563.0" width="44.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1104.9" y="574.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 3.73%)</title><rect x="1101.9" y="547.0" width="44.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1104.9" y="558.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 3.73%)</title><rect x="1101.9" y="531.0" width="44.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1104.9" y="542.0">Pars..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.99%)</title><rect x="1101.9" y="515.0" width="35.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1104.9" y="526.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.99%)</title><rect x="1101.9" y="499.0" width="35.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1104.9" y="510.0">Par..</text>
</g>
<g>
<title>GraphKit::GraphKit(JVMState*) (1 samples, 0.75%)</title><rect x="1101.9" y="483.0" width="8.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.24%)</title><rect x="1110.7" y="483.0" width="26.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1113.7" y="494.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.24%)</title><rect x="1110.7" y="467.0" width="26.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1113.7" y="478.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 2.24%)</title><rect x="1110.7" y="451.0" width="26.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1113.7" y="462.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.24%)</title><rect x="1110.7" y="435.0" width="26.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.7" y="446.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.24%)</title><rect x="1110.7" y="419.0" width="26.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1113.7" y="430.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.24%)</title><rect x="1110.7" y="403.0" width="26.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.7" y="414.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.24%)</title><rect x="1110.7" y="387.0" width="26.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1113.7" y="398.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.24%)</title><rect x="1110.7" y="371.0" width="26.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1113.7" y="382.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 2.24%)</title><rect x="1110.7" y="355.0" width="26.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1113.7" y="366.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.24%)</title><rect x="1110.7" y="339.0" width="26.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1113.7" y="350.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.24%)</title><rect x="1110.7" y="323.0" width="26.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1113.7" y="334.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.24%)</title><rect x="1110.7" y="307.0" width="26.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1113.7" y="318.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.24%)</title><rect x="1110.7" y="291.0" width="26.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1113.7" y="302.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.24%)</title><rect x="1110.7" y="275.0" width="26.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1113.7" y="286.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 2.24%)</title><rect x="1110.7" y="259.0" width="26.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1113.7" y="270.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.24%)</title><rect x="1110.7" y="243.0" width="26.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.7" y="254.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.49%)</title><rect x="1110.7" y="227.0" width="17.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1113.7" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.49%)</title><rect x="1110.7" y="211.0" width="17.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1113.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.49%)</title><rect x="1110.7" y="195.0" width="17.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.49%)</title><rect x="1110.7" y="179.0" width="17.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.49%)</title><rect x="1110.7" y="163.0" width="17.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1113.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.49%)</title><rect x="1110.7" y="147.0" width="17.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1113.7" y="158.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.75%)</title><rect x="1110.7" y="131.0" width="8.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1113.7" y="142.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.75%)</title><rect x="1110.7" y="115.0" width="8.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1113.7" y="126.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.75%)</title><rect x="1110.7" y="99.0" width="8.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1113.7" y="110.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call_or_null(KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.75%)</title><rect x="1110.7" y="83.0" width="8.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.7" y="94.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.75%)</title><rect x="1110.7" y="67.0" width="8.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1113.7" y="78.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.75%)</title><rect x="1110.7" y="51.0" width="8.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1113.7" y="62.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.75%)</title><rect x="1110.7" y="35.0" width="8.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1113.7" y="46.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.75%)</title><rect x="1119.6" y="131.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1122.6" y="142.0"></text>
</g>
<g>
<title>MethodLiveness::MethodLiveness(Arena*, ciMethod*) (1 samples, 0.75%)</title><rect x="1119.6" y="115.0" width="8.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1122.6" y="126.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.75%)</title><rect x="1128.4" y="227.0" width="8.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.4" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.75%)</title><rect x="1128.4" y="211.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.4" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.75%)</title><rect x="1128.4" y="195.0" width="8.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.75%)</title><rect x="1128.4" y="179.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.75%)</title><rect x="1128.4" y="163.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.75%)</title><rect x="1128.4" y="147.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.4" y="158.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.75%)</title><rect x="1128.4" y="131.0" width="8.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.4" y="142.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.75%)</title><rect x="1128.4" y="115.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.4" y="126.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.75%)</title><rect x="1128.4" y="99.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.4" y="110.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_input_for_runtime_call(SafePointNode*) (1 samples, 0.75%)</title><rect x="1128.4" y="83.0" width="8.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.4" y="94.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.75%)</title><rect x="1137.2" y="515.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.2" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.75%)</title><rect x="1137.2" y="499.0" width="8.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.2" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.75%)</title><rect x="1137.2" y="483.0" width="8.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.2" y="494.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.75%)</title><rect x="1137.2" y="467.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.2" y="478.0"></text>
</g>
<g>
<title>LinkResolver::check_klass_accessability(KlassHandle, KlassHandle, Thread*) (1 samples, 0.75%)</title><rect x="1137.2" y="451.0" width="8.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.2" y="462.0"></text>
</g>
<g>
<title>Reflection::verify_class_access(Klass*, Klass*, bool) (1 samples, 0.75%)</title><rect x="1137.2" y="435.0" width="8.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.2" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::is_same_class_package(oopDesc*, Symbol*, oopDesc*, Symbol*) (1 samples, 0.75%)</title><rect x="1137.2" y="419.0" width="8.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.2" y="430.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 2.24%)</title><rect x="1146.0" y="643.0" width="26.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.0" y="654.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 2.24%)</title><rect x="1146.0" y="627.0" width="26.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.0" y="638.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 2.24%)</title><rect x="1146.0" y="611.0" width="26.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1149.0" y="622.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 2.24%)</title><rect x="1146.0" y="595.0" width="26.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.0" y="606.0">C..</text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.75%)</title><rect x="1146.0" y="579.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.0" y="590.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.75%)</title><rect x="1146.0" y="563.0" width="8.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.0" y="574.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.75%)</title><rect x="1146.0" y="547.0" width="8.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.0" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.75%)</title><rect x="1146.0" y="531.0" width="8.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.0" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.75%)</title><rect x="1146.0" y="515.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.0" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.75%)</title><rect x="1146.0" y="499.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.0" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.75%)</title><rect x="1146.0" y="483.0" width="8.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.0" y="494.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.75%)</title><rect x="1146.0" y="467.0" width="8.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.0" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.75%)</title><rect x="1146.0" y="451.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.0" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.75%)</title><rect x="1146.0" y="435.0" width="8.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.0" y="446.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.75%)</title><rect x="1146.0" y="419.0" width="8.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.0" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.75%)</title><rect x="1146.0" y="403.0" width="8.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.0" y="414.0"></text>
</g>
<g>
<title>constantPoolHandle::constantPoolHandle(constantPoolHandle const&amp;) (1 samples, 0.75%)</title><rect x="1146.0" y="387.0" width="8.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1149.0" y="398.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 1.49%)</title><rect x="1154.8" y="579.0" width="17.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.8" y="590.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 1.49%)</title><rect x="1154.8" y="563.0" width="17.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.8" y="574.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.75%)</title><rect x="1154.8" y="547.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.8" y="558.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.75%)</title><rect x="1163.6" y="547.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.6" y="558.0"></text>
</g>
<g>
<title>BitMap::BitMap(unsigned long, bool) (1 samples, 0.75%)</title><rect x="1163.6" y="531.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.6" y="542.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.75%)</title><rect x="1163.6" y="515.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.6" y="526.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.75%)</title><rect x="1172.4" y="659.0" width="8.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.4" y="670.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.75%)</title><rect x="1172.4" y="643.0" width="8.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.4" y="654.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.75%)</title><rect x="1172.4" y="627.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.4" y="638.0"></text>
</g>
<g>
<title>CodeCache::next_nmethod(CodeBlob*) (1 samples, 0.75%)</title><rect x="1172.4" y="611.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.4" y="622.0"></text>
</g>
<g>
<title>CodeHeap::next_free(HeapBlock*) const (1 samples, 0.75%)</title><rect x="1172.4" y="595.0" width="8.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.4" y="606.0"></text>
</g>
<g>
<title>TraceTime::~TraceTime() (1 samples, 0.75%)</title><rect x="1181.2" y="659.0" width="8.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.2" y="670.0"></text>
</g>
</g>
</svg>
