<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1190" onload="init(evt)" viewBox="0 0 1200 1190" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1173"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1173"> </text>
<g id="frames">
<g>
<title>all (239 samples, 100.00%)</title><rect x="10.0" y="1139.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1150.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.42%)</title><rect x="10.0" y="1123.0" width="4.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (20 samples, 8.37%)</title><rect x="14.9" y="1123.0" width="98.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.9" y="1134.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (20 samples, 8.37%)</title><rect x="14.9" y="1107.0" width="98.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.9" y="1118.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.42%)</title><rect x="14.9" y="1091.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.9" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.42%)</title><rect x="14.9" y="1075.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/377705444.accept (1 samples, 0.42%)</title><rect x="14.9" y="1059.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.9" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.42%)</title><rect x="14.9" y="1043.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.42%)</title><rect x="14.9" y="1027.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.9" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.42%)</title><rect x="14.9" y="1011.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.84%)</title><rect x="19.9" y="1091.0" width="9.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.42%)</title><rect x="19.9" y="1075.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.9" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.42%)</title><rect x="19.9" y="1059.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.9" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.42%)</title><rect x="19.9" y="1043.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.9" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.42%)</title><rect x="19.9" y="1027.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.9" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.42%)</title><rect x="19.9" y="1011.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.9" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.42%)</title><rect x="19.9" y="995.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.9" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.42%)</title><rect x="19.9" y="979.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.9" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.42%)</title><rect x="19.9" y="963.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.9" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.42%)</title><rect x="19.9" y="947.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.9" y="958.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.42%)</title><rect x="19.9" y="931.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.42%)</title><rect x="24.8" y="1075.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.84%)</title><rect x="29.7" y="1091.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.7" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/833707408.accept (2 samples, 0.84%)</title><rect x="29.7" y="1075.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="32.7" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$37 (2 samples, 0.84%)</title><rect x="29.7" y="1059.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.7" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (2 samples, 0.84%)</title><rect x="29.7" y="1043.0" width="9.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="32.7" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (2 samples, 0.84%)</title><rect x="29.7" y="1027.0" width="9.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.7" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 0.42%)</title><rect x="34.7" y="1011.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="37.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.42%)</title><rect x="34.7" y="995.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="37.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.42%)</title><rect x="34.7" y="979.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="37.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.42%)</title><rect x="34.7" y="963.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (1 samples, 0.42%)</title><rect x="34.7" y="947.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="37.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.42%)</title><rect x="34.7" y="931.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="37.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.42%)</title><rect x="34.7" y="915.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="37.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.42%)</title><rect x="34.7" y="899.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="37.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 6.28%)</title><rect x="39.6" y="1091.0" width="74.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.6" y="1102.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 6.28%)</title><rect x="39.6" y="1075.0" width="74.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="42.6" y="1086.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (11 samples, 4.60%)</title><rect x="44.6" y="1059.0" width="54.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.6" y="1070.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.26%)</title><rect x="44.6" y="1043.0" width="14.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.26%)</title><rect x="44.6" y="1027.0" width="14.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$244/1766778398.shouldBlock (1 samples, 0.42%)</title><rect x="44.6" y="1011.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.42%)</title><rect x="44.6" y="995.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.42%)</title><rect x="44.6" y="979.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="47.6" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.42%)</title><rect x="44.6" y="963.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.6" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.42%)</title><rect x="44.6" y="947.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.6" y="958.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.42%)</title><rect x="44.6" y="931.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.6" y="942.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.42%)</title><rect x="44.6" y="915.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="47.6" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.42%)</title><rect x="44.6" y="899.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="47.6" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.42%)</title><rect x="44.6" y="883.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.42%)</title><rect x="44.6" y="867.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="47.6" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.42%)</title><rect x="44.6" y="851.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.42%)</title><rect x="44.6" y="835.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.6" y="846.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.42%)</title><rect x="44.6" y="819.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="47.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$245/1909618604.test (1 samples, 0.42%)</title><rect x="44.6" y="803.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$hasAvailableFetches$0 (1 samples, 0.42%)</title><rect x="44.6" y="787.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.6" y="798.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.42%)</title><rect x="44.6" y="771.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.84%)</title><rect x="49.5" y="1011.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.84%)</title><rect x="49.5" y="995.0" width="9.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="52.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.84%)</title><rect x="49.5" y="979.0" width="9.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="52.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.42%)</title><rect x="49.5" y="963.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.42%)</title><rect x="49.5" y="947.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="52.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.42%)</title><rect x="49.5" y="931.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="52.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.42%)</title><rect x="49.5" y="915.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="52.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.hasField (1 samples, 0.42%)</title><rect x="49.5" y="899.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="52.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.42%)</title><rect x="49.5" y="883.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="52.5" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.42%)</title><rect x="49.5" y="867.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="52.5" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.42%)</title><rect x="49.5" y="851.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="52.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.build (1 samples, 0.42%)</title><rect x="54.4" y="963.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="57.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 2.93%)</title><rect x="59.4" y="1043.0" width="34.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.4" y="1054.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (7 samples, 2.93%)</title><rect x="59.4" y="1027.0" width="34.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.4" y="1038.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (7 samples, 2.93%)</title><rect x="59.4" y="1011.0" width="34.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.4" y="1022.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (7 samples, 2.93%)</title><rect x="59.4" y="995.0" width="34.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="62.4" y="1006.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (5 samples, 2.09%)</title><rect x="59.4" y="979.0" width="24.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="62.4" y="990.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 0.84%)</title><rect x="74.2" y="963.0" width="9.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 0.84%)</title><rect x="74.2" y="947.0" width="9.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 0.84%)</title><rect x="74.2" y="931.0" width="9.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="77.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 0.84%)</title><rect x="74.2" y="915.0" width="9.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="77.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 0.84%)</title><rect x="74.2" y="899.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="77.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 0.84%)</title><rect x="74.2" y="883.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="77.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 0.84%)</title><rect x="74.2" y="867.0" width="9.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="77.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.84%)</title><rect x="84.1" y="979.0" width="9.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="87.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.84%)</title><rect x="84.1" y="963.0" width="9.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="87.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.42%)</title><rect x="84.1" y="947.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.1" y="958.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.42%)</title><rect x="84.1" y="931.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="87.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.42%)</title><rect x="89.0" y="947.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="92.0" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.42%)</title><rect x="89.0" y="931.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="92.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.42%)</title><rect x="93.9" y="1043.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.42%)</title><rect x="93.9" y="1027.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.42%)</title><rect x="93.9" y="1011.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="96.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/404928890.accept (1 samples, 0.42%)</title><rect x="93.9" y="995.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.42%)</title><rect x="93.9" y="979.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="96.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.42%)</title><rect x="93.9" y="963.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="96.9" y="974.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.42%)</title><rect x="93.9" y="947.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="96.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$211/1252067304.apply (1 samples, 0.42%)</title><rect x="93.9" y="931.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="96.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.42%)</title><rect x="93.9" y="915.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="96.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.42%)</title><rect x="98.9" y="1059.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.42%)</title><rect x="98.9" y="1043.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="101.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.42%)</title><rect x="98.9" y="1027.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="101.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.42%)</title><rect x="98.9" y="1011.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="101.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.42%)</title><rect x="98.9" y="995.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.9" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.42%)</title><rect x="98.9" y="979.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="101.9" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.42%)</title><rect x="98.9" y="963.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="101.9" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.42%)</title><rect x="98.9" y="947.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="101.9" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.42%)</title><rect x="98.9" y="931.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.9" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.42%)</title><rect x="98.9" y="915.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="101.9" y="926.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.42%)</title><rect x="98.9" y="899.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="101.9" y="910.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.42%)</title><rect x="98.9" y="883.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="101.9" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.42%)</title><rect x="98.9" y="867.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="101.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$213/482323044.apply (1 samples, 0.42%)</title><rect x="98.9" y="851.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="101.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.42%)</title><rect x="103.8" y="1059.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="106.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.42%)</title><rect x="103.8" y="1043.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="106.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.42%)</title><rect x="103.8" y="1027.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="106.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.42%)</title><rect x="103.8" y="1011.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="106.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.42%)</title><rect x="103.8" y="995.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="106.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.42%)</title><rect x="103.8" y="979.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="106.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.42%)</title><rect x="103.8" y="963.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="106.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.42%)</title><rect x="103.8" y="947.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="106.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.42%)</title><rect x="103.8" y="931.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="106.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.42%)</title><rect x="103.8" y="915.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="106.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.42%)</title><rect x="103.8" y="899.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="106.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.42%)</title><rect x="103.8" y="883.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="106.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.42%)</title><rect x="103.8" y="867.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="106.8" y="878.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.42%)</title><rect x="103.8" y="851.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="106.8" y="862.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.42%)</title><rect x="103.8" y="835.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="106.8" y="846.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (1 samples, 0.42%)</title><rect x="103.8" y="819.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="106.8" y="830.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.42%)</title><rect x="103.8" y="803.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="106.8" y="814.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.42%)</title><rect x="103.8" y="787.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="106.8" y="798.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.42%)</title><rect x="103.8" y="771.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="106.8" y="782.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.42%)</title><rect x="103.8" y="755.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="106.8" y="766.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.replaceWith (1 samples, 0.42%)</title><rect x="103.8" y="739.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="106.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.42%)</title><rect x="108.7" y="1059.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="111.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.42%)</title><rect x="108.7" y="1043.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="111.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.42%)</title><rect x="108.7" y="1027.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="111.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.42%)</title><rect x="108.7" y="1011.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="111.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.42%)</title><rect x="108.7" y="995.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="111.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.run (152 samples, 63.60%)</title><rect x="113.7" y="1123.0" width="750.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="116.7" y="1134.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (152 samples, 63.60%)</title><rect x="113.7" y="1107.0" width="750.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="116.7" y="1118.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (152 samples, 63.60%)</title><rect x="113.7" y="1091.0" width="750.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="116.7" y="1102.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/955340677.run (149 samples, 62.34%)</title><rect x="118.6" y="1075.0" width="735.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="121.6" y="1086.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/955340677.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (149 samples, 62.34%)</title><rect x="118.6" y="1059.0" width="735.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="121.6" y="1070.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (149 samples, 62.34%)</title><rect x="118.6" y="1043.0" width="735.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="121.6" y="1054.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (139 samples, 58.16%)</title><rect x="118.6" y="1027.0" width="686.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="121.6" y="1038.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (23 samples, 9.62%)</title><rect x="123.6" y="1011.0" width="113.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="126.6" y="1022.0">com/linecorp/d..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.42%)</title><rect x="128.5" y="995.0" width="4.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="131.5" y="1006.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.42%)</title><rect x="128.5" y="979.0" width="4.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="131.5" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (21 samples, 8.79%)</title><rect x="133.4" y="995.0" width="103.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="136.4" y="1006.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (21 samples, 8.79%)</title><rect x="133.4" y="979.0" width="103.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="136.4" y="990.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (20 samples, 8.37%)</title><rect x="133.4" y="963.0" width="98.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="136.4" y="974.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (20 samples, 8.37%)</title><rect x="133.4" y="947.0" width="98.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="136.4" y="958.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (20 samples, 8.37%)</title><rect x="133.4" y="931.0" width="98.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="136.4" y="942.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (8 samples, 3.35%)</title><rect x="133.4" y="915.0" width="39.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="136.4" y="926.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.67%)</title><rect x="133.4" y="899.0" width="19.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="136.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.67%)</title><rect x="133.4" y="883.0" width="19.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="136.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 1.67%)</title><rect x="133.4" y="867.0" width="19.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="136.4" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.67%)</title><rect x="133.4" y="851.0" width="19.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="136.4" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 1.67%)</title><rect x="133.4" y="835.0" width="19.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="136.4" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.84%)</title><rect x="143.3" y="819.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="146.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.67%)</title><rect x="153.2" y="899.0" width="19.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="156.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 1.67%)</title><rect x="153.2" y="883.0" width="19.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="156.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.42%)</title><rect x="153.2" y="867.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="156.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.42%)</title><rect x="153.2" y="851.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="156.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 1.26%)</title><rect x="158.1" y="867.0" width="14.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="161.1" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.42%)</title><rect x="158.1" y="851.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="161.1" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.42%)</title><rect x="158.1" y="835.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="161.1" y="846.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.42%)</title><rect x="158.1" y="819.0" width="5.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="161.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.84%)</title><rect x="163.1" y="851.0" width="9.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="166.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.42%)</title><rect x="163.1" y="835.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="166.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.42%)</title><rect x="168.0" y="835.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="171.0" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.42%)</title><rect x="168.0" y="819.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="171.0" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.42%)</title><rect x="168.0" y="803.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="171.0" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.42%)</title><rect x="168.0" y="787.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="171.0" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.42%)</title><rect x="168.0" y="771.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="171.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (11 samples, 4.60%)</title><rect x="172.9" y="915.0" width="54.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="175.9" y="926.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.84%)</title><rect x="172.9" y="899.0" width="9.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.84%)</title><rect x="172.9" y="883.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="175.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.42%)</title><rect x="182.8" y="899.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="185.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.42%)</title><rect x="182.8" y="883.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="185.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.42%)</title><rect x="182.8" y="867.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="185.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (8 samples, 3.35%)</title><rect x="187.7" y="899.0" width="39.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="190.7" y="910.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.26%)</title><rect x="187.7" y="883.0" width="14.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="190.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 1.26%)</title><rect x="187.7" y="867.0" width="14.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="190.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 2.09%)</title><rect x="202.6" y="883.0" width="24.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="205.6" y="894.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 2.09%)</title><rect x="202.6" y="867.0" width="24.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="205.6" y="878.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 2.09%)</title><rect x="202.6" y="851.0" width="24.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.6" y="862.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.42%)</title><rect x="207.5" y="835.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.42%)</title><rect x="207.5" y="819.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="210.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.42%)</title><rect x="207.5" y="803.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="210.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.42%)</title><rect x="207.5" y="787.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="210.5" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.42%)</title><rect x="207.5" y="771.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="210.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.42%)</title><rect x="212.4" y="835.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="215.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.42%)</title><rect x="217.4" y="835.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="220.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.42%)</title><rect x="217.4" y="819.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="220.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.42%)</title><rect x="217.4" y="803.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.42%)</title><rect x="217.4" y="787.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="220.4" y="798.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.42%)</title><rect x="217.4" y="771.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="220.4" y="782.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.42%)</title><rect x="217.4" y="755.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.4" y="766.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor5.newInstance (1 samples, 0.42%)</title><rect x="217.4" y="739.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="220.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.42%)</title><rect x="222.3" y="835.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.42%)</title><rect x="227.2" y="915.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.42%)</title><rect x="227.2" y="899.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="230.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.42%)</title><rect x="227.2" y="883.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.42%)</title><rect x="227.2" y="867.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.42%)</title><rect x="227.2" y="851.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.42%)</title><rect x="232.2" y="963.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.2" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.42%)</title><rect x="232.2" y="947.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="235.2" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.42%)</title><rect x="232.2" y="931.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="235.2" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (112 samples, 46.86%)</title><rect x="237.1" y="1011.0" width="553.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.1" y="1022.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (21 samples, 8.79%)</title><rect x="237.1" y="995.0" width="103.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="240.1" y="1006.0">com/linecorp..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (20 samples, 8.37%)</title><rect x="242.1" y="979.0" width="98.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.1" y="990.0">org/slf4j/MD..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (16 samples, 6.69%)</title><rect x="261.8" y="963.0" width="79.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.8" y="974.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.42%)</title><rect x="266.7" y="947.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.7" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.42%)</title><rect x="266.7" y="931.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="269.7" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.42%)</title><rect x="266.7" y="915.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="269.7" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.42%)</title><rect x="266.7" y="899.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="269.7" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.42%)</title><rect x="266.7" y="883.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="269.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.42%)</title><rect x="266.7" y="867.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="269.7" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (14 samples, 5.86%)</title><rect x="271.7" y="947.0" width="69.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.7" y="958.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 2.51%)</title><rect x="311.2" y="931.0" width="29.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.2" y="942.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 2.51%)</title><rect x="311.2" y="915.0" width="29.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="314.2" y="926.0">ja..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.42%)</title><rect x="335.9" y="899.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="338.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 1.67%)</title><rect x="340.8" y="995.0" width="19.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="343.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 1.67%)</title><rect x="340.8" y="979.0" width="19.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="343.8" y="990.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 1.67%)</title><rect x="340.8" y="963.0" width="19.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="343.8" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (23 samples, 9.62%)</title><rect x="360.5" y="995.0" width="113.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="363.5" y="1006.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (23 samples, 9.62%)</title><rect x="360.5" y="979.0" width="113.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="363.5" y="990.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (10 samples, 4.18%)</title><rect x="365.5" y="963.0" width="49.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="368.5" y="974.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (9 samples, 3.77%)</title><rect x="370.4" y="947.0" width="44.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="373.4" y="958.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 2.09%)</title><rect x="380.3" y="931.0" width="24.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="383.3" y="942.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.84%)</title><rect x="390.2" y="915.0" width="9.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="393.2" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.84%)</title><rect x="390.2" y="899.0" width="9.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="393.2" y="910.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.84%)</title><rect x="390.2" y="883.0" width="9.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="393.2" y="894.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.42%)</title><rect x="395.1" y="867.0" width="4.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="398.1" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.42%)</title><rect x="400.0" y="915.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="403.0" y="926.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.42%)</title><rect x="405.0" y="931.0" width="4.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="408.0" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.42%)</title><rect x="409.9" y="931.0" width="5.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="412.9" y="942.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (12 samples, 5.02%)</title><rect x="414.9" y="963.0" width="59.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="417.9" y="974.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (11 samples, 4.60%)</title><rect x="419.8" y="947.0" width="54.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="422.8" y="958.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.42%)</title><rect x="419.8" y="931.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="422.8" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.42%)</title><rect x="419.8" y="915.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="422.8" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.42%)</title><rect x="419.8" y="899.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="422.8" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.42%)</title><rect x="419.8" y="883.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="422.8" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.42%)</title><rect x="419.8" y="867.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="422.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.42%)</title><rect x="419.8" y="851.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="422.8" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (10 samples, 4.18%)</title><rect x="424.7" y="931.0" width="49.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="427.7" y="942.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 3.77%)</title><rect x="429.7" y="915.0" width="44.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="432.7" y="926.0">java..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 2.09%)</title><rect x="449.4" y="899.0" width="24.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="452.4" y="910.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.84%)</title><rect x="454.4" y="883.0" width="9.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="457.4" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.84%)</title><rect x="464.2" y="883.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="467.2" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.42%)</title><rect x="469.2" y="867.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="472.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (59 samples, 24.69%)</title><rect x="474.1" y="995.0" width="291.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="477.1" y="1006.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (59 samples, 24.69%)</title><rect x="474.1" y="979.0" width="291.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="477.1" y="990.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/2144072261.process (53 samples, 22.18%)</title><rect x="488.9" y="963.0" width="261.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="491.9" y="974.0">com/linecorp/decaton/benchmark/Deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (52 samples, 21.76%)</title><rect x="493.8" y="947.0" width="256.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="496.8" y="958.0">com/linecorp/decaton/benchmark/Dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (52 samples, 21.76%)</title><rect x="493.8" y="931.0" width="256.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="496.8" y="942.0">com/linecorp/decaton/benchmark/Rec..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.42%)</title><rect x="508.7" y="915.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="511.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (48 samples, 20.08%)</title><rect x="513.6" y="915.0" width="237.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="516.6" y="926.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>java/lang/Thread.sleep (47 samples, 19.67%)</title><rect x="513.6" y="899.0" width="232.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="516.6" y="910.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (43 samples, 17.99%)</title><rect x="533.3" y="883.0" width="212.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="536.3" y="894.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.84%)</title><rect x="553.1" y="867.0" width="9.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="556.1" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.26%)</title><rect x="563.0" y="867.0" width="14.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="566.0" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.42%)</title><rect x="572.8" y="851.0" width="5.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="575.8" y="862.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.42%)</title><rect x="577.8" y="867.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="580.8" y="878.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (33 samples, 13.81%)</title><rect x="582.7" y="867.0" width="162.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="585.7" y="878.0">os::sleep(Thread*, lo..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.42%)</title><rect x="642.0" y="851.0" width="4.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="645.0" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.42%)</title><rect x="642.0" y="835.0" width="4.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="645.0" y="846.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.84%)</title><rect x="646.9" y="851.0" width="9.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="649.9" y="862.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 4.60%)</title><rect x="656.8" y="851.0" width="54.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="659.8" y="862.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.42%)</title><rect x="711.1" y="851.0" width="4.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="714.1" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.42%)</title><rect x="716.0" y="851.0" width="5.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="719.0" y="862.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 1.26%)</title><rect x="721.0" y="851.0" width="14.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="724.0" y="862.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.42%)</title><rect x="735.8" y="851.0" width="4.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="738.8" y="862.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.42%)</title><rect x="740.7" y="851.0" width="4.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="743.7" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.42%)</title><rect x="745.6" y="899.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="748.6" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.42%)</title><rect x="745.6" y="883.0" width="5.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="748.6" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.42%)</title><rect x="750.6" y="963.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="753.6" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.42%)</title><rect x="750.6" y="947.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="753.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/1884865551.get$Lambda (1 samples, 0.42%)</title><rect x="750.6" y="931.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="753.6" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/1884865551.&lt;init&gt; (1 samples, 0.42%)</title><rect x="750.6" y="915.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="753.6" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.42%)</title><rect x="755.5" y="963.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="758.5" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.42%)</title><rect x="755.5" y="947.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="758.5" y="958.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.42%)</title><rect x="755.5" y="931.0" width="5.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="758.5" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.42%)</title><rect x="760.5" y="963.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="763.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 2.09%)</title><rect x="765.4" y="995.0" width="24.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="768.4" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.84%)</title><rect x="780.2" y="979.0" width="9.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="783.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.42%)</title><rect x="785.1" y="963.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="788.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$267/940622796.accept (1 samples, 0.42%)</title><rect x="785.1" y="947.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="788.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (1 samples, 0.42%)</title><rect x="785.1" y="931.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="788.1" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.42%)</title><rect x="785.1" y="915.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="788.1" y="926.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.42%)</title><rect x="785.1" y="899.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="788.1" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.42%)</title><rect x="785.1" y="883.0" width="5.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="788.1" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.42%)</title><rect x="785.1" y="867.0" width="5.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="788.1" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 1.26%)</title><rect x="790.1" y="1011.0" width="14.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="793.1" y="1022.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.26%)</title><rect x="790.1" y="995.0" width="14.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="793.1" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 1.26%)</title><rect x="804.9" y="1027.0" width="14.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="807.9" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.42%)</title><rect x="814.8" y="1011.0" width="4.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="817.8" y="1022.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.42%)</title><rect x="814.8" y="995.0" width="4.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="817.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 2.93%)</title><rect x="819.7" y="1027.0" width="34.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="822.7" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.67%)</title><rect x="834.5" y="1011.0" width="19.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="837.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.67%)</title><rect x="834.5" y="995.0" width="19.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="837.5" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$269/504831069.accept (4 samples, 1.67%)</title><rect x="834.5" y="979.0" width="19.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="837.5" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$processTask$50 (4 samples, 1.67%)</title><rect x="834.5" y="963.0" width="19.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="837.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/827578286.complete (4 samples, 1.67%)</title><rect x="834.5" y="947.0" width="19.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="837.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$35 (4 samples, 1.67%)</title><rect x="834.5" y="931.0" width="19.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="837.5" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (4 samples, 1.67%)</title><rect x="834.5" y="915.0" width="19.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="837.5" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 1.67%)</title><rect x="834.5" y="899.0" width="19.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="837.5" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 1.67%)</title><rect x="834.5" y="883.0" width="19.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="837.5" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 1.67%)</title><rect x="834.5" y="867.0" width="19.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="837.5" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 1.67%)</title><rect x="834.5" y="851.0" width="19.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="837.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (2 samples, 0.84%)</title><rect x="854.3" y="1075.0" width="9.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="857.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 0.84%)</title><rect x="854.3" y="1059.0" width="9.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="857.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.84%)</title><rect x="854.3" y="1043.0" width="9.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="857.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.84%)</title><rect x="854.3" y="1027.0" width="9.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="857.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.84%)</title><rect x="854.3" y="1011.0" width="9.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="857.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.84%)</title><rect x="854.3" y="995.0" width="9.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="857.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.42%)</title><rect x="864.1" y="1123.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="867.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.42%)</title><rect x="864.1" y="1107.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="867.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.42%)</title><rect x="864.1" y="1091.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="867.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.42%)</title><rect x="864.1" y="1075.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="867.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.42%)</title><rect x="864.1" y="1059.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="867.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.42%)</title><rect x="864.1" y="1043.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="867.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.42%)</title><rect x="864.1" y="1027.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="867.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.42%)</title><rect x="864.1" y="1011.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="867.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.42%)</title><rect x="864.1" y="995.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="867.1" y="1006.0"></text>
</g>
<g>
<title>start_thread (65 samples, 27.20%)</title><rect x="869.1" y="1123.0" width="320.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="872.1" y="1134.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (65 samples, 27.20%)</title><rect x="869.1" y="1107.0" width="320.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="872.1" y="1118.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 2.93%)</title><rect x="869.1" y="1091.0" width="34.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="872.1" y="1102.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (7 samples, 2.93%)</title><rect x="869.1" y="1075.0" width="34.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="872.1" y="1086.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 2.93%)</title><rect x="869.1" y="1059.0" width="34.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="872.1" y="1070.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (7 samples, 2.93%)</title><rect x="869.1" y="1043.0" width="34.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="872.1" y="1054.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.26%)</title><rect x="879.0" y="1027.0" width="14.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="882.0" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.42%)</title><rect x="883.9" y="1011.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="886.9" y="1022.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.42%)</title><rect x="888.8" y="1011.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="891.8" y="1022.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.84%)</title><rect x="893.8" y="1027.0" width="9.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="896.8" y="1038.0"></text>
</g>
<g>
<title>JavaThread::run() (58 samples, 24.27%)</title><rect x="903.6" y="1091.0" width="286.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="906.6" y="1102.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (58 samples, 24.27%)</title><rect x="903.6" y="1075.0" width="286.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="906.6" y="1086.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (58 samples, 24.27%)</title><rect x="903.6" y="1059.0" width="286.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="906.6" y="1070.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (58 samples, 24.27%)</title><rect x="903.6" y="1043.0" width="286.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="906.6" y="1054.0">CompileBroker::invoke_compiler_on_meth..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (55 samples, 23.01%)</title><rect x="903.6" y="1027.0" width="271.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="906.6" y="1038.0">C2Compiler::compile_method(ciEnv*, c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (55 samples, 23.01%)</title><rect x="903.6" y="1011.0" width="271.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="906.6" y="1022.0">Compile::Compile(ciEnv*, C2Compiler*..</text>
</g>
<g>
<title>Compile::Code_Gen() (36 samples, 15.06%)</title><rect x="903.6" y="995.0" width="177.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="906.6" y="1006.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.42%)</title><rect x="903.6" y="979.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="906.6" y="990.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.42%)</title><rect x="903.6" y="963.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="906.6" y="974.0"></text>
</g>
<g>
<title>OopFlow::clone(OopFlow*, int) (1 samples, 0.42%)</title><rect x="903.6" y="947.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="906.6" y="958.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.84%)</title><rect x="908.6" y="979.0" width="9.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="911.6" y="990.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.42%)</title><rect x="913.5" y="963.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="916.5" y="974.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.67%)</title><rect x="918.5" y="979.0" width="19.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="921.5" y="990.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.67%)</title><rect x="918.5" y="963.0" width="19.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="921.5" y="974.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.42%)</title><rect x="918.5" y="947.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="921.5" y="958.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.84%)</title><rect x="923.4" y="947.0" width="9.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="926.4" y="958.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.42%)</title><rect x="928.3" y="931.0" width="5.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="931.3" y="942.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.42%)</title><rect x="928.3" y="915.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="931.3" y="926.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.42%)</title><rect x="928.3" y="899.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="931.3" y="910.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.42%)</title><rect x="928.3" y="883.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="931.3" y="894.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.42%)</title><rect x="928.3" y="867.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="931.3" y="878.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.42%)</title><rect x="933.3" y="947.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="936.3" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.84%)</title><rect x="938.2" y="979.0" width="9.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="941.2" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.84%)</title><rect x="938.2" y="963.0" width="9.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="941.2" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.42%)</title><rect x="938.2" y="947.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="941.2" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.42%)</title><rect x="938.2" y="931.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="941.2" y="942.0"></text>
</g>
<g>
<title>leaPPosIdxScaleOffNode::ideal_Opcode() const (1 samples, 0.42%)</title><rect x="943.1" y="947.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="946.1" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (27 samples, 11.30%)</title><rect x="948.1" y="979.0" width="133.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="951.1" y="990.0">PhaseChaitin::Reg..</text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.42%)</title><rect x="948.1" y="963.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="951.1" y="974.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.84%)</title><rect x="953.0" y="963.0" width="9.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="956.0" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.84%)</title><rect x="962.9" y="963.0" width="9.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="965.9" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.42%)</title><rect x="967.8" y="947.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="970.8" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 3.35%)</title><rect x="972.8" y="963.0" width="39.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="975.8" y="974.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.67%)</title><rect x="987.6" y="947.0" width="19.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="990.6" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.42%)</title><rect x="1002.4" y="931.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1005.4" y="942.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.42%)</title><rect x="1007.3" y="947.0" width="5.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1010.3" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 2.51%)</title><rect x="1012.3" y="963.0" width="29.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1015.3" y="974.0">Ph..</text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.42%)</title><rect x="1032.0" y="947.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1035.0" y="958.0"></text>
</g>
<g>
<title>loadConI0Node::bottom_type() const (1 samples, 0.42%)</title><rect x="1036.9" y="947.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1039.9" y="958.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.42%)</title><rect x="1036.9" y="931.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1039.9" y="942.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.42%)</title><rect x="1036.9" y="915.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1039.9" y="926.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.42%)</title><rect x="1036.9" y="899.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1039.9" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 1.67%)</title><rect x="1041.9" y="963.0" width="19.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1044.9" y="974.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.42%)</title><rect x="1051.8" y="947.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1054.8" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.42%)</title><rect x="1056.7" y="947.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1059.7" y="958.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.67%)</title><rect x="1061.6" y="963.0" width="19.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1064.6" y="974.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 1.26%)</title><rect x="1061.6" y="947.0" width="14.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1064.6" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.84%)</title><rect x="1066.6" y="931.0" width="9.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1069.6" y="942.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.42%)</title><rect x="1076.4" y="947.0" width="5.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1079.4" y="958.0"></text>
</g>
<g>
<title>Compile::Optimize() (11 samples, 4.60%)</title><rect x="1081.4" y="995.0" width="54.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1084.4" y="1006.0">Compi..</text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.42%)</title><rect x="1081.4" y="979.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1084.4" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (7 samples, 2.93%)</title><rect x="1086.3" y="979.0" width="34.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1089.3" y="990.0">Ph..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.42%)</title><rect x="1086.3" y="963.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1089.3" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.84%)</title><rect x="1091.3" y="963.0" width="9.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1094.3" y="974.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.84%)</title><rect x="1091.3" y="947.0" width="9.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1094.3" y="958.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.42%)</title><rect x="1096.2" y="931.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1099.2" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.42%)</title><rect x="1101.1" y="963.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.1" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.42%)</title><rect x="1101.1" y="947.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.1" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.26%)</title><rect x="1106.1" y="963.0" width="14.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1109.1" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.84%)</title><rect x="1111.0" y="947.0" width="9.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.0" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.42%)</title><rect x="1115.9" y="931.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1118.9" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.42%)</title><rect x="1120.9" y="979.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1123.9" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.42%)</title><rect x="1120.9" y="963.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1123.9" y="974.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.42%)</title><rect x="1120.9" y="947.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1123.9" y="958.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.42%)</title><rect x="1120.9" y="931.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.9" y="942.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.42%)</title><rect x="1120.9" y="915.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1123.9" y="926.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.42%)</title><rect x="1120.9" y="899.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1123.9" y="910.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.84%)</title><rect x="1125.8" y="979.0" width="9.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1128.8" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 3.35%)</title><rect x="1135.7" y="995.0" width="39.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.7" y="1006.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 3.35%)</title><rect x="1135.7" y="979.0" width="39.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.7" y="990.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 3.35%)</title><rect x="1135.7" y="963.0" width="39.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.7" y="974.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 3.35%)</title><rect x="1135.7" y="947.0" width="39.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.7" y="958.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 3.35%)</title><rect x="1135.7" y="931.0" width="39.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.7" y="942.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.51%)</title><rect x="1135.7" y="915.0" width="29.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.7" y="926.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.09%)</title><rect x="1135.7" y="899.0" width="24.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.7" y="910.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.09%)</title><rect x="1135.7" y="883.0" width="24.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.7" y="894.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.09%)</title><rect x="1135.7" y="867.0" width="24.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.7" y="878.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.09%)</title><rect x="1135.7" y="851.0" width="24.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.7" y="862.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.09%)</title><rect x="1135.7" y="835.0" width="24.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.7" y="846.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.09%)</title><rect x="1135.7" y="819.0" width="24.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.7" y="830.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.09%)</title><rect x="1135.7" y="803.0" width="24.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.7" y="814.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.09%)</title><rect x="1135.7" y="787.0" width="24.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.7" y="798.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.09%)</title><rect x="1135.7" y="771.0" width="24.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.7" y="782.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.09%)</title><rect x="1135.7" y="755.0" width="24.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.7" y="766.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.09%)</title><rect x="1135.7" y="739.0" width="24.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.7" y="750.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.09%)</title><rect x="1135.7" y="723.0" width="24.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.7" y="734.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.09%)</title><rect x="1135.7" y="707.0" width="24.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.7" y="718.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.09%)</title><rect x="1135.7" y="691.0" width="24.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.7" y="702.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.09%)</title><rect x="1135.7" y="675.0" width="24.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.7" y="686.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.09%)</title><rect x="1135.7" y="659.0" width="24.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.7" y="670.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.09%)</title><rect x="1135.7" y="643.0" width="24.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.7" y="654.0">P..</text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.42%)</title><rect x="1135.7" y="627.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.7" y="638.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.42%)</title><rect x="1135.7" y="611.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.7" y="622.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.42%)</title><rect x="1135.7" y="595.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.7" y="606.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.42%)</title><rect x="1135.7" y="579.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.7" y="590.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.42%)</title><rect x="1135.7" y="563.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.7" y="574.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.42%)</title><rect x="1135.7" y="547.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.7" y="558.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.42%)</title><rect x="1135.7" y="531.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.7" y="542.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.42%)</title><rect x="1135.7" y="515.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.7" y="526.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.42%)</title><rect x="1135.7" y="499.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.7" y="510.0"></text>
</g>
<g>
<title>TypeNarrowOop::isa_same_narrowptr(Type const*) const (1 samples, 0.42%)</title><rect x="1135.7" y="483.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.67%)</title><rect x="1140.6" y="627.0" width="19.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.6" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.67%)</title><rect x="1140.6" y="611.0" width="19.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.6" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.67%)</title><rect x="1140.6" y="595.0" width="19.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.67%)</title><rect x="1140.6" y="579.0" width="19.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.67%)</title><rect x="1140.6" y="563.0" width="19.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.67%)</title><rect x="1140.6" y="547.0" width="19.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.26%)</title><rect x="1140.6" y="531.0" width="14.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.6" y="542.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1140.6" y="515.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.6" y="526.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_reference_get() (1 samples, 0.42%)</title><rect x="1140.6" y="499.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.6" y="510.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.42%)</title><rect x="1140.6" y="483.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1143.6" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.84%)</title><rect x="1145.6" y="515.0" width="9.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.6" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.84%)</title><rect x="1145.6" y="499.0" width="9.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.84%)</title><rect x="1145.6" y="483.0" width="9.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.84%)</title><rect x="1145.6" y="467.0" width="9.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.84%)</title><rect x="1145.6" y="451.0" width="9.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.84%)</title><rect x="1145.6" y="435.0" width="9.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.6" y="446.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.42%)</title><rect x="1145.6" y="419.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.6" y="430.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.42%)</title><rect x="1145.6" y="403.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.6" y="414.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.42%)</title><rect x="1145.6" y="387.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.6" y="398.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.42%)</title><rect x="1145.6" y="371.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.6" y="382.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.42%)</title><rect x="1145.6" y="355.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.6" y="366.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.42%)</title><rect x="1145.6" y="339.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.6" y="350.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol_or_null() (1 samples, 0.42%)</title><rect x="1145.6" y="323.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.6" y="334.0"></text>
</g>
<g>
<title>SymbolTable::lookup_only(char const*, int, unsigned int&amp;) (1 samples, 0.42%)</title><rect x="1145.6" y="307.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.6" y="318.0"></text>
</g>
<g>
<title>Symbol::equals(char const*, int) const (1 samples, 0.42%)</title><rect x="1145.6" y="291.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.6" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1150.5" y="419.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.5" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1150.5" y="403.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1150.5" y="387.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1150.5" y="371.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1150.5" y="355.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1150.5" y="339.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.5" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1150.5" y="323.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.5" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1150.5" y="307.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1150.5" y="291.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1150.5" y="275.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1150.5" y="259.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1150.5" y="243.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.5" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1150.5" y="227.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.5" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1150.5" y="211.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1150.5" y="195.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1150.5" y="179.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1150.5" y="163.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.5" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1150.5" y="147.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.5" y="158.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.42%)</title><rect x="1150.5" y="131.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.5" y="142.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.42%)</title><rect x="1150.5" y="115.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.5" y="126.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.42%)</title><rect x="1150.5" y="99.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.5" y="110.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.42%)</title><rect x="1150.5" y="83.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.5" y="94.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.42%)</title><rect x="1150.5" y="67.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.5" y="78.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.42%)</title><rect x="1150.5" y="51.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.5" y="62.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.42%)</title><rect x="1150.5" y="35.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.5" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.42%)</title><rect x="1155.4" y="531.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.42%)</title><rect x="1155.4" y="515.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.4" y="526.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.42%)</title><rect x="1155.4" y="499.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.4" y="510.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.42%)</title><rect x="1155.4" y="483.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.4" y="494.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.42%)</title><rect x="1155.4" y="467.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.4" y="478.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.42%)</title><rect x="1155.4" y="451.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.4" y="462.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.42%)</title><rect x="1155.4" y="435.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.4" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1160.4" y="899.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.4" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1160.4" y="883.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.4" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1160.4" y="867.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1160.4" y="851.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1160.4" y="835.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1160.4" y="819.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1160.4" y="803.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.4" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1160.4" y="787.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.4" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1160.4" y="771.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1160.4" y="755.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1160.4" y="739.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1160.4" y="723.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1160.4" y="707.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.4" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1160.4" y="691.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.4" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1160.4" y="675.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1160.4" y="659.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1160.4" y="643.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1160.4" y="627.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1160.4" y="611.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.4" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1160.4" y="595.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.4" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1160.4" y="579.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1160.4" y="563.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.42%)</title><rect x="1165.3" y="915.0" width="5.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.3" y="926.0"></text>
</g>
<g>
<title>Parse::Block::successor_for_bci(int) (1 samples, 0.42%)</title><rect x="1165.3" y="899.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.42%)</title><rect x="1170.3" y="915.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.3" y="926.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.42%)</title><rect x="1170.3" y="899.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.3" y="910.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.42%)</title><rect x="1170.3" y="883.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.3" y="894.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.42%)</title><rect x="1170.3" y="867.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.3" y="878.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.42%)</title><rect x="1170.3" y="851.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.3" y="862.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.42%)</title><rect x="1170.3" y="835.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.3" y="846.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.42%)</title><rect x="1170.3" y="819.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.3" y="830.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.42%)</title><rect x="1170.3" y="803.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.3" y="814.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.26%)</title><rect x="1175.2" y="1027.0" width="14.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.2" y="1038.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.26%)</title><rect x="1175.2" y="1011.0" width="14.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="1022.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.26%)</title><rect x="1175.2" y="995.0" width="14.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.2" y="1006.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.26%)</title><rect x="1175.2" y="979.0" width="14.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.2" y="990.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.84%)</title><rect x="1175.2" y="963.0" width="9.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.2" y="974.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (2 samples, 0.84%)</title><rect x="1175.2" y="947.0" width="9.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.2" y="958.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_exception_handler() (1 samples, 0.42%)</title><rect x="1175.2" y="931.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.2" y="942.0"></text>
</g>
<g>
<title>MacroAssembler::stop(char const*) (1 samples, 0.42%)</title><rect x="1175.2" y="915.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.2" y="926.0"></text>
</g>
<g>
<title>Assembler::pusha() (1 samples, 0.42%)</title><rect x="1175.2" y="899.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.2" y="910.0"></text>
</g>
<g>
<title>Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&amp;, int) (1 samples, 0.42%)</title><rect x="1175.2" y="883.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.2" y="894.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.42%)</title><rect x="1180.1" y="931.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.1" y="942.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.42%)</title><rect x="1180.1" y="915.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.1" y="926.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.42%)</title><rect x="1180.1" y="899.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.1" y="910.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.42%)</title><rect x="1180.1" y="883.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.1" y="894.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.42%)</title><rect x="1180.1" y="867.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.1" y="878.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.42%)</title><rect x="1180.1" y="851.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.1" y="862.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.42%)</title><rect x="1180.1" y="835.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.1" y="846.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.42%)</title><rect x="1185.1" y="963.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.1" y="974.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.42%)</title><rect x="1185.1" y="947.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.1" y="958.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.42%)</title><rect x="1185.1" y="931.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.1" y="942.0"></text>
</g>
<g>
<title>LIRGenerator::do_Base(Base*) (1 samples, 0.42%)</title><rect x="1185.1" y="915.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.1" y="926.0"></text>
</g>
</g>
</svg>
