<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,363 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="10.0" y="2035.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>heap_trim (1 samples, 0.07%)</title><rect x="10.0" y="2019.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (276 samples, 20.25%)</title><rect x="10.9" y="2035.0" width="238.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="2046.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (275 samples, 20.18%)</title><rect x="10.9" y="2019.0" width="238.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.9" y="2030.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (5 samples, 0.37%)</title><rect x="10.9" y="2003.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.9" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.37%)</title><rect x="10.9" y="1987.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.9" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/377705444.accept (5 samples, 0.37%)</title><rect x="10.9" y="1971.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (5 samples, 0.37%)</title><rect x="10.9" y="1955.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.9" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.29%)</title><rect x="11.7" y="1939.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.7" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.29%)</title><rect x="11.7" y="1923.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.7" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.07%)</title><rect x="15.2" y="2003.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.2" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.07%)</title><rect x="15.2" y="1987.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.2" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="15.2" y="1971.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.2" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="15.2" y="1955.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.2" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="15.2" y="1939.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.2" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="15.2" y="1923.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="15.2" y="1907.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.2" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="15.2" y="1891.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.2" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="15.2" y="1875.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.2" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="15.2" y="1859.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.2" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="15.2" y="1843.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.2" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$169/1362094811.get (1 samples, 0.07%)</title><rect x="15.2" y="1827.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (218 samples, 15.99%)</title><rect x="16.1" y="2003.0" width="188.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.1" y="2014.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/833707408.accept (210 samples, 15.41%)</title><rect x="16.9" y="1987.0" width="181.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.9" y="1998.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="18.7" y="1971.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="21.7" y="1982.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.07%)</title><rect x="18.7" y="1955.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="21.7" y="1966.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="18.7" y="1939.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="21.7" y="1950.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.07%)</title><rect x="18.7" y="1923.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="21.7" y="1934.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="18.7" y="1907.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="21.7" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$37 (207 samples, 15.19%)</title><rect x="19.5" y="1971.0" width="179.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.5" y="1982.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.07%)</title><rect x="19.5" y="1955.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.5" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (154 samples, 11.30%)</title><rect x="20.4" y="1955.0" width="133.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.4" y="1966.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (154 samples, 11.30%)</title><rect x="20.4" y="1939.0" width="133.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.4" y="1950.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (154 samples, 11.30%)</title><rect x="20.4" y="1923.0" width="133.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.4" y="1934.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (154 samples, 11.30%)</title><rect x="20.4" y="1907.0" width="133.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.4" y="1918.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (154 samples, 11.30%)</title><rect x="20.4" y="1891.0" width="133.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.4" y="1902.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (130 samples, 9.54%)</title><rect x="37.7" y="1875.0" width="112.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.7" y="1886.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue$Node.&lt;init&gt; (12 samples, 0.88%)</title><rect x="37.7" y="1859.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.7" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (102 samples, 7.48%)</title><rect x="48.1" y="1859.0" width="88.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="51.1" y="1870.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (8 samples, 0.59%)</title><rect x="52.4" y="1843.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.4" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (8 samples, 0.59%)</title><rect x="52.4" y="1827.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.4" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (8 samples, 0.59%)</title><rect x="52.4" y="1811.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="55.4" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (89 samples, 6.53%)</title><rect x="59.3" y="1843.0" width="77.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="62.3" y="1854.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (89 samples, 6.53%)</title><rect x="59.3" y="1827.0" width="77.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.3" y="1838.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (88 samples, 6.46%)</title><rect x="60.2" y="1811.0" width="76.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.2" y="1822.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (85 samples, 6.24%)</title><rect x="62.8" y="1795.0" width="73.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="65.8" y="1806.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (69 samples, 5.06%)</title><rect x="76.7" y="1779.0" width="59.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.7" y="1790.0">sun/mi..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="76.7" y="1763.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="79.7" y="1774.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.07%)</title><rect x="77.5" y="1763.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="80.5" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Unpark (60 samples, 4.40%)</title><rect x="78.4" y="1763.0" width="51.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="81.4" y="1774.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="78.4" y="1747.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="81.4" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.07%)</title><rect x="79.3" y="1747.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="82.3" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (40 samples, 2.93%)</title><rect x="80.1" y="1747.0" width="34.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="83.1" y="1758.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.15%)</title><rect x="114.8" y="1747.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="117.8" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (16 samples, 1.17%)</title><rect x="116.5" y="1747.0" width="13.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="119.5" y="1758.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.07%)</title><rect x="130.3" y="1763.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="133.3" y="1774.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.22%)</title><rect x="131.2" y="1763.0" width="2.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="134.2" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.15%)</title><rect x="133.8" y="1763.0" width="1.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="136.8" y="1774.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.07%)</title><rect x="135.5" y="1763.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="138.5" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.07%)</title><rect x="136.4" y="1859.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="139.4" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.07%)</title><rect x="137.3" y="1859.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="140.3" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 1.03%)</title><rect x="138.1" y="1859.0" width="12.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="141.1" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.07%)</title><rect x="138.1" y="1843.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="141.1" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 0.95%)</title><rect x="139.0" y="1843.0" width="11.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="142.0" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 0.88%)</title><rect x="139.9" y="1827.0" width="10.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="142.9" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 0.88%)</title><rect x="139.9" y="1811.0" width="10.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="142.9" y="1822.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.29%)</title><rect x="150.2" y="1875.0" width="3.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="153.2" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (5 samples, 0.37%)</title><rect x="153.7" y="1955.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="156.7" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (5 samples, 0.37%)</title><rect x="153.7" y="1939.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="156.7" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (10 samples, 0.73%)</title><rect x="158.0" y="1955.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="161.0" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.73%)</title><rect x="158.0" y="1939.0" width="8.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="161.0" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (10 samples, 0.73%)</title><rect x="158.0" y="1923.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="161.0" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (37 samples, 2.71%)</title><rect x="166.7" y="1955.0" width="32.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="169.7" y="1966.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (37 samples, 2.71%)</title><rect x="166.7" y="1939.0" width="32.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="169.7" y="1950.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (16 samples, 1.17%)</title><rect x="181.4" y="1923.0" width="13.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="184.4" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (11 samples, 0.81%)</title><rect x="181.4" y="1907.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="184.4" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (11 samples, 0.81%)</title><rect x="181.4" y="1891.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="184.4" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (11 samples, 0.81%)</title><rect x="181.4" y="1875.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="184.4" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.22%)</title><rect x="186.6" y="1859.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="189.6" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="186.6" y="1843.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="189.6" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.07%)</title><rect x="186.6" y="1827.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="189.6" y="1838.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.07%)</title><rect x="186.6" y="1811.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="189.6" y="1822.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.07%)</title><rect x="186.6" y="1795.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="189.6" y="1806.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.07%)</title><rect x="186.6" y="1779.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="189.6" y="1790.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.07%)</title><rect x="187.5" y="1843.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="190.5" y="1854.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.07%)</title><rect x="188.3" y="1843.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="191.3" y="1854.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="189.2" y="1859.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="192.2" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="189.2" y="1843.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="192.2" y="1854.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="190.1" y="1859.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="193.1" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (5 samples, 0.37%)</title><rect x="190.9" y="1907.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="193.9" y="1918.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.29%)</title><rect x="195.3" y="1923.0" width="3.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="198.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.44%)</title><rect x="198.7" y="1987.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="201.7" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.44%)</title><rect x="198.7" y="1971.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="201.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.44%)</title><rect x="198.7" y="1955.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="201.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.44%)</title><rect x="198.7" y="1939.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="201.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.07%)</title><rect x="203.9" y="1987.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="206.9" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="203.9" y="1971.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="206.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (51 samples, 3.74%)</title><rect x="204.8" y="2003.0" width="44.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="207.8" y="2014.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (50 samples, 3.67%)</title><rect x="204.8" y="1987.0" width="43.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.8" y="1998.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.07%)</title><rect x="204.8" y="1971.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="207.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquire (1 samples, 0.07%)</title><rect x="204.8" y="1955.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="207.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (28 samples, 2.05%)</title><rect x="205.7" y="1971.0" width="24.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="208.7" y="1982.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (28 samples, 2.05%)</title><rect x="205.7" y="1955.0" width="24.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.7" y="1966.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (28 samples, 2.05%)</title><rect x="205.7" y="1939.0" width="24.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.7" y="1950.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (24 samples, 1.76%)</title><rect x="205.7" y="1923.0" width="20.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="208.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (24 samples, 1.76%)</title><rect x="205.7" y="1907.0" width="20.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.7" y="1918.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.07%)</title><rect x="209.1" y="1891.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="212.1" y="1902.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.07%)</title><rect x="209.1" y="1875.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="212.1" y="1886.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.07%)</title><rect x="209.1" y="1859.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="212.1" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.07%)</title><rect x="209.1" y="1843.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="212.1" y="1854.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.07%)</title><rect x="209.1" y="1827.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="212.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (11 samples, 0.81%)</title><rect x="210.0" y="1891.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="213.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (4 samples, 0.29%)</title><rect x="210.0" y="1875.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="213.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.29%)</title><rect x="210.0" y="1859.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="213.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.29%)</title><rect x="210.0" y="1843.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="213.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.29%)</title><rect x="210.0" y="1827.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="213.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.29%)</title><rect x="210.0" y="1811.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="213.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (4 samples, 0.29%)</title><rect x="210.0" y="1795.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="213.0" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (4 samples, 0.29%)</title><rect x="210.0" y="1779.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (7 samples, 0.51%)</title><rect x="213.4" y="1875.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="216.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (7 samples, 0.51%)</title><rect x="213.4" y="1859.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="216.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.07%)</title><rect x="218.6" y="1843.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.07%)</title><rect x="218.6" y="1827.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.07%)</title><rect x="218.6" y="1811.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.6" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="218.6" y="1795.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="221.6" y="1806.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="218.6" y="1779.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="221.6" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="218.6" y="1763.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="221.6" y="1774.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.07%)</title><rect x="218.6" y="1747.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="221.6" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (7 samples, 0.51%)</title><rect x="219.5" y="1891.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (7 samples, 0.51%)</title><rect x="219.5" y="1875.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="222.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (7 samples, 0.51%)</title><rect x="219.5" y="1859.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.5" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (7 samples, 0.51%)</title><rect x="219.5" y="1843.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.5" y="1854.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (5 samples, 0.37%)</title><rect x="221.2" y="1827.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="224.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.07%)</title><rect x="225.6" y="1891.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.07%)</title><rect x="226.4" y="1923.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="229.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.07%)</title><rect x="226.4" y="1907.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="229.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="226.4" y="1891.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="229.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="226.4" y="1875.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.4" y="1886.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="226.4" y="1859.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="229.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.15%)</title><rect x="227.3" y="1923.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.15%)</title><rect x="227.3" y="1907.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="230.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.07%)</title><rect x="227.3" y="1891.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="230.3" y="1902.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="227.3" y="1875.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="230.3" y="1886.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="227.3" y="1859.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.07%)</title><rect x="227.3" y="1843.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="230.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.07%)</title><rect x="227.3" y="1827.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="230.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.07%)</title><rect x="227.3" y="1811.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="230.3" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.07%)</title><rect x="227.3" y="1795.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.3" y="1806.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="227.3" y="1779.0" width="0.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="230.3" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.07%)</title><rect x="228.2" y="1891.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.2" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="228.2" y="1875.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.07%)</title><rect x="229.0" y="1923.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (13 samples, 0.95%)</title><rect x="229.9" y="1971.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="232.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (12 samples, 0.88%)</title><rect x="229.9" y="1955.0" width="10.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="232.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.59%)</title><rect x="229.9" y="1939.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.15%)</title><rect x="230.8" y="1923.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="233.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.15%)</title><rect x="230.8" y="1907.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.8" y="1918.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="230.8" y="1891.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="233.8" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="230.8" y="1875.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.8" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="230.8" y="1859.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="233.8" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="231.6" y="1891.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.6" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="231.6" y="1875.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="234.6" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="231.6" y="1859.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.6" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="231.6" y="1843.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="234.6" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="231.6" y="1827.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.6" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="231.6" y="1811.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="234.6" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.07%)</title><rect x="231.6" y="1795.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.6" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.15%)</title><rect x="232.5" y="1923.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.5" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.15%)</title><rect x="232.5" y="1907.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="235.5" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.15%)</title><rect x="232.5" y="1891.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="235.5" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.07%)</title><rect x="232.5" y="1875.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="235.5" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="232.5" y="1859.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="235.5" y="1870.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="233.4" y="1875.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.4" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="233.4" y="1859.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="236.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.22%)</title><rect x="234.2" y="1923.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="237.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.15%)</title><rect x="235.1" y="1907.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.1" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.15%)</title><rect x="235.1" y="1891.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="238.1" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.15%)</title><rect x="235.1" y="1875.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.1" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.07%)</title><rect x="235.1" y="1859.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="238.1" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.07%)</title><rect x="235.1" y="1843.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="238.1" y="1854.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="235.1" y="1827.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="238.1" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="235.1" y="1811.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="238.1" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="235.1" y="1795.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="238.1" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="236.0" y="1859.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="239.0" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="236.0" y="1843.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.0" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="236.0" y="1827.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="239.0" y="1838.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="236.0" y="1811.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="239.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (4 samples, 0.29%)</title><rect x="236.8" y="1939.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="239.8" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (4 samples, 0.29%)</title><rect x="236.8" y="1923.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="239.8" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.29%)</title><rect x="236.8" y="1907.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="239.8" y="1918.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.07%)</title><rect x="238.6" y="1891.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="241.6" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="239.4" y="1891.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.4" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="239.4" y="1875.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="242.4" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$47/2131952342.get (1 samples, 0.07%)</title><rect x="239.4" y="1859.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="242.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.07%)</title><rect x="240.3" y="1955.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="243.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.22%)</title><rect x="241.2" y="1971.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.22%)</title><rect x="241.2" y="1955.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.22%)</title><rect x="241.2" y="1939.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="241.2" y="1923.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="241.2" y="1907.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="241.2" y="1891.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.2" y="1902.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.07%)</title><rect x="241.2" y="1875.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.2" y="1886.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.07%)</title><rect x="241.2" y="1859.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.15%)</title><rect x="242.0" y="1923.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="245.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.07%)</title><rect x="242.0" y="1907.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="245.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.07%)</title><rect x="242.0" y="1891.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.07%)</title><rect x="242.0" y="1875.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="245.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.07%)</title><rect x="242.0" y="1859.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.0" y="1870.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.07%)</title><rect x="242.0" y="1843.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.0" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.07%)</title><rect x="242.0" y="1827.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.07%)</title><rect x="242.9" y="1907.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="242.9" y="1891.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="245.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="242.9" y="1875.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="242.9" y="1859.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.22%)</title><rect x="243.7" y="1971.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.22%)</title><rect x="243.7" y="1955.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.22%)</title><rect x="243.7" y="1939.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.7" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.07%)</title><rect x="243.7" y="1923.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.15%)</title><rect x="244.6" y="1923.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="247.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.07%)</title><rect x="245.5" y="1907.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="248.5" y="1918.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="245.5" y="1891.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="248.5" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="245.5" y="1875.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="248.5" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="245.5" y="1859.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="248.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.07%)</title><rect x="246.3" y="1971.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="249.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="246.3" y="1955.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="249.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="246.3" y="1939.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="249.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="246.3" y="1923.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="249.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="246.3" y="1907.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.07%)</title><rect x="246.3" y="1891.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Avg.update (1 samples, 0.07%)</title><rect x="246.3" y="1875.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="249.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.07%)</title><rect x="247.2" y="1971.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="250.2" y="1982.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="247.2" y="1955.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="250.2" y="1966.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="247.2" y="1939.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="250.2" y="1950.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="248.1" y="1987.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="251.1" y="1998.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="248.1" y="1971.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="251.1" y="1982.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="248.9" y="2019.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="251.9" y="2030.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="248.9" y="2003.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="251.9" y="2014.0"></text>
</g>
<g>
<title>java/lang/Thread.run (677 samples, 49.67%)</title><rect x="249.8" y="2035.0" width="586.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.8" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (677 samples, 49.67%)</title><rect x="249.8" y="2019.0" width="586.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="252.8" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (677 samples, 49.67%)</title><rect x="249.8" y="2003.0" width="586.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="252.8" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/955340677.run (455 samples, 33.38%)</title><rect x="249.8" y="1987.0" width="393.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="252.8" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (455 samples, 33.38%)</title><rect x="249.8" y="1971.0" width="393.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="252.8" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (455 samples, 33.38%)</title><rect x="249.8" y="1955.0" width="393.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="252.8" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (438 samples, 32.13%)</title><rect x="249.8" y="1939.0" width="379.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="252.8" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeli..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (142 samples, 10.42%)</title><rect x="249.8" y="1923.0" width="122.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="252.8" y="1934.0">com/linecorp/de..</text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.59%)</title><rect x="255.9" y="1907.0" width="6.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="258.9" y="1918.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.44%)</title><rect x="257.6" y="1891.0" width="5.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="260.6" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (126 samples, 9.24%)</title><rect x="262.8" y="1907.0" width="109.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="265.8" y="1918.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (126 samples, 9.24%)</title><rect x="262.8" y="1891.0" width="109.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="265.8" y="1902.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (126 samples, 9.24%)</title><rect x="262.8" y="1875.0" width="109.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="265.8" y="1886.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (126 samples, 9.24%)</title><rect x="262.8" y="1859.0" width="109.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="265.8" y="1870.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (126 samples, 9.24%)</title><rect x="262.8" y="1843.0" width="109.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="265.8" y="1854.0">com/fasterxml..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="262.8" y="1827.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="265.8" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="262.8" y="1811.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="265.8" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="262.8" y="1795.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="265.8" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="262.8" y="1779.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="265.8" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="262.8" y="1763.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="265.8" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="262.8" y="1747.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="265.8" y="1758.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="262.8" y="1731.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="265.8" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="262.8" y="1715.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="265.8" y="1726.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="262.8" y="1699.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="265.8" y="1710.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.07%)</title><rect x="262.8" y="1683.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="265.8" y="1694.0"></text>
</g>
<g>
<title>AbsSeq::dsd() const (1 samples, 0.07%)</title><rect x="262.8" y="1667.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="265.8" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (39 samples, 2.86%)</title><rect x="263.7" y="1827.0" width="33.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="266.7" y="1838.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (18 samples, 1.32%)</title><rect x="263.7" y="1811.0" width="15.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (18 samples, 1.32%)</title><rect x="263.7" y="1795.0" width="15.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="266.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (18 samples, 1.32%)</title><rect x="263.7" y="1779.0" width="15.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.7" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (18 samples, 1.32%)</title><rect x="263.7" y="1763.0" width="15.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.7" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (15 samples, 1.10%)</title><rect x="263.7" y="1747.0" width="12.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.7" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.15%)</title><rect x="274.9" y="1731.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="277.9" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (3 samples, 0.22%)</title><rect x="276.6" y="1747.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="279.6" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (2 samples, 0.15%)</title><rect x="277.5" y="1731.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (21 samples, 1.54%)</title><rect x="279.2" y="1811.0" width="18.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (21 samples, 1.54%)</title><rect x="279.2" y="1795.0" width="18.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.2" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="279.2" y="1779.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="282.2" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="279.2" y="1763.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="282.2" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="279.2" y="1747.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="282.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 0.37%)</title><rect x="280.1" y="1779.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.1" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="280.1" y="1763.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="283.1" y="1774.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="280.1" y="1747.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="283.1" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="280.1" y="1731.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="283.1" y="1742.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="280.1" y="1715.0" width="0.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="283.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (4 samples, 0.29%)</title><rect x="281.0" y="1763.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="284.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.07%)</title><rect x="284.4" y="1779.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="287.4" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="284.4" y="1763.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="287.4" y="1774.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="284.4" y="1747.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="287.4" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="284.4" y="1731.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="287.4" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="284.4" y="1715.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="287.4" y="1726.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="284.4" y="1699.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="287.4" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (14 samples, 1.03%)</title><rect x="285.3" y="1779.0" width="12.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="288.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (80 samples, 5.87%)</title><rect x="297.4" y="1827.0" width="69.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="300.4" y="1838.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.07%)</title><rect x="297.4" y="1811.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="300.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.07%)</title><rect x="297.4" y="1795.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="300.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.07%)</title><rect x="297.4" y="1779.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="300.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.07%)</title><rect x="297.4" y="1763.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="300.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.07%)</title><rect x="297.4" y="1747.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="300.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.29%)</title><rect x="298.3" y="1811.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="301.3" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.29%)</title><rect x="298.3" y="1795.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="301.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.59%)</title><rect x="301.8" y="1811.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="304.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.44%)</title><rect x="303.5" y="1795.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="306.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.44%)</title><rect x="303.5" y="1779.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="306.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (6 samples, 0.44%)</title><rect x="303.5" y="1763.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="306.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (4 samples, 0.29%)</title><rect x="305.2" y="1747.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="308.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.37%)</title><rect x="308.7" y="1811.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.37%)</title><rect x="308.7" y="1795.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="311.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (62 samples, 4.55%)</title><rect x="313.0" y="1811.0" width="53.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="316.0" y="1822.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.32%)</title><rect x="313.9" y="1795.0" width="15.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="316.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.22%)</title><rect x="319.9" y="1779.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="322.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.22%)</title><rect x="319.9" y="1763.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="322.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.22%)</title><rect x="319.9" y="1747.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="322.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (6 samples, 0.44%)</title><rect x="322.5" y="1779.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="325.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (6 samples, 0.44%)</title><rect x="322.5" y="1763.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="325.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.15%)</title><rect x="327.7" y="1779.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="330.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (43 samples, 3.15%)</title><rect x="329.5" y="1795.0" width="37.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="332.5" y="1806.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (43 samples, 3.15%)</title><rect x="329.5" y="1779.0" width="37.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="332.5" y="1790.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (43 samples, 3.15%)</title><rect x="329.5" y="1763.0" width="37.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="332.5" y="1774.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.47%)</title><rect x="331.2" y="1747.0" width="17.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="334.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.15%)</title><rect x="335.5" y="1731.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="338.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.59%)</title><rect x="337.2" y="1731.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="340.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.59%)</title><rect x="337.2" y="1715.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="340.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.59%)</title><rect x="337.2" y="1699.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="340.2" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (6 samples, 0.44%)</title><rect x="339.0" y="1683.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="342.0" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.37%)</title><rect x="344.2" y="1731.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="347.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.59%)</title><rect x="348.5" y="1747.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="351.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.37%)</title><rect x="351.1" y="1731.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="354.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.37%)</title><rect x="351.1" y="1715.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="354.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.37%)</title><rect x="351.1" y="1699.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="354.1" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.37%)</title><rect x="351.1" y="1683.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.1" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.51%)</title><rect x="355.4" y="1747.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="358.4" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.51%)</title><rect x="355.4" y="1731.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="358.4" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.51%)</title><rect x="355.4" y="1715.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="358.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="360.6" y="1699.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="363.6" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (6 samples, 0.44%)</title><rect x="361.5" y="1747.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="364.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (6 samples, 0.44%)</title><rect x="361.5" y="1731.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="364.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (6 samples, 0.44%)</title><rect x="366.7" y="1827.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="369.7" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 0.44%)</title><rect x="366.7" y="1811.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="369.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 0.44%)</title><rect x="366.7" y="1795.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="369.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.44%)</title><rect x="366.7" y="1779.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="369.7" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.44%)</title><rect x="366.7" y="1763.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="369.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.07%)</title><rect x="371.0" y="1747.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="374.0" y="1758.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="371.9" y="1907.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="374.9" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (296 samples, 21.72%)</title><rect x="372.7" y="1923.0" width="256.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="375.7" y="1934.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (43 samples, 3.15%)</title><rect x="375.3" y="1907.0" width="37.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="378.3" y="1918.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (43 samples, 3.15%)</title><rect x="375.3" y="1891.0" width="37.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="378.3" y="1902.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (42 samples, 3.08%)</title><rect x="376.2" y="1875.0" width="36.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="379.2" y="1886.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.59%)</title><rect x="376.2" y="1859.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="379.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.59%)</title><rect x="376.2" y="1843.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="379.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.59%)</title><rect x="376.2" y="1827.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="379.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.59%)</title><rect x="376.2" y="1811.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="379.2" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.15%)</title><rect x="381.4" y="1795.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="384.4" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.07%)</title><rect x="382.3" y="1779.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="385.3" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (34 samples, 2.49%)</title><rect x="383.1" y="1859.0" width="29.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="386.1" y="1870.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 0.81%)</title><rect x="403.0" y="1843.0" width="9.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="406.0" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (11 samples, 0.81%)</title><rect x="403.0" y="1827.0" width="9.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="406.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.22%)</title><rect x="408.2" y="1811.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="411.2" y="1822.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.15%)</title><rect x="410.8" y="1811.0" width="1.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="413.8" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (15 samples, 1.10%)</title><rect x="412.6" y="1907.0" width="13.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="415.6" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.29%)</title><rect x="418.6" y="1891.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="421.6" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="418.6" y="1875.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="421.6" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="418.6" y="1859.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="421.6" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="418.6" y="1843.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="421.6" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="418.6" y="1827.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="421.6" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="418.6" y="1811.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="421.6" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="418.6" y="1795.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="421.6" y="1806.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="418.6" y="1779.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="421.6" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.22%)</title><rect x="419.5" y="1875.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="422.5" y="1886.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.29%)</title><rect x="422.1" y="1891.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="425.1" y="1902.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.29%)</title><rect x="422.1" y="1875.0" width="3.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="425.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (176 samples, 12.91%)</title><rect x="425.6" y="1907.0" width="152.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="428.6" y="1918.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (176 samples, 12.91%)</title><rect x="425.6" y="1891.0" width="152.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="428.6" y="1902.0">com/linecorp/decato..</text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.59%)</title><rect x="434.2" y="1875.0" width="6.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="437.2" y="1886.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.51%)</title><rect x="435.1" y="1859.0" width="6.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="438.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (56 samples, 4.11%)</title><rect x="441.1" y="1875.0" width="48.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="444.1" y="1886.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (56 samples, 4.11%)</title><rect x="441.1" y="1859.0" width="48.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="444.1" y="1870.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (37 samples, 2.71%)</title><rect x="446.3" y="1843.0" width="32.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="449.3" y="1854.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (20 samples, 1.47%)</title><rect x="449.8" y="1827.0" width="17.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="452.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (20 samples, 1.47%)</title><rect x="449.8" y="1811.0" width="17.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="452.8" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (20 samples, 1.47%)</title><rect x="449.8" y="1795.0" width="17.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="452.8" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (8 samples, 0.59%)</title><rect x="455.0" y="1779.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="458.0" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.37%)</title><rect x="455.0" y="1763.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="458.0" y="1774.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.37%)</title><rect x="455.0" y="1747.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="458.0" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (4 samples, 0.29%)</title><rect x="455.9" y="1731.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="458.9" y="1742.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="455.9" y="1715.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="458.9" y="1726.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="455.9" y="1699.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="458.9" y="1710.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.15%)</title><rect x="456.7" y="1715.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="459.7" y="1726.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.07%)</title><rect x="458.5" y="1715.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="461.5" y="1726.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.22%)</title><rect x="459.3" y="1763.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="462.3" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.15%)</title><rect x="460.2" y="1747.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="463.2" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.15%)</title><rect x="460.2" y="1731.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="463.2" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (2 samples, 0.15%)</title><rect x="460.2" y="1715.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="463.2" y="1726.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.07%)</title><rect x="460.2" y="1699.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="463.2" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.07%)</title><rect x="460.2" y="1683.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="463.2" y="1694.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.07%)</title><rect x="460.2" y="1667.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="463.2" y="1678.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.07%)</title><rect x="461.0" y="1699.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="464.0" y="1710.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="461.0" y="1683.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="464.0" y="1694.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.07%)</title><rect x="461.0" y="1667.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="464.0" y="1678.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.44%)</title><rect x="461.9" y="1779.0" width="5.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="464.9" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.59%)</title><rect x="467.1" y="1827.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="470.1" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="474.0" y="1827.0" width="1.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="477.0" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (3 samples, 0.22%)</title><rect x="475.8" y="1827.0" width="2.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="478.8" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.15%)</title><rect x="478.4" y="1843.0" width="1.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="481.4" y="1854.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (11 samples, 0.81%)</title><rect x="480.1" y="1843.0" width="9.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="483.1" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.22%)</title><rect x="489.6" y="1875.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="492.6" y="1886.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (11 samples, 0.81%)</title><rect x="492.2" y="1875.0" width="9.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="495.2" y="1886.0"></text>
</g>
<g>
<title>java/lang/Long.toString (11 samples, 0.81%)</title><rect x="492.2" y="1859.0" width="9.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="495.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (11 samples, 0.81%)</title><rect x="492.2" y="1843.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="495.2" y="1854.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="500.9" y="1827.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="503.9" y="1838.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="500.9" y="1811.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="503.9" y="1822.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (88 samples, 6.46%)</title><rect x="501.7" y="1875.0" width="76.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="504.7" y="1886.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (84 samples, 6.16%)</title><rect x="505.2" y="1859.0" width="72.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="508.2" y="1870.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.44%)</title><rect x="505.2" y="1843.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="508.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.44%)</title><rect x="505.2" y="1827.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="508.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.44%)</title><rect x="505.2" y="1811.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="508.2" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.44%)</title><rect x="505.2" y="1795.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="508.2" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.15%)</title><rect x="508.7" y="1779.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="511.7" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (78 samples, 5.72%)</title><rect x="510.4" y="1843.0" width="67.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="513.4" y="1854.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (69 samples, 5.06%)</title><rect x="518.2" y="1827.0" width="59.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="521.2" y="1838.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (35 samples, 2.57%)</title><rect x="547.6" y="1811.0" width="30.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="550.6" y="1822.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.22%)</title><rect x="565.8" y="1795.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="568.8" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.66%)</title><rect x="568.4" y="1795.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="571.4" y="1806.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.15%)</title><rect x="576.2" y="1795.0" width="1.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="579.2" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (44 samples, 3.23%)</title><rect x="577.9" y="1907.0" width="38.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="580.9" y="1918.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (44 samples, 3.23%)</title><rect x="577.9" y="1891.0" width="38.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="580.9" y="1902.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/2144072261.process (26 samples, 1.91%)</title><rect x="579.7" y="1875.0" width="22.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="582.7" y="1886.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (25 samples, 1.83%)</title><rect x="580.5" y="1859.0" width="21.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="583.5" y="1870.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (22 samples, 1.61%)</title><rect x="581.4" y="1843.0" width="19.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="584.4" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (5 samples, 0.37%)</title><rect x="590.9" y="1827.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="593.9" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (5 samples, 0.37%)</title><rect x="590.9" y="1811.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="593.9" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 0.29%)</title><rect x="591.8" y="1795.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="594.8" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 0.29%)</title><rect x="591.8" y="1779.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="594.8" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (4 samples, 0.29%)</title><rect x="591.8" y="1763.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="594.8" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (2 samples, 0.15%)</title><rect x="593.5" y="1747.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="596.5" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.44%)</title><rect x="595.2" y="1827.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="598.2" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.37%)</title><rect x="596.1" y="1811.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="599.1" y="1822.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.37%)</title><rect x="596.1" y="1795.0" width="4.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="599.1" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.15%)</title><rect x="600.4" y="1843.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="603.4" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.15%)</title><rect x="600.4" y="1827.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="603.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="601.3" y="1811.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="604.3" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="601.3" y="1795.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="604.3" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.22%)</title><rect x="602.2" y="1875.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="605.2" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.22%)</title><rect x="602.2" y="1859.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="605.2" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="603.9" y="1843.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="606.9" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="603.9" y="1827.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="606.9" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="603.9" y="1811.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="606.9" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="603.9" y="1795.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="606.9" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="603.9" y="1779.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="606.9" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.15%)</title><rect x="604.8" y="1875.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="607.8" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.15%)</title><rect x="604.8" y="1859.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="607.8" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.51%)</title><rect x="606.5" y="1875.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="609.5" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.15%)</title><rect x="610.8" y="1859.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="613.8" y="1870.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.15%)</title><rect x="610.8" y="1843.0" width="1.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="613.8" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.22%)</title><rect x="612.6" y="1875.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="615.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.22%)</title><rect x="612.6" y="1859.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="615.6" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.07%)</title><rect x="615.2" y="1875.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="618.2" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.07%)</title><rect x="616.0" y="1907.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="619.0" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="616.0" y="1891.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="619.0" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="616.0" y="1875.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="619.0" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="616.0" y="1859.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="619.0" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="616.0" y="1843.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="619.0" y="1854.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="616.0" y="1827.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="619.0" y="1838.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="616.0" y="1811.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="619.0" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.03%)</title><rect x="616.9" y="1907.0" width="12.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="619.9" y="1918.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.22%)</title><rect x="622.1" y="1891.0" width="2.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="625.1" y="1902.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="622.1" y="1875.0" width="2.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="625.1" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.37%)</title><rect x="624.7" y="1891.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="627.7" y="1902.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.29%)</title><rect x="625.5" y="1875.0" width="3.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="628.5" y="1886.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="626.4" y="1859.0" width="2.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="629.4" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.07%)</title><rect x="629.0" y="1939.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="632.0" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.17%)</title><rect x="629.9" y="1939.0" width="13.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="632.9" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 1.03%)</title><rect x="631.6" y="1923.0" width="12.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="634.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.73%)</title><rect x="635.1" y="1907.0" width="8.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="638.1" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$268/1719794226.accept (10 samples, 0.73%)</title><rect x="635.1" y="1891.0" width="8.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="638.1" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$processTask$50 (10 samples, 0.73%)</title><rect x="635.1" y="1875.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="638.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/827578286.complete (10 samples, 0.73%)</title><rect x="635.1" y="1859.0" width="8.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="638.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$35 (10 samples, 0.73%)</title><rect x="635.1" y="1843.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.1" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (10 samples, 0.73%)</title><rect x="635.1" y="1827.0" width="8.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="638.1" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 0.73%)</title><rect x="635.1" y="1811.0" width="8.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="638.1" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 0.73%)</title><rect x="635.1" y="1795.0" width="8.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="638.1" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (8 samples, 0.59%)</title><rect x="635.1" y="1779.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.1" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (8 samples, 0.59%)</title><rect x="635.1" y="1763.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="638.1" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.15%)</title><rect x="642.0" y="1779.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="645.0" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.37%)</title><rect x="643.7" y="1987.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="646.7" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.37%)</title><rect x="643.7" y="1971.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="646.7" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.37%)</title><rect x="643.7" y="1955.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="646.7" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.37%)</title><rect x="643.7" y="1939.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="646.7" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (217 samples, 15.92%)</title><rect x="648.0" y="1987.0" width="187.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="651.0" y="1998.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (216 samples, 15.85%)</title><rect x="648.9" y="1971.0" width="187.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="651.9" y="1982.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (190 samples, 13.94%)</title><rect x="649.8" y="1955.0" width="164.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="652.8" y="1966.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (12 samples, 0.88%)</title><rect x="661.0" y="1939.0" width="10.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="664.0" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.07%)</title><rect x="671.4" y="1939.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="674.4" y="1950.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="671.4" y="1923.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="674.4" y="1934.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="671.4" y="1907.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="674.4" y="1918.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="671.4" y="1891.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="674.4" y="1902.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="671.4" y="1875.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="674.4" y="1886.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="671.4" y="1859.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="674.4" y="1870.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="671.4" y="1843.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="674.4" y="1854.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="671.4" y="1827.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="674.4" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="671.4" y="1811.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="674.4" y="1822.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="671.4" y="1795.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="674.4" y="1806.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.07%)</title><rect x="671.4" y="1779.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="674.4" y="1790.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.07%)</title><rect x="671.4" y="1763.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="674.4" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (164 samples, 12.03%)</title><rect x="672.3" y="1939.0" width="142.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="675.3" y="1950.0">java/util/concurre..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (159 samples, 11.67%)</title><rect x="676.6" y="1923.0" width="137.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="679.6" y="1934.0">sun/misc/Unsafe.p..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="683.5" y="1907.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="686.5" y="1918.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.07%)</title><rect x="684.4" y="1907.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="687.4" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (141 samples, 10.34%)</title><rect x="685.3" y="1907.0" width="122.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="688.3" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="691.3" y="1891.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="694.3" y="1902.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="692.2" y="1891.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="695.2" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (24 samples, 1.76%)</title><rect x="693.1" y="1891.0" width="20.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="696.1" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (8 samples, 0.59%)</title><rect x="700.0" y="1875.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="703.0" y="1886.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="700.9" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="703.9" y="1870.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.29%)</title><rect x="701.7" y="1859.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="704.7" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="704.3" y="1843.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="707.3" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.15%)</title><rect x="705.2" y="1859.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="708.2" y="1870.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="706.9" y="1875.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="709.9" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.51%)</title><rect x="707.8" y="1875.0" width="6.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="710.8" y="1886.0"></text>
</g>
<g>
<title>_L_unlock_738 (2 samples, 0.15%)</title><rect x="713.8" y="1891.0" width="1.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="716.8" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (11 samples, 0.81%)</title><rect x="715.6" y="1891.0" width="9.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="718.6" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (34 samples, 2.49%)</title><rect x="725.1" y="1891.0" width="29.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="728.1" y="1902.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (44 samples, 3.23%)</title><rect x="754.5" y="1891.0" width="38.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="757.5" y="1902.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.29%)</title><rect x="792.6" y="1891.0" width="3.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="795.6" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.15%)</title><rect x="796.1" y="1891.0" width="1.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="799.1" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.29%)</title><rect x="797.8" y="1891.0" width="3.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="800.8" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.29%)</title><rect x="801.3" y="1891.0" width="3.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="804.3" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.15%)</title><rect x="804.7" y="1891.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="807.7" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="806.5" y="1891.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="809.5" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (5 samples, 0.37%)</title><rect x="807.3" y="1907.0" width="4.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="810.3" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.22%)</title><rect x="811.7" y="1907.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="814.7" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (25 samples, 1.83%)</title><rect x="814.3" y="1955.0" width="21.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="817.3" y="1966.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (25 samples, 1.83%)</title><rect x="814.3" y="1939.0" width="21.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="817.3" y="1950.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (25 samples, 1.83%)</title><rect x="814.3" y="1923.0" width="21.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="817.3" y="1934.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (25 samples, 1.83%)</title><rect x="814.3" y="1907.0" width="21.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="817.3" y="1918.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="835.9" y="2035.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="838.9" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="835.9" y="2019.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="838.9" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="835.9" y="2003.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="838.9" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.07%)</title><rect x="835.9" y="1987.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="838.9" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.07%)</title><rect x="835.9" y="1971.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="838.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.07%)</title><rect x="835.9" y="1955.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="838.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.07%)</title><rect x="835.9" y="1939.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="838.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="835.9" y="1923.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="838.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="835.9" y="1907.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="838.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords$$Lambda$255/609558772.iterator (1 samples, 0.07%)</title><rect x="835.9" y="1891.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="838.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords.batchIterator (1 samples, 0.07%)</title><rect x="835.9" y="1875.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="838.9" y="1886.0"></text>
</g>
<g>
<title>start_thread (408 samples, 29.93%)</title><rect x="836.8" y="2035.0" width="353.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="839.8" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (408 samples, 29.93%)</title><rect x="836.8" y="2019.0" width="353.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="839.8" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (34 samples, 2.49%)</title><rect x="836.8" y="2003.0" width="29.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="839.8" y="2014.0">Ga..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (9 samples, 0.66%)</title><rect x="836.8" y="1987.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="839.8" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 0.66%)</title><rect x="836.8" y="1971.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="839.8" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.22%)</title><rect x="836.8" y="1955.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="839.8" y="1966.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.44%)</title><rect x="839.4" y="1955.0" width="5.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="842.4" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (23 samples, 1.69%)</title><rect x="844.6" y="1987.0" width="19.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="847.6" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 0.66%)</title><rect x="844.6" y="1971.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="847.6" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (5 samples, 0.37%)</title><rect x="844.6" y="1955.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="847.6" y="1966.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.29%)</title><rect x="848.9" y="1955.0" width="3.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="851.9" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.51%)</title><rect x="852.4" y="1971.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="855.4" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.22%)</title><rect x="852.4" y="1955.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="855.4" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.07%)</title><rect x="852.4" y="1939.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="855.4" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.07%)</title><rect x="852.4" y="1923.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="855.4" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.07%)</title><rect x="852.4" y="1907.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="855.4" y="1918.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.15%)</title><rect x="853.2" y="1939.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="856.2" y="1950.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.15%)</title><rect x="853.2" y="1923.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="856.2" y="1934.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.07%)</title><rect x="853.2" y="1907.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="856.2" y="1918.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.07%)</title><rect x="853.2" y="1891.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="856.2" y="1902.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="853.2" y="1875.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="856.2" y="1886.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="853.2" y="1859.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="856.2" y="1870.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.07%)</title><rect x="853.2" y="1843.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="856.2" y="1854.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.07%)</title><rect x="854.1" y="1907.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="857.1" y="1918.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.29%)</title><rect x="855.0" y="1955.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="858.0" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.22%)</title><rect x="855.0" y="1939.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="858.0" y="1950.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.07%)</title><rect x="857.6" y="1939.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="860.6" y="1950.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.07%)</title><rect x="857.6" y="1923.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="860.6" y="1934.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.51%)</title><rect x="858.4" y="1971.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="861.4" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.51%)</title><rect x="858.4" y="1955.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="861.4" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.51%)</title><rect x="858.4" y="1939.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="861.4" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.51%)</title><rect x="858.4" y="1923.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="861.4" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.51%)</title><rect x="858.4" y="1907.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="861.4" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.51%)</title><rect x="858.4" y="1891.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="861.4" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.37%)</title><rect x="860.2" y="1875.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="863.2" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.07%)</title><rect x="861.0" y="1859.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="864.0" y="1870.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.07%)</title><rect x="861.0" y="1843.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="864.0" y="1854.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.07%)</title><rect x="861.9" y="1859.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="864.9" y="1870.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.07%)</title><rect x="861.9" y="1843.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="864.9" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.07%)</title><rect x="862.8" y="1859.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="865.8" y="1870.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.07%)</title><rect x="862.8" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="865.8" y="1854.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.07%)</title><rect x="863.6" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="866.6" y="1870.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.15%)</title><rect x="864.5" y="1987.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="867.5" y="1998.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.15%)</title><rect x="864.5" y="1971.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="867.5" y="1982.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.07%)</title><rect x="864.5" y="1955.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="867.5" y="1966.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.07%)</title><rect x="865.3" y="1955.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="868.3" y="1966.0"></text>
</g>
<g>
<title>JavaThread::run() (372 samples, 27.29%)</title><rect x="866.2" y="2003.0" width="322.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="869.2" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (372 samples, 27.29%)</title><rect x="866.2" y="1987.0" width="322.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="869.2" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (371 samples, 27.22%)</title><rect x="866.2" y="1971.0" width="321.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="869.2" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (371 samples, 27.22%)</title><rect x="866.2" y="1955.0" width="321.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="869.2" y="1966.0">CompileBroker::invoke_compiler_on_method(Co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (370 samples, 27.15%)</title><rect x="866.2" y="1939.0" width="320.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="869.2" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMethod..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (370 samples, 27.15%)</title><rect x="866.2" y="1923.0" width="320.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="869.2" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ciMet..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.07%)</title><rect x="866.2" y="1907.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="869.2" y="1918.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.07%)</title><rect x="866.2" y="1891.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="869.2" y="1902.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="866.2" y="1875.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="869.2" y="1886.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.07%)</title><rect x="866.2" y="1859.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="869.2" y="1870.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.07%)</title><rect x="866.2" y="1843.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="869.2" y="1854.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.07%)</title><rect x="866.2" y="1827.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="869.2" y="1838.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.07%)</title><rect x="866.2" y="1811.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="869.2" y="1822.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (118 samples, 8.66%)</title><rect x="867.1" y="1907.0" width="102.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="870.1" y="1918.0">Compile::Cod..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.22%)</title><rect x="867.1" y="1891.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="870.1" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.07%)</title><rect x="867.1" y="1875.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="870.1" y="1886.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.15%)</title><rect x="867.9" y="1875.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="870.9" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.07%)</title><rect x="867.9" y="1859.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="870.9" y="1870.0"></text>
</g>
<g>
<title>jmpCon_shortNode::size(PhaseRegAlloc*) const (1 samples, 0.07%)</title><rect x="868.8" y="1859.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="871.8" y="1870.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.29%)</title><rect x="869.7" y="1891.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="872.7" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.15%)</title><rect x="869.7" y="1875.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="872.7" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.15%)</title><rect x="869.7" y="1859.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="872.7" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.15%)</title><rect x="869.7" y="1843.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="872.7" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.15%)</title><rect x="871.4" y="1875.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="874.4" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.15%)</title><rect x="871.4" y="1859.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="874.4" y="1870.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.07%)</title><rect x="873.1" y="1891.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="876.1" y="1902.0"></text>
</g>
<g>
<title>Matcher::match() (9 samples, 0.66%)</title><rect x="874.0" y="1891.0" width="7.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="877.0" y="1902.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.07%)</title><rect x="874.0" y="1875.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="877.0" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (8 samples, 0.59%)</title><rect x="874.9" y="1875.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="877.9" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (6 samples, 0.44%)</title><rect x="875.7" y="1859.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="878.7" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.07%)</title><rect x="880.9" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="883.9" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="880.9" y="1843.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="883.9" y="1854.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.07%)</title><rect x="880.9" y="1827.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="883.9" y="1838.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.07%)</title><rect x="880.9" y="1811.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="883.9" y="1822.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.07%)</title><rect x="881.8" y="1891.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="884.8" y="1902.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.07%)</title><rect x="881.8" y="1875.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="884.8" y="1886.0"></text>
</g>
<g>
<title>Block::num_fall_throughs() (1 samples, 0.07%)</title><rect x="881.8" y="1859.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="884.8" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.37%)</title><rect x="882.7" y="1891.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="885.7" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (2 samples, 0.15%)</title><rect x="882.7" y="1875.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="885.7" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::do_DFS(Tarjan*, unsigned int) (2 samples, 0.15%)</title><rect x="882.7" y="1859.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="885.7" y="1870.0"></text>
</g>
<g>
<title>Block_Stack::most_frequent_successor(Block*) (2 samples, 0.15%)</title><rect x="882.7" y="1843.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="885.7" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.22%)</title><rect x="884.4" y="1875.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="887.4" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="884.4" y="1859.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="887.4" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.15%)</title><rect x="885.3" y="1859.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="888.3" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.07%)</title><rect x="885.3" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="888.3" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.07%)</title><rect x="886.1" y="1843.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="889.1" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.07%)</title><rect x="887.0" y="1891.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="890.0" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (94 samples, 6.90%)</title><rect x="887.9" y="1891.0" width="81.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="890.9" y="1902.0">PhaseChai..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="887.9" y="1875.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="890.9" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="888.7" y="1875.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="891.7" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.15%)</title><rect x="889.6" y="1875.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="892.6" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (8 samples, 0.59%)</title><rect x="891.3" y="1875.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="894.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (4 samples, 0.29%)</title><rect x="894.8" y="1859.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="897.8" y="1870.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="897.4" y="1843.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="900.4" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 0.37%)</title><rect x="898.2" y="1875.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="901.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (5 samples, 0.37%)</title><rect x="898.2" y="1859.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="901.2" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="899.1" y="1843.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="902.1" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.22%)</title><rect x="900.0" y="1843.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="903.0" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 0.51%)</title><rect x="902.6" y="1875.0" width="6.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="905.6" y="1886.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.07%)</title><rect x="906.0" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="909.0" y="1870.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="906.0" y="1843.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="909.0" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (2 samples, 0.15%)</title><rect x="906.9" y="1859.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="909.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (2 samples, 0.15%)</title><rect x="906.9" y="1843.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="909.9" y="1854.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.07%)</title><rect x="907.8" y="1827.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="910.8" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (21 samples, 1.54%)</title><rect x="908.6" y="1875.0" width="18.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="911.6" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (3 samples, 0.22%)</title><rect x="914.7" y="1859.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="917.7" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="917.3" y="1859.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="920.3" y="1870.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="918.2" y="1859.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="921.2" y="1870.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="918.2" y="1843.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="921.2" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (7 samples, 0.51%)</title><rect x="919.0" y="1859.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="922.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.22%)</title><rect x="922.5" y="1843.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="925.5" y="1854.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.15%)</title><rect x="925.1" y="1859.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="928.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (3 samples, 0.22%)</title><rect x="926.8" y="1875.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="929.8" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="927.7" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="930.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.07%)</title><rect x="928.5" y="1859.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="931.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (11 samples, 0.81%)</title><rect x="929.4" y="1875.0" width="9.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="932.4" y="1886.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="935.5" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="938.5" y="1870.0"></text>
</g>
<g>
<title>rRegIOper::type() const (1 samples, 0.07%)</title><rect x="935.5" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="938.5" y="1854.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.07%)</title><rect x="936.3" y="1859.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="939.3" y="1870.0"></text>
</g>
<g>
<title>MachNode::bottom_type() const (1 samples, 0.07%)</title><rect x="936.3" y="1843.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="939.3" y="1854.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.07%)</title><rect x="937.2" y="1859.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="940.2" y="1870.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="938.1" y="1859.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="941.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.44%)</title><rect x="938.9" y="1875.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="941.9" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.22%)</title><rect x="941.5" y="1859.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="944.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (2 samples, 0.15%)</title><rect x="944.1" y="1875.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="947.1" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.07%)</title><rect x="945.0" y="1859.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="948.0" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (11 samples, 0.81%)</title><rect x="945.9" y="1875.0" width="9.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="948.9" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (11 samples, 0.81%)</title><rect x="945.9" y="1859.0" width="9.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="948.9" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.07%)</title><rect x="945.9" y="1843.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="948.9" y="1854.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (10 samples, 0.73%)</title><rect x="946.7" y="1843.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="949.7" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.15%)</title><rect x="946.7" y="1827.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="949.7" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (8 samples, 0.59%)</title><rect x="948.5" y="1827.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="951.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.15%)</title><rect x="955.4" y="1875.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="958.4" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="956.3" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="959.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.22%)</title><rect x="957.1" y="1875.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="960.1" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 0.51%)</title><rect x="959.7" y="1875.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="962.7" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.29%)</title><rect x="962.3" y="1859.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="965.3" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="964.9" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="967.9" y="1854.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.07%)</title><rect x="965.8" y="1875.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="968.8" y="1886.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.07%)</title><rect x="966.6" y="1875.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="969.6" y="1886.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="967.5" y="1875.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="970.5" y="1886.0"></text>
</g>
<g>
<title>indPosIndexScaleOffsetOper::in_RegMask(int) const (1 samples, 0.07%)</title><rect x="968.4" y="1875.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="971.4" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (241 samples, 17.68%)</title><rect x="969.2" y="1907.0" width="208.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="972.2" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.07%)</title><rect x="969.2" y="1891.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="972.2" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="969.2" y="1875.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="972.2" y="1886.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="970.1" y="1891.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="973.1" y="1902.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="970.1" y="1875.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="973.1" y="1886.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="970.1" y="1859.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="973.1" y="1870.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="970.1" y="1843.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="973.1" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.29%)</title><rect x="971.0" y="1891.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="974.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.29%)</title><rect x="971.0" y="1875.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="974.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.07%)</title><rect x="971.0" y="1859.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="974.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.07%)</title><rect x="971.0" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="974.0" y="1854.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.07%)</title><rect x="971.0" y="1827.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="974.0" y="1838.0"></text>
</g>
<g>
<title>ciMethodData::update_escape_info() (1 samples, 0.07%)</title><rect x="971.0" y="1811.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="974.0" y="1822.0"></text>
</g>
<g>
<title>MethodData::arg_info() (1 samples, 0.07%)</title><rect x="971.0" y="1795.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.0" y="1806.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="971.0" y="1779.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="974.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.22%)</title><rect x="971.8" y="1859.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="974.8" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="972.7" y="1843.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="975.7" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="972.7" y="1827.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="975.7" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="972.7" y="1811.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="975.7" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1811.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="976.6" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1795.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="976.6" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1779.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="976.6" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1763.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="976.6" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1747.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="976.6" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1731.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="976.6" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1715.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="976.6" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1699.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="976.6" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1683.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="976.6" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1667.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="976.6" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1651.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="976.6" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1635.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="976.6" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1619.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="976.6" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1603.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="976.6" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1587.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="976.6" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1571.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="976.6" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1555.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="976.6" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1539.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="976.6" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1523.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="976.6" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1507.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="976.6" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1491.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="976.6" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1475.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="976.6" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1459.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="976.6" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1443.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="976.6" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1427.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="976.6" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1411.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="976.6" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1395.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="976.6" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1379.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="976.6" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1363.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="976.6" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1347.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="976.6" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1331.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="976.6" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1315.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="976.6" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1299.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="976.6" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1283.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="976.6" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1267.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="976.6" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1251.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="976.6" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1235.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="976.6" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1219.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="976.6" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1203.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="976.6" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1187.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="976.6" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1171.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="976.6" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1155.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="976.6" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1139.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="976.6" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1123.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="976.6" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1107.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="976.6" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1091.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="976.6" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1075.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="976.6" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1059.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="976.6" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1043.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="976.6" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1027.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="976.6" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="1011.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="976.6" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="995.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="976.6" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="979.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="976.6" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="976.6" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="947.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="976.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="931.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="976.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="915.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="976.6" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="899.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="976.6" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="883.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="976.6" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="867.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="976.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="851.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="976.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="835.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="976.6" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="819.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="976.6" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="803.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="976.6" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="787.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="976.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="771.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="976.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="755.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="976.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="739.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="976.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="723.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="976.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="707.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="976.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="691.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="976.6" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="675.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="976.6" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="659.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="976.6" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="643.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="976.6" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="627.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="976.6" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="611.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="976.6" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="595.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="976.6" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="579.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="976.6" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="563.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="976.6" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="547.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="976.6" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="531.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="976.6" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="515.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="976.6" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="499.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="976.6" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="483.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="976.6" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="467.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="976.6" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="451.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="976.6" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="435.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="976.6" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="419.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="976.6" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="403.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="976.6" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="387.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="976.6" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="371.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="976.6" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="355.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="976.6" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="339.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="976.6" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="323.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="976.6" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="307.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="976.6" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="291.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="976.6" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="275.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="976.6" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="259.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="976.6" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="243.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="976.6" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="227.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="976.6" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="211.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="976.6" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="195.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="976.6" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="179.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="976.6" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="163.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="976.6" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="147.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="976.6" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="131.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="976.6" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="115.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="976.6" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="99.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="976.6" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="83.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="976.6" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="973.6" y="67.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="976.6" y="78.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="973.6" y="51.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="976.6" y="62.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="973.6" y="35.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="976.6" y="46.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.15%)</title><rect x="974.4" y="1891.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="977.4" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.15%)</title><rect x="974.4" y="1875.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="977.4" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.07%)</title><rect x="975.3" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="978.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (214 samples, 15.70%)</title><rect x="976.2" y="1891.0" width="185.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="979.2" y="1902.0">PhaseIdealLoop::build_an..</text>
</g>
<g>
<title>Node::is_CFG() const (2 samples, 0.15%)</title><rect x="976.2" y="1875.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.2" y="1886.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.07%)</title><rect x="977.9" y="1875.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="980.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.37%)</title><rect x="978.8" y="1875.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="981.8" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.15%)</title><rect x="981.4" y="1859.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="984.4" y="1870.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.07%)</title><rect x="982.2" y="1843.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="985.2" y="1854.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="982.2" y="1827.0" width="0.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="985.2" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.44%)</title><rect x="983.1" y="1875.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="986.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.07%)</title><rect x="986.6" y="1859.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="989.6" y="1870.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.07%)</title><rect x="987.4" y="1859.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="990.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (185 samples, 13.57%)</title><rect x="988.3" y="1875.0" width="160.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="991.3" y="1886.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (179 samples, 13.13%)</title><rect x="993.5" y="1859.0" width="154.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="996.5" y="1870.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.07%)</title><rect x="994.3" y="1843.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="997.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (7 samples, 0.51%)</title><rect x="995.2" y="1843.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="998.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1001.3" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1004.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (169 samples, 12.40%)</title><rect x="1002.1" y="1843.0" width="146.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1005.1" y="1854.0">PhaseIdealLoop::ge..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.22%)</title><rect x="1129.4" y="1827.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.15%)</title><rect x="1130.3" y="1811.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1133.3" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (19 samples, 1.39%)</title><rect x="1132.0" y="1827.0" width="16.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (5 samples, 0.37%)</title><rect x="1148.4" y="1875.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.07%)</title><rect x="1151.9" y="1859.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.29%)</title><rect x="1152.8" y="1875.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.8" y="1886.0"></text>
</g>
<g>
<title>CatchNode::Opcode() const (1 samples, 0.07%)</title><rect x="1154.5" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.07%)</title><rect x="1155.4" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.07%)</title><rect x="1155.4" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.07%)</title><rect x="1155.4" y="1827.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.37%)</title><rect x="1156.2" y="1875.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.2" y="1886.0"></text>
</g>
<g>
<title>IfNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1156.2" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1157.1" y="1859.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.1" y="1870.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1157.1" y="1843.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.1" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.22%)</title><rect x="1158.0" y="1859.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.0" y="1870.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1158.0" y="1843.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.0" y="1854.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1158.0" y="1827.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.0" y="1838.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1158.0" y="1811.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.0" y="1822.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1158.0" y="1795.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.0" y="1806.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.15%)</title><rect x="1158.8" y="1843.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.8" y="1854.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1158.8" y="1827.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.8" y="1838.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.07%)</title><rect x="1158.8" y="1811.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.8" y="1822.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1159.7" y="1827.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.7" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1159.7" y="1811.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.7" y="1822.0"></text>
</g>
<g>
<title>VectorSet::operator[](unsigned int) const (1 samples, 0.07%)</title><rect x="1159.7" y="1795.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.7" y="1806.0"></text>
</g>
<g>
<title>SafePointNode::pinned() const (1 samples, 0.07%)</title><rect x="1160.6" y="1875.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (16 samples, 1.17%)</title><rect x="1161.4" y="1891.0" width="13.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.4" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (16 samples, 1.17%)</title><rect x="1161.4" y="1875.0" width="13.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.4" y="1886.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (5 samples, 0.37%)</title><rect x="1161.4" y="1859.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.4" y="1870.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (2 samples, 0.15%)</title><rect x="1161.4" y="1843.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.4" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.15%)</title><rect x="1161.4" y="1827.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.4" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.15%)</title><rect x="1161.4" y="1811.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.4" y="1822.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1163.2" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.2" y="1854.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.07%)</title><rect x="1163.2" y="1827.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.2" y="1838.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.15%)</title><rect x="1164.0" y="1843.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.0" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.15%)</title><rect x="1164.0" y="1827.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.0" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.15%)</title><rect x="1164.0" y="1811.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.0" y="1822.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1165.8" y="1859.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.8" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1167.5" y="1859.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.5" y="1870.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.07%)</title><rect x="1167.5" y="1843.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.5" y="1854.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="1167.5" y="1827.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.22%)</title><rect x="1168.4" y="1859.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.4" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1169.2" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.2" y="1854.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1169.2" y="1827.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.2" y="1838.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="1169.2" y="1811.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.2" y="1822.0"></text>
</g>
<g>
<title>TypeNarrowPtr::hash() const (1 samples, 0.07%)</title><rect x="1169.2" y="1795.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.2" y="1806.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.07%)</title><rect x="1169.2" y="1779.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.2" y="1790.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1170.1" y="1843.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.1" y="1854.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1170.1" y="1827.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.1" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1171.0" y="1859.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.0" y="1870.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.15%)</title><rect x="1171.0" y="1843.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.0" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1172.7" y="1859.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1172.7" y="1843.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.7" y="1854.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1172.7" y="1827.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.7" y="1838.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1173.6" y="1843.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.6" y="1854.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_interface() (1 samples, 0.07%)</title><rect x="1174.4" y="1859.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.4" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.07%)</title><rect x="1175.3" y="1891.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.3" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.07%)</title><rect x="1175.3" y="1875.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.3" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1175.3" y="1859.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.3" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.15%)</title><rect x="1176.1" y="1891.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.1" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.15%)</title><rect x="1176.1" y="1875.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.15%)</title><rect x="1176.1" y="1859.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.1" y="1870.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1176.1" y="1843.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.1" y="1854.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1176.1" y="1827.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.1" y="1838.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1176.1" y="1811.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.1" y="1822.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1176.1" y="1795.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.1" y="1806.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1176.1" y="1779.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.1" y="1790.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1177.0" y="1843.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.0" y="1854.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1177.0" y="1827.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.0" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.66%)</title><rect x="1177.9" y="1907.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.9" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.66%)</title><rect x="1177.9" y="1891.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.9" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.66%)</title><rect x="1177.9" y="1875.0" width="7.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.9" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.66%)</title><rect x="1177.9" y="1859.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.9" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.66%)</title><rect x="1177.9" y="1843.0" width="7.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.9" y="1854.0"></text>
</g>
<g>
<title>Parse::do_anewarray() (1 samples, 0.07%)</title><rect x="1177.9" y="1827.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.9" y="1838.0"></text>
</g>
<g>
<title>GraphKit::new_array(Node*, Node*, int, Node**, bool) (1 samples, 0.07%)</title><rect x="1177.9" y="1811.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.9" y="1822.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.07%)</title><rect x="1177.9" y="1795.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.9" y="1806.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1177.9" y="1779.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.9" y="1790.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1177.9" y="1763.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.9" y="1774.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1177.9" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.9" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.59%)</title><rect x="1178.7" y="1827.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.7" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.59%)</title><rect x="1178.7" y="1811.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.7" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.59%)</title><rect x="1178.7" y="1795.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.7" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.59%)</title><rect x="1178.7" y="1779.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.7" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.59%)</title><rect x="1178.7" y="1763.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.7" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.59%)</title><rect x="1178.7" y="1747.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.7" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.59%)</title><rect x="1178.7" y="1731.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.7" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.44%)</title><rect x="1178.7" y="1715.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.7" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.44%)</title><rect x="1178.7" y="1699.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.7" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.44%)</title><rect x="1178.7" y="1683.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.7" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.44%)</title><rect x="1178.7" y="1667.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.7" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.44%)</title><rect x="1178.7" y="1651.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.7" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.44%)</title><rect x="1178.7" y="1635.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.7" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.44%)</title><rect x="1178.7" y="1619.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.7" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.44%)</title><rect x="1178.7" y="1603.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.7" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.44%)</title><rect x="1178.7" y="1587.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.7" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.44%)</title><rect x="1178.7" y="1571.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.7" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.44%)</title><rect x="1178.7" y="1555.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.7" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.44%)</title><rect x="1178.7" y="1539.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.7" y="1550.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1178.7" y="1523.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.7" y="1534.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1178.7" y="1507.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.7" y="1518.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1178.7" y="1491.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.7" y="1502.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.07%)</title><rect x="1178.7" y="1475.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.7" y="1486.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.07%)</title><rect x="1178.7" y="1459.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.7" y="1470.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.07%)</title><rect x="1178.7" y="1443.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.7" y="1454.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.07%)</title><rect x="1178.7" y="1427.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.7" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.37%)</title><rect x="1179.6" y="1523.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.6" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.37%)</title><rect x="1179.6" y="1507.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.6" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.37%)</title><rect x="1179.6" y="1491.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.6" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.37%)</title><rect x="1179.6" y="1475.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.37%)</title><rect x="1179.6" y="1459.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.6" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.37%)</title><rect x="1179.6" y="1443.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.6" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1179.6" y="1427.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1179.6" y="1411.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.6" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1179.6" y="1395.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1179.6" y="1379.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.6" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1179.6" y="1363.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.6" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1179.6" y="1347.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.6" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1179.6" y="1331.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.6" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1179.6" y="1315.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.6" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1179.6" y="1299.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.6" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1179.6" y="1283.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.6" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1179.6" y="1267.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.6" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1179.6" y="1251.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.6" y="1262.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.6" y="1235.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.6" y="1246.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_ordered_store(BasicType) (1 samples, 0.07%)</title><rect x="1179.6" y="1219.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.6" y="1230.0"></text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1179.6" y="1203.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.6" y="1214.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1179.6" y="1187.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.6" y="1198.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.07%)</title><rect x="1179.6" y="1171.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.6" y="1182.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1179.6" y="1155.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.6" y="1166.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1179.6" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.6" y="1150.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1179.6" y="1123.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.6" y="1134.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1179.6" y="1107.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.6" y="1118.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1179.6" y="1091.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.6" y="1102.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.07%)</title><rect x="1179.6" y="1075.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.6" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1180.5" y="1235.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.5" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1180.5" y="1219.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.5" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1180.5" y="1203.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1180.5" y="1187.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1180.5" y="1171.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.5" y="1155.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.5" y="1166.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1180.5" y="1139.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.5" y="1150.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1180.5" y="1123.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.5" y="1134.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1180.5" y="1107.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.5" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1180.5" y="1091.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.5" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1180.5" y="1075.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.5" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1180.5" y="1059.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.5" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1180.5" y="1043.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.5" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1180.5" y="1027.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.5" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1180.5" y="1011.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.5" y="1022.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1180.5" y="995.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1181.3" y="1155.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="1166.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.07%)</title><rect x="1181.3" y="1139.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.3" y="1150.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1182.2" y="1347.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="1358.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1182.2" y="1331.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.2" y="1342.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1182.2" y="1315.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="1326.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1182.2" y="1299.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.2" y="1310.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.07%)</title><rect x="1182.2" y="1283.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="1294.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.1" y="1427.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.1" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.1" y="1411.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.1" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.1" y="1395.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.1" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.1" y="1379.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.1" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.1" y="1363.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.1" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.1" y="1347.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.1" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.1" y="1331.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.1" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.1" y="1315.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.1" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.1" y="1299.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.1" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.1" y="1283.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.1" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.1" y="1267.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.1" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.1" y="1251.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.1" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.1" y="1235.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.1" y="1246.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.1" y="1219.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.1" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.1" y="1203.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.1" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.1" y="1187.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.1" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.1" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.1" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.1" y="1155.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.1" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.1" y="1139.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.1" y="1123.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.1" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.1" y="1107.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.1" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.1" y="1091.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.1" y="1102.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.07%)</title><rect x="1183.1" y="1075.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.1" y="1086.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1183.1" y="1059.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.1" y="1070.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1183.1" y="1043.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.1" y="1054.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1183.9" y="1715.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.9" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1183.9" y="1699.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.9" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1183.9" y="1683.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.9" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1183.9" y="1667.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.9" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1183.9" y="1651.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.9" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1183.9" y="1635.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.9" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1183.9" y="1619.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.9" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1183.9" y="1603.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.9" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1183.9" y="1587.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.9" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1183.9" y="1571.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.9" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1183.9" y="1555.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.9" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1183.9" y="1539.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.9" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1183.9" y="1523.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.9" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1183.9" y="1507.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.9" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1183.9" y="1491.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.9" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1183.9" y="1475.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1183.9" y="1459.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1183.9" y="1443.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.9" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1183.9" y="1427.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.9" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1183.9" y="1411.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.9" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1183.9" y="1395.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.9" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1183.9" y="1379.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1183.9" y="1363.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1183.9" y="1347.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1183.9" y="1331.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.9" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1183.9" y="1315.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.9" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1183.9" y="1299.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.9" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1183.9" y="1283.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.9" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1183.9" y="1267.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.9" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1183.9" y="1251.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.9" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1183.9" y="1235.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.9" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1183.9" y="1219.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.9" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1183.9" y="1203.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.9" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1183.9" y="1187.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.9" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1183.9" y="1171.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.9" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1183.9" y="1155.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.9" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1183.9" y="1139.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.9" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1183.9" y="1123.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.9" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1183.9" y="1107.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1183.9" y="1091.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1183.9" y="1075.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1183.9" y="1059.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1183.9" y="1043.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.9" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1183.9" y="1027.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.9" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1183.9" y="1011.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1183.9" y="995.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1183.9" y="979.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1183.9" y="963.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.9" y="947.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.9" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.9" y="931.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.9" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.9" y="915.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.9" y="899.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.9" y="883.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.9" y="867.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.9" y="851.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.9" y="862.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.07%)</title><rect x="1183.9" y="835.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.9" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1183.9" y="819.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1184.8" y="947.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1184.8" y="931.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.8" y="942.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1184.8" y="915.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.8" y="926.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1184.8" y="899.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.8" y="910.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.07%)</title><rect x="1184.8" y="883.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.8" y="894.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1184.8" y="867.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.8" y="878.0"></text>
</g>
<g>
<title>AddNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1184.8" y="851.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.8" y="862.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.07%)</title><rect x="1185.7" y="1907.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.7" y="1918.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1185.7" y="1891.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.7" y="1902.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.07%)</title><rect x="1186.5" y="1939.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.5" y="1950.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1186.5" y="1923.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.5" y="1934.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1186.5" y="1907.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.5" y="1918.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1186.5" y="1891.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.5" y="1902.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.07%)</title><rect x="1186.5" y="1875.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.5" y="1886.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.07%)</title><rect x="1186.5" y="1859.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.5" y="1870.0"></text>
</g>
<g>
<title>Symbol::equals(char const*, int) const (1 samples, 0.07%)</title><rect x="1186.5" y="1843.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.5" y="1854.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1187.4" y="1971.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.4" y="1982.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1187.4" y="1955.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.4" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1187.4" y="1939.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.4" y="1950.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1187.4" y="1923.0" width="0.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1190.4" y="1934.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.07%)</title><rect x="1187.4" y="1907.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.4" y="1918.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.15%)</title><rect x="1188.3" y="2003.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.3" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.15%)</title><rect x="1188.3" y="1987.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.3" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.15%)</title><rect x="1188.3" y="1971.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.3" y="1982.0"></text>
</g>
<g>
<title>TemplateInterpreter::notice_safepoints() (1 samples, 0.07%)</title><rect x="1189.1" y="1955.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.1" y="1966.0"></text>
</g>
</g>
</svg>
