<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1174" onload="init(evt)" viewBox="0 0 1200 1174" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1157"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1157"> </text>
<g id="frames">
<g>
<title>all (274 samples, 100.00%)</title><rect x="10.0" y="1123.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1134.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (24 samples, 8.76%)</title><rect x="10.0" y="1107.0" width="103.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1118.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (24 samples, 8.76%)</title><rect x="10.0" y="1091.0" width="103.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1102.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.73%)</title><rect x="10.0" y="1075.0" width="8.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.73%)</title><rect x="10.0" y="1059.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/998773984.accept (2 samples, 0.73%)</title><rect x="10.0" y="1043.0" width="8.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.73%)</title><rect x="10.0" y="1027.0" width="8.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.36%)</title><rect x="14.3" y="1011.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.3" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.36%)</title><rect x="14.3" y="995.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.3" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 1.46%)</title><rect x="18.6" y="1075.0" width="17.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.6" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 1.09%)</title><rect x="18.6" y="1059.0" width="12.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.6" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.36%)</title><rect x="22.9" y="1043.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.9" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.36%)</title><rect x="27.2" y="1043.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.2" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.36%)</title><rect x="27.2" y="1027.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.2" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.36%)</title><rect x="27.2" y="1011.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="30.2" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.36%)</title><rect x="27.2" y="995.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.2" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.36%)</title><rect x="27.2" y="979.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.2" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.36%)</title><rect x="27.2" y="963.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.2" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.36%)</title><rect x="27.2" y="947.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.2" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$249/913406821.test (1 samples, 0.36%)</title><rect x="27.2" y="931.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.2" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSite (1 samples, 0.36%)</title><rect x="31.5" y="1059.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="34.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSiteImpl (1 samples, 0.36%)</title><rect x="31.5" y="1043.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="34.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/CallSite.makeSite (1 samples, 0.36%)</title><rect x="31.5" y="1027.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1990451863.invoke_MT (1 samples, 0.36%)</title><rect x="31.5" y="1011.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$BMH/1293767636.reinvoke (1 samples, 0.36%)</title><rect x="31.5" y="995.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/263025902.invokeStatic_L6_L (1 samples, 0.36%)</title><rect x="31.5" y="979.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="34.5" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaMetafactory.metafactory (1 samples, 0.36%)</title><rect x="31.5" y="963.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="34.5" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/AbstractValidatingLambdaMetafactory.validateMetafactoryArgs (1 samples, 0.36%)</title><rect x="31.5" y="947.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="34.5" y="958.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 2.19%)</title><rect x="35.8" y="1075.0" width="25.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="38.8" y="1086.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/1869390073.accept (4 samples, 1.46%)</title><rect x="35.8" y="1059.0" width="17.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="38.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (4 samples, 1.46%)</title><rect x="35.8" y="1043.0" width="17.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 0.36%)</title><rect x="40.1" y="1027.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="43.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 0.36%)</title><rect x="40.1" y="1011.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="43.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 0.36%)</title><rect x="40.1" y="995.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.36%)</title><rect x="40.1" y="979.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="43.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.36%)</title><rect x="40.1" y="963.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.36%)</title><rect x="40.1" y="947.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="43.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.36%)</title><rect x="40.1" y="931.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.36%)</title><rect x="40.1" y="915.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.36%)</title><rect x="40.1" y="899.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="43.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.36%)</title><rect x="44.5" y="1027.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.5" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.36%)</title><rect x="44.5" y="1011.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.5" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.36%)</title><rect x="44.5" y="995.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="47.5" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.36%)</title><rect x="48.8" y="1027.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.8" y="1038.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.36%)</title><rect x="48.8" y="1011.0" width="4.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="51.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.36%)</title><rect x="53.1" y="1059.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.36%)</title><rect x="53.1" y="1043.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="56.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.36%)</title><rect x="53.1" y="1027.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.1" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$EmptySet.iterator (1 samples, 0.36%)</title><rect x="53.1" y="1011.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.36%)</title><rect x="57.4" y="1059.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="60.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.36%)</title><rect x="57.4" y="1043.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.36%)</title><rect x="57.4" y="1027.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="60.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.36%)</title><rect x="57.4" y="1011.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="60.4" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.36%)</title><rect x="57.4" y="995.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="60.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.38%)</title><rect x="61.7" y="1075.0" width="51.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="64.7" y="1086.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.38%)</title><rect x="61.7" y="1059.0" width="51.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.7" y="1070.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 3.28%)</title><rect x="61.7" y="1043.0" width="38.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.7" y="1054.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.09%)</title><rect x="61.7" y="1027.0" width="12.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="64.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.09%)</title><rect x="61.7" y="1011.0" width="12.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 1.09%)</title><rect x="61.7" y="995.0" width="12.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.36%)</title><rect x="61.7" y="979.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="64.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.36%)</title><rect x="61.7" y="963.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="64.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.36%)</title><rect x="61.7" y="947.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getOrElse (1 samples, 0.36%)</title><rect x="61.7" y="931.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="64.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.hasField (1 samples, 0.36%)</title><rect x="61.7" y="915.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="64.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.36%)</title><rect x="61.7" y="899.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="64.7" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.36%)</title><rect x="61.7" y="883.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="64.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.36%)</title><rect x="61.7" y="867.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="64.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.73%)</title><rect x="66.0" y="979.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.36%)</title><rect x="66.0" y="963.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="69.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.36%)</title><rect x="66.0" y="947.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.36%)</title><rect x="66.0" y="931.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.36%)</title><rect x="66.0" y="915.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="69.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.36%)</title><rect x="66.0" y="899.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.36%)</title><rect x="66.0" y="883.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.0" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.36%)</title><rect x="66.0" y="867.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="69.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.36%)</title><rect x="70.3" y="963.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="73.3" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.36%)</title><rect x="70.3" y="947.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="73.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 2.19%)</title><rect x="74.6" y="1027.0" width="25.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="77.6" y="1038.0">o..</text>
</g>
<g>
<title>java/util/ArrayDeque.&lt;init&gt; (1 samples, 0.36%)</title><rect x="78.9" y="1011.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="81.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.46%)</title><rect x="83.2" y="1011.0" width="17.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.46%)</title><rect x="83.2" y="995.0" width="17.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="86.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.46%)</title><rect x="83.2" y="979.0" width="17.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="86.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.73%)</title><rect x="83.2" y="963.0" width="8.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="86.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.36%)</title><rect x="87.5" y="947.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="90.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.36%)</title><rect x="87.5" y="931.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="90.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.36%)</title><rect x="87.5" y="915.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="90.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.36%)</title><rect x="87.5" y="899.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="90.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.36%)</title><rect x="87.5" y="883.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.36%)</title><rect x="87.5" y="867.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.36%)</title><rect x="87.5" y="851.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="90.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.73%)</title><rect x="91.8" y="963.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="94.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.73%)</title><rect x="91.8" y="947.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="94.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.73%)</title><rect x="91.8" y="931.0" width="8.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="94.8" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.73%)</title><rect x="91.8" y="915.0" width="8.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="94.8" y="926.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (2 samples, 0.73%)</title><rect x="91.8" y="899.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="94.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.36%)</title><rect x="100.4" y="1043.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="103.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.36%)</title><rect x="100.4" y="1027.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="103.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.36%)</title><rect x="100.4" y="1011.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="103.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.36%)</title><rect x="100.4" y="995.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.build (1 samples, 0.36%)</title><rect x="100.4" y="979.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="103.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.build (1 samples, 0.36%)</title><rect x="100.4" y="963.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="103.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.&lt;init&gt; (1 samples, 0.36%)</title><rect x="100.4" y="947.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.&lt;init&gt; (1 samples, 0.36%)</title><rect x="100.4" y="931.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.&lt;init&gt; (1 samples, 0.36%)</title><rect x="100.4" y="915.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="103.4" y="926.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.36%)</title><rect x="100.4" y="899.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="103.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (2 samples, 0.73%)</title><rect x="104.7" y="1043.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="107.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.73%)</title><rect x="104.7" y="1027.0" width="8.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="107.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="104.7" y="1011.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="107.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="104.7" y="995.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="107.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.36%)</title><rect x="104.7" y="979.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="107.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.36%)</title><rect x="109.1" y="1011.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="112.1" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.36%)</title><rect x="109.1" y="995.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="112.1" y="1006.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="109.1" y="979.0" width="4.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="112.1" y="990.0"></text>
</g>
<g>
<title>java/lang/Thread.run (154 samples, 56.20%)</title><rect x="113.4" y="1107.0" width="663.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="116.4" y="1118.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (154 samples, 56.20%)</title><rect x="113.4" y="1091.0" width="663.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="116.4" y="1102.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (154 samples, 56.20%)</title><rect x="113.4" y="1075.0" width="663.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="116.4" y="1086.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/947860377.run (145 samples, 52.92%)</title><rect x="113.4" y="1059.0" width="624.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="116.4" y="1070.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/947860377.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (145 samples, 52.92%)</title><rect x="113.4" y="1043.0" width="624.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="116.4" y="1054.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (145 samples, 52.92%)</title><rect x="113.4" y="1027.0" width="624.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="116.4" y="1038.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.73%)</title><rect x="117.7" y="1011.0" width="8.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="120.7" y="1022.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.73%)</title><rect x="117.7" y="995.0" width="8.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="120.7" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (142 samples, 51.82%)</title><rect x="126.3" y="1011.0" width="611.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="129.3" y="1022.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (25 samples, 9.12%)</title><rect x="130.6" y="995.0" width="107.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="133.6" y="1006.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (25 samples, 9.12%)</title><rect x="130.6" y="979.0" width="107.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="133.6" y="990.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (25 samples, 9.12%)</title><rect x="130.6" y="963.0" width="107.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="133.6" y="974.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (25 samples, 9.12%)</title><rect x="130.6" y="947.0" width="107.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="133.6" y="958.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (25 samples, 9.12%)</title><rect x="130.6" y="931.0" width="107.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="133.6" y="942.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (25 samples, 9.12%)</title><rect x="130.6" y="915.0" width="107.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="133.6" y="926.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (9 samples, 3.28%)</title><rect x="130.6" y="899.0" width="38.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="133.6" y="910.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 1.82%)</title><rect x="130.6" y="883.0" width="21.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="133.6" y="894.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 1.82%)</title><rect x="130.6" y="867.0" width="21.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="133.6" y="878.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.73%)</title><rect x="143.5" y="851.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="146.5" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.73%)</title><rect x="143.5" y="835.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="146.5" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.73%)</title><rect x="143.5" y="819.0" width="8.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="146.5" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.73%)</title><rect x="143.5" y="803.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="146.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.46%)</title><rect x="152.1" y="883.0" width="17.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="155.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 1.46%)</title><rect x="152.1" y="867.0" width="17.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="155.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 1.09%)</title><rect x="152.1" y="851.0" width="12.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="155.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 1.09%)</title><rect x="152.1" y="835.0" width="12.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="155.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.36%)</title><rect x="160.7" y="819.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="163.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.36%)</title><rect x="165.0" y="851.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="168.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.36%)</title><rect x="165.0" y="835.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="168.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.36%)</title><rect x="165.0" y="819.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="168.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (1 samples, 0.36%)</title><rect x="165.0" y="803.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="168.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (14 samples, 5.11%)</title><rect x="169.3" y="899.0" width="60.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="172.3" y="910.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.36%)</title><rect x="169.3" y="883.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="172.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.36%)</title><rect x="169.3" y="867.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="172.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.36%)</title><rect x="169.3" y="851.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="172.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.36%)</title><rect x="169.3" y="835.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="172.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.36%)</title><rect x="169.3" y="819.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="172.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.36%)</title><rect x="173.6" y="883.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="176.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.36%)</title><rect x="173.6" y="867.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="176.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.73%)</title><rect x="178.0" y="883.0" width="8.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="181.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.73%)</title><rect x="178.0" y="867.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="181.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.36%)</title><rect x="178.0" y="851.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="181.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.36%)</title><rect x="182.3" y="851.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="185.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.73%)</title><rect x="186.6" y="883.0" width="8.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="189.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.73%)</title><rect x="186.6" y="867.0" width="8.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="189.6" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.73%)</title><rect x="186.6" y="851.0" width="8.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="189.6" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.73%)</title><rect x="186.6" y="835.0" width="8.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="189.6" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="186.6" y="819.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="189.6" y="830.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.36%)</title><rect x="186.6" y="803.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="189.6" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.36%)</title><rect x="190.9" y="819.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="193.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (8 samples, 2.92%)</title><rect x="195.2" y="883.0" width="34.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="198.2" y="894.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (8 samples, 2.92%)</title><rect x="195.2" y="867.0" width="34.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="198.2" y="878.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (8 samples, 2.92%)</title><rect x="195.2" y="851.0" width="34.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="198.2" y="862.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (8 samples, 2.92%)</title><rect x="195.2" y="835.0" width="34.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="198.2" y="846.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.36%)</title><rect x="199.5" y="819.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="202.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.36%)</title><rect x="199.5" y="803.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="202.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.36%)</title><rect x="199.5" y="787.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.36%)</title><rect x="199.5" y="771.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="202.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.36%)</title><rect x="199.5" y="755.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="202.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.36%)</title><rect x="199.5" y="739.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.36%)</title><rect x="199.5" y="723.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="202.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.36%)</title><rect x="199.5" y="707.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="202.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.73%)</title><rect x="203.8" y="819.0" width="8.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="206.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.73%)</title><rect x="203.8" y="803.0" width="8.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="206.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.73%)</title><rect x="203.8" y="787.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.73%)</title><rect x="203.8" y="771.0" width="8.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="206.8" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.73%)</title><rect x="203.8" y="755.0" width="8.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="206.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.36%)</title><rect x="212.4" y="819.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="215.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.36%)</title><rect x="212.4" y="803.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="215.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.36%)</title><rect x="212.4" y="787.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.36%)</title><rect x="212.4" y="771.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.4" y="782.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.36%)</title><rect x="212.4" y="755.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.4" y="766.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.36%)</title><rect x="212.4" y="739.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="215.4" y="750.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor6.newInstance (1 samples, 0.36%)</title><rect x="212.4" y="723.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.73%)</title><rect x="216.7" y="819.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="219.7" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.73%)</title><rect x="216.7" y="803.0" width="8.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="219.7" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.73%)</title><rect x="216.7" y="787.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.73%)</title><rect x="216.7" y="771.0" width="8.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.36%)</title><rect x="225.3" y="819.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.73%)</title><rect x="229.6" y="899.0" width="8.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="232.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.73%)</title><rect x="229.6" y="883.0" width="8.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="232.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.73%)</title><rect x="229.6" y="867.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.73%)</title><rect x="229.6" y="851.0" width="8.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.73%)</title><rect x="229.6" y="835.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (103 samples, 37.59%)</title><rect x="238.2" y="995.0" width="443.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="241.2" y="1006.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (20 samples, 7.30%)</title><rect x="238.2" y="979.0" width="86.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.2" y="990.0">com/lineco..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (17 samples, 6.20%)</title><rect x="251.2" y="963.0" width="73.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="254.2" y="974.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (16 samples, 5.84%)</title><rect x="255.5" y="947.0" width="68.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.5" y="958.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 1.46%)</title><rect x="285.6" y="931.0" width="17.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="288.6" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 1.46%)</title><rect x="285.6" y="915.0" width="17.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.6" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 1.46%)</title><rect x="285.6" y="899.0" width="17.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.6" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 1.46%)</title><rect x="285.6" y="883.0" width="17.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.6" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.36%)</title><rect x="302.8" y="931.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="305.8" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.36%)</title><rect x="302.8" y="915.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="305.8" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.36%)</title><rect x="302.8" y="899.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="305.8" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 1.46%)</title><rect x="307.2" y="931.0" width="17.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="310.2" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.73%)</title><rect x="315.8" y="915.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="318.8" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.73%)</title><rect x="315.8" y="899.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="318.8" y="910.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.36%)</title><rect x="320.1" y="883.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="323.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.36%)</title><rect x="324.4" y="979.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="327.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.36%)</title><rect x="324.4" y="963.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="327.4" y="974.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.36%)</title><rect x="324.4" y="947.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.4" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (22 samples, 8.03%)</title><rect x="328.7" y="979.0" width="94.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="331.7" y="990.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (22 samples, 8.03%)</title><rect x="328.7" y="963.0" width="94.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="331.7" y="974.0">com/linecor..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="337.3" y="947.0" width="4.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="340.3" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (10 samples, 3.65%)</title><rect x="341.6" y="947.0" width="43.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="344.6" y="958.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.36%)</title><rect x="350.2" y="931.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="353.2" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.36%)</title><rect x="350.2" y="915.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="353.2" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="350.2" y="899.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="353.2" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="350.2" y="883.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="353.2" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="350.2" y="867.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="353.2" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="350.2" y="851.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="353.2" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.36%)</title><rect x="350.2" y="835.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="353.2" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.36%)</title><rect x="350.2" y="819.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="353.2" y="830.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.36%)</title><rect x="350.2" y="803.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="353.2" y="814.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.36%)</title><rect x="350.2" y="787.0" width="4.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="353.2" y="798.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 2.19%)</title><rect x="354.5" y="931.0" width="25.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="357.5" y="942.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 2.19%)</title><rect x="354.5" y="915.0" width="25.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="357.5" y="926.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.46%)</title><rect x="358.8" y="899.0" width="17.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="361.8" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 1.46%)</title><rect x="358.8" y="883.0" width="17.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="361.8" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.46%)</title><rect x="358.8" y="867.0" width="17.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="361.8" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.09%)</title><rect x="358.8" y="851.0" width="13.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="361.8" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.73%)</title><rect x="363.1" y="835.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="366.1" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.73%)</title><rect x="363.1" y="819.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="366.1" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.36%)</title><rect x="367.4" y="803.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="370.4" y="814.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.36%)</title><rect x="371.8" y="851.0" width="4.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="374.8" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.36%)</title><rect x="376.1" y="899.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="379.1" y="910.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.36%)</title><rect x="380.4" y="931.0" width="4.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="383.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.36%)</title><rect x="384.7" y="947.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="387.7" y="958.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.36%)</title><rect x="389.0" y="947.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="392.0" y="958.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.36%)</title><rect x="389.0" y="931.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="392.0" y="942.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.36%)</title><rect x="389.0" y="915.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="392.0" y="926.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.36%)</title><rect x="389.0" y="899.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="392.0" y="910.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (7 samples, 2.55%)</title><rect x="393.3" y="947.0" width="30.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="396.3" y="958.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 2.55%)</title><rect x="393.3" y="931.0" width="30.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="396.3" y="942.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.73%)</title><rect x="393.3" y="915.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="396.3" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.73%)</title><rect x="393.3" y="899.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="396.3" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.73%)</title><rect x="393.3" y="883.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="396.3" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.73%)</title><rect x="393.3" y="867.0" width="8.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="396.3" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 1.82%)</title><rect x="401.9" y="915.0" width="21.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="404.9" y="926.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 1.82%)</title><rect x="401.9" y="899.0" width="21.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="404.9" y="910.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 1.46%)</title><rect x="406.2" y="883.0" width="17.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="409.2" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.36%)</title><rect x="419.1" y="867.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="422.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (48 samples, 17.52%)</title><rect x="423.4" y="979.0" width="206.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="426.4" y="990.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (48 samples, 17.52%)</title><rect x="423.4" y="963.0" width="206.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="426.4" y="974.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="427.7" y="947.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="430.7" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="427.7" y="931.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="430.7" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="427.7" y="915.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="430.7" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="427.7" y="899.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="430.7" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.36%)</title><rect x="427.7" y="883.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="430.7" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.36%)</title><rect x="427.7" y="867.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="430.7" y="878.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.36%)</title><rect x="427.7" y="851.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="430.7" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.36%)</title><rect x="427.7" y="835.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="430.7" y="846.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.36%)</title><rect x="427.7" y="819.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="430.7" y="830.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.36%)</title><rect x="427.7" y="803.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="430.7" y="814.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.36%)</title><rect x="427.7" y="787.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="430.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/738194263.process (36 samples, 13.14%)</title><rect x="432.0" y="947.0" width="155.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="435.0" y="958.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (36 samples, 13.14%)</title><rect x="432.0" y="931.0" width="155.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="435.0" y="942.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (35 samples, 12.77%)</title><rect x="432.0" y="915.0" width="150.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="435.0" y="926.0">com/linecorp/decato..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.73%)</title><rect x="436.4" y="899.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="439.4" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.73%)</title><rect x="436.4" y="883.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="439.4" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.73%)</title><rect x="436.4" y="867.0" width="8.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="439.4" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.73%)</title><rect x="436.4" y="851.0" width="8.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="439.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.73%)</title><rect x="436.4" y="835.0" width="8.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="439.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (31 samples, 11.31%)</title><rect x="445.0" y="899.0" width="133.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="448.0" y="910.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/lang/Thread.sleep (30 samples, 10.95%)</title><rect x="445.0" y="883.0" width="129.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="448.0" y="894.0">java/lang/Thread..</text>
</g>
<g>
<title>JVM_Sleep (28 samples, 10.22%)</title><rect x="453.6" y="867.0" width="120.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="456.6" y="878.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.73%)</title><rect x="462.2" y="851.0" width="8.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="465.2" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="470.8" y="851.0" width="4.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="473.8" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.36%)</title><rect x="475.1" y="851.0" width="4.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="478.1" y="862.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (22 samples, 8.03%)</title><rect x="479.4" y="851.0" width="94.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="482.4" y="862.0">os::sleep(T..</text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.46%)</title><rect x="505.3" y="835.0" width="17.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="508.3" y="846.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.36%)</title><rect x="522.5" y="835.0" width="4.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="525.5" y="846.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (7 samples, 2.55%)</title><rect x="526.8" y="835.0" width="30.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="529.8" y="846.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.73%)</title><rect x="556.9" y="835.0" width="8.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="559.9" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.36%)</title><rect x="565.5" y="835.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="568.5" y="846.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.36%)</title><rect x="569.9" y="835.0" width="4.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="572.9" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.36%)</title><rect x="574.2" y="883.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="577.2" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="574.2" y="867.0" width="4.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="577.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.36%)</title><rect x="578.5" y="899.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="581.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.36%)</title><rect x="582.8" y="915.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="585.8" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.36%)</title><rect x="582.8" y="899.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="585.8" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.36%)</title><rect x="582.8" y="883.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="585.8" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.36%)</title><rect x="582.8" y="867.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="585.8" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.36%)</title><rect x="587.1" y="947.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="590.1" y="958.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.36%)</title><rect x="587.1" y="931.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="590.1" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (2 samples, 0.73%)</title><rect x="591.4" y="947.0" width="8.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="594.4" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (2 samples, 0.73%)</title><rect x="591.4" y="931.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="594.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$265/1239740084.get$Lambda (2 samples, 0.73%)</title><rect x="591.4" y="915.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="594.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$265/1239740084.&lt;init&gt; (2 samples, 0.73%)</title><rect x="591.4" y="899.0" width="8.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="594.4" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 1.09%)</title><rect x="600.0" y="947.0" width="12.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="603.0" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.73%)</title><rect x="604.3" y="931.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="607.3" y="942.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.73%)</title><rect x="604.3" y="915.0" width="8.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="607.3" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 1.09%)</title><rect x="612.9" y="947.0" width="12.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="615.9" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.36%)</title><rect x="621.5" y="931.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="624.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.36%)</title><rect x="625.8" y="947.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="628.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 4.38%)</title><rect x="630.1" y="979.0" width="51.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="633.1" y="990.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 2.19%)</title><rect x="651.7" y="963.0" width="25.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="654.7" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 2.19%)</title><rect x="651.7" y="947.0" width="25.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="654.7" y="958.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$266/966478506.accept (6 samples, 2.19%)</title><rect x="651.7" y="931.0" width="25.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="654.7" y="942.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (6 samples, 2.19%)</title><rect x="651.7" y="915.0" width="25.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="654.7" y="926.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.36%)</title><rect x="651.7" y="899.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="654.7" y="910.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.36%)</title><rect x="651.7" y="883.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="654.7" y="894.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.36%)</title><rect x="651.7" y="867.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="654.7" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="651.7" y="851.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="654.7" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="651.7" y="835.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="654.7" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="651.7" y="819.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="654.7" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="651.7" y="803.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="654.7" y="814.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.36%)</title><rect x="651.7" y="787.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="654.7" y="798.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (5 samples, 1.82%)</title><rect x="656.0" y="899.0" width="21.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="659.0" y="910.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (5 samples, 1.82%)</title><rect x="656.0" y="883.0" width="21.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="659.0" y="894.0">i..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.36%)</title><rect x="673.2" y="867.0" width="4.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="676.2" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="673.2" y="851.0" width="4.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="676.2" y="862.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.36%)</title><rect x="677.5" y="963.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="680.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 4.01%)</title><rect x="681.8" y="995.0" width="47.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="684.8" y="1006.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 3.65%)</title><rect x="686.1" y="979.0" width="43.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="689.1" y="990.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 2.55%)</title><rect x="699.1" y="963.0" width="30.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="702.1" y="974.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$267/801931050.accept (7 samples, 2.55%)</title><rect x="699.1" y="947.0" width="30.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="702.1" y="958.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (7 samples, 2.55%)</title><rect x="699.1" y="931.0" width="30.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="702.1" y="942.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$259/1322154844.complete (7 samples, 2.55%)</title><rect x="699.1" y="915.0" width="30.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="702.1" y="926.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (7 samples, 2.55%)</title><rect x="699.1" y="899.0" width="30.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="702.1" y="910.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (7 samples, 2.55%)</title><rect x="699.1" y="883.0" width="30.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="702.1" y="894.0">co..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 2.55%)</title><rect x="699.1" y="867.0" width="30.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="702.1" y="878.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 2.55%)</title><rect x="699.1" y="851.0" width="30.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="702.1" y="862.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (7 samples, 2.55%)</title><rect x="699.1" y="835.0" width="30.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="702.1" y="846.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (7 samples, 2.55%)</title><rect x="699.1" y="819.0" width="30.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="702.1" y="830.0">ch..</text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.73%)</title><rect x="729.2" y="995.0" width="8.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="732.2" y="1006.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.73%)</title><rect x="729.2" y="979.0" width="8.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="732.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 2.55%)</title><rect x="737.8" y="1059.0" width="30.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="740.8" y="1070.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 2.55%)</title><rect x="737.8" y="1043.0" width="30.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="740.8" y="1054.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 2.55%)</title><rect x="737.8" y="1027.0" width="30.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="740.8" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 2.55%)</title><rect x="737.8" y="1011.0" width="30.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="740.8" y="1022.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (1 samples, 0.36%)</title><rect x="763.6" y="995.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="766.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (2 samples, 0.73%)</title><rect x="768.0" y="1059.0" width="8.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="771.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 0.73%)</title><rect x="768.0" y="1043.0" width="8.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="771.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.73%)</title><rect x="768.0" y="1027.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="771.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.73%)</title><rect x="768.0" y="1011.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="771.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.73%)</title><rect x="768.0" y="995.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="771.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.73%)</title><rect x="768.0" y="979.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="771.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.73%)</title><rect x="776.6" y="1107.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="779.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.36%)</title><rect x="776.6" y="1091.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="779.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.36%)</title><rect x="780.9" y="1091.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="783.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.36%)</title><rect x="780.9" y="1075.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="783.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.36%)</title><rect x="780.9" y="1059.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="783.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.36%)</title><rect x="780.9" y="1043.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="783.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.36%)</title><rect x="780.9" y="1027.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="783.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.tryAcquire (1 samples, 0.36%)</title><rect x="780.9" y="1011.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="783.9" y="1022.0"></text>
</g>
<g>
<title>start_thread (94 samples, 34.31%)</title><rect x="785.2" y="1107.0" width="404.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="788.2" y="1118.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (94 samples, 34.31%)</title><rect x="785.2" y="1091.0" width="404.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="788.2" y="1102.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (6 samples, 2.19%)</title><rect x="785.2" y="1075.0" width="25.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="788.2" y="1086.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.36%)</title><rect x="785.2" y="1059.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="788.2" y="1070.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.36%)</title><rect x="785.2" y="1043.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="788.2" y="1054.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.36%)</title><rect x="785.2" y="1027.0" width="4.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="788.2" y="1038.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (5 samples, 1.82%)</title><rect x="789.5" y="1059.0" width="21.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="792.5" y="1070.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 1.82%)</title><rect x="789.5" y="1043.0" width="21.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="792.5" y="1054.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 1.46%)</title><rect x="793.8" y="1027.0" width="17.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="796.8" y="1038.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.73%)</title><rect x="802.4" y="1011.0" width="8.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="805.4" y="1022.0"></text>
</g>
<g>
<title>JavaThread::run() (88 samples, 32.12%)</title><rect x="811.0" y="1075.0" width="379.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="814.0" y="1086.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (88 samples, 32.12%)</title><rect x="811.0" y="1059.0" width="379.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="814.0" y="1070.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (88 samples, 32.12%)</title><rect x="811.0" y="1043.0" width="379.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="814.0" y="1054.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (85 samples, 31.02%)</title><rect x="811.0" y="1027.0" width="366.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="814.0" y="1038.0">CompileBroker::invoke_compiler_on_method(CompileTa..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (83 samples, 30.29%)</title><rect x="811.0" y="1011.0" width="357.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="814.0" y="1022.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (83 samples, 30.29%)</title><rect x="811.0" y="995.0" width="357.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="814.0" y="1006.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (42 samples, 15.33%)</title><rect x="811.0" y="979.0" width="180.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="814.0" y="990.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.09%)</title><rect x="811.0" y="963.0" width="12.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="814.0" y="974.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 1.09%)</title><rect x="811.0" y="947.0" width="12.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="814.0" y="958.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (2 samples, 0.73%)</title><rect x="815.3" y="931.0" width="8.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="818.3" y="942.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (2 samples, 0.73%)</title><rect x="815.3" y="915.0" width="8.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="818.3" y="926.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.73%)</title><rect x="823.9" y="963.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="826.9" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.36%)</title><rect x="823.9" y="947.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="826.9" y="958.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.36%)</title><rect x="823.9" y="931.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="826.9" y="942.0"></text>
</g>
<g>
<title>cmpFastUnlockNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.36%)</title><rect x="828.2" y="947.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="831.2" y="958.0"></text>
</g>
<g>
<title>MacroAssembler::fast_unlock(RegisterImpl*, RegisterImpl*, RegisterImpl*, bool) (1 samples, 0.36%)</title><rect x="828.2" y="931.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="831.2" y="942.0"></text>
</g>
<g>
<title>Assembler::jccb(Assembler::Condition, Label&amp;) (1 samples, 0.36%)</title><rect x="828.2" y="915.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="831.2" y="926.0"></text>
</g>
<g>
<title>Label::add_patch_at(CodeBuffer*, int) (1 samples, 0.36%)</title><rect x="828.2" y="899.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="831.2" y="910.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.82%)</title><rect x="832.6" y="963.0" width="21.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="835.6" y="974.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.36%)</title><rect x="832.6" y="947.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="835.6" y="958.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.46%)</title><rect x="836.9" y="947.0" width="17.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="839.9" y="958.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.73%)</title><rect x="841.2" y="931.0" width="8.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="844.2" y="942.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.36%)</title><rect x="849.8" y="931.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="852.8" y="942.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.36%)</title><rect x="849.8" y="915.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="852.8" y="926.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.36%)</title><rect x="849.8" y="899.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="852.8" y="910.0"></text>
</g>
<g>
<title>State::_sub_Op_SafePoint(Node const*) (1 samples, 0.36%)</title><rect x="849.8" y="883.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="852.8" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 1.46%)</title><rect x="854.1" y="963.0" width="17.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="857.1" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 1.46%)</title><rect x="854.1" y="947.0" width="17.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="857.1" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.36%)</title><rect x="854.1" y="931.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="857.1" y="942.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.36%)</title><rect x="854.1" y="915.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="857.1" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.36%)</title><rect x="854.1" y="899.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="857.1" y="910.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.36%)</title><rect x="854.1" y="883.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="857.1" y="894.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.36%)</title><rect x="854.1" y="867.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="857.1" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.73%)</title><rect x="858.4" y="931.0" width="8.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="861.4" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.73%)</title><rect x="858.4" y="915.0" width="8.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="861.4" y="926.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.36%)</title><rect x="858.4" y="899.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="861.4" y="910.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.36%)</title><rect x="858.4" y="883.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="861.4" y="894.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.36%)</title><rect x="858.4" y="867.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="861.4" y="878.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.36%)</title><rect x="858.4" y="851.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="861.4" y="862.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.36%)</title><rect x="858.4" y="835.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="861.4" y="846.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.36%)</title><rect x="862.7" y="899.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="865.7" y="910.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.36%)</title><rect x="862.7" y="883.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="865.7" y="894.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.36%)</title><rect x="862.7" y="867.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="865.7" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.36%)</title><rect x="867.0" y="931.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="870.0" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.36%)</title><rect x="867.0" y="915.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="870.0" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (28 samples, 10.22%)</title><rect x="871.3" y="963.0" width="120.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="874.3" y="974.0">PhaseChaitin::R..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.36%)</title><rect x="871.3" y="947.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="874.3" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.36%)</title><rect x="875.6" y="947.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="878.6" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="875.6" y="931.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="878.6" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.36%)</title><rect x="879.9" y="947.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="882.9" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.36%)</title><rect x="879.9" y="931.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="882.9" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="879.9" y="915.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="882.9" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.82%)</title><rect x="884.2" y="947.0" width="21.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="887.2" y="958.0">P..</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.36%)</title><rect x="901.5" y="931.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="904.5" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 2.19%)</title><rect x="905.8" y="947.0" width="25.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="908.8" y="958.0">P..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.36%)</title><rect x="910.1" y="931.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="913.1" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.46%)</title><rect x="914.4" y="931.0" width="17.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="917.4" y="942.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.36%)</title><rect x="923.0" y="915.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="926.0" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="927.3" y="915.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="930.3" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.36%)</title><rect x="931.6" y="947.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="934.6" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.36%)</title><rect x="931.6" y="931.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="934.6" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="931.6" y="915.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="934.6" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.73%)</title><rect x="935.9" y="947.0" width="8.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="938.9" y="958.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.36%)</title><rect x="935.9" y="931.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="938.9" y="942.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.36%)</title><rect x="940.2" y="931.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="943.2" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.73%)</title><rect x="944.5" y="947.0" width="8.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="947.5" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.73%)</title><rect x="944.5" y="931.0" width="8.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="947.5" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.36%)</title><rect x="948.8" y="915.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="951.8" y="926.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.36%)</title><rect x="948.8" y="899.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="951.8" y="910.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.36%)</title><rect x="953.1" y="947.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="956.1" y="958.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.36%)</title><rect x="953.1" y="931.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="956.1" y="942.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.36%)</title><rect x="953.1" y="915.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="956.1" y="926.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.36%)</title><rect x="953.1" y="899.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="956.1" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.36%)</title><rect x="957.4" y="947.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="960.4" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="957.4" y="931.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="960.4" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.36%)</title><rect x="961.8" y="947.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="964.8" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.36%)</title><rect x="966.1" y="947.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="969.1" y="958.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.36%)</title><rect x="966.1" y="931.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="969.1" y="942.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.36%)</title><rect x="966.1" y="915.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="969.1" y="926.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.36%)</title><rect x="966.1" y="899.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="969.1" y="910.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.36%)</title><rect x="966.1" y="883.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="969.1" y="894.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.36%)</title><rect x="966.1" y="867.0" width="4.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="969.1" y="878.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.82%)</title><rect x="970.4" y="947.0" width="21.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="973.4" y="958.0">P..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.73%)</title><rect x="983.3" y="931.0" width="8.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="986.3" y="942.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.36%)</title><rect x="987.6" y="915.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="990.6" y="926.0"></text>
</g>
<g>
<title>Compile::Optimize() (35 samples, 12.77%)</title><rect x="991.9" y="979.0" width="150.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="994.9" y="990.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.36%)</title><rect x="991.9" y="963.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="994.9" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.36%)</title><rect x="991.9" y="947.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="994.9" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="931.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="994.9" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="915.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="994.9" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="899.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="994.9" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="883.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="994.9" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="867.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="994.9" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="851.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="994.9" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="835.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="994.9" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="819.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="994.9" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="803.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="994.9" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="787.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="994.9" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="771.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="994.9" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="755.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="994.9" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="739.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="994.9" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="723.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="994.9" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="707.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="994.9" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="691.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="994.9" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="675.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="994.9" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="659.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="994.9" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="643.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="994.9" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="627.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="994.9" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="611.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="994.9" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="595.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="994.9" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="579.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="994.9" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="563.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="994.9" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="547.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="994.9" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="531.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="994.9" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="515.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="994.9" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="499.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="994.9" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="483.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="994.9" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="467.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="994.9" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="451.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="994.9" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="435.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="994.9" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="419.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="994.9" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="403.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="994.9" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="387.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="994.9" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="371.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="994.9" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="355.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="994.9" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="339.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="994.9" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="323.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="994.9" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="307.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="994.9" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="291.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="994.9" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="275.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="994.9" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="259.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="994.9" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="243.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="994.9" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="227.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="994.9" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="211.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="994.9" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="195.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="994.9" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="179.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="994.9" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="163.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="994.9" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="147.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="994.9" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="991.9" y="131.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="994.9" y="142.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.36%)</title><rect x="991.9" y="115.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="994.9" y="126.0"></text>
</g>
<g>
<title>MemBarAcquireNode::Opcode() const (1 samples, 0.36%)</title><rect x="996.2" y="963.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="999.2" y="974.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.73%)</title><rect x="1000.5" y="963.0" width="8.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1003.5" y="974.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.36%)</title><rect x="1004.8" y="947.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1007.8" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.36%)</title><rect x="1004.8" y="931.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1007.8" y="942.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.36%)</title><rect x="1004.8" y="915.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1007.8" y="926.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.36%)</title><rect x="1004.8" y="899.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1007.8" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (24 samples, 8.76%)</title><rect x="1009.1" y="963.0" width="103.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1012.1" y="974.0">PhaseIdealLo..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.36%)</title><rect x="1009.1" y="947.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1012.1" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.36%)</title><rect x="1009.1" y="931.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1012.1" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*) (1 samples, 0.36%)</title><rect x="1009.1" y="915.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1012.1" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.36%)</title><rect x="1009.1" y="899.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1012.1" y="910.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.36%)</title><rect x="1009.1" y="883.0" width="4.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1012.1" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.36%)</title><rect x="1013.4" y="947.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1016.4" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.36%)</title><rect x="1013.4" y="931.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1016.4" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.36%)</title><rect x="1013.4" y="915.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1016.4" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.36%)</title><rect x="1013.4" y="899.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1016.4" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.36%)</title><rect x="1013.4" y="883.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1016.4" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.36%)</title><rect x="1013.4" y="867.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1016.4" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.36%)</title><rect x="1013.4" y="851.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1016.4" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.36%)</title><rect x="1013.4" y="835.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1016.4" y="846.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.36%)</title><rect x="1013.4" y="819.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1016.4" y="830.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.36%)</title><rect x="1013.4" y="803.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1016.4" y="814.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.36%)</title><rect x="1013.4" y="787.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1016.4" y="798.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.36%)</title><rect x="1013.4" y="771.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1016.4" y="782.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.36%)</title><rect x="1013.4" y="755.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1016.4" y="766.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.36%)</title><rect x="1013.4" y="739.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1016.4" y="750.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.36%)</title><rect x="1013.4" y="723.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1016.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.36%)</title><rect x="1013.4" y="707.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1016.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.36%)</title><rect x="1013.4" y="691.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1016.4" y="702.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.36%)</title><rect x="1013.4" y="675.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1016.4" y="686.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.36%)</title><rect x="1013.4" y="659.0" width="4.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1016.4" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.36%)</title><rect x="1017.7" y="947.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1020.7" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.36%)</title><rect x="1022.0" y="947.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1025.0" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.36%)</title><rect x="1022.0" y="931.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1025.0" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (14 samples, 5.11%)</title><rect x="1026.4" y="947.0" width="60.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1029.4" y="958.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (13 samples, 4.74%)</title><rect x="1030.7" y="931.0" width="55.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1033.7" y="942.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.36%)</title><rect x="1030.7" y="915.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1033.7" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (11 samples, 4.01%)</title><rect x="1035.0" y="915.0" width="47.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1038.0" y="926.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 1.09%)</title><rect x="1065.1" y="899.0" width="12.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1068.1" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.36%)</title><rect x="1078.0" y="899.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1081.0" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.36%)</title><rect x="1078.0" y="883.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.0" y="894.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.36%)</title><rect x="1082.3" y="915.0" width="4.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1085.3" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 1.09%)</title><rect x="1086.6" y="947.0" width="13.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1089.6" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.36%)</title><rect x="1095.3" y="931.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.3" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.36%)</title><rect x="1099.6" y="947.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1102.6" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.73%)</title><rect x="1103.9" y="947.0" width="8.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.9" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.73%)</title><rect x="1103.9" y="931.0" width="8.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.9" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.36%)</title><rect x="1103.9" y="915.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1106.9" y="926.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1108.2" y="915.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.2" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.36%)</title><rect x="1108.2" y="899.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.2" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.36%)</title><rect x="1108.2" y="883.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.2" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 1.82%)</title><rect x="1112.5" y="963.0" width="21.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1115.5" y="974.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 1.82%)</title><rect x="1112.5" y="947.0" width="21.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1115.5" y="958.0">P..</text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.36%)</title><rect x="1112.5" y="931.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.5" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.73%)</title><rect x="1116.8" y="931.0" width="8.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.8" y="942.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.36%)</title><rect x="1125.4" y="931.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.4" y="942.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.36%)</title><rect x="1125.4" y="915.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.4" y="926.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.36%)</title><rect x="1129.7" y="931.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.7" y="942.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.73%)</title><rect x="1134.0" y="963.0" width="8.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.0" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.36%)</title><rect x="1134.0" y="947.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.0" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.36%)</title><rect x="1134.0" y="931.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.0" y="942.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.36%)</title><rect x="1138.3" y="947.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.3" y="958.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.36%)</title><rect x="1138.3" y="931.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.3" y="942.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1138.3" y="915.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.3" y="926.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.36%)</title><rect x="1138.3" y="899.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.3" y="910.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.36%)</title><rect x="1138.3" y="883.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1141.3" y="894.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.36%)</title><rect x="1138.3" y="867.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.3" y="878.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.36%)</title><rect x="1138.3" y="851.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1141.3" y="862.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.36%)</title><rect x="1138.3" y="835.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.3" y="846.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.36%)</title><rect x="1138.3" y="819.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.3" y="830.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.36%)</title><rect x="1138.3" y="803.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1141.3" y="814.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.36%)</title><rect x="1138.3" y="787.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1141.3" y="798.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.36%)</title><rect x="1138.3" y="771.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1141.3" y="782.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.36%)</title><rect x="1138.3" y="755.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.3" y="766.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.36%)</title><rect x="1138.3" y="739.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.3" y="750.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.36%)</title><rect x="1138.3" y="723.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.3" y="734.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.36%)</title><rect x="1138.3" y="707.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.3" y="718.0"></text>
</g>
<g>
<title>scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*) (1 samples, 0.36%)</title><rect x="1138.3" y="691.0" width="4.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1141.3" y="702.0"></text>
</g>
<g>
<title>MergeMemNode::memory_at(unsigned int) const (1 samples, 0.36%)</title><rect x="1138.3" y="675.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.3" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.19%)</title><rect x="1142.6" y="979.0" width="25.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.6" y="990.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.19%)</title><rect x="1142.6" y="963.0" width="25.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.6" y="974.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.19%)</title><rect x="1142.6" y="947.0" width="25.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.6" y="958.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.19%)</title><rect x="1142.6" y="931.0" width="25.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.6" y="942.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.19%)</title><rect x="1142.6" y="915.0" width="25.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.6" y="926.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.19%)</title><rect x="1142.6" y="899.0" width="25.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.6" y="910.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.82%)</title><rect x="1142.6" y="883.0" width="21.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.6" y="894.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.82%)</title><rect x="1142.6" y="867.0" width="21.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.6" y="878.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.46%)</title><rect x="1142.6" y="851.0" width="17.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.46%)</title><rect x="1142.6" y="835.0" width="17.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.46%)</title><rect x="1142.6" y="819.0" width="17.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.46%)</title><rect x="1142.6" y="803.0" width="17.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.6" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.46%)</title><rect x="1142.6" y="787.0" width="17.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.6" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.46%)</title><rect x="1142.6" y="771.0" width="17.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.09%)</title><rect x="1142.6" y="755.0" width="12.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.09%)</title><rect x="1142.6" y="739.0" width="12.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.09%)</title><rect x="1142.6" y="723.0" width="12.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.09%)</title><rect x="1142.6" y="707.0" width="12.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.6" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.09%)</title><rect x="1142.6" y="691.0" width="12.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.6" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.09%)</title><rect x="1142.6" y="675.0" width="12.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.09%)</title><rect x="1142.6" y="659.0" width="12.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.09%)</title><rect x="1142.6" y="643.0" width="12.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.09%)</title><rect x="1142.6" y="627.0" width="12.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.09%)</title><rect x="1142.6" y="611.0" width="12.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.6" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.09%)</title><rect x="1142.6" y="595.0" width="12.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.6" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.09%)</title><rect x="1142.6" y="579.0" width="12.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.09%)</title><rect x="1142.6" y="563.0" width="12.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.09%)</title><rect x="1142.6" y="547.0" width="12.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.09%)</title><rect x="1142.6" y="531.0" width="12.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.09%)</title><rect x="1142.6" y="515.0" width="12.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.6" y="526.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.36%)</title><rect x="1142.6" y="499.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.6" y="510.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.36%)</title><rect x="1142.6" y="483.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.6" y="494.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.36%)</title><rect x="1142.6" y="467.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.6" y="478.0"></text>
</g>
<g>
<title>ciMemberName::get_vmtarget() const (1 samples, 0.36%)</title><rect x="1142.6" y="451.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.6" y="462.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.36%)</title><rect x="1142.6" y="435.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.6" y="446.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.36%)</title><rect x="1142.6" y="419.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.6" y="430.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1142.6" y="403.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.6" y="414.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.36%)</title><rect x="1142.6" y="387.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.6" y="398.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.36%)</title><rect x="1142.6" y="371.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.6" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.73%)</title><rect x="1146.9" y="499.0" width="8.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.9" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.73%)</title><rect x="1146.9" y="483.0" width="8.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.73%)</title><rect x="1146.9" y="467.0" width="8.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.73%)</title><rect x="1146.9" y="451.0" width="8.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.73%)</title><rect x="1146.9" y="435.0" width="8.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.73%)</title><rect x="1146.9" y="419.0" width="8.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.9" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.73%)</title><rect x="1146.9" y="403.0" width="8.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.9" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.73%)</title><rect x="1146.9" y="387.0" width="8.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.9" y="398.0"></text>
</g>
<g>
<title>Dependencies::assert_evol_method(ciMethod*) (1 samples, 0.36%)</title><rect x="1146.9" y="371.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1151.2" y="371.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1151.2" y="355.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1151.2" y="339.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1151.2" y="323.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.2" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1151.2" y="307.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.2" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1151.2" y="291.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1151.2" y="275.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1151.2" y="259.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1151.2" y="243.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1151.2" y="227.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.2" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1151.2" y="211.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.2" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1151.2" y="195.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1151.2" y="179.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1151.2" y="163.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1151.2" y="147.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1151.2" y="131.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.2" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1151.2" y="115.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.2" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1151.2" y="99.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.2" y="110.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1151.2" y="83.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.2" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1151.2" y="67.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.2" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1151.2" y="51.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.2" y="62.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.36%)</title><rect x="1151.2" y="35.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.2" y="46.0"></text>
</g>
<g>
<title>Parse::init_blocks() (1 samples, 0.36%)</title><rect x="1155.5" y="755.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.5" y="766.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.36%)</title><rect x="1159.9" y="851.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.9" y="862.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.36%)</title><rect x="1159.9" y="835.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.9" y="846.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.2" y="883.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.2" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.2" y="867.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.2" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1164.2" y="851.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1164.2" y="835.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1164.2" y="819.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1164.2" y="803.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1164.2" y="787.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.2" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.2" y="771.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.2" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1164.2" y="755.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1164.2" y="739.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1164.2" y="723.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1164.2" y="707.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1164.2" y="691.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.2" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.2" y="675.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.2" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1164.2" y="659.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1164.2" y="643.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1164.2" y="627.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1164.2" y="611.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1164.2" y="595.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.2" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.2" y="579.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.2" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1164.2" y="563.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1164.2" y="547.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1164.2" y="531.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1164.2" y="515.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.36%)</title><rect x="1164.2" y="499.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.36%)</title><rect x="1164.2" y="483.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.2" y="494.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.36%)</title><rect x="1164.2" y="467.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.2" y="478.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.36%)</title><rect x="1164.2" y="451.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.2" y="462.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.36%)</title><rect x="1164.2" y="435.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.2" y="446.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.73%)</title><rect x="1168.5" y="1011.0" width="8.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.5" y="1022.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.73%)</title><rect x="1168.5" y="995.0" width="8.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.5" y="1006.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.73%)</title><rect x="1168.5" y="979.0" width="8.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.5" y="990.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.36%)</title><rect x="1168.5" y="963.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.5" y="974.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.36%)</title><rect x="1168.5" y="947.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.5" y="958.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.36%)</title><rect x="1168.5" y="931.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.5" y="942.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.36%)</title><rect x="1168.5" y="915.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.5" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.36%)</title><rect x="1168.5" y="899.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.5" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.36%)</title><rect x="1168.5" y="883.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.5" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.36%)</title><rect x="1168.5" y="867.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.5" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.36%)</title><rect x="1168.5" y="851.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.5" y="862.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.36%)</title><rect x="1168.5" y="835.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.5" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1168.5" y="819.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.5" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1168.5" y="803.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.5" y="814.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.36%)</title><rect x="1172.8" y="963.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.8" y="974.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.36%)</title><rect x="1172.8" y="947.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.8" y="958.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.36%)</title><rect x="1172.8" y="931.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.8" y="942.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.36%)</title><rect x="1172.8" y="915.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.8" y="926.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.36%)</title><rect x="1172.8" y="899.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.8" y="910.0"></text>
</g>
<g>
<title>CompileQueue::get() (3 samples, 1.09%)</title><rect x="1177.1" y="1027.0" width="12.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.1" y="1038.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::select_task(CompileQueue*) (1 samples, 0.36%)</title><rect x="1177.1" y="1011.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.36%)</title><rect x="1177.1" y="995.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="1006.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="1177.1" y="979.0" width="4.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1180.1" y="990.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.73%)</title><rect x="1181.4" y="1011.0" width="8.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.4" y="1022.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.73%)</title><rect x="1181.4" y="995.0" width="8.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.4" y="1006.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (2 samples, 0.73%)</title><rect x="1181.4" y="979.0" width="8.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.4" y="990.0"></text>
</g>
<g>
<title>NMethodSweeper::release_nmethod(nmethod*) (1 samples, 0.36%)</title><rect x="1181.4" y="963.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.4" y="974.0"></text>
</g>
<g>
<title>nmethod::is_nmethod() const (1 samples, 0.36%)</title><rect x="1185.7" y="963.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.7" y="974.0"></text>
</g>
</g>
</svg>
