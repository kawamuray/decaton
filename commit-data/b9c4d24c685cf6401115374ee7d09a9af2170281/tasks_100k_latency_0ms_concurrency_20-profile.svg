<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1350" onload="init(evt)" viewBox="0 0 1200 1350" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1333"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1333"> </text>
<g id="frames">
<g>
<title>all (175 samples, 100.00%)</title><rect x="10.0" y="1299.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1310.0">all</text>
</g>
<g>
<title>__GI__IO_padn (1 samples, 0.57%)</title><rect x="10.0" y="1283.0" width="6.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (30 samples, 17.14%)</title><rect x="16.7" y="1283.0" width="202.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.7" y="1294.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (30 samples, 17.14%)</title><rect x="16.7" y="1267.0" width="202.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.7" y="1278.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.57%)</title><rect x="16.7" y="1251.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.7" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.57%)</title><rect x="16.7" y="1235.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.7" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.57%)</title><rect x="16.7" y="1219.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.7" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.57%)</title><rect x="16.7" y="1203.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.7" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.57%)</title><rect x="16.7" y="1187.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.7" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.57%)</title><rect x="16.7" y="1171.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.7" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.57%)</title><rect x="16.7" y="1155.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.7" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.57%)</title><rect x="16.7" y="1139.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.7" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.57%)</title><rect x="16.7" y="1123.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.7" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.57%)</title><rect x="16.7" y="1107.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.7" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$252/1639155296.test (1 samples, 0.57%)</title><rect x="16.7" y="1091.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (24 samples, 13.71%)</title><rect x="23.5" y="1251.0" width="161.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.5" y="1262.0">java/lang/Iterable.fo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/1925415337.accept (24 samples, 13.71%)</title><rect x="23.5" y="1235.0" width="161.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.5" y="1246.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (23 samples, 13.14%)</title><rect x="30.2" y="1219.0" width="155.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="33.2" y="1230.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (15 samples, 8.57%)</title><rect x="43.7" y="1203.0" width="101.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="46.7" y="1214.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (15 samples, 8.57%)</title><rect x="43.7" y="1187.0" width="101.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="46.7" y="1198.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (15 samples, 8.57%)</title><rect x="43.7" y="1171.0" width="101.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="46.7" y="1182.0">com/linecorp..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (15 samples, 8.57%)</title><rect x="43.7" y="1155.0" width="101.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="46.7" y="1166.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (15 samples, 8.57%)</title><rect x="43.7" y="1139.0" width="101.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="46.7" y="1150.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (13 samples, 7.43%)</title><rect x="57.2" y="1123.0" width="87.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="60.2" y="1134.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (13 samples, 7.43%)</title><rect x="57.2" y="1107.0" width="87.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="60.2" y="1118.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 7.43%)</title><rect x="57.2" y="1091.0" width="87.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="60.2" y="1102.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 7.43%)</title><rect x="57.2" y="1075.0" width="87.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="60.2" y="1086.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 7.43%)</title><rect x="57.2" y="1059.0" width="87.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="60.2" y="1070.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 7.43%)</title><rect x="57.2" y="1043.0" width="87.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.2" y="1054.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (8 samples, 4.57%)</title><rect x="90.9" y="1027.0" width="54.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="93.9" y="1038.0">sun/m..</text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 4.00%)</title><rect x="90.9" y="1011.0" width="47.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="93.9" y="1022.0">Unsa..</text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 3.43%)</title><rect x="90.9" y="995.0" width="40.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="93.9" y="1006.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.57%)</title><rect x="131.4" y="995.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="134.4" y="1006.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.57%)</title><rect x="138.1" y="1011.0" width="6.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="141.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (6 samples, 3.43%)</title><rect x="144.9" y="1203.0" width="40.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="147.9" y="1214.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 2.86%)</title><rect x="151.6" y="1187.0" width="33.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="154.6" y="1198.0">ja..</text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.57%)</title><rect x="178.6" y="1171.0" width="6.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="181.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (5 samples, 2.86%)</title><rect x="185.3" y="1251.0" width="33.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="188.3" y="1262.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (5 samples, 2.86%)</title><rect x="185.3" y="1235.0" width="33.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="188.3" y="1246.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (2 samples, 1.14%)</title><rect x="185.3" y="1219.0" width="13.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="188.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 1.14%)</title><rect x="185.3" y="1203.0" width="13.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="188.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 1.14%)</title><rect x="185.3" y="1187.0" width="13.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="188.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 1.14%)</title><rect x="185.3" y="1171.0" width="13.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="188.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 1.14%)</title><rect x="185.3" y="1155.0" width="13.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="188.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.14%)</title><rect x="185.3" y="1139.0" width="13.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="188.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.57%)</title><rect x="185.3" y="1123.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="188.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.57%)</title><rect x="185.3" y="1107.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="188.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.57%)</title><rect x="185.3" y="1091.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="188.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.57%)</title><rect x="185.3" y="1075.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="188.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.57%)</title><rect x="185.3" y="1059.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="188.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.57%)</title><rect x="185.3" y="1043.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="188.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.57%)</title><rect x="185.3" y="1027.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="188.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.57%)</title><rect x="192.1" y="1123.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="195.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.57%)</title><rect x="192.1" y="1107.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.57%)</title><rect x="198.8" y="1219.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="201.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.57%)</title><rect x="198.8" y="1203.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="201.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.57%)</title><rect x="198.8" y="1187.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="201.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.57%)</title><rect x="198.8" y="1171.0" width="6.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="201.8" y="1182.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.57%)</title><rect x="198.8" y="1155.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="201.8" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (1 samples, 0.57%)</title><rect x="198.8" y="1139.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="201.8" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.57%)</title><rect x="198.8" y="1123.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="201.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 1.14%)</title><rect x="205.5" y="1219.0" width="13.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 1.14%)</title><rect x="205.5" y="1203.0" width="13.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 1.14%)</title><rect x="205.5" y="1187.0" width="13.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="208.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 1.14%)</title><rect x="205.5" y="1171.0" width="13.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="208.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453523494.linkToTargetMethod (1 samples, 0.57%)</title><rect x="205.5" y="1155.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="208.5" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.57%)</title><rect x="212.3" y="1155.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="215.3" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.57%)</title><rect x="212.3" y="1139.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.3" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.57%)</title><rect x="212.3" y="1123.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="215.3" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.57%)</title><rect x="212.3" y="1107.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.3" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.57%)</title><rect x="212.3" y="1091.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="215.3" y="1102.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.57%)</title><rect x="212.3" y="1075.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="215.3" y="1086.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.57%)</title><rect x="212.3" y="1059.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.3" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.57%)</title><rect x="212.3" y="1043.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.3" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.57%)</title><rect x="212.3" y="1027.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.3" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.57%)</title><rect x="212.3" y="1011.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="215.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$242/1524385116.test (1 samples, 0.57%)</title><rect x="212.3" y="995.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="215.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.run (53 samples, 30.29%)</title><rect x="219.0" y="1283.0" width="357.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="222.0" y="1294.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (53 samples, 30.29%)</title><rect x="219.0" y="1267.0" width="357.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.0" y="1278.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (53 samples, 30.29%)</title><rect x="219.0" y="1251.0" width="357.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="222.0" y="1262.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.57%)</title><rect x="232.5" y="1235.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="235.5" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1311027391.run (33 samples, 18.86%)</title><rect x="239.3" y="1235.0" width="222.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.3" y="1246.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (33 samples, 18.86%)</title><rect x="239.3" y="1219.0" width="222.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="242.3" y="1230.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (33 samples, 18.86%)</title><rect x="239.3" y="1203.0" width="222.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.3" y="1214.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (30 samples, 17.14%)</title><rect x="239.3" y="1187.0" width="202.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="242.3" y="1198.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (8 samples, 4.57%)</title><rect x="246.0" y="1171.0" width="53.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="249.0" y="1182.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (8 samples, 4.57%)</title><rect x="246.0" y="1155.0" width="53.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.0" y="1166.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (8 samples, 4.57%)</title><rect x="246.0" y="1139.0" width="53.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.0" y="1150.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 4.57%)</title><rect x="246.0" y="1123.0" width="53.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="249.0" y="1134.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 4.57%)</title><rect x="246.0" y="1107.0" width="53.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="249.0" y="1118.0">com/l..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (8 samples, 4.57%)</title><rect x="246.0" y="1091.0" width="53.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="249.0" y="1102.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (3 samples, 1.71%)</title><rect x="246.0" y="1075.0" width="20.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 1.14%)</title><rect x="246.0" y="1059.0" width="13.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="249.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 1.14%)</title><rect x="246.0" y="1043.0" width="13.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="249.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 1.14%)</title><rect x="246.0" y="1027.0" width="13.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.57%)</title><rect x="259.5" y="1059.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="262.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.57%)</title><rect x="259.5" y="1043.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="262.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.57%)</title><rect x="259.5" y="1027.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="262.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.57%)</title><rect x="259.5" y="1011.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.57%)</title><rect x="259.5" y="995.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="262.5" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.57%)</title><rect x="259.5" y="979.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="262.5" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.57%)</title><rect x="259.5" y="963.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="262.5" y="974.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.57%)</title><rect x="259.5" y="947.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="262.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (5 samples, 2.86%)</title><rect x="266.2" y="1075.0" width="33.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.2" y="1086.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 2.86%)</title><rect x="266.2" y="1059.0" width="33.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="269.2" y="1070.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.14%)</title><rect x="266.2" y="1043.0" width="13.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.57%)</title><rect x="266.2" y="1027.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.57%)</title><rect x="266.2" y="1011.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="269.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.57%)</title><rect x="266.2" y="995.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="269.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.57%)</title><rect x="273.0" y="1027.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="276.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.71%)</title><rect x="279.7" y="1043.0" width="20.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="282.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.71%)</title><rect x="279.7" y="1027.0" width="20.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.71%)</title><rect x="279.7" y="1011.0" width="20.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 1.14%)</title><rect x="279.7" y="995.0" width="13.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="282.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 1.14%)</title><rect x="279.7" y="979.0" width="13.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 1.14%)</title><rect x="279.7" y="963.0" width="13.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="282.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 1.14%)</title><rect x="279.7" y="947.0" width="13.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="282.7" y="958.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 1.14%)</title><rect x="279.7" y="931.0" width="13.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="282.7" y="942.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.57%)</title><rect x="279.7" y="915.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.7" y="926.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor11.newInstance (1 samples, 0.57%)</title><rect x="279.7" y="899.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.7" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.57%)</title><rect x="279.7" y="883.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="282.7" y="894.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor11.newInstance (1 samples, 0.57%)</title><rect x="286.5" y="915.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="289.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.57%)</title><rect x="293.2" y="995.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.2" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.57%)</title><rect x="293.2" y="979.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.2" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.57%)</title><rect x="293.2" y="963.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (19 samples, 10.86%)</title><rect x="299.9" y="1171.0" width="128.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="302.9" y="1182.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (3 samples, 1.71%)</title><rect x="299.9" y="1155.0" width="20.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="302.9" y="1166.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 1.71%)</title><rect x="299.9" y="1139.0" width="20.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="302.9" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.71%)</title><rect x="299.9" y="1123.0" width="20.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="302.9" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.14%)</title><rect x="299.9" y="1107.0" width="13.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="302.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.14%)</title><rect x="299.9" y="1091.0" width="13.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="302.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.14%)</title><rect x="299.9" y="1075.0" width="13.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="302.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.57%)</title><rect x="313.4" y="1107.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="316.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.57%)</title><rect x="313.4" y="1091.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="316.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.57%)</title><rect x="313.4" y="1075.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="316.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (8 samples, 4.57%)</title><rect x="320.2" y="1155.0" width="53.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="323.2" y="1166.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (8 samples, 4.57%)</title><rect x="320.2" y="1139.0" width="53.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="323.2" y="1150.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (5 samples, 2.86%)</title><rect x="320.2" y="1123.0" width="33.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="323.2" y="1134.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.14%)</title><rect x="340.4" y="1107.0" width="13.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="343.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.14%)</title><rect x="340.4" y="1091.0" width="13.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="343.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.57%)</title><rect x="347.1" y="1075.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="350.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.newCapacity (1 samples, 0.57%)</title><rect x="347.1" y="1059.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="350.1" y="1070.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 1.71%)</title><rect x="353.9" y="1123.0" width="20.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="356.9" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 1.71%)</title><rect x="353.9" y="1107.0" width="20.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="356.9" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.14%)</title><rect x="353.9" y="1091.0" width="13.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="356.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.14%)</title><rect x="353.9" y="1075.0" width="13.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="356.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.14%)</title><rect x="353.9" y="1059.0" width="13.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="356.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.57%)</title><rect x="360.6" y="1043.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="363.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.57%)</title><rect x="360.6" y="1027.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="363.6" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (1 samples, 0.57%)</title><rect x="367.4" y="1091.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="370.4" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.57%)</title><rect x="367.4" y="1075.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="370.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (8 samples, 4.57%)</title><rect x="374.1" y="1155.0" width="54.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="377.1" y="1166.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (8 samples, 4.57%)</title><rect x="374.1" y="1139.0" width="54.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="377.1" y="1150.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1972045211.process (2 samples, 1.14%)</title><rect x="374.1" y="1123.0" width="13.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="377.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (2 samples, 1.14%)</title><rect x="374.1" y="1107.0" width="13.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="377.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 1.14%)</title><rect x="374.1" y="1091.0" width="13.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="377.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.14%)</title><rect x="374.1" y="1075.0" width="13.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="377.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 1.14%)</title><rect x="374.1" y="1059.0" width="13.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="377.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.14%)</title><rect x="374.1" y="1043.0" width="13.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="377.1" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 1.14%)</title><rect x="374.1" y="1027.0" width="13.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="377.1" y="1038.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.14%)</title><rect x="374.1" y="1011.0" width="13.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="377.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (2 samples, 1.14%)</title><rect x="387.6" y="1123.0" width="13.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="390.6" y="1134.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.57%)</title><rect x="394.3" y="1107.0" width="6.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="397.3" y="1118.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.57%)</title><rect x="394.3" y="1091.0" width="6.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="397.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.57%)</title><rect x="401.1" y="1123.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="404.1" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.57%)</title><rect x="401.1" y="1107.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="404.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453523494.linkToTargetMethod (1 samples, 0.57%)</title><rect x="407.8" y="1123.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="410.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (1 samples, 0.57%)</title><rect x="407.8" y="1107.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="410.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/129937062.get$Lambda (1 samples, 0.57%)</title><rect x="407.8" y="1091.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="410.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/129937062.&lt;init&gt; (1 samples, 0.57%)</title><rect x="407.8" y="1075.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="410.8" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 1.14%)</title><rect x="414.6" y="1123.0" width="13.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="417.6" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 1.14%)</title><rect x="414.6" y="1107.0" width="13.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="417.6" y="1118.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 1.14%)</title><rect x="414.6" y="1091.0" width="13.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="417.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.14%)</title><rect x="428.1" y="1171.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="431.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.14%)</title><rect x="428.1" y="1155.0" width="13.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="431.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.14%)</title><rect x="428.1" y="1139.0" width="13.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="431.1" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$267/411143017.accept (2 samples, 1.14%)</title><rect x="428.1" y="1123.0" width="13.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="431.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (2 samples, 1.14%)</title><rect x="428.1" y="1107.0" width="13.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="431.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$259/2083097223.complete (2 samples, 1.14%)</title><rect x="428.1" y="1091.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="431.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (2 samples, 1.14%)</title><rect x="428.1" y="1075.0" width="13.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="431.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (2 samples, 1.14%)</title><rect x="428.1" y="1059.0" width="13.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="431.1" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 1.14%)</title><rect x="428.1" y="1043.0" width="13.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="431.1" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 1.14%)</title><rect x="428.1" y="1027.0" width="13.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="431.1" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 1.14%)</title><rect x="428.1" y="1011.0" width="13.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="431.1" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 1.14%)</title><rect x="428.1" y="995.0" width="13.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="431.1" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 1.14%)</title><rect x="441.5" y="1187.0" width="13.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="444.5" y="1198.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.14%)</title><rect x="441.5" y="1171.0" width="13.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="444.5" y="1182.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.14%)</title><rect x="441.5" y="1155.0" width="13.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="444.5" y="1166.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.57%)</title><rect x="455.0" y="1187.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="458.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.57%)</title><rect x="461.8" y="1235.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="464.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.57%)</title><rect x="468.5" y="1235.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="471.5" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.57%)</title><rect x="468.5" y="1219.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="471.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.57%)</title><rect x="475.3" y="1235.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="478.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (14 samples, 8.00%)</title><rect x="482.0" y="1235.0" width="94.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="485.0" y="1246.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (14 samples, 8.00%)</title><rect x="482.0" y="1219.0" width="94.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="485.0" y="1230.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (11 samples, 6.29%)</title><rect x="502.2" y="1203.0" width="74.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="505.2" y="1214.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 1.14%)</title><rect x="509.0" y="1187.0" width="13.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="512.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.14%)</title><rect x="509.0" y="1171.0" width="13.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="512.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 1.14%)</title><rect x="509.0" y="1155.0" width="13.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="512.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 1.14%)</title><rect x="509.0" y="1139.0" width="13.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="512.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (8 samples, 4.57%)</title><rect x="522.5" y="1187.0" width="53.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="525.5" y="1198.0">java/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (8 samples, 4.57%)</title><rect x="522.5" y="1171.0" width="53.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="525.5" y="1182.0">sun/m..</text>
</g>
<g>
<title>Unsafe_Park (7 samples, 4.00%)</title><rect x="529.2" y="1155.0" width="47.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="532.2" y="1166.0">Unsa..</text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.57%)</title><rect x="529.2" y="1139.0" width="6.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="532.2" y="1150.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.71%)</title><rect x="535.9" y="1139.0" width="20.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="538.9" y="1150.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 1.71%)</title><rect x="556.2" y="1139.0" width="20.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="559.2" y="1150.0"></text>
</g>
<g>
<title>start_thread (91 samples, 52.00%)</title><rect x="576.4" y="1283.0" width="613.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="579.4" y="1294.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (91 samples, 52.00%)</title><rect x="576.4" y="1267.0" width="613.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="579.4" y="1278.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 5.71%)</title><rect x="576.4" y="1251.0" width="67.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="579.4" y="1262.0">GangWor..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (10 samples, 5.71%)</title><rect x="576.4" y="1235.0" width="67.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="579.4" y="1246.0">G1ParTa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 4.57%)</title><rect x="576.4" y="1219.0" width="53.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="579.4" y="1230.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 2.29%)</title><rect x="583.1" y="1203.0" width="27.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="586.1" y="1214.0">G..</text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.57%)</title><rect x="603.4" y="1187.0" width="6.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="606.4" y="1198.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.57%)</title><rect x="610.1" y="1203.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="613.1" y="1214.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.14%)</title><rect x="616.9" y="1203.0" width="13.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="619.9" y="1214.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 1.14%)</title><rect x="630.3" y="1219.0" width="13.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="633.3" y="1230.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 1.14%)</title><rect x="630.3" y="1203.0" width="13.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="633.3" y="1214.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 1.14%)</title><rect x="630.3" y="1187.0" width="13.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="633.3" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 1.14%)</title><rect x="630.3" y="1171.0" width="13.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="633.3" y="1182.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (2 samples, 1.14%)</title><rect x="630.3" y="1155.0" width="13.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="633.3" y="1166.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (2 samples, 1.14%)</title><rect x="630.3" y="1139.0" width="13.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="633.3" y="1150.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (2 samples, 1.14%)</title><rect x="630.3" y="1123.0" width="13.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="633.3" y="1134.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.57%)</title><rect x="637.1" y="1107.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="640.1" y="1118.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.57%)</title><rect x="637.1" y="1091.0" width="6.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="640.1" y="1102.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.57%)</title><rect x="637.1" y="1075.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="640.1" y="1086.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (81 samples, 46.29%)</title><rect x="643.8" y="1251.0" width="546.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="646.8" y="1262.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (81 samples, 46.29%)</title><rect x="643.8" y="1235.0" width="546.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="646.8" y="1246.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (81 samples, 46.29%)</title><rect x="643.8" y="1219.0" width="546.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="646.8" y="1230.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (78 samples, 44.57%)</title><rect x="643.8" y="1203.0" width="526.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="646.8" y="1214.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (78 samples, 44.57%)</title><rect x="643.8" y="1187.0" width="526.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="646.8" y="1198.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (45 samples, 25.71%)</title><rect x="643.8" y="1171.0" width="303.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="646.8" y="1182.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Matcher::match() (6 samples, 3.43%)</title><rect x="643.8" y="1155.0" width="40.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="646.8" y="1166.0">Mat..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 2.86%)</title><rect x="643.8" y="1139.0" width="33.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="646.8" y="1150.0">Ma..</text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 1.14%)</title><rect x="657.3" y="1123.0" width="13.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="660.3" y="1134.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.57%)</title><rect x="670.8" y="1123.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="673.8" y="1134.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.57%)</title><rect x="670.8" y="1107.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="673.8" y="1118.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.57%)</title><rect x="670.8" y="1091.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="673.8" y="1102.0"></text>
</g>
<g>
<title>MemBarAcquireNode::Opcode() const (1 samples, 0.57%)</title><rect x="677.5" y="1139.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="680.5" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.14%)</title><rect x="684.3" y="1155.0" width="13.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="687.3" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.14%)</title><rect x="684.3" y="1139.0" width="13.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="687.3" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 1.14%)</title><rect x="684.3" y="1123.0" width="13.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="687.3" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.57%)</title><rect x="684.3" y="1107.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="687.3" y="1118.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.57%)</title><rect x="684.3" y="1091.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="687.3" y="1102.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.57%)</title><rect x="684.3" y="1075.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="687.3" y="1086.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.57%)</title><rect x="684.3" y="1059.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="687.3" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.57%)</title><rect x="691.0" y="1107.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="694.0" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (37 samples, 21.14%)</title><rect x="697.8" y="1155.0" width="249.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="700.8" y="1166.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.57%)</title><rect x="697.8" y="1139.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="700.8" y="1150.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.57%)</title><rect x="704.5" y="1139.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="707.5" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.71%)</title><rect x="711.3" y="1139.0" width="20.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="714.3" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.57%)</title><rect x="718.0" y="1123.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="721.0" y="1134.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.57%)</title><rect x="718.0" y="1107.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="721.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.57%)</title><rect x="724.7" y="1123.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="727.7" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.57%)</title><rect x="724.7" y="1107.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="727.7" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.71%)</title><rect x="731.5" y="1139.0" width="20.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="734.5" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.57%)</title><rect x="745.0" y="1123.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="748.0" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.71%)</title><rect x="751.7" y="1139.0" width="20.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="754.7" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 4.00%)</title><rect x="771.9" y="1139.0" width="47.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="774.9" y="1150.0">Phas..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 2.29%)</title><rect x="778.7" y="1123.0" width="27.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="781.7" y="1134.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.57%)</title><rect x="798.9" y="1107.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="801.9" y="1118.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.57%)</title><rect x="805.7" y="1123.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="808.7" y="1134.0"></text>
</g>
<g>
<title>lower_pressure(LRG*, unsigned int, Block*, unsigned int*, unsigned int*) [clone .isra.134] (1 samples, 0.57%)</title><rect x="812.4" y="1123.0" width="6.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="815.4" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.57%)</title><rect x="819.1" y="1139.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="822.1" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.57%)</title><rect x="819.1" y="1123.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="822.1" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.57%)</title><rect x="825.9" y="1139.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="828.9" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.57%)</title><rect x="832.6" y="1139.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="835.6" y="1150.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.57%)</title><rect x="839.4" y="1139.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="842.4" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.57%)</title><rect x="839.4" y="1123.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="842.4" y="1134.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.57%)</title><rect x="839.4" y="1107.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="842.4" y="1118.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.57%)</title><rect x="839.4" y="1091.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="842.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 2.29%)</title><rect x="846.1" y="1139.0" width="27.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="849.1" y="1150.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 2.29%)</title><rect x="846.1" y="1123.0" width="27.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="849.1" y="1134.0">I..</text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (3 samples, 1.71%)</title><rect x="873.1" y="1139.0" width="20.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="876.1" y="1150.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (3 samples, 1.71%)</title><rect x="873.1" y="1123.0" width="20.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="876.1" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (8 samples, 4.57%)</title><rect x="893.3" y="1139.0" width="54.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="896.3" y="1150.0">Phase..</text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.57%)</title><rect x="913.5" y="1123.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="916.5" y="1134.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.57%)</title><rect x="913.5" y="1107.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="916.5" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 1.71%)</title><rect x="920.3" y="1123.0" width="20.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="923.3" y="1134.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.57%)</title><rect x="933.8" y="1107.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="936.8" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.57%)</title><rect x="940.5" y="1123.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="943.5" y="1134.0"></text>
</g>
<g>
<title>Compile::Optimize() (24 samples, 13.71%)</title><rect x="947.3" y="1171.0" width="161.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="950.3" y="1182.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.57%)</title><rect x="947.3" y="1155.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="950.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.57%)</title><rect x="947.3" y="1139.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="950.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.57%)</title><rect x="947.3" y="1123.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="950.3" y="1134.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.57%)</title><rect x="947.3" y="1107.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="950.3" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.57%)</title><rect x="954.0" y="1155.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="957.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.57%)</title><rect x="954.0" y="1139.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="957.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::address_offset(Node*, PhaseTransform*) (1 samples, 0.57%)</title><rect x="954.0" y="1123.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="957.0" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.57%)</title><rect x="960.7" y="1155.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="963.7" y="1166.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.57%)</title><rect x="967.5" y="1155.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="970.5" y="1166.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.57%)</title><rect x="967.5" y="1139.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="970.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (16 samples, 9.14%)</title><rect x="974.2" y="1155.0" width="107.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="977.2" y="1166.0">PhaseIdealLoo..</text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.57%)</title><rect x="974.2" y="1139.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="977.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.14%)</title><rect x="981.0" y="1139.0" width="13.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="984.0" y="1150.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.57%)</title><rect x="987.7" y="1123.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="990.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.14%)</title><rect x="994.5" y="1139.0" width="13.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="997.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.194] (1 samples, 0.57%)</title><rect x="1001.2" y="1123.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1004.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 2.29%)</title><rect x="1007.9" y="1139.0" width="27.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1010.9" y="1150.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 1.71%)</title><rect x="1014.7" y="1123.0" width="20.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1017.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 1.71%)</title><rect x="1014.7" y="1107.0" width="20.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1017.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (3 samples, 1.71%)</title><rect x="1014.7" y="1091.0" width="20.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1017.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 2.29%)</title><rect x="1034.9" y="1139.0" width="27.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1037.9" y="1150.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 1.14%)</title><rect x="1048.4" y="1123.0" width="13.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1051.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() (1 samples, 0.57%)</title><rect x="1061.9" y="1139.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1064.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.57%)</title><rect x="1061.9" y="1123.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1064.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) (1 samples, 0.57%)</title><rect x="1061.9" y="1107.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1064.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.57%)</title><rect x="1068.6" y="1139.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1071.6" y="1150.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.57%)</title><rect x="1075.4" y="1139.0" width="6.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1078.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.71%)</title><rect x="1082.1" y="1155.0" width="20.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1085.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.71%)</title><rect x="1082.1" y="1139.0" width="20.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1085.1" y="1150.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1088.9" y="1123.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.9" y="1134.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1095.6" y="1123.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1098.6" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.57%)</title><rect x="1095.6" y="1107.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1098.6" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.57%)</title><rect x="1095.6" y="1091.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1098.6" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.57%)</title><rect x="1095.6" y="1075.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.6" y="1086.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.57%)</title><rect x="1095.6" y="1059.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1098.6" y="1070.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.57%)</title><rect x="1095.6" y="1043.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1098.6" y="1054.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.57%)</title><rect x="1102.3" y="1155.0" width="6.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1105.3" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 5.14%)</title><rect x="1109.1" y="1171.0" width="60.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1112.1" y="1182.0">ParseG..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 5.14%)</title><rect x="1109.1" y="1155.0" width="60.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1112.1" y="1166.0">Parse:..</text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 5.14%)</title><rect x="1109.1" y="1139.0" width="60.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1112.1" y="1150.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 5.14%)</title><rect x="1109.1" y="1123.0" width="60.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1112.1" y="1134.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 5.14%)</title><rect x="1109.1" y="1107.0" width="60.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.1" y="1118.0">Parse:..</text>
</g>
<g>
<title>Parse::do_call() (9 samples, 5.14%)</title><rect x="1109.1" y="1091.0" width="60.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1112.1" y="1102.0">Parse:..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.57%)</title><rect x="1109.1" y="1075.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1112.1" y="1086.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.57%)</title><rect x="1109.1" y="1059.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.1" y="1070.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.57%)</title><rect x="1109.1" y="1043.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1112.1" y="1054.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.57%)</title><rect x="1109.1" y="1027.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.1" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.57%)</title><rect x="1109.1" y="1011.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1112.1" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.57%)</title><rect x="1109.1" y="995.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.1" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="1109.1" y="979.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.1" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="1109.1" y="963.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1112.1" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.57%)</title><rect x="1109.1" y="947.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1112.1" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.57%)</title><rect x="1109.1" y="931.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1112.1" y="942.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.57%)</title><rect x="1109.1" y="915.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1112.1" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.57%)</title><rect x="1109.1" y="899.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.1" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.57%)</title><rect x="1109.1" y="883.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1112.1" y="894.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.57%)</title><rect x="1109.1" y="867.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.1" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.57%)</title><rect x="1109.1" y="851.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1112.1" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.57%)</title><rect x="1109.1" y="835.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.1" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.57%)</title><rect x="1109.1" y="819.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1112.1" y="830.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.57%)</title><rect x="1109.1" y="803.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1112.1" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.86%)</title><rect x="1115.8" y="1075.0" width="33.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1118.8" y="1086.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.86%)</title><rect x="1115.8" y="1059.0" width="33.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.8" y="1070.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.86%)</title><rect x="1115.8" y="1043.0" width="33.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.8" y="1054.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.86%)</title><rect x="1115.8" y="1027.0" width="33.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1118.8" y="1038.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.86%)</title><rect x="1115.8" y="1011.0" width="33.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.8" y="1022.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.29%)</title><rect x="1115.8" y="995.0" width="27.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1118.8" y="1006.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.29%)</title><rect x="1115.8" y="979.0" width="27.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1118.8" y="990.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.29%)</title><rect x="1115.8" y="963.0" width="27.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1118.8" y="974.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.29%)</title><rect x="1115.8" y="947.0" width="27.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.8" y="958.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.29%)</title><rect x="1115.8" y="931.0" width="27.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.8" y="942.0">P..</text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.57%)</title><rect x="1115.8" y="915.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.71%)</title><rect x="1122.6" y="915.0" width="20.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1125.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.14%)</title><rect x="1122.6" y="899.0" width="13.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.6" y="910.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.57%)</title><rect x="1122.6" y="883.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1125.6" y="894.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.57%)</title><rect x="1122.6" y="867.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.6" y="878.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.57%)</title><rect x="1122.6" y="851.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.6" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.57%)</title><rect x="1122.6" y="835.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.6" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.57%)</title><rect x="1122.6" y="819.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.6" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="1122.6" y="803.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.6" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::JsrSet::apply_control(ciTypeFlow*, ciBytecodeStream*, ciTypeFlow::StateVector*) (1 samples, 0.57%)</title><rect x="1122.6" y="787.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1125.6" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1129.3" y="883.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.3" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1129.3" y="867.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1129.3" y="851.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1129.3" y="835.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1129.3" y="819.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1129.3" y="803.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.3" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1129.3" y="787.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1132.3" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1129.3" y="771.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1129.3" y="755.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1129.3" y="739.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1129.3" y="723.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1132.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1129.3" y="707.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.3" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1129.3" y="691.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.3" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1129.3" y="675.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1129.3" y="659.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1132.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1129.3" y="643.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1129.3" y="627.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1132.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1129.3" y="611.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.3" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1129.3" y="595.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.3" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1129.3" y="579.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1129.3" y="563.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1132.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1129.3" y="547.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1129.3" y="531.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1129.3" y="515.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.3" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1129.3" y="499.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1132.3" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1129.3" y="483.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1129.3" y="467.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1129.3" y="451.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1129.3" y="435.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1129.3" y="419.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.3" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1129.3" y="403.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.3" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1129.3" y="387.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1129.3" y="371.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1129.3" y="355.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1129.3" y="339.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1129.3" y="323.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.3" y="334.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.57%)</title><rect x="1129.3" y="307.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.3" y="318.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.57%)</title><rect x="1129.3" y="291.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.3" y="302.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.57%)</title><rect x="1129.3" y="275.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.3" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.57%)</title><rect x="1129.3" y="259.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.3" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.57%)</title><rect x="1129.3" y="243.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.3" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="1129.3" y="227.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.3" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="1129.3" y="211.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.3" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.57%)</title><rect x="1129.3" y="195.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.3" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.57%)</title><rect x="1129.3" y="179.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.3" y="190.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.57%)</title><rect x="1129.3" y="163.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.3" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.57%)</title><rect x="1129.3" y="147.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.3" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.57%)</title><rect x="1129.3" y="131.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.3" y="142.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.57%)</title><rect x="1129.3" y="115.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.3" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.57%)</title><rect x="1129.3" y="99.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.3" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.57%)</title><rect x="1129.3" y="83.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.3" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.57%)</title><rect x="1129.3" y="67.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.3" y="78.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.57%)</title><rect x="1129.3" y="51.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.3" y="62.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.57%)</title><rect x="1129.3" y="35.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.3" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.57%)</title><rect x="1136.1" y="899.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1139.1" y="910.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.57%)</title><rect x="1136.1" y="883.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1139.1" y="894.0"></text>
</g>
<g>
<title>MemBarNode::make(Compile*, int, int, Node*) (1 samples, 0.57%)</title><rect x="1136.1" y="867.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.1" y="878.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.57%)</title><rect x="1136.1" y="851.0" width="6.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1139.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.57%)</title><rect x="1142.8" y="995.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.57%)</title><rect x="1142.8" y="979.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.8" y="990.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.57%)</title><rect x="1142.8" y="963.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.8" y="974.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.57%)</title><rect x="1142.8" y="947.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1145.8" y="958.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.57%)</title><rect x="1142.8" y="931.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.8" y="942.0"></text>
</g>
<g>
<title>EncodePNode::Value(PhaseTransform*) const (1 samples, 0.57%)</title><rect x="1142.8" y="915.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.8" y="926.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.71%)</title><rect x="1149.5" y="1075.0" width="20.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.5" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.71%)</title><rect x="1149.5" y="1059.0" width="20.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.5" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.71%)</title><rect x="1149.5" y="1043.0" width="20.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.71%)</title><rect x="1149.5" y="1027.0" width="20.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.71%)</title><rect x="1149.5" y="1011.0" width="20.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.57%)</title><rect x="1149.5" y="995.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.5" y="1006.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.57%)</title><rect x="1149.5" y="979.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.5" y="990.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.57%)</title><rect x="1149.5" y="963.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.5" y="974.0"></text>
</g>
<g>
<title>GraphKit::combine_exception_states(SafePointNode*, SafePointNode*) (1 samples, 0.57%)</title><rect x="1149.5" y="947.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.5" y="958.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.57%)</title><rect x="1149.5" y="931.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.5" y="942.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.57%)</title><rect x="1149.5" y="915.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.14%)</title><rect x="1156.3" y="995.0" width="13.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.14%)</title><rect x="1156.3" y="979.0" width="13.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.3" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.14%)</title><rect x="1156.3" y="963.0" width="13.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.3" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.14%)</title><rect x="1156.3" y="947.0" width="13.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.14%)</title><rect x="1156.3" y="931.0" width="13.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.14%)</title><rect x="1156.3" y="915.0" width="13.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.14%)</title><rect x="1156.3" y="899.0" width="13.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.14%)</title><rect x="1156.3" y="883.0" width="13.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.3" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.14%)</title><rect x="1156.3" y="867.0" width="13.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.3" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.14%)</title><rect x="1156.3" y="851.0" width="13.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.14%)</title><rect x="1156.3" y="835.0" width="13.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.14%)</title><rect x="1156.3" y="819.0" width="13.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.14%)</title><rect x="1156.3" y="803.0" width="13.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.14%)</title><rect x="1156.3" y="787.0" width="13.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.3" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1156.3" y="771.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.3" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1156.3" y="755.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1156.3" y="739.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1156.3" y="723.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1156.3" y="707.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1156.3" y="691.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.3" y="702.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1156.3" y="675.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.3" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1156.3" y="659.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.3" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1156.3" y="643.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1156.3" y="627.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1156.3" y="611.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1156.3" y="595.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1156.3" y="579.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.3" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1156.3" y="563.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.3" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1156.3" y="547.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1156.3" y="531.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1156.3" y="515.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1156.3" y="499.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1156.3" y="483.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.3" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1156.3" y="467.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.3" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1156.3" y="451.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1156.3" y="435.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1156.3" y="419.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1156.3" y="403.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.3" y="414.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.57%)</title><rect x="1156.3" y="387.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.3" y="398.0"></text>
</g>
<g>
<title>SubINode::add_id() const (1 samples, 0.57%)</title><rect x="1156.3" y="371.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.3" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1163.0" y="771.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.0" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1163.0" y="755.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.0" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1163.0" y="739.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1163.0" y="723.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1163.0" y="707.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1163.0" y="691.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1163.0" y="675.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.0" y="686.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.57%)</title><rect x="1163.0" y="659.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.0" y="670.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.57%)</title><rect x="1163.0" y="643.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.0" y="654.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.57%)</title><rect x="1163.0" y="627.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.0" y="638.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.57%)</title><rect x="1163.0" y="611.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.0" y="622.0"></text>
</g>
<g>
<title>TypeInstPtr::xdual() const (1 samples, 0.57%)</title><rect x="1163.0" y="595.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.0" y="606.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.57%)</title><rect x="1163.0" y="579.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.0" y="590.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.71%)</title><rect x="1169.8" y="1203.0" width="20.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.8" y="1214.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.71%)</title><rect x="1169.8" y="1187.0" width="20.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.8" y="1198.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.71%)</title><rect x="1169.8" y="1171.0" width="20.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.8" y="1182.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.71%)</title><rect x="1169.8" y="1155.0" width="20.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.8" y="1166.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.57%)</title><rect x="1169.8" y="1139.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.8" y="1150.0"></text>
</g>
<g>
<title>GlobalValueNumbering::kill_memory() (1 samples, 0.57%)</title><rect x="1169.8" y="1123.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.8" y="1134.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.57%)</title><rect x="1176.5" y="1139.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.5" y="1150.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.57%)</title><rect x="1176.5" y="1123.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.5" y="1134.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.57%)</title><rect x="1176.5" y="1107.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.5" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.57%)</title><rect x="1176.5" y="1091.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.5" y="1102.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.57%)</title><rect x="1176.5" y="1075.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.5" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.57%)</title><rect x="1176.5" y="1059.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.5" y="1070.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.57%)</title><rect x="1176.5" y="1043.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.5" y="1054.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.57%)</title><rect x="1183.3" y="1139.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.3" y="1150.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.57%)</title><rect x="1183.3" y="1123.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.3" y="1134.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.57%)</title><rect x="1183.3" y="1107.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.3" y="1118.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.57%)</title><rect x="1183.3" y="1091.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.3" y="1102.0"></text>
</g>
</g>
</svg>
