<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="981"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="981"> </text>
<g id="frames">
<g>
<title>all (163 samples, 100.00%)</title><rect x="10.0" y="947.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="958.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (30 samples, 18.40%)</title><rect x="10.0" y="931.0" width="217.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="942.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (30 samples, 18.40%)</title><rect x="10.0" y="915.0" width="217.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="926.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.61%)</title><rect x="10.0" y="899.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.61%)</title><rect x="10.0" y="883.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.61%)</title><rect x="10.0" y="867.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.61%)</title><rect x="10.0" y="851.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.61%)</title><rect x="10.0" y="835.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.61%)</title><rect x="10.0" y="819.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.61%)</title><rect x="10.0" y="803.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.61%)</title><rect x="10.0" y="787.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.61%)</title><rect x="10.0" y="771.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.61%)</title><rect x="10.0" y="755.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.61%)</title><rect x="10.0" y="739.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.61%)</title><rect x="10.0" y="723.0" width="7.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.61%)</title><rect x="17.2" y="899.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.61%)</title><rect x="17.2" y="883.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.2" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.61%)</title><rect x="17.2" y="867.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.2" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.&lt;init&gt; (1 samples, 0.61%)</title><rect x="17.2" y="851.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.2" y="862.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (15 samples, 9.20%)</title><rect x="24.5" y="899.0" width="108.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.5" y="910.0">java/lang/Ite..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/1917099307.accept (14 samples, 8.59%)</title><rect x="24.5" y="883.0" width="101.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.5" y="894.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (14 samples, 8.59%)</title><rect x="24.5" y="867.0" width="101.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.5" y="878.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (12 samples, 7.36%)</title><rect x="24.5" y="851.0" width="86.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.5" y="862.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (12 samples, 7.36%)</title><rect x="24.5" y="835.0" width="86.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.5" y="846.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (12 samples, 7.36%)</title><rect x="24.5" y="819.0" width="86.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.5" y="830.0">com/lineco..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (12 samples, 7.36%)</title><rect x="24.5" y="803.0" width="86.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.5" y="814.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (12 samples, 7.36%)</title><rect x="24.5" y="787.0" width="86.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.5" y="798.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (12 samples, 7.36%)</title><rect x="24.5" y="771.0" width="86.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.5" y="782.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (5 samples, 3.07%)</title><rect x="24.5" y="755.0" width="36.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.5" y="766.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 3.07%)</title><rect x="24.5" y="739.0" width="36.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="27.5" y="750.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 3.07%)</title><rect x="24.5" y="723.0" width="36.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.5" y="734.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 3.07%)</title><rect x="24.5" y="707.0" width="36.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="27.5" y="718.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 3.07%)</title><rect x="24.5" y="691.0" width="36.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.5" y="702.0">jav..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (5 samples, 3.07%)</title><rect x="24.5" y="675.0" width="36.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.5" y="686.0">sun..</text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 3.07%)</title><rect x="24.5" y="659.0" width="36.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="27.5" y="670.0">Uns..</text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 2.45%)</title><rect x="24.5" y="643.0" width="28.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="27.5" y="654.0">__..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.61%)</title><rect x="53.4" y="643.0" width="7.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="56.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 4.29%)</title><rect x="60.7" y="755.0" width="50.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.7" y="766.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 4.29%)</title><rect x="60.7" y="739.0" width="50.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="63.7" y="750.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 4.29%)</title><rect x="60.7" y="723.0" width="50.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.7" y="734.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 4.29%)</title><rect x="60.7" y="707.0" width="50.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.7" y="718.0">java/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 1.23%)</title><rect x="111.3" y="851.0" width="14.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="114.3" y="862.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.23%)</title><rect x="111.3" y="835.0" width="14.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="114.3" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.23%)</title><rect x="111.3" y="819.0" width="14.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="114.3" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.23%)</title><rect x="111.3" y="803.0" width="14.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="114.3" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 1.23%)</title><rect x="111.3" y="787.0" width="14.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="114.3" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.61%)</title><rect x="118.6" y="771.0" width="7.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="121.6" y="782.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.61%)</title><rect x="125.8" y="883.0" width="7.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="128.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 7.98%)</title><rect x="133.1" y="899.0" width="94.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="136.1" y="910.0">org/apache/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 7.98%)</title><rect x="133.1" y="883.0" width="94.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="136.1" y="894.0">org/apache/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 2.45%)</title><rect x="133.1" y="867.0" width="28.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="136.1" y="878.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 2.45%)</title><rect x="133.1" y="851.0" width="28.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="136.1" y="862.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 2.45%)</title><rect x="133.1" y="835.0" width="28.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="136.1" y="846.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.84%)</title><rect x="133.1" y="819.0" width="21.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="136.1" y="830.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.84%)</title><rect x="133.1" y="803.0" width="21.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="136.1" y="814.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.23%)</title><rect x="133.1" y="787.0" width="14.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="136.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.61%)</title><rect x="147.5" y="787.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="150.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.61%)</title><rect x="147.5" y="771.0" width="7.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="150.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.61%)</title><rect x="147.5" y="755.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="150.5" y="766.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.61%)</title><rect x="147.5" y="739.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="150.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.61%)</title><rect x="154.8" y="819.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="157.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (1 samples, 0.61%)</title><rect x="154.8" y="803.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="157.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 1.84%)</title><rect x="162.0" y="867.0" width="21.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.0" y="878.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 1.84%)</title><rect x="162.0" y="851.0" width="21.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="165.0" y="862.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 1.84%)</title><rect x="162.0" y="835.0" width="21.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="165.0" y="846.0">o..</text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.61%)</title><rect x="162.0" y="819.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="165.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.61%)</title><rect x="162.0" y="803.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="165.0" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.61%)</title><rect x="162.0" y="787.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="165.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 1.23%)</title><rect x="169.3" y="819.0" width="14.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="172.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 1.23%)</title><rect x="169.3" y="803.0" width="14.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="172.3" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.61%)</title><rect x="169.3" y="787.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="172.3" y="798.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.61%)</title><rect x="169.3" y="771.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="172.3" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.61%)</title><rect x="176.5" y="787.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.5" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.61%)</title><rect x="176.5" y="771.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.5" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.61%)</title><rect x="176.5" y="755.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.5" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.61%)</title><rect x="176.5" y="739.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="179.5" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.61%)</title><rect x="176.5" y="723.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="179.5" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.forEachRemaining (1 samples, 0.61%)</title><rect x="176.5" y="707.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 1.23%)</title><rect x="183.7" y="867.0" width="14.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="186.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 1.23%)</title><rect x="183.7" y="851.0" width="14.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="186.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.pollDelayMs (1 samples, 0.61%)</title><rect x="183.7" y="835.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="186.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.pollDelayMs (1 samples, 0.61%)</title><rect x="183.7" y="819.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="186.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.throttleDelayMs (1 samples, 0.61%)</title><rect x="183.7" y="803.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="186.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.61%)</title><rect x="191.0" y="835.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="194.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.61%)</title><rect x="191.0" y="819.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="194.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.61%)</title><rect x="191.0" y="803.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="194.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.61%)</title><rect x="191.0" y="787.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="194.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.61%)</title><rect x="191.0" y="771.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="194.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.61%)</title><rect x="191.0" y="755.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="194.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.61%)</title><rect x="191.0" y="739.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="194.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.61%)</title><rect x="191.0" y="723.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="194.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.61%)</title><rect x="191.0" y="707.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="194.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.61%)</title><rect x="191.0" y="691.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="194.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.61%)</title><rect x="191.0" y="675.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="194.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.61%)</title><rect x="191.0" y="659.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="194.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.61%)</title><rect x="191.0" y="643.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.61%)</title><rect x="191.0" y="627.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="194.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.61%)</title><rect x="191.0" y="611.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="194.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.61%)</title><rect x="191.0" y="595.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="194.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$4.validate (1 samples, 0.61%)</title><rect x="191.0" y="579.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$4.validate (1 samples, 0.61%)</title><rect x="191.0" y="563.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="194.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 2.45%)</title><rect x="198.2" y="867.0" width="29.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="201.2" y="878.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 2.45%)</title><rect x="198.2" y="851.0" width="29.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="201.2" y="862.0">or..</text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.61%)</title><rect x="205.5" y="835.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.5" y="846.0"></text>
</g>
<g>
<title>java/lang/Integer.hashCode (1 samples, 0.61%)</title><rect x="205.5" y="819.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 1.23%)</title><rect x="212.7" y="835.0" width="14.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="215.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 1.23%)</title><rect x="212.7" y="819.0" width="14.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="215.7" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.61%)</title><rect x="212.7" y="803.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="215.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.61%)</title><rect x="212.7" y="787.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="215.7" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.61%)</title><rect x="212.7" y="771.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="215.7" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.61%)</title><rect x="212.7" y="755.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="215.7" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.61%)</title><rect x="212.7" y="739.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="215.7" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.61%)</title><rect x="212.7" y="723.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.7" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.61%)</title><rect x="212.7" y="707.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="215.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.61%)</title><rect x="219.9" y="803.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="222.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.61%)</title><rect x="219.9" y="787.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="222.9" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.&lt;init&gt; (1 samples, 0.61%)</title><rect x="219.9" y="771.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="222.9" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.run (55 samples, 33.74%)</title><rect x="227.2" y="931.0" width="398.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="230.2" y="942.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (55 samples, 33.74%)</title><rect x="227.2" y="915.0" width="398.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.2" y="926.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (55 samples, 33.74%)</title><rect x="227.2" y="899.0" width="398.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.2" y="910.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/700404230.run (38 samples, 23.31%)</title><rect x="234.4" y="883.0" width="275.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.4" y="894.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (38 samples, 23.31%)</title><rect x="234.4" y="867.0" width="275.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.4" y="878.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (38 samples, 23.31%)</title><rect x="234.4" y="851.0" width="275.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.4" y="862.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (37 samples, 22.70%)</title><rect x="234.4" y="835.0" width="267.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.4" y="846.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (10 samples, 6.13%)</title><rect x="241.7" y="819.0" width="72.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.7" y="830.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (10 samples, 6.13%)</title><rect x="241.7" y="803.0" width="72.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="244.7" y="814.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (10 samples, 6.13%)</title><rect x="241.7" y="787.0" width="72.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="244.7" y="798.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 6.13%)</title><rect x="241.7" y="771.0" width="72.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="244.7" y="782.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 6.13%)</title><rect x="241.7" y="755.0" width="72.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.7" y="766.0">com/line..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (10 samples, 6.13%)</title><rect x="241.7" y="739.0" width="72.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="244.7" y="750.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (3 samples, 1.84%)</title><rect x="241.7" y="723.0" width="21.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="244.7" y="734.0">c..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.61%)</title><rect x="241.7" y="707.0" width="7.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="244.7" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.61%)</title><rect x="241.7" y="691.0" width="7.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="244.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.61%)</title><rect x="248.9" y="707.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="251.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.61%)</title><rect x="248.9" y="691.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.9" y="702.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.61%)</title><rect x="256.1" y="707.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="259.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (6 samples, 3.68%)</title><rect x="263.4" y="723.0" width="43.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="266.4" y="734.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 1.23%)</title><rect x="263.4" y="707.0" width="14.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="266.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.61%)</title><rect x="270.6" y="691.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.61%)</title><rect x="270.6" y="675.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.61%)</title><rect x="270.6" y="659.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (4 samples, 2.45%)</title><rect x="277.9" y="707.0" width="28.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="280.9" y="718.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.23%)</title><rect x="277.9" y="691.0" width="14.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="280.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.61%)</title><rect x="285.1" y="675.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="288.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.61%)</title><rect x="285.1" y="659.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="288.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.61%)</title><rect x="285.1" y="643.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (2 samples, 1.23%)</title><rect x="292.3" y="691.0" width="14.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="295.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (2 samples, 1.23%)</title><rect x="292.3" y="675.0" width="14.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="295.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 1.23%)</title><rect x="292.3" y="659.0" width="14.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.61%)</title><rect x="299.6" y="643.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.61%)</title><rect x="306.8" y="723.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="309.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.61%)</title><rect x="306.8" y="707.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.61%)</title><rect x="306.8" y="691.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="309.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.61%)</title><rect x="306.8" y="675.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="309.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.61%)</title><rect x="306.8" y="659.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="309.8" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (25 samples, 15.34%)</title><rect x="314.0" y="819.0" width="181.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.0" y="830.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (1 samples, 0.61%)</title><rect x="314.0" y="803.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.0" y="814.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.61%)</title><rect x="314.0" y="787.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="317.0" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.61%)</title><rect x="314.0" y="771.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="317.0" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.61%)</title><rect x="314.0" y="755.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="317.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.61%)</title><rect x="321.3" y="803.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.61%)</title><rect x="321.3" y="787.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="324.3" y="798.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.61%)</title><rect x="321.3" y="771.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="324.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (14 samples, 8.59%)</title><rect x="328.5" y="803.0" width="101.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="331.5" y="814.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (14 samples, 8.59%)</title><rect x="328.5" y="787.0" width="101.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="331.5" y="798.0">com/linecorp..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.61%)</title><rect x="328.5" y="771.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="331.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 1.84%)</title><rect x="335.8" y="771.0" width="21.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="338.8" y="782.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.23%)</title><rect x="343.0" y="755.0" width="14.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="346.0" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.23%)</title><rect x="343.0" y="739.0" width="14.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="346.0" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.61%)</title><rect x="343.0" y="723.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="346.0" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.61%)</title><rect x="343.0" y="707.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="346.0" y="718.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.61%)</title><rect x="343.0" y="691.0" width="7.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="346.0" y="702.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.61%)</title><rect x="350.2" y="723.0" width="7.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="353.2" y="734.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.61%)</title><rect x="357.5" y="771.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="360.5" y="782.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 1.23%)</title><rect x="364.7" y="771.0" width="14.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="367.7" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 1.23%)</title><rect x="364.7" y="755.0" width="14.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="367.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 1.23%)</title><rect x="364.7" y="739.0" width="14.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="367.7" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.61%)</title><rect x="372.0" y="723.0" width="7.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="375.0" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.61%)</title><rect x="372.0" y="707.0" width="7.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="375.0" y="718.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.61%)</title><rect x="379.2" y="771.0" width="7.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="382.2" y="782.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 3.68%)</title><rect x="386.4" y="771.0" width="43.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="389.4" y="782.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 3.68%)</title><rect x="386.4" y="755.0" width="43.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="389.4" y="766.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.61%)</title><rect x="386.4" y="739.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="389.4" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.61%)</title><rect x="386.4" y="723.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="389.4" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.61%)</title><rect x="386.4" y="707.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="389.4" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.61%)</title><rect x="386.4" y="691.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="389.4" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 3.07%)</title><rect x="393.7" y="739.0" width="36.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="396.7" y="750.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 2.45%)</title><rect x="400.9" y="723.0" width="29.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="403.9" y="734.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 2.45%)</title><rect x="400.9" y="707.0" width="29.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="403.9" y="718.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.61%)</title><rect x="422.6" y="691.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="425.6" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (5 samples, 3.07%)</title><rect x="429.9" y="803.0" width="36.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="432.9" y="814.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (4 samples, 2.45%)</title><rect x="437.1" y="787.0" width="29.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="440.1" y="798.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.61%)</title><rect x="437.1" y="771.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="440.1" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453523494.linkToTargetMethod (1 samples, 0.61%)</title><rect x="444.4" y="771.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="447.4" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (1 samples, 0.61%)</title><rect x="444.4" y="755.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="447.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/1225396206.get$Lambda (1 samples, 0.61%)</title><rect x="444.4" y="739.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="447.4" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/1225396206.&lt;init&gt; (1 samples, 0.61%)</title><rect x="444.4" y="723.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="447.4" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.61%)</title><rect x="451.6" y="771.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="454.6" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.61%)</title><rect x="451.6" y="755.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="454.6" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.61%)</title><rect x="458.8" y="771.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="461.8" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.61%)</title><rect x="458.8" y="755.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="461.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.61%)</title><rect x="466.1" y="803.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="469.1" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (1 samples, 0.61%)</title><rect x="466.1" y="787.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="469.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.84%)</title><rect x="473.3" y="803.0" width="21.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="476.3" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.23%)</title><rect x="480.6" y="787.0" width="14.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="483.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.23%)</title><rect x="480.6" y="771.0" width="14.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="483.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$265/221321797.accept (2 samples, 1.23%)</title><rect x="480.6" y="755.0" width="14.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="483.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (2 samples, 1.23%)</title><rect x="480.6" y="739.0" width="14.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="483.6" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 1.23%)</title><rect x="480.6" y="723.0" width="14.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="483.6" y="734.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (2 samples, 1.23%)</title><rect x="480.6" y="707.0" width="14.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="483.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.61%)</title><rect x="495.0" y="819.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="498.0" y="830.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.61%)</title><rect x="495.0" y="803.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="498.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.61%)</title><rect x="502.3" y="835.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="505.3" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.61%)</title><rect x="502.3" y="819.0" width="7.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="505.3" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.61%)</title><rect x="502.3" y="803.0" width="7.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="505.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 1.84%)</title><rect x="509.5" y="883.0" width="21.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="512.5" y="894.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 1.84%)</title><rect x="509.5" y="867.0" width="21.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="512.5" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (2 samples, 1.23%)</title><rect x="516.7" y="851.0" width="14.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="519.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.61%)</title><rect x="524.0" y="835.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="527.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (13 samples, 7.98%)</title><rect x="531.2" y="883.0" width="94.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="534.2" y="894.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (13 samples, 7.98%)</title><rect x="531.2" y="867.0" width="94.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="534.2" y="878.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (13 samples, 7.98%)</title><rect x="531.2" y="851.0" width="94.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="534.2" y="862.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.61%)</title><rect x="531.2" y="835.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="534.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.61%)</title><rect x="531.2" y="819.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="534.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.61%)</title><rect x="531.2" y="803.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="534.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.61%)</title><rect x="531.2" y="787.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="534.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (12 samples, 7.36%)</title><rect x="538.5" y="835.0" width="86.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="541.5" y="846.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (11 samples, 6.75%)</title><rect x="545.7" y="819.0" width="79.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="548.7" y="830.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Park (10 samples, 6.13%)</title><rect x="552.9" y="803.0" width="72.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="555.9" y="814.0">Unsafe_P..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.61%)</title><rect x="567.4" y="787.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="570.4" y="798.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.84%)</title><rect x="574.7" y="787.0" width="21.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="577.7" y="798.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 2.45%)</title><rect x="596.4" y="787.0" width="28.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="599.4" y="798.0">__..</text>
</g>
<g>
<title>malloc (1 samples, 0.61%)</title><rect x="625.3" y="931.0" width="7.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="628.3" y="942.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.61%)</title><rect x="632.6" y="931.0" width="7.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="635.6" y="942.0"></text>
</g>
<g>
<title>start_thread (76 samples, 46.63%)</title><rect x="639.8" y="931.0" width="550.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="642.8" y="942.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (76 samples, 46.63%)</title><rect x="639.8" y="915.0" width="550.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="642.8" y="926.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 8.59%)</title><rect x="639.8" y="899.0" width="101.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="642.8" y="910.0">GangWorker::..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 1.23%)</title><rect x="639.8" y="883.0" width="14.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="642.8" y="894.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 1.23%)</title><rect x="639.8" y="867.0" width="14.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="642.8" y="878.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.23%)</title><rect x="639.8" y="851.0" width="14.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="642.8" y="862.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (12 samples, 7.36%)</title><rect x="654.3" y="883.0" width="86.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="657.3" y="894.0">G1ParTask:..</text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.61%)</title><rect x="654.3" y="867.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="657.3" y="878.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 6.75%)</title><rect x="661.5" y="867.0" width="79.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="664.5" y="878.0">G1ParEvac..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 3.07%)</title><rect x="668.8" y="851.0" width="36.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="671.8" y="862.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.84%)</title><rect x="683.3" y="835.0" width="21.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="686.3" y="846.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.61%)</title><rect x="690.5" y="819.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="693.5" y="830.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.61%)</title><rect x="690.5" y="803.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="693.5" y="814.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.61%)</title><rect x="697.7" y="819.0" width="7.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="700.7" y="830.0"></text>
</g>
<g>
<title>G1ParScanClosure::do_oop(unsigned int*) (1 samples, 0.61%)</title><rect x="697.7" y="803.0" width="7.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="700.7" y="814.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (4 samples, 2.45%)</title><rect x="705.0" y="851.0" width="28.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="708.0" y="862.0">Ge..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.61%)</title><rect x="733.9" y="851.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="736.9" y="862.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (62 samples, 38.04%)</title><rect x="741.2" y="899.0" width="448.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="744.2" y="910.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (62 samples, 38.04%)</title><rect x="741.2" y="883.0" width="448.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="744.2" y="894.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (60 samples, 36.81%)</title><rect x="741.2" y="867.0" width="434.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="744.2" y="878.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (59 samples, 36.20%)</title><rect x="741.2" y="851.0" width="427.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="744.2" y="862.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (59 samples, 36.20%)</title><rect x="741.2" y="835.0" width="427.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="744.2" y="846.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool,..</text>
</g>
<g>
<title>Compile::Code_Gen() (38 samples, 23.31%)</title><rect x="741.2" y="819.0" width="275.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="744.2" y="830.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.84%)</title><rect x="741.2" y="803.0" width="21.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="744.2" y="814.0">C..</text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 1.23%)</title><rect x="741.2" y="787.0" width="14.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="744.2" y="798.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (2 samples, 1.23%)</title><rect x="741.2" y="771.0" width="14.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="744.2" y="782.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (2 samples, 1.23%)</title><rect x="741.2" y="755.0" width="14.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="744.2" y="766.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.61%)</title><rect x="755.6" y="787.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="758.6" y="798.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.61%)</title><rect x="755.6" y="771.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="758.6" y="782.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.61%)</title><rect x="755.6" y="755.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="758.6" y="766.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.61%)</title><rect x="762.9" y="803.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="765.9" y="814.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.61%)</title><rect x="762.9" y="787.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="765.9" y="798.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.61%)</title><rect x="762.9" y="771.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="765.9" y="782.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 2.45%)</title><rect x="770.1" y="803.0" width="29.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="773.1" y="814.0">Ma..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.61%)</title><rect x="770.1" y="787.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="773.1" y="798.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.84%)</title><rect x="777.4" y="787.0" width="21.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="780.4" y="798.0">M..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.23%)</title><rect x="784.6" y="771.0" width="14.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="787.6" y="782.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 1.23%)</title><rect x="784.6" y="755.0" width="14.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="787.6" y="766.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.61%)</title><rect x="784.6" y="739.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="787.6" y="750.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.61%)</title><rect x="784.6" y="723.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="787.6" y="734.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.61%)</title><rect x="784.6" y="707.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="787.6" y="718.0"></text>
</g>
<g>
<title>State::_sub_Op_ConL(Node const*) (1 samples, 0.61%)</title><rect x="784.6" y="691.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="787.6" y="702.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.61%)</title><rect x="791.8" y="739.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="794.8" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.61%)</title><rect x="791.8" y="723.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="794.8" y="734.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.61%)</title><rect x="791.8" y="707.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="794.8" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.61%)</title><rect x="799.1" y="803.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="802.1" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.61%)</title><rect x="799.1" y="787.0" width="7.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="802.1" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.84%)</title><rect x="806.3" y="803.0" width="21.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="809.3" y="814.0">P..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.84%)</title><rect x="806.3" y="787.0" width="21.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="809.3" y="798.0">P..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 1.23%)</title><rect x="806.3" y="771.0" width="14.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="809.3" y="782.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.61%)</title><rect x="806.3" y="755.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="809.3" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.61%)</title><rect x="813.6" y="755.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="816.6" y="766.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.61%)</title><rect x="813.6" y="739.0" width="7.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="816.6" y="750.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.61%)</title><rect x="813.6" y="723.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="816.6" y="734.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.61%)</title><rect x="813.6" y="707.0" width="7.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="816.6" y="718.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.61%)</title><rect x="813.6" y="691.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="816.6" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.61%)</title><rect x="820.8" y="771.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="823.8" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.61%)</title><rect x="820.8" y="755.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="823.8" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (25 samples, 15.34%)</title><rect x="828.0" y="803.0" width="181.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="831.0" y="814.0">PhaseChaitin::Register_..</text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.23%)</title><rect x="828.0" y="787.0" width="14.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="831.0" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.61%)</title><rect x="828.0" y="771.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="831.0" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.61%)</title><rect x="835.3" y="771.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="838.3" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.61%)</title><rect x="835.3" y="755.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="838.3" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.84%)</title><rect x="842.5" y="787.0" width="21.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="845.5" y="798.0">P..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 4.91%)</title><rect x="864.2" y="787.0" width="57.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="867.2" y="798.0">PhaseC..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.61%)</title><rect x="864.2" y="771.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="867.2" y="782.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.61%)</title><rect x="864.2" y="755.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="867.2" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 3.07%)</title><rect x="871.5" y="771.0" width="36.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="874.5" y="782.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.61%)</title><rect x="900.4" y="755.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="903.4" y="766.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.61%)</title><rect x="907.7" y="771.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="910.7" y="782.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.61%)</title><rect x="914.9" y="771.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="917.9" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (1 samples, 0.61%)</title><rect x="922.1" y="787.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="925.1" y="798.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.61%)</title><rect x="922.1" y="771.0" width="7.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="925.1" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (1 samples, 0.61%)</title><rect x="929.4" y="787.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="932.4" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.84%)</title><rect x="936.6" y="787.0" width="21.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="939.6" y="798.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 1.23%)</title><rect x="943.9" y="771.0" width="14.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="946.9" y="782.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.61%)</title><rect x="958.3" y="787.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="961.3" y="798.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.61%)</title><rect x="958.3" y="771.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="961.3" y="782.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 2.45%)</title><rect x="965.6" y="787.0" width="28.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="968.6" y="798.0">Ph..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.23%)</title><rect x="980.1" y="771.0" width="14.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="983.1" y="782.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.61%)</title><rect x="987.3" y="755.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="990.3" y="766.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.61%)</title><rect x="994.5" y="787.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="997.5" y="798.0"></text>
</g>
<g>
<title>orL_rReg_castP2X_0Node::out_RegMask() const (1 samples, 0.61%)</title><rect x="1001.8" y="787.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1004.8" y="798.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.61%)</title><rect x="1009.0" y="803.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1012.0" y="814.0"></text>
</g>
<g>
<title>Compile::Optimize() (15 samples, 9.20%)</title><rect x="1016.3" y="819.0" width="108.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1019.3" y="830.0">Compile::Opti..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.61%)</title><rect x="1016.3" y="803.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1019.3" y="814.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.61%)</title><rect x="1016.3" y="787.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1019.3" y="798.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.61%)</title><rect x="1016.3" y="771.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1019.3" y="782.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.61%)</title><rect x="1016.3" y="755.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1019.3" y="766.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.61%)</title><rect x="1023.5" y="803.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1026.5" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.61%)</title><rect x="1023.5" y="787.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1026.5" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (8 samples, 4.91%)</title><rect x="1030.7" y="803.0" width="58.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1033.7" y="814.0">PhaseI..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.61%)</title><rect x="1030.7" y="787.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1033.7" y="798.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.61%)</title><rect x="1030.7" y="771.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1033.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.61%)</title><rect x="1030.7" y="755.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1033.7" y="766.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.61%)</title><rect x="1030.7" y="739.0" width="7.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1033.7" y="750.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.61%)</title><rect x="1038.0" y="787.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1041.0" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.61%)</title><rect x="1045.2" y="787.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1048.2" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.23%)</title><rect x="1052.5" y="787.0" width="14.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1055.5" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.84%)</title><rect x="1066.9" y="787.0" width="21.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1069.9" y="798.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.84%)</title><rect x="1066.9" y="771.0" width="21.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1069.9" y="782.0">P..</text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.61%)</title><rect x="1074.2" y="755.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1077.2" y="766.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.61%)</title><rect x="1074.2" y="739.0" width="7.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1077.2" y="750.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.61%)</title><rect x="1081.4" y="755.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1084.4" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.23%)</title><rect x="1088.7" y="803.0" width="14.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1091.7" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.23%)</title><rect x="1088.7" y="787.0" width="14.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1091.7" y="798.0"></text>
</g>
<g>
<title>CallStaticJavaNode::Opcode() const (1 samples, 0.61%)</title><rect x="1088.7" y="771.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1091.7" y="782.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.61%)</title><rect x="1095.9" y="771.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1098.9" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.61%)</title><rect x="1095.9" y="755.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1098.9" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.61%)</title><rect x="1095.9" y="739.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.9" y="750.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.61%)</title><rect x="1095.9" y="723.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.9" y="734.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.61%)</title><rect x="1103.1" y="803.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1106.1" y="814.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.61%)</title><rect x="1103.1" y="787.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.1" y="798.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.61%)</title><rect x="1103.1" y="771.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.1" y="782.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.61%)</title><rect x="1110.4" y="803.0" width="7.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1113.4" y="814.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.61%)</title><rect x="1110.4" y="787.0" width="7.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1113.4" y="798.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.61%)</title><rect x="1110.4" y="771.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.4" y="782.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.61%)</title><rect x="1117.6" y="803.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.6" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 3.68%)</title><rect x="1124.8" y="819.0" width="43.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.8" y="830.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 3.68%)</title><rect x="1124.8" y="803.0" width="43.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.8" y="814.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.68%)</title><rect x="1124.8" y="787.0" width="43.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.8" y="798.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.68%)</title><rect x="1124.8" y="771.0" width="43.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1127.8" y="782.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.68%)</title><rect x="1124.8" y="755.0" width="43.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.8" y="766.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.68%)</title><rect x="1124.8" y="739.0" width="43.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.8" y="750.0">Pars..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 3.07%)</title><rect x="1124.8" y="723.0" width="36.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.8" y="734.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 3.07%)</title><rect x="1124.8" y="707.0" width="36.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.8" y="718.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 3.07%)</title><rect x="1124.8" y="691.0" width="36.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.8" y="702.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 3.07%)</title><rect x="1124.8" y="675.0" width="36.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1127.8" y="686.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 3.07%)</title><rect x="1124.8" y="659.0" width="36.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.8" y="670.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 3.07%)</title><rect x="1124.8" y="643.0" width="36.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1127.8" y="654.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.45%)</title><rect x="1124.8" y="627.0" width="29.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.8" y="638.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.45%)</title><rect x="1124.8" y="611.0" width="29.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.8" y="622.0">Pa..</text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.61%)</title><rect x="1124.8" y="595.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1127.8" y="606.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.61%)</title><rect x="1124.8" y="579.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.8" y="590.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.61%)</title><rect x="1124.8" y="563.0" width="7.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1127.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.84%)</title><rect x="1132.1" y="595.0" width="21.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.1" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.84%)</title><rect x="1132.1" y="579.0" width="21.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.1" y="590.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.84%)</title><rect x="1132.1" y="563.0" width="21.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1135.1" y="574.0">P..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.23%)</title><rect x="1132.1" y="547.0" width="14.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.1" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.23%)</title><rect x="1132.1" y="531.0" width="14.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.1" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.23%)</title><rect x="1132.1" y="515.0" width="14.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.23%)</title><rect x="1132.1" y="499.0" width="14.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.23%)</title><rect x="1132.1" y="483.0" width="14.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.23%)</title><rect x="1132.1" y="467.0" width="14.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.23%)</title><rect x="1132.1" y="451.0" width="14.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.1" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.23%)</title><rect x="1132.1" y="435.0" width="14.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.1" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.23%)</title><rect x="1132.1" y="419.0" width="14.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.23%)</title><rect x="1132.1" y="403.0" width="14.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.23%)</title><rect x="1132.1" y="387.0" width="14.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1135.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.23%)</title><rect x="1132.1" y="371.0" width="14.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.23%)</title><rect x="1132.1" y="355.0" width="14.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.1" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.23%)</title><rect x="1132.1" y="339.0" width="14.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.1" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.23%)</title><rect x="1132.1" y="323.0" width="14.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.23%)</title><rect x="1132.1" y="307.0" width="14.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.23%)</title><rect x="1132.1" y="291.0" width="14.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.23%)</title><rect x="1132.1" y="275.0" width="14.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.23%)</title><rect x="1132.1" y="259.0" width="14.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.1" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.23%)</title><rect x="1132.1" y="243.0" width="14.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.1" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.23%)</title><rect x="1132.1" y="227.0" width="14.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.23%)</title><rect x="1132.1" y="211.0" width="14.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.23%)</title><rect x="1132.1" y="195.0" width="14.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.23%)</title><rect x="1132.1" y="179.0" width="14.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 1.23%)</title><rect x="1132.1" y="163.0" width="14.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.61%)</title><rect x="1132.1" y="147.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.1" y="158.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.61%)</title><rect x="1132.1" y="131.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.61%)</title><rect x="1139.3" y="147.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.3" y="158.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.61%)</title><rect x="1139.3" y="131.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.3" y="142.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.61%)</title><rect x="1139.3" y="115.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.3" y="126.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.61%)</title><rect x="1139.3" y="99.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.3" y="110.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.61%)</title><rect x="1139.3" y="83.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.3" y="94.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.61%)</title><rect x="1139.3" y="67.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.3" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.61%)</title><rect x="1139.3" y="51.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.3" y="62.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.61%)</title><rect x="1139.3" y="35.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.3" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.61%)</title><rect x="1146.6" y="547.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.61%)</title><rect x="1146.6" y="531.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.6" y="542.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.61%)</title><rect x="1146.6" y="515.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.6" y="526.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.61%)</title><rect x="1146.6" y="499.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.6" y="510.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.61%)</title><rect x="1146.6" y="483.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.6" y="494.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.61%)</title><rect x="1146.6" y="467.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.6" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1153.8" y="627.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.8" y="638.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.61%)</title><rect x="1153.8" y="611.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.8" y="622.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.61%)</title><rect x="1153.8" y="595.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.8" y="606.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.61%)</title><rect x="1153.8" y="579.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.8" y="590.0"></text>
</g>
<g>
<title>ConstraintCastNode::Identity(PhaseTransform*) (1 samples, 0.61%)</title><rect x="1153.8" y="563.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.8" y="574.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.61%)</title><rect x="1153.8" y="547.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.8" y="558.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.61%)</title><rect x="1153.8" y="531.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.8" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1161.0" y="723.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.0" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1161.0" y="707.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.0" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.61%)</title><rect x="1161.0" y="691.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.61%)</title><rect x="1161.0" y="675.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.61%)</title><rect x="1161.0" y="659.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.61%)</title><rect x="1161.0" y="643.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.61%)</title><rect x="1161.0" y="627.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.0" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1161.0" y="611.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.0" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.61%)</title><rect x="1161.0" y="595.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.61%)</title><rect x="1161.0" y="579.0" width="7.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.61%)</title><rect x="1161.0" y="563.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.61%)</title><rect x="1161.0" y="547.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.61%)</title><rect x="1161.0" y="531.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.0" y="542.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.61%)</title><rect x="1161.0" y="515.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.0" y="526.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.61%)</title><rect x="1161.0" y="499.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.0" y="510.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_input_for_runtime_call(SafePointNode*) (1 samples, 0.61%)</title><rect x="1161.0" y="483.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.0" y="494.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.61%)</title><rect x="1161.0" y="467.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.0" y="478.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.61%)</title><rect x="1161.0" y="451.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.0" y="462.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.61%)</title><rect x="1168.3" y="851.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.3" y="862.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.61%)</title><rect x="1168.3" y="835.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.3" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.61%)</title><rect x="1168.3" y="819.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.3" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.61%)</title><rect x="1168.3" y="803.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.3" y="814.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.61%)</title><rect x="1168.3" y="787.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.3" y="798.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.61%)</title><rect x="1168.3" y="771.0" width="7.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.3" y="782.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.61%)</title><rect x="1168.3" y="755.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.3" y="766.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.61%)</title><rect x="1168.3" y="739.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.3" y="750.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.61%)</title><rect x="1168.3" y="723.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.3" y="734.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.61%)</title><rect x="1168.3" y="707.0" width="7.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.3" y="718.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 1.23%)</title><rect x="1175.5" y="867.0" width="14.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.5" y="878.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.61%)</title><rect x="1182.8" y="851.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="862.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.61%)</title><rect x="1182.8" y="835.0" width="7.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.8" y="846.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.61%)</title><rect x="1182.8" y="819.0" width="7.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.8" y="830.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.61%)</title><rect x="1182.8" y="803.0" width="7.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.8" y="814.0"></text>
</g>
</g>
</svg>
