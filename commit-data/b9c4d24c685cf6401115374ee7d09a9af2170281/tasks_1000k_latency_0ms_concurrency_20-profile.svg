<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1093"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1093"> </text>
<g id="frames">
<g>
<title>all (1,083 samples, 100.00%)</title><rect x="10.0" y="1059.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1070.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (265 samples, 24.47%)</title><rect x="10.0" y="1043.0" width="288.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1054.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (264 samples, 24.38%)</title><rect x="10.0" y="1027.0" width="287.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1038.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.18%)</title><rect x="10.0" y="1011.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.18%)</title><rect x="10.0" y="995.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/1447001476.accept (2 samples, 0.18%)</title><rect x="10.0" y="979.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.18%)</title><rect x="10.0" y="963.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.18%)</title><rect x="10.0" y="947.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.18%)</title><rect x="10.0" y="931.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (2 samples, 0.18%)</title><rect x="10.0" y="915.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.09%)</title><rect x="12.2" y="1011.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.09%)</title><rect x="12.2" y="995.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.2" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="12.2" y="979.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.2" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="12.2" y="963.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.2" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="12.2" y="947.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.2" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="12.2" y="931.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.2" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="12.2" y="915.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.2" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="12.2" y="899.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.2" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="12.2" y="883.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.2" y="894.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="12.2" y="867.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.2" y="878.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="12.2" y="851.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.09%)</title><rect x="13.3" y="1011.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.3" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.09%)</title><rect x="13.3" y="995.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.3" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="13.3" y="979.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.3" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="13.3" y="963.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.3" y="974.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (198 samples, 18.28%)</title><rect x="14.4" y="1011.0" width="215.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.4" y="1022.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/1635802254.accept (185 samples, 17.08%)</title><rect x="14.4" y="995.0" width="201.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.4" y="1006.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (184 samples, 16.99%)</title><rect x="15.4" y="979.0" width="200.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.4" y="990.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (141 samples, 13.02%)</title><rect x="15.4" y="963.0" width="153.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.4" y="974.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (141 samples, 13.02%)</title><rect x="15.4" y="947.0" width="153.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.4" y="958.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (141 samples, 13.02%)</title><rect x="15.4" y="931.0" width="153.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.4" y="942.0">com/linecorp/decato..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (141 samples, 13.02%)</title><rect x="15.4" y="915.0" width="153.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="18.4" y="926.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (141 samples, 13.02%)</title><rect x="15.4" y="899.0" width="153.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.4" y="910.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (140 samples, 12.93%)</title><rect x="16.5" y="883.0" width="152.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.5" y="894.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (95 samples, 8.77%)</title><rect x="16.5" y="867.0" width="103.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.5" y="878.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (18 samples, 1.66%)</title><rect x="16.5" y="851.0" width="19.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (18 samples, 1.66%)</title><rect x="16.5" y="835.0" width="19.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (15 samples, 1.39%)</title><rect x="19.8" y="819.0" width="16.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (14 samples, 1.29%)</title><rect x="20.9" y="803.0" width="15.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.37%)</title><rect x="36.1" y="851.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="39.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (4 samples, 0.37%)</title><rect x="36.1" y="835.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.18%)</title><rect x="37.2" y="819.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.2" y="830.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.18%)</title><rect x="37.2" y="803.0" width="2.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="40.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.09%)</title><rect x="39.4" y="819.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (73 samples, 6.74%)</title><rect x="40.5" y="851.0" width="79.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.5" y="862.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (73 samples, 6.74%)</title><rect x="40.5" y="835.0" width="79.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="43.5" y="846.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (71 samples, 6.56%)</title><rect x="40.5" y="819.0" width="77.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="43.5" y="830.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (71 samples, 6.56%)</title><rect x="40.5" y="803.0" width="77.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="43.5" y="814.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (68 samples, 6.28%)</title><rect x="43.8" y="787.0" width="74.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="46.8" y="798.0">sun/misc..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="43.8" y="771.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="46.8" y="782.0"></text>
</g>
<g>
<title>Unsafe_Unpark (64 samples, 5.91%)</title><rect x="44.9" y="771.0" width="69.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="47.9" y="782.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.18%)</title><rect x="44.9" y="755.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="47.9" y="766.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.28%)</title><rect x="47.0" y="755.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="50.0" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_signal (41 samples, 3.79%)</title><rect x="50.3" y="755.0" width="44.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="53.3" y="766.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.09%)</title><rect x="95.0" y="755.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="98.0" y="766.0"></text>
</g>
<g>
<title>pthread_mutex_lock (17 samples, 1.57%)</title><rect x="96.1" y="755.0" width="18.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="99.1" y="766.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.09%)</title><rect x="114.6" y="771.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="117.6" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.18%)</title><rect x="115.7" y="771.0" width="2.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="118.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.18%)</title><rect x="117.9" y="819.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="120.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (40 samples, 3.69%)</title><rect x="120.0" y="867.0" width="43.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="123.0" y="878.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (40 samples, 3.69%)</title><rect x="120.0" y="851.0" width="43.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="123.0" y="862.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (40 samples, 3.69%)</title><rect x="120.0" y="835.0" width="43.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="123.0" y="846.0">java..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.28%)</title><rect x="160.4" y="819.0" width="3.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="163.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.28%)</title><rect x="163.6" y="867.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="166.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (3 samples, 0.28%)</title><rect x="163.6" y="851.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="166.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.28%)</title><rect x="163.6" y="835.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="166.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.18%)</title><rect x="166.9" y="867.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="169.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.18%)</title><rect x="166.9" y="851.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="169.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.18%)</title><rect x="166.9" y="835.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="169.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.18%)</title><rect x="166.9" y="819.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="169.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (3 samples, 0.28%)</title><rect x="169.1" y="963.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="172.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.28%)</title><rect x="169.1" y="947.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="172.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.37%)</title><rect x="172.3" y="963.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="175.3" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.37%)</title><rect x="172.3" y="947.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.3" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.37%)</title><rect x="172.3" y="931.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.3" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (36 samples, 3.32%)</title><rect x="176.7" y="963.0" width="39.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="179.7" y="974.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (35 samples, 3.23%)</title><rect x="176.7" y="947.0" width="38.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="179.7" y="958.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (13 samples, 1.20%)</title><rect x="192.0" y="931.0" width="14.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.0" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.83%)</title><rect x="192.0" y="915.0" width="9.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.0" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 0.83%)</title><rect x="192.0" y="899.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="195.0" y="910.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.83%)</title><rect x="192.0" y="883.0" width="9.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="195.0" y="894.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.55%)</title><rect x="195.2" y="867.0" width="6.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="198.2" y="878.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.09%)</title><rect x="201.8" y="915.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.8" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.28%)</title><rect x="202.9" y="915.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="205.9" y="926.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.18%)</title><rect x="206.1" y="931.0" width="2.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="209.1" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.55%)</title><rect x="208.3" y="931.0" width="6.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="211.3" y="942.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="214.8" y="947.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="217.8" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="214.8" y="931.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="217.8" y="942.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="214.8" y="915.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="217.8" y="926.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.28%)</title><rect x="215.9" y="995.0" width="3.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="218.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (9 samples, 0.83%)</title><rect x="219.2" y="995.0" width="9.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (9 samples, 0.83%)</title><rect x="219.2" y="979.0" width="9.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.65%)</title><rect x="221.4" y="963.0" width="7.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.65%)</title><rect x="221.4" y="947.0" width="7.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="224.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="229.0" y="995.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="229.0" y="979.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (62 samples, 5.72%)</title><rect x="230.1" y="1011.0" width="67.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="233.1" y="1022.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 5.54%)</title><rect x="231.2" y="995.0" width="65.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="234.2" y="1006.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (33 samples, 3.05%)</title><rect x="231.2" y="979.0" width="35.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.2" y="990.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.09%)</title><rect x="232.3" y="963.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="232.3" y="947.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="235.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="232.3" y="931.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="233.4" y="963.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="236.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="233.4" y="947.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.09%)</title><rect x="233.4" y="931.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="236.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.09%)</title><rect x="233.4" y="915.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="236.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.09%)</title><rect x="233.4" y="899.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.4" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.09%)</title><rect x="233.4" y="883.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="236.4" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="233.4" y="867.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="236.4" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="233.4" y="851.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="236.4" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="233.4" y="835.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="236.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (30 samples, 2.77%)</title><rect x="234.5" y="963.0" width="32.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="237.5" y="974.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (30 samples, 2.77%)</title><rect x="234.5" y="947.0" width="32.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.5" y="958.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (25 samples, 2.31%)</title><rect x="235.5" y="931.0" width="27.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="238.5" y="942.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (25 samples, 2.31%)</title><rect x="235.5" y="915.0" width="27.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="238.5" y="926.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 1.11%)</title><rect x="237.7" y="899.0" width="13.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="240.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 0.28%)</title><rect x="247.5" y="883.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="250.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 0.28%)</title><rect x="247.5" y="867.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="250.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (3 samples, 0.28%)</title><rect x="247.5" y="851.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="250.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (3 samples, 0.28%)</title><rect x="247.5" y="835.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (3 samples, 0.28%)</title><rect x="247.5" y="819.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (3 samples, 0.28%)</title><rect x="247.5" y="803.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (3 samples, 0.28%)</title><rect x="247.5" y="787.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (11 samples, 1.02%)</title><rect x="250.8" y="899.0" width="12.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.92%)</title><rect x="251.9" y="883.0" width="10.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="254.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (10 samples, 0.92%)</title><rect x="251.9" y="867.0" width="10.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="254.9" y="878.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (10 samples, 0.92%)</title><rect x="251.9" y="851.0" width="10.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="254.9" y="862.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (6 samples, 0.55%)</title><rect x="256.2" y="835.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="259.2" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (6 samples, 0.55%)</title><rect x="256.2" y="819.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.2" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (6 samples, 0.55%)</title><rect x="256.2" y="803.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="259.2" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (6 samples, 0.55%)</title><rect x="256.2" y="787.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="259.2" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="261.7" y="771.0" width="1.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="264.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.09%)</title><rect x="262.8" y="931.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.09%)</title><rect x="262.8" y="915.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="265.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="262.8" y="899.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="262.8" y="883.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="265.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="262.8" y="867.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="265.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="262.8" y="851.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="265.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.18%)</title><rect x="263.9" y="931.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.18%)</title><rect x="263.9" y="915.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="263.9" y="899.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="263.9" y="883.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="266.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="263.9" y="867.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="263.9" y="851.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="266.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="265.0" y="851.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLag (1 samples, 0.09%)</title><rect x="266.0" y="931.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="269.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="266.0" y="915.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="269.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (16 samples, 1.48%)</title><rect x="267.1" y="979.0" width="17.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="270.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (14 samples, 1.29%)</title><rect x="267.1" y="963.0" width="15.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="270.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (12 samples, 1.11%)</title><rect x="267.1" y="947.0" width="13.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="270.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.getAndSet (2 samples, 0.18%)</title><rect x="267.1" y="931.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="270.1" y="942.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="268.2" y="915.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.2" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="269.3" y="931.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.3" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="269.3" y="915.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="272.3" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="269.3" y="899.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.3" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="269.3" y="883.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.3" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="269.3" y="867.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.3" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="269.3" y="851.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="270.4" y="931.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="273.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="270.4" y="915.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (3 samples, 0.28%)</title><rect x="271.5" y="931.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.5" y="942.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.18%)</title><rect x="272.6" y="915.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.6" y="926.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.18%)</title><rect x="272.6" y="899.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="275.6" y="910.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.18%)</title><rect x="272.6" y="883.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.6" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.18%)</title><rect x="272.6" y="867.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="275.6" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="272.6" y="851.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.6" y="862.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.09%)</title><rect x="273.7" y="851.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="276.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (5 samples, 0.46%)</title><rect x="274.8" y="931.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="277.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (4 samples, 0.37%)</title><rect x="274.8" y="915.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="277.8" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.18%)</title><rect x="276.9" y="899.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="279.9" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="276.9" y="883.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="279.9" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.18%)</title><rect x="276.9" y="867.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.9" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="276.9" y="851.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="279.9" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="276.9" y="835.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.9" y="846.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="276.9" y="819.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.9" y="830.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.09%)</title><rect x="276.9" y="803.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="279.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="278.0" y="819.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.0" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="279.1" y="915.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="282.1" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="279.1" y="899.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="282.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.18%)</title><rect x="280.2" y="947.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.2" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.18%)</title><rect x="280.2" y="931.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="283.2" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="280.2" y="915.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="283.2" y="926.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.18%)</title><rect x="280.2" y="899.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.2" y="910.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.18%)</title><rect x="280.2" y="883.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="283.2" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="280.2" y="867.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.2" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="280.2" y="851.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.2" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.18%)</title><rect x="280.2" y="835.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="283.2" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (2 samples, 0.18%)</title><rect x="280.2" y="819.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.2" y="830.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (2 samples, 0.18%)</title><rect x="280.2" y="803.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.2" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.18%)</title><rect x="280.2" y="787.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.2" y="798.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.09%)</title><rect x="280.2" y="771.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$223/1690436518.test (1 samples, 0.09%)</title><rect x="280.2" y="755.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="283.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$hasAllFetchPositions$4 (1 samples, 0.09%)</title><rect x="280.2" y="739.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$213/2037870045.apply (1 samples, 0.09%)</title><rect x="281.3" y="771.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="284.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.lambda$stream$0 (1 samples, 0.09%)</title><rect x="281.3" y="755.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="284.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.18%)</title><rect x="282.4" y="963.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.09%)</title><rect x="282.4" y="947.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.subscription (1 samples, 0.09%)</title><rect x="282.4" y="931.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsAutoAssigned (1 samples, 0.09%)</title><rect x="283.5" y="947.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="286.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.37%)</title><rect x="284.6" y="979.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.37%)</title><rect x="284.6" y="963.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.09%)</title><rect x="284.6" y="947.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.09%)</title><rect x="284.6" y="931.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.09%)</title><rect x="284.6" y="915.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="284.6" y="899.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.09%)</title><rect x="284.6" y="883.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="287.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="284.6" y="867.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.28%)</title><rect x="285.7" y="947.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.18%)</title><rect x="285.7" y="931.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.7" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.09%)</title><rect x="285.7" y="915.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.7" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="285.7" y="899.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.7" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="285.7" y="883.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="288.7" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="285.7" y="867.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="288.7" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.09%)</title><rect x="285.7" y="851.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="288.7" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_humongous(unsigned long, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="285.7" y="835.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="288.7" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate(unsigned long, unsigned char) (1 samples, 0.09%)</title><rect x="285.7" y="819.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="288.7" y="830.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_sizes() (1 samples, 0.09%)</title><rect x="285.7" y="803.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="288.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.09%)</title><rect x="286.7" y="915.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.09%)</title><rect x="286.7" y="899.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="286.7" y="883.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="286.7" y="867.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="286.7" y="851.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="289.7" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="286.7" y="835.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.7" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.09%)</title><rect x="286.7" y="819.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.7" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.09%)</title><rect x="286.7" y="803.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="289.7" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="286.7" y="787.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="289.7" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="286.7" y="771.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.7" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="286.7" y="755.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="289.7" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="286.7" y="739.0" width="1.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="289.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.09%)</title><rect x="287.8" y="931.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.8" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.09%)</title><rect x="287.8" y="915.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="290.8" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.09%)</title><rect x="287.8" y="899.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.8" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.09%)</title><rect x="287.8" y="883.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.8" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.09%)</title><rect x="287.8" y="867.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="290.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="287.8" y="851.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.8" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="287.8" y="835.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="290.8" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="287.8" y="819.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (7 samples, 0.65%)</title><rect x="288.9" y="979.0" width="7.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="291.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (6 samples, 0.55%)</title><rect x="290.0" y="963.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="293.0" y="974.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.18%)</title><rect x="290.0" y="947.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="293.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/1054479890.accept (2 samples, 0.18%)</title><rect x="290.0" y="931.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.18%)</title><rect x="290.0" y="915.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="293.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.18%)</title><rect x="290.0" y="899.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="293.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.09%)</title><rect x="290.0" y="883.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="293.0" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="290.0" y="867.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="293.0" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="290.0" y="851.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="293.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="291.1" y="883.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.1" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="291.1" y="867.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="294.1" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="291.1" y="851.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="294.1" y="862.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="292.2" y="947.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="295.2" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="292.2" y="931.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="295.2" y="942.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.09%)</title><rect x="292.2" y="915.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="295.2" y="926.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.09%)</title><rect x="292.2" y="899.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="295.2" y="910.0"></text>
</g>
<g>
<title>InlineCacheBuffer::create_transition_stub(CompiledIC*, void*, unsigned char*) (1 samples, 0.09%)</title><rect x="292.2" y="883.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="295.2" y="894.0"></text>
</g>
<g>
<title>InlineCacheBuffer::new_ic_stub() (1 samples, 0.09%)</title><rect x="292.2" y="867.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="295.2" y="878.0"></text>
</g>
<g>
<title>StubQueue::request(int) (1 samples, 0.09%)</title><rect x="292.2" y="851.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="295.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.18%)</title><rect x="293.3" y="947.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="296.3" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="293.3" y="931.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.3" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="293.3" y="915.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.3" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="293.3" y="899.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.09%)</title><rect x="293.3" y="883.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="296.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="294.4" y="931.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="297.4" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="294.4" y="915.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="297.4" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="294.4" y="899.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="297.4" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="294.4" y="883.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="297.4" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="294.4" y="867.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="297.4" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="294.4" y="851.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="297.4" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="294.4" y="835.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="297.4" y="846.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="294.4" y="819.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="297.4" y="830.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="294.4" y="803.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="297.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="295.5" y="947.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="298.5" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="295.5" y="931.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="298.5" y="942.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="295.5" y="915.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.5" y="926.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="295.5" y="899.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.5" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="295.5" y="883.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="298.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.09%)</title><rect x="295.5" y="867.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="298.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.09%)</title><rect x="296.6" y="995.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="299.6" y="1006.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="296.6" y="979.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="299.6" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="297.6" y="1027.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="300.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/Thread.run (673 samples, 62.14%)</title><rect x="298.7" y="1043.0" width="733.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="301.7" y="1054.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (673 samples, 62.14%)</title><rect x="298.7" y="1027.0" width="733.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.7" y="1038.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (673 samples, 62.14%)</title><rect x="298.7" y="1011.0" width="733.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="301.7" y="1022.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1725484690.run (438 samples, 40.44%)</title><rect x="298.7" y="995.0" width="477.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.7" y="1006.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (436 samples, 40.26%)</title><rect x="300.9" y="979.0" width="475.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.9" y="990.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTa..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (436 samples, 40.26%)</title><rect x="300.9" y="963.0" width="475.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="303.9" y="974.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (428 samples, 39.52%)</title><rect x="300.9" y="947.0" width="466.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="303.9" y="958.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (144 samples, 13.30%)</title><rect x="308.5" y="931.0" width="156.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="311.5" y="942.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (144 samples, 13.30%)</title><rect x="308.5" y="915.0" width="156.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.5" y="926.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (144 samples, 13.30%)</title><rect x="308.5" y="899.0" width="156.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="311.5" y="910.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (144 samples, 13.30%)</title><rect x="308.5" y="883.0" width="156.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.5" y="894.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (144 samples, 13.30%)</title><rect x="308.5" y="867.0" width="156.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="311.5" y="878.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (144 samples, 13.30%)</title><rect x="308.5" y="851.0" width="156.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.5" y="862.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="308.5" y="835.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="311.5" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="308.5" y="819.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="311.5" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="308.5" y="803.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="311.5" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="308.5" y="787.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="311.5" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="308.5" y="771.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="311.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (44 samples, 4.06%)</title><rect x="309.6" y="835.0" width="48.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="312.6" y="846.0">com/..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="324.9" y="819.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="327.9" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.55%)</title><rect x="326.0" y="819.0" width="6.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="329.0" y="830.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.37%)</title><rect x="328.2" y="803.0" width="4.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="331.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 0.46%)</title><rect x="332.5" y="819.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="335.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 0.46%)</title><rect x="332.5" y="803.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="335.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.46%)</title><rect x="332.5" y="787.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="335.5" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.46%)</title><rect x="332.5" y="771.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="335.5" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.46%)</title><rect x="332.5" y="755.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="335.5" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.46%)</title><rect x="332.5" y="739.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="335.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (18 samples, 1.66%)</title><rect x="338.0" y="819.0" width="19.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="341.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 0.46%)</title><rect x="352.1" y="803.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="355.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.28%)</title><rect x="352.1" y="787.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="355.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.28%)</title><rect x="352.1" y="771.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="355.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.09%)</title><rect x="355.4" y="787.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="358.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.09%)</title><rect x="355.4" y="771.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="358.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.09%)</title><rect x="355.4" y="755.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="358.4" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="355.4" y="739.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="358.4" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="355.4" y="723.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="358.4" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="355.4" y="707.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="358.4" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="355.4" y="691.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="358.4" y="702.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="355.4" y="675.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="358.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.09%)</title><rect x="356.5" y="787.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="359.5" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="356.5" y="771.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="359.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (90 samples, 8.31%)</title><rect x="357.6" y="835.0" width="98.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="360.6" y="846.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.18%)</title><rect x="358.7" y="819.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="361.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.09%)</title><rect x="360.8" y="819.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="363.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.09%)</title><rect x="361.9" y="819.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="364.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (7 samples, 0.65%)</title><rect x="363.0" y="819.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="366.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.55%)</title><rect x="364.1" y="803.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="367.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (7 samples, 0.65%)</title><rect x="370.6" y="819.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="373.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.65%)</title><rect x="370.6" y="803.0" width="7.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="373.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.09%)</title><rect x="370.6" y="787.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="373.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.55%)</title><rect x="371.7" y="787.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="374.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.28%)</title><rect x="375.0" y="771.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="378.0" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="377.2" y="755.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="380.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.18%)</title><rect x="378.3" y="819.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="381.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.09%)</title><rect x="379.4" y="803.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="382.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (68 samples, 6.28%)</title><rect x="380.5" y="819.0" width="74.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="383.5" y="830.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (24 samples, 2.22%)</title><rect x="381.5" y="803.0" width="26.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="384.5" y="814.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.09%)</title><rect x="381.5" y="787.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="384.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.83%)</title><rect x="382.6" y="787.0" width="9.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="385.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.83%)</title><rect x="382.6" y="771.0" width="9.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="385.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.83%)</title><rect x="382.6" y="755.0" width="9.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="385.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (9 samples, 0.83%)</title><rect x="382.6" y="739.0" width="9.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="385.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.28%)</title><rect x="389.2" y="723.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="392.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (12 samples, 1.11%)</title><rect x="392.4" y="787.0" width="13.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="395.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (4 samples, 0.37%)</title><rect x="392.4" y="771.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="395.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (8 samples, 0.74%)</title><rect x="396.8" y="771.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="399.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (8 samples, 0.74%)</title><rect x="396.8" y="755.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="399.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (6 samples, 0.55%)</title><rect x="399.0" y="739.0" width="6.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="402.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (6 samples, 0.55%)</title><rect x="399.0" y="723.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="402.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="405.5" y="787.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="408.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="405.5" y="771.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="408.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.09%)</title><rect x="406.6" y="787.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="409.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 0.37%)</title><rect x="407.7" y="803.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="410.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (39 samples, 3.60%)</title><rect x="412.0" y="803.0" width="42.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="415.0" y="814.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (39 samples, 3.60%)</title><rect x="412.0" y="787.0" width="42.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="415.0" y="798.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (39 samples, 3.60%)</title><rect x="412.0" y="771.0" width="42.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="415.0" y="782.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 1.02%)</title><rect x="415.3" y="755.0" width="12.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="418.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.09%)</title><rect x="416.4" y="739.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="419.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.18%)</title><rect x="417.5" y="739.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="420.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.18%)</title><rect x="417.5" y="723.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="420.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.18%)</title><rect x="417.5" y="707.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="420.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.18%)</title><rect x="417.5" y="691.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="420.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.28%)</title><rect x="419.7" y="739.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="422.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.28%)</title><rect x="419.7" y="723.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="422.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.28%)</title><rect x="419.7" y="707.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="422.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.28%)</title><rect x="422.9" y="739.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="425.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.28%)</title><rect x="422.9" y="723.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="425.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.09%)</title><rect x="426.2" y="739.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="429.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 0.37%)</title><rect x="427.3" y="755.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="430.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.28%)</title><rect x="428.4" y="739.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="431.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.28%)</title><rect x="428.4" y="723.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="431.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.28%)</title><rect x="428.4" y="707.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="431.4" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.28%)</title><rect x="428.4" y="691.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="431.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.18%)</title><rect x="431.7" y="755.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="434.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (12 samples, 1.11%)</title><rect x="433.8" y="755.0" width="13.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="436.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (12 samples, 1.11%)</title><rect x="433.8" y="739.0" width="13.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="436.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (12 samples, 1.11%)</title><rect x="433.8" y="723.0" width="13.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="436.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (12 samples, 1.11%)</title><rect x="433.8" y="707.0" width="13.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="436.8" y="718.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (12 samples, 1.11%)</title><rect x="433.8" y="691.0" width="13.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="436.8" y="702.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.37%)</title><rect x="442.6" y="675.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="445.6" y="686.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (3 samples, 0.28%)</title><rect x="443.6" y="659.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="446.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.65%)</title><rect x="446.9" y="755.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="449.9" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.65%)</title><rect x="446.9" y="739.0" width="7.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="449.9" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.65%)</title><rect x="446.9" y="723.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="449.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.09%)</title><rect x="454.5" y="819.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="457.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (9 samples, 0.83%)</title><rect x="455.6" y="835.0" width="9.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="458.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (9 samples, 0.83%)</title><rect x="455.6" y="819.0" width="9.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="458.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (9 samples, 0.83%)</title><rect x="455.6" y="803.0" width="9.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="458.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (9 samples, 0.83%)</title><rect x="455.6" y="787.0" width="9.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="458.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.83%)</title><rect x="455.6" y="771.0" width="9.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="458.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (260 samples, 24.01%)</title><rect x="465.4" y="931.0" width="283.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="468.4" y="942.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (46 samples, 4.25%)</title><rect x="465.4" y="915.0" width="50.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="468.4" y="926.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 0.18%)</title><rect x="465.4" y="899.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="468.4" y="910.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (44 samples, 4.06%)</title><rect x="467.6" y="899.0" width="48.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="470.6" y="910.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (40 samples, 3.69%)</title><rect x="472.0" y="883.0" width="43.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="475.0" y="894.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.28%)</title><rect x="474.2" y="867.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="477.2" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.28%)</title><rect x="474.2" y="851.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="477.2" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.28%)</title><rect x="474.2" y="835.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="477.2" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.28%)</title><rect x="474.2" y="819.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="477.2" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.09%)</title><rect x="476.3" y="803.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="479.3" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (35 samples, 3.23%)</title><rect x="477.4" y="867.0" width="38.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="480.4" y="878.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (14 samples, 1.29%)</title><rect x="500.3" y="851.0" width="15.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="503.3" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (14 samples, 1.29%)</title><rect x="500.3" y="835.0" width="15.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="503.3" y="846.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.18%)</title><rect x="513.4" y="819.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="516.4" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.74%)</title><rect x="515.6" y="915.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="518.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.74%)</title><rect x="515.6" y="899.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="518.6" y="910.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (8 samples, 0.74%)</title><rect x="515.6" y="883.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="518.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (146 samples, 13.48%)</title><rect x="524.3" y="915.0" width="159.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="527.3" y="926.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (146 samples, 13.48%)</title><rect x="524.3" y="899.0" width="159.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="527.3" y="910.0">com/linecorp/decaton..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="534.1" y="883.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="537.1" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="534.1" y="867.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="537.1" y="878.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.09%)</title><rect x="534.1" y="851.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="537.1" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.46%)</title><rect x="535.2" y="883.0" width="5.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="538.2" y="894.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.37%)</title><rect x="536.3" y="867.0" width="4.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="539.3" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (53 samples, 4.89%)</title><rect x="540.6" y="883.0" width="57.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="543.6" y="894.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (52 samples, 4.80%)</title><rect x="541.7" y="867.0" width="56.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="544.7" y="878.0">java/l..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (41 samples, 3.79%)</title><rect x="550.4" y="851.0" width="44.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="553.4" y="862.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (18 samples, 1.66%)</title><rect x="561.3" y="835.0" width="19.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="564.3" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (18 samples, 1.66%)</title><rect x="561.3" y="819.0" width="19.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="564.3" y="830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (18 samples, 1.66%)</title><rect x="561.3" y="803.0" width="19.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="564.3" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (10 samples, 0.92%)</title><rect x="565.7" y="787.0" width="10.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="568.7" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.37%)</title><rect x="567.9" y="771.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="570.9" y="782.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="567.9" y="755.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="570.9" y="766.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="567.9" y="739.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="570.9" y="750.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="568.9" y="755.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="571.9" y="766.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.18%)</title><rect x="570.0" y="755.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="573.0" y="766.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.18%)</title><rect x="570.0" y="739.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="573.0" y="750.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="570.0" y="723.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="573.0" y="734.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="570.0" y="707.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="573.0" y="718.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.09%)</title><rect x="571.1" y="723.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="574.1" y="734.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.09%)</title><rect x="572.2" y="771.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="575.2" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.28%)</title><rect x="573.3" y="771.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="576.3" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.18%)</title><rect x="573.3" y="755.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="576.3" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="575.5" y="755.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="578.5" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.37%)</title><rect x="576.6" y="787.0" width="4.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="579.6" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.65%)</title><rect x="580.9" y="835.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="583.9" y="846.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.37%)</title><rect x="588.6" y="835.0" width="4.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="591.6" y="846.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="592.9" y="835.0" width="2.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="595.9" y="846.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.28%)</title><rect x="595.1" y="851.0" width="3.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="598.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.18%)</title><rect x="598.4" y="883.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="601.4" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.09%)</title><rect x="600.5" y="883.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="603.5" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="600.5" y="867.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="603.5" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.09%)</title><rect x="600.5" y="851.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="603.5" y="862.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="600.5" y="835.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="603.5" y="846.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.28%)</title><rect x="601.6" y="883.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="604.6" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 0.28%)</title><rect x="601.6" y="867.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="604.6" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.28%)</title><rect x="601.6" y="851.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="604.6" y="862.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (72 samples, 6.65%)</title><rect x="604.9" y="883.0" width="78.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="607.9" y="894.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (72 samples, 6.65%)</title><rect x="604.9" y="867.0" width="78.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="607.9" y="878.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.55%)</title><rect x="604.9" y="851.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="607.9" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.55%)</title><rect x="604.9" y="835.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="607.9" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.55%)</title><rect x="604.9" y="819.0" width="6.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="607.9" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.55%)</title><rect x="604.9" y="803.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="607.9" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.18%)</title><rect x="609.3" y="787.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="612.3" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="610.4" y="771.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="613.4" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (66 samples, 6.09%)</title><rect x="611.4" y="851.0" width="72.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="614.4" y="862.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (57 samples, 5.26%)</title><rect x="621.2" y="835.0" width="62.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="624.2" y="846.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (31 samples, 2.86%)</title><rect x="649.6" y="819.0" width="33.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="652.6" y="830.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.09%)</title><rect x="665.9" y="803.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="668.9" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (12 samples, 1.11%)</title><rect x="667.0" y="803.0" width="13.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="670.0" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="677.9" y="787.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="680.9" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.18%)</title><rect x="677.9" y="771.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="680.9" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.18%)</title><rect x="677.9" y="755.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="680.9" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.18%)</title><rect x="677.9" y="739.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="680.9" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.18%)</title><rect x="677.9" y="723.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="680.9" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (2 samples, 0.18%)</title><rect x="677.9" y="707.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="680.9" y="718.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="677.9" y="691.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="680.9" y="702.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.09%)</title><rect x="677.9" y="675.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="680.9" y="686.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.09%)</title><rect x="679.0" y="691.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="682.0" y="702.0"></text>
</g>
<g>
<title>Monitor::TrySpin(Thread*) (1 samples, 0.09%)</title><rect x="679.0" y="675.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="682.0" y="686.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.28%)</title><rect x="680.1" y="803.0" width="3.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="683.1" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (47 samples, 4.34%)</title><rect x="683.4" y="915.0" width="51.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="686.4" y="926.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (47 samples, 4.34%)</title><rect x="683.4" y="899.0" width="51.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="686.4" y="910.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1049560985.process (20 samples, 1.85%)</title><rect x="685.5" y="883.0" width="21.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="688.5" y="894.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (20 samples, 1.85%)</title><rect x="685.5" y="867.0" width="21.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="688.5" y="878.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (15 samples, 1.39%)</title><rect x="685.5" y="851.0" width="16.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="688.5" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="689.9" y="835.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="692.9" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="689.9" y="819.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="692.9" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.09%)</title><rect x="689.9" y="803.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="692.9" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="689.9" y="787.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="692.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.55%)</title><rect x="691.0" y="835.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="694.0" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.46%)</title><rect x="692.1" y="819.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="695.1" y="830.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.46%)</title><rect x="692.1" y="803.0" width="5.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="695.1" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (4 samples, 0.37%)</title><rect x="697.5" y="835.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="700.5" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (5 samples, 0.46%)</title><rect x="701.9" y="851.0" width="5.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="704.9" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.46%)</title><rect x="701.9" y="835.0" width="5.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="704.9" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.46%)</title><rect x="701.9" y="819.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="704.9" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.46%)</title><rect x="701.9" y="803.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="704.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (2 samples, 0.18%)</title><rect x="707.3" y="883.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="710.3" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (7 samples, 0.65%)</title><rect x="709.5" y="883.0" width="7.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="712.5" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (7 samples, 0.65%)</title><rect x="709.5" y="867.0" width="7.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="712.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/248567462.get$Lambda (7 samples, 0.65%)</title><rect x="709.5" y="851.0" width="7.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="712.5" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/248567462.&lt;init&gt; (7 samples, 0.65%)</title><rect x="709.5" y="835.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="712.5" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.83%)</title><rect x="717.1" y="883.0" width="9.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="720.1" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.55%)</title><rect x="720.4" y="867.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="723.4" y="878.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.37%)</title><rect x="720.4" y="851.0" width="4.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="723.4" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.18%)</title><rect x="724.8" y="851.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="727.8" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="726.9" y="883.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="729.9" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="726.9" y="867.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="729.9" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.55%)</title><rect x="728.0" y="883.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="731.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.20%)</title><rect x="734.6" y="915.0" width="14.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="737.6" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.37%)</title><rect x="740.0" y="899.0" width="4.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="743.0" y="910.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.37%)</title><rect x="740.0" y="883.0" width="4.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="743.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.37%)</title><rect x="744.4" y="899.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="747.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.18%)</title><rect x="746.5" y="883.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="749.5" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$266/1237613737.accept (2 samples, 0.18%)</title><rect x="746.5" y="867.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="749.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (2 samples, 0.18%)</title><rect x="746.5" y="851.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="749.5" y="862.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.18%)</title><rect x="746.5" y="835.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="749.5" y="846.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (2 samples, 0.18%)</title><rect x="746.5" y="819.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="749.5" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="747.6" y="803.0" width="1.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="750.6" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="747.6" y="787.0" width="1.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="750.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 1.02%)</title><rect x="748.7" y="931.0" width="12.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="751.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.92%)</title><rect x="749.8" y="915.0" width="10.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="752.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.55%)</title><rect x="754.2" y="899.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="757.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$267/2019304552.accept (6 samples, 0.55%)</title><rect x="754.2" y="883.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="757.2" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (6 samples, 0.55%)</title><rect x="754.2" y="867.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="757.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$259/657402371.complete (6 samples, 0.55%)</title><rect x="754.2" y="851.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="757.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (6 samples, 0.55%)</title><rect x="754.2" y="835.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="757.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (6 samples, 0.55%)</title><rect x="754.2" y="819.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="757.2" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (6 samples, 0.55%)</title><rect x="754.2" y="803.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="757.2" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (6 samples, 0.55%)</title><rect x="754.2" y="787.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="757.2" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (6 samples, 0.55%)</title><rect x="754.2" y="771.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="757.2" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (6 samples, 0.55%)</title><rect x="754.2" y="755.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="757.2" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.55%)</title><rect x="760.7" y="931.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="763.7" y="942.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.55%)</title><rect x="760.7" y="915.0" width="6.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="763.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.18%)</title><rect x="767.2" y="947.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="770.2" y="958.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.18%)</title><rect x="767.2" y="931.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="770.2" y="942.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.18%)</title><rect x="767.2" y="915.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="770.2" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="767.2" y="899.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="770.2" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.18%)</title><rect x="767.2" y="883.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="770.2" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.18%)</title><rect x="767.2" y="867.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="770.2" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.18%)</title><rect x="767.2" y="851.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="770.2" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="768.3" y="835.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="771.3" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="768.3" y="819.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="771.3" y="830.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="768.3" y="803.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="771.3" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="768.3" y="787.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="771.3" y="798.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="768.3" y="771.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="771.3" y="782.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.09%)</title><rect x="768.3" y="755.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="771.3" y="766.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.09%)</title><rect x="768.3" y="739.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="771.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (6 samples, 0.55%)</title><rect x="769.4" y="947.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="772.4" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.18%)</title><rect x="772.7" y="931.0" width="2.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="775.7" y="942.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="772.7" y="915.0" width="2.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="775.7" y="926.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="774.9" y="931.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="777.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.09%)</title><rect x="776.0" y="995.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="779.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="776.0" y="979.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="779.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="776.0" y="963.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="779.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (234 samples, 21.61%)</title><rect x="777.1" y="995.0" width="254.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="780.1" y="1006.0">java/util/concurrent/ThreadPoolExe..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (234 samples, 21.61%)</title><rect x="777.1" y="979.0" width="254.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="780.1" y="990.0">java/util/concurrent/LinkedBlockin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (208 samples, 19.21%)</title><rect x="778.1" y="963.0" width="226.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="781.1" y="974.0">java/util/concurrent/locks/Abs..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (28 samples, 2.59%)</title><rect x="794.5" y="947.0" width="30.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="797.5" y="958.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (28 samples, 2.59%)</title><rect x="794.5" y="931.0" width="30.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="797.5" y="942.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (28 samples, 2.59%)</title><rect x="794.5" y="915.0" width="30.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="797.5" y="926.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (165 samples, 15.24%)</title><rect x="825.0" y="947.0" width="179.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="828.0" y="958.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (160 samples, 14.77%)</title><rect x="830.4" y="931.0" width="174.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="833.4" y="942.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="835.9" y="915.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="838.9" y="926.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.09%)</title><rect x="837.0" y="915.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="840.0" y="926.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="838.1" y="915.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="841.1" y="926.0"></text>
</g>
<g>
<title>Unsafe_Park (150 samples, 13.85%)</title><rect x="839.2" y="915.0" width="163.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="842.2" y="926.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.37%)</title><rect x="841.3" y="899.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="844.3" y="910.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (29 samples, 2.68%)</title><rect x="845.7" y="899.0" width="31.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="848.7" y="910.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (10 samples, 0.92%)</title><rect x="857.7" y="883.0" width="10.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="860.7" y="894.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.46%)</title><rect x="861.0" y="867.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="864.0" y="878.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (5 samples, 0.46%)</title><rect x="861.0" y="851.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="864.0" y="862.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.18%)</title><rect x="866.4" y="867.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="869.4" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (8 samples, 0.74%)</title><rect x="868.6" y="883.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="871.6" y="894.0"></text>
</g>
<g>
<title>__lll_lock_wait (4 samples, 0.37%)</title><rect x="877.3" y="899.0" width="4.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="880.3" y="910.0"></text>
</g>
<g>
<title>__lll_unlock_wake (34 samples, 3.14%)</title><rect x="881.7" y="899.0" width="37.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="884.7" y="910.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (57 samples, 5.26%)</title><rect x="918.7" y="899.0" width="62.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="921.7" y="910.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.37%)</title><rect x="980.8" y="899.0" width="4.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="983.8" y="910.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (4 samples, 0.37%)</title><rect x="985.2" y="899.0" width="4.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="988.2" y="910.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.09%)</title><rect x="989.5" y="899.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="992.5" y="910.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.18%)</title><rect x="990.6" y="899.0" width="2.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="993.6" y="910.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="992.8" y="899.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="995.8" y="910.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (3 samples, 0.28%)</title><rect x="993.9" y="899.0" width="3.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="996.9" y="910.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="997.1" y="899.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1000.1" y="910.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.28%)</title><rect x="998.2" y="899.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1001.2" y="910.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="1001.5" y="899.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1004.5" y="910.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="1002.6" y="915.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1005.6" y="926.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1003.7" y="915.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1006.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (25 samples, 2.31%)</title><rect x="1004.8" y="963.0" width="27.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1007.8" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (25 samples, 2.31%)</title><rect x="1004.8" y="947.0" width="27.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1007.8" y="958.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (25 samples, 2.31%)</title><rect x="1004.8" y="931.0" width="27.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1007.8" y="942.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.09%)</title><rect x="1030.9" y="915.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1033.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1032.0" y="1043.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1035.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1032.0" y="1027.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1035.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1032.0" y="1011.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1035.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="1032.0" y="995.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1035.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.wakeup (1 samples, 0.09%)</title><rect x="1032.0" y="979.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1035.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.wakeup (1 samples, 0.09%)</title><rect x="1032.0" y="963.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1035.0" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (1 samples, 0.09%)</title><rect x="1032.0" y="947.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1035.0" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (1 samples, 0.09%)</title><rect x="1032.0" y="931.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1035.0" y="942.0"></text>
</g>
<g>
<title>start_thread (144 samples, 13.30%)</title><rect x="1033.1" y="1043.0" width="156.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1036.1" y="1054.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (144 samples, 13.30%)</title><rect x="1033.1" y="1027.0" width="156.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1036.1" y="1038.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 1.75%)</title><rect x="1033.1" y="1011.0" width="20.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1036.1" y="1022.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.28%)</title><rect x="1033.1" y="995.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.1" y="1006.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.28%)</title><rect x="1033.1" y="979.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1036.1" y="990.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.28%)</title><rect x="1033.1" y="963.0" width="3.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1036.1" y="974.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.48%)</title><rect x="1036.4" y="995.0" width="17.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1039.4" y="1006.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.37%)</title><rect x="1036.4" y="979.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1039.4" y="990.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1036.4" y="963.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1039.4" y="974.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.28%)</title><rect x="1037.5" y="963.0" width="3.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1040.5" y="974.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (8 samples, 0.74%)</title><rect x="1040.7" y="979.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1043.7" y="990.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="1041.8" y="963.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1044.8" y="974.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="1041.8" y="947.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1044.8" y="958.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="1041.8" y="931.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1044.8" y="942.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1041.8" y="915.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1044.8" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.46%)</title><rect x="1042.9" y="963.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1045.9" y="974.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.37%)</title><rect x="1042.9" y="947.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1045.9" y="958.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1047.3" y="947.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1050.3" y="958.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1047.3" y="931.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1050.3" y="942.0"></text>
</g>
<g>
<title>SubTasksDone::is_task_claimed(unsigned int) (1 samples, 0.09%)</title><rect x="1048.4" y="963.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1051.4" y="974.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.37%)</title><rect x="1049.4" y="979.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1052.4" y="990.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.37%)</title><rect x="1049.4" y="963.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1052.4" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.28%)</title><rect x="1049.4" y="947.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1052.4" y="958.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.28%)</title><rect x="1049.4" y="931.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1052.4" y="942.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.28%)</title><rect x="1049.4" y="915.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1052.4" y="926.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.28%)</title><rect x="1049.4" y="899.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1052.4" y="910.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.18%)</title><rect x="1050.5" y="883.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1053.5" y="894.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="1052.7" y="947.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1055.7" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.09%)</title><rect x="1052.7" y="931.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1055.7" y="942.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.09%)</title><rect x="1052.7" y="915.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1055.7" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="1052.7" y="899.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1055.7" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="1052.7" y="883.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1055.7" y="894.0"></text>
</g>
<g>
<title>JavaThread::run() (123 samples, 11.36%)</title><rect x="1053.8" y="1011.0" width="134.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1056.8" y="1022.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (123 samples, 11.36%)</title><rect x="1053.8" y="995.0" width="134.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1056.8" y="1006.0">JavaThread::threa..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (123 samples, 11.36%)</title><rect x="1053.8" y="979.0" width="134.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1056.8" y="990.0">CompileBroker::co..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (122 samples, 11.27%)</title><rect x="1053.8" y="963.0" width="132.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1056.8" y="974.0">CompileBroker::i..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (121 samples, 11.17%)</title><rect x="1053.8" y="947.0" width="131.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1056.8" y="958.0">C2Compiler::comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (121 samples, 11.17%)</title><rect x="1053.8" y="931.0" width="131.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1056.8" y="942.0">Compile::Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (50 samples, 4.62%)</title><rect x="1053.8" y="915.0" width="54.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1056.8" y="926.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.18%)</title><rect x="1053.8" y="899.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1056.8" y="910.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="1053.8" y="883.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1056.8" y="894.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.09%)</title><rect x="1053.8" y="867.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1056.8" y="878.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.09%)</title><rect x="1054.9" y="883.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1057.9" y="894.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.09%)</title><rect x="1054.9" y="867.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1057.9" y="878.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.46%)</title><rect x="1056.0" y="899.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1059.0" y="910.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.46%)</title><rect x="1056.0" y="883.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1059.0" y="894.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.18%)</title><rect x="1057.1" y="867.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1060.1" y="878.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.09%)</title><rect x="1059.3" y="867.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1062.3" y="878.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1060.3" y="867.0" width="1.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1063.3" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.09%)</title><rect x="1061.4" y="899.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1064.4" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.09%)</title><rect x="1061.4" y="883.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1064.4" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.09%)</title><rect x="1062.5" y="899.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1065.5" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.09%)</title><rect x="1062.5" y="883.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1065.5" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1062.5" y="867.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1065.5" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (41 samples, 3.79%)</title><rect x="1063.6" y="899.0" width="44.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1066.6" y="910.0">Phas..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.18%)</title><rect x="1063.6" y="883.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.6" y="894.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.09%)</title><rect x="1065.8" y="883.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1068.8" y="894.0"></text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.09%)</title><rect x="1066.9" y="883.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1069.9" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.18%)</title><rect x="1068.0" y="883.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1071.0" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1068.0" y="867.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1071.0" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.09%)</title><rect x="1069.1" y="867.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1072.1" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.09%)</title><rect x="1070.1" y="883.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1073.1" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.09%)</title><rect x="1070.1" y="867.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1073.1" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 0.65%)</title><rect x="1071.2" y="883.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1074.2" y="894.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.09%)</title><rect x="1075.6" y="867.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1078.6" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.09%)</title><rect x="1076.7" y="867.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1079.7" y="878.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.09%)</title><rect x="1076.7" y="851.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1079.7" y="862.0"></text>
</g>
<g>
<title>checkCastPPNode::rule() const (1 samples, 0.09%)</title><rect x="1077.8" y="867.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1080.8" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.74%)</title><rect x="1078.9" y="883.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1081.9" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.28%)</title><rect x="1084.3" y="867.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1087.3" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1086.5" y="851.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1089.5" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1087.6" y="883.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1090.6" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.46%)</title><rect x="1088.7" y="883.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1091.7" y="894.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.18%)</title><rect x="1089.8" y="867.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1092.8" y="878.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.09%)</title><rect x="1091.9" y="867.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1094.9" y="878.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.09%)</title><rect x="1093.0" y="867.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1096.0" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.18%)</title><rect x="1094.1" y="883.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.1" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1095.2" y="867.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1098.2" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1095.2" y="851.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1098.2" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (2 samples, 0.18%)</title><rect x="1096.3" y="883.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1099.3" y="894.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1097.4" y="867.0" width="1.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1100.4" y="878.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.18%)</title><rect x="1098.5" y="883.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1101.5" y="894.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.18%)</title><rect x="1098.5" y="867.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1101.5" y="878.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.18%)</title><rect x="1098.5" y="851.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1101.5" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.09%)</title><rect x="1098.5" y="835.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1101.5" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1098.5" y="819.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.5" y="830.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1099.6" y="835.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1102.6" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.09%)</title><rect x="1100.7" y="883.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1103.7" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1100.7" y="867.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.7" y="878.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.37%)</title><rect x="1101.7" y="883.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1104.7" y="894.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1103.9" y="867.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1106.9" y="878.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1105.0" y="867.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.0" y="878.0"></text>
</g>
<g>
<title>rFlagsRegOper::type() const (1 samples, 0.09%)</title><rect x="1106.1" y="883.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1109.1" y="894.0"></text>
</g>
<g>
<title>shrL_rReg_immNode::two_adr() const (1 samples, 0.09%)</title><rect x="1107.2" y="883.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.2" y="894.0"></text>
</g>
<g>
<title>Compile::Optimize() (60 samples, 5.54%)</title><rect x="1108.3" y="915.0" width="65.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.3" y="926.0">Compile..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.09%)</title><rect x="1108.3" y="899.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.3" y="910.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.09%)</title><rect x="1108.3" y="883.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1111.3" y="894.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.09%)</title><rect x="1108.3" y="867.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.3" y="878.0"></text>
</g>
<g>
<title>Node::subsume_by(Node*, Compile*) (1 samples, 0.09%)</title><rect x="1108.3" y="851.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.3" y="862.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.09%)</title><rect x="1108.3" y="835.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1111.3" y="846.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="1109.4" y="899.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1112.4" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1109.4" y="883.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1112.4" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1109.4" y="867.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.4" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.28%)</title><rect x="1110.5" y="899.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1113.5" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.28%)</title><rect x="1110.5" y="883.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1113.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1111.6" y="867.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1111.6" y="851.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1112.6" y="867.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1115.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1112.6" y="851.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1115.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1112.6" y="835.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1115.6" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1112.6" y="819.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1115.6" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1112.6" y="803.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1115.6" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1112.6" y="787.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1115.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1112.6" y="771.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1115.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1112.6" y="755.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1112.6" y="739.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1112.6" y="723.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1112.6" y="707.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1115.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1112.6" y="691.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1115.6" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1112.6" y="675.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1115.6" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1112.6" y="659.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1115.6" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1112.6" y="643.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.6" y="654.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.18%)</title><rect x="1113.7" y="899.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.7" y="910.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.18%)</title><rect x="1115.9" y="899.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.9" y="910.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.18%)</title><rect x="1115.9" y="883.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1118.9" y="894.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (2 samples, 0.18%)</title><rect x="1115.9" y="867.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1118.9" y="878.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1115.9" y="851.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1118.9" y="862.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1115.9" y="835.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.9" y="846.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1115.9" y="819.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.9" y="830.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1115.9" y="803.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.9" y="814.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.09%)</title><rect x="1115.9" y="787.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1118.9" y="798.0"></text>
</g>
<g>
<title>TypeNarrowPtr::singleton() const (1 samples, 0.09%)</title><rect x="1117.0" y="851.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1120.0" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (33 samples, 3.05%)</title><rect x="1118.1" y="899.0" width="35.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.1" y="910.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.18%)</title><rect x="1118.1" y="883.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.1" y="894.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.09%)</title><rect x="1119.2" y="867.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.2" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.18%)</title><rect x="1120.3" y="883.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1123.3" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1121.4" y="867.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.4" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (22 samples, 2.03%)</title><rect x="1122.4" y="883.0" width="24.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.4" y="894.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (20 samples, 1.85%)</title><rect x="1124.6" y="867.0" width="21.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.6" y="878.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (17 samples, 1.57%)</title><rect x="1127.9" y="851.0" width="18.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.9" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1138.8" y="835.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.8" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1138.8" y="819.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.8" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1138.8" y="803.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.8" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 0.55%)</title><rect x="1139.9" y="835.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.9" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.09%)</title><rect x="1146.4" y="883.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.4" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (5 samples, 0.46%)</title><rect x="1147.5" y="883.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.5" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (4 samples, 0.37%)</title><rect x="1147.5" y="867.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.5" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.09%)</title><rect x="1147.5" y="851.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.5" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (2 samples, 0.18%)</title><rect x="1148.6" y="851.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.6" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::is_member(IdealLoopTree const*) const (1 samples, 0.09%)</title><rect x="1148.6" y="835.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.6" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1149.7" y="835.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.7" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.09%)</title><rect x="1150.8" y="851.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.8" y="862.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1150.8" y="835.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.8" y="846.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1150.8" y="819.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.8" y="830.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1150.8" y="803.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.8" y="814.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1150.8" y="787.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.8" y="798.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.09%)</title><rect x="1151.9" y="867.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.9" y="878.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1151.9" y="851.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.9" y="862.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1151.9" y="835.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.9" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1153.0" y="883.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.0" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1153.0" y="867.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.0" y="878.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1153.0" y="851.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.0" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (17 samples, 1.57%)</title><rect x="1154.0" y="899.0" width="18.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.0" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1154.0" y="883.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.0" y="894.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.09%)</title><rect x="1154.0" y="867.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.0" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (16 samples, 1.48%)</title><rect x="1155.1" y="883.0" width="17.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.1" y="894.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (5 samples, 0.46%)</title><rect x="1155.1" y="867.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.1" y="878.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1155.1" y="851.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.1" y="862.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.09%)</title><rect x="1155.1" y="835.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.1" y="846.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1155.1" y="819.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.1" y="830.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.09%)</title><rect x="1155.1" y="803.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.1" y="814.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1155.1" y="787.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.1" y="798.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1155.1" y="771.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.1" y="782.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (4 samples, 0.37%)</title><rect x="1156.2" y="851.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.2" y="862.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (4 samples, 0.37%)</title><rect x="1156.2" y="835.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.2" y="846.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (4 samples, 0.37%)</title><rect x="1156.2" y="819.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.2" y="830.0"></text>
</g>
<g>
<title>MultiNode::proj_out(unsigned int) const (1 samples, 0.09%)</title><rect x="1160.6" y="867.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.6" y="878.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.18%)</title><rect x="1161.7" y="867.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.7" y="878.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1162.8" y="851.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.8" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1163.9" y="867.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.9" y="878.0"></text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.09%)</title><rect x="1163.9" y="851.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.9" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.18%)</title><rect x="1164.9" y="867.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.9" y="878.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1166.0" y="851.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.0" y="862.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1166.0" y="835.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.0" y="846.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.18%)</title><rect x="1167.1" y="867.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.1" y="878.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.09%)</title><rect x="1168.2" y="851.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.2" y="862.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1169.3" y="867.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.3" y="878.0"></text>
</g>
<g>
<title>PhiNode::is_diamond_phi(bool) const (1 samples, 0.09%)</title><rect x="1169.3" y="851.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.3" y="862.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1170.4" y="867.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.4" y="878.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.09%)</title><rect x="1170.4" y="851.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.4" y="862.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.09%)</title><rect x="1170.4" y="835.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.4" y="846.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.09%)</title><rect x="1170.4" y="819.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.4" y="830.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1171.5" y="867.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.5" y="878.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.09%)</title><rect x="1171.5" y="851.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.5" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.5" y="835.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.5" y="846.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1171.5" y="819.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.5" y="830.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1171.5" y="803.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.5" y="814.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.09%)</title><rect x="1172.6" y="899.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.6" y="910.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.09%)</title><rect x="1172.6" y="883.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.6" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1172.6" y="867.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.6" y="878.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1172.6" y="851.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.6" y="862.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1172.6" y="835.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.6" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.92%)</title><rect x="1173.7" y="915.0" width="10.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.7" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.92%)</title><rect x="1173.7" y="899.0" width="10.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.92%)</title><rect x="1173.7" y="883.0" width="10.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.92%)</title><rect x="1173.7" y="867.0" width="10.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.92%)</title><rect x="1173.7" y="851.0" width="10.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.92%)</title><rect x="1173.7" y="835.0" width="10.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.7" y="846.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1173.7" y="819.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.7" y="830.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1173.7" y="803.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.7" y="814.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1173.7" y="787.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.7" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1173.7" y="771.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.7" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1173.7" y="755.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.7" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1173.7" y="739.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.7" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1173.7" y="723.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.7" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1173.7" y="707.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.7" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1173.7" y="691.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.7" y="702.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1173.7" y="675.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.7" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1173.7" y="659.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.7" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1173.7" y="643.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.7" y="654.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1173.7" y="627.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.7" y="638.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.09%)</title><rect x="1173.7" y="611.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.7" y="622.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.09%)</title><rect x="1173.7" y="595.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.7" y="606.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1173.7" y="579.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.7" y="590.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1173.7" y="563.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.7" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.09%)</title><rect x="1173.7" y="547.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.7" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.09%)</title><rect x="1173.7" y="531.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.65%)</title><rect x="1174.7" y="819.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.7" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.65%)</title><rect x="1174.7" y="803.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.65%)</title><rect x="1174.7" y="787.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.65%)</title><rect x="1174.7" y="771.0" width="7.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.65%)</title><rect x="1174.7" y="755.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.65%)</title><rect x="1174.7" y="739.0" width="7.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.7" y="750.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (2 samples, 0.18%)</title><rect x="1174.7" y="723.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.7" y="734.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (2 samples, 0.18%)</title><rect x="1174.7" y="707.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.7" y="718.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1174.7" y="691.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.7" y="702.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1174.7" y="675.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.7" y="686.0"></text>
</g>
<g>
<title>TypeTuple::make_range(ciSignature*) (1 samples, 0.09%)</title><rect x="1175.8" y="691.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.8" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.46%)</title><rect x="1176.9" y="723.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.9" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.46%)</title><rect x="1176.9" y="707.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.46%)</title><rect x="1176.9" y="691.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.46%)</title><rect x="1176.9" y="675.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.46%)</title><rect x="1176.9" y="659.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="670.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.09%)</title><rect x="1176.9" y="643.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.9" y="654.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.09%)</title><rect x="1176.9" y="627.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.9" y="638.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1176.9" y="611.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.9" y="622.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.09%)</title><rect x="1176.9" y="595.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.9" y="606.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.09%)</title><rect x="1176.9" y="579.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.9" y="590.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.09%)</title><rect x="1176.9" y="563.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="574.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.09%)</title><rect x="1176.9" y="547.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.37%)</title><rect x="1178.0" y="643.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.28%)</title><rect x="1178.0" y="627.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.28%)</title><rect x="1178.0" y="611.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.28%)</title><rect x="1178.0" y="595.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.28%)</title><rect x="1178.0" y="579.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.28%)</title><rect x="1178.0" y="563.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1178.0" y="547.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1178.0" y="531.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1178.0" y="515.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1178.0" y="499.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1178.0" y="483.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1178.0" y="467.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1178.0" y="451.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.0" y="462.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1178.0" y="435.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.0" y="446.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.09%)</title><rect x="1178.0" y="419.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.0" y="430.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.09%)</title><rect x="1178.0" y="403.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.0" y="414.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1178.0" y="387.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.0" y="398.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1178.0" y="371.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.0" y="382.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1178.0" y="355.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.0" y="366.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.09%)</title><rect x="1178.0" y="339.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.0" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.1" y="435.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.1" y="419.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.1" y="403.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.1" y="387.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.1" y="371.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.1" y="355.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.1" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.1" y="339.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.1" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.1" y="323.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.1" y="307.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.1" y="291.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.1" y="275.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.1" y="259.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.1" y="243.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.1" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.1" y="227.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.1" y="211.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.1" y="195.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.1" y="179.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1179.1" y="163.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1179.1" y="147.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.1" y="158.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1179.1" y="131.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.1" y="142.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.09%)</title><rect x="1179.1" y="115.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.1" y="126.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1179.1" y="99.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.1" y="110.0"></text>
</g>
<g>
<title>URShiftLNode::Opcode() const (1 samples, 0.09%)</title><rect x="1179.1" y="83.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.1" y="94.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.09%)</title><rect x="1180.2" y="547.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.2" y="558.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.09%)</title><rect x="1180.2" y="531.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.2" y="542.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.09%)</title><rect x="1180.2" y="515.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.2" y="526.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1180.2" y="499.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.2" y="510.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1180.2" y="483.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.2" y="494.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1180.2" y="467.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.2" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.3" y="627.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.3" y="611.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.3" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.3" y="595.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.3" y="579.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.3" y="563.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.3" y="547.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.3" y="531.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.3" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.3" y="515.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.3" y="499.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.3" y="483.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.3" y="467.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.3" y="451.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.3" y="435.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.3" y="419.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.3" y="403.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.3" y="387.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.3" y="371.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.3" y="355.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.3" y="339.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.3" y="323.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.3" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.3" y="307.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.3" y="291.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.3" y="275.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.3" y="259.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.3" y="243.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.3" y="227.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.3" y="211.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.3" y="195.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.3" y="179.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.3" y="163.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1181.3" y="147.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1181.3" y="131.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.3" y="142.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1181.3" y="115.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="126.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.09%)</title><rect x="1181.3" y="99.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="110.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.09%)</title><rect x="1181.3" y="83.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="94.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.09%)</title><rect x="1181.3" y="67.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="78.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.09%)</title><rect x="1181.3" y="51.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.3" y="62.0"></text>
</g>
<g>
<title>MergeMemNode::set_base_memory(Node*) (1 samples, 0.09%)</title><rect x="1181.3" y="35.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.3" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.4" y="819.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.4" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.4" y="803.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.4" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.4" y="787.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.4" y="771.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.4" y="755.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.4" y="739.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.4" y="723.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.4" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.4" y="707.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.4" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.4" y="691.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.4" y="675.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.4" y="659.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.4" y="643.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.09%)</title><rect x="1182.4" y="627.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.4" y="638.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.09%)</title><rect x="1182.4" y="611.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.4" y="622.0"></text>
</g>
<g>
<title>GraphKit::null_check_oop(Node*, Node**, bool, bool) (1 samples, 0.09%)</title><rect x="1182.4" y="595.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.4" y="606.0"></text>
</g>
<g>
<title>MergeMemNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1182.4" y="579.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.4" y="590.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1183.5" y="819.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.5" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1183.5" y="803.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.5" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1183.5" y="787.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.5" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1183.5" y="771.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.5" y="782.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1183.5" y="755.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.5" y="766.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1184.6" y="915.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.6" y="926.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1184.6" y="899.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.6" y="910.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1185.6" y="947.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.6" y="958.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1185.6" y="931.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.6" y="942.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1185.6" y="915.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.6" y="926.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1185.6" y="899.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.6" y="910.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.09%)</title><rect x="1185.6" y="883.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.6" y="894.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.09%)</title><rect x="1185.6" y="867.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.6" y="878.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.09%)</title><rect x="1185.6" y="851.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.6" y="862.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.09%)</title><rect x="1185.6" y="835.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.6" y="846.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.09%)</title><rect x="1185.6" y="819.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.6" y="830.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.09%)</title><rect x="1186.7" y="963.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.7" y="974.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.09%)</title><rect x="1186.7" y="947.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.7" y="958.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.09%)</title><rect x="1186.7" y="931.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.7" y="942.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.09%)</title><rect x="1186.7" y="915.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.7" y="926.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="1186.7" y="899.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.7" y="910.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.18%)</title><rect x="1187.8" y="1011.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.8" y="1022.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.18%)</title><rect x="1187.8" y="995.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.8" y="1006.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.09%)</title><rect x="1187.8" y="979.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.8" y="990.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (1 samples, 0.09%)</title><rect x="1188.9" y="979.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.9" y="990.0"></text>
</g>
</g>
</svg>
