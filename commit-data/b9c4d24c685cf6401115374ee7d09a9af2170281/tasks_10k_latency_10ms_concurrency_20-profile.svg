<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (135 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="2035.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="2019.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="2003.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1987.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1971.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1955.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1939.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1923.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1907.0" width="8.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1891.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1875.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1859.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1843.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1827.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1811.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1795.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1779.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1763.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1747.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1731.0" width="8.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1715.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1699.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1683.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1667.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1651.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1635.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1619.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1603.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1587.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1571.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1555.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1539.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1523.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1507.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1491.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1475.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1459.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1443.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1427.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1411.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1395.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1379.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1363.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1347.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1331.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1315.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1299.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1283.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1267.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1251.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1235.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1219.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1203.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1187.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1171.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1155.0" width="8.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1139.0" width="8.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1123.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1107.0" width="8.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1091.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1075.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1059.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1043.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1027.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="1011.0" width="8.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="995.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="979.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="963.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="947.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="931.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="915.0" width="8.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="899.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="883.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="867.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="851.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="835.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="819.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="803.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="787.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="771.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="755.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="739.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="723.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="707.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="691.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="675.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="659.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="643.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="627.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="611.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="595.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="579.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="563.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="547.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="531.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="515.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="499.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="483.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="467.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="451.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="435.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="419.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="403.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="387.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="371.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="355.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="339.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="323.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="307.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="291.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="275.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="259.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="243.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="227.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="211.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="195.0" width="8.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="179.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="163.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="147.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="131.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="115.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="99.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="83.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="67.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="51.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="10.0" y="35.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (4 samples, 2.96%)</title><rect x="18.7" y="2035.0" width="35.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="21.7" y="2046.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (4 samples, 2.96%)</title><rect x="18.7" y="2019.0" width="35.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.7" y="2030.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.74%)</title><rect x="18.7" y="2003.0" width="8.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="21.7" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.74%)</title><rect x="18.7" y="1987.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.7" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/766764695.accept (1 samples, 0.74%)</title><rect x="18.7" y="1971.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.7" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.74%)</title><rect x="18.7" y="1955.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="21.7" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.74%)</title><rect x="18.7" y="1939.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.7" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.74%)</title><rect x="18.7" y="1923.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.7" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.74%)</title><rect x="27.5" y="2003.0" width="8.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.5" y="2014.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.74%)</title><rect x="27.5" y="1987.0" width="8.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="30.5" y="1998.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.74%)</title><rect x="27.5" y="1971.0" width="8.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="30.5" y="1982.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 1.48%)</title><rect x="36.2" y="2003.0" width="17.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.2" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/1586794632.accept (1 samples, 0.74%)</title><rect x="36.2" y="1987.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="39.2" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (1 samples, 0.74%)</title><rect x="36.2" y="1971.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.2" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 0.74%)</title><rect x="36.2" y="1955.0" width="8.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="39.2" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 0.74%)</title><rect x="36.2" y="1939.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="39.2" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 0.74%)</title><rect x="36.2" y="1923.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.2" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.74%)</title><rect x="36.2" y="1907.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="39.2" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.74%)</title><rect x="36.2" y="1891.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="39.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.74%)</title><rect x="45.0" y="1987.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="48.0" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.74%)</title><rect x="45.0" y="1971.0" width="8.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="48.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.74%)</title><rect x="45.0" y="1955.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="48.0" y="1966.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.74%)</title><rect x="45.0" y="1939.0" width="8.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="48.0" y="1950.0"></text>
</g>
<g>
<title>start_thread (130 samples, 96.30%)</title><rect x="53.7" y="2035.0" width="1136.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="56.7" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (130 samples, 96.30%)</title><rect x="53.7" y="2019.0" width="1136.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="56.7" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.74%)</title><rect x="53.7" y="2003.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="56.7" y="2014.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.74%)</title><rect x="53.7" y="1987.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="56.7" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.74%)</title><rect x="53.7" y="1971.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="56.7" y="1982.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.74%)</title><rect x="53.7" y="1955.0" width="8.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="56.7" y="1966.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (129 samples, 95.56%)</title><rect x="62.4" y="2003.0" width="1127.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="65.4" y="2014.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (129 samples, 95.56%)</title><rect x="62.4" y="1987.0" width="1127.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="65.4" y="1998.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (129 samples, 95.56%)</title><rect x="62.4" y="1971.0" width="1127.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="65.4" y="1982.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (127 samples, 94.07%)</title><rect x="62.4" y="1955.0" width="1110.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="65.4" y="1966.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (127 samples, 94.07%)</title><rect x="62.4" y="1939.0" width="1110.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="65.4" y="1950.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (61 samples, 45.19%)</title><rect x="62.4" y="1923.0" width="533.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="65.4" y="1934.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.74%)</title><rect x="62.4" y="1907.0" width="8.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="65.4" y="1918.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.74%)</title><rect x="62.4" y="1891.0" width="8.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="65.4" y="1902.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 2.22%)</title><rect x="71.2" y="1907.0" width="26.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="74.2" y="1918.0">C..</text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 1.48%)</title><rect x="71.2" y="1891.0" width="17.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="74.2" y="1902.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.74%)</title><rect x="71.2" y="1875.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="74.2" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.74%)</title><rect x="79.9" y="1875.0" width="8.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="82.9" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.74%)</title><rect x="79.9" y="1859.0" width="8.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="82.9" y="1870.0"></text>
</g>
<g>
<title>jmpDir_shortNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.74%)</title><rect x="88.7" y="1891.0" width="8.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="91.7" y="1902.0"></text>
</g>
<g>
<title>Assembler::jmpb(Label&amp;) (1 samples, 0.74%)</title><rect x="88.7" y="1875.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="91.7" y="1886.0"></text>
</g>
<g>
<title>Label::add_patch_at(CodeBuffer*, int) (1 samples, 0.74%)</title><rect x="88.7" y="1859.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="91.7" y="1870.0"></text>
</g>
<g>
<title>CodeBuffer::create_patch_overflow() (1 samples, 0.74%)</title><rect x="88.7" y="1843.0" width="8.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="91.7" y="1854.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.74%)</title><rect x="97.4" y="1907.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="100.4" y="1918.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 4.44%)</title><rect x="106.1" y="1907.0" width="52.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="109.1" y="1918.0">Match..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 4.44%)</title><rect x="106.1" y="1891.0" width="52.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="109.1" y="1902.0">Match..</text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 2.22%)</title><rect x="114.9" y="1875.0" width="26.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="117.9" y="1886.0">A..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.48%)</title><rect x="141.1" y="1875.0" width="17.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="144.1" y="1886.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.74%)</title><rect x="158.6" y="1907.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="161.6" y="1918.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.74%)</title><rect x="158.6" y="1891.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="161.6" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 2.22%)</title><rect x="167.3" y="1907.0" width="26.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="170.3" y="1918.0">P..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 2.22%)</title><rect x="167.3" y="1891.0" width="26.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="170.3" y="1902.0">P..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.74%)</title><rect x="167.3" y="1875.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="170.3" y="1886.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.74%)</title><rect x="167.3" y="1859.0" width="8.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="170.3" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 1.48%)</title><rect x="176.1" y="1875.0" width="17.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="179.1" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (46 samples, 34.07%)</title><rect x="193.6" y="1907.0" width="402.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="196.6" y="1918.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.74%)</title><rect x="193.6" y="1891.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="196.6" y="1902.0"></text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.74%)</title><rect x="202.3" y="1891.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="205.3" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 2.22%)</title><rect x="211.0" y="1891.0" width="26.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="214.0" y="1902.0">P..</text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 2.22%)</title><rect x="211.0" y="1875.0" width="26.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="214.0" y="1886.0">P..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.74%)</title><rect x="211.0" y="1859.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="214.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.48%)</title><rect x="219.8" y="1859.0" width="17.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="222.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 2.22%)</title><rect x="237.3" y="1891.0" width="26.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="240.3" y="1902.0">P..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.74%)</title><rect x="254.7" y="1875.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="257.7" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 3.70%)</title><rect x="263.5" y="1891.0" width="43.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="266.5" y="1902.0">Phas..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.74%)</title><rect x="281.0" y="1875.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="284.0" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.74%)</title><rect x="289.7" y="1875.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="292.7" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.74%)</title><rect x="289.7" y="1859.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="292.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.74%)</title><rect x="298.4" y="1875.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="301.4" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 7.41%)</title><rect x="307.2" y="1891.0" width="87.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="310.2" y="1902.0">PhaseChait..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.74%)</title><rect x="315.9" y="1875.0" width="8.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="318.9" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.48%)</title><rect x="324.7" y="1875.0" width="17.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="327.7" y="1886.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.74%)</title><rect x="342.1" y="1875.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="345.1" y="1886.0"></text>
</g>
<g>
<title>rFlagsRegUOper::type() const (1 samples, 0.74%)</title><rect x="342.1" y="1859.0" width="8.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="345.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 3.70%)</title><rect x="350.9" y="1875.0" width="43.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="353.9" y="1886.0">Phas..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 2.22%)</title><rect x="368.4" y="1859.0" width="26.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="371.4" y="1870.0">I..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.74%)</title><rect x="394.6" y="1891.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="397.6" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.74%)</title><rect x="394.6" y="1875.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="397.6" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.74%)</title><rect x="403.3" y="1891.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="406.3" y="1902.0"></text>
</g>
<g>
<title>loadConUL32Node::bottom_type() const (1 samples, 0.74%)</title><rect x="403.3" y="1875.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="406.3" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (4 samples, 2.96%)</title><rect x="412.1" y="1891.0" width="34.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="415.1" y="1902.0">Ph..</text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.74%)</title><rect x="429.6" y="1875.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="432.6" y="1886.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.74%)</title><rect x="438.3" y="1875.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="441.3" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 2.22%)</title><rect x="447.0" y="1891.0" width="26.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="450.0" y="1902.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.74%)</title><rect x="464.5" y="1875.0" width="8.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="467.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 1.48%)</title><rect x="473.3" y="1891.0" width="17.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="476.3" y="1902.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.74%)</title><rect x="482.0" y="1875.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="485.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 2.22%)</title><rect x="490.7" y="1891.0" width="26.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="493.7" y="1902.0">P..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.74%)</title><rect x="490.7" y="1875.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="493.7" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.74%)</title><rect x="499.5" y="1875.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="502.5" y="1886.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.74%)</title><rect x="508.2" y="1875.0" width="8.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="511.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.74%)</title><rect x="517.0" y="1891.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="520.0" y="1902.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.74%)</title><rect x="517.0" y="1875.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="520.0" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (8 samples, 5.93%)</title><rect x="525.7" y="1891.0" width="69.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="528.7" y="1902.0">PhaseLi..</text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.74%)</title><rect x="569.4" y="1875.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="572.4" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.74%)</title><rect x="578.1" y="1875.0" width="8.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="581.1" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.74%)</title><rect x="578.1" y="1859.0" width="8.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="581.1" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.74%)</title><rect x="586.9" y="1875.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="589.9" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (58 samples, 42.96%)</title><rect x="595.6" y="1923.0" width="507.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="598.6" y="1934.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.74%)</title><rect x="595.6" y="1907.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="598.6" y="1918.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.74%)</title><rect x="595.6" y="1891.0" width="8.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="598.6" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.74%)</title><rect x="595.6" y="1875.0" width="8.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="598.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.74%)</title><rect x="595.6" y="1859.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="598.6" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 1.48%)</title><rect x="604.4" y="1907.0" width="17.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="607.4" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 1.48%)</title><rect x="604.4" y="1891.0" width="17.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="607.4" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 1.48%)</title><rect x="604.4" y="1875.0" width="17.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="607.4" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 1.48%)</title><rect x="604.4" y="1859.0" width="17.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="607.4" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 1.48%)</title><rect x="604.4" y="1843.0" width="17.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="607.4" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.74%)</title><rect x="604.4" y="1827.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="607.4" y="1838.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.74%)</title><rect x="604.4" y="1811.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="607.4" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="613.1" y="1827.0" width="8.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="616.1" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="613.1" y="1811.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="616.1" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="613.1" y="1795.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="616.1" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="613.1" y="1779.0" width="8.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="616.1" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="613.1" y="1763.0" width="8.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="616.1" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="613.1" y="1747.0" width="8.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="616.1" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="613.1" y="1731.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="616.1" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="613.1" y="1715.0" width="8.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="616.1" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="613.1" y="1699.0" width="8.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="616.1" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="613.1" y="1683.0" width="8.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="616.1" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="613.1" y="1667.0" width="8.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="616.1" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="613.1" y="1651.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="616.1" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="613.1" y="1635.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="616.1" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="613.1" y="1619.0" width="8.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="616.1" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.74%)</title><rect x="613.1" y="1603.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="616.1" y="1614.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.74%)</title><rect x="613.1" y="1587.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="616.1" y="1598.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.74%)</title><rect x="621.9" y="1907.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="624.9" y="1918.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (48 samples, 35.56%)</title><rect x="630.6" y="1907.0" width="419.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="633.6" y="1918.0">PhaseIdealLoop::build_and_optimize(bool, bool)</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.74%)</title><rect x="630.6" y="1891.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="633.6" y="1902.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.74%)</title><rect x="630.6" y="1875.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="633.6" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.74%)</title><rect x="630.6" y="1859.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="633.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*) (1 samples, 0.74%)</title><rect x="630.6" y="1843.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="633.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.74%)</title><rect x="630.6" y="1827.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="633.6" y="1838.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.74%)</title><rect x="630.6" y="1811.0" width="8.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="633.6" y="1822.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.74%)</title><rect x="639.3" y="1891.0" width="8.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="642.3" y="1902.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.74%)</title><rect x="639.3" y="1875.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="642.3" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.74%)</title><rect x="639.3" y="1859.0" width="8.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="642.3" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.74%)</title><rect x="639.3" y="1843.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="642.3" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.74%)</title><rect x="639.3" y="1827.0" width="8.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="642.3" y="1838.0"></text>
</g>
<g>
<title>LoopNode::is_valid_counted_loop() const (1 samples, 0.74%)</title><rect x="639.3" y="1811.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="642.3" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 2.96%)</title><rect x="648.1" y="1891.0" width="34.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="651.1" y="1902.0">Ph..</text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.74%)</title><rect x="674.3" y="1875.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="677.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.48%)</title><rect x="683.0" y="1891.0" width="17.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="686.0" y="1902.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (35 samples, 25.93%)</title><rect x="700.5" y="1891.0" width="305.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="703.5" y="1902.0">PhaseIdealLoop::build_loop_late(VectorSet..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (32 samples, 23.70%)</title><rect x="726.7" y="1875.0" width="279.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="729.7" y="1886.0">PhaseIdealLoop::build_loop_late_post(..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (32 samples, 23.70%)</title><rect x="726.7" y="1859.0" width="279.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="729.7" y="1870.0">PhaseIdealLoop::get_late_ctrl(Node*, ..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (30 samples, 22.22%)</title><rect x="744.2" y="1843.0" width="262.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="747.2" y="1854.0">PhaseIdealLoop::is_dominator(Node*,..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 1.48%)</title><rect x="1006.4" y="1891.0" width="17.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1009.4" y="1902.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.74%)</title><rect x="1015.2" y="1875.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1018.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 1.48%)</title><rect x="1023.9" y="1891.0" width="17.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1026.9" y="1902.0"></text>
</g>
<g>
<title>StoreNNode::Opcode() const (1 samples, 0.74%)</title><rect x="1032.7" y="1875.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1035.7" y="1886.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.74%)</title><rect x="1041.4" y="1891.0" width="8.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1044.4" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 2.96%)</title><rect x="1050.1" y="1907.0" width="35.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1053.1" y="1918.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 2.96%)</title><rect x="1050.1" y="1891.0" width="35.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1053.1" y="1902.0">Ph..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.74%)</title><rect x="1050.1" y="1875.0" width="8.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1053.1" y="1886.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.74%)</title><rect x="1050.1" y="1859.0" width="8.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1053.1" y="1870.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.74%)</title><rect x="1050.1" y="1843.0" width="8.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1053.1" y="1854.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.74%)</title><rect x="1050.1" y="1827.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1053.1" y="1838.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.74%)</title><rect x="1058.9" y="1875.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1061.9" y="1886.0"></text>
</g>
<g>
<title>LoadNode::is_instance_field_load_with_local_phi(Node*) (1 samples, 0.74%)</title><rect x="1058.9" y="1859.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.9" y="1870.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.74%)</title><rect x="1058.9" y="1843.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1061.9" y="1854.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.74%)</title><rect x="1058.9" y="1827.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.9" y="1838.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.74%)</title><rect x="1058.9" y="1811.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1061.9" y="1822.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.74%)</title><rect x="1058.9" y="1795.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1061.9" y="1806.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.74%)</title><rect x="1067.6" y="1875.0" width="8.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1070.6" y="1886.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.74%)</title><rect x="1067.6" y="1859.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1070.6" y="1870.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.74%)</title><rect x="1076.4" y="1875.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1079.4" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.74%)</title><rect x="1085.1" y="1907.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1088.1" y="1918.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_locking_node(AbstractLockNode*) (1 samples, 0.74%)</title><rect x="1085.1" y="1891.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1088.1" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.74%)</title><rect x="1085.1" y="1875.0" width="8.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1088.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.74%)</title><rect x="1085.1" y="1859.0" width="8.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1088.1" y="1870.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.74%)</title><rect x="1085.1" y="1843.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1088.1" y="1854.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.74%)</title><rect x="1093.9" y="1907.0" width="8.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1096.9" y="1918.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 4.44%)</title><rect x="1102.6" y="1923.0" width="52.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1105.6" y="1934.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 4.44%)</title><rect x="1102.6" y="1907.0" width="52.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.6" y="1918.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 4.44%)</title><rect x="1102.6" y="1891.0" width="52.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1105.6" y="1902.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 4.44%)</title><rect x="1102.6" y="1875.0" width="52.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1105.6" y="1886.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 3.70%)</title><rect x="1102.6" y="1859.0" width="43.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.6" y="1870.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 3.70%)</title><rect x="1102.6" y="1843.0" width="43.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.6" y="1854.0">Pars..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.96%)</title><rect x="1102.6" y="1827.0" width="35.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.6" y="1838.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.96%)</title><rect x="1102.6" y="1811.0" width="35.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.6" y="1822.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.96%)</title><rect x="1102.6" y="1795.0" width="35.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.6" y="1806.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.96%)</title><rect x="1102.6" y="1779.0" width="35.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.6" y="1790.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.96%)</title><rect x="1102.6" y="1763.0" width="35.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.6" y="1774.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.96%)</title><rect x="1102.6" y="1747.0" width="35.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.6" y="1758.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.22%)</title><rect x="1102.6" y="1731.0" width="26.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1105.6" y="1742.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.22%)</title><rect x="1102.6" y="1715.0" width="26.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1105.6" y="1726.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.22%)</title><rect x="1102.6" y="1699.0" width="26.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1105.6" y="1710.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.22%)</title><rect x="1102.6" y="1683.0" width="26.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.6" y="1694.0">P..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.74%)</title><rect x="1102.6" y="1667.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.6" y="1678.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.74%)</title><rect x="1102.6" y="1651.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.6" y="1662.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.74%)</title><rect x="1102.6" y="1635.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1105.6" y="1646.0"></text>
</g>
<g>
<title>GraphKit::combine_exception_states(SafePointNode*, SafePointNode*) (1 samples, 0.74%)</title><rect x="1102.6" y="1619.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.6" y="1630.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.74%)</title><rect x="1102.6" y="1603.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1105.6" y="1614.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.48%)</title><rect x="1111.3" y="1667.0" width="17.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1114.3" y="1678.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.48%)</title><rect x="1111.3" y="1651.0" width="17.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1114.3" y="1662.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.48%)</title><rect x="1111.3" y="1635.0" width="17.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1114.3" y="1646.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.48%)</title><rect x="1111.3" y="1619.0" width="17.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1114.3" y="1630.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.48%)</title><rect x="1111.3" y="1603.0" width="17.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1114.3" y="1614.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.48%)</title><rect x="1111.3" y="1587.0" width="17.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.3" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.48%)</title><rect x="1111.3" y="1571.0" width="17.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.3" y="1582.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.48%)</title><rect x="1111.3" y="1555.0" width="17.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1114.3" y="1566.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.74%)</title><rect x="1111.3" y="1539.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1114.3" y="1550.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.74%)</title><rect x="1111.3" y="1523.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.3" y="1534.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.74%)</title><rect x="1111.3" y="1507.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1114.3" y="1518.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.74%)</title><rect x="1111.3" y="1491.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1114.3" y="1502.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.74%)</title><rect x="1111.3" y="1475.0" width="8.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.3" y="1486.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.74%)</title><rect x="1111.3" y="1459.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1114.3" y="1470.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.74%)</title><rect x="1111.3" y="1443.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1114.3" y="1454.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.74%)</title><rect x="1111.3" y="1427.0" width="8.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1114.3" y="1438.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.74%)</title><rect x="1111.3" y="1411.0" width="8.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1114.3" y="1422.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.74%)</title><rect x="1111.3" y="1395.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1114.3" y="1406.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.74%)</title><rect x="1111.3" y="1379.0" width="8.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1114.3" y="1390.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.74%)</title><rect x="1111.3" y="1363.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1114.3" y="1374.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.74%)</title><rect x="1111.3" y="1347.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1114.3" y="1358.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.74%)</title><rect x="1111.3" y="1331.0" width="8.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1114.3" y="1342.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.74%)</title><rect x="1111.3" y="1315.0" width="8.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1114.3" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1120.1" y="1539.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1123.1" y="1550.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.74%)</title><rect x="1120.1" y="1523.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.1" y="1534.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.74%)</title><rect x="1120.1" y="1507.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1123.1" y="1518.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.74%)</title><rect x="1120.1" y="1491.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.1" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.74%)</title><rect x="1120.1" y="1475.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.1" y="1486.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.74%)</title><rect x="1120.1" y="1459.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.1" y="1470.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.74%)</title><rect x="1120.1" y="1443.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1123.1" y="1454.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1128.8" y="1731.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.8" y="1742.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1128.8" y="1715.0" width="8.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.8" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1128.8" y="1699.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.8" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.74%)</title><rect x="1128.8" y="1683.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.8" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.74%)</title><rect x="1128.8" y="1667.0" width="8.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.8" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.74%)</title><rect x="1128.8" y="1651.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.8" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.74%)</title><rect x="1128.8" y="1635.0" width="8.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.8" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.74%)</title><rect x="1128.8" y="1619.0" width="8.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.8" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1128.8" y="1603.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.8" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.74%)</title><rect x="1128.8" y="1587.0" width="8.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.8" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.74%)</title><rect x="1128.8" y="1571.0" width="8.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.8" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.74%)</title><rect x="1128.8" y="1555.0" width="8.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.8" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.74%)</title><rect x="1128.8" y="1539.0" width="8.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.8" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.74%)</title><rect x="1128.8" y="1523.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.8" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1128.8" y="1507.0" width="8.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1131.8" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.74%)</title><rect x="1128.8" y="1491.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.8" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.74%)</title><rect x="1128.8" y="1475.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.8" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.74%)</title><rect x="1128.8" y="1459.0" width="8.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.8" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.74%)</title><rect x="1128.8" y="1443.0" width="8.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.8" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.74%)</title><rect x="1128.8" y="1427.0" width="8.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.8" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1128.8" y="1411.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.8" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.74%)</title><rect x="1128.8" y="1395.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.8" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.74%)</title><rect x="1128.8" y="1379.0" width="8.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.8" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.74%)</title><rect x="1128.8" y="1363.0" width="8.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.8" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.74%)</title><rect x="1128.8" y="1347.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.8" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.74%)</title><rect x="1128.8" y="1331.0" width="8.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.8" y="1342.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.74%)</title><rect x="1128.8" y="1315.0" width="8.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.8" y="1326.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.74%)</title><rect x="1128.8" y="1299.0" width="8.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.8" y="1310.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.74%)</title><rect x="1128.8" y="1283.0" width="8.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1131.8" y="1294.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.74%)</title><rect x="1128.8" y="1267.0" width="8.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.8" y="1278.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.74%)</title><rect x="1128.8" y="1251.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.8" y="1262.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.74%)</title><rect x="1128.8" y="1235.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.8" y="1246.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.74%)</title><rect x="1128.8" y="1219.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.8" y="1230.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.74%)</title><rect x="1128.8" y="1203.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.8" y="1214.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putstatic(ciBytecodeStream*) (1 samples, 0.74%)</title><rect x="1128.8" y="1187.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.8" y="1198.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.74%)</title><rect x="1128.8" y="1171.0" width="8.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.8" y="1182.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.74%)</title><rect x="1128.8" y="1155.0" width="8.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.8" y="1166.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1137.6" y="1827.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.6" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1137.6" y="1811.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.6" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.74%)</title><rect x="1137.6" y="1795.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.6" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.74%)</title><rect x="1137.6" y="1779.0" width="8.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.6" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.74%)</title><rect x="1137.6" y="1763.0" width="8.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.6" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.74%)</title><rect x="1137.6" y="1747.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.6" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.74%)</title><rect x="1137.6" y="1731.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.6" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1137.6" y="1715.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.6" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.74%)</title><rect x="1137.6" y="1699.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.6" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.74%)</title><rect x="1137.6" y="1683.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.6" y="1694.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.74%)</title><rect x="1137.6" y="1667.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.6" y="1678.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.74%)</title><rect x="1137.6" y="1651.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.6" y="1662.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.74%)</title><rect x="1137.6" y="1635.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.6" y="1646.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.74%)</title><rect x="1137.6" y="1619.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.6" y="1630.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_dest() const (1 samples, 0.74%)</title><rect x="1146.3" y="1859.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.3" y="1870.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 1.48%)</title><rect x="1155.0" y="1923.0" width="17.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.0" y="1934.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.74%)</title><rect x="1163.8" y="1907.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.8" y="1918.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.48%)</title><rect x="1172.5" y="1955.0" width="17.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.5" y="1966.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.48%)</title><rect x="1172.5" y="1939.0" width="17.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.5" y="1950.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.48%)</title><rect x="1172.5" y="1923.0" width="17.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.5" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.48%)</title><rect x="1172.5" y="1907.0" width="17.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.5" y="1918.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.74%)</title><rect x="1172.5" y="1891.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.5" y="1902.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.74%)</title><rect x="1172.5" y="1875.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.5" y="1886.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.74%)</title><rect x="1172.5" y="1859.0" width="8.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.5" y="1870.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.74%)</title><rect x="1172.5" y="1843.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.5" y="1854.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.74%)</title><rect x="1172.5" y="1827.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.5" y="1838.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.74%)</title><rect x="1172.5" y="1811.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.5" y="1822.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.74%)</title><rect x="1172.5" y="1795.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.5" y="1806.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.74%)</title><rect x="1172.5" y="1779.0" width="8.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.5" y="1790.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.74%)</title><rect x="1181.3" y="1891.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.3" y="1902.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.74%)</title><rect x="1181.3" y="1875.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="1886.0"></text>
</g>
<g>
<title>LinearScan::resolve_exception_handlers() (1 samples, 0.74%)</title><rect x="1181.3" y="1859.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="1870.0"></text>
</g>
<g>
<title>LinearScan::resolve_exception_entry(BlockBegin*, MoveResolver&amp;) (1 samples, 0.74%)</title><rect x="1181.3" y="1843.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="1854.0"></text>
</g>
</g>
</svg>
