<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1574" onload="init(evt)" viewBox="0 0 1200 1574" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1557"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1557"> </text>
<g id="frames">
<g>
<title>all (84 samples, 100.00%)</title><rect x="10.0" y="1523.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1534.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (4 samples, 4.76%)</title><rect x="10.0" y="1507.0" width="56.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1518.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (4 samples, 4.76%)</title><rect x="10.0" y="1491.0" width="56.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1502.0">com/li..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 1.19%)</title><rect x="10.0" y="1475.0" width="14.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/1917099307.accept (1 samples, 1.19%)</title><rect x="10.0" y="1459.0" width="14.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (1 samples, 1.19%)</title><rect x="10.0" y="1443.0" width="14.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 1.19%)</title><rect x="10.0" y="1427.0" width="14.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 1.19%)</title><rect x="10.0" y="1411.0" width="14.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 1.19%)</title><rect x="10.0" y="1395.0" width="14.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 1.19%)</title><rect x="10.0" y="1379.0" width="14.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 1.19%)</title><rect x="10.0" y="1363.0" width="14.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 1.19%)</title><rect x="10.0" y="1347.0" width="14.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 1.19%)</title><rect x="10.0" y="1331.0" width="14.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 1.19%)</title><rect x="10.0" y="1315.0" width="14.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 1.19%)</title><rect x="10.0" y="1299.0" width="14.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 1.19%)</title><rect x="10.0" y="1283.0" width="14.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (3 samples, 3.57%)</title><rect x="24.0" y="1475.0" width="42.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.0" y="1486.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (3 samples, 3.57%)</title><rect x="24.0" y="1459.0" width="42.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="27.0" y="1470.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (2 samples, 2.38%)</title><rect x="24.0" y="1443.0" width="28.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.0" y="1454.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 2.38%)</title><rect x="24.0" y="1427.0" width="28.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.0" y="1438.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 2.38%)</title><rect x="24.0" y="1411.0" width="28.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.0" y="1422.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 2.38%)</title><rect x="24.0" y="1395.0" width="28.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.0" y="1406.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 2.38%)</title><rect x="24.0" y="1379.0" width="28.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.0" y="1390.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 2.38%)</title><rect x="24.0" y="1363.0" width="28.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.0" y="1374.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 2.38%)</title><rect x="24.0" y="1347.0" width="28.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.0" y="1358.0">or..</text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 2.38%)</title><rect x="24.0" y="1331.0" width="28.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.0" y="1342.0">or..</text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 2.38%)</title><rect x="24.0" y="1315.0" width="28.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.0" y="1326.0">or..</text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 2.38%)</title><rect x="24.0" y="1299.0" width="28.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.0" y="1310.0">or..</text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 2.38%)</title><rect x="24.0" y="1283.0" width="28.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.0" y="1294.0">or..</text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 1.19%)</title><rect x="38.1" y="1267.0" width="14.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="41.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 1.19%)</title><rect x="38.1" y="1251.0" width="14.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 1.19%)</title><rect x="52.1" y="1443.0" width="14.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="55.1" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 1.19%)</title><rect x="52.1" y="1427.0" width="14.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="55.1" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 1.19%)</title><rect x="52.1" y="1411.0" width="14.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.1" y="1422.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 1.19%)</title><rect x="52.1" y="1395.0" width="14.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="55.1" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/230005514.accept (1 samples, 1.19%)</title><rect x="52.1" y="1379.0" width="14.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.1" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 1.19%)</title><rect x="52.1" y="1363.0" width="14.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="55.1" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 1.19%)</title><rect x="52.1" y="1347.0" width="14.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.1" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 1.19%)</title><rect x="52.1" y="1331.0" width="14.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 1.19%)</title><rect x="52.1" y="1315.0" width="14.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.1" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$LeaderAndEpoch.equals (1 samples, 1.19%)</title><rect x="52.1" y="1299.0" width="14.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.1" y="1310.0"></text>
</g>
<g>
<title>java/util/Optional.equals (1 samples, 1.19%)</title><rect x="52.1" y="1283.0" width="14.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.1" y="1294.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 1.19%)</title><rect x="52.1" y="1267.0" width="14.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="55.1" y="1278.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 1.19%)</title><rect x="66.2" y="1507.0" width="14.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="69.2" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 1.19%)</title><rect x="66.2" y="1491.0" width="14.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.2" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 1.19%)</title><rect x="66.2" y="1475.0" width="14.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="69.2" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/700404230.run (1 samples, 1.19%)</title><rect x="66.2" y="1459.0" width="14.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="69.2" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (1 samples, 1.19%)</title><rect x="66.2" y="1443.0" width="14.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.2" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (1 samples, 1.19%)</title><rect x="66.2" y="1427.0" width="14.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="69.2" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (1 samples, 1.19%)</title><rect x="66.2" y="1411.0" width="14.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="69.2" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (1 samples, 1.19%)</title><rect x="66.2" y="1395.0" width="14.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.2" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (1 samples, 1.19%)</title><rect x="66.2" y="1379.0" width="14.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="69.2" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (1 samples, 1.19%)</title><rect x="66.2" y="1363.0" width="14.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="69.2" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (1 samples, 1.19%)</title><rect x="66.2" y="1347.0" width="14.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="69.2" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (1 samples, 1.19%)</title><rect x="66.2" y="1331.0" width="14.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="69.2" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (1 samples, 1.19%)</title><rect x="66.2" y="1315.0" width="14.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="69.2" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (1 samples, 1.19%)</title><rect x="66.2" y="1299.0" width="14.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.2" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (1 samples, 1.19%)</title><rect x="66.2" y="1283.0" width="14.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="69.2" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 1.19%)</title><rect x="66.2" y="1267.0" width="14.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="69.2" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 1.19%)</title><rect x="66.2" y="1251.0" width="14.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.2" y="1262.0"></text>
</g>
<g>
<title>start_thread (79 samples, 94.05%)</title><rect x="80.2" y="1507.0" width="1109.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="83.2" y="1518.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (79 samples, 94.05%)</title><rect x="80.2" y="1491.0" width="1109.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="83.2" y="1502.0">java_start(Thread*)</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (79 samples, 94.05%)</title><rect x="80.2" y="1475.0" width="1109.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="83.2" y="1486.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (79 samples, 94.05%)</title><rect x="80.2" y="1459.0" width="1109.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="83.2" y="1470.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (79 samples, 94.05%)</title><rect x="80.2" y="1443.0" width="1109.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="83.2" y="1454.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (76 samples, 90.48%)</title><rect x="80.2" y="1427.0" width="1067.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="83.2" y="1438.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (76 samples, 90.48%)</title><rect x="80.2" y="1411.0" width="1067.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="83.2" y="1422.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (24 samples, 28.57%)</title><rect x="80.2" y="1395.0" width="337.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="83.2" y="1406.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 1.19%)</title><rect x="80.2" y="1379.0" width="14.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="83.2" y="1390.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 1.19%)</title><rect x="80.2" y="1363.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="83.2" y="1374.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 1.19%)</title><rect x="80.2" y="1347.0" width="14.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="83.2" y="1358.0"></text>
</g>
<g>
<title>jmpDirNode::short_branch_version(Compile*) (1 samples, 1.19%)</title><rect x="80.2" y="1331.0" width="14.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="83.2" y="1342.0"></text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 1.19%)</title><rect x="80.2" y="1315.0" width="14.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="83.2" y="1326.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 3.57%)</title><rect x="94.3" y="1379.0" width="42.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="97.3" y="1390.0">Matc..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 1.19%)</title><rect x="94.3" y="1363.0" width="14.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="97.3" y="1374.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 2.38%)</title><rect x="108.3" y="1363.0" width="28.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="111.3" y="1374.0">Ma..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 1.19%)</title><rect x="108.3" y="1347.0" width="14.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="111.3" y="1358.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 1.19%)</title><rect x="122.4" y="1347.0" width="14.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="125.4" y="1358.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 2.38%)</title><rect x="136.4" y="1379.0" width="28.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="139.4" y="1390.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 2.38%)</title><rect x="136.4" y="1363.0" width="28.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="139.4" y="1374.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 1.19%)</title><rect x="136.4" y="1347.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="139.4" y="1358.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 1.19%)</title><rect x="150.5" y="1347.0" width="14.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="153.5" y="1358.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 1.19%)</title><rect x="150.5" y="1331.0" width="14.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="153.5" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (18 samples, 21.43%)</title><rect x="164.5" y="1379.0" width="252.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="167.5" y="1390.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 1.19%)</title><rect x="164.5" y="1363.0" width="14.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="167.5" y="1374.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.19%)</title><rect x="164.5" y="1347.0" width="14.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="167.5" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 3.57%)</title><rect x="178.6" y="1363.0" width="42.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="181.6" y="1374.0">Phas..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 4.76%)</title><rect x="220.7" y="1363.0" width="56.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="223.7" y="1374.0">PhaseC..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 2.38%)</title><rect x="248.8" y="1347.0" width="28.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="251.8" y="1358.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.19%)</title><rect x="262.9" y="1331.0" width="14.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="265.9" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 2.38%)</title><rect x="276.9" y="1363.0" width="28.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="279.9" y="1374.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 2.38%)</title><rect x="276.9" y="1347.0" width="28.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="279.9" y="1358.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 1.19%)</title><rect x="305.0" y="1363.0" width="14.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="308.0" y="1374.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 1.19%)</title><rect x="305.0" y="1347.0" width="14.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="308.0" y="1358.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 4.76%)</title><rect x="319.0" y="1363.0" width="56.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="322.0" y="1374.0">PhaseC..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 1.19%)</title><rect x="319.0" y="1347.0" width="14.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="322.0" y="1358.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 1.19%)</title><rect x="319.0" y="1331.0" width="14.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="322.0" y="1342.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 1.19%)</title><rect x="319.0" y="1315.0" width="14.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="322.0" y="1326.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 3.57%)</title><rect x="333.1" y="1347.0" width="42.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="336.1" y="1358.0">Phas..</text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 1.19%)</title><rect x="333.1" y="1331.0" width="14.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="336.1" y="1342.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 2.38%)</title><rect x="347.1" y="1331.0" width="28.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="350.1" y="1342.0">Ph..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 1.19%)</title><rect x="347.1" y="1315.0" width="14.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="350.1" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.19%)</title><rect x="347.1" y="1299.0" width="14.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="350.1" y="1310.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 1.19%)</title><rect x="361.2" y="1315.0" width="14.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="364.2" y="1326.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 1.19%)</title><rect x="375.2" y="1363.0" width="14.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="378.2" y="1374.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 1.19%)</title><rect x="389.3" y="1363.0" width="14.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="392.3" y="1374.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 1.19%)</title><rect x="389.3" y="1347.0" width="14.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="392.3" y="1358.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 1.19%)</title><rect x="403.3" y="1363.0" width="14.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="406.3" y="1374.0"></text>
</g>
<g>
<title>Compile::Optimize() (46 samples, 54.76%)</title><rect x="417.4" y="1395.0" width="646.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="420.4" y="1406.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 3.57%)</title><rect x="417.4" y="1379.0" width="42.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="420.4" y="1390.0">Conn..</text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 3.57%)</title><rect x="417.4" y="1363.0" width="42.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="420.4" y="1374.0">Conn..</text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 3.57%)</title><rect x="417.4" y="1347.0" width="42.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="420.4" y="1358.0">Conn..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 2.38%)</title><rect x="417.4" y="1331.0" width="28.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="420.4" y="1342.0">Co..</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 2.38%)</title><rect x="417.4" y="1315.0" width="28.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="420.4" y="1326.0">Co..</text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 1.19%)</title><rect x="417.4" y="1299.0" width="14.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="420.4" y="1310.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 1.19%)</title><rect x="417.4" y="1283.0" width="14.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="420.4" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="1299.0" width="14.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="434.4" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="1283.0" width="14.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="434.4" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="1267.0" width="14.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="434.4" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="1251.0" width="14.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="434.4" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="1235.0" width="14.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="434.4" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="1219.0" width="14.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="434.4" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="1203.0" width="14.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="434.4" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="1187.0" width="14.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="434.4" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="1171.0" width="14.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="434.4" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="1155.0" width="14.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="434.4" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="1139.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="434.4" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="1123.0" width="14.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="434.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="1107.0" width="14.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="434.4" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="1091.0" width="14.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="434.4" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="1075.0" width="14.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="434.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="1059.0" width="14.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="434.4" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="1043.0" width="14.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="434.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="1027.0" width="14.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="434.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="1011.0" width="14.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="434.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="995.0" width="14.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="434.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="979.0" width="14.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="434.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="963.0" width="14.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="434.4" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="947.0" width="14.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="434.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="931.0" width="14.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="434.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="915.0" width="14.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="434.4" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="899.0" width="14.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="434.4" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="883.0" width="14.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="434.4" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="867.0" width="14.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="434.4" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="851.0" width="14.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="434.4" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="835.0" width="14.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="434.4" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="819.0" width="14.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="434.4" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="803.0" width="14.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="434.4" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="787.0" width="14.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="434.4" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="771.0" width="14.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="434.4" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="755.0" width="14.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="434.4" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="739.0" width="14.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="434.4" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="723.0" width="14.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="434.4" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="707.0" width="14.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="434.4" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="691.0" width="14.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="434.4" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="675.0" width="14.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="434.4" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="659.0" width="14.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="434.4" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="643.0" width="14.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="434.4" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="627.0" width="14.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="434.4" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="611.0" width="14.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="434.4" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="595.0" width="14.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="434.4" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="579.0" width="14.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="434.4" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="563.0" width="14.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="434.4" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="547.0" width="14.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="434.4" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="531.0" width="14.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="434.4" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="515.0" width="14.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="434.4" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="499.0" width="14.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="434.4" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="483.0" width="14.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="434.4" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="467.0" width="14.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="434.4" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="451.0" width="14.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="434.4" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="435.0" width="14.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="434.4" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="419.0" width="14.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="434.4" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="403.0" width="14.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="434.4" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="387.0" width="14.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="434.4" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="371.0" width="14.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="434.4" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="355.0" width="14.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="434.4" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="339.0" width="14.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="434.4" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="323.0" width="14.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="434.4" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="307.0" width="14.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="434.4" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="291.0" width="14.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="434.4" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="275.0" width="14.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="434.4" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="259.0" width="14.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="434.4" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="243.0" width="14.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="434.4" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="227.0" width="14.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="434.4" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="211.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="434.4" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="195.0" width="14.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="434.4" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="179.0" width="14.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="434.4" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="163.0" width="14.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="434.4" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="147.0" width="14.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="434.4" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="131.0" width="14.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="434.4" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="115.0" width="14.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="434.4" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="99.0" width="14.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="434.4" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="83.0" width="14.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="434.4" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="67.0" width="14.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="434.4" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 1.19%)</title><rect x="431.4" y="51.0" width="14.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="434.4" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 1.19%)</title><rect x="431.4" y="35.0" width="14.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="434.4" y="46.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 1.19%)</title><rect x="445.5" y="1331.0" width="14.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="448.5" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) (1 samples, 1.19%)</title><rect x="445.5" y="1315.0" width="14.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="448.5" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (37 samples, 44.05%)</title><rect x="459.5" y="1379.0" width="519.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="462.5" y="1390.0">PhaseIdealLoop::build_and_optimize(bool, bool)</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 1.19%)</title><rect x="459.5" y="1363.0" width="14.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="462.5" y="1374.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 1.19%)</title><rect x="459.5" y="1347.0" width="14.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="462.5" y="1358.0"></text>
</g>
<g>
<title>IdealLoopTree::remove_safepoints(PhaseIdealLoop*, bool) (1 samples, 1.19%)</title><rect x="459.5" y="1331.0" width="14.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="462.5" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 1.19%)</title><rect x="459.5" y="1315.0" width="14.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="462.5" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 1.19%)</title><rect x="459.5" y="1299.0" width="14.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="462.5" y="1310.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 1.19%)</title><rect x="459.5" y="1283.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="462.5" y="1294.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 1.19%)</title><rect x="473.6" y="1363.0" width="14.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="476.6" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 1.19%)</title><rect x="487.6" y="1363.0" width="14.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="490.6" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 1.19%)</title><rect x="487.6" y="1347.0" width="14.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="490.6" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (31 samples, 36.90%)</title><rect x="501.7" y="1363.0" width="435.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="504.7" y="1374.0">PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (31 samples, 36.90%)</title><rect x="501.7" y="1347.0" width="435.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="504.7" y="1358.0">PhaseIdealLoop::build_loop_late_post(Node*)</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (30 samples, 35.71%)</title><rect x="515.7" y="1331.0" width="421.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="518.7" y="1342.0">PhaseIdealLoop::get_late_ctrl(Node*, Node*)</text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 1.19%)</title><rect x="515.7" y="1315.0" width="14.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="518.7" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (29 samples, 34.52%)</title><rect x="529.8" y="1315.0" width="407.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="532.8" y="1326.0">PhaseIdealLoop::is_dominator(Node*, Node*)</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 1.19%)</title><rect x="937.1" y="1363.0" width="14.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="940.1" y="1374.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (2 samples, 2.38%)</title><rect x="951.2" y="1363.0" width="28.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="954.2" y="1374.0">Pr..</text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 5.95%)</title><rect x="979.3" y="1379.0" width="70.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="982.3" y="1390.0">PhaseIte..</text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 1.19%)</title><rect x="979.3" y="1363.0" width="14.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="982.3" y="1374.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 1.19%)</title><rect x="979.3" y="1347.0" width="14.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="982.3" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 4.76%)</title><rect x="993.3" y="1363.0" width="56.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="996.3" y="1374.0">PhaseI..</text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 1.19%)</title><rect x="1007.4" y="1347.0" width="14.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1010.4" y="1358.0"></text>
</g>
<g>
<title>PhiNode::is_diamond_phi(bool) const (1 samples, 1.19%)</title><rect x="1021.4" y="1347.0" width="14.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1024.4" y="1358.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 1.19%)</title><rect x="1035.5" y="1347.0" width="14.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1038.5" y="1358.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 1.19%)</title><rect x="1035.5" y="1331.0" width="14.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1038.5" y="1342.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 1.19%)</title><rect x="1035.5" y="1315.0" width="14.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1038.5" y="1326.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 1.19%)</title><rect x="1035.5" y="1299.0" width="14.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1038.5" y="1310.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 1.19%)</title><rect x="1049.5" y="1379.0" width="14.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1052.5" y="1390.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 5.95%)</title><rect x="1063.6" y="1395.0" width="70.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1066.6" y="1406.0">ParseGen..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 5.95%)</title><rect x="1063.6" y="1379.0" width="70.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1066.6" y="1390.0">Parse::P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 5.95%)</title><rect x="1063.6" y="1363.0" width="70.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.6" y="1374.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 5.95%)</title><rect x="1063.6" y="1347.0" width="70.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1066.6" y="1358.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 5.95%)</title><rect x="1063.6" y="1331.0" width="70.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1066.6" y="1342.0">Parse::d..</text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 1.19%)</title><rect x="1063.6" y="1315.0" width="14.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1066.6" y="1326.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 1.19%)</title><rect x="1063.6" y="1299.0" width="14.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1066.6" y="1310.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 1.19%)</title><rect x="1063.6" y="1283.0" width="14.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1066.6" y="1294.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 1.19%)</title><rect x="1063.6" y="1267.0" width="14.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1066.6" y="1278.0"></text>
</g>
<g>
<title>AddPNode::Opcode() const (1 samples, 1.19%)</title><rect x="1063.6" y="1251.0" width="14.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1066.6" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 4.76%)</title><rect x="1077.6" y="1315.0" width="56.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.6" y="1326.0">Parse:..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.57%)</title><rect x="1077.6" y="1299.0" width="42.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1080.6" y="1310.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.57%)</title><rect x="1077.6" y="1283.0" width="42.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1080.6" y="1294.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.57%)</title><rect x="1077.6" y="1267.0" width="42.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1080.6" y="1278.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.57%)</title><rect x="1077.6" y="1251.0" width="42.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1080.6" y="1262.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.57%)</title><rect x="1077.6" y="1235.0" width="42.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.6" y="1246.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.57%)</title><rect x="1077.6" y="1219.0" width="42.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.6" y="1230.0">Pars..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.57%)</title><rect x="1077.6" y="1203.0" width="42.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1080.6" y="1214.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.57%)</title><rect x="1077.6" y="1187.0" width="42.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1080.6" y="1198.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.57%)</title><rect x="1077.6" y="1171.0" width="42.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1080.6" y="1182.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.57%)</title><rect x="1077.6" y="1155.0" width="42.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1080.6" y="1166.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.57%)</title><rect x="1077.6" y="1139.0" width="42.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1080.6" y="1150.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.57%)</title><rect x="1077.6" y="1123.0" width="42.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1080.6" y="1134.0">Pars..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 1.19%)</title><rect x="1077.6" y="1107.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1080.6" y="1118.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 1.19%)</title><rect x="1077.6" y="1091.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1080.6" y="1102.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 1.19%)</title><rect x="1077.6" y="1075.0" width="14.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.6" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 1.19%)</title><rect x="1077.6" y="1059.0" width="14.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.6" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 1.19%)</title><rect x="1077.6" y="1043.0" width="14.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1080.6" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.19%)</title><rect x="1077.6" y="1027.0" width="14.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1080.6" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.19%)</title><rect x="1077.6" y="1011.0" width="14.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1080.6" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 1.19%)</title><rect x="1077.6" y="995.0" width="14.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1080.6" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 1.19%)</title><rect x="1077.6" y="979.0" width="14.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1080.6" y="990.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 1.19%)</title><rect x="1077.6" y="963.0" width="14.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1080.6" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 1.19%)</title><rect x="1077.6" y="947.0" width="14.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1080.6" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 1.19%)</title><rect x="1077.6" y="931.0" width="14.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.6" y="942.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 1.19%)</title><rect x="1077.6" y="915.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1080.6" y="926.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 1.19%)</title><rect x="1077.6" y="899.0" width="14.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.6" y="910.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 1.19%)</title><rect x="1077.6" y="883.0" width="14.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1080.6" y="894.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 1.19%)</title><rect x="1077.6" y="867.0" width="14.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1080.6" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 2.38%)</title><rect x="1091.7" y="1107.0" width="28.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1094.7" y="1118.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 2.38%)</title><rect x="1091.7" y="1091.0" width="28.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1094.7" y="1102.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 2.38%)</title><rect x="1091.7" y="1075.0" width="28.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1094.7" y="1086.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 2.38%)</title><rect x="1091.7" y="1059.0" width="28.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1094.7" y="1070.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 2.38%)</title><rect x="1091.7" y="1043.0" width="28.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1094.7" y="1054.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.19%)</title><rect x="1091.7" y="1027.0" width="14.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1094.7" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.19%)</title><rect x="1091.7" y="1011.0" width="14.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1094.7" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.19%)</title><rect x="1091.7" y="995.0" width="14.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1094.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.19%)</title><rect x="1091.7" y="979.0" width="14.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1094.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.19%)</title><rect x="1091.7" y="963.0" width="14.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1094.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.19%)</title><rect x="1091.7" y="947.0" width="14.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1094.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.19%)</title><rect x="1091.7" y="931.0" width="14.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1094.7" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.19%)</title><rect x="1091.7" y="915.0" width="14.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1094.7" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.19%)</title><rect x="1091.7" y="899.0" width="14.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1094.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.19%)</title><rect x="1091.7" y="883.0" width="14.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1094.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.19%)</title><rect x="1091.7" y="867.0" width="14.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1094.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.19%)</title><rect x="1091.7" y="851.0" width="14.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1094.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.19%)</title><rect x="1091.7" y="835.0" width="14.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1094.7" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.19%)</title><rect x="1091.7" y="819.0" width="14.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1094.7" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.19%)</title><rect x="1091.7" y="803.0" width="14.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1094.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.19%)</title><rect x="1091.7" y="787.0" width="14.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1094.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.19%)</title><rect x="1091.7" y="771.0" width="14.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1094.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.19%)</title><rect x="1091.7" y="755.0" width="14.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.19%)</title><rect x="1091.7" y="739.0" width="14.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1094.7" y="750.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.19%)</title><rect x="1091.7" y="723.0" width="14.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1094.7" y="734.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 1.19%)</title><rect x="1091.7" y="707.0" width="14.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1094.7" y="718.0"></text>
</g>
<g>
<title>GraphKit::load_object_klass(Node*) (1 samples, 1.19%)</title><rect x="1091.7" y="691.0" width="14.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1094.7" y="702.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 1.19%)</title><rect x="1091.7" y="675.0" width="14.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1094.7" y="686.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 1.19%)</title><rect x="1091.7" y="659.0" width="14.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1094.7" y="670.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 1.19%)</title><rect x="1091.7" y="643.0" width="14.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1094.7" y="654.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 1.19%)</title><rect x="1091.7" y="627.0" width="14.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.7" y="638.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 1.19%)</title><rect x="1091.7" y="611.0" width="14.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1094.7" y="622.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 1.19%)</title><rect x="1091.7" y="595.0" width="14.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1094.7" y="606.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 1.19%)</title><rect x="1091.7" y="579.0" width="14.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1094.7" y="590.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 1.19%)</title><rect x="1091.7" y="563.0" width="14.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1094.7" y="574.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 1.19%)</title><rect x="1091.7" y="547.0" width="14.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1094.7" y="558.0"></text>
</g>
<g>
<title>TypeOopPtr::speculative() const (1 samples, 1.19%)</title><rect x="1091.7" y="531.0" width="14.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 1.19%)</title><rect x="1105.7" y="1027.0" width="14.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.7" y="1038.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 1.19%)</title><rect x="1105.7" y="1011.0" width="14.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1108.7" y="1022.0"></text>
</g>
<g>
<title>GraphKit::null_check_oop(Node*, Node**, bool, bool) (1 samples, 1.19%)</title><rect x="1105.7" y="995.0" width="14.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.7" y="1006.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 1.19%)</title><rect x="1105.7" y="979.0" width="14.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.7" y="990.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 1.19%)</title><rect x="1105.7" y="963.0" width="14.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.7" y="974.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 1.19%)</title><rect x="1105.7" y="947.0" width="14.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1108.7" y="958.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 1.19%)</title><rect x="1105.7" y="931.0" width="14.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1108.7" y="942.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.19%)</title><rect x="1119.8" y="1299.0" width="14.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.8" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.19%)</title><rect x="1119.8" y="1283.0" width="14.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.8" y="1294.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.19%)</title><rect x="1119.8" y="1267.0" width="14.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.8" y="1278.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.19%)</title><rect x="1119.8" y="1251.0" width="14.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.8" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.19%)</title><rect x="1119.8" y="1235.0" width="14.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.8" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.19%)</title><rect x="1119.8" y="1219.0" width="14.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.8" y="1230.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.19%)</title><rect x="1119.8" y="1203.0" width="14.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.8" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.19%)</title><rect x="1119.8" y="1187.0" width="14.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1122.8" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.19%)</title><rect x="1119.8" y="1171.0" width="14.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.19%)</title><rect x="1119.8" y="1155.0" width="14.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.8" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.19%)</title><rect x="1119.8" y="1139.0" width="14.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.8" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.19%)</title><rect x="1119.8" y="1123.0" width="14.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.8" y="1134.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 1.19%)</title><rect x="1119.8" y="1107.0" width="14.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1122.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 1.19%)</title><rect x="1119.8" y="1091.0" width="14.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.8" y="1102.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 1.19%)</title><rect x="1119.8" y="1075.0" width="14.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1122.8" y="1086.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 1.19%)</title><rect x="1119.8" y="1059.0" width="14.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.8" y="1070.0"></text>
</g>
<g>
<title>IdealKit::store(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool) (1 samples, 1.19%)</title><rect x="1119.8" y="1043.0" width="14.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.8" y="1054.0"></text>
</g>
<g>
<title>StoreNode::bottom_type() const (1 samples, 1.19%)</title><rect x="1119.8" y="1027.0" width="14.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.8" y="1038.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 1.19%)</title><rect x="1133.8" y="1395.0" width="14.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.8" y="1406.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 1.19%)</title><rect x="1133.8" y="1379.0" width="14.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.8" y="1390.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 3.57%)</title><rect x="1147.9" y="1427.0" width="42.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.9" y="1438.0">Comp..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 3.57%)</title><rect x="1147.9" y="1411.0" width="42.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.9" y="1422.0">Comp..</text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 3.57%)</title><rect x="1147.9" y="1395.0" width="42.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.9" y="1406.0">Comp..</text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 3.57%)</title><rect x="1147.9" y="1379.0" width="42.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.9" y="1390.0">Comp..</text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 2.38%)</title><rect x="1147.9" y="1363.0" width="28.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.9" y="1374.0">Co..</text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (2 samples, 2.38%)</title><rect x="1147.9" y="1347.0" width="28.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.9" y="1358.0">LI..</text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 1.19%)</title><rect x="1147.9" y="1331.0" width="14.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.9" y="1342.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 1.19%)</title><rect x="1147.9" y="1315.0" width="14.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.9" y="1326.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 1.19%)</title><rect x="1147.9" y="1299.0" width="14.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.9" y="1310.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 1.19%)</title><rect x="1147.9" y="1283.0" width="14.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.9" y="1294.0"></text>
</g>
<g>
<title>LIR_OpAllocArray::emit_code(LIR_Assembler*) (1 samples, 1.19%)</title><rect x="1161.9" y="1331.0" width="14.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.9" y="1342.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_alloc_array(LIR_OpAllocArray*) (1 samples, 1.19%)</title><rect x="1161.9" y="1315.0" width="14.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.9" y="1326.0"></text>
</g>
<g>
<title>C1_MacroAssembler::allocate_array(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, int, Address::ScaleFactor, RegisterImpl*, Label&amp;) (1 samples, 1.19%)</title><rect x="1161.9" y="1299.0" width="14.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.9" y="1310.0"></text>
</g>
<g>
<title>Assembler::jcc(Assembler::Condition, Label&amp;, bool) (1 samples, 1.19%)</title><rect x="1161.9" y="1283.0" width="14.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.9" y="1294.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 1.19%)</title><rect x="1176.0" y="1363.0" width="14.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.0" y="1374.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 1.19%)</title><rect x="1176.0" y="1347.0" width="14.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.0" y="1358.0"></text>
</g>
<g>
<title>Method::build_interpreter_method_data(methodHandle, Thread*) (1 samples, 1.19%)</title><rect x="1176.0" y="1331.0" width="14.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.0" y="1342.0"></text>
</g>
<g>
<title>MethodData::allocate(ClassLoaderData*, methodHandle, Thread*) (1 samples, 1.19%)</title><rect x="1176.0" y="1315.0" width="14.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.0" y="1326.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, bool, MetaspaceObj::Type, Thread*) (1 samples, 1.19%)</title><rect x="1176.0" y="1299.0" width="14.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.0" y="1310.0"></text>
</g>
<g>
<title>Metaspace::allocate(unsigned long, Metaspace::MetadataType) (1 samples, 1.19%)</title><rect x="1176.0" y="1283.0" width="14.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.0" y="1294.0"></text>
</g>
<g>
<title>Metachunk::allocate(unsigned long) (1 samples, 1.19%)</title><rect x="1176.0" y="1267.0" width="14.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.0" y="1278.0"></text>
</g>
</g>
</svg>
