<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,471 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.07%)</title><rect x="10.0" y="2035.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.07%)</title><rect x="10.0" y="2019.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (1 samples, 0.07%)</title><rect x="10.0" y="2003.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (1 samples, 0.07%)</title><rect x="10.0" y="1987.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.07%)</title><rect x="10.0" y="1971.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (1 samples, 0.07%)</title><rect x="10.0" y="1955.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>Compile::Optimize() (1 samples, 0.07%)</title><rect x="10.0" y="1939.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.07%)</title><rect x="10.0" y="1923.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.07%)</title><rect x="10.0" y="1907.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1891.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1763.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1731.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1715.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1683.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1667.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1651.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1635.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1619.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1603.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1587.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1571.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1555.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1539.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1523.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1507.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1491.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1475.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1459.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1443.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1427.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1395.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1379.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1299.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1283.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1267.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1251.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1235.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1219.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1155.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1123.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="915.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="899.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="835.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="819.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="787.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="771.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="755.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="739.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="723.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="707.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="691.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="675.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="659.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="643.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="627.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="611.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="595.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="579.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="563.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="547.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="531.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="515.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="483.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="467.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="451.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="435.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="419.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="403.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="387.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="371.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="355.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="339.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="323.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="307.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="291.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="275.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="259.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="243.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="227.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="211.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="195.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="179.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="163.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="147.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="131.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="115.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="99.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="83.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="67.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="51.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="10.0" y="35.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (249 samples, 16.93%)</title><rect x="10.8" y="2035.0" width="199.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.8" y="2046.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (249 samples, 16.93%)</title><rect x="10.8" y="2019.0" width="199.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.8" y="2030.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.27%)</title><rect x="10.8" y="2003.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.8" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.27%)</title><rect x="10.8" y="1987.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.8" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1914520408.accept (4 samples, 0.27%)</title><rect x="10.8" y="1971.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.8" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.27%)</title><rect x="10.8" y="1955.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.8" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.27%)</title><rect x="10.8" y="1939.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.8" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.20%)</title><rect x="11.6" y="1923.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.6" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.07%)</title><rect x="14.0" y="2003.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.0" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.07%)</title><rect x="14.0" y="1987.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.0" y="1998.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="14.0" y="1971.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.0" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.spliterator (1 samples, 0.07%)</title><rect x="14.0" y="1955.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="14.0" y="1939.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.0" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.14%)</title><rect x="14.8" y="2003.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.8" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.14%)</title><rect x="14.8" y="1987.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.8" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.14%)</title><rect x="14.8" y="1971.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="17.8" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="14.8" y="1955.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.8" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="14.8" y="1939.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.8" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="14.8" y="1923.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.8" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.14%)</title><rect x="14.8" y="1907.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.8" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="14.8" y="1891.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.8" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="15.6" y="1891.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.6" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="15.6" y="1875.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.6" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="15.6" y="1859.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.6" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="15.6" y="1843.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="18.6" y="1854.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="15.6" y="1827.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="18.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (200 samples, 13.60%)</title><rect x="16.4" y="2003.0" width="160.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.4" y="2014.0">java/lang/Iterable.f..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/485608507.accept (192 samples, 13.05%)</title><rect x="16.4" y="1987.0" width="154.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.4" y="1998.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$37 (190 samples, 12.92%)</title><rect x="18.0" y="1971.0" width="152.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="21.0" y="1982.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.07%)</title><rect x="18.0" y="1955.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="21.0" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (159 samples, 10.81%)</title><rect x="18.8" y="1955.0" width="127.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.8" y="1966.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (159 samples, 10.81%)</title><rect x="18.8" y="1939.0" width="127.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="21.8" y="1950.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (159 samples, 10.81%)</title><rect x="18.8" y="1923.0" width="127.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.8" y="1934.0">com/linecorp/dec..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (159 samples, 10.81%)</title><rect x="18.8" y="1907.0" width="127.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="21.8" y="1918.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (159 samples, 10.81%)</title><rect x="18.8" y="1891.0" width="127.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.8" y="1902.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (159 samples, 10.81%)</title><rect x="18.8" y="1875.0" width="127.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="21.8" y="1886.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (113 samples, 7.68%)</title><rect x="18.8" y="1859.0" width="90.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.8" y="1870.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (17 samples, 1.16%)</title><rect x="18.8" y="1843.0" width="13.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.8" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (17 samples, 1.16%)</title><rect x="18.8" y="1827.0" width="13.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.8" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (15 samples, 1.02%)</title><rect x="20.4" y="1811.0" width="12.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.4" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (15 samples, 1.02%)</title><rect x="20.4" y="1795.0" width="12.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.4" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (12 samples, 0.82%)</title><rect x="32.5" y="1843.0" width="9.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="35.5" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (12 samples, 0.82%)</title><rect x="32.5" y="1827.0" width="9.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="35.5" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (6 samples, 0.41%)</title><rect x="34.1" y="1811.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="37.1" y="1822.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (5 samples, 0.34%)</title><rect x="34.9" y="1795.0" width="4.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="37.9" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.27%)</title><rect x="38.9" y="1811.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="41.9" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (84 samples, 5.71%)</title><rect x="42.1" y="1843.0" width="67.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="45.1" y="1854.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (84 samples, 5.71%)</title><rect x="42.1" y="1827.0" width="67.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="45.1" y="1838.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (83 samples, 5.64%)</title><rect x="42.1" y="1811.0" width="66.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="45.1" y="1822.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (83 samples, 5.64%)</title><rect x="42.1" y="1795.0" width="66.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="45.1" y="1806.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (79 samples, 5.37%)</title><rect x="45.3" y="1779.0" width="63.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="48.3" y="1790.0">sun/mis..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.07%)</title><rect x="46.1" y="1763.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="49.1" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Unpark (66 samples, 4.49%)</title><rect x="46.9" y="1763.0" width="52.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="49.9" y="1774.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.20%)</title><rect x="46.9" y="1747.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="49.9" y="1758.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.14%)</title><rect x="49.3" y="1747.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="52.3" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (47 samples, 3.20%)</title><rect x="50.9" y="1747.0" width="37.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="53.9" y="1758.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.14%)</title><rect x="88.6" y="1747.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="91.6" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 0.82%)</title><rect x="90.2" y="1747.0" width="9.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="93.2" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.34%)</title><rect x="99.8" y="1763.0" width="4.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="102.8" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.27%)</title><rect x="103.9" y="1763.0" width="3.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="106.9" y="1774.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.14%)</title><rect x="107.1" y="1763.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="110.1" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.07%)</title><rect x="108.7" y="1811.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="111.7" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.14%)</title><rect x="109.5" y="1859.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="112.5" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.14%)</title><rect x="109.5" y="1843.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="112.5" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.14%)</title><rect x="109.5" y="1827.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="112.5" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.27%)</title><rect x="111.1" y="1859.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="114.1" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (4 samples, 0.27%)</title><rect x="111.1" y="1843.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="114.1" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.27%)</title><rect x="111.1" y="1827.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="114.1" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="112.7" y="1811.0" width="1.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="115.7" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (40 samples, 2.72%)</title><rect x="114.3" y="1859.0" width="32.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="117.3" y="1870.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (40 samples, 2.72%)</title><rect x="114.3" y="1843.0" width="32.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.3" y="1854.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="114.3" y="1827.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="117.3" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.07%)</title><rect x="114.3" y="1811.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="117.3" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (39 samples, 2.65%)</title><rect x="115.1" y="1827.0" width="31.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="118.1" y="1838.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.14%)</title><rect x="144.8" y="1811.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="147.8" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (3 samples, 0.20%)</title><rect x="146.4" y="1955.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="149.4" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.20%)</title><rect x="146.4" y="1939.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="149.4" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.07%)</title><rect x="148.8" y="1955.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="151.8" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="148.8" y="1939.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="151.8" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="148.8" y="1923.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="151.8" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (26 samples, 1.77%)</title><rect x="149.6" y="1955.0" width="20.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="152.6" y="1966.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (26 samples, 1.77%)</title><rect x="149.6" y="1939.0" width="20.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="152.6" y="1950.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 0.41%)</title><rect x="161.6" y="1923.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="164.6" y="1934.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.14%)</title><rect x="161.6" y="1907.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="164.6" y="1918.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.27%)</title><rect x="163.2" y="1907.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="166.2" y="1918.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.14%)</title><rect x="166.4" y="1923.0" width="1.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="169.4" y="1934.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.20%)</title><rect x="168.0" y="1923.0" width="2.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="171.0" y="1934.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="170.4" y="1987.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="173.4" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.07%)</title><rect x="171.2" y="1987.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="174.2" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.07%)</title><rect x="171.2" y="1971.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="174.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="171.2" y="1955.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="174.2" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.07%)</title><rect x="171.2" y="1939.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="174.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.41%)</title><rect x="172.0" y="1987.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="175.0" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.41%)</title><rect x="172.0" y="1971.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="175.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.41%)</title><rect x="172.0" y="1955.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="175.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.41%)</title><rect x="172.0" y="1939.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="175.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (42 samples, 2.86%)</title><rect x="176.9" y="2003.0" width="33.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="179.9" y="2014.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (42 samples, 2.86%)</title><rect x="176.9" y="1987.0" width="33.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="179.9" y="1998.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (24 samples, 1.63%)</title><rect x="177.7" y="1971.0" width="19.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="180.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (24 samples, 1.63%)</title><rect x="177.7" y="1955.0" width="19.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="180.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (24 samples, 1.63%)</title><rect x="177.7" y="1939.0" width="19.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="180.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (24 samples, 1.63%)</title><rect x="177.7" y="1923.0" width="19.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="180.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (24 samples, 1.63%)</title><rect x="177.7" y="1907.0" width="19.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="180.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 0.82%)</title><rect x="179.3" y="1891.0" width="9.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="182.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (8 samples, 0.54%)</title><rect x="181.7" y="1875.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="184.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (8 samples, 0.54%)</title><rect x="181.7" y="1859.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="184.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (8 samples, 0.54%)</title><rect x="181.7" y="1843.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="184.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (8 samples, 0.54%)</title><rect x="181.7" y="1827.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="184.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (8 samples, 0.54%)</title><rect x="181.7" y="1811.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="184.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (8 samples, 0.54%)</title><rect x="181.7" y="1795.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="184.7" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (8 samples, 0.54%)</title><rect x="181.7" y="1779.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="184.7" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.07%)</title><rect x="188.1" y="1875.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="191.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (10 samples, 0.68%)</title><rect x="188.9" y="1891.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="191.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.68%)</title><rect x="188.9" y="1875.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="191.9" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="188.9" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="191.9" y="1870.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="188.9" y="1843.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="191.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (6 samples, 0.41%)</title><rect x="189.7" y="1859.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="192.7" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.of (6 samples, 0.41%)</title><rect x="189.7" y="1843.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="192.7" y="1854.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="193.7" y="1827.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="196.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 0.20%)</title><rect x="194.5" y="1859.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="197.5" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.20%)</title><rect x="194.5" y="1843.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="197.5" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.61%)</title><rect x="196.9" y="1971.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="199.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.54%)</title><rect x="196.9" y="1955.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.54%)</title><rect x="196.9" y="1939.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.9" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="196.9" y="1923.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="199.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1925129129.accept (1 samples, 0.07%)</title><rect x="196.9" y="1907.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.07%)</title><rect x="196.9" y="1891.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="199.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="196.9" y="1875.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="199.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.07%)</title><rect x="196.9" y="1859.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="199.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.14%)</title><rect x="197.7" y="1923.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="200.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.14%)</title><rect x="197.7" y="1907.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="200.7" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="198.5" y="1891.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="201.5" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="198.5" y="1875.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="201.5" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="198.5" y="1859.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="201.5" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="198.5" y="1843.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="201.5" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="198.5" y="1827.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="201.5" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$220/997254795.get (1 samples, 0.07%)</title><rect x="198.5" y="1811.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="201.5" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.07%)</title><rect x="199.3" y="1923.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="202.3" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="199.3" y="1907.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="202.3" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="199.3" y="1891.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="202.3" y="1902.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="199.3" y="1875.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.3" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="199.3" y="1859.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.07%)</title><rect x="199.3" y="1843.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="202.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (4 samples, 0.27%)</title><rect x="200.1" y="1923.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="203.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (4 samples, 0.27%)</title><rect x="200.1" y="1907.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="203.1" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.27%)</title><rect x="200.1" y="1891.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.1" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.27%)</title><rect x="200.1" y="1875.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.1" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.07%)</title><rect x="200.9" y="1859.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="203.9" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.07%)</title><rect x="200.9" y="1843.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="203.9" y="1854.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="200.9" y="1827.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="203.9" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="200.9" y="1811.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="203.9" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="200.9" y="1795.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="203.9" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="201.7" y="1859.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="204.7" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="201.7" y="1843.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="204.7" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.14%)</title><rect x="201.7" y="1827.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="204.7" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="201.7" y="1811.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.7" y="1822.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="201.7" y="1795.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="204.7" y="1806.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.07%)</title><rect x="201.7" y="1779.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="204.7" y="1790.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.07%)</title><rect x="201.7" y="1763.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.7" y="1774.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.07%)</title><rect x="201.7" y="1747.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="204.7" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="202.5" y="1811.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.5" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="202.5" y="1795.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.5" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="202.5" y="1779.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.5" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.07%)</title><rect x="203.3" y="1955.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="206.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.07%)</title><rect x="203.3" y="1939.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.20%)</title><rect x="204.1" y="1971.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="207.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.20%)</title><rect x="204.1" y="1955.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="207.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.07%)</title><rect x="204.1" y="1939.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="207.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.07%)</title><rect x="204.1" y="1923.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.07%)</title><rect x="204.1" y="1907.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="207.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/Errors.forCode (1 samples, 0.07%)</title><rect x="204.1" y="1891.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="207.1" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="204.1" y="1875.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="207.1" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="204.1" y="1859.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="207.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.14%)</title><rect x="204.9" y="1939.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="207.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.14%)</title><rect x="204.9" y="1923.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.07%)</title><rect x="204.9" y="1907.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="204.9" y="1891.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="204.9" y="1875.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="207.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.07%)</title><rect x="204.9" y="1859.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="207.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.07%)</title><rect x="204.9" y="1843.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="207.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="204.9" y="1827.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="207.9" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.07%)</title><rect x="205.7" y="1907.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="208.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.07%)</title><rect x="205.7" y="1891.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="208.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.07%)</title><rect x="205.7" y="1875.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.07%)</title><rect x="205.7" y="1859.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="208.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.07%)</title><rect x="205.7" y="1843.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="208.7" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.07%)</title><rect x="205.7" y="1827.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="208.7" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.07%)</title><rect x="205.7" y="1811.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="208.7" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.07%)</title><rect x="205.7" y="1795.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.7" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="205.7" y="1779.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="208.7" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.07%)</title><rect x="205.7" y="1763.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.7" y="1774.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="205.7" y="1747.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="208.7" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.27%)</title><rect x="206.5" y="1971.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="209.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.27%)</title><rect x="206.5" y="1955.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="209.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.20%)</title><rect x="207.3" y="1939.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="210.3" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.07%)</title><rect x="207.3" y="1923.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="210.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.07%)</title><rect x="207.3" y="1907.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="210.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.07%)</title><rect x="207.3" y="1891.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="210.3" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.07%)</title><rect x="207.3" y="1875.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="210.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.14%)</title><rect x="208.1" y="1923.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.1" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="208.9" y="1907.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="211.9" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="208.9" y="1891.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="211.9" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="208.9" y="1875.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.9" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="208.9" y="1859.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.9" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="208.9" y="1843.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="211.9" y="1854.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="208.9" y="1827.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="211.9" y="1838.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="208.9" y="1811.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="211.9" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="208.9" y="1795.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="211.9" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.07%)</title><rect x="209.7" y="1971.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="212.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="209.7" y="1955.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="212.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="209.7" y="1939.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="212.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="209.7" y="1923.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="212.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="209.7" y="1907.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="212.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.07%)</title><rect x="209.7" y="1891.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="212.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Avg.update (1 samples, 0.07%)</title><rect x="209.7" y="1875.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="212.7" y="1886.0"></text>
</g>
<g>
<title>java/lang/Thread.run (694 samples, 47.18%)</title><rect x="210.5" y="2035.0" width="556.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.5" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (694 samples, 47.18%)</title><rect x="210.5" y="2019.0" width="556.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="213.5" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (694 samples, 47.18%)</title><rect x="210.5" y="2003.0" width="556.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="213.5" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.20%)</title><rect x="215.4" y="1987.0" width="2.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="218.4" y="1998.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.20%)</title><rect x="215.4" y="1971.0" width="2.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="218.4" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/421643679.run (472 samples, 32.09%)</title><rect x="217.8" y="1987.0" width="378.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="220.8" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (472 samples, 32.09%)</title><rect x="217.8" y="1971.0" width="378.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="220.8" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (472 samples, 32.09%)</title><rect x="217.8" y="1955.0" width="378.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="220.8" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (461 samples, 31.34%)</title><rect x="217.8" y="1939.0" width="369.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="220.8" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipe..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (6 samples, 0.41%)</title><rect x="217.8" y="1923.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="220.8" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (6 samples, 0.41%)</title><rect x="217.8" y="1907.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.8" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$186/216426739.get (6 samples, 0.41%)</title><rect x="217.8" y="1891.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.8" y="1902.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.41%)</title><rect x="217.8" y="1875.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="220.8" y="1886.0"></text>
</g>
<g>
<title>java/lang/Long.&lt;init&gt; (6 samples, 0.41%)</title><rect x="217.8" y="1859.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="220.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/Number.&lt;init&gt; (6 samples, 0.41%)</title><rect x="217.8" y="1843.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="220.8" y="1854.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.27%)</title><rect x="219.4" y="1827.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="222.4" y="1838.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.27%)</title><rect x="219.4" y="1811.0" width="3.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="222.4" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (137 samples, 9.31%)</title><rect x="222.6" y="1923.0" width="109.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="225.6" y="1934.0">com/linecorp/..</text>
</g>
<g>
<title>[vdso] (4 samples, 0.27%)</title><rect x="231.4" y="1907.0" width="3.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="234.4" y="1918.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.54%)</title><rect x="234.6" y="1907.0" width="6.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="237.6" y="1918.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.41%)</title><rect x="236.2" y="1891.0" width="4.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="239.2" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (114 samples, 7.75%)</title><rect x="241.0" y="1907.0" width="91.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="244.0" y="1918.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (114 samples, 7.75%)</title><rect x="241.0" y="1891.0" width="91.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="244.0" y="1902.0">com/linecor..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="241.0" y="1875.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="244.0" y="1886.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="241.0" y="1859.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="244.0" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="241.0" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="244.0" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="241.0" y="1827.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="244.0" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="241.0" y="1811.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="244.0" y="1822.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.07%)</title><rect x="241.0" y="1795.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="244.0" y="1806.0"></text>
</g>
<g>
<title>Monitor::TrySpin(Thread*) (1 samples, 0.07%)</title><rect x="241.0" y="1779.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="244.0" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (113 samples, 7.68%)</title><rect x="241.8" y="1875.0" width="90.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="244.8" y="1886.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (113 samples, 7.68%)</title><rect x="241.8" y="1859.0" width="90.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="244.8" y="1870.0">com/lineco..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (113 samples, 7.68%)</title><rect x="241.8" y="1843.0" width="90.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="244.8" y="1854.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (29 samples, 1.97%)</title><rect x="241.8" y="1827.0" width="23.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="244.8" y="1838.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (8 samples, 0.54%)</title><rect x="241.8" y="1811.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="244.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (8 samples, 0.54%)</title><rect x="241.8" y="1795.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="244.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (8 samples, 0.54%)</title><rect x="241.8" y="1779.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="244.8" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.54%)</title><rect x="241.8" y="1763.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="244.8" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (8 samples, 0.54%)</title><rect x="241.8" y="1747.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="244.8" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.20%)</title><rect x="245.8" y="1731.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (21 samples, 1.43%)</title><rect x="248.2" y="1811.0" width="16.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="251.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (21 samples, 1.43%)</title><rect x="248.2" y="1795.0" width="16.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="251.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (9 samples, 0.61%)</title><rect x="249.0" y="1779.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="252.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (9 samples, 0.61%)</title><rect x="249.0" y="1763.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="252.0" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="255.5" y="1747.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="258.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (11 samples, 0.75%)</title><rect x="256.3" y="1779.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (11 samples, 0.75%)</title><rect x="256.3" y="1763.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (5 samples, 0.34%)</title><rect x="256.3" y="1747.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="259.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.27%)</title><rect x="260.3" y="1747.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="263.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (2 samples, 0.14%)</title><rect x="261.1" y="1731.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.&lt;init&gt; (1 samples, 0.07%)</title><rect x="262.7" y="1731.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="265.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.14%)</title><rect x="263.5" y="1747.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="266.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (80 samples, 5.44%)</title><rect x="265.1" y="1827.0" width="64.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.1" y="1838.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.20%)</title><rect x="265.1" y="1811.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (3 samples, 0.20%)</title><rect x="265.1" y="1795.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="268.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.20%)</title><rect x="265.1" y="1779.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="268.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (3 samples, 0.20%)</title><rect x="265.1" y="1763.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="268.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (3 samples, 0.20%)</title><rect x="265.1" y="1747.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="268.1" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.07%)</title><rect x="266.7" y="1731.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="269.7" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (1 samples, 0.07%)</title><rect x="266.7" y="1715.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="269.7" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.27%)</title><rect x="267.5" y="1811.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="270.5" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.27%)</title><rect x="267.5" y="1795.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="270.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.14%)</title><rect x="269.1" y="1779.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 0.20%)</title><rect x="270.7" y="1811.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="273.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.20%)</title><rect x="270.7" y="1795.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="273.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.14%)</title><rect x="270.7" y="1779.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.14%)</title><rect x="270.7" y="1763.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="273.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="272.3" y="1779.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="275.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.34%)</title><rect x="273.1" y="1811.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="276.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.14%)</title><rect x="273.1" y="1795.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="276.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.20%)</title><rect x="274.7" y="1795.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (65 samples, 4.42%)</title><rect x="277.1" y="1811.0" width="52.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.1" y="1822.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.22%)</title><rect x="278.7" y="1795.0" width="14.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="281.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.20%)</title><rect x="278.7" y="1779.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.20%)</title><rect x="278.7" y="1763.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.20%)</title><rect x="278.7" y="1747.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (12 samples, 0.82%)</title><rect x="281.1" y="1779.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.14%)</title><rect x="290.8" y="1779.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="293.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.14%)</title><rect x="290.8" y="1763.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="293.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="292.4" y="1779.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (45 samples, 3.06%)</title><rect x="293.2" y="1795.0" width="36.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="296.2" y="1806.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (45 samples, 3.06%)</title><rect x="293.2" y="1779.0" width="36.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="296.2" y="1790.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (45 samples, 3.06%)</title><rect x="293.2" y="1763.0" width="36.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.2" y="1774.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.16%)</title><rect x="300.4" y="1747.0" width="13.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="303.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (10 samples, 0.68%)</title><rect x="302.8" y="1731.0" width="8.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="305.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (10 samples, 0.68%)</title><rect x="302.8" y="1715.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="305.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (10 samples, 0.68%)</title><rect x="302.8" y="1699.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="305.8" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.34%)</title><rect x="306.8" y="1683.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="309.8" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.20%)</title><rect x="310.8" y="1731.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="313.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="313.2" y="1731.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="316.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (9 samples, 0.61%)</title><rect x="314.0" y="1747.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="317.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.41%)</title><rect x="316.4" y="1731.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="319.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.41%)</title><rect x="316.4" y="1715.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="319.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.41%)</title><rect x="316.4" y="1699.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="319.4" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.41%)</title><rect x="316.4" y="1683.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="319.4" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.14%)</title><rect x="321.2" y="1747.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="324.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.07%)</title><rect x="322.8" y="1747.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="325.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.07%)</title><rect x="322.8" y="1731.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="325.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.07%)</title><rect x="322.8" y="1715.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="325.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.07%)</title><rect x="322.8" y="1699.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="325.8" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.07%)</title><rect x="322.8" y="1683.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="325.8" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.07%)</title><rect x="322.8" y="1667.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="325.8" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.07%)</title><rect x="322.8" y="1651.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.8" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.14%)</title><rect x="323.7" y="1747.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="326.7" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.14%)</title><rect x="323.7" y="1731.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="326.7" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.14%)</title><rect x="323.7" y="1715.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="326.7" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.07%)</title><rect x="324.5" y="1699.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="327.5" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (5 samples, 0.34%)</title><rect x="325.3" y="1747.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="328.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 0.27%)</title><rect x="329.3" y="1827.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="332.3" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 0.27%)</title><rect x="329.3" y="1811.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="332.3" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (4 samples, 0.27%)</title><rect x="329.3" y="1795.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="332.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 0.27%)</title><rect x="329.3" y="1779.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="332.3" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.27%)</title><rect x="329.3" y="1763.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="332.3" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (318 samples, 21.62%)</title><rect x="332.5" y="1923.0" width="255.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="335.5" y="1934.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (53 samples, 3.60%)</title><rect x="333.3" y="1907.0" width="42.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="336.3" y="1918.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 0.14%)</title><rect x="333.3" y="1891.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="336.3" y="1902.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (51 samples, 3.47%)</title><rect x="334.9" y="1891.0" width="40.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="337.9" y="1902.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (51 samples, 3.47%)</title><rect x="334.9" y="1875.0" width="40.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="337.9" y="1886.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (11 samples, 0.75%)</title><rect x="334.9" y="1859.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="337.9" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (11 samples, 0.75%)</title><rect x="334.9" y="1843.0" width="8.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="337.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (11 samples, 0.75%)</title><rect x="334.9" y="1827.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="337.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (11 samples, 0.75%)</title><rect x="334.9" y="1811.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="337.9" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.07%)</title><rect x="342.9" y="1795.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="345.9" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.07%)</title><rect x="342.9" y="1779.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="345.9" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (40 samples, 2.72%)</title><rect x="343.7" y="1859.0" width="32.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="346.7" y="1870.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (37 samples, 2.52%)</title><rect x="346.1" y="1843.0" width="29.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="349.1" y="1854.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.48%)</title><rect x="370.2" y="1827.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="373.2" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.41%)</title><rect x="375.8" y="1907.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="378.8" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="379.0" y="1891.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="382.0" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.07%)</title><rect x="379.0" y="1875.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="382.0" y="1886.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.07%)</title><rect x="379.8" y="1891.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="382.8" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (181 samples, 12.30%)</title><rect x="380.6" y="1907.0" width="145.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="383.6" y="1918.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (181 samples, 12.30%)</title><rect x="380.6" y="1891.0" width="145.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="383.6" y="1902.0">com/linecorp/decat..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.41%)</title><rect x="383.0" y="1875.0" width="4.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="386.0" y="1886.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.34%)</title><rect x="383.8" y="1859.0" width="4.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="386.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (58 samples, 3.94%)</title><rect x="387.8" y="1875.0" width="46.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="390.8" y="1886.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (42 samples, 2.86%)</title><rect x="393.4" y="1859.0" width="33.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="396.4" y="1870.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (40 samples, 2.72%)</title><rect x="395.0" y="1843.0" width="32.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="398.0" y="1854.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (26 samples, 1.77%)</title><rect x="402.3" y="1827.0" width="20.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="405.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (26 samples, 1.77%)</title><rect x="402.3" y="1811.0" width="20.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="405.3" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (26 samples, 1.77%)</title><rect x="402.3" y="1795.0" width="20.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="405.3" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (13 samples, 0.88%)</title><rect x="407.9" y="1779.0" width="10.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="410.9" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.27%)</title><rect x="408.7" y="1763.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="411.7" y="1774.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="408.7" y="1747.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="411.7" y="1758.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="409.5" y="1747.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="412.5" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.14%)</title><rect x="410.3" y="1747.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="413.3" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.14%)</title><rect x="410.3" y="1731.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="413.3" y="1742.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="410.3" y="1715.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="413.3" y="1726.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="410.3" y="1699.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="413.3" y="1710.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.07%)</title><rect x="411.1" y="1715.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="414.1" y="1726.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (2 samples, 0.14%)</title><rect x="411.9" y="1763.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="414.9" y="1774.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.41%)</title><rect x="413.5" y="1763.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="416.5" y="1774.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.07%)</title><rect x="413.5" y="1747.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="416.5" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (5 samples, 0.34%)</title><rect x="414.3" y="1747.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="417.3" y="1758.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.07%)</title><rect x="414.3" y="1731.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="417.3" y="1742.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="414.3" y="1715.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="417.3" y="1726.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="415.1" y="1731.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="418.1" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="415.1" y="1715.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="418.1" y="1726.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="415.1" y="1699.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="418.1" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="415.1" y="1683.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="418.1" y="1694.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="415.1" y="1667.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="418.1" y="1678.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.07%)</title><rect x="415.1" y="1651.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="418.1" y="1662.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="415.9" y="1731.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="418.9" y="1742.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.07%)</title><rect x="416.7" y="1731.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="419.7" y="1742.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.07%)</title><rect x="417.5" y="1731.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="420.5" y="1742.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.41%)</title><rect x="418.3" y="1779.0" width="4.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="421.3" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.27%)</title><rect x="423.1" y="1827.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="426.1" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="426.3" y="1827.0" width="0.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="429.3" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="427.1" y="1859.0" width="0.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="430.1" y="1870.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.54%)</title><rect x="427.9" y="1859.0" width="6.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="430.9" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.20%)</title><rect x="434.4" y="1875.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="437.4" y="1886.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.41%)</title><rect x="436.8" y="1875.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="439.8" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (3 samples, 0.20%)</title><rect x="436.8" y="1859.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="439.8" y="1870.0"></text>
</g>
<g>
<title>_new_array_Java (1 samples, 0.07%)</title><rect x="436.8" y="1843.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="439.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.07%)</title><rect x="437.6" y="1843.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="440.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.07%)</title><rect x="438.4" y="1843.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="441.4" y="1854.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 0.20%)</title><rect x="439.2" y="1859.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="442.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.14%)</title><rect x="439.2" y="1843.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="442.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.07%)</title><rect x="440.8" y="1843.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="443.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="441.6" y="1875.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="444.6" y="1886.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.07%)</title><rect x="441.6" y="1859.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="444.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.07%)</title><rect x="441.6" y="1843.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="444.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.07%)</title><rect x="441.6" y="1827.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="444.6" y="1838.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.07%)</title><rect x="441.6" y="1811.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="444.6" y="1822.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (104 samples, 7.07%)</title><rect x="442.4" y="1875.0" width="83.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="445.4" y="1886.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (102 samples, 6.93%)</title><rect x="444.0" y="1859.0" width="81.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="447.0" y="1870.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (12 samples, 0.82%)</title><rect x="444.0" y="1843.0" width="9.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="447.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (12 samples, 0.82%)</title><rect x="444.0" y="1827.0" width="9.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="447.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (12 samples, 0.82%)</title><rect x="444.0" y="1811.0" width="9.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="447.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (12 samples, 0.82%)</title><rect x="444.0" y="1795.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="447.0" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.07%)</title><rect x="452.8" y="1779.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="455.8" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (90 samples, 6.12%)</title><rect x="453.6" y="1843.0" width="72.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="456.6" y="1854.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (86 samples, 5.85%)</title><rect x="456.8" y="1827.0" width="69.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="459.8" y="1838.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (53 samples, 3.60%)</title><rect x="483.3" y="1811.0" width="42.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="486.3" y="1822.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.27%)</title><rect x="504.9" y="1795.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="507.9" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (16 samples, 1.09%)</title><rect x="508.2" y="1795.0" width="12.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="511.2" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="518.6" y="1779.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="521.6" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="519.4" y="1779.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="522.4" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="520.2" y="1763.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="523.2" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="520.2" y="1747.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="523.2" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="520.2" y="1731.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="523.2" y="1742.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="520.2" y="1715.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="523.2" y="1726.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.07%)</title><rect x="520.2" y="1699.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="523.2" y="1710.0"></text>
</g>
<g>
<title>vtable stub (6 samples, 0.41%)</title><rect x="521.0" y="1795.0" width="4.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="524.0" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (54 samples, 3.67%)</title><rect x="525.8" y="1907.0" width="43.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="528.8" y="1918.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (54 samples, 3.67%)</title><rect x="525.8" y="1891.0" width="43.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="528.8" y="1902.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/983331208.process (30 samples, 2.04%)</title><rect x="527.4" y="1875.0" width="24.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="530.4" y="1886.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (30 samples, 2.04%)</title><rect x="527.4" y="1859.0" width="24.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="530.4" y="1870.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (25 samples, 1.70%)</title><rect x="528.2" y="1843.0" width="20.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="531.2" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.14%)</title><rect x="534.6" y="1827.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="537.6" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.14%)</title><rect x="534.6" y="1811.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="537.6" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.14%)</title><rect x="534.6" y="1795.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="537.6" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.14%)</title><rect x="534.6" y="1779.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="537.6" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.14%)</title><rect x="534.6" y="1763.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="537.6" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (2 samples, 0.14%)</title><rect x="534.6" y="1747.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="537.6" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (9 samples, 0.61%)</title><rect x="536.2" y="1827.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="539.2" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.48%)</title><rect x="537.8" y="1811.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="540.8" y="1822.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.41%)</title><rect x="538.6" y="1795.0" width="4.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="541.6" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.14%)</title><rect x="543.4" y="1827.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="546.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.14%)</title><rect x="545.1" y="1827.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="548.1" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.14%)</title><rect x="545.1" y="1811.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="548.1" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.14%)</title><rect x="545.1" y="1795.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="548.1" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (2 samples, 0.14%)</title><rect x="546.7" y="1827.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="549.7" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (4 samples, 0.27%)</title><rect x="548.3" y="1843.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="551.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.27%)</title><rect x="548.3" y="1827.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="551.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.27%)</title><rect x="548.3" y="1811.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="551.3" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.27%)</title><rect x="548.3" y="1795.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="551.3" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.27%)</title><rect x="551.5" y="1875.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="554.5" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.27%)</title><rect x="551.5" y="1859.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="554.5" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="553.9" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="556.9" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="553.9" y="1827.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="556.9" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="553.9" y="1811.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="556.9" y="1822.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (5 samples, 0.34%)</title><rect x="554.7" y="1875.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="557.7" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (5 samples, 0.34%)</title><rect x="554.7" y="1859.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="557.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/407053281.get$Lambda (5 samples, 0.34%)</title><rect x="554.7" y="1843.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="557.7" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/407053281.&lt;init&gt; (5 samples, 0.34%)</title><rect x="554.7" y="1827.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="557.7" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.54%)</title><rect x="558.7" y="1875.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="561.7" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.48%)</title><rect x="559.5" y="1859.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="562.5" y="1870.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.20%)</title><rect x="559.5" y="1843.0" width="2.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="562.5" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (4 samples, 0.27%)</title><rect x="561.9" y="1843.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="564.9" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="565.1" y="1875.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="568.1" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="565.1" y="1859.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="568.1" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.07%)</title><rect x="565.1" y="1843.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="568.1" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.rangeCheck (1 samples, 0.07%)</title><rect x="565.1" y="1827.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="568.1" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.27%)</title><rect x="565.9" y="1875.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="568.9" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.14%)</title><rect x="567.5" y="1859.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="570.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1671063493.linkToTargetMethod (1 samples, 0.07%)</title><rect x="569.1" y="1907.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="572.1" y="1918.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/110771485.invokeStatic_L3_L (1 samples, 0.07%)</title><rect x="569.1" y="1891.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="572.1" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/763121403.get$Lambda (1 samples, 0.07%)</title><rect x="569.1" y="1875.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="572.1" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="569.1" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="572.1" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="569.1" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="572.1" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="569.1" y="1827.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="572.1" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="569.1" y="1811.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="572.1" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="569.1" y="1795.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="572.1" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="569.1" y="1779.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="572.1" y="1790.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.07%)</title><rect x="569.1" y="1763.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="572.1" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.07%)</title><rect x="569.1" y="1747.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="572.1" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.07%)</title><rect x="569.1" y="1731.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="572.1" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 1.50%)</title><rect x="569.9" y="1907.0" width="17.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="572.9" y="1918.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.54%)</title><rect x="573.9" y="1891.0" width="6.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="576.9" y="1902.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.54%)</title><rect x="573.9" y="1875.0" width="6.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="576.9" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 0.61%)</title><rect x="580.3" y="1891.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="583.3" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.48%)</title><rect x="582.0" y="1875.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="585.0" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/763121403.accept (7 samples, 0.48%)</title><rect x="582.0" y="1859.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="585.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (7 samples, 0.48%)</title><rect x="582.0" y="1843.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="585.0" y="1854.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (7 samples, 0.48%)</title><rect x="582.0" y="1827.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="585.0" y="1838.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (7 samples, 0.48%)</title><rect x="582.0" y="1811.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="585.0" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.34%)</title><rect x="583.6" y="1795.0" width="4.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="586.6" y="1806.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.27%)</title><rect x="584.4" y="1779.0" width="3.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="587.4" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 0.75%)</title><rect x="587.6" y="1939.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="590.6" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 0.75%)</title><rect x="587.6" y="1923.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="590.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.68%)</title><rect x="588.4" y="1907.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="591.4" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/763121403.accept (1 samples, 0.07%)</title><rect x="588.4" y="1891.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="591.4" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (1 samples, 0.07%)</title><rect x="588.4" y="1875.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="591.4" y="1886.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.07%)</title><rect x="588.4" y="1859.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="591.4" y="1870.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.07%)</title><rect x="588.4" y="1843.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="591.4" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$269/1614290659.accept (9 samples, 0.61%)</title><rect x="589.2" y="1891.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="592.2" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$processTask$50 (9 samples, 0.61%)</title><rect x="589.2" y="1875.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="592.2" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1091711179.complete (9 samples, 0.61%)</title><rect x="589.2" y="1859.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="592.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$35 (9 samples, 0.61%)</title><rect x="589.2" y="1843.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="592.2" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (9 samples, 0.61%)</title><rect x="589.2" y="1827.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="592.2" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 0.61%)</title><rect x="589.2" y="1811.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="592.2" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 0.61%)</title><rect x="589.2" y="1795.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="592.2" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (9 samples, 0.61%)</title><rect x="589.2" y="1779.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="592.2" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (9 samples, 0.61%)</title><rect x="589.2" y="1763.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="592.2" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.07%)</title><rect x="596.4" y="1987.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="599.4" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.14%)</title><rect x="597.2" y="1987.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="600.2" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.14%)</title><rect x="597.2" y="1971.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="600.2" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.14%)</title><rect x="597.2" y="1955.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="600.2" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.14%)</title><rect x="597.2" y="1939.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="600.2" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (209 samples, 14.21%)</title><rect x="598.8" y="1987.0" width="167.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="601.8" y="1998.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (208 samples, 14.14%)</title><rect x="599.6" y="1971.0" width="166.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="602.6" y="1982.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (167 samples, 11.35%)</title><rect x="623.7" y="1955.0" width="133.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="626.7" y="1966.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (14 samples, 0.95%)</title><rect x="626.9" y="1939.0" width="11.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="629.9" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 0.95%)</title><rect x="626.9" y="1923.0" width="11.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="629.9" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 0.95%)</title><rect x="626.9" y="1907.0" width="11.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="629.9" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 0.95%)</title><rect x="626.9" y="1891.0" width="11.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="629.9" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (149 samples, 10.13%)</title><rect x="638.1" y="1939.0" width="119.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="641.1" y="1950.0">java/util/concu..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (149 samples, 10.13%)</title><rect x="638.1" y="1923.0" width="119.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="641.1" y="1934.0">sun/misc/Unsafe..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.07%)</title><rect x="646.1" y="1907.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="649.1" y="1918.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="646.9" y="1907.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="649.9" y="1918.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="647.7" y="1907.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="650.7" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (129 samples, 8.77%)</title><rect x="648.5" y="1907.0" width="103.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="651.5" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.14%)</title><rect x="653.3" y="1891.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="656.3" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (24 samples, 1.63%)</title><rect x="654.9" y="1891.0" width="19.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="657.9" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (10 samples, 0.68%)</title><rect x="662.2" y="1875.0" width="8.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="665.2" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.34%)</title><rect x="662.2" y="1859.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="665.2" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.14%)</title><rect x="664.6" y="1843.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="667.6" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.14%)</title><rect x="666.2" y="1859.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="669.2" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.20%)</title><rect x="667.8" y="1859.0" width="2.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="670.8" y="1870.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.34%)</title><rect x="670.2" y="1875.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="673.2" y="1886.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="674.2" y="1891.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="677.2" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.20%)</title><rect x="675.0" y="1891.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="678.0" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.48%)</title><rect x="677.4" y="1891.0" width="5.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="680.4" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (33 samples, 2.24%)</title><rect x="683.0" y="1891.0" width="26.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="686.0" y="1902.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (39 samples, 2.65%)</title><rect x="709.5" y="1891.0" width="31.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="712.5" y="1902.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (6 samples, 0.41%)</title><rect x="740.8" y="1891.0" width="4.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="743.8" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.07%)</title><rect x="745.6" y="1891.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="748.6" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="746.4" y="1891.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="749.4" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.07%)</title><rect x="747.2" y="1891.0" width="0.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="750.2" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (3 samples, 0.20%)</title><rect x="748.0" y="1891.0" width="2.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="751.0" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="750.4" y="1891.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="753.4" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="751.2" y="1891.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="754.2" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.27%)</title><rect x="752.0" y="1907.0" width="3.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="755.0" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.07%)</title><rect x="755.2" y="1907.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="758.2" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.14%)</title><rect x="756.0" y="1907.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="759.0" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 0.75%)</title><rect x="757.6" y="1955.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="760.6" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.75%)</title><rect x="757.6" y="1939.0" width="8.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="760.6" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.75%)</title><rect x="757.6" y="1923.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="760.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 0.75%)</title><rect x="757.6" y="1907.0" width="8.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="760.6" y="1918.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="766.5" y="1987.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="769.5" y="1998.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.07%)</title><rect x="767.3" y="2035.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="770.3" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="768.1" y="2035.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="771.1" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="768.1" y="2019.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="771.1" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="768.1" y="2003.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="771.1" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.clean (1 samples, 0.07%)</title><rect x="768.1" y="1987.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="771.1" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.remove (1 samples, 0.07%)</title><rect x="768.1" y="1971.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="771.1" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.replaceNode (1 samples, 0.07%)</title><rect x="768.1" y="1955.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="771.1" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.addCount (1 samples, 0.07%)</title><rect x="768.1" y="1939.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="771.1" y="1950.0"></text>
</g>
<g>
<title>start_thread (525 samples, 35.69%)</title><rect x="768.9" y="2035.0" width="421.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="771.9" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (525 samples, 35.69%)</title><rect x="768.9" y="2019.0" width="421.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="771.9" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 1.29%)</title><rect x="768.9" y="2003.0" width="15.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="771.9" y="2014.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 0.34%)</title><rect x="768.9" y="1987.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="771.9" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.34%)</title><rect x="768.9" y="1971.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="771.9" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.07%)</title><rect x="768.9" y="1955.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="771.9" y="1966.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.27%)</title><rect x="769.7" y="1955.0" width="3.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="772.7" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 0.95%)</title><rect x="772.9" y="1987.0" width="11.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="775.9" y="1998.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::add_time_secs(G1GCPhaseTimes::GCParPhases, unsigned int, double) (1 samples, 0.07%)</title><rect x="772.9" y="1971.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="775.9" y="1982.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.20%)</title><rect x="773.7" y="1971.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="776.7" y="1982.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.07%)</title><rect x="773.7" y="1955.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="776.7" y="1966.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.07%)</title><rect x="773.7" y="1939.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="776.7" y="1950.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.14%)</title><rect x="774.5" y="1955.0" width="1.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="777.5" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.27%)</title><rect x="776.1" y="1971.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="779.1" y="1982.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="776.1" y="1955.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="779.1" y="1966.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.07%)</title><rect x="776.1" y="1939.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="779.1" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.07%)</title><rect x="776.9" y="1955.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="779.9" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.07%)</title><rect x="776.9" y="1939.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="779.9" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.07%)</title><rect x="776.9" y="1923.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="779.9" y="1934.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.14%)</title><rect x="777.7" y="1955.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="780.7" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.07%)</title><rect x="777.7" y="1939.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="780.7" y="1950.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.07%)</title><rect x="778.5" y="1939.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="781.5" y="1950.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.07%)</title><rect x="778.5" y="1923.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="781.5" y="1934.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.41%)</title><rect x="779.3" y="1971.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="782.3" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.41%)</title><rect x="779.3" y="1955.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="782.3" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.34%)</title><rect x="779.3" y="1939.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="782.3" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.34%)</title><rect x="779.3" y="1923.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="782.3" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.34%)</title><rect x="779.3" y="1907.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="782.3" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.27%)</title><rect x="780.1" y="1891.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="783.1" y="1902.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_obj_dead(oopDesc*, HeapRegion const*) const (1 samples, 0.07%)</title><rect x="780.9" y="1875.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="783.9" y="1886.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.14%)</title><rect x="781.7" y="1875.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="784.7" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.07%)</title><rect x="782.5" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="785.5" y="1870.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.07%)</title><rect x="783.3" y="1939.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="786.3" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.07%)</title><rect x="783.3" y="1923.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="786.3" y="1934.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.07%)</title><rect x="783.3" y="1907.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="786.3" y="1918.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.07%)</title><rect x="783.3" y="1891.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="786.3" y="1902.0"></text>
</g>
<g>
<title>RSHashTableIter::has_next(unsigned long&amp;) (1 samples, 0.07%)</title><rect x="783.3" y="1875.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="786.3" y="1886.0"></text>
</g>
<g>
<title>JavaThread::run() (503 samples, 34.19%)</title><rect x="784.1" y="2003.0" width="403.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="787.1" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (503 samples, 34.19%)</title><rect x="784.1" y="1987.0" width="403.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="787.1" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (503 samples, 34.19%)</title><rect x="784.1" y="1971.0" width="403.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="787.1" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (502 samples, 34.13%)</title><rect x="784.1" y="1955.0" width="402.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="787.1" y="1966.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (501 samples, 34.06%)</title><rect x="784.1" y="1939.0" width="401.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="787.1" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (501 samples, 34.06%)</title><rect x="784.1" y="1923.0" width="401.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="787.1" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, b..</text>
</g>
<g>
<title>Compile::Code_Gen() (81 samples, 5.51%)</title><rect x="784.1" y="1907.0" width="65.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="787.1" y="1918.0">Compile..</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.27%)</title><rect x="784.1" y="1891.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="787.1" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.14%)</title><rect x="784.1" y="1875.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="787.1" y="1886.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.14%)</title><rect x="785.7" y="1875.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="788.7" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.07%)</title><rect x="785.7" y="1859.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="788.7" y="1870.0"></text>
</g>
<g>
<title>jmpConNode::rule() const (1 samples, 0.07%)</title><rect x="785.7" y="1843.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="788.7" y="1854.0"></text>
</g>
<g>
<title>MachNode::alignment_required() const (1 samples, 0.07%)</title><rect x="786.5" y="1859.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="789.5" y="1870.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.20%)</title><rect x="787.3" y="1891.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="790.3" y="1902.0"></text>
</g>
<g>
<title>Block::code_alignment() (1 samples, 0.07%)</title><rect x="787.3" y="1875.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="790.3" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="788.1" y="1875.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="791.1" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="788.1" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="791.1" y="1870.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.07%)</title><rect x="788.9" y="1875.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="791.9" y="1886.0"></text>
</g>
<g>
<title>MacroAssembler::MacroAssembler(CodeBuffer*) (1 samples, 0.07%)</title><rect x="788.9" y="1859.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="791.9" y="1870.0"></text>
</g>
<g>
<title>Matcher::match() (8 samples, 0.54%)</title><rect x="789.7" y="1891.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="792.7" y="1902.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (8 samples, 0.54%)</title><rect x="789.7" y="1875.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="792.7" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.27%)</title><rect x="791.3" y="1859.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="794.3" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.14%)</title><rect x="794.5" y="1859.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="797.5" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.14%)</title><rect x="794.5" y="1843.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="797.5" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.07%)</title><rect x="796.1" y="1891.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="799.1" y="1902.0"></text>
</g>
<g>
<title>Node::is_block_proj() const (1 samples, 0.07%)</title><rect x="796.1" y="1875.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="799.1" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.34%)</title><rect x="796.9" y="1891.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="799.9" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.34%)</title><rect x="796.9" y="1875.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="799.9" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.07%)</title><rect x="796.9" y="1859.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="799.9" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.14%)</title><rect x="797.7" y="1859.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="800.7" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.07%)</title><rect x="797.7" y="1843.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="800.7" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.07%)</title><rect x="798.5" y="1843.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="801.5" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.14%)</title><rect x="799.3" y="1859.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="802.3" y="1870.0"></text>
</g>
<g>
<title>MergeMemNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="800.1" y="1843.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="803.1" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (60 samples, 4.08%)</title><rect x="800.9" y="1891.0" width="48.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="803.9" y="1902.0">Phas..</text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.07%)</title><rect x="800.9" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="803.9" y="1886.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.07%)</title><rect x="801.7" y="1875.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="804.7" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.20%)</title><rect x="802.5" y="1875.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="805.5" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.20%)</title><rect x="805.0" y="1875.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="808.0" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="805.8" y="1859.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="808.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.07%)</title><rect x="806.6" y="1859.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="809.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.20%)</title><rect x="807.4" y="1875.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="810.4" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="807.4" y="1859.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="810.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.07%)</title><rect x="809.0" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="812.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="809.0" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="812.0" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (9 samples, 0.61%)</title><rect x="809.8" y="1875.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="812.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.07%)</title><rect x="814.6" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="817.6" y="1870.0"></text>
</g>
<g>
<title>decodeKlass_not_nullNode::rule() const (1 samples, 0.07%)</title><rect x="815.4" y="1859.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="818.4" y="1870.0"></text>
</g>
<g>
<title>loadConPNode::rule() const (1 samples, 0.07%)</title><rect x="816.2" y="1859.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="819.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (13 samples, 0.88%)</title><rect x="817.0" y="1875.0" width="10.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="820.0" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.07%)</title><rect x="821.0" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="824.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="821.8" y="1859.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="824.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.34%)</title><rect x="823.4" y="1859.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="826.4" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="826.6" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="829.6" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.07%)</title><rect x="827.4" y="1875.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="830.4" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.07%)</title><rect x="827.4" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="830.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.34%)</title><rect x="828.2" y="1875.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="831.2" y="1886.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.07%)</title><rect x="830.6" y="1859.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="833.6" y="1870.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.07%)</title><rect x="831.4" y="1859.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="834.4" y="1870.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.07%)</title><rect x="831.4" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="834.4" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.34%)</title><rect x="832.2" y="1875.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="835.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.20%)</title><rect x="833.0" y="1859.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="836.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="834.6" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="837.6" y="1854.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.07%)</title><rect x="835.4" y="1859.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="838.4" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (7 samples, 0.48%)</title><rect x="836.2" y="1875.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="839.2" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (7 samples, 0.48%)</title><rect x="836.2" y="1859.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="839.2" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (7 samples, 0.48%)</title><rect x="836.2" y="1843.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="839.2" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.07%)</title><rect x="836.2" y="1827.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="839.2" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (5 samples, 0.34%)</title><rect x="837.0" y="1827.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="840.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.07%)</title><rect x="841.1" y="1827.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="844.1" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.14%)</title><rect x="841.9" y="1875.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="844.9" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="842.7" y="1859.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="845.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.07%)</title><rect x="843.5" y="1875.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="846.5" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.41%)</title><rect x="844.3" y="1875.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="847.3" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.20%)</title><rect x="845.9" y="1859.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="848.9" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="847.5" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="850.5" y="1854.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="848.3" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="851.3" y="1870.0"></text>
</g>
<g>
<title>Compile::Optimize() (408 samples, 27.74%)</title><rect x="849.1" y="1907.0" width="327.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="852.1" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="849.1" y="1891.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="852.1" y="1902.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="849.1" y="1875.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="852.1" y="1886.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="849.1" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="852.1" y="1870.0"></text>
</g>
<g>
<title>Compile::update_dead_node_list(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="849.1" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="852.1" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (14 samples, 0.95%)</title><rect x="849.9" y="1891.0" width="11.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="852.9" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (14 samples, 0.95%)</title><rect x="849.9" y="1875.0" width="11.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="852.9" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (13 samples, 0.88%)</title><rect x="850.7" y="1859.0" width="10.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="853.7" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (11 samples, 0.75%)</title><rect x="851.5" y="1843.0" width="8.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="854.5" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.20%)</title><rect x="851.5" y="1827.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="854.5" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="851.5" y="1811.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="854.5" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="851.5" y="1795.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="854.5" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="851.5" y="1779.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="854.5" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="851.5" y="1763.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="854.5" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="851.5" y="1747.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="854.5" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="851.5" y="1731.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="854.5" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="851.5" y="1715.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="854.5" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1699.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="854.5" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1683.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="854.5" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1667.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="854.5" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1651.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="854.5" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1635.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="854.5" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1619.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="854.5" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1603.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="854.5" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1587.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="854.5" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1571.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="854.5" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1555.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="854.5" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1539.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="854.5" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1523.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="854.5" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1507.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="854.5" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1491.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="854.5" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1475.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="854.5" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1459.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="854.5" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1443.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="854.5" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1427.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="854.5" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1411.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="854.5" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1395.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="854.5" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1379.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="854.5" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1363.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="854.5" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1347.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="854.5" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1331.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="854.5" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1315.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="854.5" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1299.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="854.5" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1283.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="854.5" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1267.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="854.5" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1251.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="854.5" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1235.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="854.5" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1219.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="854.5" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1203.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="854.5" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1187.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="854.5" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1171.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="854.5" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1155.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="854.5" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1139.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="854.5" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1123.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="854.5" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1107.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="854.5" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1091.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="854.5" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1075.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="854.5" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1059.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="854.5" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1043.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="854.5" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1027.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="854.5" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="851.5" y="1011.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="854.5" y="1022.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="851.5" y="995.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="854.5" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="852.3" y="1699.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="855.3" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="852.3" y="1683.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="855.3" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="852.3" y="1667.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="855.3" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="852.3" y="1651.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="855.3" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="852.3" y="1635.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="855.3" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="852.3" y="1619.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="855.3" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="852.3" y="1603.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="855.3" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="852.3" y="1587.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="855.3" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="852.3" y="1571.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="855.3" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="852.3" y="1555.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="855.3" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="852.3" y="1539.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="855.3" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="852.3" y="1523.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="855.3" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="852.3" y="1507.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="855.3" y="1518.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="852.3" y="1491.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="855.3" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="853.1" y="1811.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="856.1" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="853.1" y="1795.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="856.1" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="853.1" y="1779.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="856.1" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="853.1" y="1763.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="856.1" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="853.1" y="1747.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="856.1" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="853.1" y="1731.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="856.1" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="853.1" y="1715.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="856.1" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="853.1" y="1699.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="856.1" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="853.1" y="1683.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="856.1" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="853.1" y="1667.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="856.1" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="853.1" y="1651.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="856.1" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="853.1" y="1635.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="856.1" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="853.1" y="1619.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="856.1" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="853.1" y="1603.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="856.1" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="853.1" y="1587.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="856.1" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="853.1" y="1571.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="856.1" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="853.1" y="1555.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="856.1" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="853.1" y="1539.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="856.1" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (8 samples, 0.54%)</title><rect x="853.9" y="1827.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="856.9" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (2 samples, 0.14%)</title><rect x="853.9" y="1811.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="856.9" y="1822.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (2 samples, 0.14%)</title><rect x="853.9" y="1795.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="856.9" y="1806.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_canonical_holder(int) (1 samples, 0.07%)</title><rect x="854.7" y="1779.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="857.7" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.41%)</title><rect x="855.5" y="1811.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="858.5" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="855.5" y="1795.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="858.5" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="855.5" y="1779.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="858.5" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="855.5" y="1763.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="858.5" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="855.5" y="1747.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="858.5" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="855.5" y="1731.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="858.5" y="1742.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="855.5" y="1715.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="858.5" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.34%)</title><rect x="856.3" y="1795.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="859.3" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="856.3" y="1779.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="859.3" y="1790.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="856.3" y="1763.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="859.3" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.27%)</title><rect x="857.1" y="1779.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="860.1" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="857.1" y="1763.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="860.1" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="857.1" y="1747.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="860.1" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="857.1" y="1731.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="860.1" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="857.1" y="1715.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="860.1" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="857.1" y="1699.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="860.1" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="857.1" y="1683.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="860.1" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="857.1" y="1667.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="860.1" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="857.1" y="1651.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="860.1" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="857.9" y="1747.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="860.9" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="857.9" y="1731.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="860.9" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="857.9" y="1715.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="860.9" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="857.9" y="1699.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="860.9" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="857.9" y="1683.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="860.9" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="857.9" y="1667.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="860.9" y="1678.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="857.9" y="1651.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="860.9" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="858.7" y="1763.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="861.7" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="858.7" y="1747.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="861.7" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="858.7" y="1731.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="861.7" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="858.7" y="1715.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="861.7" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="858.7" y="1699.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="861.7" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="858.7" y="1683.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="861.7" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="858.7" y="1667.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="861.7" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="858.7" y="1651.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="861.7" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="858.7" y="1635.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="861.7" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="858.7" y="1619.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="861.7" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="858.7" y="1603.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="861.7" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="858.7" y="1587.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="861.7" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="858.7" y="1571.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="861.7" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="858.7" y="1555.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="861.7" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="858.7" y="1539.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="861.7" y="1550.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="858.7" y="1523.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="861.7" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="859.5" y="1539.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="862.5" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="859.5" y="1523.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="862.5" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="859.5" y="1507.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="862.5" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="859.5" y="1491.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="862.5" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="859.5" y="1475.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="862.5" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="859.5" y="1459.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="862.5" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="859.5" y="1443.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="862.5" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="859.5" y="1427.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="862.5" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="859.5" y="1411.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="862.5" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="859.5" y="1395.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="862.5" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="859.5" y="1379.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="862.5" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="859.5" y="1363.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="862.5" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="859.5" y="1347.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="862.5" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="859.5" y="1331.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="862.5" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="859.5" y="1315.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="862.5" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="859.5" y="1299.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="862.5" y="1310.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="859.5" y="1283.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="862.5" y="1294.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="860.3" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="863.3" y="1854.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="860.3" y="1827.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="863.3" y="1838.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 0.20%)</title><rect x="861.1" y="1891.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="864.1" y="1902.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="861.9" y="1875.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="864.9" y="1886.0"></text>
</g>
<g>
<title>AddNode::add_of_identity(Type const*, Type const*) const (1 samples, 0.07%)</title><rect x="861.9" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="864.9" y="1870.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="861.9" y="1843.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="864.9" y="1854.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="861.9" y="1827.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="864.9" y="1838.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="861.9" y="1811.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="864.9" y="1822.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="861.9" y="1795.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="864.9" y="1806.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="861.9" y="1779.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="864.9" y="1790.0"></text>
</g>
<g>
<title>HaltNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="862.7" y="1875.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="865.7" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.07%)</title><rect x="863.5" y="1891.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="866.5" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.07%)</title><rect x="863.5" y="1875.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="866.5" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.07%)</title><rect x="863.5" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="866.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (349 samples, 23.73%)</title><rect x="864.3" y="1891.0" width="280.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="867.3" y="1902.0">PhaseIdealLoop::build_and_optimize(bo..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="864.3" y="1875.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="867.3" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="864.3" y="1859.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="867.3" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="864.3" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="867.3" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="864.3" y="1827.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="867.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.07%)</title><rect x="864.3" y="1811.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="867.3" y="1822.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="864.3" y="1795.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="867.3" y="1806.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.07%)</title><rect x="865.1" y="1875.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="868.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.27%)</title><rect x="865.9" y="1875.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="868.9" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.14%)</title><rect x="867.5" y="1859.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="870.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 0.54%)</title><rect x="869.1" y="1875.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="872.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (4 samples, 0.27%)</title><rect x="871.5" y="1859.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="874.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.14%)</title><rect x="873.1" y="1843.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="876.1" y="1854.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.07%)</title><rect x="874.7" y="1859.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="877.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (322 samples, 21.89%)</title><rect x="875.5" y="1875.0" width="258.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="878.5" y="1886.0">PhaseIdealLoop::build_loop_late(Ve..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (313 samples, 21.28%)</title><rect x="882.8" y="1859.0" width="251.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="885.8" y="1870.0">PhaseIdealLoop::build_loop_late_p..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.07%)</title><rect x="886.0" y="1843.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="889.0" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (21 samples, 1.43%)</title><rect x="886.8" y="1843.0" width="16.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="889.8" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (287 samples, 19.51%)</title><rect x="903.6" y="1843.0" width="230.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="906.6" y="1854.0">PhaseIdealLoop::get_late_ctrl(..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1083.3" y="1827.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1086.3" y="1838.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1083.3" y="1811.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1086.3" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.07%)</title><rect x="1084.1" y="1827.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1087.1" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1084.1" y="1811.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1087.1" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1084.1" y="1795.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1087.1" y="1806.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (55 samples, 3.74%)</title><rect x="1084.9" y="1827.0" width="44.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1087.9" y="1838.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (6 samples, 0.41%)</title><rect x="1129.0" y="1827.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 0.27%)</title><rect x="1130.6" y="1811.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1133.6" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.07%)</title><rect x="1133.8" y="1875.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.20%)</title><rect x="1134.6" y="1875.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (5 samples, 0.34%)</title><rect x="1137.1" y="1875.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.07%)</title><rect x="1139.5" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.07%)</title><rect x="1140.3" y="1859.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::conditional_move(Node*) (1 samples, 0.07%)</title><rect x="1140.3" y="1843.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1140.3" y="1827.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.27%)</title><rect x="1141.1" y="1875.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.27%)</title><rect x="1141.1" y="1859.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.1" y="1870.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1141.1" y="1843.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.1" y="1854.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1141.1" y="1827.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.1" y="1838.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1142.7" y="1843.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.7" y="1854.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1142.7" y="1827.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.7" y="1838.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1142.7" y="1811.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1145.7" y="1822.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1143.5" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.5" y="1854.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.07%)</title><rect x="1143.5" y="1827.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.5" y="1838.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="1143.5" y="1811.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.5" y="1822.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.07%)</title><rect x="1143.5" y="1795.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.5" y="1806.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (36 samples, 2.45%)</title><rect x="1144.3" y="1891.0" width="28.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.3" y="1902.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1144.3" y="1875.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.3" y="1886.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1144.3" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (34 samples, 2.31%)</title><rect x="1145.1" y="1875.0" width="27.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.1" y="1886.0">P..</text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1145.9" y="1859.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.9" y="1870.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1145.9" y="1843.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.9" y="1854.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1146.7" y="1859.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.7" y="1870.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1146.7" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.7" y="1854.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.07%)</title><rect x="1146.7" y="1827.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.7" y="1838.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1146.7" y="1811.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.7" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1146.7" y="1795.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1149.7" y="1806.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1146.7" y="1779.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.7" y="1790.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1146.7" y="1763.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.7" y="1774.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.07%)</title><rect x="1146.7" y="1747.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.7" y="1758.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1147.5" y="1843.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.5" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1147.5" y="1827.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.5" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1147.5" y="1811.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.5" y="1822.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1148.3" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.3" y="1870.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1148.3" y="1843.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.3" y="1854.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.07%)</title><rect x="1148.3" y="1827.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.3" y="1838.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1149.1" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1149.1" y="1843.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.1" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1149.1" y="1827.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.1" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1149.1" y="1811.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.1" y="1822.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (3 samples, 0.20%)</title><rect x="1149.9" y="1859.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.9" y="1870.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.07%)</title><rect x="1152.3" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.3" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.14%)</title><rect x="1153.1" y="1859.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.1" y="1870.0"></text>
</g>
<g>
<title>NodeHash::grow() (2 samples, 0.14%)</title><rect x="1153.1" y="1843.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.1" y="1854.0"></text>
</g>
<g>
<title>TypeNode::hash() const (2 samples, 0.14%)</title><rect x="1153.1" y="1827.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.1" y="1838.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.07%)</title><rect x="1153.9" y="1811.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.9" y="1822.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1154.7" y="1859.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (10 samples, 0.68%)</title><rect x="1155.5" y="1859.0" width="8.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.5" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.14%)</title><rect x="1157.9" y="1843.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (5 samples, 0.34%)</title><rect x="1159.5" y="1843.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.5" y="1854.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (3 samples, 0.20%)</title><rect x="1161.1" y="1827.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.1" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (5 samples, 0.34%)</title><rect x="1163.5" y="1859.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1164.3" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.3" y="1854.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1164.3" y="1827.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.3" y="1838.0"></text>
</g>
<g>
<title>PhiNode::is_cmove_id(PhaseTransform*, int) (1 samples, 0.07%)</title><rect x="1165.1" y="1843.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.1" y="1854.0"></text>
</g>
<g>
<title>CMoveNode::is_cmove_id(PhaseTransform*, Node*, Node*, Node*, BoolNode*) (1 samples, 0.07%)</title><rect x="1165.1" y="1827.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.1" y="1838.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.14%)</title><rect x="1165.9" y="1843.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.9" y="1854.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.07%)</title><rect x="1166.7" y="1827.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.7" y="1838.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1167.5" y="1859.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.5" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1168.3" y="1859.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1168.3" y="1843.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1168.3" y="1827.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.3" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1168.3" y="1811.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.3" y="1822.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1169.1" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.1" y="1854.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1169.1" y="1827.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.1" y="1838.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1169.9" y="1859.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.9" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1169.9" y="1843.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.9" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.9" y="1827.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.9" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.9" y="1811.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.9" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.9" y="1795.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.9" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.9" y="1779.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.9" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.9" y="1763.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.9" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.9" y="1747.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.9" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.9" y="1731.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.9" y="1742.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1169.9" y="1715.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.9" y="1726.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1169.9" y="1699.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.9" y="1710.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1170.7" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.7" y="1854.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1170.7" y="1827.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.7" y="1838.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="1171.5" y="1859.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.5" y="1870.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.07%)</title><rect x="1171.5" y="1843.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.5" y="1854.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1172.4" y="1875.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.4" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (2 samples, 0.14%)</title><rect x="1173.2" y="1891.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.2" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (2 samples, 0.14%)</title><rect x="1173.2" y="1875.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.2" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (2 samples, 0.14%)</title><rect x="1173.2" y="1859.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.14%)</title><rect x="1173.2" y="1843.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.2" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.14%)</title><rect x="1174.8" y="1891.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.8" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1174.8" y="1875.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1174.8" y="1859.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.8" y="1870.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1174.8" y="1843.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.8" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.07%)</title><rect x="1175.6" y="1875.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.6" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::initialize_object(AllocateNode*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1175.6" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.6" y="1870.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1175.6" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.6" y="1854.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1175.6" y="1827.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.6" y="1838.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1175.6" y="1811.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.6" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.75%)</title><rect x="1176.4" y="1907.0" width="8.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.4" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.75%)</title><rect x="1176.4" y="1891.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.4" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.75%)</title><rect x="1176.4" y="1875.0" width="8.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.4" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.75%)</title><rect x="1176.4" y="1859.0" width="8.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.4" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.75%)</title><rect x="1176.4" y="1843.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.4" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.75%)</title><rect x="1176.4" y="1827.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.4" y="1838.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.14%)</title><rect x="1176.4" y="1811.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.4" y="1822.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.14%)</title><rect x="1176.4" y="1795.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.4" y="1806.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.14%)</title><rect x="1176.4" y="1779.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.4" y="1790.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.14%)</title><rect x="1176.4" y="1763.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.4" y="1774.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.14%)</title><rect x="1176.4" y="1747.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.4" y="1758.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.14%)</title><rect x="1176.4" y="1731.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.4" y="1742.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1176.4" y="1715.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.4" y="1726.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1177.2" y="1715.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.2" y="1726.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1177.2" y="1699.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.2" y="1710.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1177.2" y="1683.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.2" y="1694.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1177.2" y="1667.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.2" y="1678.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1177.2" y="1651.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.2" y="1662.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, Bytecodes::Code, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1177.2" y="1635.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.2" y="1646.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.07%)</title><rect x="1177.2" y="1619.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.2" y="1630.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.07%)</title><rect x="1177.2" y="1603.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.2" y="1614.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.41%)</title><rect x="1178.0" y="1811.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.0" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.41%)</title><rect x="1178.0" y="1795.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.0" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.34%)</title><rect x="1178.0" y="1779.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.0" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.34%)</title><rect x="1178.0" y="1763.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.0" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.34%)</title><rect x="1178.0" y="1747.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.0" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.34%)</title><rect x="1178.0" y="1731.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.0" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.8" y="1715.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.8" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.8" y="1699.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.8" y="1683.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.8" y="1667.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.8" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.8" y="1651.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.8" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.8" y="1635.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.8" y="1619.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.8" y="1603.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.8" y="1587.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.8" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.8" y="1571.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.8" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.8" y="1555.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.8" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.8" y="1539.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.8" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.8" y="1523.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.8" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.8" y="1507.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.8" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.8" y="1491.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.8" y="1475.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.8" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.8" y="1459.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.8" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.8" y="1443.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.8" y="1427.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.8" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.8" y="1411.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.8" y="1395.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.8" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.8" y="1379.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.8" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.8" y="1363.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="1374.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1178.8" y="1347.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="1358.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1179.6" y="1715.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.6" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1179.6" y="1699.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.6" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1179.6" y="1683.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.6" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1179.6" y="1667.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1179.6" y="1651.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.6" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1179.6" y="1635.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1179.6" y="1619.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1179.6" y="1603.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.6" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1179.6" y="1587.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1179.6" y="1571.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.6" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1179.6" y="1555.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.6" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1179.6" y="1539.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.6" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1179.6" y="1523.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1179.6" y="1507.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.6" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1179.6" y="1491.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1179.6" y="1475.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1179.6" y="1459.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.6" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1179.6" y="1443.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.6" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1179.6" y="1427.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.6" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.6" y="1411.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.6" y="1395.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.6" y="1406.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.07%)</title><rect x="1179.6" y="1379.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.6" y="1390.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1179.6" y="1363.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.6" y="1374.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1179.6" y="1347.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.6" y="1358.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1179.6" y="1331.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.6" y="1342.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.07%)</title><rect x="1179.6" y="1315.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.6" y="1326.0"></text>
</g>
<g>
<title>GraphKit::compute_stack_effects(int&amp;, int&amp;) (1 samples, 0.07%)</title><rect x="1179.6" y="1299.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.6" y="1310.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1179.6" y="1283.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.6" y="1294.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1179.6" y="1267.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.6" y="1278.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.4" y="1379.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.4" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.4" y="1363.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.4" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.4" y="1347.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.4" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.4" y="1331.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.4" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.4" y="1315.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.4" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.4" y="1299.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.4" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.4" y="1283.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.4" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.4" y="1267.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.4" y="1251.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.4" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.4" y="1235.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.4" y="1246.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.4" y="1219.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.4" y="1230.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1180.4" y="1203.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.4" y="1214.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1180.4" y="1187.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.4" y="1198.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1180.4" y="1171.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.4" y="1182.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.07%)</title><rect x="1180.4" y="1155.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.4" y="1166.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1180.4" y="1139.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.4" y="1150.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1180.4" y="1123.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.4" y="1134.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1180.4" y="1107.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="1118.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1180.4" y="1091.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1183.4" y="1102.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="1411.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.2" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="1395.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.2" y="1379.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.2" y="1363.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.2" y="1347.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.2" y="1331.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.2" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.2" y="1315.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="1299.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.2" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.2" y="1283.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.2" y="1267.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.2" y="1251.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.2" y="1235.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.2" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.2" y="1219.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="1230.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="1203.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="1187.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.2" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.2" y="1171.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.2" y="1155.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.2" y="1139.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.2" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.2" y="1123.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.2" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.2" y="1107.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.2" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="1091.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.2" y="1075.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.2" y="1059.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.2" y="1043.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.2" y="1027.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.2" y="1011.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.2" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="995.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.2" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.2" y="979.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.2" y="963.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.2" y="947.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.2" y="931.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1181.2" y="915.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1181.2" y="899.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.2" y="910.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1181.2" y="883.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="894.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1181.2" y="867.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.2" y="878.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.07%)</title><rect x="1181.2" y="851.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.2" y="862.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1181.2" y="835.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.2" y="846.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1181.2" y="819.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.2" y="830.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1181.2" y="803.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_method_entry() (1 samples, 0.07%)</title><rect x="1182.0" y="1779.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.0" y="1790.0"></text>
</g>
<g>
<title>Compile::sync_stack_slots() const (1 samples, 0.07%)</title><rect x="1182.0" y="1763.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.0" y="1774.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1182.8" y="1811.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.8" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1182.8" y="1795.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.8" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1182.8" y="1779.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.8" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1182.8" y="1763.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1182.8" y="1747.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1182.8" y="1731.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1182.8" y="1715.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1182.8" y="1699.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1182.8" y="1683.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1182.8" y="1667.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.8" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1182.8" y="1651.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.8" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1182.8" y="1635.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.8" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1182.8" y="1619.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1182.8" y="1603.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.8" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1182.8" y="1587.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1182.8" y="1571.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.8" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1182.8" y="1555.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.8" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1182.8" y="1539.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.8" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1182.8" y="1523.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.8" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.8" y="1507.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.8" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.8" y="1491.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.8" y="1475.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.8" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.8" y="1459.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.8" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.8" y="1443.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.8" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.8" y="1427.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="1438.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.8" y="1411.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="1422.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.8" y="1395.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="1406.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.8" y="1379.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="1390.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.8" y="1363.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="1374.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.8" y="1347.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.8" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.8" y="1331.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.8" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.8" y="1315.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.8" y="1326.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.8" y="1299.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.8" y="1283.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="1294.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.8" y="1267.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.8" y="1278.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.8" y="1251.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.8" y="1235.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.8" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.8" y="1219.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.8" y="1230.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.8" y="1203.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.8" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.8" y="1187.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.8" y="1171.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.8" y="1155.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.8" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.8" y="1139.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.8" y="1123.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.8" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.8" y="1107.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.8" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.8" y="1091.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.8" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.8" y="1075.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.8" y="1059.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.8" y="1043.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.8" y="1027.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1182.8" y="1011.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1182.8" y="995.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.8" y="1006.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1182.8" y="979.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.8" y="990.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.07%)</title><rect x="1182.8" y="963.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.8" y="974.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1182.8" y="947.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.8" y="958.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1183.6" y="1507.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.6" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1183.6" y="1491.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.6" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1183.6" y="1475.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.6" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1183.6" y="1459.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.6" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1183.6" y="1443.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.6" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1183.6" y="1427.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.6" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1183.6" y="1411.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.6" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1183.6" y="1395.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.6" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1183.6" y="1379.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.6" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1183.6" y="1363.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.6" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1183.6" y="1347.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.6" y="1358.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.07%)</title><rect x="1183.6" y="1331.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.6" y="1342.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.07%)</title><rect x="1183.6" y="1315.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.6" y="1326.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.07%)</title><rect x="1183.6" y="1299.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.6" y="1310.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1183.6" y="1283.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.6" y="1294.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1183.6" y="1267.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.6" y="1278.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1183.6" y="1251.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.6" y="1262.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1183.6" y="1235.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.6" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.4" y="1331.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.4" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.4" y="1315.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.4" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.4" y="1299.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.4" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.4" y="1283.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.4" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.4" y="1267.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.4" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.4" y="1251.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.4" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.4" y="1235.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.4" y="1246.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1184.4" y="1219.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.4" y="1230.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1184.4" y="1203.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.4" y="1214.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1184.4" y="1187.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.4" y="1198.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1184.4" y="1171.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.4" y="1182.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.07%)</title><rect x="1184.4" y="1155.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.4" y="1166.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.07%)</title><rect x="1184.4" y="1139.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.4" y="1150.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1184.4" y="1123.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.4" y="1134.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="1185.2" y="1907.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.2" y="1918.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1185.2" y="1891.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.2" y="1902.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.07%)</title><rect x="1186.0" y="1939.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.0" y="1950.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1186.0" y="1923.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.0" y="1934.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1186.0" y="1907.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.0" y="1918.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1186.0" y="1891.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.0" y="1902.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.07%)</title><rect x="1186.8" y="1955.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.8" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.07%)</title><rect x="1186.8" y="1939.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.8" y="1950.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.07%)</title><rect x="1186.8" y="1923.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.8" y="1934.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.07%)</title><rect x="1186.8" y="1907.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.8" y="1918.0"></text>
</g>
<g>
<title>RelocIterator::advance_over_prefix() (1 samples, 0.07%)</title><rect x="1186.8" y="1891.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.8" y="1902.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.20%)</title><rect x="1187.6" y="2003.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.6" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.20%)</title><rect x="1187.6" y="1987.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.6" y="1998.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.07%)</title><rect x="1187.6" y="1971.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.6" y="1982.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.07%)</title><rect x="1187.6" y="1955.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.6" y="1966.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.07%)</title><rect x="1188.4" y="1971.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.4" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.07%)</title><rect x="1188.4" y="1955.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.4" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.07%)</title><rect x="1188.4" y="1939.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.4" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.07%)</title><rect x="1188.4" y="1923.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.4" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_epilogue(bool) (1 samples, 0.07%)</title><rect x="1188.4" y="1907.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.4" y="1918.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::resize_all_tlabs() (1 samples, 0.07%)</title><rect x="1188.4" y="1891.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.4" y="1902.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::resize() (1 samples, 0.07%)</title><rect x="1188.4" y="1875.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.4" y="1886.0"></text>
</g>
<g>
<title>jio_vsnprintf (1 samples, 0.07%)</title><rect x="1189.2" y="1971.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1192.2" y="1982.0"></text>
</g>
</g>
</svg>
