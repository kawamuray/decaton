<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1190" onload="init(evt)" viewBox="0 0 1200 1190" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1173"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1173"> </text>
<g id="frames">
<g>
<title>all (289 samples, 100.00%)</title><rect x="10.0" y="1139.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1150.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (24 samples, 8.30%)</title><rect x="10.0" y="1123.0" width="98.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1134.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (23 samples, 7.96%)</title><rect x="14.1" y="1107.0" width="93.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.1" y="1118.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.35%)</title><rect x="14.1" y="1091.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.1" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.35%)</title><rect x="14.1" y="1075.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/66593739.accept (1 samples, 0.35%)</title><rect x="14.1" y="1059.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.35%)</title><rect x="14.1" y="1043.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.69%)</title><rect x="18.2" y="1091.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.2" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.69%)</title><rect x="18.2" y="1075.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.pausingAllProcessing (1 samples, 0.35%)</title><rect x="18.2" y="1059.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.2" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.35%)</title><rect x="22.2" y="1059.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.2" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.35%)</title><rect x="22.2" y="1043.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.2" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.35%)</title><rect x="22.2" y="1027.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.2" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.35%)</title><rect x="22.2" y="1011.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.2" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.35%)</title><rect x="22.2" y="995.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.2" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.35%)</title><rect x="22.2" y="979.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.2" y="990.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (17 samples, 5.88%)</title><rect x="26.3" y="1091.0" width="69.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.3" y="1102.0">java/la..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/779505289.accept (17 samples, 5.88%)</title><rect x="26.3" y="1075.0" width="69.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="29.3" y="1086.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (17 samples, 5.88%)</title><rect x="26.3" y="1059.0" width="69.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.3" y="1070.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.35%)</title><rect x="26.3" y="1043.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (10 samples, 3.46%)</title><rect x="30.4" y="1043.0" width="40.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="33.4" y="1054.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (10 samples, 3.46%)</title><rect x="30.4" y="1027.0" width="40.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="33.4" y="1038.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (10 samples, 3.46%)</title><rect x="30.4" y="1011.0" width="40.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.4" y="1022.0">com..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (10 samples, 3.46%)</title><rect x="30.4" y="995.0" width="40.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.4" y="1006.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (10 samples, 3.46%)</title><rect x="30.4" y="979.0" width="40.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.4" y="990.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (10 samples, 3.46%)</title><rect x="30.4" y="963.0" width="40.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.4" y="974.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (6 samples, 2.08%)</title><rect x="30.4" y="947.0" width="24.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.4" y="958.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.35%)</title><rect x="30.4" y="931.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.35%)</title><rect x="30.4" y="915.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.35%)</title><rect x="30.4" y="899.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.35%)</title><rect x="30.4" y="883.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 1.73%)</title><rect x="34.5" y="931.0" width="20.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="37.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 1.73%)</title><rect x="34.5" y="915.0" width="20.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="37.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 1.73%)</title><rect x="34.5" y="899.0" width="20.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="37.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 1.73%)</title><rect x="34.5" y="883.0" width="20.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="37.5" y="894.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (5 samples, 1.73%)</title><rect x="34.5" y="867.0" width="20.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.5" y="878.0"></text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 1.38%)</title><rect x="34.5" y="851.0" width="16.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="37.5" y="862.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 1.04%)</title><rect x="34.5" y="835.0" width="12.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="37.5" y="846.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.35%)</title><rect x="46.7" y="835.0" width="4.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="49.7" y="846.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.35%)</title><rect x="50.8" y="851.0" width="4.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="53.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.38%)</title><rect x="54.9" y="947.0" width="16.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.38%)</title><rect x="54.9" y="931.0" width="16.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="57.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 1.38%)</title><rect x="54.9" y="915.0" width="16.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="57.9" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.35%)</title><rect x="71.2" y="1043.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.35%)</title><rect x="71.2" y="1027.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="74.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (5 samples, 1.73%)</title><rect x="75.3" y="1043.0" width="20.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="78.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 1.73%)</title><rect x="75.3" y="1027.0" width="20.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.69%)</title><rect x="87.6" y="1011.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.69%)</title><rect x="87.6" y="995.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="90.6" y="1006.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.35%)</title><rect x="91.7" y="979.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="94.7" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.35%)</title><rect x="91.7" y="963.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="94.7" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.35%)</title><rect x="91.7" y="947.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="94.7" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="91.7" y="931.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="94.7" y="942.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.35%)</title><rect x="91.7" y="915.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="94.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (3 samples, 1.04%)</title><rect x="95.7" y="1091.0" width="12.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (3 samples, 1.04%)</title><rect x="95.7" y="1075.0" width="12.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="98.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (1 samples, 0.35%)</title><rect x="95.7" y="1059.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (1 samples, 0.35%)</title><rect x="95.7" y="1043.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="98.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.35%)</title><rect x="95.7" y="1027.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.35%)</title><rect x="95.7" y="1011.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.35%)</title><rect x="95.7" y="995.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="98.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.35%)</title><rect x="95.7" y="979.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="98.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.35%)</title><rect x="95.7" y="963.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="98.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.35%)</title><rect x="95.7" y="947.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.35%)</title><rect x="99.8" y="1059.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="102.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.35%)</title><rect x="99.8" y="1043.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="102.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.35%)</title><rect x="99.8" y="1027.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="102.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.35%)</title><rect x="99.8" y="1011.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="102.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1146696708.accept (1 samples, 0.35%)</title><rect x="99.8" y="995.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="102.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.35%)</title><rect x="99.8" y="979.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="102.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.35%)</title><rect x="99.8" y="963.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="102.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.35%)</title><rect x="99.8" y="947.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="102.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.35%)</title><rect x="99.8" y="931.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="102.8" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.35%)</title><rect x="99.8" y="915.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.8" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.35%)</title><rect x="99.8" y="899.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.35%)</title><rect x="103.9" y="1059.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="106.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.35%)</title><rect x="103.9" y="1043.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="106.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.35%)</title><rect x="103.9" y="1027.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="106.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.35%)</title><rect x="103.9" y="1011.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="106.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.35%)</title><rect x="103.9" y="995.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="106.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.35%)</title><rect x="103.9" y="979.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="106.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Avg.update (1 samples, 0.35%)</title><rect x="103.9" y="963.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="106.9" y="974.0"></text>
</g>
<g>
<title>java/lang/Thread.run (72 samples, 24.91%)</title><rect x="108.0" y="1123.0" width="294.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="111.0" y="1134.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (72 samples, 24.91%)</title><rect x="108.0" y="1107.0" width="294.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="111.0" y="1118.0">java/util/concurrent/ThreadPoolExecutor..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (72 samples, 24.91%)</title><rect x="108.0" y="1091.0" width="294.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="111.0" y="1102.0">java/util/concurrent/ThreadPoolExecutor..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.35%)</title><rect x="112.1" y="1075.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="115.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/151177546.run (37 samples, 12.80%)</title><rect x="116.2" y="1075.0" width="151.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="119.2" y="1086.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (37 samples, 12.80%)</title><rect x="116.2" y="1059.0" width="151.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="119.2" y="1070.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (37 samples, 12.80%)</title><rect x="116.2" y="1043.0" width="151.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="119.2" y="1054.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (36 samples, 12.46%)</title><rect x="116.2" y="1027.0" width="146.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="119.2" y="1038.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (3 samples, 1.04%)</title><rect x="116.2" y="1011.0" width="12.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="119.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (3 samples, 1.04%)</title><rect x="116.2" y="995.0" width="12.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="119.2" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.35%)</title><rect x="124.3" y="979.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="127.3" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.35%)</title><rect x="124.3" y="963.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="127.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (8 samples, 2.77%)</title><rect x="128.4" y="1011.0" width="32.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="131.4" y="1022.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (8 samples, 2.77%)</title><rect x="128.4" y="995.0" width="32.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="131.4" y="1006.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (8 samples, 2.77%)</title><rect x="128.4" y="979.0" width="32.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="131.4" y="990.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 2.77%)</title><rect x="128.4" y="963.0" width="32.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="131.4" y="974.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 2.77%)</title><rect x="128.4" y="947.0" width="32.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="131.4" y="958.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (8 samples, 2.77%)</title><rect x="128.4" y="931.0" width="32.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="131.4" y="942.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.35%)</title><rect x="128.4" y="915.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="131.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.35%)</title><rect x="128.4" y="899.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="131.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.35%)</title><rect x="128.4" y="883.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="131.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.35%)</title><rect x="128.4" y="867.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="131.4" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.35%)</title><rect x="128.4" y="851.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="131.4" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.35%)</title><rect x="128.4" y="835.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="131.4" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.35%)</title><rect x="128.4" y="819.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="131.4" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.access$400 (1 samples, 0.35%)</title><rect x="128.4" y="803.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="131.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (7 samples, 2.42%)</title><rect x="132.5" y="915.0" width="28.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="135.5" y="926.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.35%)</title><rect x="132.5" y="899.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="135.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.35%)</title><rect x="132.5" y="883.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="135.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.35%)</title><rect x="132.5" y="867.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="135.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 2.08%)</title><rect x="136.6" y="899.0" width="24.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="139.6" y="910.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 2.08%)</title><rect x="136.6" y="883.0" width="24.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="139.6" y="894.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 2.08%)</title><rect x="136.6" y="867.0" width="24.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="139.6" y="878.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 2.08%)</title><rect x="136.6" y="851.0" width="24.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="139.6" y="862.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.35%)</title><rect x="140.7" y="835.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="143.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.35%)</title><rect x="140.7" y="819.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="143.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.35%)</title><rect x="140.7" y="803.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="143.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.35%)</title><rect x="140.7" y="787.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="143.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.35%)</title><rect x="140.7" y="771.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="143.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.35%)</title><rect x="140.7" y="755.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="143.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 1.04%)</title><rect x="144.7" y="835.0" width="12.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="147.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.69%)</title><rect x="148.8" y="819.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="151.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.69%)</title><rect x="148.8" y="803.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="151.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.69%)</title><rect x="148.8" y="787.0" width="8.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="151.8" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.69%)</title><rect x="148.8" y="771.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="151.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.35%)</title><rect x="157.0" y="835.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="160.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.35%)</title><rect x="157.0" y="819.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="160.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.35%)</title><rect x="157.0" y="803.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="160.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.35%)</title><rect x="157.0" y="787.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="160.0" y="798.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.35%)</title><rect x="157.0" y="771.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="160.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (25 samples, 8.65%)</title><rect x="161.1" y="1011.0" width="102.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="164.1" y="1022.0">com/linecorp..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.35%)</title><rect x="161.1" y="995.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="164.1" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.35%)</title><rect x="161.1" y="979.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="164.1" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.35%)</title><rect x="161.1" y="963.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="164.1" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.35%)</title><rect x="161.1" y="947.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="164.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.35%)</title><rect x="161.1" y="931.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="164.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.35%)</title><rect x="161.1" y="915.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="164.1" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (2 samples, 0.69%)</title><rect x="165.2" y="995.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="168.2" y="1006.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (2 samples, 0.69%)</title><rect x="165.2" y="979.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="168.2" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (2 samples, 0.69%)</title><rect x="165.2" y="963.0" width="8.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="168.2" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.35%)</title><rect x="165.2" y="947.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="168.2" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.35%)</title><rect x="165.2" y="931.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="168.2" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.35%)</title><rect x="165.2" y="915.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="168.2" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.35%)</title><rect x="165.2" y="899.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="168.2" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.35%)</title><rect x="169.2" y="947.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="172.2" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (11 samples, 3.81%)</title><rect x="173.3" y="995.0" width="44.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="176.3" y="1006.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (10 samples, 3.46%)</title><rect x="177.4" y="979.0" width="40.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="180.4" y="990.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 1.38%)</title><rect x="181.5" y="963.0" width="16.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="184.5" y="974.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.38%)</title><rect x="181.5" y="947.0" width="16.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="184.5" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.04%)</title><rect x="185.6" y="931.0" width="12.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="188.6" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.69%)</title><rect x="189.7" y="915.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="192.7" y="926.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.69%)</title><rect x="189.7" y="899.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="192.7" y="910.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.69%)</title><rect x="189.7" y="883.0" width="8.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="192.7" y="894.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 1.73%)</title><rect x="197.8" y="963.0" width="20.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.8" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 1.73%)</title><rect x="197.8" y="947.0" width="20.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.8" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.04%)</title><rect x="197.8" y="931.0" width="12.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="200.8" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.04%)</title><rect x="197.8" y="915.0" width="12.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="200.8" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 1.04%)</title><rect x="197.8" y="899.0" width="12.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="200.8" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 1.04%)</title><rect x="197.8" y="883.0" width="12.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="200.8" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 0.69%)</title><rect x="210.1" y="931.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.1" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.69%)</title><rect x="210.1" y="915.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="213.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.35%)</title><rect x="210.1" y="899.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.1" y="910.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.35%)</title><rect x="210.1" y="883.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.1" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.35%)</title><rect x="214.2" y="899.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="217.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (10 samples, 3.46%)</title><rect x="218.2" y="995.0" width="40.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.2" y="1006.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (10 samples, 3.46%)</title><rect x="218.2" y="979.0" width="40.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="221.2" y="990.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.35%)</title><rect x="234.6" y="963.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="237.6" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.69%)</title><rect x="238.7" y="963.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="241.7" y="974.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.35%)</title><rect x="242.7" y="947.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="245.7" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.35%)</title><rect x="246.8" y="963.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="249.8" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.35%)</title><rect x="246.8" y="947.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="249.8" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.35%)</title><rect x="246.8" y="931.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="249.8" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.35%)</title><rect x="250.9" y="963.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.9" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.35%)</title><rect x="250.9" y="947.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.9" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.35%)</title><rect x="255.0" y="963.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="258.0" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.35%)</title><rect x="255.0" y="947.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="258.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.35%)</title><rect x="259.1" y="995.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="262.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.35%)</title><rect x="259.1" y="979.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="262.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.35%)</title><rect x="263.1" y="1027.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="266.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.35%)</title><rect x="263.1" y="1011.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="266.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.35%)</title><rect x="263.1" y="995.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="266.1" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$270/2121521298.accept (1 samples, 0.35%)</title><rect x="263.1" y="979.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="266.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$0 (1 samples, 0.35%)</title><rect x="263.1" y="963.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.35%)</title><rect x="263.1" y="947.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.1" y="958.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.35%)</title><rect x="263.1" y="931.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="266.1" y="942.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.35%)</title><rect x="263.1" y="915.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.1" y="926.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 1.04%)</title><rect x="267.2" y="1075.0" width="12.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="270.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.69%)</title><rect x="271.3" y="1059.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.3" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.272] (2 samples, 0.69%)</title><rect x="271.3" y="1043.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="274.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 0.69%)</title><rect x="279.5" y="1075.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.69%)</title><rect x="279.5" y="1059.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (2 samples, 0.69%)</title><rect x="279.5" y="1043.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="282.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.69%)</title><rect x="287.6" y="1075.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="290.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.35%)</title><rect x="291.7" y="1059.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="294.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.35%)</title><rect x="291.7" y="1043.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="294.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (25 samples, 8.65%)</title><rect x="295.8" y="1075.0" width="102.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="298.8" y="1086.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (25 samples, 8.65%)</title><rect x="295.8" y="1059.0" width="102.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="298.8" y="1070.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (22 samples, 7.61%)</title><rect x="304.0" y="1043.0" width="89.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="307.0" y="1054.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.69%)</title><rect x="304.0" y="1027.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="307.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.69%)</title><rect x="304.0" y="1011.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="307.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.69%)</title><rect x="304.0" y="995.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="307.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.69%)</title><rect x="304.0" y="979.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="307.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (20 samples, 6.92%)</title><rect x="312.1" y="1027.0" width="81.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="315.1" y="1038.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (20 samples, 6.92%)</title><rect x="312.1" y="1011.0" width="81.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="315.1" y="1022.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Park (18 samples, 6.23%)</title><rect x="320.3" y="995.0" width="73.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="323.3" y="1006.0">Unsafe_P..</text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 1.04%)</title><rect x="320.3" y="979.0" width="12.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="323.3" y="990.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.35%)</title><rect x="328.5" y="963.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="331.5" y="974.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.178] (1 samples, 0.35%)</title><rect x="332.6" y="979.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="335.6" y="990.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 0.69%)</title><rect x="336.6" y="979.0" width="8.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="339.6" y="990.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.38%)</title><rect x="344.8" y="979.0" width="16.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="347.8" y="990.0"></text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 1.73%)</title><rect x="361.1" y="979.0" width="20.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="364.1" y="990.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.35%)</title><rect x="381.6" y="979.0" width="4.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="384.6" y="990.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.35%)</title><rect x="385.6" y="979.0" width="4.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="388.6" y="990.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.35%)</title><rect x="389.7" y="979.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="392.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.35%)</title><rect x="393.8" y="1043.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="396.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.35%)</title><rect x="393.8" y="1027.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="396.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.35%)</title><rect x="393.8" y="1011.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="396.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.35%)</title><rect x="393.8" y="995.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="396.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.35%)</title><rect x="397.9" y="1075.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="400.9" y="1086.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.35%)</title><rect x="402.0" y="1123.0" width="4.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="405.0" y="1134.0"></text>
</g>
<g>
<title>start_thread (192 samples, 66.44%)</title><rect x="406.1" y="1123.0" width="783.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="409.1" y="1134.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (192 samples, 66.44%)</title><rect x="406.1" y="1107.0" width="783.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="409.1" y="1118.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 3.46%)</title><rect x="406.1" y="1091.0" width="40.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="409.1" y="1102.0">Gan..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.35%)</title><rect x="406.1" y="1075.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="409.1" y="1086.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.35%)</title><rect x="406.1" y="1059.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="409.1" y="1070.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.35%)</title><rect x="406.1" y="1043.0" width="4.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="409.1" y="1054.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (9 samples, 3.11%)</title><rect x="410.1" y="1075.0" width="36.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="413.1" y="1086.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 2.77%)</title><rect x="410.1" y="1059.0" width="32.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="413.1" y="1070.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 2.08%)</title><rect x="410.1" y="1043.0" width="24.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="413.1" y="1054.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.04%)</title><rect x="422.4" y="1027.0" width="12.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="425.4" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.69%)</title><rect x="426.5" y="1011.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="429.5" y="1022.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.35%)</title><rect x="430.6" y="995.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="433.6" y="1006.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.35%)</title><rect x="434.6" y="1043.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="437.6" y="1054.0"></text>
</g>
<g>
<title>Klass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.35%)</title><rect x="438.7" y="1043.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="441.7" y="1054.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.35%)</title><rect x="442.8" y="1059.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="445.8" y="1070.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.35%)</title><rect x="442.8" y="1043.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="445.8" y="1054.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.35%)</title><rect x="442.8" y="1027.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="445.8" y="1038.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.35%)</title><rect x="442.8" y="1011.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="445.8" y="1022.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.35%)</title><rect x="442.8" y="995.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="445.8" y="1006.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (182 samples, 62.98%)</title><rect x="446.9" y="1091.0" width="743.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="449.9" y="1102.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (181 samples, 62.63%)</title><rect x="446.9" y="1075.0" width="739.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="449.9" y="1086.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (180 samples, 62.28%)</title><rect x="446.9" y="1059.0" width="734.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="449.9" y="1070.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (177 samples, 61.25%)</title><rect x="446.9" y="1043.0" width="722.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="449.9" y="1054.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (177 samples, 61.25%)</title><rect x="446.9" y="1027.0" width="722.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="449.9" y="1038.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.35%)</title><rect x="446.9" y="1011.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="449.9" y="1022.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.35%)</title><rect x="446.9" y="995.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="449.9" y="1006.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.35%)</title><rect x="446.9" y="979.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="449.9" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.35%)</title><rect x="446.9" y="963.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="449.9" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.35%)</title><rect x="446.9" y="947.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="449.9" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.35%)</title><rect x="446.9" y="931.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="449.9" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.35%)</title><rect x="446.9" y="915.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="449.9" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.35%)</title><rect x="446.9" y="899.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="449.9" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.35%)</title><rect x="446.9" y="883.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="449.9" y="894.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.35%)</title><rect x="446.9" y="867.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="449.9" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="446.9" y="851.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="449.9" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="446.9" y="835.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="449.9" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="446.9" y="819.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="449.9" y="830.0"></text>
</g>
<g>
<title>ciInstanceKlass::loader() (1 samples, 0.35%)</title><rect x="446.9" y="803.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="449.9" y="814.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (89 samples, 30.80%)</title><rect x="451.0" y="1011.0" width="363.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="454.0" y="1022.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (6 samples, 2.08%)</title><rect x="451.0" y="995.0" width="24.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="454.0" y="1006.0">C..</text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.69%)</title><rect x="451.0" y="979.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="454.0" y="990.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.35%)</title><rect x="455.1" y="963.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="458.1" y="974.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.35%)</title><rect x="455.1" y="947.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="458.1" y="958.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 1.04%)</title><rect x="459.1" y="979.0" width="12.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="462.1" y="990.0"></text>
</g>
<g>
<title>BoxLockNode::size(PhaseRegAlloc*) const (1 samples, 0.35%)</title><rect x="459.1" y="963.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="462.1" y="974.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.69%)</title><rect x="463.2" y="963.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="466.2" y="974.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.69%)</title><rect x="463.2" y="947.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="466.2" y="958.0"></text>
</g>
<g>
<title>MachEpilogNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.35%)</title><rect x="463.2" y="931.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="466.2" y="942.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.35%)</title><rect x="467.3" y="931.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="470.3" y="942.0"></text>
</g>
<g>
<title>MacroAssembler::int3() (1 samples, 0.35%)</title><rect x="467.3" y="915.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="470.3" y="926.0"></text>
</g>
<g>
<title>MacroAssembler::call(AddressLiteral) (1 samples, 0.35%)</title><rect x="467.3" y="899.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="470.3" y="910.0"></text>
</g>
<g>
<title>Assembler::reachable(AddressLiteral) (1 samples, 0.35%)</title><rect x="467.3" y="883.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="470.3" y="894.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.35%)</title><rect x="471.4" y="979.0" width="4.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="474.4" y="990.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 1.04%)</title><rect x="475.5" y="995.0" width="12.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="478.5" y="1006.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.69%)</title><rect x="479.6" y="979.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="482.6" y="990.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.35%)</title><rect x="479.6" y="963.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="482.6" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.35%)</title><rect x="483.6" y="963.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="486.6" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.35%)</title><rect x="483.6" y="947.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="486.6" y="958.0"></text>
</g>
<g>
<title>MachCallStaticJavaNode::ret_addr_offset() (1 samples, 0.35%)</title><rect x="487.7" y="995.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="490.7" y="1006.0"></text>
</g>
<g>
<title>Matcher::match() (8 samples, 2.77%)</title><rect x="491.8" y="995.0" width="32.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="494.8" y="1006.0">Ma..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (8 samples, 2.77%)</title><rect x="491.8" y="979.0" width="32.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="494.8" y="990.0">Ma..</text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (3 samples, 1.04%)</title><rect x="495.9" y="963.0" width="12.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="498.9" y="974.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.35%)</title><rect x="504.0" y="947.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="507.0" y="958.0"></text>
</g>
<g>
<title>MachNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.35%)</title><rect x="504.0" y="931.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="507.0" y="942.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 1.38%)</title><rect x="508.1" y="963.0" width="16.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="511.1" y="974.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.69%)</title><rect x="512.2" y="947.0" width="8.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="515.2" y="958.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.69%)</title><rect x="512.2" y="931.0" width="8.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="515.2" y="942.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.35%)</title><rect x="512.2" y="915.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="515.2" y="926.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.35%)</title><rect x="512.2" y="899.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="515.2" y="910.0"></text>
</g>
<g>
<title>State::_sub_Op_ConL(Node const*) (1 samples, 0.35%)</title><rect x="512.2" y="883.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="515.2" y="894.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.35%)</title><rect x="516.3" y="915.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="519.3" y="926.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.35%)</title><rect x="516.3" y="899.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="519.3" y="910.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.35%)</title><rect x="520.4" y="947.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="523.4" y="958.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.35%)</title><rect x="520.4" y="931.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="523.4" y="942.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.35%)</title><rect x="520.4" y="915.0" width="4.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="523.4" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 1.73%)</title><rect x="524.5" y="995.0" width="20.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="527.5" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.35%)</title><rect x="524.5" y="979.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="527.5" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::do_DFS(Tarjan*, unsigned int) (1 samples, 0.35%)</title><rect x="524.5" y="963.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="527.5" y="974.0"></text>
</g>
<g>
<title>Block_Stack::most_frequent_successor(Block*) (1 samples, 0.35%)</title><rect x="524.5" y="947.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="527.5" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.35%)</title><rect x="528.5" y="979.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="531.5" y="990.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.35%)</title><rect x="528.5" y="963.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="531.5" y="974.0"></text>
</g>
<g>
<title>Block::succ_prob(unsigned int) (1 samples, 0.35%)</title><rect x="528.5" y="947.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="531.5" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.04%)</title><rect x="532.6" y="979.0" width="12.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="535.6" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.69%)</title><rect x="536.7" y="963.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="539.7" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.69%)</title><rect x="536.7" y="947.0" width="8.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="539.7" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (66 samples, 22.84%)</title><rect x="544.9" y="995.0" width="269.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="547.9" y="1006.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.35%)</title><rect x="544.9" y="979.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="547.9" y="990.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.35%)</title><rect x="549.0" y="979.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="552.0" y="990.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.35%)</title><rect x="553.0" y="979.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="556.0" y="990.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.35%)</title><rect x="557.1" y="979.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="560.1" y="990.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (4 samples, 1.38%)</title><rect x="561.2" y="979.0" width="16.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="564.2" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 1.73%)</title><rect x="577.5" y="979.0" width="20.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="580.5" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.35%)</title><rect x="585.7" y="963.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="588.7" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.69%)</title><rect x="589.8" y="963.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="592.8" y="974.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.35%)</title><rect x="593.9" y="947.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="596.9" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.04%)</title><rect x="598.0" y="979.0" width="12.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="601.0" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="602.0" y="963.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="605.0" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.35%)</title><rect x="606.1" y="963.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="609.1" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="606.1" y="947.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="609.1" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 2.77%)</title><rect x="610.2" y="979.0" width="32.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="613.2" y="990.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.35%)</title><rect x="638.8" y="963.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="641.8" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.35%)</title><rect x="638.8" y="947.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="641.8" y="958.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.35%)</title><rect x="638.8" y="931.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="641.8" y="942.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.35%)</title><rect x="638.8" y="915.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="641.8" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (15 samples, 5.19%)</title><rect x="642.9" y="979.0" width="61.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="645.9" y="990.0">PhaseC..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.35%)</title><rect x="651.0" y="963.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="654.0" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (9 samples, 3.11%)</title><rect x="655.1" y="963.0" width="36.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="658.1" y="974.0">Pha..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.35%)</title><rect x="675.5" y="947.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="678.5" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 1.04%)</title><rect x="679.6" y="947.0" width="12.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="682.6" y="958.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.69%)</title><rect x="691.9" y="963.0" width="8.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="694.9" y="974.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.35%)</title><rect x="700.0" y="963.0" width="4.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="703.0" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.69%)</title><rect x="704.1" y="979.0" width="8.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="707.1" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.69%)</title><rect x="704.1" y="963.0" width="8.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="707.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (1 samples, 0.35%)</title><rect x="712.3" y="979.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="715.3" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.35%)</title><rect x="716.4" y="979.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="719.4" y="990.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.35%)</title><rect x="716.4" y="963.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="719.4" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (5 samples, 1.73%)</title><rect x="720.4" y="979.0" width="20.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="723.4" y="990.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.35%)</title><rect x="728.6" y="963.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="731.6" y="974.0"></text>
</g>
<g>
<title>MachNode::mach_constant_base_node_input() const (1 samples, 0.35%)</title><rect x="728.6" y="947.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="731.6" y="958.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.35%)</title><rect x="732.7" y="963.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="735.7" y="974.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.35%)</title><rect x="736.8" y="963.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="739.8" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.35%)</title><rect x="740.9" y="979.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="743.9" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (7 samples, 2.42%)</title><rect x="744.9" y="979.0" width="28.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="747.9" y="990.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 1.38%)</title><rect x="753.1" y="963.0" width="16.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="756.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.35%)</title><rect x="765.4" y="947.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="768.4" y="958.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.35%)</title><rect x="769.4" y="963.0" width="4.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="772.4" y="974.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.35%)</title><rect x="773.5" y="979.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="776.5" y="990.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.35%)</title><rect x="773.5" y="963.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="776.5" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.35%)</title><rect x="773.5" y="947.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="776.5" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.69%)</title><rect x="777.6" y="979.0" width="8.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="780.6" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="781.7" y="963.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="784.7" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 1.04%)</title><rect x="785.8" y="979.0" width="12.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="788.8" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="793.9" y="963.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="796.9" y="974.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.38%)</title><rect x="798.0" y="979.0" width="16.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="801.0" y="990.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.35%)</title><rect x="806.2" y="963.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="809.2" y="974.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.35%)</title><rect x="810.3" y="963.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="813.3" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="810.3" y="947.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="813.3" y="958.0"></text>
</g>
<g>
<title>Compile::Optimize() (68 samples, 23.53%)</title><rect x="814.4" y="1011.0" width="277.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="817.4" y="1022.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.35%)</title><rect x="814.4" y="995.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="817.4" y="1006.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.35%)</title><rect x="814.4" y="979.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="817.4" y="990.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.35%)</title><rect x="814.4" y="963.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="817.4" y="974.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.69%)</title><rect x="818.4" y="995.0" width="8.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="821.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.35%)</title><rect x="822.5" y="979.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="825.5" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.35%)</title><rect x="822.5" y="963.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="825.5" y="974.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="822.5" y="947.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="825.5" y="958.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.35%)</title><rect x="822.5" y="931.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="825.5" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="822.5" y="915.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="825.5" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="822.5" y="899.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="825.5" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="822.5" y="883.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="825.5" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="822.5" y="867.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="825.5" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="822.5" y="851.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="825.5" y="862.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.35%)</title><rect x="822.5" y="835.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="825.5" y="846.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.35%)</title><rect x="822.5" y="819.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="825.5" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (5 samples, 1.73%)</title><rect x="826.6" y="995.0" width="20.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="829.6" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 1.73%)</title><rect x="826.6" y="979.0" width="20.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="829.6" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.35%)</title><rect x="830.7" y="963.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="833.7" y="974.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.35%)</title><rect x="830.7" y="947.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="833.7" y="958.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.35%)</title><rect x="830.7" y="931.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="833.7" y="942.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.35%)</title><rect x="830.7" y="915.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="833.7" y="926.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.35%)</title><rect x="830.7" y="899.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="833.7" y="910.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.35%)</title><rect x="830.7" y="883.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="833.7" y="894.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.35%)</title><rect x="830.7" y="867.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="833.7" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="830.7" y="851.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="833.7" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="830.7" y="835.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="833.7" y="846.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.35%)</title><rect x="830.7" y="819.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="833.7" y="830.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.35%)</title><rect x="830.7" y="803.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="833.7" y="814.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.35%)</title><rect x="830.7" y="787.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="833.7" y="798.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.35%)</title><rect x="830.7" y="771.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="833.7" y="782.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, char const*, Thread*) (1 samples, 0.35%)</title><rect x="830.7" y="755.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="833.7" y="766.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.35%)</title><rect x="830.7" y="739.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="833.7" y="750.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.35%)</title><rect x="830.7" y="723.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="833.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 1.04%)</title><rect x="834.8" y="963.0" width="12.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="837.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 1.04%)</title><rect x="834.8" y="947.0" width="12.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="837.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.69%)</title><rect x="838.9" y="931.0" width="8.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="841.9" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (2 samples, 0.69%)</title><rect x="838.9" y="915.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="841.9" y="926.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.35%)</title><rect x="838.9" y="899.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="841.9" y="910.0"></text>
</g>
<g>
<title>PhiNode::adr_type() const (1 samples, 0.35%)</title><rect x="842.9" y="899.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="845.9" y="910.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.35%)</title><rect x="847.0" y="995.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="850.0" y="1006.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.35%)</title><rect x="851.1" y="995.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="854.1" y="1006.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.35%)</title><rect x="851.1" y="979.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="854.1" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (42 samples, 14.53%)</title><rect x="855.2" y="995.0" width="171.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="858.2" y="1006.0">PhaseIdealLoop::build_..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.35%)</title><rect x="855.2" y="979.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="858.2" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.35%)</title><rect x="855.2" y="963.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="858.2" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*) (1 samples, 0.35%)</title><rect x="855.2" y="947.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="858.2" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::lazy_replace(Node*, Node*) (1 samples, 0.35%)</title><rect x="855.2" y="931.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="858.2" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.35%)</title><rect x="855.2" y="915.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="858.2" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.35%)</title><rect x="855.2" y="899.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="858.2" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.35%)</title><rect x="859.3" y="979.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="862.3" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.35%)</title><rect x="859.3" y="963.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="862.3" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.35%)</title><rect x="859.3" y="947.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="862.3" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.35%)</title><rect x="859.3" y="931.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="862.3" y="942.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.35%)</title><rect x="859.3" y="915.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="862.3" y="926.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.35%)</title><rect x="863.4" y="979.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="866.4" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.69%)</title><rect x="867.4" y="979.0" width="8.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="870.4" y="990.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.35%)</title><rect x="871.5" y="963.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="874.5" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.69%)</title><rect x="875.6" y="979.0" width="8.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="878.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (26 samples, 9.00%)</title><rect x="883.8" y="979.0" width="106.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="886.8" y="990.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (25 samples, 8.65%)</title><rect x="887.9" y="963.0" width="102.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="890.9" y="974.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.35%)</title><rect x="891.9" y="947.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="894.9" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (23 samples, 7.96%)</title><rect x="896.0" y="947.0" width="93.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="899.0" y="958.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.35%)</title><rect x="904.2" y="931.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="907.2" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.35%)</title><rect x="908.3" y="931.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="911.3" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.194] (1 samples, 0.35%)</title><rect x="908.3" y="915.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="911.3" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (19 samples, 6.57%)</title><rect x="912.4" y="931.0" width="77.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="915.4" y="942.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.35%)</title><rect x="989.9" y="979.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="992.9" y="990.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.35%)</title><rect x="989.9" y="963.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="992.9" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.35%)</title><rect x="994.0" y="979.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="997.0" y="990.0"></text>
</g>
<g>
<title>ConINode::Opcode() const (1 samples, 0.35%)</title><rect x="994.0" y="963.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="997.0" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 2.42%)</title><rect x="998.1" y="979.0" width="28.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1001.1" y="990.0">Ph..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="998.1" y="963.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1001.1" y="974.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.35%)</title><rect x="1002.2" y="963.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1005.2" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 1.73%)</title><rect x="1006.3" y="963.0" width="20.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1009.3" y="974.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.35%)</title><rect x="1006.3" y="947.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1009.3" y="958.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.35%)</title><rect x="1006.3" y="931.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1009.3" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.35%)</title><rect x="1010.3" y="947.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1013.3" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.35%)</title><rect x="1010.3" y="931.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1013.3" y="942.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.35%)</title><rect x="1014.4" y="947.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1017.4" y="958.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.35%)</title><rect x="1014.4" y="931.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1017.4" y="942.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.35%)</title><rect x="1018.5" y="947.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1021.5" y="958.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1022.6" y="947.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1025.6" y="958.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.35%)</title><rect x="1022.6" y="931.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1025.6" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (2 samples, 0.69%)</title><rect x="1026.7" y="995.0" width="8.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1029.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) [clone .constprop.238] (1 samples, 0.35%)</title><rect x="1030.8" y="979.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1033.8" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (10 samples, 3.46%)</title><rect x="1034.8" y="995.0" width="40.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1037.8" y="1006.0">Pha..</text>
</g>
<g>
<title>AddNode::hash() const (1 samples, 0.35%)</title><rect x="1034.8" y="979.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1037.8" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 3.11%)</title><rect x="1038.9" y="979.0" width="36.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1041.9" y="990.0">Pha..</text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.35%)</title><rect x="1043.0" y="963.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1046.0" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.35%)</title><rect x="1047.1" y="963.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1050.1" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 1.04%)</title><rect x="1051.2" y="963.0" width="12.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1054.2" y="974.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1063.4" y="963.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1066.4" y="974.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.35%)</title><rect x="1063.4" y="947.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1066.4" y="958.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.69%)</title><rect x="1067.5" y="963.0" width="8.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1070.5" y="974.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.69%)</title><rect x="1067.5" y="947.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1070.5" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.69%)</title><rect x="1067.5" y="931.0" width="8.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1070.5" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.69%)</title><rect x="1067.5" y="915.0" width="8.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1070.5" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.69%)</title><rect x="1067.5" y="899.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1070.5" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.69%)</title><rect x="1067.5" y="883.0" width="8.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1070.5" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.69%)</title><rect x="1067.5" y="867.0" width="8.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1070.5" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.69%)</title><rect x="1067.5" y="851.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1070.5" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.69%)</title><rect x="1067.5" y="835.0" width="8.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1070.5" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.69%)</title><rect x="1067.5" y="819.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1070.5" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.69%)</title><rect x="1067.5" y="803.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1070.5" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.69%)</title><rect x="1067.5" y="787.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1070.5" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.69%)</title><rect x="1067.5" y="771.0" width="8.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1070.5" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.69%)</title><rect x="1067.5" y="755.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1070.5" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.69%)</title><rect x="1067.5" y="739.0" width="8.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1070.5" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.69%)</title><rect x="1067.5" y="723.0" width="8.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1070.5" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1067.5" y="707.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1070.5" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1067.5" y="691.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1070.5" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1067.5" y="675.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1070.5" y="686.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.35%)</title><rect x="1067.5" y="659.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1070.5" y="670.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.35%)</title><rect x="1067.5" y="643.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1070.5" y="654.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.35%)</title><rect x="1071.6" y="707.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1074.6" y="718.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.35%)</title><rect x="1075.7" y="995.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1078.7" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.35%)</title><rect x="1075.7" y="979.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1078.7" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1075.7" y="963.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1078.7" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.35%)</title><rect x="1075.7" y="947.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1078.7" y="958.0"></text>
</g>
<g>
<title>scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*) (1 samples, 0.35%)</title><rect x="1075.7" y="931.0" width="4.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1078.7" y="942.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.35%)</title><rect x="1075.7" y="915.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1078.7" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.35%)</title><rect x="1075.7" y="899.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1078.7" y="910.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="1075.7" y="883.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1078.7" y="894.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.35%)</title><rect x="1075.7" y="867.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1078.7" y="878.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.35%)</title><rect x="1079.8" y="995.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1082.8" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.35%)</title><rect x="1079.8" y="979.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1082.8" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::initialize_object(AllocateNode*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.35%)</title><rect x="1079.8" y="963.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1082.8" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::make_load(Node*, Node*, Node*, int, Type const*, BasicType) (1 samples, 0.35%)</title><rect x="1079.8" y="947.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1082.8" y="958.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.35%)</title><rect x="1079.8" y="931.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1082.8" y="942.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.69%)</title><rect x="1083.8" y="995.0" width="8.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1086.8" y="1006.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.69%)</title><rect x="1083.8" y="979.0" width="8.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1086.8" y="990.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.35%)</title><rect x="1083.8" y="963.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1086.8" y="974.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.35%)</title><rect x="1087.9" y="963.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1090.9" y="974.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (2 samples, 0.69%)</title><rect x="1092.0" y="1011.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1095.0" y="1022.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (2 samples, 0.69%)</title><rect x="1092.0" y="995.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.0" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1092.0" y="979.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1095.0" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1092.0" y="963.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1095.0" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1092.0" y="947.0" width="8.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1092.0" y="931.0" width="8.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1095.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1092.0" y="915.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1092.0" y="899.0" width="8.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1095.0" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1092.0" y="883.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1095.0" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1092.0" y="867.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1092.0" y="851.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1092.0" y="835.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1095.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1092.0" y="819.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1095.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1092.0" y="803.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1095.0" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1092.0" y="787.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1095.0" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1092.0" y="771.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1095.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1092.0" y="755.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1092.0" y="739.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1095.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1092.0" y="723.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.35%)</title><rect x="1092.0" y="707.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1095.0" y="718.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.35%)</title><rect x="1092.0" y="691.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.0" y="702.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.35%)</title><rect x="1092.0" y="675.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.0" y="686.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.35%)</title><rect x="1092.0" y="659.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1095.0" y="670.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.35%)</title><rect x="1092.0" y="643.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.0" y="654.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.35%)</title><rect x="1092.0" y="627.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1095.0" y="638.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.35%)</title><rect x="1092.0" y="611.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1095.0" y="622.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.35%)</title><rect x="1092.0" y="595.0" width="4.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1095.0" y="606.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.35%)</title><rect x="1096.1" y="883.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.1" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1096.1" y="867.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1099.1" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1096.1" y="851.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1099.1" y="862.0"></text>
</g>
<g>
<title>ConstantPool::impl_klass_ref_index_at(int, bool) (1 samples, 0.35%)</title><rect x="1096.1" y="835.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1099.1" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (16 samples, 5.54%)</title><rect x="1100.2" y="1011.0" width="65.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.2" y="1022.0">ParseGe..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (16 samples, 5.54%)</title><rect x="1100.2" y="995.0" width="65.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.2" y="1006.0">Parse::..</text>
</g>
<g>
<title>Parse::do_all_blocks() (16 samples, 5.54%)</title><rect x="1100.2" y="979.0" width="65.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1103.2" y="990.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_block() (16 samples, 5.54%)</title><rect x="1100.2" y="963.0" width="65.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1103.2" y="974.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (16 samples, 5.54%)</title><rect x="1100.2" y="947.0" width="65.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1103.2" y="958.0">Parse::..</text>
</g>
<g>
<title>Parse::do_call() (16 samples, 5.54%)</title><rect x="1100.2" y="931.0" width="65.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1103.2" y="942.0">Parse::..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.35%)</title><rect x="1100.2" y="915.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1103.2" y="926.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.35%)</title><rect x="1100.2" y="899.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.2" y="910.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.35%)</title><rect x="1100.2" y="883.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1103.2" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.35%)</title><rect x="1100.2" y="867.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.2" y="878.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.35%)</title><rect x="1100.2" y="851.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1103.2" y="862.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.35%)</title><rect x="1100.2" y="835.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1103.2" y="846.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.35%)</title><rect x="1100.2" y="819.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.2" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 3.81%)</title><rect x="1104.3" y="915.0" width="44.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.3" y="926.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 3.81%)</title><rect x="1104.3" y="899.0" width="44.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1107.3" y="910.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 3.81%)</title><rect x="1104.3" y="883.0" width="44.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.3" y="894.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 3.81%)</title><rect x="1104.3" y="867.0" width="44.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.3" y="878.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 3.81%)</title><rect x="1104.3" y="851.0" width="44.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.3" y="862.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (11 samples, 3.81%)</title><rect x="1104.3" y="835.0" width="44.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1107.3" y="846.0">Pars..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 3.81%)</title><rect x="1104.3" y="819.0" width="44.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1107.3" y="830.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 3.81%)</title><rect x="1104.3" y="803.0" width="44.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.3" y="814.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 3.81%)</title><rect x="1104.3" y="787.0" width="44.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1107.3" y="798.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 3.81%)</title><rect x="1104.3" y="771.0" width="44.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1107.3" y="782.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 3.81%)</title><rect x="1104.3" y="755.0" width="44.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1107.3" y="766.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (11 samples, 3.81%)</title><rect x="1104.3" y="739.0" width="44.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.3" y="750.0">Pars..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.35%)</title><rect x="1104.3" y="723.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1107.3" y="734.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.35%)</title><rect x="1104.3" y="707.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.3" y="718.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.35%)</title><rect x="1104.3" y="691.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.3" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.35%)</title><rect x="1104.3" y="675.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1107.3" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.35%)</title><rect x="1104.3" y="659.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1107.3" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.35%)</title><rect x="1104.3" y="643.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.3" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.35%)</title><rect x="1104.3" y="627.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1107.3" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.35%)</title><rect x="1104.3" y="611.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.3" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putstatic(ciBytecodeStream*) (1 samples, 0.35%)</title><rect x="1104.3" y="595.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.3" y="606.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.35%)</title><rect x="1104.3" y="579.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1107.3" y="590.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.35%)</title><rect x="1104.3" y="563.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1107.3" y="574.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, Bytecodes::Code, bool, bool, Thread*) (1 samples, 0.35%)</title><rect x="1104.3" y="547.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1107.3" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.35%)</title><rect x="1104.3" y="531.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1107.3" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.35%)</title><rect x="1104.3" y="515.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1107.3" y="526.0"></text>
</g>
<g>
<title>fieldDescriptor::reinitialize(InstanceKlass*, int) (1 samples, 0.35%)</title><rect x="1104.3" y="499.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1107.3" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 2.77%)</title><rect x="1108.3" y="723.0" width="32.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1111.3" y="734.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 2.77%)</title><rect x="1108.3" y="707.0" width="32.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.3" y="718.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 2.77%)</title><rect x="1108.3" y="691.0" width="32.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1111.3" y="702.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 2.77%)</title><rect x="1108.3" y="675.0" width="32.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.3" y="686.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 2.77%)</title><rect x="1108.3" y="659.0" width="32.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.3" y="670.0">Pa..</text>
</g>
<g>
<title>GraphKit::array_element_address(Node*, Node*, BasicType, TypeInt const*, Node*) (1 samples, 0.35%)</title><rect x="1108.3" y="643.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.3" y="654.0"></text>
</g>
<g>
<title>Compile::constrained_convI2L(PhaseGVN*, Node*, TypeInt const*, Node*) (1 samples, 0.35%)</title><rect x="1108.3" y="627.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.3" y="638.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.35%)</title><rect x="1108.3" y="611.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1111.3" y="622.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.35%)</title><rect x="1108.3" y="595.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.3" y="606.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.35%)</title><rect x="1112.4" y="643.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.4" y="654.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.35%)</title><rect x="1112.4" y="627.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.4" y="638.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.35%)</title><rect x="1112.4" y="611.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.4" y="622.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.35%)</title><rect x="1112.4" y="595.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.4" y="606.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.35%)</title><rect x="1112.4" y="579.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1115.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.08%)</title><rect x="1116.5" y="643.0" width="24.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1119.5" y="654.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.08%)</title><rect x="1116.5" y="627.0" width="24.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.5" y="638.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.08%)</title><rect x="1116.5" y="611.0" width="24.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.5" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.08%)</title><rect x="1116.5" y="595.0" width="24.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1119.5" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.08%)</title><rect x="1116.5" y="579.0" width="24.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1119.5" y="590.0">P..</text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.35%)</title><rect x="1116.5" y="563.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1119.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.73%)</title><rect x="1120.6" y="563.0" width="20.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1123.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.73%)</title><rect x="1120.6" y="547.0" width="20.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.73%)</title><rect x="1120.6" y="531.0" width="20.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1123.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.73%)</title><rect x="1120.6" y="515.0" width="20.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1123.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.73%)</title><rect x="1120.6" y="499.0" width="20.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1123.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.73%)</title><rect x="1120.6" y="483.0" width="20.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.73%)</title><rect x="1120.6" y="467.0" width="20.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1123.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.73%)</title><rect x="1120.6" y="451.0" width="20.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1123.6" y="462.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.35%)</title><rect x="1120.6" y="435.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1123.6" y="446.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.35%)</title><rect x="1120.6" y="419.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1123.6" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.04%)</title><rect x="1124.7" y="435.0" width="12.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.7" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.04%)</title><rect x="1124.7" y="419.0" width="12.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.7" y="430.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.35%)</title><rect x="1124.7" y="403.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.7" y="414.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.35%)</title><rect x="1124.7" y="387.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.7" y="398.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.35%)</title><rect x="1124.7" y="371.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.7" y="382.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.35%)</title><rect x="1124.7" y="355.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.7" y="366.0"></text>
</g>
<g>
<title>ConstraintCastNode::Identity(PhaseTransform*) (1 samples, 0.35%)</title><rect x="1124.7" y="339.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.7" y="350.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.35%)</title><rect x="1124.7" y="323.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.7" y="334.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.35%)</title><rect x="1124.7" y="307.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1128.8" y="403.0" width="8.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1128.8" y="387.0" width="8.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1128.8" y="371.0" width="8.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1128.8" y="355.0" width="8.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.8" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1128.8" y="339.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.8" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1128.8" y="323.0" width="8.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1128.8" y="307.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1128.8" y="291.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1128.8" y="275.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1128.8" y="259.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.8" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1128.8" y="243.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.8" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1128.8" y="227.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1128.8" y="211.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1128.8" y="195.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1128.8" y="179.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1128.8" y="163.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.8" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1128.8" y="147.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.8" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1128.8" y="131.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1128.8" y="115.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.8" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1128.8" y="99.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.8" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1128.8" y="83.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.8" y="94.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.35%)</title><rect x="1128.8" y="67.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.8" y="78.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.35%)</title><rect x="1128.8" y="51.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.8" y="62.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.35%)</title><rect x="1128.8" y="35.0" width="4.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1131.8" y="46.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.35%)</title><rect x="1132.8" y="307.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.8" y="318.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.35%)</title><rect x="1136.9" y="435.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.9" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1136.9" y="419.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.9" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1141.0" y="723.0" width="8.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.0" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1141.0" y="707.0" width="8.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.0" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1141.0" y="691.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1141.0" y="675.0" width="8.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1141.0" y="659.0" width="8.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1141.0" y="643.0" width="8.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1141.0" y="627.0" width="8.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.0" y="638.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.35%)</title><rect x="1141.0" y="611.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.0" y="622.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.35%)</title><rect x="1141.0" y="595.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.0" y="606.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.35%)</title><rect x="1141.0" y="579.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.0" y="590.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="1141.0" y="563.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.0" y="574.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.35%)</title><rect x="1141.0" y="547.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.0" y="558.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.35%)</title><rect x="1141.0" y="531.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.0" y="542.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.35%)</title><rect x="1141.0" y="515.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.0" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1145.1" y="611.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.1" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1145.1" y="595.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1145.1" y="579.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1145.1" y="563.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1145.1" y="547.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1145.1" y="531.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.1" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1145.1" y="515.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.1" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1145.1" y="499.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1145.1" y="483.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1145.1" y="467.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1145.1" y="451.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1145.1" y="435.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.1" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1145.1" y="419.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.1" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1145.1" y="403.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1145.1" y="387.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1145.1" y="371.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1145.1" y="355.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1145.1" y="339.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.1" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1145.1" y="323.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.1" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1145.1" y="307.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1145.1" y="291.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1145.1" y="275.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1145.1" y="259.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1145.1" y="243.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.1" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1145.1" y="227.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.1" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1145.1" y="211.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1145.1" y="195.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1145.1" y="179.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1145.1" y="163.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.1" y="174.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.35%)</title><rect x="1145.1" y="147.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.1" y="158.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.35%)</title><rect x="1145.1" y="131.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.1" y="142.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.35%)</title><rect x="1145.1" y="115.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.1" y="126.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.35%)</title><rect x="1145.1" y="99.0" width="4.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1148.1" y="110.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 1.38%)</title><rect x="1149.2" y="915.0" width="16.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.2" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.38%)</title><rect x="1149.2" y="899.0" width="16.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.2" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.38%)</title><rect x="1149.2" y="883.0" width="16.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.38%)</title><rect x="1149.2" y="867.0" width="16.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.38%)</title><rect x="1149.2" y="851.0" width="16.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.38%)</title><rect x="1149.2" y="835.0" width="16.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.38%)</title><rect x="1149.2" y="819.0" width="16.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.2" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.04%)</title><rect x="1149.2" y="803.0" width="12.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.2" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.04%)</title><rect x="1149.2" y="787.0" width="12.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.04%)</title><rect x="1149.2" y="771.0" width="12.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.04%)</title><rect x="1149.2" y="755.0" width="12.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.04%)</title><rect x="1149.2" y="739.0" width="12.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.04%)</title><rect x="1149.2" y="723.0" width="12.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.2" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1149.2" y="707.0" width="8.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.2" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1149.2" y="691.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1149.2" y="675.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1149.2" y="659.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1149.2" y="643.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1149.2" y="627.0" width="8.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.2" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1149.2" y="611.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.2" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1149.2" y="595.0" width="8.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1149.2" y="579.0" width="8.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1149.2" y="563.0" width="8.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1149.2" y="547.0" width="8.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1149.2" y="531.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.2" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1149.2" y="515.0" width="8.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.2" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1149.2" y="499.0" width="8.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1149.2" y="483.0" width="8.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1149.2" y="467.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1149.2" y="451.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1149.2" y="435.0" width="8.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.2" y="446.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1149.2" y="419.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.2" y="430.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.35%)</title><rect x="1149.2" y="403.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.2" y="414.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.35%)</title><rect x="1149.2" y="387.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.2" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1149.2" y="371.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.2" y="382.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1149.2" y="355.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.2" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1149.2" y="339.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.2" y="350.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle, int) (1 samples, 0.35%)</title><rect x="1149.2" y="323.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.2" y="334.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.35%)</title><rect x="1149.2" y="307.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.2" y="318.0"></text>
</g>
<g>
<title>java_lang_ClassLoader::non_reflection_class_loader(oopDesc*) (1 samples, 0.35%)</title><rect x="1149.2" y="291.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.2" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1153.3" y="419.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.3" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1153.3" y="403.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1153.3" y="387.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1153.3" y="371.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1153.3" y="355.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1153.3" y="339.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.3" y="350.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.35%)</title><rect x="1153.3" y="323.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.3" y="334.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.35%)</title><rect x="1153.3" y="307.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.3" y="318.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.35%)</title><rect x="1153.3" y="291.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.3" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.35%)</title><rect x="1153.3" y="275.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.3" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.35%)</title><rect x="1153.3" y="259.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.3" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.35%)</title><rect x="1153.3" y="243.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.3" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.35%)</title><rect x="1153.3" y="227.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.3" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.35%)</title><rect x="1153.3" y="211.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.3" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.35%)</title><rect x="1153.3" y="195.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.3" y="206.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.35%)</title><rect x="1153.3" y="179.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.3" y="190.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.35%)</title><rect x="1153.3" y="163.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.3" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1157.3" y="707.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.3" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1157.3" y="691.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.3" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1157.3" y="675.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1157.3" y="659.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1157.3" y="643.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1157.3" y="627.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1157.3" y="611.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.3" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1157.3" y="595.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.3" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1157.3" y="579.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1157.3" y="563.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1157.3" y="547.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1157.3" y="531.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.35%)</title><rect x="1157.3" y="515.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.3" y="526.0"></text>
</g>
<g>
<title>ciInstanceKlass::java_mirror() (1 samples, 0.35%)</title><rect x="1157.3" y="499.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.3" y="510.0"></text>
</g>
<g>
<title>ciEnv::is_in_vm() (1 samples, 0.35%)</title><rect x="1157.3" y="483.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.3" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1161.4" y="803.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.4" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1161.4" y="787.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.4" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1161.4" y="771.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1161.4" y="755.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1161.4" y="739.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1161.4" y="723.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1161.4" y="707.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.4" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1161.4" y="691.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.4" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1161.4" y="675.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1161.4" y="659.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1161.4" y="643.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1161.4" y="627.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1161.4" y="611.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.4" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1161.4" y="595.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.4" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1161.4" y="579.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1161.4" y="563.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1161.4" y="547.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1161.4" y="531.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1161.4" y="515.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.4" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1161.4" y="499.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.4" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1161.4" y="483.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.4" y="494.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.35%)</title><rect x="1161.4" y="467.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.4" y="478.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.35%)</title><rect x="1161.4" y="451.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.4" y="462.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.35%)</title><rect x="1161.4" y="435.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.4" y="446.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.35%)</title><rect x="1161.4" y="419.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.4" y="430.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.35%)</title><rect x="1161.4" y="403.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.4" y="414.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.35%)</title><rect x="1161.4" y="387.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.4" y="398.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.35%)</title><rect x="1165.5" y="1011.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.5" y="1022.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.35%)</title><rect x="1165.5" y="995.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.5" y="1006.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.69%)</title><rect x="1169.6" y="1043.0" width="8.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.6" y="1054.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.69%)</title><rect x="1169.6" y="1027.0" width="8.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.6" y="1038.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.69%)</title><rect x="1169.6" y="1011.0" width="8.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.6" y="1022.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.69%)</title><rect x="1169.6" y="995.0" width="8.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.6" y="1006.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.35%)</title><rect x="1169.6" y="979.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.6" y="990.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.35%)</title><rect x="1169.6" y="963.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.6" y="974.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.35%)</title><rect x="1169.6" y="947.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.6" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.35%)</title><rect x="1169.6" y="931.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.6" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.35%)</title><rect x="1169.6" y="915.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.6" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.35%)</title><rect x="1169.6" y="899.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.6" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.35%)</title><rect x="1169.6" y="883.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.6" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.35%)</title><rect x="1169.6" y="867.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.6" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.35%)</title><rect x="1169.6" y="851.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.6" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.35%)</title><rect x="1169.6" y="835.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.6" y="846.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.35%)</title><rect x="1173.7" y="979.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.7" y="990.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.35%)</title><rect x="1173.7" y="963.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.7" y="974.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.35%)</title><rect x="1173.7" y="947.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.7" y="958.0"></text>
</g>
<g>
<title>LIR_Assembler::call(LIR_OpJavaCall*, relocInfo::relocType) (1 samples, 0.35%)</title><rect x="1173.7" y="931.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.7" y="942.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.35%)</title><rect x="1173.7" y="915.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.7" y="926.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.35%)</title><rect x="1173.7" y="899.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.7" y="910.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.35%)</title><rect x="1173.7" y="883.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.7" y="894.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.35%)</title><rect x="1177.8" y="1043.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.8" y="1054.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.35%)</title><rect x="1177.8" y="1027.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.8" y="1038.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.35%)</title><rect x="1177.8" y="1011.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.8" y="1022.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.35%)</title><rect x="1181.8" y="1059.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.8" y="1070.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.35%)</title><rect x="1181.8" y="1043.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="1054.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.35%)</title><rect x="1181.8" y="1027.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="1038.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.35%)</title><rect x="1181.8" y="1011.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.8" y="1022.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.35%)</title><rect x="1181.8" y="995.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.8" y="1006.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.35%)</title><rect x="1185.9" y="1075.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.9" y="1086.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.35%)</title><rect x="1185.9" y="1059.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.9" y="1070.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.35%)</title><rect x="1185.9" y="1043.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.9" y="1054.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.35%)</title><rect x="1185.9" y="1027.0" width="4.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1188.9" y="1038.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.35%)</title><rect x="1185.9" y="1011.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.9" y="1022.0"></text>
</g>
</g>
</svg>
