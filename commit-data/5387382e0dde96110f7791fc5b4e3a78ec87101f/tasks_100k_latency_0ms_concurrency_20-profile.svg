<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1590" onload="init(evt)" viewBox="0 0 1200 1590" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1573"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1573"> </text>
<g id="frames">
<g>
<title>all (211 samples, 100.00%)</title><rect x="10.0" y="1539.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1550.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.47%)</title><rect x="10.0" y="1523.0" width="5.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>nmethod::is_nmethod() const (1 samples, 0.47%)</title><rect x="10.0" y="1507.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.222.b10-1.el7_7.x86_64/jre/lib/amd64/server/libjvm.so (1 samples, 0.47%)</title><rect x="10.0" y="1491.0" width="5.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.47%)</title><rect x="10.0" y="1475.0" width="5.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>malloc_consolidate (1 samples, 0.47%)</title><rect x="10.0" y="1459.0" width="5.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (26 samples, 12.32%)</title><rect x="15.6" y="1523.0" width="145.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.6" y="1534.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (26 samples, 12.32%)</title><rect x="15.6" y="1507.0" width="145.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.6" y="1518.0">com/linecorp/decat..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (19 samples, 9.00%)</title><rect x="15.6" y="1491.0" width="106.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.6" y="1502.0">java/lang/Ite..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/96093084.accept (18 samples, 8.53%)</title><rect x="15.6" y="1475.0" width="100.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.6" y="1486.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (18 samples, 8.53%)</title><rect x="15.6" y="1459.0" width="100.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.6" y="1470.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (14 samples, 6.64%)</title><rect x="15.6" y="1443.0" width="78.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.6" y="1454.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (14 samples, 6.64%)</title><rect x="15.6" y="1427.0" width="78.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.6" y="1438.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (14 samples, 6.64%)</title><rect x="15.6" y="1411.0" width="78.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.6" y="1422.0">com/linec..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (12 samples, 5.69%)</title><rect x="26.8" y="1395.0" width="67.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="29.8" y="1406.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (12 samples, 5.69%)</title><rect x="26.8" y="1379.0" width="67.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="29.8" y="1390.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (12 samples, 5.69%)</title><rect x="26.8" y="1363.0" width="67.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.8" y="1374.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (11 samples, 5.21%)</title><rect x="32.4" y="1347.0" width="61.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="35.4" y="1358.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 1.42%)</title><rect x="38.0" y="1331.0" width="16.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="41.0" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 1.42%)</title><rect x="38.0" y="1315.0" width="16.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="41.0" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 1.42%)</title><rect x="38.0" y="1299.0" width="16.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="41.0" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 3.32%)</title><rect x="54.7" y="1331.0" width="39.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="57.7" y="1342.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 3.32%)</title><rect x="54.7" y="1315.0" width="39.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="57.7" y="1326.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 3.32%)</title><rect x="54.7" y="1299.0" width="39.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="57.7" y="1310.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 3.32%)</title><rect x="54.7" y="1283.0" width="39.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="57.7" y="1294.0">jav..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (7 samples, 3.32%)</title><rect x="54.7" y="1267.0" width="39.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="57.7" y="1278.0">sun..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.179] (1 samples, 0.47%)</title><rect x="54.7" y="1251.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="57.7" y="1262.0"></text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 2.37%)</title><rect x="60.3" y="1251.0" width="28.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="63.3" y="1262.0">U..</text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 1.90%)</title><rect x="60.3" y="1235.0" width="22.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="63.3" y="1246.0">_..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.47%)</title><rect x="82.7" y="1235.0" width="5.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="85.7" y="1246.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.47%)</title><rect x="88.3" y="1251.0" width="5.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="91.3" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.47%)</title><rect x="93.9" y="1443.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="96.9" y="1454.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.47%)</title><rect x="93.9" y="1427.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="96.9" y="1438.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.47%)</title><rect x="93.9" y="1411.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.9" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.42%)</title><rect x="99.5" y="1443.0" width="16.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.5" y="1454.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.42%)</title><rect x="99.5" y="1427.0" width="16.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="102.5" y="1438.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.95%)</title><rect x="105.1" y="1411.0" width="11.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="108.1" y="1422.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.95%)</title><rect x="105.1" y="1395.0" width="11.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="108.1" y="1406.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.95%)</title><rect x="105.1" y="1379.0" width="11.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="108.1" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.47%)</title><rect x="116.3" y="1475.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="119.3" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.47%)</title><rect x="116.3" y="1459.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="119.3" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.47%)</title><rect x="116.3" y="1443.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="119.3" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.47%)</title><rect x="116.3" y="1427.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="119.3" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 3.32%)</title><rect x="121.8" y="1491.0" width="39.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="124.8" y="1502.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 3.32%)</title><rect x="121.8" y="1475.0" width="39.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="124.8" y="1486.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 2.37%)</title><rect x="121.8" y="1459.0" width="28.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="124.8" y="1470.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 2.37%)</title><rect x="121.8" y="1443.0" width="28.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="124.8" y="1454.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 2.37%)</title><rect x="121.8" y="1427.0" width="28.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="124.8" y="1438.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.90%)</title><rect x="121.8" y="1411.0" width="22.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="124.8" y="1422.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.90%)</title><rect x="121.8" y="1395.0" width="22.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="124.8" y="1406.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.47%)</title><rect x="121.8" y="1379.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="124.8" y="1390.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.47%)</title><rect x="121.8" y="1363.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="124.8" y="1374.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.47%)</title><rect x="121.8" y="1347.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="124.8" y="1358.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.47%)</title><rect x="121.8" y="1331.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="124.8" y="1342.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.47%)</title><rect x="121.8" y="1315.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="124.8" y="1326.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.47%)</title><rect x="121.8" y="1299.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="124.8" y="1310.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.47%)</title><rect x="121.8" y="1283.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="124.8" y="1294.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.47%)</title><rect x="121.8" y="1267.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="124.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.95%)</title><rect x="127.4" y="1379.0" width="11.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="130.4" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.47%)</title><rect x="133.0" y="1363.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="136.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.47%)</title><rect x="133.0" y="1347.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="136.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.47%)</title><rect x="133.0" y="1331.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="136.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.47%)</title><rect x="133.0" y="1315.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="136.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.47%)</title><rect x="133.0" y="1299.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="136.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.47%)</title><rect x="133.0" y="1283.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="136.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.47%)</title><rect x="133.0" y="1267.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="136.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.47%)</title><rect x="138.6" y="1379.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="141.6" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.47%)</title><rect x="138.6" y="1363.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="141.6" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.47%)</title><rect x="138.6" y="1347.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="141.6" y="1358.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.47%)</title><rect x="138.6" y="1331.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="141.6" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.47%)</title><rect x="144.2" y="1411.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="147.2" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.47%)</title><rect x="144.2" y="1395.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="147.2" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.47%)</title><rect x="144.2" y="1379.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="147.2" y="1390.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.47%)</title><rect x="144.2" y="1363.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="147.2" y="1374.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.47%)</title><rect x="144.2" y="1347.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="147.2" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.47%)</title><rect x="144.2" y="1331.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="147.2" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.47%)</title><rect x="149.8" y="1459.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="152.8" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.47%)</title><rect x="149.8" y="1443.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="152.8" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.isEmpty (1 samples, 0.47%)</title><rect x="149.8" y="1427.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="152.8" y="1438.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.47%)</title><rect x="149.8" y="1411.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="152.8" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.47%)</title><rect x="149.8" y="1395.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="152.8" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.47%)</title><rect x="155.4" y="1459.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="158.4" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.47%)</title><rect x="155.4" y="1443.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="158.4" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.47%)</title><rect x="155.4" y="1427.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="158.4" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.47%)</title><rect x="155.4" y="1411.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="158.4" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.47%)</title><rect x="155.4" y="1395.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="158.4" y="1406.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.47%)</title><rect x="155.4" y="1379.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="158.4" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.47%)</title><rect x="155.4" y="1363.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="158.4" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.47%)</title><rect x="155.4" y="1347.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="158.4" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.47%)</title><rect x="155.4" y="1331.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="158.4" y="1342.0"></text>
</g>
<g>
<title>java/lang/Thread.run (60 samples, 28.44%)</title><rect x="161.0" y="1523.0" width="335.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="164.0" y="1534.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (60 samples, 28.44%)</title><rect x="161.0" y="1507.0" width="335.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="164.0" y="1518.0">java/util/concurrent/ThreadPoolExecutor$Worke..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (60 samples, 28.44%)</title><rect x="161.0" y="1491.0" width="335.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="164.0" y="1502.0">java/util/concurrent/ThreadPoolExecutor.runWo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/367668173.run (38 samples, 18.01%)</title><rect x="166.6" y="1475.0" width="212.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="169.6" y="1486.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (38 samples, 18.01%)</title><rect x="166.6" y="1459.0" width="212.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="169.6" y="1470.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (38 samples, 18.01%)</title><rect x="166.6" y="1443.0" width="212.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="169.6" y="1454.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (38 samples, 18.01%)</title><rect x="166.6" y="1427.0" width="212.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="169.6" y="1438.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.metadata (1 samples, 0.47%)</title><rect x="166.6" y="1411.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="169.6" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (2 samples, 0.95%)</title><rect x="172.2" y="1411.0" width="11.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="175.2" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (2 samples, 0.95%)</title><rect x="172.2" y="1395.0" width="11.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.2" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$186/1150625381.get (1 samples, 0.47%)</title><rect x="172.2" y="1379.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="175.2" y="1390.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.47%)</title><rect x="172.2" y="1363.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="175.2" y="1374.0"></text>
</g>
<g>
<title>java/lang/Math.max (1 samples, 0.47%)</title><rect x="177.8" y="1379.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="180.8" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (12 samples, 5.69%)</title><rect x="183.4" y="1411.0" width="67.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.4" y="1422.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (12 samples, 5.69%)</title><rect x="183.4" y="1395.0" width="67.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="186.4" y="1406.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (12 samples, 5.69%)</title><rect x="183.4" y="1379.0" width="67.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.4" y="1390.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 5.69%)</title><rect x="183.4" y="1363.0" width="67.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="186.4" y="1374.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 5.69%)</title><rect x="183.4" y="1347.0" width="67.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="186.4" y="1358.0">com/lin..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (12 samples, 5.69%)</title><rect x="183.4" y="1331.0" width="67.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="186.4" y="1342.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 2.84%)</title><rect x="183.4" y="1315.0" width="33.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="186.4" y="1326.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 2.84%)</title><rect x="183.4" y="1299.0" width="33.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="186.4" y="1310.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 2.84%)</title><rect x="183.4" y="1283.0" width="33.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="186.4" y="1294.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 1.42%)</title><rect x="183.4" y="1267.0" width="16.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="186.4" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 1.42%)</title><rect x="183.4" y="1251.0" width="16.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="186.4" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.47%)</title><rect x="200.1" y="1267.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="203.1" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.47%)</title><rect x="200.1" y="1251.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="203.1" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 0.95%)</title><rect x="205.7" y="1267.0" width="11.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="208.7" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.95%)</title><rect x="205.7" y="1251.0" width="11.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="208.7" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.47%)</title><rect x="211.3" y="1235.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="214.3" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (5 samples, 2.37%)</title><rect x="216.9" y="1315.0" width="28.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="219.9" y="1326.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.47%)</title><rect x="216.9" y="1299.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="219.9" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.47%)</title><rect x="216.9" y="1283.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="219.9" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (4 samples, 1.90%)</title><rect x="222.5" y="1299.0" width="22.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="225.5" y="1310.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 1.90%)</title><rect x="222.5" y="1283.0" width="22.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.5" y="1294.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 1.90%)</title><rect x="222.5" y="1267.0" width="22.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="225.5" y="1278.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 1.90%)</title><rect x="222.5" y="1251.0" width="22.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="225.5" y="1262.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.95%)</title><rect x="228.1" y="1235.0" width="11.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.1" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.47%)</title><rect x="233.7" y="1219.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.7" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.47%)</title><rect x="233.7" y="1203.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="236.7" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.47%)</title><rect x="233.7" y="1187.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.7" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.47%)</title><rect x="233.7" y="1171.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.7" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.47%)</title><rect x="239.3" y="1235.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.3" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.47%)</title><rect x="239.3" y="1219.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.3" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.47%)</title><rect x="239.3" y="1203.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="242.3" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.47%)</title><rect x="239.3" y="1187.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.3" y="1198.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.47%)</title><rect x="239.3" y="1171.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="242.3" y="1182.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.47%)</title><rect x="239.3" y="1155.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="242.3" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.47%)</title><rect x="244.9" y="1315.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.9" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.47%)</title><rect x="244.9" y="1299.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.9" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.47%)</title><rect x="244.9" y="1283.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.9" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.47%)</title><rect x="244.9" y="1267.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="247.9" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.47%)</title><rect x="244.9" y="1251.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="247.9" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (23 samples, 10.90%)</title><rect x="250.5" y="1411.0" width="128.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="253.5" y="1422.0">com/linecorp/dec..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.47%)</title><rect x="250.5" y="1395.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="253.5" y="1406.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.47%)</title><rect x="250.5" y="1379.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.5" y="1390.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.47%)</title><rect x="250.5" y="1363.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="253.5" y="1374.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.47%)</title><rect x="250.5" y="1347.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="253.5" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.47%)</title><rect x="250.5" y="1331.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="253.5" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (2 samples, 0.95%)</title><rect x="256.1" y="1395.0" width="11.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.1" y="1406.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (2 samples, 0.95%)</title><rect x="256.1" y="1379.0" width="11.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="259.1" y="1390.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.47%)</title><rect x="261.7" y="1363.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.7" y="1374.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.47%)</title><rect x="261.7" y="1347.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.7" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.95%)</title><rect x="267.3" y="1395.0" width="11.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.3" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.95%)</title><rect x="267.3" y="1379.0" width="11.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.3" y="1390.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.95%)</title><rect x="267.3" y="1363.0" width="11.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="270.3" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (10 samples, 4.74%)</title><rect x="278.4" y="1395.0" width="56.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.4" y="1406.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (10 samples, 4.74%)</title><rect x="278.4" y="1379.0" width="56.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.4" y="1390.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 1.90%)</title><rect x="284.0" y="1363.0" width="22.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.0" y="1374.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.90%)</title><rect x="284.0" y="1347.0" width="22.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="287.0" y="1358.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.47%)</title><rect x="295.2" y="1331.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="298.2" y="1342.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.47%)</title><rect x="295.2" y="1315.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.2" y="1326.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.47%)</title><rect x="295.2" y="1299.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.2" y="1310.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.47%)</title><rect x="300.8" y="1331.0" width="5.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="303.8" y="1342.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.47%)</title><rect x="306.4" y="1363.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="309.4" y="1374.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.47%)</title><rect x="306.4" y="1347.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="309.4" y="1358.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.47%)</title><rect x="306.4" y="1331.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="309.4" y="1342.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (4 samples, 1.90%)</title><rect x="312.0" y="1363.0" width="22.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="315.0" y="1374.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (4 samples, 1.90%)</title><rect x="312.0" y="1347.0" width="22.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="315.0" y="1358.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.47%)</title><rect x="312.0" y="1331.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="315.0" y="1342.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.47%)</title><rect x="312.0" y="1315.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="315.0" y="1326.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.47%)</title><rect x="312.0" y="1299.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="315.0" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.47%)</title><rect x="312.0" y="1283.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="315.0" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.47%)</title><rect x="312.0" y="1267.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="315.0" y="1278.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.42%)</title><rect x="317.6" y="1331.0" width="16.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="320.6" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.95%)</title><rect x="323.2" y="1315.0" width="11.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="326.2" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.47%)</title><rect x="328.8" y="1299.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="331.8" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (4 samples, 1.90%)</title><rect x="334.4" y="1395.0" width="22.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="337.4" y="1406.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (4 samples, 1.90%)</title><rect x="334.4" y="1379.0" width="22.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="337.4" y="1390.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/46561101.process (1 samples, 0.47%)</title><rect x="334.4" y="1363.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="337.4" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.47%)</title><rect x="334.4" y="1347.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="337.4" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.47%)</title><rect x="334.4" y="1331.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="337.4" y="1342.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.47%)</title><rect x="334.4" y="1315.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="337.4" y="1326.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.47%)</title><rect x="334.4" y="1299.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="337.4" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.47%)</title><rect x="334.4" y="1283.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="337.4" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.47%)</title><rect x="334.4" y="1267.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="337.4" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.47%)</title><rect x="334.4" y="1251.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="337.4" y="1262.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.47%)</title><rect x="334.4" y="1235.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="337.4" y="1246.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.47%)</title><rect x="334.4" y="1219.0" width="5.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="337.4" y="1230.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.47%)</title><rect x="340.0" y="1363.0" width="5.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="343.0" y="1374.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453523494.linkToTargetMethod (1 samples, 0.47%)</title><rect x="345.5" y="1363.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="348.5" y="1374.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (1 samples, 0.47%)</title><rect x="345.5" y="1347.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="348.5" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/1581210504.get$Lambda (1 samples, 0.47%)</title><rect x="345.5" y="1331.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="348.5" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/1581210504.&lt;init&gt; (1 samples, 0.47%)</title><rect x="345.5" y="1315.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="348.5" y="1326.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.47%)</title><rect x="351.1" y="1363.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="354.1" y="1374.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.47%)</title><rect x="351.1" y="1347.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="354.1" y="1358.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.47%)</title><rect x="351.1" y="1331.0" width="5.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="354.1" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.47%)</title><rect x="356.7" y="1395.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="359.7" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (1 samples, 0.47%)</title><rect x="356.7" y="1379.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="359.7" y="1390.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.47%)</title><rect x="356.7" y="1363.0" width="5.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="359.7" y="1374.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.47%)</title><rect x="356.7" y="1347.0" width="5.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="359.7" y="1358.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (1 samples, 0.47%)</title><rect x="362.3" y="1395.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="365.3" y="1406.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (1 samples, 0.47%)</title><rect x="362.3" y="1379.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="365.3" y="1390.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1998070244.linkToTargetMethod (1 samples, 0.47%)</title><rect x="362.3" y="1363.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="365.3" y="1374.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1015871670.invokeStatic_D_L (1 samples, 0.47%)</title><rect x="362.3" y="1347.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="365.3" y="1358.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter$$Lambda$259/880596779.get$Lambda (1 samples, 0.47%)</title><rect x="362.3" y="1331.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="365.3" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.95%)</title><rect x="367.9" y="1395.0" width="11.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="370.9" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.95%)</title><rect x="367.9" y="1379.0" width="11.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="370.9" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.95%)</title><rect x="367.9" y="1363.0" width="11.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="370.9" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$266/1663066142.accept (2 samples, 0.95%)</title><rect x="367.9" y="1347.0" width="11.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="370.9" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$0 (2 samples, 0.95%)</title><rect x="367.9" y="1331.0" width="11.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="370.9" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.95%)</title><rect x="367.9" y="1315.0" width="11.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="370.9" y="1326.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.95%)</title><rect x="367.9" y="1299.0" width="11.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="370.9" y="1310.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.95%)</title><rect x="367.9" y="1283.0" width="11.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="370.9" y="1294.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.47%)</title><rect x="373.5" y="1267.0" width="5.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="376.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.47%)</title><rect x="379.1" y="1475.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="382.1" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.47%)</title><rect x="379.1" y="1459.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="382.1" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.47%)</title><rect x="379.1" y="1443.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="382.1" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.47%)</title><rect x="379.1" y="1427.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="382.1" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 1.42%)</title><rect x="384.7" y="1475.0" width="16.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="387.7" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.42%)</title><rect x="384.7" y="1459.0" width="16.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="387.7" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (3 samples, 1.42%)</title><rect x="384.7" y="1443.0" width="16.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="387.7" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (17 samples, 8.06%)</title><rect x="401.5" y="1475.0" width="95.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="404.5" y="1486.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (17 samples, 8.06%)</title><rect x="401.5" y="1459.0" width="95.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="404.5" y="1470.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (16 samples, 7.58%)</title><rect x="407.1" y="1443.0" width="89.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="410.1" y="1454.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.47%)</title><rect x="412.7" y="1427.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="415.7" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.47%)</title><rect x="418.2" y="1427.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="421.2" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.47%)</title><rect x="418.2" y="1411.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="421.2" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.47%)</title><rect x="418.2" y="1395.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="421.2" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.47%)</title><rect x="418.2" y="1379.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="421.2" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (13 samples, 6.16%)</title><rect x="423.8" y="1427.0" width="72.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="426.8" y="1438.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (13 samples, 6.16%)</title><rect x="423.8" y="1411.0" width="72.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="426.8" y="1422.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Park (13 samples, 6.16%)</title><rect x="423.8" y="1395.0" width="72.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="426.8" y="1406.0">Unsafe_P..</text>
</g>
<g>
<title>BarrierSet::write_barrier(oopDesc*) (1 samples, 0.47%)</title><rect x="423.8" y="1379.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="426.8" y="1390.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.47%)</title><rect x="429.4" y="1379.0" width="5.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="432.4" y="1390.0"></text>
</g>
<g>
<title>__pthread_cond_wait (7 samples, 3.32%)</title><rect x="435.0" y="1379.0" width="39.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="438.0" y="1390.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.95%)</title><rect x="474.2" y="1379.0" width="11.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="477.2" y="1390.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.47%)</title><rect x="485.4" y="1379.0" width="5.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="488.4" y="1390.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.47%)</title><rect x="490.9" y="1379.0" width="5.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="493.9" y="1390.0"></text>
</g>
<g>
<title>start_thread (124 samples, 58.77%)</title><rect x="496.5" y="1523.0" width="693.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="499.5" y="1534.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (124 samples, 58.77%)</title><rect x="496.5" y="1507.0" width="693.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="499.5" y="1518.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 5.69%)</title><rect x="496.5" y="1491.0" width="67.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="499.5" y="1502.0">GangWor..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 1.90%)</title><rect x="496.5" y="1475.0" width="22.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="499.5" y="1486.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 1.90%)</title><rect x="496.5" y="1459.0" width="22.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="499.5" y="1470.0">G..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 1.42%)</title><rect x="496.5" y="1443.0" width="16.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="499.5" y="1454.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.47%)</title><rect x="513.3" y="1443.0" width="5.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="516.3" y="1454.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (8 samples, 3.79%)</title><rect x="518.9" y="1475.0" width="44.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="521.9" y="1486.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 3.32%)</title><rect x="518.9" y="1459.0" width="39.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="521.9" y="1470.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.47%)</title><rect x="518.9" y="1443.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="521.9" y="1454.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.47%)</title><rect x="518.9" y="1427.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="521.9" y="1438.0"></text>
</g>
<g>
<title>ReferenceProcessor::discover_reference(oopDesc*, ReferenceType) (1 samples, 0.47%)</title><rect x="518.9" y="1411.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="521.9" y="1422.0"></text>
</g>
<g>
<title>LRUMaxHeapPolicy::should_clear_reference(oopDesc*, long) (1 samples, 0.47%)</title><rect x="518.9" y="1395.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="521.9" y="1406.0"></text>
</g>
<g>
<title>java_lang_ref_SoftReference::timestamp(oopDesc*) (1 samples, 0.47%)</title><rect x="518.9" y="1379.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="521.9" y="1390.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.95%)</title><rect x="524.5" y="1443.0" width="11.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="527.5" y="1454.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.47%)</title><rect x="535.7" y="1443.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="538.7" y="1454.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 1.42%)</title><rect x="541.3" y="1443.0" width="16.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="544.3" y="1454.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.47%)</title><rect x="558.1" y="1459.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="561.1" y="1470.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.47%)</title><rect x="558.1" y="1443.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="561.1" y="1454.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.47%)</title><rect x="558.1" y="1427.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="561.1" y="1438.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.47%)</title><rect x="558.1" y="1411.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="561.1" y="1422.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.47%)</title><rect x="558.1" y="1395.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="561.1" y="1406.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.47%)</title><rect x="558.1" y="1379.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="561.1" y="1390.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.47%)</title><rect x="558.1" y="1363.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="561.1" y="1374.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (112 samples, 53.08%)</title><rect x="563.6" y="1491.0" width="626.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="566.6" y="1502.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (111 samples, 52.61%)</title><rect x="563.6" y="1475.0" width="620.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="566.6" y="1486.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (110 samples, 52.13%)</title><rect x="563.6" y="1459.0" width="615.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="566.6" y="1470.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (106 samples, 50.24%)</title><rect x="563.6" y="1443.0" width="592.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="566.6" y="1454.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (106 samples, 50.24%)</title><rect x="563.6" y="1427.0" width="592.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="566.6" y="1438.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (62 samples, 29.38%)</title><rect x="563.6" y="1411.0" width="346.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="566.6" y="1422.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.95%)</title><rect x="563.6" y="1395.0" width="11.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="566.6" y="1406.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.95%)</title><rect x="563.6" y="1379.0" width="11.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="566.6" y="1390.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.47%)</title><rect x="574.8" y="1395.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="577.8" y="1406.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.47%)</title><rect x="574.8" y="1379.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="577.8" y="1390.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.47%)</title><rect x="574.8" y="1363.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="577.8" y="1374.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.47%)</title><rect x="574.8" y="1347.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="577.8" y="1358.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 2.84%)</title><rect x="580.4" y="1395.0" width="33.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="583.4" y="1406.0">Ma..</text>
</g>
<g>
<title>AddLNode::Opcode() const (1 samples, 0.47%)</title><rect x="580.4" y="1379.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="583.4" y="1390.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.47%)</title><rect x="586.0" y="1379.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="589.0" y="1390.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.47%)</title><rect x="586.0" y="1363.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="589.0" y="1374.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.90%)</title><rect x="591.6" y="1379.0" width="22.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="594.6" y="1390.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.95%)</title><rect x="597.2" y="1363.0" width="11.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="600.2" y="1374.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.47%)</title><rect x="608.4" y="1363.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="611.4" y="1374.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.42%)</title><rect x="614.0" y="1395.0" width="16.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="617.0" y="1406.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.42%)</title><rect x="614.0" y="1379.0" width="16.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="617.0" y="1390.0"></text>
</g>
<g>
<title>Node::is_iteratively_computed() (1 samples, 0.47%)</title><rect x="614.0" y="1363.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="617.0" y="1374.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.47%)</title><rect x="619.6" y="1363.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="622.6" y="1374.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.47%)</title><rect x="619.6" y="1347.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="622.6" y="1358.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.47%)</title><rect x="625.2" y="1363.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="628.2" y="1374.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.47%)</title><rect x="630.8" y="1395.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="633.8" y="1406.0"></text>
</g>
<g>
<title>Block::is_Empty() const (1 samples, 0.47%)</title><rect x="630.8" y="1379.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="633.8" y="1390.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (49 samples, 23.22%)</title><rect x="636.4" y="1395.0" width="274.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="639.4" y="1406.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="636.4" y="1379.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="639.4" y="1390.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.47%)</title><rect x="641.9" y="1379.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="644.9" y="1390.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 2.37%)</title><rect x="647.5" y="1379.0" width="28.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="650.5" y="1390.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="653.1" y="1363.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="656.1" y="1374.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 1.42%)</title><rect x="658.7" y="1363.0" width="16.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="661.7" y="1374.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 1.42%)</title><rect x="658.7" y="1347.0" width="16.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="661.7" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.95%)</title><rect x="675.5" y="1379.0" width="11.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="678.5" y="1390.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.47%)</title><rect x="681.1" y="1363.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="684.1" y="1374.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.90%)</title><rect x="686.7" y="1379.0" width="22.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="689.7" y="1390.0">P..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (12 samples, 5.69%)</title><rect x="709.1" y="1379.0" width="67.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="712.1" y="1390.0">PhaseCh..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.47%)</title><rect x="725.8" y="1363.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="728.8" y="1374.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="731.4" y="1363.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="734.4" y="1374.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.47%)</title><rect x="737.0" y="1363.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="740.0" y="1374.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.47%)</title><rect x="742.6" y="1363.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="745.6" y="1374.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.42%)</title><rect x="748.2" y="1363.0" width="16.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="751.2" y="1374.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.47%)</title><rect x="759.4" y="1347.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="762.4" y="1358.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.47%)</title><rect x="765.0" y="1363.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="768.0" y="1374.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.47%)</title><rect x="770.6" y="1363.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="773.6" y="1374.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.95%)</title><rect x="776.2" y="1379.0" width="11.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="779.2" y="1390.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.47%)</title><rect x="781.8" y="1363.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="784.8" y="1374.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (3 samples, 1.42%)</title><rect x="787.3" y="1379.0" width="16.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="790.3" y="1390.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.95%)</title><rect x="792.9" y="1363.0" width="11.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="795.9" y="1374.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.47%)</title><rect x="804.1" y="1379.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="807.1" y="1390.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 2.37%)</title><rect x="809.7" y="1379.0" width="28.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="812.7" y="1390.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 1.90%)</title><rect x="815.3" y="1363.0" width="22.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="818.3" y="1374.0">P..</text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.47%)</title><rect x="832.1" y="1347.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="835.1" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.47%)</title><rect x="837.7" y="1379.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="840.7" y="1390.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.47%)</title><rect x="843.3" y="1379.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="846.3" y="1390.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.47%)</title><rect x="843.3" y="1363.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="846.3" y="1374.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.47%)</title><rect x="843.3" y="1347.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="846.3" y="1358.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.47%)</title><rect x="843.3" y="1331.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="846.3" y="1342.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 1.90%)</title><rect x="848.9" y="1379.0" width="22.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="851.9" y="1390.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="865.6" y="1363.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="868.6" y="1374.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 2.37%)</title><rect x="871.2" y="1379.0" width="28.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="874.2" y="1390.0">P..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.47%)</title><rect x="876.8" y="1363.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="879.8" y="1374.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.47%)</title><rect x="882.4" y="1363.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="885.4" y="1374.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.47%)</title><rect x="888.0" y="1363.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="891.0" y="1374.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.47%)</title><rect x="893.6" y="1363.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="896.6" y="1374.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.47%)</title><rect x="893.6" y="1347.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="896.6" y="1358.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.47%)</title><rect x="899.2" y="1379.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="902.2" y="1390.0"></text>
</g>
<g>
<title>loadBNode::ideal_Opcode() const (1 samples, 0.47%)</title><rect x="904.8" y="1379.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="907.8" y="1390.0"></text>
</g>
<g>
<title>Compile::Optimize() (33 samples, 15.64%)</title><rect x="910.4" y="1411.0" width="184.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="913.4" y="1422.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.47%)</title><rect x="910.4" y="1395.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="913.4" y="1406.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.47%)</title><rect x="910.4" y="1379.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="913.4" y="1390.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.47%)</title><rect x="916.0" y="1395.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="919.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.47%)</title><rect x="921.6" y="1395.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="924.6" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.47%)</title><rect x="921.6" y="1379.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="924.6" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.47%)</title><rect x="921.6" y="1363.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="924.6" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.47%)</title><rect x="921.6" y="1347.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="924.6" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::add_base(FieldNode*, PointsToNode*) [clone .isra.296] (1 samples, 0.47%)</title><rect x="921.6" y="1331.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="924.6" y="1342.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.47%)</title><rect x="927.2" y="1395.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="930.2" y="1406.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.47%)</title><rect x="932.7" y="1395.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="935.7" y="1406.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.47%)</title><rect x="932.7" y="1379.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="935.7" y="1390.0"></text>
</g>
<g>
<title>TypeOopPtr::singleton() const (1 samples, 0.47%)</title><rect x="932.7" y="1363.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="935.7" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (22 samples, 10.43%)</title><rect x="938.3" y="1395.0" width="123.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="941.3" y="1406.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.95%)</title><rect x="938.3" y="1379.0" width="11.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="941.3" y="1390.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.95%)</title><rect x="938.3" y="1363.0" width="11.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="941.3" y="1374.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.47%)</title><rect x="938.3" y="1347.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="941.3" y="1358.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.47%)</title><rect x="938.3" y="1331.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="941.3" y="1342.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.47%)</title><rect x="938.3" y="1315.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="941.3" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.47%)</title><rect x="938.3" y="1299.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="941.3" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.47%)</title><rect x="938.3" y="1283.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="941.3" y="1294.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.47%)</title><rect x="938.3" y="1267.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="941.3" y="1278.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.47%)</title><rect x="938.3" y="1251.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="941.3" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unswitching(IdealLoopTree*, Node_List&amp;) (1 samples, 0.47%)</title><rect x="943.9" y="1347.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="946.9" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::create_slow_version_of_loop(IdealLoopTree*, Node_List&amp;) (1 samples, 0.47%)</title><rect x="943.9" y="1331.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="946.9" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.47%)</title><rect x="943.9" y="1315.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="946.9" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::register_new_node_with_optimizer(Node*, Node*) (1 samples, 0.47%)</title><rect x="943.9" y="1299.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="946.9" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 1.42%)</title><rect x="949.5" y="1379.0" width="16.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="952.5" y="1390.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.47%)</title><rect x="955.1" y="1363.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="958.1" y="1374.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.47%)</title><rect x="960.7" y="1363.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="963.7" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.47%)</title><rect x="966.3" y="1379.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="969.3" y="1390.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 4.27%)</title><rect x="971.9" y="1379.0" width="50.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="974.9" y="1390.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (8 samples, 3.79%)</title><rect x="977.5" y="1363.0" width="44.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="980.5" y="1374.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (8 samples, 3.79%)</title><rect x="977.5" y="1347.0" width="44.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="980.5" y="1358.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.95%)</title><rect x="988.7" y="1331.0" width="11.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="991.7" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.47%)</title><rect x="994.3" y="1315.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="997.3" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.47%)</title><rect x="999.9" y="1331.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1002.9" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (3 samples, 1.42%)</title><rect x="1005.5" y="1331.0" width="16.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1008.5" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 1.90%)</title><rect x="1022.2" y="1379.0" width="22.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1025.2" y="1390.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 1.42%)</title><rect x="1044.6" y="1379.0" width="16.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1047.6" y="1390.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.47%)</title><rect x="1050.2" y="1363.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1053.2" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.47%)</title><rect x="1055.8" y="1363.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1058.8" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.47%)</title><rect x="1055.8" y="1347.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1058.8" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.47%)</title><rect x="1055.8" y="1331.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1058.8" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.47%)</title><rect x="1061.4" y="1395.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1064.4" y="1406.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) [clone .constprop.238] (1 samples, 0.47%)</title><rect x="1061.4" y="1379.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1064.4" y="1390.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) [clone .constprop.239] (1 samples, 0.47%)</title><rect x="1061.4" y="1363.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1064.4" y="1374.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 2.37%)</title><rect x="1067.0" y="1395.0" width="27.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1070.0" y="1406.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 2.37%)</title><rect x="1067.0" y="1379.0" width="27.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1070.0" y="1390.0">P..</text>
</g>
<g>
<title>CatchNode::Opcode() const (1 samples, 0.47%)</title><rect x="1067.0" y="1363.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1070.0" y="1374.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.47%)</title><rect x="1072.6" y="1363.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1075.6" y="1374.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.47%)</title><rect x="1072.6" y="1347.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1075.6" y="1358.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.47%)</title><rect x="1072.6" y="1331.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1075.6" y="1342.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.47%)</title><rect x="1072.6" y="1315.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1075.6" y="1326.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.47%)</title><rect x="1072.6" y="1299.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1075.6" y="1310.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.47%)</title><rect x="1078.2" y="1363.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1081.2" y="1374.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.47%)</title><rect x="1078.2" y="1347.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.2" y="1358.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.47%)</title><rect x="1078.2" y="1331.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.2" y="1342.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.47%)</title><rect x="1083.7" y="1363.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1086.7" y="1374.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.47%)</title><rect x="1089.3" y="1363.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1092.3" y="1374.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.47%)</title><rect x="1094.9" y="1411.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.9" y="1422.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (1 samples, 0.47%)</title><rect x="1094.9" y="1395.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1097.9" y="1406.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1094.9" y="1379.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.9" y="1390.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1094.9" y="1363.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1097.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1094.9" y="1347.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1097.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1094.9" y="1331.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.9" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1094.9" y="1315.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.9" y="1326.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1094.9" y="1299.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1097.9" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1094.9" y="1283.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.9" y="1294.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1094.9" y="1267.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.9" y="1278.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1094.9" y="1251.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.9" y="1262.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.47%)</title><rect x="1094.9" y="1235.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.9" y="1246.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.47%)</title><rect x="1094.9" y="1219.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.9" y="1230.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.47%)</title><rect x="1094.9" y="1203.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.9" y="1214.0"></text>
</g>
<g>
<title>GraphKit::set_all_memory(Node*) (1 samples, 0.47%)</title><rect x="1094.9" y="1187.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1097.9" y="1198.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.47%)</title><rect x="1094.9" y="1171.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1097.9" y="1182.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.47%)</title><rect x="1094.9" y="1155.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1097.9" y="1166.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.47%)</title><rect x="1094.9" y="1139.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.9" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 4.27%)</title><rect x="1100.5" y="1411.0" width="50.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.5" y="1422.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 4.27%)</title><rect x="1100.5" y="1395.0" width="50.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.5" y="1406.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 4.27%)</title><rect x="1100.5" y="1379.0" width="50.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1103.5" y="1390.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 4.27%)</title><rect x="1100.5" y="1363.0" width="50.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.5" y="1374.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 4.27%)</title><rect x="1100.5" y="1347.0" width="50.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.5" y="1358.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (9 samples, 4.27%)</title><rect x="1100.5" y="1331.0" width="50.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1103.5" y="1342.0">Parse..</text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1100.5" y="1315.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1103.5" y="1326.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.47%)</title><rect x="1100.5" y="1299.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1103.5" y="1310.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.47%)</title><rect x="1100.5" y="1283.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1103.5" y="1294.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.47%)</title><rect x="1100.5" y="1267.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1103.5" y="1278.0"></text>
</g>
<g>
<title>ConstraintCastNode::Identity(PhaseTransform*) (1 samples, 0.47%)</title><rect x="1100.5" y="1251.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.5" y="1262.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.47%)</title><rect x="1100.5" y="1235.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1103.5" y="1246.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.47%)</title><rect x="1100.5" y="1219.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.5" y="1230.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.47%)</title><rect x="1100.5" y="1203.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1103.5" y="1214.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.47%)</title><rect x="1100.5" y="1187.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.5" y="1198.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.47%)</title><rect x="1100.5" y="1171.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.5" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.90%)</title><rect x="1106.1" y="1315.0" width="22.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1109.1" y="1326.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.90%)</title><rect x="1106.1" y="1299.0" width="22.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1109.1" y="1310.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.90%)</title><rect x="1106.1" y="1283.0" width="22.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1109.1" y="1294.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.90%)</title><rect x="1106.1" y="1267.0" width="22.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1109.1" y="1278.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.90%)</title><rect x="1106.1" y="1251.0" width="22.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.1" y="1262.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.90%)</title><rect x="1106.1" y="1235.0" width="22.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1109.1" y="1246.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.90%)</title><rect x="1106.1" y="1219.0" width="22.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.1" y="1230.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.90%)</title><rect x="1106.1" y="1203.0" width="22.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1109.1" y="1214.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.90%)</title><rect x="1106.1" y="1187.0" width="22.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1109.1" y="1198.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.90%)</title><rect x="1106.1" y="1171.0" width="22.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1109.1" y="1182.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.90%)</title><rect x="1106.1" y="1155.0" width="22.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.1" y="1166.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.90%)</title><rect x="1106.1" y="1139.0" width="22.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1109.1" y="1150.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.90%)</title><rect x="1106.1" y="1123.0" width="22.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1109.1" y="1134.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.90%)</title><rect x="1106.1" y="1107.0" width="22.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1109.1" y="1118.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.90%)</title><rect x="1106.1" y="1091.0" width="22.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.1" y="1102.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.90%)</title><rect x="1106.1" y="1075.0" width="22.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.1" y="1086.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.90%)</title><rect x="1106.1" y="1059.0" width="22.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1109.1" y="1070.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.90%)</title><rect x="1106.1" y="1043.0" width="22.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.1" y="1054.0">P..</text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1106.1" y="1027.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1109.1" y="1038.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.47%)</title><rect x="1106.1" y="1011.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1109.1" y="1022.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind) (1 samples, 0.47%)</title><rect x="1106.1" y="995.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1109.1" y="1006.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.47%)</title><rect x="1106.1" y="979.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.1" y="990.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.47%)</title><rect x="1106.1" y="963.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1109.1" y="974.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.47%)</title><rect x="1106.1" y="947.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1109.1" y="958.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.47%)</title><rect x="1106.1" y="931.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1109.1" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.42%)</title><rect x="1111.7" y="1027.0" width="16.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1114.7" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.42%)</title><rect x="1111.7" y="1011.0" width="16.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.42%)</title><rect x="1111.7" y="995.0" width="16.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.42%)</title><rect x="1111.7" y="979.0" width="16.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.42%)</title><rect x="1111.7" y="963.0" width="16.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1114.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.42%)</title><rect x="1111.7" y="947.0" width="16.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1114.7" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.42%)</title><rect x="1111.7" y="931.0" width="16.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1114.7" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.42%)</title><rect x="1111.7" y="915.0" width="16.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1114.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.42%)</title><rect x="1111.7" y="899.0" width="16.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1114.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.42%)</title><rect x="1111.7" y="883.0" width="16.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.42%)</title><rect x="1111.7" y="867.0" width="16.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1114.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.95%)</title><rect x="1111.7" y="851.0" width="11.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.7" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.95%)</title><rect x="1111.7" y="835.0" width="11.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1114.7" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.95%)</title><rect x="1111.7" y="819.0" width="11.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1114.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.95%)</title><rect x="1111.7" y="803.0" width="11.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1114.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.95%)</title><rect x="1111.7" y="787.0" width="11.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.95%)</title><rect x="1111.7" y="771.0" width="11.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.95%)</title><rect x="1111.7" y="755.0" width="11.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1114.7" y="766.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.47%)</title><rect x="1111.7" y="739.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1114.7" y="750.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.47%)</title><rect x="1111.7" y="723.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1114.7" y="734.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.47%)</title><rect x="1111.7" y="707.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.7" y="718.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.47%)</title><rect x="1111.7" y="691.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1114.7" y="702.0"></text>
</g>
<g>
<title>ciMethod::should_inline() (1 samples, 0.47%)</title><rect x="1111.7" y="675.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1114.7" y="686.0"></text>
</g>
<g>
<title>CompilerOracle::should_inline(methodHandle) (1 samples, 0.47%)</title><rect x="1111.7" y="659.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.7" y="670.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.47%)</title><rect x="1117.3" y="739.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1120.3" y="750.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.47%)</title><rect x="1117.3" y="723.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.3" y="734.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.47%)</title><rect x="1117.3" y="707.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1120.3" y="718.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.47%)</title><rect x="1117.3" y="691.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1120.3" y="702.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.47%)</title><rect x="1117.3" y="675.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.3" y="686.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.47%)</title><rect x="1117.3" y="659.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.3" y="670.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.47%)</title><rect x="1117.3" y="643.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.47%)</title><rect x="1122.9" y="851.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.9" y="862.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.47%)</title><rect x="1122.9" y="835.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.9" y="846.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.47%)</title><rect x="1122.9" y="819.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.9" y="830.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar_volatile(int, int, Node*) (1 samples, 0.47%)</title><rect x="1122.9" y="803.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.9" y="814.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.47%)</title><rect x="1122.9" y="787.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.9" y="798.0"></text>
</g>
<g>
<title>MemBarNode::hash() const (1 samples, 0.47%)</title><rect x="1122.9" y="771.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.9" y="782.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 1.90%)</title><rect x="1128.5" y="1315.0" width="22.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.5" y="1326.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.42%)</title><rect x="1128.5" y="1299.0" width="16.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.5" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.42%)</title><rect x="1128.5" y="1283.0" width="16.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.42%)</title><rect x="1128.5" y="1267.0" width="16.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.42%)</title><rect x="1128.5" y="1251.0" width="16.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.42%)</title><rect x="1128.5" y="1235.0" width="16.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.5" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.95%)</title><rect x="1128.5" y="1219.0" width="11.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.5" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.95%)</title><rect x="1128.5" y="1203.0" width="11.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.5" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.95%)</title><rect x="1128.5" y="1187.0" width="11.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.95%)</title><rect x="1128.5" y="1171.0" width="11.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.95%)</title><rect x="1128.5" y="1155.0" width="11.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.95%)</title><rect x="1128.5" y="1139.0" width="11.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.95%)</title><rect x="1128.5" y="1123.0" width="11.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.5" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.95%)</title><rect x="1128.5" y="1107.0" width="11.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.5" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.95%)</title><rect x="1128.5" y="1091.0" width="11.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.95%)</title><rect x="1128.5" y="1075.0" width="11.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.95%)</title><rect x="1128.5" y="1059.0" width="11.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.95%)</title><rect x="1128.5" y="1043.0" width="11.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.5" y="1054.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.47%)</title><rect x="1128.5" y="1027.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.5" y="1038.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.47%)</title><rect x="1128.5" y="1011.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.5" y="1022.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.47%)</title><rect x="1128.5" y="995.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.5" y="1006.0"></text>
</g>
<g>
<title>BoolNode::bottom_type() const (1 samples, 0.47%)</title><rect x="1128.5" y="979.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1134.1" y="1027.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.1" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1134.1" y="1011.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.1" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1134.1" y="995.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.1" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1134.1" y="979.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.1" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1134.1" y="963.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.1" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1134.1" y="947.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.1" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1134.1" y="931.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.1" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1134.1" y="915.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.1" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1134.1" y="899.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1134.1" y="883.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1134.1" y="867.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1134.1" y="851.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1134.1" y="835.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.1" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1134.1" y="819.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.1" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1134.1" y="803.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1134.1" y="787.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1134.1" y="771.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1134.1" y="755.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1134.1" y="739.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.1" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1134.1" y="723.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.1" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1134.1" y="707.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1134.1" y="691.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1134.1" y="675.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1134.1" y="659.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1134.1" y="643.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.1" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1134.1" y="627.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.1" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1134.1" y="611.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1134.1" y="595.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1134.1" y="579.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1134.1" y="563.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1134.1" y="547.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.1" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1134.1" y="531.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.1" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1134.1" y="515.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1134.1" y="499.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1134.1" y="483.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1134.1" y="467.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1134.1" y="451.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.1" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1134.1" y="435.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.1" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1134.1" y="419.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1134.1" y="403.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1134.1" y="387.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1134.1" y="371.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1134.1" y="355.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.1" y="366.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.47%)</title><rect x="1134.1" y="339.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.1" y="350.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.47%)</title><rect x="1134.1" y="323.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.1" y="334.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.47%)</title><rect x="1134.1" y="307.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.1" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.47%)</title><rect x="1134.1" y="291.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.1" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.47%)</title><rect x="1134.1" y="275.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.1" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.47%)</title><rect x="1134.1" y="259.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.1" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.47%)</title><rect x="1134.1" y="243.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.1" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.47%)</title><rect x="1134.1" y="227.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.1" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.47%)</title><rect x="1134.1" y="211.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.1" y="222.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.47%)</title><rect x="1134.1" y="195.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.1" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="1134.1" y="179.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.1" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="1134.1" y="163.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.1" y="174.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.47%)</title><rect x="1134.1" y="147.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.1" y="158.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.47%)</title><rect x="1134.1" y="131.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.1" y="142.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.47%)</title><rect x="1134.1" y="115.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.1" y="126.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.47%)</title><rect x="1134.1" y="99.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.1" y="110.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.47%)</title><rect x="1134.1" y="83.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.1" y="94.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::OverpassLookupMode) const (1 samples, 0.47%)</title><rect x="1134.1" y="67.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.1" y="78.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.47%)</title><rect x="1134.1" y="51.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.1" y="62.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt;*, Symbol*) (1 samples, 0.47%)</title><rect x="1134.1" y="35.0" width="5.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1137.1" y="46.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.47%)</title><rect x="1139.7" y="1219.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.7" y="1230.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.47%)</title><rect x="1139.7" y="1203.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.7" y="1214.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.47%)</title><rect x="1139.7" y="1187.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.7" y="1198.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.47%)</title><rect x="1139.7" y="1171.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.7" y="1182.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.47%)</title><rect x="1139.7" y="1155.0" width="5.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1142.7" y="1166.0"></text>
</g>
<g>
<title>VirtualCallGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1145.3" y="1299.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.3" y="1310.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.47%)</title><rect x="1145.3" y="1283.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.3" y="1294.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.47%)</title><rect x="1145.3" y="1267.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.3" y="1278.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.47%)</title><rect x="1145.3" y="1251.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.3" y="1262.0"></text>
</g>
<g>
<title>CreateExNode::Identity(PhaseTransform*) (1 samples, 0.47%)</title><rect x="1145.3" y="1235.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.3" y="1246.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.47%)</title><rect x="1150.9" y="1411.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.9" y="1422.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.47%)</title><rect x="1150.9" y="1395.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.9" y="1406.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.47%)</title><rect x="1150.9" y="1379.0" width="5.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1153.9" y="1390.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 1.90%)</title><rect x="1156.4" y="1443.0" width="22.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.4" y="1454.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 1.90%)</title><rect x="1156.4" y="1427.0" width="22.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.4" y="1438.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.90%)</title><rect x="1156.4" y="1411.0" width="22.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.4" y="1422.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 1.90%)</title><rect x="1156.4" y="1395.0" width="22.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.4" y="1406.0">C..</text>
</g>
<g>
<title>Compilation::build_hir() (3 samples, 1.42%)</title><rect x="1156.4" y="1379.0" width="16.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.4" y="1390.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.47%)</title><rect x="1156.4" y="1363.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.4" y="1374.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.47%)</title><rect x="1156.4" y="1347.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.4" y="1358.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.47%)</title><rect x="1156.4" y="1331.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.4" y="1342.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.47%)</title><rect x="1156.4" y="1315.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.4" y="1326.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.47%)</title><rect x="1156.4" y="1299.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.4" y="1310.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.47%)</title><rect x="1156.4" y="1283.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.4" y="1294.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.47%)</title><rect x="1156.4" y="1267.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.4" y="1278.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.47%)</title><rect x="1156.4" y="1251.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.4" y="1262.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.95%)</title><rect x="1162.0" y="1363.0" width="11.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.0" y="1374.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.95%)</title><rect x="1162.0" y="1347.0" width="11.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.0" y="1358.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.95%)</title><rect x="1162.0" y="1331.0" width="11.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.0" y="1342.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.95%)</title><rect x="1162.0" y="1315.0" width="11.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.0" y="1326.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.95%)</title><rect x="1162.0" y="1299.0" width="11.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.0" y="1310.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.95%)</title><rect x="1162.0" y="1283.0" width="11.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.0" y="1294.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.95%)</title><rect x="1162.0" y="1267.0" width="11.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.0" y="1278.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.95%)</title><rect x="1162.0" y="1251.0" width="11.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.0" y="1262.0"></text>
</g>
<g>
<title>GraphBuilder::args_list_for_profiling(ciMethod*, int&amp;, bool) (1 samples, 0.47%)</title><rect x="1162.0" y="1235.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.0" y="1246.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.47%)</title><rect x="1162.0" y="1219.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.0" y="1230.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.47%)</title><rect x="1167.6" y="1235.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.6" y="1246.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.47%)</title><rect x="1167.6" y="1219.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.6" y="1230.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.47%)</title><rect x="1173.2" y="1379.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.2" y="1390.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.47%)</title><rect x="1173.2" y="1363.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.2" y="1374.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.47%)</title><rect x="1173.2" y="1347.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.2" y="1358.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.47%)</title><rect x="1173.2" y="1331.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.2" y="1342.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.47%)</title><rect x="1173.2" y="1315.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.2" y="1326.0"></text>
</g>
<g>
<title>OopMap::deep_copy() (1 samples, 0.47%)</title><rect x="1173.2" y="1299.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.2" y="1310.0"></text>
</g>
<g>
<title>OopMap::OopMap(OopMap::DeepCopyToken, OopMap*) (1 samples, 0.47%)</title><rect x="1173.2" y="1283.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.2" y="1294.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.47%)</title><rect x="1173.2" y="1267.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.2" y="1278.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.47%)</title><rect x="1178.8" y="1459.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.8" y="1470.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.47%)</title><rect x="1178.8" y="1443.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="1454.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.47%)</title><rect x="1178.8" y="1427.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="1438.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.47%)</title><rect x="1178.8" y="1411.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="1422.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.47%)</title><rect x="1178.8" y="1395.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="1406.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.47%)</title><rect x="1184.4" y="1475.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.4" y="1486.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.47%)</title><rect x="1184.4" y="1459.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.4" y="1470.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.47%)</title><rect x="1184.4" y="1443.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.4" y="1454.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.47%)</title><rect x="1184.4" y="1427.0" width="5.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1187.4" y="1438.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.47%)</title><rect x="1184.4" y="1411.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.4" y="1422.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.47%)</title><rect x="1184.4" y="1395.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.4" y="1406.0"></text>
</g>
</g>
</svg>
