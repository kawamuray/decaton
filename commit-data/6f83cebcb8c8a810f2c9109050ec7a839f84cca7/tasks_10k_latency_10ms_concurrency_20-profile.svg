<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="917"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="917"> </text>
<g id="frames">
<g>
<title>all (95 samples, 100.00%)</title><rect x="10.0" y="883.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="894.0">all</text>
</g>
<g>
<title>__memcpy_sse2 (1 samples, 1.05%)</title><rect x="10.0" y="867.0" width="12.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (3 samples, 3.16%)</title><rect x="22.4" y="867.0" width="37.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.4" y="878.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 1.05%)</title><rect x="22.4" y="851.0" width="12.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 1.05%)</title><rect x="22.4" y="835.0" width="12.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 1.05%)</title><rect x="22.4" y="819.0" width="12.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="25.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 1.05%)</title><rect x="22.4" y="803.0" width="12.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 1.05%)</title><rect x="22.4" y="787.0" width="12.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 1.05%)</title><rect x="22.4" y="771.0" width="12.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 1.05%)</title><rect x="22.4" y="755.0" width="12.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="25.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 1.05%)</title><rect x="22.4" y="739.0" width="12.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.wakeup (1 samples, 1.05%)</title><rect x="22.4" y="723.0" width="12.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.wakeup (1 samples, 1.05%)</title><rect x="22.4" y="707.0" width="12.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.4" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (1 samples, 1.05%)</title><rect x="22.4" y="691.0" width="12.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.4" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (1 samples, 1.05%)</title><rect x="22.4" y="675.0" width="12.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 1.05%)</title><rect x="22.4" y="659.0" width="12.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (2 samples, 2.11%)</title><rect x="34.8" y="851.0" width="24.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="37.8" y="862.0">c..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 1.05%)</title><rect x="34.8" y="835.0" width="12.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="37.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/1992749273.accept (1 samples, 1.05%)</title><rect x="34.8" y="819.0" width="12.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (1 samples, 1.05%)</title><rect x="34.8" y="803.0" width="12.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="37.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 1.05%)</title><rect x="34.8" y="787.0" width="12.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="37.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 1.05%)</title><rect x="34.8" y="771.0" width="12.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="37.8" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 1.05%)</title><rect x="34.8" y="755.0" width="12.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 1.05%)</title><rect x="34.8" y="739.0" width="12.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="37.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 1.05%)</title><rect x="34.8" y="723.0" width="12.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 1.05%)</title><rect x="34.8" y="707.0" width="12.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="37.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 1.05%)</title><rect x="34.8" y="691.0" width="12.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="37.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 1.05%)</title><rect x="34.8" y="675.0" width="12.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="37.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 1.05%)</title><rect x="34.8" y="659.0" width="12.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="37.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (1 samples, 1.05%)</title><rect x="47.3" y="835.0" width="12.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="50.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (1 samples, 1.05%)</title><rect x="47.3" y="819.0" width="12.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (1 samples, 1.05%)</title><rect x="47.3" y="803.0" width="12.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="50.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 1.05%)</title><rect x="47.3" y="787.0" width="12.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="50.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 1.05%)</title><rect x="47.3" y="771.0" width="12.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="50.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 1.05%)</title><rect x="47.3" y="755.0" width="12.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.nodes (1 samples, 1.05%)</title><rect x="47.3" y="739.0" width="12.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.keySet (1 samples, 1.05%)</title><rect x="47.3" y="723.0" width="12.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="50.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.keySet (1 samples, 1.05%)</title><rect x="47.3" y="707.0" width="12.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="50.3" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.run (4 samples, 4.21%)</title><rect x="59.7" y="867.0" width="49.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.7" y="878.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (4 samples, 4.21%)</title><rect x="59.7" y="851.0" width="49.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="62.7" y="862.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (4 samples, 4.21%)</title><rect x="59.7" y="835.0" width="49.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.7" y="846.0">java/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/583523036.run (3 samples, 3.16%)</title><rect x="72.1" y="819.0" width="37.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="75.1" y="830.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (3 samples, 3.16%)</title><rect x="72.1" y="803.0" width="37.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="75.1" y="814.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (3 samples, 3.16%)</title><rect x="72.1" y="787.0" width="37.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="75.1" y="798.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (3 samples, 3.16%)</title><rect x="72.1" y="771.0" width="37.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="75.1" y="782.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (1 samples, 1.05%)</title><rect x="72.1" y="755.0" width="12.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="75.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (1 samples, 1.05%)</title><rect x="72.1" y="739.0" width="12.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="75.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (1 samples, 1.05%)</title><rect x="72.1" y="723.0" width="12.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (1 samples, 1.05%)</title><rect x="72.1" y="707.0" width="12.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="75.1" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (1 samples, 1.05%)</title><rect x="72.1" y="691.0" width="12.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="75.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (1 samples, 1.05%)</title><rect x="72.1" y="675.0" width="12.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="75.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 1.05%)</title><rect x="72.1" y="659.0" width="12.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="75.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 1.05%)</title><rect x="72.1" y="643.0" width="12.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="75.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 1.05%)</title><rect x="72.1" y="627.0" width="12.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="75.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 1.05%)</title><rect x="72.1" y="611.0" width="12.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="75.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 1.05%)</title><rect x="72.1" y="595.0" width="12.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="75.1" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (2 samples, 2.11%)</title><rect x="84.5" y="755.0" width="24.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="87.5" y="766.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (2 samples, 2.11%)</title><rect x="84.5" y="739.0" width="24.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="87.5" y="750.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (2 samples, 2.11%)</title><rect x="84.5" y="723.0" width="24.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.5" y="734.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 1.05%)</title><rect x="96.9" y="707.0" width="12.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="99.9" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 1.05%)</title><rect x="96.9" y="691.0" width="12.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="99.9" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 1.05%)</title><rect x="96.9" y="675.0" width="12.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="99.9" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 1.05%)</title><rect x="96.9" y="659.0" width="12.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="99.9" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 1.05%)</title><rect x="96.9" y="643.0" width="12.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="99.9" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 1.05%)</title><rect x="96.9" y="627.0" width="12.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="99.9" y="638.0"></text>
</g>
<g>
<title>start_thread (87 samples, 91.58%)</title><rect x="109.4" y="867.0" width="1080.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="112.4" y="878.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (87 samples, 91.58%)</title><rect x="109.4" y="851.0" width="1080.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="112.4" y="862.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 10.53%)</title><rect x="109.4" y="835.0" width="124.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="112.4" y="846.0">GangWorker::loo..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 5.26%)</title><rect x="109.4" y="819.0" width="62.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="112.4" y="830.0">G1ParP..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 5.26%)</title><rect x="109.4" y="803.0" width="62.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="112.4" y="814.0">G1ParE..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 1.05%)</title><rect x="109.4" y="787.0" width="12.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="112.4" y="798.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 3.16%)</title><rect x="121.8" y="787.0" width="37.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="124.8" y="798.0">Spi..</text>
</g>
<g>
<title>__sched_yield (1 samples, 1.05%)</title><rect x="159.1" y="787.0" width="12.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="162.1" y="798.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (5 samples, 5.26%)</title><rect x="171.5" y="819.0" width="62.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="174.5" y="830.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 5.26%)</title><rect x="171.5" y="803.0" width="62.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="174.5" y="814.0">G1ParE..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 1.05%)</title><rect x="171.5" y="787.0" width="12.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="174.5" y="798.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 3.16%)</title><rect x="183.9" y="787.0" width="37.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="186.9" y="798.0">Gen..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 1.05%)</title><rect x="221.2" y="787.0" width="12.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="224.2" y="798.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (76 samples, 80.00%)</title><rect x="233.6" y="835.0" width="944.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="236.6" y="846.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (76 samples, 80.00%)</title><rect x="233.6" y="819.0" width="944.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="236.6" y="830.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (76 samples, 80.00%)</title><rect x="233.6" y="803.0" width="944.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="236.6" y="814.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (75 samples, 78.95%)</title><rect x="233.6" y="787.0" width="931.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="236.6" y="798.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (75 samples, 78.95%)</title><rect x="233.6" y="771.0" width="931.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="236.6" y="782.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (42 samples, 44.21%)</title><rect x="233.6" y="755.0" width="521.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="236.6" y="766.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 2.11%)</title><rect x="233.6" y="739.0" width="24.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="236.6" y="750.0">C..</text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 1.05%)</title><rect x="233.6" y="723.0" width="12.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="236.6" y="734.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 1.05%)</title><rect x="246.0" y="723.0" width="12.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="249.0" y="734.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 1.05%)</title><rect x="246.0" y="707.0" width="12.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="249.0" y="718.0"></text>
</g>
<g>
<title>MachNode::alignment_required() const (1 samples, 1.05%)</title><rect x="246.0" y="691.0" width="12.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="249.0" y="702.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 3.16%)</title><rect x="258.4" y="739.0" width="37.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="261.4" y="750.0">Mat..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 3.16%)</title><rect x="258.4" y="723.0" width="37.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="261.4" y="734.0">Mat..</text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 3.16%)</title><rect x="258.4" y="707.0" width="37.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="261.4" y="718.0">Are..</text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 2.11%)</title><rect x="295.7" y="739.0" width="24.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="298.7" y="750.0">P..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 2.11%)</title><rect x="295.7" y="723.0" width="24.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="298.7" y="734.0">P..</text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 2.11%)</title><rect x="295.7" y="707.0" width="24.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="298.7" y="718.0">P..</text>
</g>
<g>
<title>PhaseCFG::needed_for_next_call(Block*, Node*, VectorSet&amp;) (1 samples, 1.05%)</title><rect x="308.1" y="691.0" width="12.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="311.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (35 samples, 36.84%)</title><rect x="320.5" y="739.0" width="434.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="323.5" y="750.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 4.21%)</title><rect x="320.5" y="723.0" width="49.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="323.5" y="734.0">Phase..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 2.11%)</title><rect x="332.9" y="707.0" width="24.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="335.9" y="718.0">I..</text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 1.05%)</title><rect x="357.8" y="707.0" width="12.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="360.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 8.42%)</title><rect x="370.2" y="723.0" width="99.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="373.2" y="734.0">PhaseChaitin..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 9.47%)</title><rect x="469.6" y="723.0" width="111.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="472.6" y="734.0">PhaseChaitin:..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 2.11%)</title><rect x="531.7" y="707.0" width="24.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="534.7" y="718.0">P..</text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 1.05%)</title><rect x="556.5" y="707.0" width="12.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="559.5" y="718.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 1.05%)</title><rect x="568.9" y="707.0" width="12.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="571.9" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 1.05%)</title><rect x="581.4" y="723.0" width="12.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="584.4" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (4 samples, 4.21%)</title><rect x="593.8" y="723.0" width="49.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="596.8" y="734.0">Phase..</text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 2.11%)</title><rect x="618.6" y="707.0" width="24.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="621.6" y="718.0">R..</text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 2.11%)</title><rect x="643.5" y="723.0" width="24.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="646.5" y="734.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 1.05%)</title><rect x="655.9" y="707.0" width="12.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="658.9" y="718.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 2.11%)</title><rect x="668.3" y="723.0" width="24.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="671.3" y="734.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 2.11%)</title><rect x="668.3" y="707.0" width="24.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="671.3" y="718.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 2.11%)</title><rect x="668.3" y="691.0" width="24.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="671.3" y="702.0">P..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 2.11%)</title><rect x="668.3" y="675.0" width="24.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="671.3" y="686.0">I..</text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 1.05%)</title><rect x="693.2" y="723.0" width="12.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="696.2" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.05%)</title><rect x="693.2" y="707.0" width="12.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="696.2" y="718.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 3.16%)</title><rect x="705.6" y="723.0" width="37.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="708.6" y="734.0">Pha..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 1.05%)</title><rect x="730.4" y="707.0" width="12.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="733.4" y="718.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 1.05%)</title><rect x="730.4" y="691.0" width="12.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="733.4" y="702.0"></text>
</g>
<g>
<title>compP_mem_rRegNode::oper_input_base() const (1 samples, 1.05%)</title><rect x="742.8" y="723.0" width="12.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="745.8" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (28 samples, 29.47%)</title><rect x="755.3" y="755.0" width="347.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="758.3" y="766.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 2.11%)</title><rect x="755.3" y="739.0" width="24.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="758.3" y="750.0">C..</text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 2.11%)</title><rect x="755.3" y="723.0" width="24.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="758.3" y="734.0">C..</text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 2.11%)</title><rect x="755.3" y="707.0" width="24.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="758.3" y="718.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.05%)</title><rect x="767.7" y="691.0" width="12.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="770.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.05%)</title><rect x="767.7" y="675.0" width="12.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="770.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.05%)</title><rect x="767.7" y="659.0" width="12.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="770.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.05%)</title><rect x="767.7" y="643.0" width="12.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="770.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.05%)</title><rect x="767.7" y="627.0" width="12.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="770.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.05%)</title><rect x="767.7" y="611.0" width="12.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="770.7" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.05%)</title><rect x="767.7" y="595.0" width="12.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="770.7" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.05%)</title><rect x="767.7" y="579.0" width="12.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="770.7" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 1.05%)</title><rect x="767.7" y="563.0" width="12.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="770.7" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (21 samples, 22.11%)</title><rect x="780.1" y="739.0" width="260.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="783.1" y="750.0">PhaseIdealLoop::build_and_optimize(..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 1.05%)</title><rect x="780.1" y="723.0" width="12.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="783.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (17 samples, 17.89%)</title><rect x="792.5" y="723.0" width="211.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="795.5" y="734.0">PhaseIdealLoop::build_loop_l..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 1.05%)</title><rect x="829.8" y="707.0" width="12.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="832.8" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (13 samples, 13.68%)</title><rect x="842.2" y="707.0" width="161.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="845.2" y="718.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (13 samples, 13.68%)</title><rect x="842.2" y="691.0" width="161.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="845.2" y="702.0">PhaseIdealLoop::get_l..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 1.05%)</title><rect x="854.6" y="675.0" width="12.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="857.6" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (11 samples, 11.58%)</title><rect x="867.1" y="675.0" width="136.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="870.1" y="686.0">PhaseIdealLoop::i..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 2.11%)</title><rect x="1003.7" y="723.0" width="24.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1006.7" y="734.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 1.05%)</title><rect x="1016.1" y="707.0" width="12.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1019.1" y="718.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 1.05%)</title><rect x="1028.5" y="723.0" width="12.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1031.5" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 5.26%)</title><rect x="1040.9" y="739.0" width="62.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1043.9" y="750.0">PhaseI..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 5.26%)</title><rect x="1040.9" y="723.0" width="62.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1043.9" y="734.0">PhaseI..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 2.11%)</title><rect x="1040.9" y="707.0" width="24.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1043.9" y="718.0">L..</text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 1.05%)</title><rect x="1040.9" y="691.0" width="12.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1043.9" y="702.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 1.05%)</title><rect x="1040.9" y="675.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1043.9" y="686.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 1.05%)</title><rect x="1040.9" y="659.0" width="12.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1043.9" y="670.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 1.05%)</title><rect x="1053.4" y="691.0" width="12.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1056.4" y="702.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 1.05%)</title><rect x="1053.4" y="675.0" width="12.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1056.4" y="686.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 1.05%)</title><rect x="1053.4" y="659.0" width="12.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1056.4" y="670.0"></text>
</g>
<g>
<title>LoadUBNode::Value(PhaseTransform*) const (1 samples, 1.05%)</title><rect x="1065.8" y="707.0" width="12.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1068.8" y="718.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 1.05%)</title><rect x="1065.8" y="691.0" width="12.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1068.8" y="702.0"></text>
</g>
<g>
<title>ShenandoahBarrierNode::skip_through_barrier(Node*) (1 samples, 1.05%)</title><rect x="1065.8" y="675.0" width="12.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1068.8" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 1.05%)</title><rect x="1078.2" y="707.0" width="12.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.2" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 1.05%)</title><rect x="1078.2" y="691.0" width="12.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1081.2" y="702.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 1.05%)</title><rect x="1078.2" y="675.0" width="12.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1081.2" y="686.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 1.05%)</title><rect x="1090.6" y="707.0" width="12.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.6" y="718.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 1.05%)</title><rect x="1090.6" y="691.0" width="12.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.6" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 4.21%)</title><rect x="1103.1" y="755.0" width="49.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.1" y="766.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 4.21%)</title><rect x="1103.1" y="739.0" width="49.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1106.1" y="750.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 4.21%)</title><rect x="1103.1" y="723.0" width="49.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1106.1" y="734.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 4.21%)</title><rect x="1103.1" y="707.0" width="49.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1106.1" y="718.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 4.21%)</title><rect x="1103.1" y="691.0" width="49.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.1" y="702.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 4.21%)</title><rect x="1103.1" y="675.0" width="49.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1106.1" y="686.0">Parse..</text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 1.05%)</title><rect x="1103.1" y="659.0" width="12.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.1" y="670.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 1.05%)</title><rect x="1103.1" y="643.0" width="12.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1106.1" y="654.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 1.05%)</title><rect x="1103.1" y="627.0" width="12.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1106.1" y="638.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call_or_null(KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 1.05%)</title><rect x="1103.1" y="611.0" width="12.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1106.1" y="622.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_interface_method(CallInfo&amp;, methodHandle, KlassHandle, Handle, KlassHandle, bool, Thread*) (1 samples, 1.05%)</title><rect x="1103.1" y="595.0" width="12.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.1" y="606.0"></text>
</g>
<g>
<title>LinkResolver::lookup_instance_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, Thread*) (1 samples, 1.05%)</title><rect x="1103.1" y="579.0" width="12.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.1" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.16%)</title><rect x="1115.5" y="659.0" width="37.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1118.5" y="670.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.16%)</title><rect x="1115.5" y="643.0" width="37.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.5" y="654.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.16%)</title><rect x="1115.5" y="627.0" width="37.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1118.5" y="638.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.16%)</title><rect x="1115.5" y="611.0" width="37.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1118.5" y="622.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.16%)</title><rect x="1115.5" y="595.0" width="37.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1118.5" y="606.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.16%)</title><rect x="1115.5" y="579.0" width="37.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1118.5" y="590.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 2.11%)</title><rect x="1115.5" y="563.0" width="24.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.5" y="574.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 2.11%)</title><rect x="1115.5" y="547.0" width="24.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.5" y="558.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 2.11%)</title><rect x="1115.5" y="531.0" width="24.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1118.5" y="542.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 2.11%)</title><rect x="1115.5" y="515.0" width="24.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.5" y="526.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 2.11%)</title><rect x="1115.5" y="499.0" width="24.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1118.5" y="510.0">P..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 2.11%)</title><rect x="1115.5" y="483.0" width="24.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1118.5" y="494.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 2.11%)</title><rect x="1115.5" y="467.0" width="24.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1118.5" y="478.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 2.11%)</title><rect x="1115.5" y="451.0" width="24.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.5" y="462.0">P..</text>
</g>
<g>
<title>Dependencies::assert_evol_method(ciMethod*) (1 samples, 1.05%)</title><rect x="1115.5" y="435.0" width="12.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1118.5" y="446.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::grow(int) (1 samples, 1.05%)</title><rect x="1115.5" y="419.0" width="12.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.05%)</title><rect x="1127.9" y="435.0" width="12.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.05%)</title><rect x="1127.9" y="419.0" width="12.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.05%)</title><rect x="1127.9" y="403.0" width="12.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.05%)</title><rect x="1127.9" y="387.0" width="12.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.9" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.05%)</title><rect x="1127.9" y="371.0" width="12.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.9" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.05%)</title><rect x="1127.9" y="355.0" width="12.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.05%)</title><rect x="1127.9" y="339.0" width="12.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.05%)</title><rect x="1127.9" y="323.0" width="12.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.05%)</title><rect x="1127.9" y="307.0" width="12.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.05%)</title><rect x="1127.9" y="291.0" width="12.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.9" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.05%)</title><rect x="1127.9" y="275.0" width="12.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.9" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.05%)</title><rect x="1127.9" y="259.0" width="12.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.05%)</title><rect x="1127.9" y="243.0" width="12.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.05%)</title><rect x="1127.9" y="227.0" width="12.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.05%)</title><rect x="1127.9" y="211.0" width="12.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.05%)</title><rect x="1127.9" y="195.0" width="12.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.9" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.05%)</title><rect x="1127.9" y="179.0" width="12.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.9" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.05%)</title><rect x="1127.9" y="163.0" width="12.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.05%)</title><rect x="1127.9" y="147.0" width="12.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.05%)</title><rect x="1127.9" y="131.0" width="12.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.05%)</title><rect x="1127.9" y="115.0" width="12.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.05%)</title><rect x="1127.9" y="99.0" width="12.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.9" y="110.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.05%)</title><rect x="1127.9" y="83.0" width="12.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.9" y="94.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 1.05%)</title><rect x="1127.9" y="67.0" width="12.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.9" y="78.0"></text>
</g>
<g>
<title>GraphKit::load_object_klass(Node*) (1 samples, 1.05%)</title><rect x="1127.9" y="51.0" width="12.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.9" y="62.0"></text>
</g>
<g>
<title>LoadNode::bottom_type() const (1 samples, 1.05%)</title><rect x="1127.9" y="35.0" width="12.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.9" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.05%)</title><rect x="1140.3" y="563.0" width="12.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.3" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.05%)</title><rect x="1140.3" y="547.0" width="12.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.3" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.05%)</title><rect x="1140.3" y="531.0" width="12.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.05%)</title><rect x="1140.3" y="515.0" width="12.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.05%)</title><rect x="1140.3" y="499.0" width="12.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.05%)</title><rect x="1140.3" y="483.0" width="12.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.05%)</title><rect x="1140.3" y="467.0" width="12.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.3" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.05%)</title><rect x="1140.3" y="451.0" width="12.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.3" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.05%)</title><rect x="1140.3" y="435.0" width="12.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.05%)</title><rect x="1140.3" y="419.0" width="12.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1143.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.05%)</title><rect x="1140.3" y="403.0" width="12.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.05%)</title><rect x="1140.3" y="387.0" width="12.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.05%)</title><rect x="1140.3" y="371.0" width="12.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.3" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.05%)</title><rect x="1140.3" y="355.0" width="12.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.3" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.05%)</title><rect x="1140.3" y="339.0" width="12.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.3" y="350.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 1.05%)</title><rect x="1140.3" y="323.0" width="12.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.3" y="334.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 1.05%)</title><rect x="1140.3" y="307.0" width="12.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.3" y="318.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 1.05%)</title><rect x="1140.3" y="291.0" width="12.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.3" y="302.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 1.05%)</title><rect x="1140.3" y="275.0" width="12.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.3" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 1.05%)</title><rect x="1140.3" y="259.0" width="12.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.3" y="270.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 1.05%)</title><rect x="1140.3" y="243.0" width="12.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.3" y="254.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle, int) (1 samples, 1.05%)</title><rect x="1140.3" y="227.0" width="12.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.3" y="238.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 1.05%)</title><rect x="1152.7" y="755.0" width="12.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.7" y="766.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 1.05%)</title><rect x="1152.7" y="739.0" width="12.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.7" y="750.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 1.05%)</title><rect x="1152.7" y="723.0" width="12.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.7" y="734.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 1.05%)</title><rect x="1152.7" y="707.0" width="12.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.7" y="718.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 1.05%)</title><rect x="1152.7" y="691.0" width="12.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.7" y="702.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 1.05%)</title><rect x="1165.2" y="787.0" width="12.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.2" y="798.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 1.05%)</title><rect x="1165.2" y="771.0" width="12.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.2" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 1.05%)</title><rect x="1165.2" y="755.0" width="12.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.2" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 1.05%)</title><rect x="1165.2" y="739.0" width="12.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.2" y="750.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 1.05%)</title><rect x="1165.2" y="723.0" width="12.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.2" y="734.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 1.05%)</title><rect x="1165.2" y="707.0" width="12.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.2" y="718.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 1.05%)</title><rect x="1165.2" y="691.0" width="12.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.2" y="702.0"></text>
</g>
<g>
<title>LinearScan::add_use(LIR_OprDesc*, int, int, IntervalUseKind) (1 samples, 1.05%)</title><rect x="1165.2" y="675.0" width="12.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.2" y="686.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 1.05%)</title><rect x="1165.2" y="659.0" width="12.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1168.2" y="670.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 1.05%)</title><rect x="1177.6" y="835.0" width="12.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.6" y="846.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 1.05%)</title><rect x="1177.6" y="819.0" width="12.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.6" y="830.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 1.05%)</title><rect x="1177.6" y="803.0" width="12.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.6" y="814.0"></text>
</g>
</g>
</svg>
