<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="997"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="997"> </text>
<g id="frames">
<g>
<title>all (1,006 samples, 100.00%)</title><rect x="10.0" y="963.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="974.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (243 samples, 24.16%)</title><rect x="10.0" y="947.0" width="285.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="958.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (243 samples, 24.16%)</title><rect x="10.0" y="931.0" width="285.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="942.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.40%)</title><rect x="10.0" y="915.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.40%)</title><rect x="10.0" y="899.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/2119299398.accept (4 samples, 0.40%)</title><rect x="10.0" y="883.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.40%)</title><rect x="10.0" y="867.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.40%)</title><rect x="10.0" y="851.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.40%)</title><rect x="10.0" y="835.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (6 samples, 0.60%)</title><rect x="14.7" y="915.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (6 samples, 0.60%)</title><rect x="14.7" y="899.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.7" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (6 samples, 0.60%)</title><rect x="14.7" y="883.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.7" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (6 samples, 0.60%)</title><rect x="14.7" y="867.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.7" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (6 samples, 0.60%)</title><rect x="14.7" y="851.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.7" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (6 samples, 0.60%)</title><rect x="14.7" y="835.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (6 samples, 0.60%)</title><rect x="14.7" y="819.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.7" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.20%)</title><rect x="14.7" y="803.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.20%)</title><rect x="14.7" y="787.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.7" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.20%)</title><rect x="14.7" y="771.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$250/300682406.test (1 samples, 0.10%)</title><rect x="14.7" y="755.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.lambda$partitionsNeedsPause$44 (1 samples, 0.10%)</title><rect x="14.7" y="739.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.pendingTasksCount (1 samples, 0.10%)</title><rect x="14.7" y="723.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.10%)</title><rect x="14.7" y="707.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.7" y="718.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="15.9" y="755.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="18.9" y="766.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.10%)</title><rect x="17.0" y="803.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (3 samples, 0.30%)</title><rect x="18.2" y="803.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.2" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="20.6" y="787.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.6" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="20.6" y="771.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.10%)</title><rect x="21.7" y="915.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.10%)</title><rect x="21.7" y="899.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.7" y="910.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (180 samples, 17.89%)</title><rect x="22.9" y="915.0" width="211.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.9" y="926.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/34731794.accept (176 samples, 17.50%)</title><rect x="22.9" y="899.0" width="206.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.9" y="910.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (176 samples, 17.50%)</title><rect x="22.9" y="883.0" width="206.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.9" y="894.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (135 samples, 13.42%)</title><rect x="22.9" y="867.0" width="158.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.9" y="878.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (135 samples, 13.42%)</title><rect x="22.9" y="851.0" width="158.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.9" y="862.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (135 samples, 13.42%)</title><rect x="22.9" y="835.0" width="158.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.9" y="846.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (135 samples, 13.42%)</title><rect x="22.9" y="819.0" width="158.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.9" y="830.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (135 samples, 13.42%)</title><rect x="22.9" y="803.0" width="158.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.9" y="814.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (134 samples, 13.32%)</title><rect x="24.1" y="787.0" width="157.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.1" y="798.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (92 samples, 9.15%)</title><rect x="62.8" y="771.0" width="107.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="65.8" y="782.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.10%)</title><rect x="62.8" y="755.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (18 samples, 1.79%)</title><rect x="64.0" y="755.0" width="21.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="67.0" y="766.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (18 samples, 1.79%)</title><rect x="64.0" y="739.0" width="21.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="67.0" y="750.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (18 samples, 1.79%)</title><rect x="64.0" y="723.0" width="21.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.0" y="734.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.50%)</title><rect x="85.1" y="755.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="88.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (5 samples, 0.50%)</title><rect x="85.1" y="739.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="88.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.20%)</title><rect x="87.4" y="723.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="90.4" y="734.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.20%)</title><rect x="87.4" y="707.0" width="2.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="90.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.10%)</title><rect x="89.8" y="723.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="92.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (68 samples, 6.76%)</title><rect x="90.9" y="755.0" width="79.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="93.9" y="766.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (68 samples, 6.76%)</title><rect x="90.9" y="739.0" width="79.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="93.9" y="750.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (67 samples, 6.66%)</title><rect x="90.9" y="723.0" width="78.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="93.9" y="734.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (67 samples, 6.66%)</title><rect x="90.9" y="707.0" width="78.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="93.9" y="718.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (65 samples, 6.46%)</title><rect x="93.3" y="691.0" width="76.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="96.3" y="702.0">sun/misc..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.10%)</title><rect x="94.5" y="675.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="97.5" y="686.0"></text>
</g>
<g>
<title>Unsafe_Unpark (54 samples, 5.37%)</title><rect x="95.6" y="675.0" width="63.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="98.6" y="686.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="98.0" y="659.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="101.0" y="670.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.20%)</title><rect x="99.1" y="659.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="102.1" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_signal (37 samples, 3.68%)</title><rect x="101.5" y="659.0" width="43.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="104.5" y="670.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.30%)</title><rect x="144.9" y="659.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="147.9" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_lock (9 samples, 0.89%)</title><rect x="148.4" y="659.0" width="10.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="151.4" y="670.0"></text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 0.70%)</title><rect x="159.0" y="675.0" width="8.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="162.0" y="686.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.10%)</title><rect x="167.2" y="675.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="170.2" y="686.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.10%)</title><rect x="168.3" y="675.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="171.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.10%)</title><rect x="169.5" y="723.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="172.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.40%)</title><rect x="170.7" y="771.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="173.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (4 samples, 0.40%)</title><rect x="170.7" y="755.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="173.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.40%)</title><rect x="170.7" y="739.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="173.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="174.2" y="723.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="177.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.10%)</title><rect x="175.4" y="771.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="178.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.10%)</title><rect x="175.4" y="755.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="178.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="175.4" y="739.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="178.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.10%)</title><rect x="175.4" y="723.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="178.4" y="734.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.40%)</title><rect x="176.6" y="771.0" width="4.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="179.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (3 samples, 0.30%)</title><rect x="181.3" y="867.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="184.3" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.30%)</title><rect x="181.3" y="851.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="184.3" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (2 samples, 0.20%)</title><rect x="184.8" y="867.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="187.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.20%)</title><rect x="184.8" y="851.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="187.8" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.20%)</title><rect x="184.8" y="835.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="187.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (36 samples, 3.58%)</title><rect x="187.1" y="867.0" width="42.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="190.1" y="878.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (36 samples, 3.58%)</title><rect x="187.1" y="851.0" width="42.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="190.1" y="862.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (13 samples, 1.29%)</title><rect x="210.6" y="835.0" width="15.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.6" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.80%)</title><rect x="212.9" y="819.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.9" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 0.80%)</title><rect x="212.9" y="803.0" width="9.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="215.9" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.80%)</title><rect x="212.9" y="787.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="215.9" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="221.1" y="771.0" width="1.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="224.1" y="782.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.20%)</title><rect x="222.3" y="819.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="225.3" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.10%)</title><rect x="224.7" y="819.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.7" y="830.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.30%)</title><rect x="225.8" y="835.0" width="3.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="228.8" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.10%)</title><rect x="229.3" y="899.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.10%)</title><rect x="229.3" y="883.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.30%)</title><rect x="230.5" y="899.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="233.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.30%)</title><rect x="230.5" y="883.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.30%)</title><rect x="230.5" y="867.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="233.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.30%)</title><rect x="230.5" y="851.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="233.5" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (3 samples, 0.30%)</title><rect x="230.5" y="835.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.5" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.30%)</title><rect x="230.5" y="819.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="233.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (52 samples, 5.17%)</title><rect x="234.0" y="915.0" width="61.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.0" y="926.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (52 samples, 5.17%)</title><rect x="234.0" y="899.0" width="61.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="237.0" y="910.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (30 samples, 2.98%)</title><rect x="234.0" y="883.0" width="35.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.0" y="894.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (30 samples, 2.98%)</title><rect x="234.0" y="867.0" width="35.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.0" y="878.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (30 samples, 2.98%)</title><rect x="234.0" y="851.0" width="35.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.0" y="862.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (25 samples, 2.49%)</title><rect x="234.0" y="835.0" width="29.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="237.0" y="846.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (25 samples, 2.49%)</title><rect x="234.0" y="819.0" width="29.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.0" y="830.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (19 samples, 1.89%)</title><rect x="234.0" y="803.0" width="22.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.0" y="814.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeCloseRecordStream (12 samples, 1.19%)</title><rect x="234.0" y="787.0" width="14.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.60%)</title><rect x="248.1" y="787.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="251.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.60%)</title><rect x="248.1" y="771.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="251.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.60%)</title><rect x="248.1" y="755.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="251.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.60%)</title><rect x="248.1" y="739.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="251.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.60%)</title><rect x="248.1" y="723.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="251.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.60%)</title><rect x="248.1" y="707.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="251.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.60%)</title><rect x="248.1" y="691.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="251.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.10%)</title><rect x="255.1" y="787.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="258.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.uncompressedIterator (1 samples, 0.10%)</title><rect x="255.1" y="771.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="258.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.&lt;init&gt; (1 samples, 0.10%)</title><rect x="255.1" y="755.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="258.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.&lt;init&gt; (1 samples, 0.10%)</title><rect x="255.1" y="739.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="258.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.baseOffset (1 samples, 0.10%)</title><rect x="255.1" y="723.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="258.1" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.10%)</title><rect x="255.1" y="707.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="258.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (6 samples, 0.60%)</title><rect x="256.3" y="803.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.10%)</title><rect x="256.3" y="787.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="259.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (5 samples, 0.50%)</title><rect x="257.5" y="787.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="260.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.20%)</title><rect x="257.5" y="771.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.5" y="782.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.20%)</title><rect x="257.5" y="755.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="260.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 0.30%)</title><rect x="259.8" y="771.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.8" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.30%)</title><rect x="259.8" y="755.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="262.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (4 samples, 0.40%)</title><rect x="263.4" y="835.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (4 samples, 0.40%)</title><rect x="263.4" y="819.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="266.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (4 samples, 0.40%)</title><rect x="263.4" y="803.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.30%)</title><rect x="264.5" y="787.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="267.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="265.7" y="771.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="268.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="266.9" y="755.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="269.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.10%)</title><rect x="268.1" y="835.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.10%)</title><rect x="268.1" y="819.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="268.1" y="803.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="271.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="268.1" y="787.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="268.1" y="771.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="271.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (12 samples, 1.19%)</title><rect x="269.2" y="883.0" width="14.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="272.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (12 samples, 1.19%)</title><rect x="269.2" y="867.0" width="14.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="272.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.80%)</title><rect x="269.2" y="851.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.2" y="862.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.10%)</title><rect x="269.2" y="835.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.2" y="846.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.10%)</title><rect x="269.2" y="819.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="272.2" y="830.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.10%)</title><rect x="269.2" y="803.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="272.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.10%)</title><rect x="269.2" y="787.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.10%)</title><rect x="270.4" y="835.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="273.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.10%)</title><rect x="270.4" y="819.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="273.4" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="270.4" y="803.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="273.4" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="270.4" y="787.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="273.4" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="270.4" y="771.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="273.4" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="270.4" y="755.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.4" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="270.4" y="739.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="273.4" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="270.4" y="723.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.4" y="734.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$220/1971671035.get (1 samples, 0.10%)</title><rect x="270.4" y="707.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.20%)</title><rect x="271.6" y="835.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.6" y="846.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.20%)</title><rect x="271.6" y="819.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="274.6" y="830.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.20%)</title><rect x="271.6" y="803.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.6" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.10%)</title><rect x="271.6" y="787.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.6" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.10%)</title><rect x="271.6" y="771.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.6" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.10%)</title><rect x="272.7" y="787.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="275.7" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="272.7" y="771.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.7" y="782.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.10%)</title><rect x="272.7" y="755.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (4 samples, 0.40%)</title><rect x="273.9" y="835.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (4 samples, 0.40%)</title><rect x="273.9" y="819.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="276.9" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.40%)</title><rect x="273.9" y="803.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.40%)</title><rect x="273.9" y="787.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.9" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.30%)</title><rect x="275.1" y="771.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.30%)</title><rect x="275.1" y="755.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="278.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.30%)</title><rect x="275.1" y="739.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="278.1" y="750.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.10%)</title><rect x="275.1" y="723.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.1" y="734.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.10%)</title><rect x="275.1" y="707.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="278.1" y="718.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.10%)</title><rect x="275.1" y="691.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="278.1" y="702.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="276.3" y="723.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.3" y="734.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.10%)</title><rect x="276.3" y="707.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="279.3" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.10%)</title><rect x="276.3" y="691.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$213/90936878.apply (1 samples, 0.10%)</title><rect x="276.3" y="675.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.lambda$stream$0 (1 samples, 0.10%)</title><rect x="276.3" y="659.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="279.3" y="670.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="277.4" y="723.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="280.4" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="277.4" y="707.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="280.4" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="277.4" y="691.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="280.4" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="277.4" y="675.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="280.4" y="686.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$54/2095303566.get (1 samples, 0.10%)</title><rect x="277.4" y="659.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="280.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (4 samples, 0.40%)</title><rect x="278.6" y="851.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="281.6" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (4 samples, 0.40%)</title><rect x="278.6" y="835.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="281.6" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.40%)</title><rect x="278.6" y="819.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.6" y="830.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (3 samples, 0.30%)</title><rect x="279.8" y="803.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="282.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.20%)</title><rect x="281.0" y="787.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="282.1" y="771.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="285.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="282.1" y="755.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.10%)</title><rect x="282.1" y="739.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="285.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.10%)</title><rect x="282.1" y="723.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.1" y="734.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.10%)</title><rect x="282.1" y="707.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.10%)</title><rect x="283.3" y="883.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="286.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.50%)</title><rect x="284.5" y="883.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.50%)</title><rect x="284.5" y="867.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="287.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.20%)</title><rect x="284.5" y="851.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (2 samples, 0.20%)</title><rect x="284.5" y="835.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (2 samples, 0.20%)</title><rect x="284.5" y="819.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (2 samples, 0.20%)</title><rect x="284.5" y="803.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$4.read (1 samples, 0.10%)</title><rect x="284.5" y="787.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.5" y="798.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.10%)</title><rect x="285.6" y="787.0" width="1.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="288.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.30%)</title><rect x="286.8" y="851.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.20%)</title><rect x="286.8" y="835.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.20%)</title><rect x="286.8" y="819.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.20%)</title><rect x="286.8" y="803.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.20%)</title><rect x="286.8" y="787.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="289.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.20%)</title><rect x="286.8" y="771.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="289.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.20%)</title><rect x="286.8" y="755.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.8" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.20%)</title><rect x="286.8" y="739.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="289.8" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="286.8" y="723.0" width="1.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="289.8" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.10%)</title><rect x="288.0" y="723.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.0" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.10%)</title><rect x="288.0" y="707.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="291.0" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.10%)</title><rect x="288.0" y="691.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="291.0" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.10%)</title><rect x="288.0" y="675.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="291.0" y="686.0"></text>
</g>
<g>
<title>__read (1 samples, 0.10%)</title><rect x="288.0" y="659.0" width="1.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="291.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.10%)</title><rect x="289.2" y="835.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.2" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.10%)</title><rect x="289.2" y="819.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="292.2" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.10%)</title><rect x="289.2" y="803.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="292.2" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.10%)</title><rect x="289.2" y="787.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="292.2" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.10%)</title><rect x="289.2" y="771.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="292.2" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.10%)</title><rect x="289.2" y="755.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="292.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.40%)</title><rect x="290.3" y="883.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="293.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.40%)</title><rect x="290.3" y="867.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="293.3" y="878.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.10%)</title><rect x="291.5" y="851.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="294.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/166029058.accept (1 samples, 0.10%)</title><rect x="291.5" y="835.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.10%)</title><rect x="291.5" y="819.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="294.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.10%)</title><rect x="291.5" y="803.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="294.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.10%)</title><rect x="291.5" y="787.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="294.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.10%)</title><rect x="291.5" y="771.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="294.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.10%)</title><rect x="292.7" y="851.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.10%)</title><rect x="292.7" y="835.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="295.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="292.7" y="819.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="295.7" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="292.7" y="803.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="295.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="292.7" y="787.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="295.7" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="292.7" y="771.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="295.7" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="292.7" y="755.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="295.7" y="766.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="292.7" y="739.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="295.7" y="750.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.10%)</title><rect x="292.7" y="723.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="295.7" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.10%)</title><rect x="292.7" y="707.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="295.7" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="292.7" y="691.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$242/1930490494.test (1 samples, 0.10%)</title><rect x="292.7" y="675.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="295.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.10%)</title><rect x="292.7" y="659.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="295.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$241/2015507217.test (1 samples, 0.10%)</title><rect x="292.7" y="643.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (1 samples, 0.10%)</title><rect x="292.7" y="627.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.7" y="638.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.10%)</title><rect x="292.7" y="611.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.7" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.10%)</title><rect x="292.7" y="595.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="295.7" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="292.7" y="579.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="295.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.10%)</title><rect x="293.9" y="851.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="296.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.10%)</title><rect x="293.9" y="835.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="296.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.10%)</title><rect x="293.9" y="819.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="296.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.10%)</title><rect x="293.9" y="803.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.9" y="814.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.10%)</title><rect x="293.9" y="787.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.9" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="293.9" y="771.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.9" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.run (681 samples, 67.69%)</title><rect x="295.0" y="947.0" width="798.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="298.0" y="958.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (681 samples, 67.69%)</title><rect x="295.0" y="931.0" width="798.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="298.0" y="942.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (681 samples, 67.69%)</title><rect x="295.0" y="915.0" width="798.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="298.0" y="926.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="295.0" y="899.0" width="1.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="298.0" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="295.0" y="883.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="298.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/335932287.run (427 samples, 42.45%)</title><rect x="296.2" y="899.0" width="500.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="299.2" y="910.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/3359..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (427 samples, 42.45%)</title><rect x="296.2" y="883.0" width="500.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.2" y="894.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (427 samples, 42.45%)</title><rect x="296.2" y="867.0" width="500.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="299.2" y="878.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>[unknown] (2 samples, 0.20%)</title><rect x="298.5" y="851.0" width="2.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="301.5" y="862.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.20%)</title><rect x="298.5" y="835.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="301.5" y="846.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="300.9" y="851.0" width="3.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="303.9" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.99%)</title><rect x="304.4" y="851.0" width="11.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="307.4" y="862.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.70%)</title><rect x="307.9" y="835.0" width="8.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="310.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (409 samples, 40.66%)</title><rect x="316.1" y="851.0" width="479.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="319.1" y="862.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThe..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (116 samples, 11.53%)</title><rect x="322.0" y="835.0" width="136.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="325.0" y="846.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (109 samples, 10.83%)</title><rect x="330.2" y="819.0" width="127.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="333.2" y="830.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (109 samples, 10.83%)</title><rect x="330.2" y="803.0" width="127.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="333.2" y="814.0">com/linecorp/dec..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="330.2" y="787.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="333.2" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="330.2" y="771.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="333.2" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="330.2" y="755.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="333.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (108 samples, 10.74%)</title><rect x="331.4" y="787.0" width="126.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="334.4" y="798.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (108 samples, 10.74%)</title><rect x="331.4" y="771.0" width="126.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="334.4" y="782.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (108 samples, 10.74%)</title><rect x="331.4" y="755.0" width="126.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="334.4" y="766.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (26 samples, 2.58%)</title><rect x="331.4" y="739.0" width="30.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="334.4" y="750.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 0.40%)</title><rect x="331.4" y="723.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="334.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 0.40%)</title><rect x="331.4" y="707.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="334.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.40%)</title><rect x="331.4" y="691.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="334.4" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.40%)</title><rect x="331.4" y="675.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="334.4" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.40%)</title><rect x="331.4" y="659.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="334.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (22 samples, 2.19%)</title><rect x="336.1" y="723.0" width="25.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="339.1" y="734.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (22 samples, 2.19%)</title><rect x="336.1" y="707.0" width="25.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="339.1" y="718.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (8 samples, 0.80%)</title><rect x="336.1" y="691.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="339.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (8 samples, 0.80%)</title><rect x="336.1" y="675.0" width="9.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="339.1" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="343.1" y="659.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="346.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.10%)</title><rect x="344.3" y="659.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="347.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (14 samples, 1.39%)</title><rect x="345.5" y="691.0" width="16.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="348.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (14 samples, 1.39%)</title><rect x="345.5" y="675.0" width="16.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="348.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (8 samples, 0.80%)</title><rect x="346.6" y="659.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="349.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (5 samples, 0.50%)</title><rect x="356.0" y="659.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="359.0" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="360.7" y="643.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="363.7" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="360.7" y="627.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="363.7" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="360.7" y="611.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="363.7" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="360.7" y="595.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="363.7" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="360.7" y="579.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="363.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (77 samples, 7.65%)</title><rect x="361.9" y="739.0" width="90.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="364.9" y="750.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.20%)</title><rect x="361.9" y="723.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="364.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.20%)</title><rect x="361.9" y="707.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="364.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.20%)</title><rect x="361.9" y="691.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="364.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.20%)</title><rect x="361.9" y="675.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="364.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (2 samples, 0.20%)</title><rect x="361.9" y="659.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="364.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (2 samples, 0.20%)</title><rect x="361.9" y="643.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="364.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (2 samples, 0.20%)</title><rect x="361.9" y="627.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="364.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (7 samples, 0.70%)</title><rect x="364.2" y="723.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="367.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.70%)</title><rect x="364.2" y="707.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="367.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.60%)</title><rect x="372.4" y="723.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="375.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.30%)</title><rect x="376.0" y="707.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="379.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.30%)</title><rect x="376.0" y="691.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="379.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.20%)</title><rect x="377.1" y="675.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="380.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.20%)</title><rect x="377.1" y="659.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="380.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (62 samples, 6.16%)</title><rect x="379.5" y="723.0" width="72.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="382.5" y="734.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.89%)</title><rect x="379.5" y="707.0" width="22.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="382.5" y="718.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.50%)</title><rect x="392.4" y="691.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="395.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.50%)</title><rect x="392.4" y="675.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="395.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.50%)</title><rect x="392.4" y="659.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="395.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="398.3" y="691.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="401.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="398.3" y="675.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="401.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.20%)</title><rect x="399.4" y="691.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="402.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (43 samples, 4.27%)</title><rect x="401.8" y="707.0" width="50.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="404.8" y="718.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (43 samples, 4.27%)</title><rect x="401.8" y="691.0" width="50.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="404.8" y="702.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (43 samples, 4.27%)</title><rect x="401.8" y="675.0" width="50.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="404.8" y="686.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.69%)</title><rect x="406.5" y="659.0" width="19.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="409.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.50%)</title><rect x="415.8" y="643.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="418.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.50%)</title><rect x="415.8" y="627.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="418.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.50%)</title><rect x="415.8" y="611.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="418.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.20%)</title><rect x="419.4" y="595.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="422.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="421.7" y="643.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="424.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="421.7" y="627.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="424.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (3 samples, 0.30%)</title><rect x="422.9" y="643.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="425.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.80%)</title><rect x="426.4" y="659.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="429.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (8 samples, 0.80%)</title><rect x="426.4" y="643.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="429.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.80%)</title><rect x="426.4" y="627.0" width="9.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="429.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.80%)</title><rect x="426.4" y="611.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="429.4" y="622.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (8 samples, 0.80%)</title><rect x="426.4" y="595.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="429.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.60%)</title><rect x="435.8" y="659.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="438.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.60%)</title><rect x="435.8" y="643.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="438.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.60%)</title><rect x="435.8" y="627.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="438.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.60%)</title><rect x="435.8" y="611.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="438.8" y="622.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.60%)</title><rect x="435.8" y="595.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="438.8" y="606.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.40%)</title><rect x="438.1" y="579.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="441.1" y="590.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (1 samples, 0.10%)</title><rect x="441.7" y="563.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="444.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (8 samples, 0.80%)</title><rect x="442.8" y="659.0" width="9.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="445.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.80%)</title><rect x="442.8" y="643.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="445.8" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.80%)</title><rect x="442.8" y="627.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="445.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (5 samples, 0.50%)</title><rect x="452.2" y="739.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="455.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 0.50%)</title><rect x="452.2" y="723.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="455.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 0.50%)</title><rect x="452.2" y="707.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="455.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 0.50%)</title><rect x="452.2" y="691.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="455.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.50%)</title><rect x="452.2" y="675.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="455.2" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (265 samples, 26.34%)</title><rect x="458.1" y="835.0" width="310.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="461.1" y="846.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (47 samples, 4.67%)</title><rect x="460.4" y="819.0" width="55.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="463.4" y="830.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (3 samples, 0.30%)</title><rect x="460.4" y="803.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="463.4" y="814.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (44 samples, 4.37%)</title><rect x="463.9" y="803.0" width="51.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="466.9" y="814.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (42 samples, 4.17%)</title><rect x="466.3" y="787.0" width="49.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="469.3" y="798.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (27 samples, 2.68%)</title><rect x="467.5" y="771.0" width="31.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="470.5" y="782.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (27 samples, 2.68%)</title><rect x="467.5" y="755.0" width="31.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="470.5" y="766.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (27 samples, 2.68%)</title><rect x="467.5" y="739.0" width="31.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="470.5" y="750.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (27 samples, 2.68%)</title><rect x="467.5" y="723.0" width="31.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="470.5" y="734.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (27 samples, 2.68%)</title><rect x="467.5" y="707.0" width="31.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="470.5" y="718.0">ja..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (14 samples, 1.39%)</title><rect x="499.1" y="771.0" width="16.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="502.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (5 samples, 0.50%)</title><rect x="509.7" y="755.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="512.7" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.50%)</title><rect x="509.7" y="739.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="512.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.40%)</title><rect x="515.5" y="819.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="518.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.30%)</title><rect x="516.7" y="803.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="519.7" y="814.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.30%)</title><rect x="516.7" y="787.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="519.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (154 samples, 15.31%)</title><rect x="520.2" y="819.0" width="180.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="523.2" y="830.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="520.2" y="803.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="523.2" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="520.2" y="787.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="523.2" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="520.2" y="771.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="523.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (153 samples, 15.21%)</title><rect x="521.4" y="803.0" width="179.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="524.4" y="814.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.50%)</title><rect x="530.8" y="787.0" width="5.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="533.8" y="798.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.50%)</title><rect x="530.8" y="771.0" width="5.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="533.8" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (49 samples, 4.87%)</title><rect x="536.7" y="787.0" width="57.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="539.7" y="798.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (47 samples, 4.67%)</title><rect x="537.8" y="771.0" width="55.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="540.8" y="782.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (31 samples, 3.08%)</title><rect x="550.7" y="755.0" width="36.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="553.7" y="766.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (20 samples, 1.99%)</title><rect x="555.4" y="739.0" width="23.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="558.4" y="750.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (20 samples, 1.99%)</title><rect x="555.4" y="723.0" width="23.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="558.4" y="734.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (20 samples, 1.99%)</title><rect x="555.4" y="707.0" width="23.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="558.4" y="718.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (12 samples, 1.19%)</title><rect x="560.1" y="691.0" width="14.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="563.1" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="560.1" y="675.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="563.1" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="560.1" y="659.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="563.1" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (6 samples, 0.60%)</title><rect x="561.3" y="675.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="564.3" y="686.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (6 samples, 0.60%)</title><rect x="561.3" y="659.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="564.3" y="670.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (5 samples, 0.50%)</title><rect x="562.5" y="643.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="565.5" y="654.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.10%)</title><rect x="562.5" y="627.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="565.5" y="638.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (3 samples, 0.30%)</title><rect x="563.6" y="627.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="566.6" y="638.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.10%)</title><rect x="567.2" y="627.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="570.2" y="638.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.50%)</title><rect x="568.3" y="675.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="571.3" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (5 samples, 0.50%)</title><rect x="568.3" y="659.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="571.3" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.20%)</title><rect x="568.3" y="643.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="571.3" y="654.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (2 samples, 0.20%)</title><rect x="570.7" y="643.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="573.7" y="654.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="573.0" y="643.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="576.0" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.10%)</title><rect x="573.0" y="627.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="576.0" y="638.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.40%)</title><rect x="574.2" y="691.0" width="4.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="577.2" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.30%)</title><rect x="578.9" y="739.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="581.9" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.30%)</title><rect x="582.4" y="739.0" width="3.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="585.4" y="750.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="585.9" y="739.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="588.9" y="750.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.10%)</title><rect x="587.1" y="755.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="590.1" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.40%)</title><rect x="588.3" y="755.0" width="4.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="591.3" y="766.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.10%)</title><rect x="593.0" y="771.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="596.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.10%)</title><rect x="593.0" y="755.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="596.0" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.10%)</title><rect x="593.0" y="739.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="596.0" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="593.0" y="723.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="596.0" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="593.0" y="707.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="596.0" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="593.0" y="691.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="596.0" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="593.0" y="675.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="596.0" y="686.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.10%)</title><rect x="593.0" y="659.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="596.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="594.1" y="787.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="597.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (4 samples, 0.40%)</title><rect x="595.3" y="787.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="598.3" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.40%)</title><rect x="595.3" y="771.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="598.3" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.40%)</title><rect x="595.3" y="755.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="598.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.20%)</title><rect x="597.7" y="739.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="600.7" y="750.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (86 samples, 8.55%)</title><rect x="600.0" y="787.0" width="100.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="603.0" y="798.0">org/slf4j/MD..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (85 samples, 8.45%)</title><rect x="601.2" y="771.0" width="99.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="604.2" y="782.0">ch/qos/logba..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.70%)</title><rect x="601.2" y="755.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="604.2" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.70%)</title><rect x="601.2" y="739.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="604.2" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.70%)</title><rect x="601.2" y="723.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="604.2" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.70%)</title><rect x="601.2" y="707.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="604.2" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 0.30%)</title><rect x="605.9" y="691.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="608.9" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.20%)</title><rect x="607.0" y="675.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="610.0" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (78 samples, 7.75%)</title><rect x="609.4" y="755.0" width="91.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="612.4" y="766.0">java/util/C..</text>
</g>
<g>
<title>java/util/HashMap.put (73 samples, 7.26%)</title><rect x="615.2" y="739.0" width="85.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="618.2" y="750.0">java/util/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (44 samples, 4.37%)</title><rect x="649.3" y="723.0" width="51.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="652.3" y="734.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.40%)</title><rect x="679.8" y="707.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="682.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 1.09%)</title><rect x="684.5" y="707.0" width="12.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="687.5" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.20%)</title><rect x="695.0" y="691.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="698.0" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.20%)</title><rect x="695.0" y="675.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="698.0" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.20%)</title><rect x="695.0" y="659.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="698.0" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.20%)</title><rect x="695.0" y="643.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="698.0" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="695.0" y="627.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="698.0" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="695.0" y="611.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="698.0" y="622.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.10%)</title><rect x="695.0" y="595.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="698.0" y="606.0"></text>
</g>
<g>
<title>Monitor::TrySpin(Thread*) (1 samples, 0.10%)</title><rect x="695.0" y="579.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="698.0" y="590.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.10%)</title><rect x="696.2" y="627.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="699.2" y="638.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.30%)</title><rect x="697.4" y="707.0" width="3.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="700.4" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (42 samples, 4.17%)</title><rect x="700.9" y="819.0" width="49.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="703.9" y="830.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (42 samples, 4.17%)</title><rect x="700.9" y="803.0" width="49.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="703.9" y="814.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/738194263.process (17 samples, 1.69%)</title><rect x="707.9" y="787.0" width="20.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="710.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (16 samples, 1.59%)</title><rect x="709.1" y="771.0" width="18.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="712.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (16 samples, 1.59%)</title><rect x="709.1" y="755.0" width="18.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="712.1" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.20%)</title><rect x="710.3" y="739.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="713.3" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.20%)</title><rect x="710.3" y="723.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="713.3" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.20%)</title><rect x="710.3" y="707.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="713.3" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.20%)</title><rect x="710.3" y="691.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="713.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.20%)</title><rect x="710.3" y="675.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="713.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.10%)</title><rect x="711.4" y="659.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="714.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.50%)</title><rect x="712.6" y="739.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="715.6" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.40%)</title><rect x="713.8" y="723.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="716.8" y="734.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.40%)</title><rect x="713.8" y="707.0" width="4.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="716.8" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.80%)</title><rect x="718.5" y="739.0" width="9.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="721.5" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="726.7" y="723.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="729.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="726.7" y="707.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="729.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.50%)</title><rect x="727.9" y="787.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="730.9" y="798.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.50%)</title><rect x="727.9" y="771.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="730.9" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (6 samples, 0.60%)</title><rect x="733.7" y="787.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="736.7" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (6 samples, 0.60%)</title><rect x="733.7" y="771.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="736.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$268/1727767169.get$Lambda (6 samples, 0.60%)</title><rect x="733.7" y="755.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="736.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$268/1727767169.&lt;init&gt; (5 samples, 0.50%)</title><rect x="734.9" y="739.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="737.9" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.40%)</title><rect x="740.8" y="787.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="743.8" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.40%)</title><rect x="740.8" y="771.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="743.8" y="782.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.30%)</title><rect x="740.8" y="755.0" width="3.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="743.8" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.10%)</title><rect x="744.3" y="755.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="747.3" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.40%)</title><rect x="745.4" y="787.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="748.4" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="747.8" y="771.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="750.8" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="747.8" y="755.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="750.8" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="747.8" y="739.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="750.8" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="747.8" y="723.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="750.8" y="734.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.10%)</title><rect x="747.8" y="707.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="750.8" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.10%)</title><rect x="749.0" y="771.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="752.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.10%)</title><rect x="750.1" y="819.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="753.1" y="830.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.10%)</title><rect x="750.1" y="803.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="753.1" y="814.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.10%)</title><rect x="750.1" y="787.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="753.1" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="750.1" y="771.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="753.1" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="750.1" y="755.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="753.1" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="750.1" y="739.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="753.1" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="750.1" y="723.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="753.1" y="734.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="750.1" y="707.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="753.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.49%)</title><rect x="751.3" y="819.0" width="17.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="754.3" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.60%)</title><rect x="753.7" y="803.0" width="7.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="756.7" y="814.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.60%)</title><rect x="753.7" y="787.0" width="7.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="756.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.70%)</title><rect x="760.7" y="803.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="763.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.60%)</title><rect x="761.9" y="787.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="764.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/2008972250.accept (6 samples, 0.60%)</title><rect x="761.9" y="771.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="764.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (6 samples, 0.60%)</title><rect x="761.9" y="755.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="764.9" y="766.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (6 samples, 0.60%)</title><rect x="761.9" y="739.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="764.9" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (6 samples, 0.60%)</title><rect x="761.9" y="723.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="764.9" y="734.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.30%)</title><rect x="765.4" y="707.0" width="3.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="768.4" y="718.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.20%)</title><rect x="766.6" y="691.0" width="2.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="769.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.59%)</title><rect x="768.9" y="835.0" width="18.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="771.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (16 samples, 1.59%)</title><rect x="768.9" y="819.0" width="18.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="771.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (15 samples, 1.49%)</title><rect x="770.1" y="803.0" width="17.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="773.1" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$272/2000342808.accept (15 samples, 1.49%)</title><rect x="770.1" y="787.0" width="17.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="773.1" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (15 samples, 1.49%)</title><rect x="770.1" y="771.0" width="17.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="773.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$259/1527268139.complete (15 samples, 1.49%)</title><rect x="770.1" y="755.0" width="17.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="773.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (15 samples, 1.49%)</title><rect x="770.1" y="739.0" width="17.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="773.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (15 samples, 1.49%)</title><rect x="770.1" y="723.0" width="17.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="773.1" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (15 samples, 1.49%)</title><rect x="770.1" y="707.0" width="17.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="773.1" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (15 samples, 1.49%)</title><rect x="770.1" y="691.0" width="17.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="773.1" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (15 samples, 1.49%)</title><rect x="770.1" y="675.0" width="17.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="773.1" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (15 samples, 1.49%)</title><rect x="770.1" y="659.0" width="17.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="773.1" y="670.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.10%)</title><rect x="787.7" y="835.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="790.7" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.10%)</title><rect x="787.7" y="819.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="790.7" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.10%)</title><rect x="787.7" y="803.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="790.7" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.10%)</title><rect x="787.7" y="787.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="790.7" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.10%)</title><rect x="787.7" y="771.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="790.7" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.10%)</title><rect x="787.7" y="755.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="790.7" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.10%)</title><rect x="787.7" y="739.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="790.7" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.60%)</title><rect x="788.8" y="835.0" width="7.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="791.8" y="846.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.60%)</title><rect x="788.8" y="819.0" width="7.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="791.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.10%)</title><rect x="795.9" y="851.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="798.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (13 samples, 1.29%)</title><rect x="797.1" y="899.0" width="15.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="800.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 1.29%)</title><rect x="797.1" y="883.0" width="15.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="800.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 1.29%)</title><rect x="797.1" y="867.0" width="15.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="800.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 1.29%)</title><rect x="797.1" y="851.0" width="15.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="800.1" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="802.9" y="835.0" width="1.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="805.9" y="846.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="802.9" y="819.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="805.9" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.40%)</title><rect x="804.1" y="835.0" width="4.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="807.1" y="846.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="805.3" y="819.0" width="3.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="808.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (3 samples, 0.30%)</title><rect x="808.8" y="835.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="811.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (240 samples, 23.86%)</title><rect x="812.3" y="899.0" width="281.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="815.3" y="910.0">java/util/concurrent/ThreadPoolExecuto..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (237 samples, 23.56%)</title><rect x="815.8" y="883.0" width="278.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="818.8" y="894.0">java/util/concurrent/LinkedBlockingQu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (191 samples, 18.99%)</title><rect x="839.3" y="867.0" width="224.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="842.3" y="878.0">java/util/concurrent/locks/Abs..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (12 samples, 1.19%)</title><rect x="845.1" y="851.0" width="14.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="848.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 1.19%)</title><rect x="845.1" y="835.0" width="14.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="848.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="856.9" y="819.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="859.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.10%)</title><rect x="856.9" y="803.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="859.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.10%)</title><rect x="856.9" y="787.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="859.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.10%)</title><rect x="858.1" y="819.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="861.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (6 samples, 0.60%)</title><rect x="859.2" y="851.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="862.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (6 samples, 0.60%)</title><rect x="859.2" y="835.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="862.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (168 samples, 16.70%)</title><rect x="866.3" y="851.0" width="197.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="869.3" y="862.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (167 samples, 16.60%)</title><rect x="867.4" y="835.0" width="195.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="870.4" y="846.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.20%)</title><rect x="875.6" y="819.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="878.6" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.40%)</title><rect x="878.0" y="819.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="881.0" y="830.0"></text>
</g>
<g>
<title>Unsafe_Park (152 samples, 15.11%)</title><rect x="882.7" y="819.0" width="178.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="885.7" y="830.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.20%)</title><rect x="885.0" y="803.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="888.0" y="814.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.10%)</title><rect x="887.4" y="803.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="890.4" y="814.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="888.5" y="803.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="891.5" y="814.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (16 samples, 1.59%)</title><rect x="889.7" y="803.0" width="18.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="892.7" y="814.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.10%)</title><rect x="899.1" y="787.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="902.1" y="798.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="899.1" y="771.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="902.1" y="782.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="899.1" y="755.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="902.1" y="766.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="900.3" y="787.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="903.3" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.60%)</title><rect x="901.5" y="787.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="904.5" y="798.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.20%)</title><rect x="908.5" y="803.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="911.5" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.20%)</title><rect x="910.8" y="803.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="913.8" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.20%)</title><rect x="913.2" y="803.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="916.2" y="814.0"></text>
</g>
<g>
<title>__lll_lock_wait (5 samples, 0.50%)</title><rect x="915.5" y="803.0" width="5.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="918.5" y="814.0"></text>
</g>
<g>
<title>__lll_unlock_wake (35 samples, 3.48%)</title><rect x="921.4" y="803.0" width="41.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="924.4" y="814.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (64 samples, 6.36%)</title><rect x="962.4" y="803.0" width="75.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="965.4" y="814.0">__pthrea..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.40%)</title><rect x="1037.5" y="803.0" width="4.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1040.5" y="814.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.10%)</title><rect x="1042.2" y="803.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1045.2" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.20%)</title><rect x="1043.4" y="803.0" width="2.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1046.4" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.20%)</title><rect x="1045.7" y="803.0" width="2.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1048.7" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.40%)</title><rect x="1048.1" y="803.0" width="4.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1051.1" y="814.0"></text>
</g>
<g>
<title>_init (3 samples, 0.30%)</title><rect x="1052.8" y="803.0" width="3.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1055.8" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.30%)</title><rect x="1056.3" y="803.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1059.3" y="814.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="1059.8" y="803.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1062.8" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.20%)</title><rect x="1061.0" y="819.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1064.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.10%)</title><rect x="1063.3" y="867.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1066.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.10%)</title><rect x="1063.3" y="851.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1066.3" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="1063.3" y="835.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1066.3" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="1063.3" y="819.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1066.3" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="1063.3" y="803.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1066.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (25 samples, 2.49%)</title><rect x="1064.5" y="867.0" width="29.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1067.5" y="878.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (25 samples, 2.49%)</title><rect x="1064.5" y="851.0" width="29.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1067.5" y="862.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (25 samples, 2.49%)</title><rect x="1064.5" y="835.0" width="29.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1067.5" y="846.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (25 samples, 2.49%)</title><rect x="1064.5" y="819.0" width="29.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1067.5" y="830.0">ja..</text>
</g>
<g>
<title>start_thread (82 samples, 8.15%)</title><rect x="1093.8" y="947.0" width="96.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1096.8" y="958.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (82 samples, 8.15%)</title><rect x="1093.8" y="931.0" width="96.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1096.8" y="942.0">java_start(..</text>
</g>
<g>
<title>GangWorker::loop() (18 samples, 1.79%)</title><rect x="1093.8" y="915.0" width="21.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1096.8" y="926.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.10%)</title><rect x="1093.8" y="899.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.8" y="910.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.10%)</title><rect x="1093.8" y="883.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.8" y="894.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.10%)</title><rect x="1093.8" y="867.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1096.8" y="878.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (17 samples, 1.69%)</title><rect x="1095.0" y="899.0" width="19.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.0" y="910.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.70%)</title><rect x="1095.0" y="883.0" width="8.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.0" y="894.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.10%)</title><rect x="1095.0" y="867.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1098.0" y="878.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.10%)</title><rect x="1095.0" y="851.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1098.0" y="862.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.10%)</title><rect x="1096.2" y="867.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1099.2" y="878.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.50%)</title><rect x="1097.3" y="867.0" width="5.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1100.3" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.50%)</title><rect x="1103.2" y="883.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.2" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.20%)</title><rect x="1103.2" y="867.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.2" y="878.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.10%)</title><rect x="1103.2" y="851.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.2" y="862.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.10%)</title><rect x="1103.2" y="835.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1106.2" y="846.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.10%)</title><rect x="1103.2" y="819.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1106.2" y="830.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1104.4" y="851.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1107.4" y="862.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1104.4" y="835.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1107.4" y="846.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="1104.4" y="819.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1107.4" y="830.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="1104.4" y="803.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.4" y="814.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="1104.4" y="787.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1107.4" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.30%)</title><rect x="1105.5" y="867.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.5" y="878.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.30%)</title><rect x="1105.5" y="851.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1108.5" y="862.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.50%)</title><rect x="1109.1" y="883.0" width="5.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1112.1" y="894.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.50%)</title><rect x="1109.1" y="867.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.1" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.30%)</title><rect x="1109.1" y="851.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1112.1" y="862.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.30%)</title><rect x="1109.1" y="835.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1112.1" y="846.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.30%)</title><rect x="1109.1" y="819.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1112.1" y="830.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.30%)</title><rect x="1109.1" y="803.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.1" y="814.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.20%)</title><rect x="1109.1" y="787.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.1" y="798.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.10%)</title><rect x="1109.1" y="771.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1112.1" y="782.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.10%)</title><rect x="1109.1" y="755.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1112.1" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.10%)</title><rect x="1109.1" y="739.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1112.1" y="750.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.10%)</title><rect x="1110.2" y="771.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1113.2" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.10%)</title><rect x="1110.2" y="755.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1113.2" y="766.0"></text>
</g>
<g>
<title>Klass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.10%)</title><rect x="1111.4" y="787.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1114.4" y="798.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.20%)</title><rect x="1112.6" y="851.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.6" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.20%)</title><rect x="1112.6" y="835.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.6" y="846.0"></text>
</g>
<g>
<title>HeapRegionRemSet::iter_is_complete() (1 samples, 0.10%)</title><rect x="1112.6" y="819.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.6" y="830.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.10%)</title><rect x="1113.8" y="819.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.8" y="830.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::HeapRegionRemSetIterator(HeapRegionRemSet*) (1 samples, 0.10%)</title><rect x="1113.8" y="803.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.8" y="814.0"></text>
</g>
<g>
<title>JavaThread::run() (61 samples, 6.06%)</title><rect x="1114.9" y="915.0" width="71.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.9" y="926.0">JavaThre..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (61 samples, 6.06%)</title><rect x="1114.9" y="899.0" width="71.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.9" y="910.0">JavaThre..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (61 samples, 6.06%)</title><rect x="1114.9" y="883.0" width="71.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.9" y="894.0">CompileB..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (61 samples, 6.06%)</title><rect x="1114.9" y="867.0" width="71.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.9" y="878.0">CompileB..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (59 samples, 5.86%)</title><rect x="1114.9" y="851.0" width="69.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.9" y="862.0">C2Compi..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (59 samples, 5.86%)</title><rect x="1114.9" y="835.0" width="69.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.9" y="846.0">Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (34 samples, 3.38%)</title><rect x="1114.9" y="819.0" width="39.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.9" y="830.0">Com..</text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.10%)</title><rect x="1114.9" y="803.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.9" y="814.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.30%)</title><rect x="1116.1" y="803.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.1" y="814.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.30%)</title><rect x="1116.1" y="787.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1119.1" y="798.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.10%)</title><rect x="1116.1" y="771.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.1" y="782.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.10%)</title><rect x="1117.3" y="771.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.3" y="782.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1117.3" y="755.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1120.3" y="766.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1117.3" y="739.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1120.3" y="750.0"></text>
</g>
<g>
<title>State::_sub_Op_CmpN(Node const*) (1 samples, 0.10%)</title><rect x="1117.3" y="723.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.3" y="734.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.10%)</title><rect x="1118.4" y="771.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.4" y="782.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.10%)</title><rect x="1118.4" y="755.0" width="1.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1121.4" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.20%)</title><rect x="1119.6" y="803.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.6" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.20%)</title><rect x="1119.6" y="787.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.6" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1119.6" y="771.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.6" y="782.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.10%)</title><rect x="1119.6" y="755.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.6" y="766.0"></text>
</g>
<g>
<title>addI_rReg_immNode::ideal_Opcode() const (1 samples, 0.10%)</title><rect x="1120.8" y="771.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1123.8" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (27 samples, 2.68%)</title><rect x="1122.0" y="803.0" width="31.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.0" y="814.0">Ph..</text>
</g>
<g>
<title>JVMState::debug_end() const (1 samples, 0.10%)</title><rect x="1123.1" y="787.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.1" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.20%)</title><rect x="1124.3" y="787.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.3" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.20%)</title><rect x="1124.3" y="771.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.3" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.20%)</title><rect x="1124.3" y="755.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.3" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.10%)</title><rect x="1126.7" y="787.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.7" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.10%)</title><rect x="1126.7" y="771.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.7" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1126.7" y="755.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.7" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.30%)</title><rect x="1127.8" y="787.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1130.8" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 0.70%)</title><rect x="1131.4" y="787.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.4" y="798.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.10%)</title><rect x="1137.2" y="771.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.2" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.10%)</title><rect x="1138.4" y="771.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.4" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.30%)</title><rect x="1139.6" y="787.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.6" y="798.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.10%)</title><rect x="1141.9" y="771.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.9" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.10%)</title><rect x="1143.1" y="787.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.1" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.20%)</title><rect x="1144.3" y="787.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.3" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.10%)</title><rect x="1145.4" y="771.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.4" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.20%)</title><rect x="1146.6" y="787.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.6" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1147.8" y="771.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.8" y="782.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.40%)</title><rect x="1148.9" y="787.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.9" y="798.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1152.5" y="771.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.5" y="782.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.10%)</title><rect x="1152.5" y="755.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.5" y="766.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.10%)</title><rect x="1152.5" y="739.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.5" y="750.0"></text>
</g>
<g>
<title>jmpCon_shortNode::label_set(Label*, unsigned int) (1 samples, 0.10%)</title><rect x="1153.6" y="803.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.6" y="814.0"></text>
</g>
<g>
<title>Compile::Optimize() (19 samples, 1.89%)</title><rect x="1154.8" y="819.0" width="22.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.8" y="830.0">C..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.10%)</title><rect x="1154.8" y="803.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.8" y="814.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.10%)</title><rect x="1154.8" y="787.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.8" y="798.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.20%)</title><rect x="1156.0" y="803.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.0" y="814.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.20%)</title><rect x="1156.0" y="787.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.0" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (11 samples, 1.09%)</title><rect x="1158.3" y="803.0" width="12.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.3" y="814.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.10%)</title><rect x="1158.3" y="787.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.3" y="798.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.10%)</title><rect x="1159.5" y="787.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.5" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1160.7" y="787.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.7" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.60%)</title><rect x="1161.8" y="787.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.8" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.20%)</title><rect x="1166.5" y="771.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.20%)</title><rect x="1166.5" y="755.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.5" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.20%)</title><rect x="1168.9" y="787.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.9" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (2 samples, 0.20%)</title><rect x="1168.9" y="771.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.9" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.10%)</title><rect x="1168.9" y="755.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.9" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.10%)</title><rect x="1170.1" y="755.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.1" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.10%)</title><rect x="1171.2" y="803.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.2" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.10%)</title><rect x="1171.2" y="787.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.2" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.30%)</title><rect x="1172.4" y="803.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.4" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.30%)</title><rect x="1172.4" y="787.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.4" y="798.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1172.4" y="771.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.4" y="782.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.10%)</title><rect x="1172.4" y="755.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.4" y="766.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.10%)</title><rect x="1173.6" y="771.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.6" y="782.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1174.8" y="771.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.8" y="782.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.10%)</title><rect x="1174.8" y="755.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.8" y="766.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.10%)</title><rect x="1175.9" y="803.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.9" y="814.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.10%)</title><rect x="1175.9" y="787.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.9" y="798.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1175.9" y="771.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.9" y="782.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.10%)</title><rect x="1175.9" y="755.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.9" y="766.0"></text>
</g>
<g>
<title>Compile::start() const (1 samples, 0.10%)</title><rect x="1175.9" y="739.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.9" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.60%)</title><rect x="1177.1" y="819.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.1" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.60%)</title><rect x="1177.1" y="803.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.60%)</title><rect x="1177.1" y="787.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.60%)</title><rect x="1177.1" y="771.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.60%)</title><rect x="1177.1" y="755.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.60%)</title><rect x="1177.1" y="739.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.1" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.60%)</title><rect x="1177.1" y="723.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.1" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.60%)</title><rect x="1177.1" y="707.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.1" y="718.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (2 samples, 0.20%)</title><rect x="1177.1" y="691.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="702.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (2 samples, 0.20%)</title><rect x="1177.1" y="675.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.1" y="686.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.10%)</title><rect x="1177.1" y="659.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.1" y="670.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.10%)</title><rect x="1177.1" y="643.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.1" y="654.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.10%)</title><rect x="1177.1" y="627.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.1" y="638.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.10%)</title><rect x="1178.3" y="659.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.3" y="670.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.10%)</title><rect x="1178.3" y="643.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.3" y="654.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.10%)</title><rect x="1178.3" y="627.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="638.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1178.3" y="611.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.3" y="622.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.10%)</title><rect x="1178.3" y="595.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.3" y="606.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.10%)</title><rect x="1178.3" y="579.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.3" y="590.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.10%)</title><rect x="1178.3" y="563.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.3" y="574.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.10%)</title><rect x="1178.3" y="547.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.40%)</title><rect x="1179.4" y="691.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.40%)</title><rect x="1179.4" y="675.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.40%)</title><rect x="1179.4" y="659.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.40%)</title><rect x="1179.4" y="643.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.4" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1179.4" y="627.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.4" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1179.4" y="611.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1179.4" y="595.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1179.4" y="579.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1179.4" y="563.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.30%)</title><rect x="1179.4" y="547.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.4" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1179.4" y="531.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.4" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1179.4" y="515.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1179.4" y="499.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1179.4" y="483.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1179.4" y="467.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.30%)</title><rect x="1179.4" y="451.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.4" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1179.4" y="435.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.4" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1179.4" y="419.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1179.4" y="403.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1179.4" y="387.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1179.4" y="371.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.30%)</title><rect x="1179.4" y="355.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.4" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1179.4" y="339.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.4" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1179.4" y="323.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1179.4" y="307.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1179.4" y="291.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1179.4" y="275.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.30%)</title><rect x="1179.4" y="259.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.4" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1179.4" y="243.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.4" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1179.4" y="227.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1179.4" y="211.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1179.4" y="195.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1179.4" y="179.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1179.4" y="163.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.4" y="174.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1179.4" y="147.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.4" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1179.4" y="131.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.4" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1179.4" y="115.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.4" y="126.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1179.4" y="99.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.4" y="110.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.10%)</title><rect x="1179.4" y="83.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.4" y="94.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.10%)</title><rect x="1179.4" y="67.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.4" y="78.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.10%)</title><rect x="1179.4" y="51.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.4" y="62.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.10%)</title><rect x="1179.4" y="35.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1180.6" y="163.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1180.6" y="147.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.6" y="158.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1180.6" y="131.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.6" y="142.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1180.6" y="115.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.6" y="126.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.10%)</title><rect x="1181.8" y="163.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.8" y="174.0"></text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1181.8" y="147.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.8" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.0" y="627.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.0" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.0" y="611.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.0" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.0" y="595.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.0" y="579.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.0" y="563.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.0" y="547.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1183.0" y="531.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.0" y="515.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.0" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.0" y="499.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.0" y="483.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.0" y="467.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.0" y="451.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1183.0" y="435.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.0" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.0" y="419.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.0" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.0" y="403.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.0" y="387.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.0" y="371.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.0" y="355.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1183.0" y="339.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.0" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.0" y="323.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.0" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.0" y="307.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.0" y="291.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.0" y="275.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.0" y="259.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1183.0" y="243.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.0" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.0" y="227.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.0" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.0" y="211.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.0" y="195.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.0" y="179.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.0" y="163.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.10%)</title><rect x="1183.0" y="147.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.0" y="158.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.10%)</title><rect x="1183.0" y="131.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.0" y="142.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.10%)</title><rect x="1183.0" y="115.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.0" y="126.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1183.0" y="99.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.0" y="110.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1183.0" y="83.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="94.0"></text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.10%)</title><rect x="1183.0" y="67.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.0" y="78.0"></text>
</g>
<g>
<title>CompileBroker::collect_statistics(CompilerThread*, elapsedTimer, CompileTask*) (1 samples, 0.10%)</title><rect x="1184.1" y="851.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.1" y="862.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1185.3" y="851.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.3" y="862.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.10%)</title><rect x="1185.3" y="835.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.3" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.10%)</title><rect x="1185.3" y="819.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.3" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.10%)</title><rect x="1185.3" y="803.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.3" y="814.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.10%)</title><rect x="1185.3" y="787.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.3" y="798.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.10%)</title><rect x="1185.3" y="771.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.3" y="782.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.10%)</title><rect x="1185.3" y="755.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.3" y="766.0"></text>
</g>
<g>
<title>LIR_Assembler::call(LIR_OpJavaCall*, relocInfo::relocType) (1 samples, 0.10%)</title><rect x="1185.3" y="739.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.3" y="750.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.10%)</title><rect x="1185.3" y="723.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.3" y="734.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.10%)</title><rect x="1185.3" y="707.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.3" y="718.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.10%)</title><rect x="1185.3" y="691.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.3" y="702.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.10%)</title><rect x="1185.3" y="675.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.3" y="686.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.30%)</title><rect x="1186.5" y="915.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.5" y="926.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.30%)</title><rect x="1186.5" y="899.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.5" y="910.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.10%)</title><rect x="1186.5" y="883.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.5" y="894.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.20%)</title><rect x="1187.7" y="883.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.7" y="894.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.20%)</title><rect x="1187.7" y="867.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.7" y="878.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.20%)</title><rect x="1187.7" y="851.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.7" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.20%)</title><rect x="1187.7" y="835.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.7" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.10%)</title><rect x="1187.7" y="819.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.7" y="830.0"></text>
</g>
<g>
<title>nmethod::oops_do_marking_epilogue() (1 samples, 0.10%)</title><rect x="1187.7" y="803.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.7" y="814.0"></text>
</g>
<g>
<title>RelocIterator::advance_over_prefix() (1 samples, 0.10%)</title><rect x="1187.7" y="787.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.7" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.10%)</title><rect x="1188.8" y="819.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.8" y="830.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.10%)</title><rect x="1188.8" y="803.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.8" y="814.0"></text>
</g>
</g>
</svg>
