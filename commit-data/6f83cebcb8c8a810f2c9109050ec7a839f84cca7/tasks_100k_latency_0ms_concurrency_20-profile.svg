<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2070" onload="init(evt)" viewBox="0 0 1200 2070" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2053"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2053"> </text>
<g id="frames">
<g>
<title>all (217 samples, 100.00%)</title><rect x="10.0" y="2019.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2030.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (29 samples, 13.36%)</title><rect x="10.0" y="2003.0" width="157.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="2014.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (29 samples, 13.36%)</title><rect x="10.0" y="1987.0" width="157.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1998.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.46%)</title><rect x="10.0" y="1971.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.46%)</title><rect x="10.0" y="1955.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.46%)</title><rect x="10.0" y="1939.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.46%)</title><rect x="10.0" y="1923.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.46%)</title><rect x="10.0" y="1907.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.46%)</title><rect x="10.0" y="1891.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.46%)</title><rect x="10.0" y="1875.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.46%)</title><rect x="10.0" y="1859.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.46%)</title><rect x="10.0" y="1843.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.46%)</title><rect x="10.0" y="1827.0" width="5.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (19 samples, 8.76%)</title><rect x="15.4" y="1971.0" width="103.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.4" y="1982.0">java/lang/It..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/1658075813.accept (19 samples, 8.76%)</title><rect x="15.4" y="1955.0" width="103.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.4" y="1966.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (19 samples, 8.76%)</title><rect x="15.4" y="1939.0" width="103.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.4" y="1950.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.46%)</title><rect x="15.4" y="1923.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.4" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (12 samples, 5.53%)</title><rect x="20.9" y="1923.0" width="65.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="23.9" y="1934.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (12 samples, 5.53%)</title><rect x="20.9" y="1907.0" width="65.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.9" y="1918.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (12 samples, 5.53%)</title><rect x="20.9" y="1891.0" width="65.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.9" y="1902.0">com/lin..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (12 samples, 5.53%)</title><rect x="20.9" y="1875.0" width="65.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="23.9" y="1886.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (12 samples, 5.53%)</title><rect x="20.9" y="1859.0" width="65.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.9" y="1870.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (12 samples, 5.53%)</title><rect x="20.9" y="1843.0" width="65.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.9" y="1854.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (9 samples, 4.15%)</title><rect x="31.8" y="1827.0" width="48.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.8" y="1838.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 2.30%)</title><rect x="31.8" y="1811.0" width="27.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.8" y="1822.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 2.30%)</title><rect x="31.8" y="1795.0" width="27.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="34.8" y="1806.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 2.30%)</title><rect x="31.8" y="1779.0" width="27.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="34.8" y="1790.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.84%)</title><rect x="58.9" y="1811.0" width="21.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="61.9" y="1822.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.84%)</title><rect x="58.9" y="1795.0" width="21.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="61.9" y="1806.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.84%)</title><rect x="58.9" y="1779.0" width="21.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="61.9" y="1790.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.84%)</title><rect x="58.9" y="1763.0" width="21.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.9" y="1774.0">j..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (4 samples, 1.84%)</title><rect x="58.9" y="1747.0" width="21.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="61.9" y="1758.0">s..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.179] (1 samples, 0.46%)</title><rect x="58.9" y="1731.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="61.9" y="1742.0"></text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 1.38%)</title><rect x="64.4" y="1731.0" width="16.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="67.4" y="1742.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.92%)</title><rect x="64.4" y="1715.0" width="10.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="67.4" y="1726.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.46%)</title><rect x="75.3" y="1715.0" width="5.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="78.3" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.46%)</title><rect x="80.7" y="1827.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="83.7" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.46%)</title><rect x="80.7" y="1811.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="83.7" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.46%)</title><rect x="80.7" y="1795.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="83.7" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.46%)</title><rect x="80.7" y="1779.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="83.7" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.46%)</title><rect x="86.1" y="1923.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="89.1" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.46%)</title><rect x="86.1" y="1907.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="89.1" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.46%)</title><rect x="91.6" y="1923.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="94.6" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.46%)</title><rect x="91.6" y="1907.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="94.6" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.46%)</title><rect x="91.6" y="1891.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.6" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 1.84%)</title><rect x="97.0" y="1923.0" width="21.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="100.0" y="1934.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.84%)</title><rect x="97.0" y="1907.0" width="21.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="100.0" y="1918.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.38%)</title><rect x="102.4" y="1891.0" width="16.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="105.4" y="1902.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.92%)</title><rect x="107.9" y="1875.0" width="10.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="110.9" y="1886.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.92%)</title><rect x="107.9" y="1859.0" width="10.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="110.9" y="1870.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.46%)</title><rect x="113.3" y="1843.0" width="5.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="116.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 4.15%)</title><rect x="118.8" y="1971.0" width="48.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="121.8" y="1982.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 4.15%)</title><rect x="118.8" y="1955.0" width="48.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="121.8" y="1966.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (3 samples, 1.38%)</title><rect x="118.8" y="1939.0" width="16.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="121.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.38%)</title><rect x="118.8" y="1923.0" width="16.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="121.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.38%)</title><rect x="118.8" y="1907.0" width="16.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="121.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.38%)</title><rect x="118.8" y="1891.0" width="16.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="121.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.38%)</title><rect x="118.8" y="1875.0" width="16.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="121.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.38%)</title><rect x="118.8" y="1859.0" width="16.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="121.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 1.38%)</title><rect x="118.8" y="1843.0" width="16.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="121.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 1.38%)</title><rect x="118.8" y="1827.0" width="16.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="121.8" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (3 samples, 1.38%)</title><rect x="118.8" y="1811.0" width="16.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="121.8" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (3 samples, 1.38%)</title><rect x="118.8" y="1795.0" width="16.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="121.8" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (3 samples, 1.38%)</title><rect x="118.8" y="1779.0" width="16.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="121.8" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (3 samples, 1.38%)</title><rect x="118.8" y="1763.0" width="16.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="121.8" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (3 samples, 1.38%)</title><rect x="118.8" y="1747.0" width="16.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="121.8" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 1.38%)</title><rect x="135.1" y="1939.0" width="16.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="138.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.92%)</title><rect x="135.1" y="1923.0" width="10.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="138.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.92%)</title><rect x="135.1" y="1907.0" width="10.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="138.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.92%)</title><rect x="135.1" y="1891.0" width="10.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="138.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.92%)</title><rect x="135.1" y="1875.0" width="10.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="138.1" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.92%)</title><rect x="135.1" y="1859.0" width="10.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="138.1" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.92%)</title><rect x="135.1" y="1843.0" width="10.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="138.1" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.92%)</title><rect x="135.1" y="1827.0" width="10.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="138.1" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.92%)</title><rect x="135.1" y="1811.0" width="10.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="138.1" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.92%)</title><rect x="135.1" y="1795.0" width="10.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="138.1" y="1806.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.92%)</title><rect x="135.1" y="1779.0" width="10.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="138.1" y="1790.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.92%)</title><rect x="135.1" y="1763.0" width="10.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="138.1" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.92%)</title><rect x="135.1" y="1747.0" width="10.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="138.1" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.46%)</title><rect x="140.5" y="1731.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="143.5" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.46%)</title><rect x="140.5" y="1715.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="143.5" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$214/1636852056.test (1 samples, 0.46%)</title><rect x="140.5" y="1699.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="143.5" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.46%)</title><rect x="145.9" y="1923.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="148.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.maybeUpdateSubscriptionMetadata (1 samples, 0.46%)</title><rect x="145.9" y="1907.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="148.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.46%)</title><rect x="151.4" y="1939.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="154.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.46%)</title><rect x="151.4" y="1923.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="154.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.next (1 samples, 0.46%)</title><rect x="151.4" y="1907.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="154.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (1 samples, 0.46%)</title><rect x="151.4" y="1891.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="154.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.92%)</title><rect x="156.8" y="1939.0" width="10.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="159.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.92%)</title><rect x="156.8" y="1923.0" width="10.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="159.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.92%)</title><rect x="156.8" y="1907.0" width="10.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="159.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.46%)</title><rect x="156.8" y="1891.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="159.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.46%)</title><rect x="156.8" y="1875.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="159.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.46%)</title><rect x="156.8" y="1859.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="159.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.46%)</title><rect x="156.8" y="1843.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="159.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.46%)</title><rect x="156.8" y="1827.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="159.8" y="1838.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.46%)</title><rect x="156.8" y="1811.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="159.8" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.46%)</title><rect x="156.8" y="1795.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="159.8" y="1806.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.46%)</title><rect x="156.8" y="1779.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="159.8" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.nanoseconds (1 samples, 0.46%)</title><rect x="162.3" y="1891.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.3" y="1902.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.46%)</title><rect x="162.3" y="1875.0" width="5.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="165.3" y="1886.0"></text>
</g>
<g>
<title>java/lang/Thread.run (67 samples, 30.88%)</title><rect x="167.7" y="2003.0" width="364.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="170.7" y="2014.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (67 samples, 30.88%)</title><rect x="167.7" y="1987.0" width="364.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="170.7" y="1998.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (67 samples, 30.88%)</title><rect x="167.7" y="1971.0" width="364.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="170.7" y="1982.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1704419086.run (45 samples, 20.74%)</title><rect x="178.6" y="1955.0" width="244.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="181.6" y="1966.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (45 samples, 20.74%)</title><rect x="178.6" y="1939.0" width="244.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="181.6" y="1950.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (45 samples, 20.74%)</title><rect x="178.6" y="1923.0" width="244.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="181.6" y="1934.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.46%)</title><rect x="178.6" y="1907.0" width="5.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="181.6" y="1918.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.46%)</title><rect x="178.6" y="1891.0" width="5.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="181.6" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (43 samples, 19.82%)</title><rect x="184.0" y="1907.0" width="233.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="187.0" y="1918.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (13 samples, 5.99%)</title><rect x="184.0" y="1891.0" width="70.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="187.0" y="1902.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (13 samples, 5.99%)</title><rect x="184.0" y="1875.0" width="70.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="187.0" y="1886.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (13 samples, 5.99%)</title><rect x="184.0" y="1859.0" width="70.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="187.0" y="1870.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (13 samples, 5.99%)</title><rect x="184.0" y="1843.0" width="70.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="187.0" y="1854.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (13 samples, 5.99%)</title><rect x="184.0" y="1827.0" width="70.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="187.0" y="1838.0">com/line..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (13 samples, 5.99%)</title><rect x="184.0" y="1811.0" width="70.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="187.0" y="1822.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 1.84%)</title><rect x="184.0" y="1795.0" width="21.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="187.0" y="1806.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.46%)</title><rect x="184.0" y="1779.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="187.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.46%)</title><rect x="184.0" y="1763.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="187.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.46%)</title><rect x="184.0" y="1747.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="187.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.38%)</title><rect x="189.4" y="1779.0" width="16.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="192.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 1.38%)</title><rect x="189.4" y="1763.0" width="16.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="192.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.92%)</title><rect x="189.4" y="1747.0" width="10.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="192.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.ensureLoaded (1 samples, 0.46%)</title><rect x="189.4" y="1731.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="192.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.46%)</title><rect x="194.9" y="1731.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="197.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.46%)</title><rect x="200.3" y="1747.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="203.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (9 samples, 4.15%)</title><rect x="205.8" y="1795.0" width="48.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.8" y="1806.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.92%)</title><rect x="205.8" y="1779.0" width="10.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="208.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.46%)</title><rect x="211.2" y="1763.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.46%)</title><rect x="211.2" y="1747.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="214.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (7 samples, 3.23%)</title><rect x="216.6" y="1779.0" width="38.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="219.6" y="1790.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.38%)</title><rect x="216.6" y="1763.0" width="16.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 1.38%)</title><rect x="216.6" y="1747.0" width="16.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 1.84%)</title><rect x="232.9" y="1763.0" width="21.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="235.9" y="1774.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 1.84%)</title><rect x="232.9" y="1747.0" width="21.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="235.9" y="1758.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 1.84%)</title><rect x="232.9" y="1731.0" width="21.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="235.9" y="1742.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.46%)</title><rect x="238.4" y="1715.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="241.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.46%)</title><rect x="238.4" y="1699.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="241.4" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.92%)</title><rect x="243.8" y="1715.0" width="10.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.46%)</title><rect x="249.3" y="1699.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.46%)</title><rect x="249.3" y="1683.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="252.3" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.46%)</title><rect x="249.3" y="1667.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="252.3" y="1678.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.46%)</title><rect x="249.3" y="1651.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="252.3" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (27 samples, 12.44%)</title><rect x="254.7" y="1891.0" width="146.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="257.7" y="1902.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (4 samples, 1.84%)</title><rect x="254.7" y="1875.0" width="21.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="257.7" y="1886.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 1.84%)</title><rect x="254.7" y="1859.0" width="21.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="257.7" y="1870.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.38%)</title><rect x="260.1" y="1843.0" width="16.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="263.1" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 1.38%)</title><rect x="260.1" y="1827.0" width="16.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="263.1" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.46%)</title><rect x="271.0" y="1811.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.0" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.46%)</title><rect x="271.0" y="1795.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.0" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.46%)</title><rect x="276.5" y="1875.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.5" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.46%)</title><rect x="276.5" y="1859.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.5" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.46%)</title><rect x="276.5" y="1843.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.5" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (14 samples, 6.45%)</title><rect x="281.9" y="1875.0" width="76.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.9" y="1886.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (14 samples, 6.45%)</title><rect x="281.9" y="1859.0" width="76.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="284.9" y="1870.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (6 samples, 2.76%)</title><rect x="281.9" y="1843.0" width="32.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.9" y="1854.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 2.30%)</title><rect x="287.3" y="1827.0" width="27.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.3" y="1838.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 2.30%)</title><rect x="287.3" y="1811.0" width="27.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="290.3" y="1822.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 2.30%)</title><rect x="287.3" y="1795.0" width="27.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.3" y="1806.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.84%)</title><rect x="292.8" y="1779.0" width="21.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.8" y="1790.0">j..</text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 1.38%)</title><rect x="298.2" y="1763.0" width="16.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="301.2" y="1774.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 3.69%)</title><rect x="314.5" y="1843.0" width="43.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="317.5" y="1854.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 3.23%)</title><rect x="320.0" y="1827.0" width="38.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="323.0" y="1838.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.46%)</title><rect x="320.0" y="1811.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="323.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.46%)</title><rect x="320.0" y="1795.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="323.0" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.46%)</title><rect x="320.0" y="1779.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="323.0" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.46%)</title><rect x="320.0" y="1763.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="323.0" y="1774.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 2.76%)</title><rect x="325.4" y="1811.0" width="32.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="328.4" y="1822.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.38%)</title><rect x="341.7" y="1795.0" width="16.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="344.7" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.46%)</title><rect x="352.6" y="1779.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="355.6" y="1790.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.46%)</title><rect x="352.6" y="1763.0" width="5.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="355.6" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (7 samples, 3.23%)</title><rect x="358.0" y="1875.0" width="38.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="361.0" y="1886.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (6 samples, 2.76%)</title><rect x="363.5" y="1859.0" width="32.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="366.5" y="1870.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1649864395.process (1 samples, 0.46%)</title><rect x="374.3" y="1843.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="377.3" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.46%)</title><rect x="374.3" y="1827.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="377.3" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.46%)</title><rect x="374.3" y="1811.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="377.3" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.46%)</title><rect x="374.3" y="1795.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="377.3" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.46%)</title><rect x="374.3" y="1779.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="377.3" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.46%)</title><rect x="374.3" y="1763.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="377.3" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.46%)</title><rect x="374.3" y="1747.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="377.3" y="1758.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 1.38%)</title><rect x="379.8" y="1843.0" width="16.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="382.8" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 1.38%)</title><rect x="379.8" y="1827.0" width="16.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="382.8" y="1838.0"></text>
</g>
<g>
<title>itable stub (3 samples, 1.38%)</title><rect x="379.8" y="1811.0" width="16.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="382.8" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.46%)</title><rect x="396.1" y="1875.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="399.1" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.46%)</title><rect x="396.1" y="1859.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="399.1" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.92%)</title><rect x="401.5" y="1891.0" width="10.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="404.5" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.92%)</title><rect x="401.5" y="1875.0" width="10.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="404.5" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.46%)</title><rect x="407.0" y="1859.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="410.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$270/1993708404.accept (1 samples, 0.46%)</title><rect x="407.0" y="1843.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="410.0" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.46%)</title><rect x="407.0" y="1827.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="410.0" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.46%)</title><rect x="407.0" y="1811.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="410.0" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.46%)</title><rect x="407.0" y="1795.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="410.0" y="1806.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.46%)</title><rect x="407.0" y="1779.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="410.0" y="1790.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.46%)</title><rect x="412.4" y="1891.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="415.4" y="1902.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.46%)</title><rect x="412.4" y="1875.0" width="5.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="415.4" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.46%)</title><rect x="417.8" y="1907.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="420.8" y="1918.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.46%)</title><rect x="417.8" y="1891.0" width="5.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="420.8" y="1902.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.46%)</title><rect x="417.8" y="1875.0" width="5.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="420.8" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 0.92%)</title><rect x="423.3" y="1955.0" width="10.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="426.3" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.92%)</title><rect x="423.3" y="1939.0" width="10.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="426.3" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.46%)</title><rect x="428.7" y="1923.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="431.7" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.46%)</title><rect x="428.7" y="1907.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="431.7" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (18 samples, 8.29%)</title><rect x="434.1" y="1955.0" width="97.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="437.1" y="1966.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (17 samples, 7.83%)</title><rect x="439.6" y="1939.0" width="92.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="442.6" y="1950.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (15 samples, 6.91%)</title><rect x="439.6" y="1923.0" width="81.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="442.6" y="1934.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.46%)</title><rect x="445.0" y="1907.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="448.0" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (13 samples, 5.99%)</title><rect x="450.5" y="1907.0" width="70.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="453.5" y="1918.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (13 samples, 5.99%)</title><rect x="450.5" y="1891.0" width="70.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="453.5" y="1902.0">sun/misc..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.178] (1 samples, 0.46%)</title><rect x="455.9" y="1875.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="458.9" y="1886.0"></text>
</g>
<g>
<title>Unsafe_Park (11 samples, 5.07%)</title><rect x="461.3" y="1875.0" width="59.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="464.3" y="1886.0">Unsafe..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.46%)</title><rect x="472.2" y="1859.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="475.2" y="1870.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 0.92%)</title><rect x="477.6" y="1859.0" width="10.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="480.6" y="1870.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.38%)</title><rect x="488.5" y="1859.0" width="16.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="491.5" y="1870.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 1.38%)</title><rect x="504.8" y="1859.0" width="16.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="507.8" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.92%)</title><rect x="521.2" y="1923.0" width="10.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="524.2" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.92%)</title><rect x="521.2" y="1907.0" width="10.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="524.2" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.92%)</title><rect x="521.2" y="1891.0" width="10.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="524.2" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.92%)</title><rect x="521.2" y="1875.0" width="10.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="524.2" y="1886.0"></text>
</g>
<g>
<title>start_thread (121 samples, 55.76%)</title><rect x="532.0" y="2003.0" width="658.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="535.0" y="2014.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (121 samples, 55.76%)</title><rect x="532.0" y="1987.0" width="658.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="535.0" y="1998.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 4.61%)</title><rect x="532.0" y="1971.0" width="54.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="535.0" y="1982.0">GangW..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 1.84%)</title><rect x="532.0" y="1955.0" width="21.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="535.0" y="1966.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 1.84%)</title><rect x="532.0" y="1939.0" width="21.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="535.0" y="1950.0">G..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.46%)</title><rect x="532.0" y="1923.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="535.0" y="1934.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 1.38%)</title><rect x="537.5" y="1923.0" width="16.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="540.5" y="1934.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (6 samples, 2.76%)</title><rect x="553.8" y="1955.0" width="32.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="556.8" y="1966.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 1.38%)</title><rect x="553.8" y="1939.0" width="16.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="556.8" y="1950.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.46%)</title><rect x="553.8" y="1923.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="556.8" y="1934.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.46%)</title><rect x="559.2" y="1923.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="562.2" y="1934.0"></text>
</g>
<g>
<title>__sched_yield (1 samples, 0.46%)</title><rect x="564.7" y="1923.0" width="5.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="567.7" y="1934.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.92%)</title><rect x="570.1" y="1939.0" width="10.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="573.1" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.46%)</title><rect x="570.1" y="1923.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="573.1" y="1934.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.46%)</title><rect x="570.1" y="1907.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="573.1" y="1918.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.46%)</title><rect x="570.1" y="1891.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="573.1" y="1902.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.46%)</title><rect x="570.1" y="1875.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="573.1" y="1886.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.46%)</title><rect x="575.5" y="1923.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="578.5" y="1934.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.46%)</title><rect x="581.0" y="1939.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="584.0" y="1950.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.46%)</title><rect x="581.0" y="1923.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="584.0" y="1934.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.46%)</title><rect x="581.0" y="1907.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="584.0" y="1918.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.46%)</title><rect x="581.0" y="1891.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="584.0" y="1902.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.46%)</title><rect x="581.0" y="1875.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="584.0" y="1886.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.46%)</title><rect x="581.0" y="1859.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="584.0" y="1870.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.46%)</title><rect x="581.0" y="1843.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="584.0" y="1854.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.46%)</title><rect x="581.0" y="1827.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="584.0" y="1838.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (111 samples, 51.15%)</title><rect x="586.4" y="1971.0" width="603.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="589.4" y="1982.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (111 samples, 51.15%)</title><rect x="586.4" y="1955.0" width="603.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="589.4" y="1966.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (111 samples, 51.15%)</title><rect x="586.4" y="1939.0" width="603.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="589.4" y="1950.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (109 samples, 50.23%)</title><rect x="586.4" y="1923.0" width="592.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="589.4" y="1934.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (109 samples, 50.23%)</title><rect x="586.4" y="1907.0" width="592.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="589.4" y="1918.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.46%)</title><rect x="586.4" y="1891.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="589.4" y="1902.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.46%)</title><rect x="586.4" y="1875.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="589.4" y="1886.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.46%)</title><rect x="586.4" y="1859.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="589.4" y="1870.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.46%)</title><rect x="586.4" y="1843.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="589.4" y="1854.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.46%)</title><rect x="586.4" y="1827.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="589.4" y="1838.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.46%)</title><rect x="586.4" y="1811.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="589.4" y="1822.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.46%)</title><rect x="586.4" y="1795.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="589.4" y="1806.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.46%)</title><rect x="586.4" y="1779.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="589.4" y="1790.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.46%)</title><rect x="586.4" y="1763.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="589.4" y="1774.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.46%)</title><rect x="586.4" y="1747.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="589.4" y="1758.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.46%)</title><rect x="586.4" y="1731.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="589.4" y="1742.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.46%)</title><rect x="586.4" y="1715.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="589.4" y="1726.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.46%)</title><rect x="586.4" y="1699.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="589.4" y="1710.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.46%)</title><rect x="586.4" y="1683.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="589.4" y="1694.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.46%)</title><rect x="586.4" y="1667.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="589.4" y="1678.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.46%)</title><rect x="586.4" y="1651.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="589.4" y="1662.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (57 samples, 26.27%)</title><rect x="591.8" y="1891.0" width="310.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="594.8" y="1902.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.38%)</title><rect x="591.8" y="1875.0" width="16.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="594.8" y="1886.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.46%)</title><rect x="591.8" y="1859.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="594.8" y="1870.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.46%)</title><rect x="591.8" y="1843.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="594.8" y="1854.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.46%)</title><rect x="591.8" y="1827.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="594.8" y="1838.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.92%)</title><rect x="597.3" y="1859.0" width="10.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="600.3" y="1870.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.92%)</title><rect x="597.3" y="1843.0" width="10.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="600.3" y="1854.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.92%)</title><rect x="597.3" y="1827.0" width="10.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="600.3" y="1838.0"></text>
</g>
<g>
<title>CodeBuffer::~CodeBuffer() (1 samples, 0.46%)</title><rect x="597.3" y="1811.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="600.3" y="1822.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.46%)</title><rect x="597.3" y="1795.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="600.3" y="1806.0"></text>
</g>
<g>
<title>indOffset32Oper::disp(PhaseRegAlloc*, Node const*, int) const (1 samples, 0.46%)</title><rect x="602.7" y="1811.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="605.7" y="1822.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 1.38%)</title><rect x="608.2" y="1875.0" width="16.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="611.2" y="1886.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.92%)</title><rect x="608.2" y="1859.0" width="10.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="611.2" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.92%)</title><rect x="608.2" y="1843.0" width="10.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="611.2" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (2 samples, 0.92%)</title><rect x="608.2" y="1827.0" width="10.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="611.2" y="1838.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.46%)</title><rect x="619.0" y="1859.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="622.0" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.46%)</title><rect x="619.0" y="1843.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="622.0" y="1854.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.38%)</title><rect x="624.5" y="1875.0" width="16.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="627.5" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.38%)</title><rect x="624.5" y="1859.0" width="16.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="627.5" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.92%)</title><rect x="629.9" y="1843.0" width="10.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="632.9" y="1854.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.46%)</title><rect x="635.3" y="1827.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="638.3" y="1838.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.46%)</title><rect x="635.3" y="1811.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="638.3" y="1822.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.46%)</title><rect x="635.3" y="1795.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="638.3" y="1806.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.46%)</title><rect x="635.3" y="1779.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="638.3" y="1790.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.46%)</title><rect x="640.8" y="1875.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="643.8" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.46%)</title><rect x="640.8" y="1859.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="643.8" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.46%)</title><rect x="640.8" y="1843.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="643.8" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.46%)</title><rect x="640.8" y="1827.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="643.8" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::PhaseChaitin(unsigned int, PhaseCFG&amp;, Matcher&amp;) (1 samples, 0.46%)</title><rect x="646.2" y="1875.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="649.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (46 samples, 21.20%)</title><rect x="651.7" y="1875.0" width="250.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="654.7" y="1886.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.46%)</title><rect x="651.7" y="1859.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="654.7" y="1870.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.46%)</title><rect x="657.1" y="1859.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="660.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.38%)</title><rect x="662.5" y="1859.0" width="16.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="665.5" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.46%)</title><rect x="662.5" y="1843.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="665.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.92%)</title><rect x="668.0" y="1843.0" width="10.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="671.0" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.92%)</title><rect x="668.0" y="1827.0" width="10.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="671.0" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 3.23%)</title><rect x="678.8" y="1859.0" width="38.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="681.8" y="1870.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.46%)</title><rect x="711.5" y="1843.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="714.5" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.46%)</title><rect x="711.5" y="1827.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="714.5" y="1838.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.46%)</title><rect x="711.5" y="1811.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="714.5" y="1822.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 4.61%)</title><rect x="716.9" y="1859.0" width="54.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="719.9" y="1870.0">Phase..</text>
</g>
<g>
<title>MachNode::rematerialize() const (3 samples, 1.38%)</title><rect x="733.2" y="1843.0" width="16.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="736.2" y="1854.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.46%)</title><rect x="744.1" y="1827.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="747.1" y="1838.0"></text>
</g>
<g>
<title>r15_RegPOper::type() const (1 samples, 0.46%)</title><rect x="744.1" y="1811.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="747.1" y="1822.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.92%)</title><rect x="749.5" y="1843.0" width="10.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="752.5" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.92%)</title><rect x="749.5" y="1827.0" width="10.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="752.5" y="1838.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.46%)</title><rect x="760.4" y="1843.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="763.4" y="1854.0"></text>
</g>
<g>
<title>lower_pressure(LRG*, unsigned int, Block*, unsigned int*, unsigned int*) [clone .isra.134] (1 samples, 0.46%)</title><rect x="765.9" y="1843.0" width="5.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="768.9" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.46%)</title><rect x="771.3" y="1859.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="774.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.46%)</title><rect x="771.3" y="1843.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="774.3" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.46%)</title><rect x="776.7" y="1859.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="779.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (4 samples, 1.84%)</title><rect x="782.2" y="1859.0" width="21.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="785.2" y="1870.0">P..</text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.46%)</title><rect x="787.6" y="1843.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="790.6" y="1854.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.46%)</title><rect x="793.0" y="1843.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="796.0" y="1854.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.46%)</title><rect x="798.5" y="1843.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="801.5" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 2.76%)</title><rect x="803.9" y="1859.0" width="32.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="806.9" y="1870.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 1.38%)</title><rect x="820.2" y="1843.0" width="16.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="823.2" y="1854.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.92%)</title><rect x="836.5" y="1859.0" width="10.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="839.5" y="1870.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 0.92%)</title><rect x="836.5" y="1843.0" width="10.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="839.5" y="1854.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.46%)</title><rect x="842.0" y="1827.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="845.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.92%)</title><rect x="847.4" y="1859.0" width="10.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="850.4" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.46%)</title><rect x="852.9" y="1843.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="855.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.92%)</title><rect x="858.3" y="1859.0" width="10.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="861.3" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.46%)</title><rect x="858.3" y="1843.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="861.3" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.46%)</title><rect x="863.7" y="1843.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="866.7" y="1854.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 2.30%)</title><rect x="869.2" y="1859.0" width="27.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="872.2" y="1870.0">P..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 1.38%)</title><rect x="880.0" y="1843.0" width="16.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="883.0" y="1854.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.46%)</title><rect x="885.5" y="1827.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="888.5" y="1838.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.46%)</title><rect x="890.9" y="1827.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="893.9" y="1838.0"></text>
</g>
<g>
<title>andI_rReg_mem_0Node::two_adr() const (1 samples, 0.46%)</title><rect x="896.4" y="1859.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="899.4" y="1870.0"></text>
</g>
<g>
<title>Compile::Optimize() (38 samples, 17.51%)</title><rect x="901.8" y="1891.0" width="206.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="904.8" y="1902.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.92%)</title><rect x="901.8" y="1875.0" width="10.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="904.8" y="1886.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.92%)</title><rect x="901.8" y="1859.0" width="10.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="904.8" y="1870.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.46%)</title><rect x="901.8" y="1843.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="904.8" y="1854.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.46%)</title><rect x="901.8" y="1827.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="904.8" y="1838.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.46%)</title><rect x="901.8" y="1811.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="904.8" y="1822.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.46%)</title><rect x="901.8" y="1795.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="904.8" y="1806.0"></text>
</g>
<g>
<title>JVMState::interpreter_frame_size() const (1 samples, 0.46%)</title><rect x="907.2" y="1843.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="910.2" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 1.38%)</title><rect x="912.7" y="1875.0" width="16.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="915.7" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 1.38%)</title><rect x="912.7" y="1859.0" width="16.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="915.7" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.92%)</title><rect x="918.1" y="1843.0" width="10.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="921.1" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.92%)</title><rect x="918.1" y="1827.0" width="10.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="921.1" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.92%)</title><rect x="918.1" y="1811.0" width="10.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="921.1" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.46%)</title><rect x="918.1" y="1795.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="921.1" y="1806.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.46%)</title><rect x="918.1" y="1779.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="921.1" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1795.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="926.5" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1779.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="926.5" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1763.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="926.5" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1747.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="926.5" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1731.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="926.5" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1715.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="926.5" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1699.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="926.5" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1683.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="926.5" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1667.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="926.5" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1651.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="926.5" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1635.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="926.5" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1619.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="926.5" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1603.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="926.5" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1587.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="926.5" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1571.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="926.5" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1555.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="926.5" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1539.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="926.5" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1523.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="926.5" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1507.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="926.5" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1491.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="926.5" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1475.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="926.5" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1459.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="926.5" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1443.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="926.5" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1427.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="926.5" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1411.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="926.5" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1395.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="926.5" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1379.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="926.5" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1363.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="926.5" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1347.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="926.5" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1331.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="926.5" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1315.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="926.5" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1299.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="926.5" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1283.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="926.5" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1267.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="926.5" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1251.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="926.5" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1235.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="926.5" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1219.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="926.5" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1203.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="926.5" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1187.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="926.5" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1171.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="926.5" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1155.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="926.5" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1139.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="926.5" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1123.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="926.5" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1107.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="926.5" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1091.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="926.5" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1075.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="926.5" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1059.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="926.5" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1043.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="926.5" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1027.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="926.5" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="1011.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="926.5" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="995.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="926.5" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="979.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="926.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="963.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="926.5" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="947.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="926.5" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="931.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="926.5" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="915.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="926.5" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="899.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="926.5" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="883.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="926.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="867.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="926.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="851.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="926.5" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="835.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="926.5" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="819.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="926.5" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="803.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="926.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="787.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="926.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="771.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="926.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="755.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="926.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="739.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="926.5" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="723.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="926.5" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="707.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="926.5" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="691.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="926.5" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="675.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="926.5" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="659.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="926.5" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="643.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="926.5" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="627.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="926.5" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="611.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="926.5" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="595.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="926.5" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="579.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="926.5" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="563.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="926.5" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="547.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="926.5" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="531.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="926.5" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="515.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="926.5" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="499.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="926.5" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="483.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="926.5" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="467.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="926.5" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="451.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="926.5" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="435.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="926.5" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="419.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="926.5" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="403.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="926.5" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="387.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="926.5" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="371.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="926.5" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="355.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="926.5" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="339.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="926.5" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="323.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="926.5" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="307.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="926.5" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="291.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="926.5" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="275.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="926.5" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="259.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="926.5" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="243.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="926.5" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="227.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="926.5" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="211.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="926.5" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="195.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="926.5" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="179.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="926.5" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="163.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="926.5" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="147.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="926.5" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="131.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="926.5" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="115.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="926.5" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="99.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="926.5" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="83.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="926.5" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="67.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="926.5" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="51.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="926.5" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.46%)</title><rect x="923.5" y="35.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="926.5" y="46.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.46%)</title><rect x="929.0" y="1875.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="932.0" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.46%)</title><rect x="929.0" y="1859.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="932.0" y="1870.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.46%)</title><rect x="929.0" y="1843.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="932.0" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (23 samples, 10.60%)</title><rect x="934.4" y="1875.0" width="125.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="937.4" y="1886.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.38%)</title><rect x="934.4" y="1859.0" width="16.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="937.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.46%)</title><rect x="945.3" y="1843.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="948.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 4.15%)</title><rect x="950.7" y="1859.0" width="49.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="953.7" y="1870.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (7 samples, 3.23%)</title><rect x="956.2" y="1843.0" width="38.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="959.2" y="1854.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (6 samples, 2.76%)</title><rect x="961.6" y="1827.0" width="32.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="964.6" y="1838.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.92%)</title><rect x="961.6" y="1811.0" width="10.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="964.6" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.92%)</title><rect x="961.6" y="1795.0" width="10.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="964.6" y="1806.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.92%)</title><rect x="972.5" y="1811.0" width="10.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="975.5" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 0.92%)</title><rect x="983.4" y="1811.0" width="10.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="986.4" y="1822.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.46%)</title><rect x="994.2" y="1843.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="997.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.46%)</title><rect x="999.7" y="1859.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1002.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.46%)</title><rect x="999.7" y="1843.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1002.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (5 samples, 2.30%)</title><rect x="1005.1" y="1859.0" width="27.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1008.1" y="1870.0">P..</text>
</g>
<g>
<title>ConvL2INode::Opcode() const (1 samples, 0.46%)</title><rect x="1010.6" y="1843.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1013.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.92%)</title><rect x="1016.0" y="1843.0" width="10.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1019.0" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.46%)</title><rect x="1016.0" y="1827.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1019.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.46%)</title><rect x="1016.0" y="1811.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1019.0" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.46%)</title><rect x="1021.4" y="1827.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1024.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.46%)</title><rect x="1021.4" y="1811.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1024.4" y="1822.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.46%)</title><rect x="1026.9" y="1843.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1029.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.84%)</title><rect x="1032.3" y="1859.0" width="21.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1035.3" y="1870.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.84%)</title><rect x="1032.3" y="1843.0" width="21.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1035.3" y="1854.0">P..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1032.3" y="1827.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1035.3" y="1838.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.46%)</title><rect x="1032.3" y="1811.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1035.3" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.46%)</title><rect x="1032.3" y="1795.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1035.3" y="1806.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.46%)</title><rect x="1032.3" y="1779.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1035.3" y="1790.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.46%)</title><rect x="1032.3" y="1763.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1035.3" y="1774.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.46%)</title><rect x="1037.7" y="1827.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1040.7" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.46%)</title><rect x="1043.2" y="1827.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1046.2" y="1838.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.46%)</title><rect x="1043.2" y="1811.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1046.2" y="1822.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.46%)</title><rect x="1043.2" y="1795.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1046.2" y="1806.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1048.6" y="1827.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1051.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.46%)</title><rect x="1048.6" y="1811.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1051.6" y="1822.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.46%)</title><rect x="1048.6" y="1795.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1051.6" y="1806.0"></text>
</g>
<g>
<title>VectorSet::Clear() (1 samples, 0.46%)</title><rect x="1054.1" y="1859.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1057.1" y="1870.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.46%)</title><rect x="1054.1" y="1843.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1057.1" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.46%)</title><rect x="1059.5" y="1875.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1062.5" y="1886.0"></text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.46%)</title><rect x="1059.5" y="1859.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1062.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 3.69%)</title><rect x="1064.9" y="1875.0" width="43.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1067.9" y="1886.0">Phas..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 3.69%)</title><rect x="1064.9" y="1859.0" width="43.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1067.9" y="1870.0">Phas..</text>
</g>
<g>
<title>IfFalseNode::Opcode() const (1 samples, 0.46%)</title><rect x="1070.4" y="1843.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1073.4" y="1854.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.92%)</title><rect x="1075.8" y="1843.0" width="10.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1078.8" y="1854.0"></text>
</g>
<g>
<title>IfNode::up_one_dom(Node*, bool) (1 samples, 0.46%)</title><rect x="1081.2" y="1827.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1084.2" y="1838.0"></text>
</g>
<g>
<title>MergeMemNode::hash() const (1 samples, 0.46%)</title><rect x="1086.7" y="1843.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1089.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.46%)</title><rect x="1092.1" y="1843.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.1" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.46%)</title><rect x="1092.1" y="1827.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1095.1" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.46%)</title><rect x="1092.1" y="1811.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.1" y="1822.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.92%)</title><rect x="1097.6" y="1843.0" width="10.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1100.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.46%)</title><rect x="1097.6" y="1827.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1100.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.46%)</title><rect x="1097.6" y="1811.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1100.6" y="1822.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.46%)</title><rect x="1103.0" y="1827.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1106.0" y="1838.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.46%)</title><rect x="1108.4" y="1891.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1111.4" y="1902.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (1 samples, 0.46%)</title><rect x="1108.4" y="1875.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1111.4" y="1886.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1108.4" y="1859.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.4" y="1870.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1108.4" y="1843.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1111.4" y="1854.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1108.4" y="1827.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.4" y="1838.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1108.4" y="1811.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.4" y="1822.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1108.4" y="1795.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1111.4" y="1806.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1108.4" y="1779.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.4" y="1790.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1108.4" y="1763.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.4" y="1774.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1108.4" y="1747.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1111.4" y="1758.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1108.4" y="1731.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.4" y="1742.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1108.4" y="1715.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1111.4" y="1726.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1108.4" y="1699.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1111.4" y="1710.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1108.4" y="1683.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1111.4" y="1694.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1108.4" y="1667.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.4" y="1678.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1108.4" y="1651.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.4" y="1662.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1108.4" y="1635.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.4" y="1646.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1108.4" y="1619.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1111.4" y="1630.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1108.4" y="1603.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1111.4" y="1614.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1108.4" y="1587.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.4" y="1598.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1108.4" y="1571.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.4" y="1582.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1108.4" y="1555.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.4" y="1566.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1108.4" y="1539.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.4" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 4.61%)</title><rect x="1113.9" y="1891.0" width="54.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.9" y="1902.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 4.61%)</title><rect x="1113.9" y="1875.0" width="54.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.9" y="1886.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 4.61%)</title><rect x="1113.9" y="1859.0" width="54.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.9" y="1870.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 4.61%)</title><rect x="1113.9" y="1843.0" width="54.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1116.9" y="1854.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 4.61%)</title><rect x="1113.9" y="1827.0" width="54.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.9" y="1838.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (10 samples, 4.61%)</title><rect x="1113.9" y="1811.0" width="54.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.9" y="1822.0">Parse..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.46%)</title><rect x="1113.9" y="1795.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.9" y="1806.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.46%)</title><rect x="1113.9" y="1779.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1116.9" y="1790.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.46%)</title><rect x="1113.9" y="1763.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.9" y="1774.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.46%)</title><rect x="1113.9" y="1747.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.9" y="1758.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.46%)</title><rect x="1113.9" y="1731.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.9" y="1742.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_heads(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.46%)</title><rect x="1113.9" y="1715.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.9" y="1726.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_head(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.46%)</title><rect x="1113.9" y="1699.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.9" y="1710.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.46%)</title><rect x="1113.9" y="1683.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.9" y="1694.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.46%)</title><rect x="1113.9" y="1667.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.9" y="1678.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.46%)</title><rect x="1113.9" y="1651.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.9" y="1662.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.46%)</title><rect x="1113.9" y="1635.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1116.9" y="1646.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.46%)</title><rect x="1113.9" y="1619.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.9" y="1630.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, Bytecodes::Code, bool, bool, Thread*) (1 samples, 0.46%)</title><rect x="1113.9" y="1603.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.9" y="1614.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.46%)</title><rect x="1113.9" y="1587.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.9" y="1598.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.46%)</title><rect x="1113.9" y="1571.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1116.9" y="1582.0"></text>
</g>
<g>
<title>JavaFieldStream::JavaFieldStream(instanceKlassHandle) (1 samples, 0.46%)</title><rect x="1113.9" y="1555.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.9" y="1566.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 4.15%)</title><rect x="1119.3" y="1795.0" width="48.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1122.3" y="1806.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 4.15%)</title><rect x="1119.3" y="1779.0" width="48.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.3" y="1790.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 4.15%)</title><rect x="1119.3" y="1763.0" width="48.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1122.3" y="1774.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 4.15%)</title><rect x="1119.3" y="1747.0" width="48.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.3" y="1758.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 4.15%)</title><rect x="1119.3" y="1731.0" width="48.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.3" y="1742.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (9 samples, 4.15%)</title><rect x="1119.3" y="1715.0" width="48.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.3" y="1726.0">Pars..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.46%)</title><rect x="1119.3" y="1699.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.3" y="1710.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.46%)</title><rect x="1119.3" y="1683.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.3" y="1694.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.46%)</title><rect x="1119.3" y="1667.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1122.3" y="1678.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.46%)</title><rect x="1119.3" y="1651.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.3" y="1662.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.46%)</title><rect x="1119.3" y="1635.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1122.3" y="1646.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.46%)</title><rect x="1119.3" y="1619.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.3" y="1630.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.46%)</title><rect x="1119.3" y="1603.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.3" y="1614.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.46%)</title><rect x="1119.3" y="1587.0" width="5.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1122.3" y="1598.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.76%)</title><rect x="1124.7" y="1699.0" width="32.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.7" y="1710.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.76%)</title><rect x="1124.7" y="1683.0" width="32.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.7" y="1694.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.76%)</title><rect x="1124.7" y="1667.0" width="32.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.7" y="1678.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.76%)</title><rect x="1124.7" y="1651.0" width="32.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.7" y="1662.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.76%)</title><rect x="1124.7" y="1635.0" width="32.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.7" y="1646.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.76%)</title><rect x="1124.7" y="1619.0" width="32.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.7" y="1630.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.76%)</title><rect x="1124.7" y="1603.0" width="32.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.7" y="1614.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.76%)</title><rect x="1124.7" y="1587.0" width="32.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.7" y="1598.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.76%)</title><rect x="1124.7" y="1571.0" width="32.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.7" y="1582.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.76%)</title><rect x="1124.7" y="1555.0" width="32.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.7" y="1566.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.76%)</title><rect x="1124.7" y="1539.0" width="32.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.7" y="1550.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.76%)</title><rect x="1124.7" y="1523.0" width="32.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.7" y="1534.0">Pa..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.92%)</title><rect x="1124.7" y="1507.0" width="10.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.7" y="1518.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.92%)</title><rect x="1124.7" y="1491.0" width="10.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.7" y="1502.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.92%)</title><rect x="1124.7" y="1475.0" width="10.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.7" y="1486.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.92%)</title><rect x="1124.7" y="1459.0" width="10.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.7" y="1470.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.92%)</title><rect x="1124.7" y="1443.0" width="10.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.7" y="1454.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.92%)</title><rect x="1124.7" y="1427.0" width="10.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.7" y="1438.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.92%)</title><rect x="1124.7" y="1411.0" width="10.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1127.7" y="1422.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.46%)</title><rect x="1124.7" y="1395.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.7" y="1406.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.46%)</title><rect x="1130.2" y="1395.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1133.2" y="1406.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.46%)</title><rect x="1130.2" y="1379.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.2" y="1390.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.46%)</title><rect x="1130.2" y="1363.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1133.2" y="1374.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.46%)</title><rect x="1130.2" y="1347.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.2" y="1358.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.46%)</title><rect x="1130.2" y="1331.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.2" y="1342.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.46%)</title><rect x="1130.2" y="1315.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1133.2" y="1326.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.46%)</title><rect x="1130.2" y="1299.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.2" y="1310.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.46%)</title><rect x="1130.2" y="1283.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.2" y="1294.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.46%)</title><rect x="1130.2" y="1267.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1133.2" y="1278.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.46%)</title><rect x="1130.2" y="1251.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.2" y="1262.0"></text>
</g>
<g>
<title>os::current_thread_id() (1 samples, 0.46%)</title><rect x="1130.2" y="1235.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.2" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.84%)</title><rect x="1135.6" y="1507.0" width="21.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.6" y="1518.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.84%)</title><rect x="1135.6" y="1491.0" width="21.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.6" y="1502.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.84%)</title><rect x="1135.6" y="1475.0" width="21.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.6" y="1486.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.84%)</title><rect x="1135.6" y="1459.0" width="21.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.6" y="1470.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.38%)</title><rect x="1141.1" y="1443.0" width="16.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.1" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.38%)</title><rect x="1141.1" y="1427.0" width="16.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.1" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.38%)</title><rect x="1141.1" y="1411.0" width="16.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.1" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.38%)</title><rect x="1141.1" y="1395.0" width="16.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.1" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.38%)</title><rect x="1141.1" y="1379.0" width="16.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.1" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.38%)</title><rect x="1141.1" y="1363.0" width="16.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.1" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.38%)</title><rect x="1141.1" y="1347.0" width="16.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.1" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.38%)</title><rect x="1141.1" y="1331.0" width="16.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.1" y="1342.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1141.1" y="1315.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.1" y="1326.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.46%)</title><rect x="1141.1" y="1299.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.1" y="1310.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.46%)</title><rect x="1141.1" y="1283.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.1" y="1294.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.46%)</title><rect x="1141.1" y="1267.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.1" y="1278.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.46%)</title><rect x="1141.1" y="1251.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.1" y="1262.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.46%)</title><rect x="1141.1" y="1235.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.1" y="1246.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle, int) (1 samples, 0.46%)</title><rect x="1141.1" y="1219.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.1" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.92%)</title><rect x="1146.5" y="1315.0" width="10.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1149.5" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.92%)</title><rect x="1146.5" y="1299.0" width="10.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.5" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.92%)</title><rect x="1146.5" y="1283.0" width="10.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.92%)</title><rect x="1146.5" y="1267.0" width="10.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.92%)</title><rect x="1146.5" y="1251.0" width="10.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1146.5" y="1235.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.5" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1146.5" y="1219.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.5" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1146.5" y="1203.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1146.5" y="1187.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.5" y="1198.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.46%)</title><rect x="1146.5" y="1171.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.5" y="1182.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.46%)</title><rect x="1146.5" y="1155.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.5" y="1166.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.46%)</title><rect x="1146.5" y="1139.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.5" y="1150.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.46%)</title><rect x="1146.5" y="1123.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.5" y="1134.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.46%)</title><rect x="1146.5" y="1107.0" width="5.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1149.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.46%)</title><rect x="1151.9" y="1235.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.9" y="1246.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.46%)</title><rect x="1151.9" y="1219.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.9" y="1230.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.92%)</title><rect x="1157.4" y="1699.0" width="10.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.4" y="1710.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1157.4" y="1683.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.4" y="1694.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1157.4" y="1667.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.4" y="1678.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1157.4" y="1651.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.4" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1157.4" y="1635.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.4" y="1646.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1157.4" y="1619.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.4" y="1630.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1157.4" y="1603.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.4" y="1614.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1157.4" y="1587.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.4" y="1598.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1157.4" y="1571.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.4" y="1582.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1157.4" y="1555.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.4" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1157.4" y="1539.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.4" y="1550.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1157.4" y="1523.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.4" y="1534.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1157.4" y="1507.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.4" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1157.4" y="1491.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.4" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1157.4" y="1475.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.4" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1157.4" y="1459.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.4" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1157.4" y="1443.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.4" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1157.4" y="1427.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.4" y="1438.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.46%)</title><rect x="1157.4" y="1411.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.4" y="1422.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.46%)</title><rect x="1157.4" y="1395.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.4" y="1406.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.46%)</title><rect x="1157.4" y="1379.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.4" y="1390.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.46%)</title><rect x="1157.4" y="1363.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.4" y="1374.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.46%)</title><rect x="1157.4" y="1347.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.4" y="1358.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.46%)</title><rect x="1157.4" y="1331.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.4" y="1342.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.46%)</title><rect x="1157.4" y="1315.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.4" y="1326.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.46%)</title><rect x="1157.4" y="1299.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.4" y="1310.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.46%)</title><rect x="1157.4" y="1283.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.4" y="1294.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1162.8" y="1683.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.8" y="1694.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1162.8" y="1667.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.8" y="1678.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1162.8" y="1651.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.8" y="1662.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1162.8" y="1635.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.8" y="1646.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1162.8" y="1619.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.8" y="1630.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1162.8" y="1603.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.8" y="1614.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.46%)</title><rect x="1162.8" y="1587.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.8" y="1598.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.46%)</title><rect x="1162.8" y="1571.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.8" y="1582.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.46%)</title><rect x="1162.8" y="1555.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.8" y="1566.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.46%)</title><rect x="1162.8" y="1539.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.8" y="1550.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.46%)</title><rect x="1162.8" y="1523.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.8" y="1534.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1162.8" y="1507.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.8" y="1518.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.46%)</title><rect x="1162.8" y="1491.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.8" y="1502.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.46%)</title><rect x="1162.8" y="1475.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.8" y="1486.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.46%)</title><rect x="1168.2" y="1891.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.2" y="1902.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.46%)</title><rect x="1168.2" y="1875.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.2" y="1886.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.46%)</title><rect x="1173.7" y="1891.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.7" y="1902.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.46%)</title><rect x="1173.7" y="1875.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.7" y="1886.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.46%)</title><rect x="1179.1" y="1923.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.1" y="1934.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.46%)</title><rect x="1179.1" y="1907.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.1" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.46%)</title><rect x="1179.1" y="1891.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.1" y="1902.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.46%)</title><rect x="1179.1" y="1875.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.1" y="1886.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.46%)</title><rect x="1179.1" y="1859.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.1" y="1870.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.46%)</title><rect x="1179.1" y="1843.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.1" y="1854.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.46%)</title><rect x="1179.1" y="1827.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.1" y="1838.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.46%)</title><rect x="1179.1" y="1811.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.1" y="1822.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.46%)</title><rect x="1179.1" y="1795.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.1" y="1806.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.46%)</title><rect x="1179.1" y="1779.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.1" y="1790.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.46%)</title><rect x="1179.1" y="1763.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="1774.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.46%)</title><rect x="1179.1" y="1747.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.1" y="1758.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.46%)</title><rect x="1179.1" y="1731.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.1" y="1742.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.46%)</title><rect x="1179.1" y="1715.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.1" y="1726.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.46%)</title><rect x="1179.1" y="1699.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.1" y="1710.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.46%)</title><rect x="1179.1" y="1683.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.1" y="1694.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.46%)</title><rect x="1179.1" y="1667.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.1" y="1678.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.46%)</title><rect x="1179.1" y="1651.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.1" y="1662.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.46%)</title><rect x="1179.1" y="1635.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.1" y="1646.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.46%)</title><rect x="1179.1" y="1619.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.1" y="1630.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.46%)</title><rect x="1179.1" y="1603.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.1" y="1614.0"></text>
</g>
<g>
<title>ciReceiverTypeData::translate_receiver_data_from(ProfileData const*) (1 samples, 0.46%)</title><rect x="1179.1" y="1587.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.1" y="1598.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.46%)</title><rect x="1179.1" y="1571.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="1582.0"></text>
</g>
<g>
<title>StringEventLog::log(Thread*, char const*, ...) (1 samples, 0.46%)</title><rect x="1184.6" y="1923.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.6" y="1934.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.46%)</title><rect x="1184.6" y="1907.0" width="5.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1187.6" y="1918.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.46%)</title><rect x="1184.6" y="1891.0" width="5.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1187.6" y="1902.0"></text>
</g>
</g>
</svg>
