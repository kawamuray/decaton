<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1894" onload="init(evt)" viewBox="0 0 1200 1894" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1877"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1877"> </text>
<g id="frames">
<g>
<title>all (318 samples, 100.00%)</title><rect x="10.0" y="1843.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1854.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.31%)</title><rect x="10.0" y="1827.0" width="3.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (16 samples, 5.03%)</title><rect x="13.7" y="1827.0" width="59.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.7" y="1838.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.31%)</title><rect x="13.7" y="1811.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.31%)</title><rect x="13.7" y="1795.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.7" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.31%)</title><rect x="13.7" y="1779.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.7" y="1790.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.31%)</title><rect x="13.7" y="1763.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.7" y="1774.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.31%)</title><rect x="13.7" y="1747.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.7" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (15 samples, 4.72%)</title><rect x="17.4" y="1811.0" width="55.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.4" y="1822.0">com/l..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 1.89%)</title><rect x="17.4" y="1795.0" width="22.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.4" y="1806.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/267914652.accept (6 samples, 1.89%)</title><rect x="17.4" y="1779.0" width="22.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.4" y="1790.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (6 samples, 1.89%)</title><rect x="17.4" y="1763.0" width="22.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.4" y="1774.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (2 samples, 0.63%)</title><rect x="17.4" y="1747.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.4" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (2 samples, 0.63%)</title><rect x="17.4" y="1731.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.4" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (2 samples, 0.63%)</title><rect x="17.4" y="1715.0" width="7.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.4" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.31%)</title><rect x="21.1" y="1699.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.1" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.31%)</title><rect x="21.1" y="1683.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.1" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.31%)</title><rect x="21.1" y="1667.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.1" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.31%)</title><rect x="21.1" y="1651.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.1" y="1662.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.31%)</title><rect x="21.1" y="1635.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.1" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.31%)</title><rect x="21.1" y="1619.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.1" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.31%)</title><rect x="21.1" y="1603.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.1" y="1614.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 1.26%)</title><rect x="24.8" y="1747.0" width="14.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.8" y="1758.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.26%)</title><rect x="24.8" y="1731.0" width="14.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.8" y="1742.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.31%)</title><rect x="28.6" y="1715.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.6" y="1726.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.31%)</title><rect x="28.6" y="1699.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.6" y="1710.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.63%)</title><rect x="32.3" y="1715.0" width="7.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="35.3" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 2.83%)</title><rect x="39.7" y="1795.0" width="33.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="42.7" y="1806.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 2.83%)</title><rect x="39.7" y="1779.0" width="33.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="42.7" y="1790.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 1.57%)</title><rect x="39.7" y="1763.0" width="18.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.7" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.31%)</title><rect x="39.7" y="1747.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.7" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.31%)</title><rect x="39.7" y="1731.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="42.7" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeThrowInterruptException (1 samples, 0.31%)</title><rect x="39.7" y="1715.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="42.7" y="1726.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.31%)</title><rect x="39.7" y="1699.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.7" y="1710.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.31%)</title><rect x="39.7" y="1683.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="42.7" y="1694.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.31%)</title><rect x="39.7" y="1667.0" width="3.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="42.7" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 0.94%)</title><rect x="43.4" y="1747.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="46.4" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.63%)</title><rect x="43.4" y="1731.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.4" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.63%)</title><rect x="43.4" y="1715.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="46.4" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.63%)</title><rect x="43.4" y="1699.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="46.4" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.63%)</title><rect x="43.4" y="1683.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.4" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.31%)</title><rect x="43.4" y="1667.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="46.4" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.31%)</title><rect x="43.4" y="1651.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="46.4" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.31%)</title><rect x="43.4" y="1635.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="46.4" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.31%)</title><rect x="43.4" y="1619.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="46.4" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.31%)</title><rect x="43.4" y="1603.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="46.4" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.31%)</title><rect x="43.4" y="1587.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="46.4" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.31%)</title><rect x="43.4" y="1571.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="46.4" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.31%)</title><rect x="47.1" y="1667.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.1" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.31%)</title><rect x="47.1" y="1651.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="50.1" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.31%)</title><rect x="47.1" y="1635.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.1" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.31%)</title><rect x="50.8" y="1731.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="53.8" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.31%)</title><rect x="50.8" y="1715.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="53.8" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.31%)</title><rect x="50.8" y="1699.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="53.8" y="1710.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.31%)</title><rect x="50.8" y="1683.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="53.8" y="1694.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.31%)</title><rect x="50.8" y="1667.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="53.8" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.31%)</title><rect x="50.8" y="1651.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.8" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.31%)</title><rect x="54.5" y="1747.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="57.5" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.31%)</title><rect x="54.5" y="1731.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="57.5" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.31%)</title><rect x="54.5" y="1715.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="57.5" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.31%)</title><rect x="54.5" y="1699.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="57.5" y="1710.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.31%)</title><rect x="54.5" y="1683.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="57.5" y="1694.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.31%)</title><rect x="54.5" y="1667.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="57.5" y="1678.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.31%)</title><rect x="54.5" y="1651.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="57.5" y="1662.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.31%)</title><rect x="54.5" y="1635.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="57.5" y="1646.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.31%)</title><rect x="54.5" y="1619.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="57.5" y="1630.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.31%)</title><rect x="54.5" y="1603.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="57.5" y="1614.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.31%)</title><rect x="54.5" y="1587.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="57.5" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.31%)</title><rect x="58.2" y="1763.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.2" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.31%)</title><rect x="58.2" y="1747.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="61.2" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.31%)</title><rect x="58.2" y="1731.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.2" y="1742.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.31%)</title><rect x="58.2" y="1715.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.2" y="1726.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.31%)</title><rect x="58.2" y="1699.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="61.2" y="1710.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.31%)</title><rect x="58.2" y="1683.0" width="3.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="61.2" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.31%)</title><rect x="61.9" y="1763.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.9" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.31%)</title><rect x="61.9" y="1747.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="64.9" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.31%)</title><rect x="61.9" y="1731.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.9" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.31%)</title><rect x="61.9" y="1715.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="64.9" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.31%)</title><rect x="61.9" y="1699.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="64.9" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (2 samples, 0.63%)</title><rect x="65.7" y="1763.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="68.7" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.63%)</title><rect x="65.7" y="1747.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="68.7" y="1758.0"></text>
</g>
<g>
<title>java/lang/Thread.run (162 samples, 50.94%)</title><rect x="73.1" y="1827.0" width="601.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="76.1" y="1838.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (162 samples, 50.94%)</title><rect x="73.1" y="1811.0" width="601.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.1" y="1822.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (162 samples, 50.94%)</title><rect x="73.1" y="1795.0" width="601.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.1" y="1806.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/567808441.run (151 samples, 47.48%)</title><rect x="84.2" y="1779.0" width="560.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="87.2" y="1790.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/567808441.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (151 samples, 47.48%)</title><rect x="84.2" y="1763.0" width="560.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="87.2" y="1774.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (151 samples, 47.48%)</title><rect x="84.2" y="1747.0" width="560.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="87.2" y="1758.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (149 samples, 46.86%)</title><rect x="84.2" y="1731.0" width="552.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="87.2" y="1742.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (26 samples, 8.18%)</title><rect x="99.1" y="1715.0" width="96.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="102.1" y="1726.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (26 samples, 8.18%)</title><rect x="99.1" y="1699.0" width="96.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="102.1" y="1710.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (26 samples, 8.18%)</title><rect x="99.1" y="1683.0" width="96.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.1" y="1694.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (26 samples, 8.18%)</title><rect x="99.1" y="1667.0" width="96.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="102.1" y="1678.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (26 samples, 8.18%)</title><rect x="99.1" y="1651.0" width="96.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.1" y="1662.0">com/linecor..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (26 samples, 8.18%)</title><rect x="99.1" y="1635.0" width="96.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="102.1" y="1646.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (9 samples, 2.83%)</title><rect x="99.1" y="1619.0" width="33.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="102.1" y="1630.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 1.57%)</title><rect x="99.1" y="1603.0" width="18.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.1" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.26%)</title><rect x="99.1" y="1587.0" width="14.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="102.1" y="1598.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.31%)</title><rect x="106.5" y="1571.0" width="3.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="109.5" y="1582.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="106.5" y="1555.0" width="3.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="109.5" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.31%)</title><rect x="110.2" y="1571.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="113.2" y="1582.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.31%)</title><rect x="110.2" y="1555.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="113.2" y="1566.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.31%)</title><rect x="110.2" y="1539.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.2" y="1550.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.31%)</title><rect x="110.2" y="1523.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="113.2" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (1 samples, 0.31%)</title><rect x="113.9" y="1587.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="116.9" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.31%)</title><rect x="113.9" y="1571.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="116.9" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.26%)</title><rect x="117.6" y="1603.0" width="14.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="120.6" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (1 samples, 0.31%)</title><rect x="117.6" y="1587.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="120.6" y="1598.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.31%)</title><rect x="117.6" y="1571.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="120.6" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 0.94%)</title><rect x="121.3" y="1587.0" width="11.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="124.3" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.31%)</title><rect x="121.3" y="1571.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="124.3" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.31%)</title><rect x="121.3" y="1555.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="124.3" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.31%)</title><rect x="121.3" y="1539.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="124.3" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 0.63%)</title><rect x="125.0" y="1571.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="128.0" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (16 samples, 5.03%)</title><rect x="132.5" y="1619.0" width="59.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="135.5" y="1630.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.63%)</title><rect x="132.5" y="1603.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="135.5" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.63%)</title><rect x="132.5" y="1587.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="135.5" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.31%)</title><rect x="132.5" y="1571.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="135.5" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.31%)</title><rect x="132.5" y="1555.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="135.5" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.31%)</title><rect x="136.2" y="1571.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="139.2" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.31%)</title><rect x="139.9" y="1603.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="142.9" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.31%)</title><rect x="139.9" y="1587.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="142.9" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (13 samples, 4.09%)</title><rect x="143.6" y="1603.0" width="48.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="146.6" y="1614.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 1.89%)</title><rect x="143.6" y="1587.0" width="22.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="146.6" y="1598.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.31%)</title><rect x="143.6" y="1571.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="146.6" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.31%)</title><rect x="143.6" y="1555.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="146.6" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.31%)</title><rect x="143.6" y="1539.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="146.6" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 1.26%)</title><rect x="147.3" y="1571.0" width="14.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="150.3" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.31%)</title><rect x="162.1" y="1571.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="165.1" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.31%)</title><rect x="162.1" y="1555.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="165.1" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (7 samples, 2.20%)</title><rect x="165.8" y="1587.0" width="26.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="168.8" y="1598.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (7 samples, 2.20%)</title><rect x="165.8" y="1571.0" width="26.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="168.8" y="1582.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (7 samples, 2.20%)</title><rect x="165.8" y="1555.0" width="26.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="168.8" y="1566.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.63%)</title><rect x="173.3" y="1539.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="176.3" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.63%)</title><rect x="173.3" y="1523.0" width="7.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="176.3" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.63%)</title><rect x="173.3" y="1507.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="176.3" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.63%)</title><rect x="173.3" y="1491.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="176.3" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.63%)</title><rect x="180.7" y="1539.0" width="7.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="183.7" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.63%)</title><rect x="180.7" y="1523.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="183.7" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.63%)</title><rect x="180.7" y="1507.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="183.7" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.63%)</title><rect x="180.7" y="1491.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.7" y="1502.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.63%)</title><rect x="180.7" y="1475.0" width="7.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="183.7" y="1486.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.63%)</title><rect x="180.7" y="1459.0" width="7.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="183.7" y="1470.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.31%)</title><rect x="188.1" y="1539.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="191.1" y="1550.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.31%)</title><rect x="188.1" y="1523.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="191.1" y="1534.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.31%)</title><rect x="188.1" y="1507.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="191.1" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.31%)</title><rect x="191.8" y="1619.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="194.8" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.31%)</title><rect x="191.8" y="1603.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="194.8" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.31%)</title><rect x="191.8" y="1587.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="194.8" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.31%)</title><rect x="191.8" y="1571.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="194.8" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.31%)</title><rect x="191.8" y="1555.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="194.8" y="1566.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (113 samples, 35.53%)</title><rect x="195.5" y="1715.0" width="419.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="198.5" y="1726.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (17 samples, 5.35%)</title><rect x="195.5" y="1699.0" width="63.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.5" y="1710.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (14 samples, 4.40%)</title><rect x="206.7" y="1683.0" width="51.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="209.7" y="1694.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (12 samples, 3.77%)</title><rect x="214.1" y="1667.0" width="44.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.1" y="1678.0">ch/q..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (11 samples, 3.46%)</title><rect x="217.8" y="1651.0" width="40.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="220.8" y="1662.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 3.46%)</title><rect x="217.8" y="1635.0" width="40.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="220.8" y="1646.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 1.89%)</title><rect x="236.4" y="1619.0" width="22.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.4" y="1630.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.63%)</title><rect x="258.6" y="1699.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.6" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.63%)</title><rect x="258.6" y="1683.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="261.6" y="1694.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.63%)</title><rect x="258.6" y="1667.0" width="7.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.6" y="1678.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (23 samples, 7.23%)</title><rect x="266.0" y="1699.0" width="85.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="269.0" y="1710.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (23 samples, 7.23%)</title><rect x="266.0" y="1683.0" width="85.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="269.0" y="1694.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (10 samples, 3.14%)</title><rect x="273.5" y="1667.0" width="37.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="276.5" y="1678.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (9 samples, 2.83%)</title><rect x="277.2" y="1651.0" width="33.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="280.2" y="1662.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 1.26%)</title><rect x="288.3" y="1635.0" width="14.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.3" y="1646.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.94%)</title><rect x="292.0" y="1619.0" width="11.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.0" y="1630.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.94%)</title><rect x="292.0" y="1603.0" width="11.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.0" y="1614.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.94%)</title><rect x="292.0" y="1587.0" width="11.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="295.0" y="1598.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.63%)</title><rect x="295.7" y="1571.0" width="7.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="298.7" y="1582.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.31%)</title><rect x="295.7" y="1555.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="298.7" y="1566.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.31%)</title><rect x="295.7" y="1539.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="298.7" y="1550.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.31%)</title><rect x="295.7" y="1523.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="298.7" y="1534.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.31%)</title><rect x="295.7" y="1507.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="298.7" y="1518.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.31%)</title><rect x="299.4" y="1555.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="302.4" y="1566.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.31%)</title><rect x="299.4" y="1539.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="302.4" y="1550.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.31%)</title><rect x="299.4" y="1523.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="302.4" y="1534.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.31%)</title><rect x="299.4" y="1507.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="302.4" y="1518.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.63%)</title><rect x="303.1" y="1635.0" width="7.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="306.1" y="1646.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.31%)</title><rect x="310.6" y="1667.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="313.6" y="1678.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.31%)</title><rect x="310.6" y="1651.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.6" y="1662.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.31%)</title><rect x="310.6" y="1635.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="313.6" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.31%)</title><rect x="310.6" y="1619.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="313.6" y="1630.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (10 samples, 3.14%)</title><rect x="314.3" y="1667.0" width="37.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="317.3" y="1678.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (10 samples, 3.14%)</title><rect x="314.3" y="1651.0" width="37.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="317.3" y="1662.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.31%)</title><rect x="314.3" y="1635.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="317.3" y="1646.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.31%)</title><rect x="314.3" y="1619.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.3" y="1630.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.31%)</title><rect x="314.3" y="1603.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="317.3" y="1614.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.31%)</title><rect x="314.3" y="1587.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="317.3" y="1598.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (9 samples, 2.83%)</title><rect x="318.0" y="1635.0" width="33.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="321.0" y="1646.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 2.83%)</title><rect x="318.0" y="1619.0" width="33.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="321.0" y="1630.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.57%)</title><rect x="332.8" y="1603.0" width="18.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="335.8" y="1614.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (66 samples, 20.75%)</title><rect x="351.4" y="1699.0" width="244.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="354.4" y="1710.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (66 samples, 20.75%)</title><rect x="351.4" y="1683.0" width="244.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="354.4" y="1694.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/334307265.process (59 samples, 18.55%)</title><rect x="351.4" y="1667.0" width="218.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="354.4" y="1678.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (59 samples, 18.55%)</title><rect x="351.4" y="1651.0" width="218.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="354.4" y="1662.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (59 samples, 18.55%)</title><rect x="351.4" y="1635.0" width="218.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="354.4" y="1646.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.31%)</title><rect x="351.4" y="1619.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="354.4" y="1630.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (58 samples, 18.24%)</title><rect x="355.1" y="1619.0" width="215.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="358.1" y="1630.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>java/lang/Thread.sleep (57 samples, 17.92%)</title><rect x="358.8" y="1603.0" width="211.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="361.8" y="1614.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (48 samples, 15.09%)</title><rect x="377.4" y="1587.0" width="178.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="380.4" y="1598.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.63%)</title><rect x="384.8" y="1571.0" width="7.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="387.8" y="1582.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.31%)</title><rect x="392.2" y="1571.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="395.2" y="1582.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.63%)</title><rect x="395.9" y="1571.0" width="7.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="398.9" y="1582.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="399.6" y="1555.0" width="3.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="402.6" y="1566.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.31%)</title><rect x="403.3" y="1571.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="406.3" y="1582.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (40 samples, 12.58%)</title><rect x="407.0" y="1571.0" width="148.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="410.0" y="1582.0">os::sleep(Thread*, ..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.31%)</title><rect x="447.9" y="1555.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="450.9" y="1566.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.31%)</title><rect x="447.9" y="1539.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="450.9" y="1550.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.63%)</title><rect x="451.6" y="1555.0" width="7.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="454.6" y="1566.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.63%)</title><rect x="451.6" y="1539.0" width="7.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="454.6" y="1550.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.63%)</title><rect x="459.0" y="1555.0" width="7.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="462.0" y="1566.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.31%)</title><rect x="466.4" y="1555.0" width="3.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="469.4" y="1566.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (12 samples, 3.77%)</title><rect x="470.1" y="1555.0" width="44.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="473.1" y="1566.0">__pt..</text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.63%)</title><rect x="514.7" y="1555.0" width="7.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="517.7" y="1566.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.31%)</title><rect x="522.1" y="1555.0" width="3.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="525.1" y="1566.0"></text>
</g>
<g>
<title>_init (4 samples, 1.26%)</title><rect x="525.8" y="1555.0" width="14.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="528.8" y="1566.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.63%)</title><rect x="540.6" y="1555.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="543.6" y="1566.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.63%)</title><rect x="548.1" y="1555.0" width="7.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="551.1" y="1566.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.94%)</title><rect x="555.5" y="1587.0" width="11.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="558.5" y="1598.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.31%)</title><rect x="566.6" y="1587.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="569.6" y="1598.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$275/795709689.complete (1 samples, 0.31%)</title><rect x="570.3" y="1667.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="573.3" y="1678.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$35 (1 samples, 0.31%)</title><rect x="570.3" y="1651.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="573.3" y="1662.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.31%)</title><rect x="570.3" y="1635.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="573.3" y="1646.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.31%)</title><rect x="570.3" y="1619.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="573.3" y="1630.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.31%)</title><rect x="570.3" y="1603.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="573.3" y="1614.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.31%)</title><rect x="574.0" y="1667.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="577.0" y="1678.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.31%)</title><rect x="574.0" y="1651.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="577.0" y="1662.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.31%)</title><rect x="574.0" y="1635.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="577.0" y="1646.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.31%)</title><rect x="574.0" y="1619.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="577.0" y="1630.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.31%)</title><rect x="574.0" y="1603.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="577.0" y="1614.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.31%)</title><rect x="574.0" y="1587.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="577.0" y="1598.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (2 samples, 0.63%)</title><rect x="577.7" y="1667.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="580.7" y="1678.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (2 samples, 0.63%)</title><rect x="577.7" y="1651.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="580.7" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$275/795709689.get$Lambda (2 samples, 0.63%)</title><rect x="577.7" y="1635.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="580.7" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$275/795709689.&lt;init&gt; (2 samples, 0.63%)</title><rect x="577.7" y="1619.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="580.7" y="1630.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.31%)</title><rect x="585.2" y="1667.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="588.2" y="1678.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.31%)</title><rect x="585.2" y="1651.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="588.2" y="1662.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.31%)</title><rect x="585.2" y="1635.0" width="3.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="588.2" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.63%)</title><rect x="588.9" y="1667.0" width="7.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="591.9" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.57%)</title><rect x="596.3" y="1699.0" width="18.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="599.3" y="1710.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.31%)</title><rect x="607.4" y="1683.0" width="3.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="610.4" y="1694.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="607.4" y="1667.0" width="3.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="610.4" y="1678.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.31%)</title><rect x="611.1" y="1683.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="614.1" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.57%)</title><rect x="614.8" y="1715.0" width="18.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="617.8" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.57%)</title><rect x="614.8" y="1699.0" width="18.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="617.8" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.26%)</title><rect x="614.8" y="1683.0" width="14.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="617.8" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/1821096264.accept (4 samples, 1.26%)</title><rect x="614.8" y="1667.0" width="14.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="617.8" y="1678.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (4 samples, 1.26%)</title><rect x="614.8" y="1651.0" width="14.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="617.8" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$259/1621823235.complete (4 samples, 1.26%)</title><rect x="614.8" y="1635.0" width="14.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="617.8" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (4 samples, 1.26%)</title><rect x="614.8" y="1619.0" width="14.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="617.8" y="1630.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (4 samples, 1.26%)</title><rect x="614.8" y="1603.0" width="14.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="617.8" y="1614.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 1.26%)</title><rect x="614.8" y="1587.0" width="14.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="617.8" y="1598.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 1.26%)</title><rect x="614.8" y="1571.0" width="14.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="617.8" y="1582.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 1.26%)</title><rect x="614.8" y="1555.0" width="14.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="617.8" y="1566.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 1.26%)</title><rect x="614.8" y="1539.0" width="14.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="617.8" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.31%)</title><rect x="629.7" y="1683.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="632.7" y="1694.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.31%)</title><rect x="633.4" y="1715.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="636.4" y="1726.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="633.4" y="1699.0" width="3.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="636.4" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 0.63%)</title><rect x="637.1" y="1731.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="640.1" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (2 samples, 0.63%)</title><rect x="644.5" y="1779.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="647.5" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 1.89%)</title><rect x="651.9" y="1779.0" width="22.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="654.9" y="1790.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 1.26%)</title><rect x="659.4" y="1763.0" width="14.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="662.4" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.31%)</title><rect x="659.4" y="1747.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="662.4" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.31%)</title><rect x="659.4" y="1731.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="662.4" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.31%)</title><rect x="659.4" y="1715.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="662.4" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.94%)</title><rect x="663.1" y="1747.0" width="11.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="666.1" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.94%)</title><rect x="663.1" y="1731.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="666.1" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.94%)</title><rect x="663.1" y="1715.0" width="11.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="666.1" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.94%)</title><rect x="663.1" y="1699.0" width="11.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="666.1" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.31%)</title><rect x="674.2" y="1827.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="677.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.31%)</title><rect x="674.2" y="1811.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="677.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.31%)</title><rect x="674.2" y="1795.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="677.2" y="1806.0"></text>
</g>
<g>
<title>start_thread (138 samples, 43.40%)</title><rect x="677.9" y="1827.0" width="512.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="680.9" y="1838.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (138 samples, 43.40%)</title><rect x="677.9" y="1811.0" width="512.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="680.9" y="1822.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 3.14%)</title><rect x="677.9" y="1795.0" width="37.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="680.9" y="1806.0">Gan..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.31%)</title><rect x="677.9" y="1779.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="680.9" y="1790.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.31%)</title><rect x="677.9" y="1763.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="680.9" y="1774.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.31%)</title><rect x="677.9" y="1747.0" width="3.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="680.9" y="1758.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (9 samples, 2.83%)</title><rect x="681.6" y="1779.0" width="33.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="684.6" y="1790.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 2.52%)</title><rect x="681.6" y="1763.0" width="29.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="684.6" y="1774.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 2.52%)</title><rect x="681.6" y="1747.0" width="29.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="684.6" y="1758.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 1.26%)</title><rect x="696.5" y="1731.0" width="14.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="699.5" y="1742.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.31%)</title><rect x="711.3" y="1763.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="714.3" y="1774.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.31%)</title><rect x="711.3" y="1747.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="714.3" y="1758.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.31%)</title><rect x="711.3" y="1731.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="714.3" y="1742.0"></text>
</g>
<g>
<title>JavaThread::run() (127 samples, 39.94%)</title><rect x="715.0" y="1795.0" width="471.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="718.0" y="1806.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (127 samples, 39.94%)</title><rect x="715.0" y="1779.0" width="471.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="718.0" y="1790.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (127 samples, 39.94%)</title><rect x="715.0" y="1763.0" width="471.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="718.0" y="1774.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (127 samples, 39.94%)</title><rect x="715.0" y="1747.0" width="471.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="718.0" y="1758.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (124 samples, 38.99%)</title><rect x="715.0" y="1731.0" width="460.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="718.0" y="1742.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (124 samples, 38.99%)</title><rect x="715.0" y="1715.0" width="460.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="718.0" y="1726.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, boo..</text>
</g>
<g>
<title>Compile::Code_Gen() (82 samples, 25.79%)</title><rect x="715.0" y="1699.0" width="304.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="718.0" y="1710.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.63%)</title><rect x="715.0" y="1683.0" width="7.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="718.0" y="1694.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.63%)</title><rect x="715.0" y="1667.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="718.0" y="1678.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 1.26%)</title><rect x="722.5" y="1683.0" width="14.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="725.5" y="1694.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.31%)</title><rect x="726.2" y="1667.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="729.2" y="1678.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.31%)</title><rect x="726.2" y="1651.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="729.2" y="1662.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.31%)</title><rect x="726.2" y="1635.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="729.2" y="1646.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.63%)</title><rect x="729.9" y="1667.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="732.9" y="1678.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.31%)</title><rect x="729.9" y="1651.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="732.9" y="1662.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.31%)</title><rect x="733.6" y="1651.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="736.6" y="1662.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 2.20%)</title><rect x="737.3" y="1683.0" width="26.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="740.3" y="1694.0">M..</text>
</g>
<g>
<title>AddPNode::Opcode() const (1 samples, 0.31%)</title><rect x="737.3" y="1667.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="740.3" y="1678.0"></text>
</g>
<g>
<title>LoadNNode::ideal_reg() const (1 samples, 0.31%)</title><rect x="741.0" y="1667.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="744.0" y="1678.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.57%)</title><rect x="744.7" y="1667.0" width="18.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="747.7" y="1678.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.31%)</title><rect x="744.7" y="1651.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="747.7" y="1662.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.31%)</title><rect x="744.7" y="1635.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="747.7" y="1646.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.31%)</title><rect x="744.7" y="1619.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="747.7" y="1630.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.94%)</title><rect x="748.4" y="1651.0" width="11.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="751.4" y="1662.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.63%)</title><rect x="752.1" y="1635.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="755.1" y="1646.0"></text>
</g>
<g>
<title>AddPNode::Opcode() const (1 samples, 0.31%)</title><rect x="752.1" y="1619.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="755.1" y="1630.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.31%)</title><rect x="755.8" y="1619.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="758.8" y="1630.0"></text>
</g>
<g>
<title>State::_sub_Op_RegP(Node const*) (1 samples, 0.31%)</title><rect x="755.8" y="1603.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="758.8" y="1614.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.31%)</title><rect x="759.6" y="1651.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="762.6" y="1662.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.31%)</title><rect x="759.6" y="1635.0" width="3.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="762.6" y="1646.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.31%)</title><rect x="763.3" y="1683.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="766.3" y="1694.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.31%)</title><rect x="763.3" y="1667.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="766.3" y="1678.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.94%)</title><rect x="767.0" y="1683.0" width="11.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="770.0" y="1694.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.94%)</title><rect x="767.0" y="1667.0" width="11.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="770.0" y="1678.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.63%)</title><rect x="767.0" y="1651.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="770.0" y="1662.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.31%)</title><rect x="767.0" y="1635.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="770.0" y="1646.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.31%)</title><rect x="770.7" y="1635.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="773.7" y="1646.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.31%)</title><rect x="774.4" y="1651.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="777.4" y="1662.0"></text>
</g>
<g>
<title>Node::is_iteratively_computed() (1 samples, 0.31%)</title><rect x="774.4" y="1635.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="777.4" y="1646.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.31%)</title><rect x="778.1" y="1683.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="781.1" y="1694.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (64 samples, 20.13%)</title><rect x="781.8" y="1683.0" width="237.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="784.8" y="1694.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.31%)</title><rect x="781.8" y="1667.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="784.8" y="1678.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.31%)</title><rect x="785.5" y="1667.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="788.5" y="1678.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.31%)</title><rect x="789.2" y="1667.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="792.2" y="1678.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.63%)</title><rect x="793.0" y="1667.0" width="7.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="796.0" y="1678.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.63%)</title><rect x="800.4" y="1667.0" width="7.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="803.4" y="1678.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.31%)</title><rect x="804.1" y="1651.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="807.1" y="1662.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 1.26%)</title><rect x="807.8" y="1667.0" width="14.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="810.8" y="1678.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.31%)</title><rect x="807.8" y="1651.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="810.8" y="1662.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.94%)</title><rect x="811.5" y="1651.0" width="11.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="814.5" y="1662.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 1.89%)</title><rect x="822.6" y="1667.0" width="22.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="825.6" y="1678.0">P..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 3.14%)</title><rect x="844.9" y="1667.0" width="37.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="847.9" y="1678.0">Pha..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.31%)</title><rect x="856.0" y="1651.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="859.0" y="1662.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.31%)</title><rect x="859.7" y="1651.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="862.7" y="1662.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 1.57%)</title><rect x="863.5" y="1651.0" width="18.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="866.5" y="1662.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.31%)</title><rect x="882.0" y="1667.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="885.0" y="1678.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.31%)</title><rect x="885.7" y="1667.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="888.7" y="1678.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 1.57%)</title><rect x="889.4" y="1667.0" width="18.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="892.4" y="1678.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.31%)</title><rect x="893.1" y="1651.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="896.1" y="1662.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.94%)</title><rect x="896.9" y="1651.0" width="11.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="899.9" y="1662.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (14 samples, 4.40%)</title><rect x="908.0" y="1667.0" width="51.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="911.0" y="1678.0">Phase..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (14 samples, 4.40%)</title><rect x="908.0" y="1651.0" width="51.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="911.0" y="1662.0">Phase..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (13 samples, 4.09%)</title><rect x="911.7" y="1635.0" width="48.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="914.7" y="1646.0">Phas..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.94%)</title><rect x="911.7" y="1619.0" width="11.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="914.7" y="1630.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.31%)</title><rect x="919.1" y="1603.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="922.1" y="1614.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (10 samples, 3.14%)</title><rect x="922.8" y="1619.0" width="37.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="925.8" y="1630.0">Pha..</text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.94%)</title><rect x="959.9" y="1667.0" width="11.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="962.9" y="1678.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.31%)</title><rect x="967.4" y="1651.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="970.4" y="1662.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.63%)</title><rect x="971.1" y="1667.0" width="7.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="974.1" y="1678.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.63%)</title><rect x="971.1" y="1651.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="974.1" y="1662.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (9 samples, 2.83%)</title><rect x="978.5" y="1667.0" width="33.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="981.5" y="1678.0">Ph..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.31%)</title><rect x="993.3" y="1651.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="996.3" y="1662.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 1.26%)</title><rect x="997.0" y="1651.0" width="14.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1000.0" y="1662.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.94%)</title><rect x="1000.8" y="1635.0" width="11.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1003.8" y="1646.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (2 samples, 0.63%)</title><rect x="1011.9" y="1667.0" width="7.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1014.9" y="1678.0"></text>
</g>
<g>
<title>Compile::Optimize() (38 samples, 11.95%)</title><rect x="1019.3" y="1699.0" width="141.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1022.3" y="1710.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.31%)</title><rect x="1019.3" y="1683.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1022.3" y="1694.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.31%)</title><rect x="1019.3" y="1667.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1022.3" y="1678.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.31%)</title><rect x="1019.3" y="1651.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1022.3" y="1662.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.31%)</title><rect x="1019.3" y="1635.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1022.3" y="1646.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.31%)</title><rect x="1023.0" y="1683.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1026.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.31%)</title><rect x="1026.7" y="1683.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1029.7" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.31%)</title><rect x="1026.7" y="1667.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1029.7" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1651.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1029.7" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1635.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1029.7" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1619.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1029.7" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1603.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1029.7" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1587.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1029.7" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1571.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1029.7" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1555.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1029.7" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1539.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1029.7" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1523.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1029.7" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1507.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1029.7" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1491.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1029.7" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1475.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1029.7" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1459.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1029.7" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1443.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1029.7" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1427.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1029.7" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1411.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1029.7" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1395.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1029.7" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1379.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1029.7" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1363.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1029.7" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1347.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1029.7" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1331.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1029.7" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1315.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1029.7" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1299.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1029.7" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1283.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1029.7" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1267.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1029.7" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1251.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1029.7" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1235.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1029.7" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1219.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1029.7" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1203.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1029.7" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1187.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1029.7" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1171.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1029.7" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1155.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1029.7" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1139.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1029.7" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1123.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1029.7" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1107.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1029.7" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1091.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1029.7" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1075.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1029.7" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1059.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1029.7" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1043.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1029.7" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1027.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1029.7" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="1011.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1029.7" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="995.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1029.7" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="979.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1029.7" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="963.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1029.7" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="947.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1029.7" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="931.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1029.7" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="915.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1029.7" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="899.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1029.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="883.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1029.7" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="867.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1029.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="851.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1029.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="835.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1029.7" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="819.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1029.7" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="803.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1029.7" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="787.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1029.7" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="771.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1029.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="755.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1029.7" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="739.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1029.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="723.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1029.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="707.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1029.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="691.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1029.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="675.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1029.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="659.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1029.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="643.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1029.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="627.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1029.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="611.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1029.7" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="595.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1029.7" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="579.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1029.7" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="563.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1029.7" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="547.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1029.7" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="531.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1029.7" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="515.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1029.7" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="499.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1029.7" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="483.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1029.7" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="467.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1029.7" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="451.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1029.7" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="435.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1029.7" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="419.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1029.7" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="403.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1029.7" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="387.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1029.7" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="371.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1029.7" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="355.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1029.7" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="339.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1029.7" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="323.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1029.7" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="307.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1029.7" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="291.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1029.7" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="275.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1029.7" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="259.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1029.7" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="243.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1029.7" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="227.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1029.7" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="211.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1029.7" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="195.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1029.7" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="179.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1029.7" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="163.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1029.7" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="147.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1029.7" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="131.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1029.7" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="115.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1029.7" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="99.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1029.7" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="83.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1029.7" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="67.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1029.7" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="51.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1029.7" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.31%)</title><rect x="1026.7" y="35.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1029.7" y="46.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.31%)</title><rect x="1030.4" y="1683.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1033.4" y="1694.0"></text>
</g>
<g>
<title>CallNode::Value(PhaseTransform*) const (1 samples, 0.31%)</title><rect x="1030.4" y="1667.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1033.4" y="1678.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.31%)</title><rect x="1034.2" y="1683.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1037.2" y="1694.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.31%)</title><rect x="1034.2" y="1667.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1037.2" y="1678.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.31%)</title><rect x="1034.2" y="1651.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1037.2" y="1662.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (29 samples, 9.12%)</title><rect x="1037.9" y="1683.0" width="107.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1040.9" y="1694.0">PhaseIdealLoo..</text>
</g>
<g>
<title>Compile::print_method(CompilerPhaseType, int) (1 samples, 0.31%)</title><rect x="1037.9" y="1667.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1040.9" y="1678.0"></text>
</g>
<g>
<title>Ticks::stamp() (1 samples, 0.31%)</title><rect x="1037.9" y="1651.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1040.9" y="1662.0"></text>
</g>
<g>
<title>os::elapsed_counter() (1 samples, 0.31%)</title><rect x="1037.9" y="1635.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1040.9" y="1646.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.31%)</title><rect x="1041.6" y="1667.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1044.6" y="1678.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.31%)</title><rect x="1045.3" y="1667.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1048.3" y="1678.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.31%)</title><rect x="1045.3" y="1651.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1048.3" y="1662.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.63%)</title><rect x="1049.0" y="1667.0" width="7.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1052.0" y="1678.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (21 samples, 6.60%)</title><rect x="1056.4" y="1667.0" width="77.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1059.4" y="1678.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (21 samples, 6.60%)</title><rect x="1056.4" y="1651.0" width="77.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1059.4" y="1662.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.63%)</title><rect x="1063.8" y="1635.0" width="7.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1066.8" y="1646.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (17 samples, 5.35%)</title><rect x="1071.3" y="1635.0" width="63.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1074.3" y="1646.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.31%)</title><rect x="1123.2" y="1619.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.2" y="1630.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.63%)</title><rect x="1126.9" y="1619.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.9" y="1630.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.94%)</title><rect x="1134.3" y="1667.0" width="11.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.3" y="1678.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.31%)</title><rect x="1138.1" y="1651.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.1" y="1662.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.31%)</title><rect x="1141.8" y="1651.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.8" y="1662.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca(Node*, Node*) const (1 samples, 0.31%)</title><rect x="1141.8" y="1635.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.8" y="1646.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_internal(Node*, Node*) const (1 samples, 0.31%)</title><rect x="1141.8" y="1619.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.8" y="1630.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.31%)</title><rect x="1145.5" y="1683.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.5" y="1694.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.31%)</title><rect x="1145.5" y="1667.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.5" y="1678.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.94%)</title><rect x="1149.2" y="1683.0" width="11.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.2" y="1694.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.94%)</title><rect x="1149.2" y="1667.0" width="11.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.2" y="1678.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1152.9" y="1651.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.9" y="1662.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.31%)</title><rect x="1152.9" y="1635.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.9" y="1646.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1152.9" y="1619.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.9" y="1630.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1156.6" y="1651.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.6" y="1662.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1156.6" y="1635.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.6" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.26%)</title><rect x="1160.3" y="1699.0" width="14.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.3" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.26%)</title><rect x="1160.3" y="1683.0" width="14.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.3" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.26%)</title><rect x="1160.3" y="1667.0" width="14.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.3" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.26%)</title><rect x="1160.3" y="1651.0" width="14.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.3" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.26%)</title><rect x="1160.3" y="1635.0" width="14.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.3" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.26%)</title><rect x="1160.3" y="1619.0" width="14.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.3" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.26%)</title><rect x="1160.3" y="1603.0" width="14.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.3" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.26%)</title><rect x="1160.3" y="1587.0" width="14.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.3" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.26%)</title><rect x="1160.3" y="1571.0" width="14.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.3" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.26%)</title><rect x="1160.3" y="1555.0" width="14.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.3" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.26%)</title><rect x="1160.3" y="1539.0" width="14.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.3" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.94%)</title><rect x="1160.3" y="1523.0" width="11.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.3" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1160.3" y="1507.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.3" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1160.3" y="1491.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.3" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1160.3" y="1475.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.3" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1160.3" y="1459.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.3" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1160.3" y="1443.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.3" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1160.3" y="1427.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.3" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1160.3" y="1411.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.3" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1160.3" y="1395.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.3" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1160.3" y="1379.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1160.3" y="1363.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1160.3" y="1347.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.3" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1160.3" y="1331.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.3" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1160.3" y="1315.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.3" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1160.3" y="1299.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1160.3" y="1283.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1160.3" y="1267.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1160.3" y="1251.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.3" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1160.3" y="1235.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.3" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1160.3" y="1219.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.3" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1160.3" y="1203.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1160.3" y="1187.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1160.3" y="1171.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1160.3" y="1155.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.3" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1160.3" y="1139.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.3" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1160.3" y="1123.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.3" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1160.3" y="1107.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1160.3" y="1091.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1160.3" y="1075.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1160.3" y="1059.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1160.3" y="1043.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.3" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1160.3" y="1027.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.3" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1160.3" y="1011.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1160.3" y="995.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1160.3" y="979.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1160.3" y="963.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1160.3" y="947.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.3" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1160.3" y="931.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.3" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1160.3" y="915.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1160.3" y="899.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1160.3" y="883.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1160.3" y="867.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1160.3" y="851.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.3" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1160.3" y="835.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.3" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1160.3" y="819.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1160.3" y="803.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1160.3" y="787.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1160.3" y="771.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.31%)</title><rect x="1160.3" y="755.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.31%)</title><rect x="1160.3" y="739.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.3" y="750.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.31%)</title><rect x="1160.3" y="723.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.3" y="734.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.31%)</title><rect x="1160.3" y="707.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.3" y="718.0"></text>
</g>
<g>
<title>IdealKit::make_leaf_call(TypeFunc const*, unsigned char*, char const*, Node*, Node*, Node*, Node*) (1 samples, 0.31%)</title><rect x="1160.3" y="691.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.3" y="702.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.31%)</title><rect x="1160.3" y="675.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.3" y="686.0"></text>
</g>
<g>
<title>ParmNode::Opcode() const (1 samples, 0.31%)</title><rect x="1160.3" y="659.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.3" y="670.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.63%)</title><rect x="1164.0" y="1507.0" width="7.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.0" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.63%)</title><rect x="1164.0" y="1491.0" width="7.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.0" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.63%)</title><rect x="1164.0" y="1475.0" width="7.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.0" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.63%)</title><rect x="1164.0" y="1459.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.0" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.63%)</title><rect x="1164.0" y="1443.0" width="7.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.0" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.63%)</title><rect x="1164.0" y="1427.0" width="7.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.0" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.63%)</title><rect x="1164.0" y="1411.0" width="7.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.0" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.63%)</title><rect x="1164.0" y="1395.0" width="7.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.0" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.63%)</title><rect x="1164.0" y="1379.0" width="7.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.0" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.63%)</title><rect x="1164.0" y="1363.0" width="7.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.0" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.63%)</title><rect x="1164.0" y="1347.0" width="7.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.0" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.63%)</title><rect x="1164.0" y="1331.0" width="7.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.0" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.63%)</title><rect x="1164.0" y="1315.0" width="7.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.0" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.63%)</title><rect x="1164.0" y="1299.0" width="7.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.0" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.63%)</title><rect x="1164.0" y="1283.0" width="7.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.0" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.63%)</title><rect x="1164.0" y="1267.0" width="7.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.0" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.63%)</title><rect x="1164.0" y="1251.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.0" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.63%)</title><rect x="1164.0" y="1235.0" width="7.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.0" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.63%)</title><rect x="1164.0" y="1219.0" width="7.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.0" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.63%)</title><rect x="1164.0" y="1203.0" width="7.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.0" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.63%)</title><rect x="1164.0" y="1187.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.0" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.63%)</title><rect x="1164.0" y="1171.0" width="7.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.0" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.63%)</title><rect x="1164.0" y="1155.0" width="7.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.0" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.63%)</title><rect x="1164.0" y="1139.0" width="7.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.0" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.63%)</title><rect x="1164.0" y="1123.0" width="7.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.0" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.63%)</title><rect x="1164.0" y="1107.0" width="7.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.0" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.63%)</title><rect x="1164.0" y="1091.0" width="7.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.0" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.63%)</title><rect x="1164.0" y="1075.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.0" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.63%)</title><rect x="1164.0" y="1059.0" width="7.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.0" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.63%)</title><rect x="1164.0" y="1043.0" width="7.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.0" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.63%)</title><rect x="1164.0" y="1027.0" width="7.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.0" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.63%)</title><rect x="1164.0" y="1011.0" width="7.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.0" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.63%)</title><rect x="1164.0" y="995.0" width="7.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.0" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.63%)</title><rect x="1164.0" y="979.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.0" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.63%)</title><rect x="1164.0" y="963.0" width="7.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.0" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.63%)</title><rect x="1164.0" y="947.0" width="7.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.63%)</title><rect x="1164.0" y="931.0" width="7.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.0" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1164.0" y="915.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.0" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1164.0" y="899.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1164.0" y="883.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1164.0" y="867.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1164.0" y="851.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1164.0" y="835.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.0" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1164.0" y="819.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.0" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1164.0" y="803.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1164.0" y="787.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1164.0" y="771.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1164.0" y="755.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1164.0" y="739.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.0" y="750.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.31%)</title><rect x="1164.0" y="723.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.0" y="734.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.31%)</title><rect x="1164.0" y="707.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.0" y="718.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.31%)</title><rect x="1164.0" y="691.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.0" y="702.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.31%)</title><rect x="1164.0" y="675.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.0" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1167.7" y="915.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.7" y="926.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1167.7" y="899.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.7" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1167.7" y="883.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.7" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1167.7" y="867.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1167.7" y="851.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1167.7" y="835.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1167.7" y="819.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1167.7" y="803.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.7" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1167.7" y="787.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.7" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1167.7" y="771.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1167.7" y="755.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1167.7" y="739.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1167.7" y="723.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.31%)</title><rect x="1167.7" y="707.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.31%)</title><rect x="1167.7" y="691.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.7" y="702.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.31%)</title><rect x="1167.7" y="675.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.7" y="686.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.31%)</title><rect x="1167.7" y="659.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.7" y="670.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.31%)</title><rect x="1167.7" y="643.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.7" y="654.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.31%)</title><rect x="1167.7" y="627.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.7" y="638.0"></text>
</g>
<g>
<title>TypeNode::cmp(Node const&amp;) const (1 samples, 0.31%)</title><rect x="1167.7" y="611.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.7" y="622.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.31%)</title><rect x="1167.7" y="595.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.7" y="606.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.31%)</title><rect x="1167.7" y="579.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.31%)</title><rect x="1171.4" y="1523.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.4" y="1534.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.31%)</title><rect x="1171.4" y="1507.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.4" y="1518.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.31%)</title><rect x="1171.4" y="1491.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.4" y="1502.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.31%)</title><rect x="1171.4" y="1475.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.4" y="1486.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.31%)</title><rect x="1171.4" y="1459.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.4" y="1470.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.31%)</title><rect x="1171.4" y="1443.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.4" y="1454.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.31%)</title><rect x="1171.4" y="1427.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.4" y="1438.0"></text>
</g>
<g>
<title>MergeMemNode::set_base_memory(Node*) (1 samples, 0.31%)</title><rect x="1171.4" y="1411.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.4" y="1422.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.94%)</title><rect x="1175.2" y="1731.0" width="11.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.2" y="1742.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.94%)</title><rect x="1175.2" y="1715.0" width="11.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.2" y="1726.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.94%)</title><rect x="1175.2" y="1699.0" width="11.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.2" y="1710.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.94%)</title><rect x="1175.2" y="1683.0" width="11.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.2" y="1694.0"></text>
</g>
<g>
<title>Compilation::build_hir() (3 samples, 0.94%)</title><rect x="1175.2" y="1667.0" width="11.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.2" y="1678.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (3 samples, 0.94%)</title><rect x="1175.2" y="1651.0" width="11.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.2" y="1662.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (3 samples, 0.94%)</title><rect x="1175.2" y="1635.0" width="11.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.2" y="1646.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (3 samples, 0.94%)</title><rect x="1175.2" y="1619.0" width="11.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.2" y="1630.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.31%)</title><rect x="1175.2" y="1603.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.2" y="1614.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.31%)</title><rect x="1175.2" y="1587.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.2" y="1598.0"></text>
</g>
<g>
<title>MethodLiveness::MethodLiveness(Arena*, ciMethod*) (1 samples, 0.31%)</title><rect x="1175.2" y="1571.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.2" y="1582.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.63%)</title><rect x="1178.9" y="1603.0" width="7.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.9" y="1614.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.63%)</title><rect x="1178.9" y="1587.0" width="7.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.9" y="1598.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.63%)</title><rect x="1178.9" y="1571.0" width="7.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="1582.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.63%)</title><rect x="1178.9" y="1555.0" width="7.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.9" y="1566.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.63%)</title><rect x="1178.9" y="1539.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.9" y="1550.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.63%)</title><rect x="1178.9" y="1523.0" width="7.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.9" y="1534.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.63%)</title><rect x="1178.9" y="1507.0" width="7.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="1518.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (1 samples, 0.31%)</title><rect x="1178.9" y="1491.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.9" y="1502.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.31%)</title><rect x="1178.9" y="1475.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.9" y="1486.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.31%)</title><rect x="1178.9" y="1459.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.9" y="1470.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.31%)</title><rect x="1178.9" y="1443.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.9" y="1454.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.31%)</title><rect x="1182.6" y="1491.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.6" y="1502.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.31%)</title><rect x="1182.6" y="1475.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.6" y="1486.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.31%)</title><rect x="1182.6" y="1459.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.6" y="1470.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.31%)</title><rect x="1182.6" y="1443.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.6" y="1454.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.31%)</title><rect x="1182.6" y="1427.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.6" y="1438.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.31%)</title><rect x="1182.6" y="1411.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.6" y="1422.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.31%)</title><rect x="1182.6" y="1395.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.6" y="1406.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.31%)</title><rect x="1182.6" y="1379.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.6" y="1390.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.31%)</title><rect x="1182.6" y="1363.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.6" y="1374.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.31%)</title><rect x="1182.6" y="1347.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.6" y="1358.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.31%)</title><rect x="1182.6" y="1331.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.6" y="1342.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.31%)</title><rect x="1182.6" y="1315.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.6" y="1326.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.31%)</title><rect x="1186.3" y="1795.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.3" y="1806.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.31%)</title><rect x="1186.3" y="1779.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.3" y="1790.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.31%)</title><rect x="1186.3" y="1763.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.3" y="1774.0"></text>
</g>
</g>
</svg>
