<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="901"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="901"> </text>
<g id="frames">
<g>
<title>all (1,032 samples, 100.00%)</title><rect x="10.0" y="867.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="878.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (247 samples, 23.93%)</title><rect x="10.0" y="851.0" width="282.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="862.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (247 samples, 23.93%)</title><rect x="10.0" y="835.0" width="282.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="846.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.10%)</title><rect x="11.1" y="819.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (3 samples, 0.29%)</title><rect x="12.3" y="819.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.29%)</title><rect x="12.3" y="803.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/849305336.accept (2 samples, 0.19%)</title><rect x="13.4" y="787.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.4" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.19%)</title><rect x="13.4" y="771.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.4" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.19%)</title><rect x="13.4" y="755.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.4" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.10%)</title><rect x="13.4" y="739.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.4" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.10%)</title><rect x="14.6" y="739.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.6" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.10%)</title><rect x="14.6" y="723.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.6" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.10%)</title><rect x="14.6" y="707.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.6" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.10%)</title><rect x="14.6" y="691.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.6" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.10%)</title><rect x="15.7" y="819.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.10%)</title><rect x="15.7" y="803.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="15.7" y="787.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.7" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="15.7" y="771.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.7" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.10%)</title><rect x="15.7" y="755.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (3 samples, 0.29%)</title><rect x="16.9" y="819.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (3 samples, 0.29%)</title><rect x="16.9" y="803.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="19.1" y="787.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.1" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="19.1" y="771.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="19.1" y="755.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="19.1" y="739.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="19.1" y="723.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.1" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="19.1" y="707.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="19.1" y="691.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.1" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="19.1" y="675.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$252/307700440.test (1 samples, 0.10%)</title><rect x="19.1" y="659.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.10%)</title><rect x="20.3" y="819.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.3" y="830.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (179 samples, 17.34%)</title><rect x="21.4" y="819.0" width="204.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.4" y="830.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/621467933.accept (170 samples, 16.47%)</title><rect x="21.4" y="803.0" width="194.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.4" y="814.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="22.6" y="787.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="25.6" y="798.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.10%)</title><rect x="22.6" y="771.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="25.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (168 samples, 16.28%)</title><rect x="23.7" y="787.0" width="192.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.7" y="798.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (128 samples, 12.40%)</title><rect x="28.3" y="771.0" width="146.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.3" y="782.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (128 samples, 12.40%)</title><rect x="28.3" y="755.0" width="146.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.3" y="766.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (128 samples, 12.40%)</title><rect x="28.3" y="739.0" width="146.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.3" y="750.0">com/linecorp/decat..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (128 samples, 12.40%)</title><rect x="28.3" y="723.0" width="146.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.3" y="734.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (128 samples, 12.40%)</title><rect x="28.3" y="707.0" width="146.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.3" y="718.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (128 samples, 12.40%)</title><rect x="28.3" y="691.0" width="146.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.3" y="702.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (83 samples, 8.04%)</title><rect x="28.3" y="675.0" width="94.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.3" y="686.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (14 samples, 1.36%)</title><rect x="28.3" y="659.0" width="16.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="31.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (14 samples, 1.36%)</title><rect x="28.3" y="643.0" width="16.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (14 samples, 1.36%)</title><rect x="28.3" y="627.0" width="16.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (14 samples, 1.36%)</title><rect x="28.3" y="611.0" width="16.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (2 samples, 0.19%)</title><rect x="42.0" y="595.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="45.0" y="606.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.10%)</title><rect x="43.2" y="579.0" width="1.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="46.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (69 samples, 6.69%)</title><rect x="44.3" y="659.0" width="78.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="47.3" y="670.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (69 samples, 6.69%)</title><rect x="44.3" y="643.0" width="78.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.3" y="654.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (69 samples, 6.69%)</title><rect x="44.3" y="627.0" width="78.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.3" y="638.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (69 samples, 6.69%)</title><rect x="44.3" y="611.0" width="78.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="47.3" y="622.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (1 samples, 0.10%)</title><rect x="46.6" y="595.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="49.6" y="606.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (66 samples, 6.40%)</title><rect x="47.7" y="595.0" width="75.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.7" y="606.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Unpark (59 samples, 5.72%)</title><rect x="47.7" y="579.0" width="67.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="50.7" y="590.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="50.0" y="563.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="53.0" y="574.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.10%)</title><rect x="51.2" y="563.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="54.2" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.19%)</title><rect x="52.3" y="563.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="55.3" y="574.0"></text>
</g>
<g>
<title>__pthread_cond_signal (39 samples, 3.78%)</title><rect x="54.6" y="563.0" width="44.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="57.6" y="574.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.19%)</title><rect x="99.2" y="563.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="102.2" y="574.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 1.16%)</title><rect x="101.5" y="563.0" width="13.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="104.5" y="574.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.19%)</title><rect x="115.2" y="579.0" width="2.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="118.2" y="590.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.39%)</title><rect x="117.5" y="579.0" width="4.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="120.5" y="590.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.10%)</title><rect x="122.1" y="579.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="125.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.19%)</title><rect x="123.2" y="675.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="126.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.19%)</title><rect x="123.2" y="659.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="126.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.19%)</title><rect x="123.2" y="643.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="126.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (43 samples, 4.17%)</title><rect x="125.5" y="675.0" width="49.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="128.5" y="686.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (43 samples, 4.17%)</title><rect x="125.5" y="659.0" width="49.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="128.5" y="670.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (43 samples, 4.17%)</title><rect x="125.5" y="643.0" width="49.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="128.5" y="654.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (43 samples, 4.17%)</title><rect x="125.5" y="627.0" width="49.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="128.5" y="638.0">java/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (16 samples, 1.55%)</title><rect x="174.7" y="771.0" width="18.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="177.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (14 samples, 1.36%)</title><rect x="176.9" y="755.0" width="16.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.9" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.isRegressing (1 samples, 0.10%)</title><rect x="191.8" y="739.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.8" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (6 samples, 0.58%)</title><rect x="192.9" y="771.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="195.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.58%)</title><rect x="192.9" y="755.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="195.9" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.58%)</title><rect x="192.9" y="739.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (11 samples, 1.07%)</title><rect x="199.8" y="771.0" width="12.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="202.8" y="782.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (9 samples, 0.87%)</title><rect x="202.1" y="755.0" width="10.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="205.1" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.39%)</title><rect x="204.4" y="739.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="207.4" y="750.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.10%)</title><rect x="205.5" y="723.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.5" y="734.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.19%)</title><rect x="206.7" y="723.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="209.7" y="734.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.10%)</title><rect x="209.0" y="739.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="212.0" y="750.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="210.1" y="739.0" width="2.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="213.1" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="212.4" y="771.0" width="1.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="215.4" y="782.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="213.5" y="771.0" width="2.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="216.5" y="782.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.29%)</title><rect x="215.8" y="803.0" width="3.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="218.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.58%)</title><rect x="219.2" y="803.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="222.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.58%)</title><rect x="219.2" y="787.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.58%)</title><rect x="219.2" y="771.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.58%)</title><rect x="219.2" y="755.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.2" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (4 samples, 0.39%)</title><rect x="221.5" y="739.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 5.62%)</title><rect x="226.1" y="819.0" width="66.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="229.1" y="830.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 5.62%)</title><rect x="226.1" y="803.0" width="66.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="229.1" y="814.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (37 samples, 3.59%)</title><rect x="226.1" y="787.0" width="42.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.1" y="798.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="226.1" y="771.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="229.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="226.1" y="755.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="229.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.10%)</title><rect x="226.1" y="739.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.10%)</title><rect x="226.1" y="723.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.10%)</title><rect x="226.1" y="707.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="229.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.10%)</title><rect x="226.1" y="691.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="226.1" y="675.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="229.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="226.1" y="659.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.1" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.getKey (1 samples, 0.10%)</title><rect x="226.1" y="643.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (36 samples, 3.49%)</title><rect x="227.2" y="771.0" width="41.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.2" y="782.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (35 samples, 3.39%)</title><rect x="227.2" y="755.0" width="40.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.2" y="766.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (32 samples, 3.10%)</title><rect x="228.4" y="739.0" width="36.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="231.4" y="750.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (32 samples, 3.10%)</title><rect x="228.4" y="723.0" width="36.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="231.4" y="734.0">org..</text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="230.7" y="707.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="233.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (15 samples, 1.45%)</title><rect x="231.8" y="707.0" width="17.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.58%)</title><rect x="231.8" y="691.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="234.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.58%)</title><rect x="231.8" y="675.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.58%)</title><rect x="231.8" y="659.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.58%)</title><rect x="231.8" y="643.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="234.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.58%)</title><rect x="231.8" y="627.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="234.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.58%)</title><rect x="231.8" y="611.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="234.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.58%)</title><rect x="231.8" y="595.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="234.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (9 samples, 0.87%)</title><rect x="238.7" y="691.0" width="10.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (9 samples, 0.87%)</title><rect x="238.7" y="675.0" width="10.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (9 samples, 0.87%)</title><rect x="238.7" y="659.0" width="10.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="241.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (14 samples, 1.36%)</title><rect x="249.0" y="707.0" width="16.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="252.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (11 samples, 1.07%)</title><rect x="252.4" y="691.0" width="12.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="255.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.68%)</title><rect x="252.4" y="675.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.4" y="686.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.68%)</title><rect x="252.4" y="659.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.4" y="670.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.29%)</title><rect x="257.0" y="643.0" width="3.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="260.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.39%)</title><rect x="260.4" y="675.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.4" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.39%)</title><rect x="260.4" y="659.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="263.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.10%)</title><rect x="265.0" y="739.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.10%)</title><rect x="265.0" y="723.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="268.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="265.0" y="707.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="268.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="265.0" y="691.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.0" y="702.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="265.0" y="675.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="268.0" y="686.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="265.0" y="659.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="268.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (1 samples, 0.10%)</title><rect x="266.1" y="739.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="269.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.10%)</title><rect x="266.1" y="723.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="269.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.10%)</title><rect x="267.3" y="755.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="270.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.10%)</title><rect x="267.3" y="739.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="270.3" y="750.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.10%)</title><rect x="267.3" y="723.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (12 samples, 1.16%)</title><rect x="268.4" y="787.0" width="13.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (11 samples, 1.07%)</title><rect x="268.4" y="771.0" width="12.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (9 samples, 0.87%)</title><rect x="268.4" y="755.0" width="10.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="271.4" y="766.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.19%)</title><rect x="268.4" y="739.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="271.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1790047016.accept (2 samples, 0.19%)</title><rect x="268.4" y="723.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="271.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.19%)</title><rect x="268.4" y="707.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.19%)</title><rect x="268.4" y="691.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.4" y="702.0"></text>
</g>
<g>
<title>java/util/Optional.map (2 samples, 0.19%)</title><rect x="268.4" y="675.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="271.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$211/2139146450.apply (2 samples, 0.19%)</title><rect x="268.4" y="659.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (2 samples, 0.19%)</title><rect x="268.4" y="643.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="271.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (3 samples, 0.29%)</title><rect x="270.7" y="739.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (3 samples, 0.29%)</title><rect x="270.7" y="723.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="273.7" y="734.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.10%)</title><rect x="271.8" y="707.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.8" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.10%)</title><rect x="271.8" y="691.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.8" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.10%)</title><rect x="271.8" y="675.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.8" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.10%)</title><rect x="271.8" y="659.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="274.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.10%)</title><rect x="271.8" y="643.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.8" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="271.8" y="627.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.8" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="273.0" y="707.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="273.0" y="691.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="276.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="273.0" y="675.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="276.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="273.0" y="659.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="276.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="273.0" y="643.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.0" y="654.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.10%)</title><rect x="273.0" y="627.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="276.0" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.10%)</title><rect x="273.0" y="611.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.0" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.getFence (1 samples, 0.10%)</title><rect x="273.0" y="595.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (4 samples, 0.39%)</title><rect x="274.1" y="739.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="277.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (4 samples, 0.39%)</title><rect x="274.1" y="723.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="277.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="277.6" y="707.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.6" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="277.6" y="691.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="280.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="277.6" y="675.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="280.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="277.6" y="659.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="280.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="277.6" y="643.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.6" y="654.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.10%)</title><rect x="277.6" y="627.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="280.6" y="638.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.10%)</title><rect x="277.6" y="611.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="280.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.19%)</title><rect x="278.7" y="755.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="281.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.10%)</title><rect x="279.8" y="739.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.8" y="750.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.10%)</title><rect x="279.8" y="723.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.8" y="734.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.10%)</title><rect x="279.8" y="707.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="282.8" y="718.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.10%)</title><rect x="279.8" y="691.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.10%)</title><rect x="281.0" y="771.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.10%)</title><rect x="281.0" y="755.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="284.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.10%)</title><rect x="281.0" y="739.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="284.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.29%)</title><rect x="282.1" y="787.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.29%)</title><rect x="282.1" y="771.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="285.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.29%)</title><rect x="282.1" y="755.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.29%)</title><rect x="282.1" y="739.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.19%)</title><rect x="282.1" y="723.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="285.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.19%)</title><rect x="282.1" y="707.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.19%)</title><rect x="282.1" y="691.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="285.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.19%)</title><rect x="282.1" y="675.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.19%)</title><rect x="282.1" y="659.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.1" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.19%)</title><rect x="282.1" y="643.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.1" y="654.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="282.1" y="627.0" width="2.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="285.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (1 samples, 0.10%)</title><rect x="284.4" y="723.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="287.4" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="284.4" y="707.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="287.4" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="284.4" y="691.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="287.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.48%)</title><rect x="285.6" y="787.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.39%)</title><rect x="286.7" y="771.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.7" y="782.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.10%)</title><rect x="286.7" y="755.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="289.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/1535804526.accept (1 samples, 0.10%)</title><rect x="286.7" y="739.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="289.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.10%)</title><rect x="286.7" y="723.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.10%)</title><rect x="286.7" y="707.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.10%)</title><rect x="286.7" y="691.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="286.7" y="675.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.7" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="286.7" y="659.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="289.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.10%)</title><rect x="287.8" y="755.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="290.8" y="766.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.10%)</title><rect x="287.8" y="739.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.8" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.10%)</title><rect x="287.8" y="723.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="290.8" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.size (1 samples, 0.10%)</title><rect x="287.8" y="707.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="290.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.10%)</title><rect x="289.0" y="755.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="292.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.10%)</title><rect x="289.0" y="739.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="292.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.10%)</title><rect x="290.1" y="755.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="293.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.10%)</title><rect x="290.1" y="739.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="293.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.10%)</title><rect x="291.3" y="787.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="291.3" y="771.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="294.3" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.run (678 samples, 65.70%)</title><rect x="292.4" y="851.0" width="775.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.4" y="862.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (678 samples, 65.70%)</title><rect x="292.4" y="835.0" width="775.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.4" y="846.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (678 samples, 65.70%)</title><rect x="292.4" y="819.0" width="775.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.4" y="830.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1699461199.run (443 samples, 42.93%)</title><rect x="295.9" y="803.0" width="506.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.9" y="814.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/16994..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (443 samples, 42.93%)</title><rect x="295.9" y="787.0" width="506.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="298.9" y="798.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (443 samples, 42.93%)</title><rect x="295.9" y="771.0" width="506.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.9" y="782.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (431 samples, 41.76%)</title><rect x="295.9" y="755.0" width="492.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="298.9" y="766.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenP..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.19%)</title><rect x="303.9" y="739.0" width="2.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="306.9" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.48%)</title><rect x="306.1" y="739.0" width="5.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="309.1" y="750.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.19%)</title><rect x="309.6" y="723.0" width="2.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="312.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (133 samples, 12.89%)</title><rect x="311.9" y="739.0" width="152.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="314.9" y="750.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (131 samples, 12.69%)</title><rect x="314.1" y="723.0" width="149.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="317.1" y="734.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (131 samples, 12.69%)</title><rect x="314.1" y="707.0" width="149.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="317.1" y="718.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (131 samples, 12.69%)</title><rect x="314.1" y="691.0" width="149.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="317.1" y="702.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (131 samples, 12.69%)</title><rect x="314.1" y="675.0" width="149.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="317.1" y="686.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (131 samples, 12.69%)</title><rect x="314.1" y="659.0" width="149.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="317.1" y="670.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (30 samples, 2.91%)</title><rect x="314.1" y="643.0" width="34.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="317.1" y="654.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 0.39%)</title><rect x="314.1" y="627.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="317.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 0.39%)</title><rect x="314.1" y="611.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="317.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.39%)</title><rect x="314.1" y="595.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="317.1" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.39%)</title><rect x="314.1" y="579.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="317.1" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.10%)</title><rect x="317.6" y="563.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="320.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (26 samples, 2.52%)</title><rect x="318.7" y="627.0" width="29.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.7" y="638.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (26 samples, 2.52%)</title><rect x="318.7" y="611.0" width="29.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="321.7" y="622.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (8 samples, 0.78%)</title><rect x="318.7" y="595.0" width="9.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="321.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (8 samples, 0.78%)</title><rect x="318.7" y="579.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="321.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.10%)</title><rect x="323.3" y="563.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="326.3" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.29%)</title><rect x="324.4" y="563.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="327.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (10 samples, 0.97%)</title><rect x="327.9" y="595.0" width="11.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="330.9" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="327.9" y="579.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="330.9" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="327.9" y="563.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="330.9" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="327.9" y="547.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="330.9" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="327.9" y="531.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="330.9" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="327.9" y="515.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="330.9" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="327.9" y="499.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="330.9" y="510.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="327.9" y="483.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="330.9" y="494.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.10%)</title><rect x="327.9" y="467.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="330.9" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.10%)</title><rect x="327.9" y="451.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="330.9" y="462.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.10%)</title><rect x="327.9" y="435.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="330.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (9 samples, 0.87%)</title><rect x="329.0" y="579.0" width="10.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="332.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (2 samples, 0.19%)</title><rect x="335.9" y="563.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="338.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (1 samples, 0.10%)</title><rect x="338.2" y="563.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="341.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (8 samples, 0.78%)</title><rect x="339.3" y="595.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="342.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (7 samples, 0.68%)</title><rect x="339.3" y="579.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="342.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.10%)</title><rect x="346.2" y="563.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="349.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="347.3" y="579.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="350.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (95 samples, 9.21%)</title><rect x="348.4" y="643.0" width="108.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="351.4" y="654.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (7 samples, 0.68%)</title><rect x="348.4" y="627.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="351.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (7 samples, 0.68%)</title><rect x="348.4" y="611.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="351.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (7 samples, 0.68%)</title><rect x="348.4" y="595.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="351.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (7 samples, 0.68%)</title><rect x="348.4" y="579.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="351.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (2 samples, 0.19%)</title><rect x="351.9" y="563.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="354.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (2 samples, 0.19%)</title><rect x="351.9" y="547.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="354.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (2 samples, 0.19%)</title><rect x="351.9" y="531.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="354.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.resetWithEmpty (1 samples, 0.10%)</title><rect x="354.2" y="563.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="357.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.10%)</title><rect x="355.3" y="563.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="358.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.39%)</title><rect x="356.5" y="627.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="359.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.39%)</title><rect x="356.5" y="611.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="359.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.87%)</title><rect x="361.0" y="627.0" width="10.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="364.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.78%)</title><rect x="362.2" y="611.0" width="9.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="365.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.19%)</title><rect x="362.2" y="595.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="365.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.48%)</title><rect x="364.5" y="595.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="367.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.39%)</title><rect x="365.6" y="579.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="368.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.10%)</title><rect x="370.2" y="595.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="373.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.58%)</title><rect x="371.3" y="627.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="374.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.19%)</title><rect x="371.3" y="611.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="374.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.39%)</title><rect x="373.6" y="611.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="376.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="377.0" y="595.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="380.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="377.0" y="579.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="380.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="377.0" y="563.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="380.0" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="377.0" y="547.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="380.0" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="377.0" y="531.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="380.0" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="377.0" y="515.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="380.0" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="377.0" y="499.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="380.0" y="510.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.10%)</title><rect x="377.0" y="483.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="380.0" y="494.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="377.0" y="467.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="380.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (69 samples, 6.69%)</title><rect x="378.2" y="627.0" width="78.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="381.2" y="638.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.65%)</title><rect x="379.3" y="611.0" width="19.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="382.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.58%)</title><rect x="380.5" y="595.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="383.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.58%)</title><rect x="380.5" y="579.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="383.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.58%)</title><rect x="380.5" y="563.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="383.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (6 samples, 0.58%)</title><rect x="380.5" y="547.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="383.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.19%)</title><rect x="385.0" y="531.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="388.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (8 samples, 0.78%)</title><rect x="387.3" y="595.0" width="9.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="390.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (4 samples, 0.39%)</title><rect x="387.3" y="579.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="390.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.10%)</title><rect x="390.8" y="563.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="393.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 0.39%)</title><rect x="391.9" y="579.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="394.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 0.39%)</title><rect x="391.9" y="563.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="394.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.19%)</title><rect x="394.2" y="547.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="397.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.19%)</title><rect x="394.2" y="531.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="397.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.19%)</title><rect x="396.5" y="595.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="399.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.19%)</title><rect x="396.5" y="579.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="399.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (51 samples, 4.94%)</title><rect x="398.8" y="611.0" width="58.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="401.8" y="622.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (51 samples, 4.94%)</title><rect x="398.8" y="595.0" width="58.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="401.8" y="606.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (51 samples, 4.94%)</title><rect x="398.8" y="579.0" width="58.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="401.8" y="590.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.55%)</title><rect x="403.3" y="563.0" width="18.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="406.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (4 samples, 0.39%)</title><rect x="405.6" y="547.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="408.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.29%)</title><rect x="410.2" y="547.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="413.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.29%)</title><rect x="410.2" y="531.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="413.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.29%)</title><rect x="410.2" y="515.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="413.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.19%)</title><rect x="410.2" y="499.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="413.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.10%)</title><rect x="412.5" y="499.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="415.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.19%)</title><rect x="413.6" y="547.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="416.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.10%)</title><rect x="413.6" y="531.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="416.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.10%)</title><rect x="414.8" y="531.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="417.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.10%)</title><rect x="414.8" y="515.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="417.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.39%)</title><rect x="415.9" y="547.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="418.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.39%)</title><rect x="415.9" y="531.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="418.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.19%)</title><rect x="418.2" y="515.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="421.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.10%)</title><rect x="420.5" y="547.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="423.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (5 samples, 0.48%)</title><rect x="421.6" y="563.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="424.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.39%)</title><rect x="422.8" y="547.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="425.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.39%)</title><rect x="422.8" y="531.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="425.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.39%)</title><rect x="422.8" y="515.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="425.8" y="526.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 0.39%)</title><rect x="422.8" y="499.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="425.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.19%)</title><rect x="427.3" y="563.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="430.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (18 samples, 1.74%)</title><rect x="429.6" y="563.0" width="20.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="432.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (18 samples, 1.74%)</title><rect x="429.6" y="547.0" width="20.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="432.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (18 samples, 1.74%)</title><rect x="429.6" y="531.0" width="20.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="432.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (18 samples, 1.74%)</title><rect x="429.6" y="515.0" width="20.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="432.6" y="526.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (18 samples, 1.74%)</title><rect x="429.6" y="499.0" width="20.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="432.6" y="510.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (12 samples, 1.16%)</title><rect x="435.3" y="483.0" width="13.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="438.3" y="494.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (5 samples, 0.48%)</title><rect x="443.4" y="467.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="446.4" y="478.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (1 samples, 0.10%)</title><rect x="449.1" y="483.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="452.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.58%)</title><rect x="450.2" y="563.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="453.2" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.58%)</title><rect x="450.2" y="547.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="453.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.58%)</title><rect x="450.2" y="531.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="453.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (6 samples, 0.58%)</title><rect x="457.1" y="643.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="460.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 0.58%)</title><rect x="457.1" y="627.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="460.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 0.58%)</title><rect x="457.1" y="611.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="460.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.58%)</title><rect x="457.1" y="595.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="460.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.58%)</title><rect x="457.1" y="579.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="460.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.10%)</title><rect x="461.6" y="563.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="464.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.10%)</title><rect x="462.8" y="563.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="465.8" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (261 samples, 25.29%)</title><rect x="463.9" y="739.0" width="298.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="466.9" y="750.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.39%)</title><rect x="469.7" y="723.0" width="4.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="472.7" y="734.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.29%)</title><rect x="470.8" y="707.0" width="3.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="473.8" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (49 samples, 4.75%)</title><rect x="474.2" y="723.0" width="56.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="477.2" y="734.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (49 samples, 4.75%)</title><rect x="474.2" y="707.0" width="56.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="477.2" y="718.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (48 samples, 4.65%)</title><rect x="475.4" y="691.0" width="54.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="478.4" y="702.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (20 samples, 1.94%)</title><rect x="478.8" y="675.0" width="22.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="481.8" y="686.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="479.9" y="659.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="482.9" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="479.9" y="643.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="482.9" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="479.9" y="627.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="482.9" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (18 samples, 1.74%)</title><rect x="481.1" y="659.0" width="20.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="484.1" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (18 samples, 1.74%)</title><rect x="481.1" y="643.0" width="20.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="484.1" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (18 samples, 1.74%)</title><rect x="481.1" y="627.0" width="20.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="484.1" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (18 samples, 1.74%)</title><rect x="481.1" y="611.0" width="20.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="484.1" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.48%)</title><rect x="501.7" y="675.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="504.7" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.29%)</title><rect x="504.0" y="659.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="507.0" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.19%)</title><rect x="505.1" y="643.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="508.1" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (19 samples, 1.84%)</title><rect x="507.4" y="675.0" width="21.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="510.4" y="686.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 0.58%)</title><rect x="522.2" y="659.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="525.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="522.2" y="643.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="525.2" y="654.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="522.2" y="627.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="525.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.48%)</title><rect x="523.4" y="643.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="526.4" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.10%)</title><rect x="529.1" y="675.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="532.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.78%)</title><rect x="530.3" y="723.0" width="9.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="533.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.78%)</title><rect x="530.3" y="707.0" width="9.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="533.3" y="718.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (8 samples, 0.78%)</title><rect x="530.3" y="691.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="533.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (156 samples, 15.12%)</title><rect x="539.4" y="723.0" width="178.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="542.4" y="734.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (156 samples, 15.12%)</title><rect x="539.4" y="707.0" width="178.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="542.4" y="718.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.58%)</title><rect x="554.3" y="691.0" width="6.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="557.3" y="702.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.58%)</title><rect x="554.3" y="675.0" width="6.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="557.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (56 samples, 5.43%)</title><rect x="561.1" y="691.0" width="64.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="564.1" y="702.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (23 samples, 2.23%)</title><rect x="582.8" y="675.0" width="26.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="585.8" y="686.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (20 samples, 1.94%)</title><rect x="586.3" y="659.0" width="22.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="589.3" y="670.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 0.97%)</title><rect x="590.9" y="643.0" width="11.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="593.9" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (10 samples, 0.97%)</title><rect x="590.9" y="627.0" width="11.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="593.9" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.97%)</title><rect x="590.9" y="611.0" width="11.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="593.9" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (10 samples, 0.97%)</title><rect x="590.9" y="595.0" width="11.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="593.9" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="590.9" y="579.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="593.9" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="590.9" y="563.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="593.9" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.10%)</title><rect x="592.0" y="579.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="595.0" y="590.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="592.0" y="563.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="595.0" y="574.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.10%)</title><rect x="592.0" y="547.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="595.0" y="558.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.10%)</title><rect x="592.0" y="531.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="595.0" y="542.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.10%)</title><rect x="592.0" y="515.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="595.0" y="526.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.68%)</title><rect x="593.1" y="579.0" width="8.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="596.1" y="590.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (2 samples, 0.19%)</title><rect x="594.3" y="563.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="597.3" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.29%)</title><rect x="596.6" y="563.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="599.6" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="597.7" y="547.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="600.7" y="558.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="598.9" y="547.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="601.9" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.10%)</title><rect x="600.0" y="563.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="603.0" y="574.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="601.1" y="579.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="604.1" y="590.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.39%)</title><rect x="602.3" y="643.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="605.3" y="654.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="606.9" y="643.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="609.9" y="654.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="608.0" y="643.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="611.0" y="654.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.10%)</title><rect x="609.1" y="675.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="612.1" y="686.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.10%)</title><rect x="609.1" y="659.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="612.1" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.10%)</title><rect x="609.1" y="643.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="612.1" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="609.1" y="627.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="612.1" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="609.1" y="611.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="612.1" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="609.1" y="595.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="612.1" y="606.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.19%)</title><rect x="610.3" y="675.0" width="2.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="613.3" y="686.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (11 samples, 1.07%)</title><rect x="612.6" y="675.0" width="12.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="615.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="625.2" y="691.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="628.2" y="702.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (8 samples, 0.78%)</title><rect x="626.3" y="691.0" width="9.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="629.3" y="702.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.10%)</title><rect x="626.3" y="675.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="629.3" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="626.3" y="659.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="629.3" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="626.3" y="643.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="629.3" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="626.3" y="627.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="629.3" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="626.3" y="611.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="629.3" y="622.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.10%)</title><rect x="626.3" y="595.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="629.3" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.68%)</title><rect x="627.4" y="675.0" width="8.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="630.4" y="686.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.68%)</title><rect x="627.4" y="659.0" width="8.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="630.4" y="670.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (72 samples, 6.98%)</title><rect x="635.4" y="691.0" width="82.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="638.4" y="702.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (69 samples, 6.69%)</title><rect x="638.9" y="675.0" width="78.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="641.9" y="686.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (23 samples, 2.23%)</title><rect x="638.9" y="659.0" width="26.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="641.9" y="670.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (23 samples, 2.23%)</title><rect x="638.9" y="643.0" width="26.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="641.9" y="654.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (12 samples, 1.16%)</title><rect x="651.5" y="627.0" width="13.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="654.5" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (12 samples, 1.16%)</title><rect x="651.5" y="611.0" width="13.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="654.5" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (12 samples, 1.16%)</title><rect x="651.5" y="595.0" width="13.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="654.5" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.48%)</title><rect x="665.2" y="659.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="668.2" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.48%)</title><rect x="665.2" y="643.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="668.2" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.48%)</title><rect x="665.2" y="627.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="668.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.39%)</title><rect x="666.3" y="611.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="669.3" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (41 samples, 3.97%)</title><rect x="670.9" y="659.0" width="46.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="673.9" y="670.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (38 samples, 3.68%)</title><rect x="674.3" y="643.0" width="43.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="677.3" y="654.0">java..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.10%)</title><rect x="675.5" y="627.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="678.5" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.39%)</title><rect x="676.6" y="627.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="679.6" y="638.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.39%)</title><rect x="676.6" y="611.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="679.6" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (32 samples, 3.10%)</title><rect x="681.2" y="627.0" width="36.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="684.2" y="638.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.newNode (6 samples, 0.58%)</title><rect x="707.5" y="611.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="710.5" y="622.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.29%)</title><rect x="714.3" y="611.0" width="3.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="717.3" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (33 samples, 3.20%)</title><rect x="717.8" y="723.0" width="37.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="720.8" y="734.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (33 samples, 3.20%)</title><rect x="717.8" y="707.0" width="37.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="720.8" y="718.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1699342677.process (14 samples, 1.36%)</title><rect x="720.1" y="691.0" width="16.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="723.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (14 samples, 1.36%)</title><rect x="720.1" y="675.0" width="16.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="723.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (11 samples, 1.07%)</title><rect x="721.2" y="659.0" width="12.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="724.2" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.19%)</title><rect x="722.3" y="643.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="725.3" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.19%)</title><rect x="722.3" y="627.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="725.3" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.19%)</title><rect x="722.3" y="611.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="725.3" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.19%)</title><rect x="722.3" y="595.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="725.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.10%)</title><rect x="723.5" y="579.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="726.5" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (4 samples, 0.39%)</title><rect x="724.6" y="643.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="727.6" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.29%)</title><rect x="725.8" y="627.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="728.8" y="638.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.19%)</title><rect x="726.9" y="611.0" width="2.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="729.9" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.39%)</title><rect x="729.2" y="643.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="732.2" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.19%)</title><rect x="733.8" y="659.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="736.8" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="734.9" y="643.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="737.9" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="734.9" y="627.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="737.9" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="734.9" y="611.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="737.9" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="736.1" y="691.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="739.1" y="702.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.10%)</title><rect x="736.1" y="675.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="739.1" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (6 samples, 0.58%)</title><rect x="737.2" y="691.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="740.2" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (6 samples, 0.58%)</title><rect x="737.2" y="675.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="740.2" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/47897999.get$Lambda (6 samples, 0.58%)</title><rect x="737.2" y="659.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="740.2" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/47897999.&lt;init&gt; (6 samples, 0.58%)</title><rect x="737.2" y="643.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="740.2" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.58%)</title><rect x="744.1" y="691.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="747.1" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.58%)</title><rect x="744.1" y="675.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="747.1" y="686.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.29%)</title><rect x="744.1" y="659.0" width="3.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="747.1" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.29%)</title><rect x="747.5" y="659.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="750.5" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.10%)</title><rect x="750.9" y="691.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="753.9" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.29%)</title><rect x="752.1" y="691.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="755.1" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="754.4" y="675.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="757.4" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="754.4" y="659.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="757.4" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="754.4" y="643.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="757.4" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.10%)</title><rect x="755.5" y="723.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="758.5" y="734.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.10%)</title><rect x="755.5" y="707.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="758.5" y="718.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.10%)</title><rect x="755.5" y="691.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="758.5" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="755.5" y="675.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="758.5" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="755.5" y="659.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="758.5" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="755.5" y="643.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="758.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.48%)</title><rect x="756.6" y="723.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="759.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.48%)</title><rect x="756.6" y="707.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="759.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.39%)</title><rect x="757.8" y="691.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="760.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$267/371540559.accept (4 samples, 0.39%)</title><rect x="757.8" y="675.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="760.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (4 samples, 0.39%)</title><rect x="757.8" y="659.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="760.8" y="670.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (4 samples, 0.39%)</title><rect x="757.8" y="643.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="760.8" y="654.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (4 samples, 0.39%)</title><rect x="757.8" y="627.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="760.8" y="638.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.10%)</title><rect x="761.2" y="611.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="764.2" y="622.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="761.2" y="595.0" width="1.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="764.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.45%)</title><rect x="762.4" y="739.0" width="17.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="765.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (15 samples, 1.45%)</title><rect x="762.4" y="723.0" width="17.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="765.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 1.26%)</title><rect x="764.7" y="707.0" width="14.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="767.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/1035025263.accept (13 samples, 1.26%)</title><rect x="764.7" y="691.0" width="14.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="767.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (13 samples, 1.26%)</title><rect x="764.7" y="675.0" width="14.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="767.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$259/203926718.complete (13 samples, 1.26%)</title><rect x="764.7" y="659.0" width="14.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="767.7" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (13 samples, 1.26%)</title><rect x="764.7" y="643.0" width="14.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="767.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (13 samples, 1.26%)</title><rect x="764.7" y="627.0" width="14.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="767.7" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 1.26%)</title><rect x="764.7" y="611.0" width="14.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="767.7" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 1.26%)</title><rect x="764.7" y="595.0" width="14.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="767.7" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (13 samples, 1.26%)</title><rect x="764.7" y="579.0" width="14.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="767.7" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.68%)</title><rect x="779.5" y="739.0" width="8.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="782.5" y="750.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.68%)</title><rect x="779.5" y="723.0" width="8.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="782.5" y="734.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="787.5" y="739.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="790.5" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (12 samples, 1.16%)</title><rect x="788.7" y="755.0" width="13.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="791.7" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.87%)</title><rect x="792.1" y="739.0" width="10.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="795.1" y="750.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.87%)</title><rect x="792.1" y="723.0" width="10.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="795.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.68%)</title><rect x="802.4" y="803.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="805.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.68%)</title><rect x="802.4" y="787.0" width="8.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="805.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.68%)</title><rect x="802.4" y="771.0" width="8.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="805.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.68%)</title><rect x="802.4" y="755.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="805.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (225 samples, 21.80%)</title><rect x="810.4" y="803.0" width="257.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="813.4" y="814.0">java/util/concurrent/ThreadPoolExe..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (222 samples, 21.51%)</title><rect x="812.7" y="787.0" width="253.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="815.7" y="798.0">java/util/concurrent/LinkedBlockin..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (8 samples, 0.78%)</title><rect x="812.7" y="771.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="815.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (184 samples, 17.83%)</title><rect x="821.8" y="771.0" width="210.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="824.8" y="782.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (9 samples, 0.87%)</title><rect x="836.7" y="755.0" width="10.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="839.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (7 samples, 0.68%)</title><rect x="839.0" y="739.0" width="8.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="842.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (7 samples, 0.68%)</title><rect x="839.0" y="723.0" width="8.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="842.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (7 samples, 0.68%)</title><rect x="839.0" y="707.0" width="8.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="842.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.10%)</title><rect x="847.0" y="755.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="850.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.10%)</title><rect x="847.0" y="739.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="850.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (3 samples, 0.29%)</title><rect x="848.1" y="755.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="851.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (3 samples, 0.29%)</title><rect x="848.1" y="739.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="851.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (158 samples, 15.31%)</title><rect x="851.6" y="755.0" width="180.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="854.6" y="766.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (158 samples, 15.31%)</title><rect x="851.6" y="739.0" width="180.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="854.6" y="750.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="863.0" y="723.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="866.0" y="734.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.19%)</title><rect x="864.1" y="723.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="867.1" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="866.4" y="723.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="869.4" y="734.0"></text>
</g>
<g>
<title>Unsafe_Park (141 samples, 13.66%)</title><rect x="867.6" y="723.0" width="161.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="870.6" y="734.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.19%)</title><rect x="874.4" y="707.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="877.4" y="718.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="876.7" y="707.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="879.7" y="718.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (25 samples, 2.42%)</title><rect x="877.8" y="707.0" width="28.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="880.8" y="718.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (11 samples, 1.07%)</title><rect x="883.6" y="691.0" width="12.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="886.6" y="702.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.58%)</title><rect x="887.0" y="675.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="890.0" y="686.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (6 samples, 0.58%)</title><rect x="887.0" y="659.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="890.0" y="670.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="893.9" y="675.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="896.9" y="686.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="895.0" y="675.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="898.0" y="686.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="896.1" y="691.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="899.1" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.68%)</title><rect x="897.3" y="691.0" width="8.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="900.3" y="702.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="905.3" y="691.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="908.3" y="702.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="906.4" y="707.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="909.4" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.10%)</title><rect x="907.6" y="707.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="910.6" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="908.7" y="707.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="911.7" y="718.0"></text>
</g>
<g>
<title>__lll_lock_wait (6 samples, 0.58%)</title><rect x="909.9" y="707.0" width="6.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="912.9" y="718.0"></text>
</g>
<g>
<title>__lll_unlock_wake (30 samples, 2.91%)</title><rect x="916.7" y="707.0" width="34.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="919.7" y="718.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (47 samples, 4.55%)</title><rect x="951.0" y="707.0" width="53.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="954.0" y="718.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.19%)</title><rect x="1004.8" y="707.0" width="2.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1007.8" y="718.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.10%)</title><rect x="1007.1" y="707.0" width="1.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1010.1" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.19%)</title><rect x="1008.2" y="707.0" width="2.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1011.2" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.39%)</title><rect x="1010.5" y="707.0" width="4.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1013.5" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.48%)</title><rect x="1015.1" y="707.0" width="5.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1018.1" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.19%)</title><rect x="1020.8" y="707.0" width="2.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1023.8" y="718.0"></text>
</g>
<g>
<title>_init (1 samples, 0.10%)</title><rect x="1023.1" y="707.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1026.1" y="718.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.10%)</title><rect x="1024.2" y="707.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1027.2" y="718.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="1025.3" y="707.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1028.3" y="718.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="1026.5" y="707.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1029.5" y="718.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="1027.6" y="707.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1030.6" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.19%)</title><rect x="1028.8" y="723.0" width="2.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1031.8" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="1031.1" y="723.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1034.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (27 samples, 2.62%)</title><rect x="1032.2" y="771.0" width="30.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1035.2" y="782.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (27 samples, 2.62%)</title><rect x="1032.2" y="755.0" width="30.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1035.2" y="766.0">ja..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (26 samples, 2.52%)</title><rect x="1032.2" y="739.0" width="29.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1035.2" y="750.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.10%)</title><rect x="1061.9" y="739.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1064.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.10%)</title><rect x="1061.9" y="723.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1064.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.10%)</title><rect x="1061.9" y="707.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1064.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.29%)</title><rect x="1063.1" y="771.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1066.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.29%)</title><rect x="1063.1" y="755.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1066.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (1 samples, 0.10%)</title><rect x="1066.5" y="787.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1069.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="1067.7" y="851.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1070.7" y="862.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.10%)</title><rect x="1067.7" y="835.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1070.7" y="846.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.10%)</title><rect x="1067.7" y="819.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1070.7" y="830.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.10%)</title><rect x="1067.7" y="803.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1070.7" y="814.0"></text>
</g>
<g>
<title>start_thread (106 samples, 10.27%)</title><rect x="1068.8" y="851.0" width="121.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1071.8" y="862.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (106 samples, 10.27%)</title><rect x="1068.8" y="835.0" width="121.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1071.8" y="846.0">java_start(Thre..</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 2.03%)</title><rect x="1068.8" y="819.0" width="24.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1071.8" y="830.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.29%)</title><rect x="1068.8" y="803.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1071.8" y="814.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.29%)</title><rect x="1068.8" y="787.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1071.8" y="798.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.10%)</title><rect x="1068.8" y="771.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1071.8" y="782.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.10%)</title><rect x="1069.9" y="771.0" width="1.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1072.9" y="782.0"></text>
</g>
<g>
<title>__sched_yield (1 samples, 0.10%)</title><rect x="1071.1" y="771.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1074.1" y="782.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (18 samples, 1.74%)</title><rect x="1072.2" y="803.0" width="20.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1075.2" y="814.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 0.78%)</title><rect x="1072.2" y="787.0" width="9.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1075.2" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.10%)</title><rect x="1072.2" y="771.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1075.2" y="782.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.58%)</title><rect x="1073.4" y="771.0" width="6.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1076.4" y="782.0"></text>
</g>
<g>
<title>__sched_yield (1 samples, 0.10%)</title><rect x="1080.2" y="771.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1083.2" y="782.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.19%)</title><rect x="1081.4" y="787.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1084.4" y="798.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.10%)</title><rect x="1081.4" y="771.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1084.4" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.10%)</title><rect x="1081.4" y="755.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.4" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.10%)</title><rect x="1082.5" y="771.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1085.5" y="782.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.10%)</title><rect x="1082.5" y="755.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1085.5" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (8 samples, 0.78%)</title><rect x="1083.7" y="787.0" width="9.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1086.7" y="798.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (8 samples, 0.78%)</title><rect x="1083.7" y="771.0" width="9.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1086.7" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (8 samples, 0.78%)</title><rect x="1083.7" y="755.0" width="9.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1086.7" y="766.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (8 samples, 0.78%)</title><rect x="1083.7" y="739.0" width="9.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1086.7" y="750.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.68%)</title><rect x="1084.8" y="723.0" width="8.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1087.8" y="734.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.68%)</title><rect x="1084.8" y="707.0" width="8.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1087.8" y="718.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.48%)</title><rect x="1087.1" y="691.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.1" y="702.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.19%)</title><rect x="1087.1" y="675.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1090.1" y="686.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.10%)</title><rect x="1089.4" y="675.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1092.4" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.10%)</title><rect x="1090.5" y="675.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1093.5" y="686.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.10%)</title><rect x="1091.7" y="675.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.7" y="686.0"></text>
</g>
<g>
<title>JavaThread::run() (83 samples, 8.04%)</title><rect x="1092.8" y="819.0" width="94.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.8" y="830.0">JavaThread:..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (83 samples, 8.04%)</title><rect x="1092.8" y="803.0" width="94.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1095.8" y="814.0">JavaThread:..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (83 samples, 8.04%)</title><rect x="1092.8" y="787.0" width="94.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.8" y="798.0">CompileBrok..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (81 samples, 7.85%)</title><rect x="1092.8" y="771.0" width="92.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1095.8" y="782.0">CompileBrok..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (80 samples, 7.75%)</title><rect x="1092.8" y="755.0" width="91.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1095.8" y="766.0">C2Compiler:..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (80 samples, 7.75%)</title><rect x="1092.8" y="739.0" width="91.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1095.8" y="750.0">Compile::Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (42 samples, 4.07%)</title><rect x="1092.8" y="723.0" width="48.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1095.8" y="734.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.10%)</title><rect x="1092.8" y="707.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.8" y="718.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.10%)</title><rect x="1092.8" y="691.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.8" y="702.0"></text>
</g>
<g>
<title>OopFlow::make(Arena*, int, Compile*) (1 samples, 0.10%)</title><rect x="1092.8" y="675.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.8" y="686.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.10%)</title><rect x="1094.0" y="707.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1097.0" y="718.0"></text>
</g>
<g>
<title>jmpConNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.10%)</title><rect x="1094.0" y="691.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.0" y="702.0"></text>
</g>
<g>
<title>Assembler::jcc(Assembler::Condition, Label&amp;, bool) (1 samples, 0.10%)</title><rect x="1094.0" y="675.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.0" y="686.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.39%)</title><rect x="1095.1" y="707.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.1" y="718.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.10%)</title><rect x="1095.1" y="691.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.1" y="702.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="1095.1" y="675.0" width="1.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1098.1" y="686.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.29%)</title><rect x="1096.2" y="691.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1099.2" y="702.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.10%)</title><rect x="1098.5" y="675.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1101.5" y="686.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1098.5" y="659.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1101.5" y="670.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1098.5" y="643.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1101.5" y="654.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.10%)</title><rect x="1098.5" y="627.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1101.5" y="638.0"></text>
</g>
<g>
<title>State::_sub_Op_RegP(Node const*) (1 samples, 0.10%)</title><rect x="1098.5" y="611.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1101.5" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.19%)</title><rect x="1099.7" y="707.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1102.7" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.19%)</title><rect x="1099.7" y="691.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1102.7" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1099.7" y="675.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.7" y="686.0"></text>
</g>
<g>
<title>subI_rRegNode::ideal_Opcode() const (1 samples, 0.10%)</title><rect x="1100.8" y="675.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1103.8" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::fixup_flow() (1 samples, 0.10%)</title><rect x="1102.0" y="707.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1105.0" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (33 samples, 3.20%)</title><rect x="1103.1" y="707.0" width="37.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.1" y="718.0">Pha..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.10%)</title><rect x="1103.1" y="691.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.1" y="702.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.10%)</title><rect x="1103.1" y="675.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.1" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.10%)</title><rect x="1104.2" y="691.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1107.2" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.10%)</title><rect x="1104.2" y="675.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.2" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.19%)</title><rect x="1105.4" y="691.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.4" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.19%)</title><rect x="1105.4" y="675.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1108.4" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.19%)</title><rect x="1105.4" y="659.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.4" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.58%)</title><rect x="1107.7" y="691.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.10%)</title><rect x="1112.2" y="675.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1115.2" y="686.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.10%)</title><rect x="1113.4" y="675.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.4" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 0.87%)</title><rect x="1114.5" y="691.0" width="10.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1117.5" y="702.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.10%)</title><rect x="1122.5" y="675.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.5" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.10%)</title><rect x="1123.7" y="675.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.7" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1123.7" y="659.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1126.7" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.10%)</title><rect x="1124.8" y="691.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.8" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.10%)</title><rect x="1124.8" y="675.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.8" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1124.8" y="659.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.8" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (8 samples, 0.78%)</title><rect x="1126.0" y="691.0" width="9.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.0" y="702.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.10%)</title><rect x="1130.5" y="675.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1133.5" y="686.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.10%)</title><rect x="1131.7" y="675.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.7" y="686.0"></text>
</g>
<g>
<title>cmpOpOper::num_edges() const (1 samples, 0.10%)</title><rect x="1132.8" y="675.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.8" y="686.0"></text>
</g>
<g>
<title>loadConI0Node::bottom_type() const (1 samples, 0.10%)</title><rect x="1134.0" y="675.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.0" y="686.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1134.0" y="659.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.0" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.10%)</title><rect x="1135.1" y="691.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.10%)</title><rect x="1135.1" y="675.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.1" y="686.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.19%)</title><rect x="1136.3" y="691.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.3" y="702.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.19%)</title><rect x="1136.3" y="675.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.3" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.10%)</title><rect x="1137.4" y="659.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.4" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.19%)</title><rect x="1138.5" y="691.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1141.5" y="702.0"></text>
</g>
<g>
<title>Compile::Optimize() (25 samples, 2.42%)</title><rect x="1140.8" y="723.0" width="28.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.8" y="734.0">Co..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.10%)</title><rect x="1140.8" y="707.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.8" y="718.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.10%)</title><rect x="1140.8" y="691.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.8" y="702.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.10%)</title><rect x="1142.0" y="707.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.0" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1142.0" y="691.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.0" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1142.0" y="675.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.0" y="686.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1142.0" y="659.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.0" y="670.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1142.0" y="643.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.0" y="654.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1142.0" y="627.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.0" y="638.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1142.0" y="611.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.10%)</title><rect x="1143.1" y="707.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.1" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.10%)</title><rect x="1143.1" y="691.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.1" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1143.1" y="675.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.1" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.10%)</title><rect x="1143.1" y="659.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.1" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (13 samples, 1.26%)</title><rect x="1144.3" y="707.0" width="14.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.3" y="718.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.10%)</title><rect x="1144.3" y="691.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.3" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.10%)</title><rect x="1145.4" y="691.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.4" y="702.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.10%)</title><rect x="1145.4" y="675.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.4" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.29%)</title><rect x="1146.6" y="691.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.6" y="702.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.10%)</title><rect x="1147.7" y="675.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.7" y="686.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.10%)</title><rect x="1148.8" y="675.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.8" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.39%)</title><rect x="1150.0" y="691.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.0" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 0.29%)</title><rect x="1151.1" y="675.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.1" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.19%)</title><rect x="1152.3" y="659.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.3" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.10%)</title><rect x="1153.4" y="643.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.4" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1153.4" y="627.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.4" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.19%)</title><rect x="1154.6" y="691.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.6" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.19%)</title><rect x="1154.6" y="675.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.6" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.10%)</title><rect x="1154.6" y="659.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.6" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1154.6" y="643.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.6" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1155.7" y="659.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.7" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.19%)</title><rect x="1156.8" y="691.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.8" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.19%)</title><rect x="1156.8" y="675.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.8" y="686.0"></text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1156.8" y="659.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.8" y="670.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1156.8" y="643.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.8" y="654.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.10%)</title><rect x="1156.8" y="627.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.8" y="638.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.10%)</title><rect x="1156.8" y="611.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.8" y="622.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1158.0" y="659.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.0" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1158.0" y="643.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.0" y="654.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.10%)</title><rect x="1158.0" y="627.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.0" y="638.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.10%)</title><rect x="1158.0" y="611.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.0" y="622.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.10%)</title><rect x="1158.0" y="595.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.0" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 0.78%)</title><rect x="1159.1" y="707.0" width="9.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.1" y="718.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1159.1" y="691.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.1" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 0.68%)</title><rect x="1160.3" y="691.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.3" y="702.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1160.3" y="675.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.3" y="686.0"></text>
</g>
<g>
<title>IfNode::up_one_dom(Node*, bool) (1 samples, 0.10%)</title><rect x="1160.3" y="659.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.3" y="670.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.10%)</title><rect x="1161.4" y="675.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.4" y="686.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.10%)</title><rect x="1161.4" y="659.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.4" y="670.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.10%)</title><rect x="1161.4" y="643.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.4" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1162.6" y="675.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.6" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1162.6" y="659.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.6" y="670.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.19%)</title><rect x="1163.7" y="675.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.7" y="686.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.10%)</title><rect x="1163.7" y="659.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.7" y="670.0"></text>
</g>
<g>
<title>split_once(PhaseIterGVN*, Node*, Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1164.8" y="659.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1167.8" y="670.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1166.0" y="675.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.0" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1166.0" y="659.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.0" y="670.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.10%)</title><rect x="1166.0" y="643.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.0" y="654.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.10%)</title><rect x="1166.0" y="627.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.0" y="638.0"></text>
</g>
<g>
<title>SafePointNode::Opcode() const (1 samples, 0.10%)</title><rect x="1167.1" y="675.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.1" y="686.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="1168.3" y="707.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1171.3" y="718.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.10%)</title><rect x="1169.4" y="723.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.4" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 1.07%)</title><rect x="1170.6" y="723.0" width="12.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.6" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 1.07%)</title><rect x="1170.6" y="707.0" width="12.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 1.07%)</title><rect x="1170.6" y="691.0" width="12.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 1.07%)</title><rect x="1170.6" y="675.0" width="12.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.10%)</title><rect x="1170.6" y="659.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.6" y="670.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.10%)</title><rect x="1170.6" y="643.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.6" y="654.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.10%)</title><rect x="1170.6" y="627.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.6" y="638.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.10%)</title><rect x="1170.6" y="611.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.6" y="622.0"></text>
</g>
<g>
<title>ProjNode::bottom_type() const (1 samples, 0.10%)</title><rect x="1170.6" y="595.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.97%)</title><rect x="1171.7" y="659.0" width="11.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.7" y="670.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.10%)</title><rect x="1171.7" y="643.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.7" y="654.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.10%)</title><rect x="1171.7" y="627.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.7" y="638.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1171.7" y="611.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.87%)</title><rect x="1172.8" y="643.0" width="10.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.8" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.58%)</title><rect x="1172.8" y="627.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.8" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.58%)</title><rect x="1172.8" y="611.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.58%)</title><rect x="1172.8" y="595.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.58%)</title><rect x="1172.8" y="579.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.58%)</title><rect x="1172.8" y="563.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.58%)</title><rect x="1172.8" y="547.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.8" y="558.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1172.8" y="531.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.8" y="542.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1172.8" y="515.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.8" y="526.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1172.8" y="499.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.8" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1172.8" y="483.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.8" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1172.8" y="467.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.8" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1172.8" y="451.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.8" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1172.8" y="435.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.8" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1172.8" y="419.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.8" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.10%)</title><rect x="1172.8" y="403.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.8" y="414.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1172.8" y="387.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.8" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1172.8" y="371.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.8" y="382.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1172.8" y="355.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.8" y="366.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1172.8" y="339.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.8" y="350.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.10%)</title><rect x="1172.8" y="323.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.8" y="334.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.10%)</title><rect x="1172.8" y="307.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.8" y="318.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.10%)</title><rect x="1172.8" y="291.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.8" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.10%)</title><rect x="1172.8" y="275.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.8" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.10%)</title><rect x="1172.8" y="259.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.8" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.48%)</title><rect x="1174.0" y="531.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.48%)</title><rect x="1174.0" y="515.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.48%)</title><rect x="1174.0" y="499.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.0" y="510.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.10%)</title><rect x="1174.0" y="483.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.0" y="494.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.10%)</title><rect x="1174.0" y="467.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.0" y="478.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.10%)</title><rect x="1174.0" y="451.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.39%)</title><rect x="1175.1" y="483.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.39%)</title><rect x="1175.1" y="467.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.39%)</title><rect x="1175.1" y="451.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.1" y="462.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1175.1" y="435.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.1" y="446.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1175.1" y="419.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.1" y="430.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1175.1" y="403.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.1" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1175.1" y="387.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.1" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1175.1" y="371.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.1" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1175.1" y="355.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.1" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1175.1" y="339.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.1" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1175.1" y="323.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.1" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.10%)</title><rect x="1175.1" y="307.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.1" y="318.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1175.1" y="291.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.1" y="302.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1175.1" y="275.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.1" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1175.1" y="259.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.1" y="270.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1175.1" y="243.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.1" y="254.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1175.1" y="227.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.1" y="238.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1175.1" y="211.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.1" y="222.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.10%)</title><rect x="1175.1" y="195.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.1" y="206.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.10%)</title><rect x="1175.1" y="179.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.1" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.29%)</title><rect x="1176.3" y="435.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.29%)</title><rect x="1176.3" y="419.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.29%)</title><rect x="1176.3" y="403.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.29%)</title><rect x="1176.3" y="387.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.29%)</title><rect x="1176.3" y="371.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.29%)</title><rect x="1176.3" y="355.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.3" y="366.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1176.3" y="339.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="350.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_access(bool, bool, BasicType, bool) (1 samples, 0.10%)</title><rect x="1176.3" y="323.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="334.0"></text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.10%)</title><rect x="1176.3" y="307.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.3" y="318.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.10%)</title><rect x="1176.3" y="291.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.3" y="302.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.10%)</title><rect x="1176.3" y="275.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.3" y="286.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.10%)</title><rect x="1176.3" y="259.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.3" y="270.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.10%)</title><rect x="1176.3" y="243.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.3" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1177.4" y="339.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.4" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1177.4" y="323.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1177.4" y="307.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1177.4" y="291.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1177.4" y="275.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1177.4" y="259.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.4" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1177.4" y="243.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.4" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1177.4" y="227.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1177.4" y="211.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1177.4" y="195.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1177.4" y="179.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1177.4" y="163.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.4" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1177.4" y="147.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.4" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1177.4" y="131.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1177.4" y="115.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1177.4" y="99.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1177.4" y="83.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.4" y="94.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1177.4" y="67.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="78.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1177.4" y="51.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.4" y="62.0"></text>
</g>
<g>
<title>ciBytecodeStream::has_method_type() (1 samples, 0.10%)</title><rect x="1177.4" y="35.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.4" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.6" y="339.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.6" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.6" y="323.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.6" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1178.6" y="307.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1178.6" y="291.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1178.6" y="275.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1178.6" y="259.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1178.6" y="243.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.6" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.6" y="227.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.6" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1178.6" y="211.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1178.6" y="195.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1178.6" y="179.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1178.6" y="163.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1178.6" y="147.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1178.6" y="131.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.6" y="142.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.10%)</title><rect x="1178.6" y="115.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.6" y="126.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.10%)</title><rect x="1178.6" y="99.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.6" y="110.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.10%)</title><rect x="1178.6" y="83.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.6" y="94.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1178.6" y="67.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="78.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.29%)</title><rect x="1179.7" y="627.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.7" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.29%)</title><rect x="1179.7" y="611.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.29%)</title><rect x="1179.7" y="595.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.29%)</title><rect x="1179.7" y="579.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.29%)</title><rect x="1179.7" y="563.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.29%)</title><rect x="1179.7" y="547.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.29%)</title><rect x="1179.7" y="531.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.29%)</title><rect x="1179.7" y="515.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.7" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.29%)</title><rect x="1179.7" y="499.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1179.7" y="483.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1179.7" y="467.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1179.7" y="451.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1179.7" y="435.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1179.7" y="419.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1179.7" y="403.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1179.7" y="387.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1179.7" y="371.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1179.7" y="355.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.19%)</title><rect x="1179.7" y="339.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1179.7" y="323.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.7" y="334.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.10%)</title><rect x="1179.7" y="307.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.7" y="318.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1179.7" y="291.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.7" y="302.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1179.7" y="275.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.7" y="286.0"></text>
</g>
<g>
<title>TypeInstPtr::xdual() const (1 samples, 0.10%)</title><rect x="1179.7" y="259.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.7" y="270.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_instance_klass() const (1 samples, 0.10%)</title><rect x="1179.7" y="243.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1180.9" y="323.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.9" y="334.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.10%)</title><rect x="1180.9" y="307.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="318.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.10%)</title><rect x="1180.9" y="291.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="302.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.10%)</title><rect x="1180.9" y="275.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="286.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.10%)</title><rect x="1180.9" y="259.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="270.0"></text>
</g>
<g>
<title>LoadNode::LoadNode(Node*, Node*, Node*, TypePtr const*, Type const*, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.10%)</title><rect x="1180.9" y="243.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="254.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1180.9" y="227.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.10%)</title><rect x="1182.0" y="483.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.0" y="494.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.10%)</title><rect x="1182.0" y="467.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.0" y="478.0"></text>
</g>
<g>
<title>MemBarNode::make(Compile*, int, int, Node*) (1 samples, 0.10%)</title><rect x="1182.0" y="451.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.0" y="462.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.10%)</title><rect x="1183.1" y="723.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.1" y="734.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.10%)</title><rect x="1183.1" y="707.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.1" y="718.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1184.3" y="755.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.3" y="766.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.10%)</title><rect x="1184.3" y="739.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.3" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.10%)</title><rect x="1184.3" y="723.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.3" y="734.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.10%)</title><rect x="1184.3" y="707.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.3" y="718.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.10%)</title><rect x="1184.3" y="691.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.3" y="702.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1184.3" y="675.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.3" y="686.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.10%)</title><rect x="1184.3" y="659.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.3" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.10%)</title><rect x="1184.3" y="643.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.3" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.10%)</title><rect x="1184.3" y="627.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.3" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.10%)</title><rect x="1184.3" y="611.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.3" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1184.3" y="595.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.3" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1184.3" y="579.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.3" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1184.3" y="563.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.3" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.10%)</title><rect x="1184.3" y="547.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.3" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.10%)</title><rect x="1184.3" y="531.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1184.3" y="515.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.3" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1184.3" y="499.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="510.0"></text>
</g>
<g>
<title>ciMethod::should_not_inline() (1 samples, 0.10%)</title><rect x="1184.3" y="483.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.3" y="494.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.19%)</title><rect x="1185.4" y="771.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.4" y="782.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.19%)</title><rect x="1185.4" y="755.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.4" y="766.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.19%)</title><rect x="1185.4" y="739.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.4" y="750.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (2 samples, 0.19%)</title><rect x="1185.4" y="723.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.4" y="734.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (2 samples, 0.19%)</title><rect x="1185.4" y="707.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.4" y="718.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="1185.4" y="691.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.4" y="702.0"></text>
</g>
<g>
<title>CompiledIC::ic_destination() const (1 samples, 0.10%)</title><rect x="1186.6" y="691.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.6" y="702.0"></text>
</g>
<g>
<title>InlineCacheBuffer::contains(unsigned char*) (1 samples, 0.10%)</title><rect x="1186.6" y="675.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.6" y="686.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.19%)</title><rect x="1187.7" y="819.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.7" y="830.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.19%)</title><rect x="1187.7" y="803.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.7" y="814.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.19%)</title><rect x="1187.7" y="787.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.7" y="798.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.19%)</title><rect x="1187.7" y="771.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.7" y="782.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.19%)</title><rect x="1187.7" y="755.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.7" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.19%)</title><rect x="1187.7" y="739.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.7" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.10%)</title><rect x="1188.9" y="723.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.9" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.10%)</title><rect x="1188.9" y="707.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.9" y="718.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, GCTimer*, GCId) (1 samples, 0.10%)</title><rect x="1188.9" y="691.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.9" y="702.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_reflist(DiscoveredList*, ReferencePolicy*, bool, BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*) (1 samples, 0.10%)</title><rect x="1188.9" y="675.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.9" y="686.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_phase1(DiscoveredList&amp;, ReferencePolicy*, BoolObjectClosure*, OopClosure*, VoidClosure*) (1 samples, 0.10%)</title><rect x="1188.9" y="659.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.9" y="670.0"></text>
</g>
</g>
</svg>
