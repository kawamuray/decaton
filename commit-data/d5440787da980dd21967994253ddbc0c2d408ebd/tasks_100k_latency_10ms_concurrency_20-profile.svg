<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1654" onload="init(evt)" viewBox="0 0 1200 1654" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1637"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1637"> </text>
<g id="frames">
<g>
<title>all (254 samples, 100.00%)</title><rect x="10.0" y="1603.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1614.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (18 samples, 7.09%)</title><rect x="10.0" y="1587.0" width="83.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1598.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.39%)</title><rect x="10.0" y="1571.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.39%)</title><rect x="10.0" y="1555.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.39%)</title><rect x="10.0" y="1539.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.39%)</title><rect x="10.0" y="1523.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.39%)</title><rect x="10.0" y="1507.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.39%)</title><rect x="10.0" y="1491.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.39%)</title><rect x="10.0" y="1475.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.39%)</title><rect x="10.0" y="1459.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.39%)</title><rect x="10.0" y="1443.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.39%)</title><rect x="10.0" y="1427.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.39%)</title><rect x="10.0" y="1411.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.39%)</title><rect x="10.0" y="1395.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.39%)</title><rect x="10.0" y="1379.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.39%)</title><rect x="10.0" y="1363.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.39%)</title><rect x="10.0" y="1347.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.39%)</title><rect x="10.0" y="1331.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.39%)</title><rect x="10.0" y="1315.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.sizeOf (1 samples, 0.39%)</title><rect x="10.0" y="1299.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.39%)</title><rect x="10.0" y="1283.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.sizeOf (1 samples, 0.39%)</title><rect x="10.0" y="1267.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.39%)</title><rect x="10.0" y="1251.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/TaggedFields.sizeOf (1 samples, 0.39%)</title><rect x="10.0" y="1235.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.hasNext (1 samples, 0.39%)</title><rect x="10.0" y="1219.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.39%)</title><rect x="10.0" y="1203.0" width="4.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.39%)</title><rect x="10.0" y="1187.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.39%)</title><rect x="10.0" y="1171.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.39%)</title><rect x="10.0" y="1155.0" width="4.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.39%)</title><rect x="10.0" y="1139.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.39%)</title><rect x="10.0" y="1123.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConstantPool::resolve_string_constants_impl(constantPoolHandle, Thread*) (1 samples, 0.39%)</title><rect x="10.0" y="1107.0" width="4.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>StringTable::intern(Symbol*, Thread*) (1 samples, 0.39%)</title><rect x="10.0" y="1091.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>StringTable::intern(Handle, unsigned short*, int, Thread*) (1 samples, 0.39%)</title><rect x="10.0" y="1075.0" width="4.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (17 samples, 6.69%)</title><rect x="14.6" y="1571.0" width="79.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.6" y="1582.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.79%)</title><rect x="14.6" y="1555.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.6" y="1566.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.79%)</title><rect x="14.6" y="1539.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.6" y="1550.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1803073465.accept (2 samples, 0.79%)</title><rect x="14.6" y="1523.0" width="9.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.6" y="1534.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.79%)</title><rect x="14.6" y="1507.0" width="9.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.6" y="1518.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.79%)</title><rect x="14.6" y="1491.0" width="9.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.6" y="1502.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.79%)</title><rect x="14.6" y="1475.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.6" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.79%)</title><rect x="23.9" y="1555.0" width="9.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.9" y="1566.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSite (1 samples, 0.39%)</title><rect x="23.9" y="1539.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.9" y="1550.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSiteImpl (1 samples, 0.39%)</title><rect x="23.9" y="1523.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="26.9" y="1534.0"></text>
</g>
<g>
<title>java/lang/invoke/CallSite.makeSite (1 samples, 0.39%)</title><rect x="23.9" y="1507.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.9" y="1518.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1990451863.invoke_MT (1 samples, 0.39%)</title><rect x="23.9" y="1491.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.9" y="1502.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$BMH/1932039154.reinvoke (1 samples, 0.39%)</title><rect x="23.9" y="1475.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.9" y="1486.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/263025902.invokeStatic_L6_L (1 samples, 0.39%)</title><rect x="23.9" y="1459.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.9" y="1470.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaMetafactory.metafactory (1 samples, 0.39%)</title><rect x="23.9" y="1443.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.9" y="1454.0"></text>
</g>
<g>
<title>java/lang/invoke/InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.39%)</title><rect x="23.9" y="1427.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.9" y="1438.0"></text>
</g>
<g>
<title>java/lang/invoke/InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.39%)</title><rect x="23.9" y="1411.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.9" y="1422.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.defineAnonymousClass (1 samples, 0.39%)</title><rect x="23.9" y="1395.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.9" y="1406.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass (1 samples, 0.39%)</title><rect x="23.9" y="1379.0" width="4.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="26.9" y="1390.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, KlassHandle, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.39%)</title><rect x="23.9" y="1363.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="26.9" y="1374.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.39%)</title><rect x="23.9" y="1347.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="26.9" y="1358.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(instanceKlassHandle, bool, Thread*) (1 samples, 0.39%)</title><rect x="23.9" y="1331.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="26.9" y="1342.0"></text>
</g>
<g>
<title>Verifier::verify(instanceKlassHandle, Verifier::Mode, bool, Thread*) (1 samples, 0.39%)</title><rect x="23.9" y="1315.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="26.9" y="1326.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.39%)</title><rect x="23.9" y="1299.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="26.9" y="1310.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle, Thread*) (1 samples, 0.39%)</title><rect x="23.9" y="1283.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="26.9" y="1294.0"></text>
</g>
<g>
<title>StackMapFrame::set_locals_from_arg(methodHandle, VerificationType, Thread*) (1 samples, 0.39%)</title><rect x="23.9" y="1267.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="26.9" y="1278.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.39%)</title><rect x="23.9" y="1251.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="26.9" y="1262.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.39%)</title><rect x="23.9" y="1235.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="26.9" y="1246.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.39%)</title><rect x="28.6" y="1539.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.6" y="1550.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$293/66289784.accept (1 samples, 0.39%)</title><rect x="28.6" y="1523.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="31.6" y="1534.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pausePartitions$67 (1 samples, 0.39%)</title><rect x="28.6" y="1507.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.6" y="1518.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.pause (1 samples, 0.39%)</title><rect x="28.6" y="1491.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="31.6" y="1502.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 1.57%)</title><rect x="33.2" y="1555.0" width="18.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="36.2" y="1566.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1760100634.accept (4 samples, 1.57%)</title><rect x="33.2" y="1539.0" width="18.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="36.2" y="1550.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (3 samples, 1.18%)</title><rect x="37.9" y="1523.0" width="13.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.9" y="1534.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 0.39%)</title><rect x="47.2" y="1507.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="50.2" y="1518.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 0.39%)</title><rect x="47.2" y="1491.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.2" y="1502.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 0.39%)</title><rect x="47.2" y="1475.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.2" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.39%)</title><rect x="47.2" y="1459.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.2" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.39%)</title><rect x="47.2" y="1443.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.2" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.39%)</title><rect x="47.2" y="1427.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.2" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.39%)</title><rect x="47.2" y="1411.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="50.2" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.39%)</title><rect x="47.2" y="1395.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="50.2" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.39%)</title><rect x="47.2" y="1379.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="50.2" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 3.54%)</title><rect x="51.8" y="1555.0" width="41.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="54.8" y="1566.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 3.54%)</title><rect x="51.8" y="1539.0" width="41.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="54.8" y="1550.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 2.76%)</title><rect x="51.8" y="1523.0" width="32.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="54.8" y="1534.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.18%)</title><rect x="51.8" y="1507.0" width="13.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="54.8" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.18%)</title><rect x="51.8" y="1491.0" width="13.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="54.8" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.39%)</title><rect x="51.8" y="1475.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="54.8" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$260/357807340.shouldBlock (1 samples, 0.39%)</title><rect x="56.5" y="1475.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="59.5" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.39%)</title><rect x="56.5" y="1459.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="59.5" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.39%)</title><rect x="56.5" y="1443.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="59.5" y="1454.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.39%)</title><rect x="56.5" y="1427.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.5" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.39%)</title><rect x="61.1" y="1475.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.1" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.39%)</title><rect x="61.1" y="1459.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="64.1" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.57%)</title><rect x="65.7" y="1507.0" width="18.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="68.7" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.57%)</title><rect x="65.7" y="1491.0" width="18.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="68.7" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.57%)</title><rect x="65.7" y="1475.0" width="18.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="68.7" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.57%)</title><rect x="65.7" y="1459.0" width="18.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="68.7" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (4 samples, 1.57%)</title><rect x="65.7" y="1443.0" width="18.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="68.7" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.39%)</title><rect x="65.7" y="1427.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.7" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.39%)</title><rect x="65.7" y="1411.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="68.7" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$4100 (1 samples, 0.39%)</title><rect x="65.7" y="1395.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="68.7" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordTopicFetchMetrics (1 samples, 0.39%)</title><rect x="65.7" y="1379.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="68.7" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.39%)</title><rect x="65.7" y="1363.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.7" y="1374.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.39%)</title><rect x="65.7" y="1347.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="68.7" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 0.79%)</title><rect x="70.4" y="1427.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="73.4" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 0.79%)</title><rect x="70.4" y="1411.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="73.4" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 0.79%)</title><rect x="70.4" y="1395.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.4" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 0.79%)</title><rect x="70.4" y="1379.0" width="9.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="73.4" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 0.79%)</title><rect x="70.4" y="1363.0" width="9.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="73.4" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 0.79%)</title><rect x="70.4" y="1347.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="73.4" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 0.79%)</title><rect x="70.4" y="1331.0" width="9.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="73.4" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.39%)</title><rect x="79.7" y="1427.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="82.7" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.39%)</title><rect x="79.7" y="1411.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="82.7" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.39%)</title><rect x="79.7" y="1395.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="82.7" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.39%)</title><rect x="84.3" y="1523.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="87.3" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.39%)</title><rect x="84.3" y="1507.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.3" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.39%)</title><rect x="84.3" y="1491.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="87.3" y="1502.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.39%)</title><rect x="84.3" y="1475.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="87.3" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/1399062122.accept (1 samples, 0.39%)</title><rect x="84.3" y="1459.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="87.3" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.39%)</title><rect x="89.0" y="1523.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="92.0" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.39%)</title><rect x="89.0" y="1507.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="92.0" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedSends (1 samples, 0.39%)</title><rect x="89.0" y="1491.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="92.0" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.lastSent (1 samples, 0.39%)</title><rect x="89.0" y="1475.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.0" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.requestQueue (1 samples, 0.39%)</title><rect x="89.0" y="1459.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="92.0" y="1470.0"></text>
</g>
<g>
<title>java/lang/Thread.run (138 samples, 54.33%)</title><rect x="93.6" y="1587.0" width="641.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="96.6" y="1598.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (138 samples, 54.33%)</title><rect x="93.6" y="1571.0" width="641.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="96.6" y="1582.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (138 samples, 54.33%)</title><rect x="93.6" y="1555.0" width="641.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.6" y="1566.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1377692592.run (131 samples, 51.57%)</title><rect x="102.9" y="1539.0" width="608.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="105.9" y="1550.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1377692592.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (131 samples, 51.57%)</title><rect x="102.9" y="1523.0" width="608.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="105.9" y="1534.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (131 samples, 51.57%)</title><rect x="102.9" y="1507.0" width="608.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="105.9" y="1518.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (127 samples, 50.00%)</title><rect x="102.9" y="1491.0" width="590.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="105.9" y="1502.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (24 samples, 9.45%)</title><rect x="116.9" y="1475.0" width="111.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="119.9" y="1486.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (24 samples, 9.45%)</title><rect x="116.9" y="1459.0" width="111.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="119.9" y="1470.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (24 samples, 9.45%)</title><rect x="116.9" y="1443.0" width="111.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="119.9" y="1454.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (24 samples, 9.45%)</title><rect x="116.9" y="1427.0" width="111.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="119.9" y="1438.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (24 samples, 9.45%)</title><rect x="116.9" y="1411.0" width="111.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="119.9" y="1422.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (24 samples, 9.45%)</title><rect x="116.9" y="1395.0" width="111.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="119.9" y="1406.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 1.57%)</title><rect x="121.5" y="1379.0" width="18.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="124.5" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.57%)</title><rect x="121.5" y="1363.0" width="18.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="124.5" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 1.57%)</title><rect x="121.5" y="1347.0" width="18.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="124.5" y="1358.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 1.57%)</title><rect x="121.5" y="1331.0" width="18.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="124.5" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (4 samples, 1.57%)</title><rect x="121.5" y="1315.0" width="18.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="124.5" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (19 samples, 7.48%)</title><rect x="140.1" y="1379.0" width="88.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="143.1" y="1390.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 1.57%)</title><rect x="140.1" y="1363.0" width="18.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="143.1" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.79%)</title><rect x="149.4" y="1347.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="152.4" y="1358.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (14 samples, 5.51%)</title><rect x="158.7" y="1363.0" width="65.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="161.7" y="1374.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 3.54%)</title><rect x="158.7" y="1347.0" width="41.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="161.7" y="1358.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 1.18%)</title><rect x="158.7" y="1331.0" width="13.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="161.7" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 1.18%)</title><rect x="158.7" y="1315.0" width="13.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="161.7" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 1.18%)</title><rect x="158.7" y="1299.0" width="13.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="161.7" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 1.18%)</title><rect x="158.7" y="1283.0" width="13.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="161.7" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.79%)</title><rect x="163.3" y="1267.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="166.3" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (6 samples, 2.36%)</title><rect x="172.6" y="1331.0" width="27.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="175.6" y="1342.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 0.79%)</title><rect x="172.6" y="1315.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="175.6" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 1.57%)</title><rect x="181.9" y="1315.0" width="18.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="184.9" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 1.57%)</title><rect x="181.9" y="1299.0" width="18.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="184.9" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (4 samples, 1.57%)</title><rect x="181.9" y="1283.0" width="18.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="184.9" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (4 samples, 1.57%)</title><rect x="181.9" y="1267.0" width="18.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="184.9" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 1.97%)</title><rect x="200.5" y="1347.0" width="23.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="203.5" y="1358.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 1.97%)</title><rect x="200.5" y="1331.0" width="23.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="203.5" y="1342.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 1.97%)</title><rect x="200.5" y="1315.0" width="23.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="203.5" y="1326.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.79%)</title><rect x="200.5" y="1299.0" width="9.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.5" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.39%)</title><rect x="200.5" y="1283.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="203.5" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.39%)</title><rect x="200.5" y="1267.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.5" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.39%)</title><rect x="200.5" y="1251.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="203.5" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.39%)</title><rect x="205.1" y="1283.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="208.1" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.39%)</title><rect x="209.8" y="1299.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="212.8" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.39%)</title><rect x="209.8" y="1283.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="212.8" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.39%)</title><rect x="209.8" y="1267.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="212.8" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.39%)</title><rect x="209.8" y="1251.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="212.8" y="1262.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.39%)</title><rect x="209.8" y="1235.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="212.8" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.79%)</title><rect x="214.4" y="1299.0" width="9.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="217.4" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.79%)</title><rect x="214.4" y="1283.0" width="9.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="217.4" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.79%)</title><rect x="214.4" y="1267.0" width="9.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="217.4" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.39%)</title><rect x="223.7" y="1363.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="226.7" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (95 samples, 37.40%)</title><rect x="228.3" y="1475.0" width="441.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="231.3" y="1486.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (10 samples, 3.94%)</title><rect x="242.3" y="1459.0" width="46.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.3" y="1470.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (9 samples, 3.54%)</title><rect x="246.9" y="1443.0" width="41.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.9" y="1454.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (8 samples, 3.15%)</title><rect x="251.6" y="1427.0" width="37.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="254.6" y="1438.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.18%)</title><rect x="256.2" y="1411.0" width="14.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="259.2" y="1422.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.18%)</title><rect x="256.2" y="1395.0" width="14.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="259.2" y="1406.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 1.18%)</title><rect x="256.2" y="1379.0" width="14.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.2" y="1390.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 1.18%)</title><rect x="256.2" y="1363.0" width="14.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="259.2" y="1374.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 1.57%)</title><rect x="270.2" y="1411.0" width="18.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="273.2" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 1.18%)</title><rect x="274.8" y="1395.0" width="13.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="277.8" y="1406.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.79%)</title><rect x="274.8" y="1379.0" width="9.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.8" y="1390.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.79%)</title><rect x="274.8" y="1363.0" width="9.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="277.8" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.39%)</title><rect x="284.1" y="1379.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.1" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.39%)</title><rect x="288.7" y="1459.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.7" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.39%)</title><rect x="288.7" y="1443.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="291.7" y="1454.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.39%)</title><rect x="288.7" y="1427.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.7" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (18 samples, 7.09%)</title><rect x="293.4" y="1459.0" width="83.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.4" y="1470.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (18 samples, 7.09%)</title><rect x="293.4" y="1443.0" width="83.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.4" y="1454.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 1.57%)</title><rect x="293.4" y="1427.0" width="18.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.4" y="1438.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.79%)</title><rect x="293.4" y="1411.0" width="9.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.4" y="1422.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.79%)</title><rect x="293.4" y="1395.0" width="9.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.4" y="1406.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.79%)</title><rect x="293.4" y="1379.0" width="9.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="296.4" y="1390.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.79%)</title><rect x="293.4" y="1363.0" width="9.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="296.4" y="1374.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.79%)</title><rect x="293.4" y="1347.0" width="9.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.4" y="1358.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.79%)</title><rect x="293.4" y="1331.0" width="9.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="296.4" y="1342.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.39%)</title><rect x="298.0" y="1315.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="301.0" y="1326.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.39%)</title><rect x="302.7" y="1411.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="305.7" y="1422.0"></text>
</g>
<g>
<title>_new_array_Java (1 samples, 0.39%)</title><rect x="302.7" y="1395.0" width="4.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="305.7" y="1406.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.39%)</title><rect x="307.3" y="1411.0" width="4.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="310.3" y="1422.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (13 samples, 5.12%)</title><rect x="312.0" y="1427.0" width="60.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="315.0" y="1438.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (12 samples, 4.72%)</title><rect x="316.6" y="1411.0" width="55.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="319.6" y="1422.0">ch/qo..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (11 samples, 4.33%)</title><rect x="321.3" y="1395.0" width="51.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="324.3" y="1406.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 3.54%)</title><rect x="330.6" y="1379.0" width="41.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="333.6" y="1390.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.39%)</title><rect x="330.6" y="1363.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="333.6" y="1374.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.39%)</title><rect x="330.6" y="1347.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="333.6" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 3.15%)</title><rect x="335.2" y="1363.0" width="37.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="338.2" y="1374.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.39%)</title><rect x="358.4" y="1347.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="361.4" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.79%)</title><rect x="363.1" y="1347.0" width="9.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="366.1" y="1358.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.39%)</title><rect x="372.4" y="1427.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="375.4" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (60 samples, 23.62%)</title><rect x="377.0" y="1459.0" width="278.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="380.0" y="1470.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (60 samples, 23.62%)</title><rect x="377.0" y="1443.0" width="278.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="380.0" y="1454.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/703875274.process (52 samples, 20.47%)</title><rect x="381.7" y="1427.0" width="241.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="384.7" y="1438.0">com/linecorp/decaton/benchmark/D..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (52 samples, 20.47%)</title><rect x="381.7" y="1411.0" width="241.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="384.7" y="1422.0">com/linecorp/decaton/benchmark/D..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (51 samples, 20.08%)</title><rect x="381.7" y="1395.0" width="236.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="384.7" y="1406.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (49 samples, 19.29%)</title><rect x="381.7" y="1379.0" width="227.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="384.7" y="1390.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>java/lang/Thread.sleep (49 samples, 19.29%)</title><rect x="381.7" y="1363.0" width="227.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="384.7" y="1374.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (46 samples, 18.11%)</title><rect x="390.9" y="1347.0" width="213.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="393.9" y="1358.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 1.18%)</title><rect x="404.9" y="1331.0" width="13.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="407.9" y="1342.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.39%)</title><rect x="418.8" y="1331.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="421.8" y="1342.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 3.15%)</title><rect x="423.5" y="1331.0" width="37.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="426.5" y="1342.0">__c..</text>
</g>
<g>
<title>[vdso] (4 samples, 1.57%)</title><rect x="442.0" y="1315.0" width="18.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="445.0" y="1326.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.39%)</title><rect x="460.6" y="1331.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="463.6" y="1342.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (30 samples, 11.81%)</title><rect x="465.3" y="1331.0" width="139.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="468.3" y="1342.0">os::sleep(Thread*..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.79%)</title><rect x="507.1" y="1315.0" width="9.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="510.1" y="1326.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.39%)</title><rect x="511.7" y="1299.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="514.7" y="1310.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.39%)</title><rect x="516.4" y="1315.0" width="4.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="519.4" y="1326.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (16 samples, 6.30%)</title><rect x="521.0" y="1315.0" width="74.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="524.0" y="1326.0">__pthrea..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.39%)</title><rect x="595.4" y="1315.0" width="4.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="598.4" y="1326.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.39%)</title><rect x="600.0" y="1315.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="603.0" y="1326.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (1 samples, 0.39%)</title><rect x="604.6" y="1347.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="607.6" y="1358.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.79%)</title><rect x="609.3" y="1379.0" width="9.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="612.3" y="1390.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.39%)</title><rect x="613.9" y="1363.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="616.9" y="1374.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.39%)</title><rect x="613.9" y="1347.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="616.9" y="1358.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.39%)</title><rect x="613.9" y="1331.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="616.9" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.39%)</title><rect x="618.6" y="1395.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="621.6" y="1406.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.39%)</title><rect x="618.6" y="1379.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="621.6" y="1390.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.39%)</title><rect x="618.6" y="1363.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="621.6" y="1374.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.39%)</title><rect x="618.6" y="1347.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="621.6" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.79%)</title><rect x="623.2" y="1427.0" width="9.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="626.2" y="1438.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.79%)</title><rect x="623.2" y="1411.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="626.2" y="1422.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (3 samples, 1.18%)</title><rect x="632.5" y="1427.0" width="14.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="635.5" y="1438.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (3 samples, 1.18%)</title><rect x="632.5" y="1411.0" width="14.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="635.5" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/130006663.get$Lambda (3 samples, 1.18%)</title><rect x="632.5" y="1395.0" width="14.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="635.5" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/130006663.&lt;init&gt; (3 samples, 1.18%)</title><rect x="632.5" y="1379.0" width="14.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="635.5" y="1390.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.39%)</title><rect x="646.5" y="1427.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="649.5" y="1438.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.39%)</title><rect x="646.5" y="1411.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="649.5" y="1422.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.39%)</title><rect x="646.5" y="1395.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="649.5" y="1406.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.39%)</title><rect x="651.1" y="1427.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="654.1" y="1438.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.39%)</title><rect x="651.1" y="1411.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="654.1" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.18%)</title><rect x="655.7" y="1459.0" width="14.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="658.7" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.18%)</title><rect x="655.7" y="1443.0" width="14.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="658.7" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.18%)</title><rect x="655.7" y="1427.0" width="14.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="658.7" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/457312362.accept (3 samples, 1.18%)</title><rect x="655.7" y="1411.0" width="14.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="658.7" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (3 samples, 1.18%)</title><rect x="655.7" y="1395.0" width="14.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="658.7" y="1406.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (3 samples, 1.18%)</title><rect x="655.7" y="1379.0" width="14.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="658.7" y="1390.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (3 samples, 1.18%)</title><rect x="655.7" y="1363.0" width="14.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="658.7" y="1374.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.39%)</title><rect x="665.0" y="1347.0" width="4.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="668.0" y="1358.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.39%)</title><rect x="665.0" y="1331.0" width="4.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="668.0" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.57%)</title><rect x="669.7" y="1475.0" width="18.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="672.7" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.57%)</title><rect x="669.7" y="1459.0" width="18.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="672.7" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.18%)</title><rect x="674.3" y="1443.0" width="14.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="677.3" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/1932501525.accept (3 samples, 1.18%)</title><rect x="674.3" y="1427.0" width="14.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="677.3" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (3 samples, 1.18%)</title><rect x="674.3" y="1411.0" width="14.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="677.3" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/741815089.complete (3 samples, 1.18%)</title><rect x="674.3" y="1395.0" width="14.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="677.3" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (3 samples, 1.18%)</title><rect x="674.3" y="1379.0" width="14.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="677.3" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (3 samples, 1.18%)</title><rect x="674.3" y="1363.0" width="14.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="677.3" y="1374.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 1.18%)</title><rect x="674.3" y="1347.0" width="14.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="677.3" y="1358.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 1.18%)</title><rect x="674.3" y="1331.0" width="14.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="677.3" y="1342.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 1.18%)</title><rect x="674.3" y="1315.0" width="14.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="677.3" y="1326.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.39%)</title><rect x="688.3" y="1475.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="691.3" y="1486.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.39%)</title><rect x="688.3" y="1459.0" width="4.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="691.3" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 1.57%)</title><rect x="692.9" y="1491.0" width="18.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="695.9" y="1502.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.39%)</title><rect x="706.9" y="1475.0" width="4.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="709.9" y="1486.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.39%)</title><rect x="706.9" y="1459.0" width="4.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="709.9" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 1.97%)</title><rect x="711.5" y="1539.0" width="23.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="714.5" y="1550.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 1.57%)</title><rect x="716.1" y="1523.0" width="18.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="719.1" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.39%)</title><rect x="716.1" y="1507.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="719.1" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.39%)</title><rect x="716.1" y="1491.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="719.1" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.18%)</title><rect x="720.8" y="1507.0" width="13.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="723.8" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.18%)</title><rect x="720.8" y="1491.0" width="13.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="723.8" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.18%)</title><rect x="720.8" y="1475.0" width="13.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="723.8" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.18%)</title><rect x="720.8" y="1459.0" width="13.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="723.8" y="1470.0"></text>
</g>
<g>
<title>start_thread (98 samples, 38.58%)</title><rect x="734.7" y="1587.0" width="455.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="737.7" y="1598.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (98 samples, 38.58%)</title><rect x="734.7" y="1571.0" width="455.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="737.7" y="1582.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 2.76%)</title><rect x="734.7" y="1555.0" width="32.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="737.7" y="1566.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (7 samples, 2.76%)</title><rect x="734.7" y="1539.0" width="32.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="737.7" y="1550.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 2.76%)</title><rect x="734.7" y="1523.0" width="32.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="737.7" y="1534.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (7 samples, 2.76%)</title><rect x="734.7" y="1507.0" width="32.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="737.7" y="1518.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.18%)</title><rect x="748.7" y="1491.0" width="13.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="751.7" y="1502.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.79%)</title><rect x="753.3" y="1475.0" width="9.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="756.3" y="1486.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.39%)</title><rect x="758.0" y="1459.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="761.0" y="1470.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.39%)</title><rect x="762.6" y="1491.0" width="4.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="765.6" y="1502.0"></text>
</g>
<g>
<title>JavaThread::run() (91 samples, 35.83%)</title><rect x="767.2" y="1555.0" width="422.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="770.2" y="1566.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (91 samples, 35.83%)</title><rect x="767.2" y="1539.0" width="422.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="770.2" y="1550.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (91 samples, 35.83%)</title><rect x="767.2" y="1523.0" width="422.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="770.2" y="1534.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (91 samples, 35.83%)</title><rect x="767.2" y="1507.0" width="422.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="770.2" y="1518.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (89 samples, 35.04%)</title><rect x="767.2" y="1491.0" width="413.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="770.2" y="1502.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (89 samples, 35.04%)</title><rect x="767.2" y="1475.0" width="413.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="770.2" y="1486.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, boo..</text>
</g>
<g>
<title>Compile::Code_Gen() (50 samples, 19.69%)</title><rect x="767.2" y="1459.0" width="232.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="770.2" y="1470.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.39%)</title><rect x="767.2" y="1443.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="770.2" y="1454.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.39%)</title><rect x="767.2" y="1427.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="770.2" y="1438.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.39%)</title><rect x="767.2" y="1411.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="770.2" y="1422.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.79%)</title><rect x="771.9" y="1443.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="774.9" y="1454.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.39%)</title><rect x="771.9" y="1427.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="774.9" y="1438.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.39%)</title><rect x="771.9" y="1411.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="774.9" y="1422.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.39%)</title><rect x="771.9" y="1395.0" width="4.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="774.9" y="1406.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.39%)</title><rect x="776.5" y="1427.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="779.5" y="1438.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.39%)</title><rect x="776.5" y="1411.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="779.5" y="1422.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.18%)</title><rect x="781.2" y="1443.0" width="13.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="784.2" y="1454.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.18%)</title><rect x="781.2" y="1427.0" width="13.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="784.2" y="1438.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.18%)</title><rect x="781.2" y="1411.0" width="13.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="784.2" y="1422.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.79%)</title><rect x="795.1" y="1443.0" width="9.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="798.1" y="1454.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.79%)</title><rect x="795.1" y="1427.0" width="9.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="798.1" y="1438.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.39%)</title><rect x="795.1" y="1411.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="798.1" y="1422.0"></text>
</g>
<g>
<title>PhaseCFG::set_next_call(Block*, Node*, VectorSet&amp;) (1 samples, 0.39%)</title><rect x="795.1" y="1395.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="798.1" y="1406.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.39%)</title><rect x="799.8" y="1411.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="802.8" y="1422.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (42 samples, 16.54%)</title><rect x="804.4" y="1443.0" width="195.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="807.4" y="1454.0">PhaseChaitin::Register_Al..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.39%)</title><rect x="804.4" y="1427.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="807.4" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.18%)</title><rect x="809.1" y="1427.0" width="13.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="812.1" y="1438.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.39%)</title><rect x="813.7" y="1411.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="816.7" y="1422.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.39%)</title><rect x="818.3" y="1411.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="821.3" y="1422.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.79%)</title><rect x="823.0" y="1427.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="826.0" y="1438.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.39%)</title><rect x="823.0" y="1411.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="826.0" y="1422.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.39%)</title><rect x="827.6" y="1411.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="830.6" y="1422.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.57%)</title><rect x="832.3" y="1427.0" width="18.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="835.3" y="1438.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.39%)</title><rect x="846.2" y="1411.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="849.2" y="1422.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 2.36%)</title><rect x="850.9" y="1427.0" width="27.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="853.9" y="1438.0">P..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.39%)</title><rect x="864.8" y="1411.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="867.8" y="1422.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.79%)</title><rect x="869.4" y="1411.0" width="9.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="872.4" y="1422.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.39%)</title><rect x="878.7" y="1427.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="881.7" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.18%)</title><rect x="883.4" y="1427.0" width="13.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="886.4" y="1438.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.39%)</title><rect x="892.7" y="1411.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="895.7" y="1422.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.79%)</title><rect x="897.3" y="1427.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="900.3" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.79%)</title><rect x="897.3" y="1411.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="900.3" y="1422.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (2 samples, 0.79%)</title><rect x="906.6" y="1427.0" width="9.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="909.6" y="1438.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.39%)</title><rect x="911.3" y="1411.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="914.3" y="1422.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (10 samples, 3.94%)</title><rect x="915.9" y="1427.0" width="46.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="918.9" y="1438.0">Phas..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.39%)</title><rect x="915.9" y="1411.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="918.9" y="1422.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (9 samples, 3.54%)</title><rect x="920.6" y="1411.0" width="41.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="923.6" y="1422.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (9 samples, 3.54%)</title><rect x="920.6" y="1395.0" width="41.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="923.6" y="1406.0">Pha..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (4 samples, 1.57%)</title><rect x="920.6" y="1379.0" width="18.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="923.6" y="1390.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.39%)</title><rect x="934.5" y="1363.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="937.5" y="1374.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 1.18%)</title><rect x="939.1" y="1379.0" width="14.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="942.1" y="1390.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.79%)</title><rect x="953.1" y="1379.0" width="9.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="956.1" y="1390.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.79%)</title><rect x="962.4" y="1427.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="965.4" y="1438.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.39%)</title><rect x="967.0" y="1411.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="970.0" y="1422.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.39%)</title><rect x="971.7" y="1427.0" width="4.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="974.7" y="1438.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.39%)</title><rect x="971.7" y="1411.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="974.7" y="1422.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.39%)</title><rect x="976.3" y="1427.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="979.3" y="1438.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.39%)</title><rect x="976.3" y="1411.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="979.3" y="1422.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.57%)</title><rect x="980.9" y="1427.0" width="18.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="983.9" y="1438.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 1.57%)</title><rect x="980.9" y="1411.0" width="18.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="983.9" y="1422.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.39%)</title><rect x="994.9" y="1395.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="997.9" y="1406.0"></text>
</g>
<g>
<title>Compile::Optimize() (31 samples, 12.20%)</title><rect x="999.5" y="1459.0" width="144.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1002.5" y="1470.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 1.57%)</title><rect x="999.5" y="1443.0" width="18.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1002.5" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 1.57%)</title><rect x="999.5" y="1427.0" width="18.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1002.5" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.39%)</title><rect x="1008.8" y="1411.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1011.8" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.39%)</title><rect x="1013.5" y="1411.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1016.5" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.39%)</title><rect x="1013.5" y="1395.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1016.5" y="1406.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.39%)</title><rect x="1018.1" y="1443.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1021.1" y="1454.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.39%)</title><rect x="1022.8" y="1443.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1025.8" y="1454.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.39%)</title><rect x="1022.8" y="1427.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1025.8" y="1438.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.39%)</title><rect x="1022.8" y="1411.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1025.8" y="1422.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (22 samples, 8.66%)</title><rect x="1027.4" y="1443.0" width="102.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1030.4" y="1454.0">PhaseIdealLo..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.39%)</title><rect x="1027.4" y="1427.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1030.4" y="1438.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.39%)</title><rect x="1032.0" y="1427.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1035.0" y="1438.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.39%)</title><rect x="1032.0" y="1411.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1035.0" y="1422.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (16 samples, 6.30%)</title><rect x="1036.7" y="1427.0" width="74.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1039.7" y="1438.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (15 samples, 5.91%)</title><rect x="1041.3" y="1411.0" width="69.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1044.3" y="1422.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.79%)</title><rect x="1041.3" y="1395.0" width="9.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1044.3" y="1406.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (13 samples, 5.12%)</title><rect x="1050.6" y="1395.0" width="60.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1053.6" y="1406.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.79%)</title><rect x="1097.1" y="1379.0" width="9.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1100.1" y="1390.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.39%)</title><rect x="1106.4" y="1379.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.4" y="1390.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.79%)</title><rect x="1111.0" y="1427.0" width="9.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.0" y="1438.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.79%)</title><rect x="1111.0" y="1411.0" width="9.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1114.0" y="1422.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.39%)</title><rect x="1120.3" y="1427.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1123.3" y="1438.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.39%)</title><rect x="1120.3" y="1411.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1123.3" y="1422.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.39%)</title><rect x="1120.3" y="1395.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.3" y="1406.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.39%)</title><rect x="1125.0" y="1427.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.0" y="1438.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.39%)</title><rect x="1125.0" y="1411.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.0" y="1422.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.39%)</title><rect x="1125.0" y="1395.0" width="4.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.0" y="1406.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.39%)</title><rect x="1125.0" y="1379.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1128.0" y="1390.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.39%)</title><rect x="1125.0" y="1363.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.0" y="1374.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.79%)</title><rect x="1129.6" y="1443.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.6" y="1454.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.79%)</title><rect x="1129.6" y="1427.0" width="9.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1132.6" y="1438.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.39%)</title><rect x="1129.6" y="1411.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.6" y="1422.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.39%)</title><rect x="1134.3" y="1411.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.3" y="1422.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.39%)</title><rect x="1134.3" y="1395.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.3" y="1406.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.39%)</title><rect x="1138.9" y="1443.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.9" y="1454.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.39%)</title><rect x="1138.9" y="1427.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.9" y="1438.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.39%)</title><rect x="1138.9" y="1411.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.9" y="1422.0"></text>
</g>
<g>
<title>PhaseTransform::makecon(Type const*) (1 samples, 0.39%)</title><rect x="1138.9" y="1395.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1141.9" y="1406.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 2.76%)</title><rect x="1143.5" y="1459.0" width="32.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.5" y="1470.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 2.76%)</title><rect x="1143.5" y="1443.0" width="32.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.5" y="1454.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 2.76%)</title><rect x="1143.5" y="1427.0" width="32.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.5" y="1438.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 2.76%)</title><rect x="1143.5" y="1411.0" width="32.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.5" y="1422.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 2.76%)</title><rect x="1143.5" y="1395.0" width="32.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.5" y="1406.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 2.76%)</title><rect x="1143.5" y="1379.0" width="32.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.5" y="1390.0">Pa..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.39%)</title><rect x="1143.5" y="1363.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.5" y="1374.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.39%)</title><rect x="1143.5" y="1347.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.5" y="1358.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.39%)</title><rect x="1143.5" y="1331.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.5" y="1342.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.39%)</title><rect x="1143.5" y="1315.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.5" y="1326.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.39%)</title><rect x="1143.5" y="1299.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.5" y="1310.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.39%)</title><rect x="1143.5" y="1283.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.5" y="1294.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.39%)</title><rect x="1143.5" y="1267.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.5" y="1278.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.39%)</title><rect x="1143.5" y="1251.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.5" y="1262.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.39%)</title><rect x="1143.5" y="1235.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.5" y="1246.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.39%)</title><rect x="1143.5" y="1219.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.5" y="1230.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.39%)</title><rect x="1143.5" y="1203.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.5" y="1214.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.39%)</title><rect x="1143.5" y="1187.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.5" y="1198.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.39%)</title><rect x="1143.5" y="1171.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.5" y="1182.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.39%)</title><rect x="1143.5" y="1155.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.5" y="1166.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.39%)</title><rect x="1143.5" y="1139.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.5" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.36%)</title><rect x="1148.2" y="1363.0" width="27.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.2" y="1374.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.36%)</title><rect x="1148.2" y="1347.0" width="27.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.2" y="1358.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.36%)</title><rect x="1148.2" y="1331.0" width="27.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.2" y="1342.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.36%)</title><rect x="1148.2" y="1315.0" width="27.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.2" y="1326.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.36%)</title><rect x="1148.2" y="1299.0" width="27.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.2" y="1310.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.97%)</title><rect x="1148.2" y="1283.0" width="23.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.2" y="1294.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.79%)</title><rect x="1148.2" y="1267.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.2" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.79%)</title><rect x="1148.2" y="1251.0" width="9.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.2" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.79%)</title><rect x="1148.2" y="1235.0" width="9.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.2" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.79%)</title><rect x="1148.2" y="1219.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.2" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.79%)</title><rect x="1148.2" y="1203.0" width="9.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.2" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.79%)</title><rect x="1148.2" y="1187.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.2" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.79%)</title><rect x="1148.2" y="1171.0" width="9.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.2" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.79%)</title><rect x="1148.2" y="1155.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.2" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.79%)</title><rect x="1148.2" y="1139.0" width="9.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.2" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.79%)</title><rect x="1148.2" y="1123.0" width="9.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.2" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.79%)</title><rect x="1148.2" y="1107.0" width="9.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.2" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.79%)</title><rect x="1148.2" y="1091.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.2" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.79%)</title><rect x="1148.2" y="1075.0" width="9.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.2" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.79%)</title><rect x="1148.2" y="1059.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.79%)</title><rect x="1148.2" y="1043.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.79%)</title><rect x="1148.2" y="1027.0" width="9.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.79%)</title><rect x="1148.2" y="1011.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.79%)</title><rect x="1148.2" y="995.0" width="9.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.2" y="1006.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.39%)</title><rect x="1148.2" y="979.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.2" y="990.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.39%)</title><rect x="1148.2" y="963.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.2" y="974.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.39%)</title><rect x="1148.2" y="947.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.2" y="958.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.39%)</title><rect x="1148.2" y="931.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.2" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1152.8" y="979.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.8" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1152.8" y="963.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1152.8" y="947.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1152.8" y="931.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1152.8" y="915.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1152.8" y="899.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.8" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1152.8" y="883.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.8" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1152.8" y="867.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1152.8" y="851.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1152.8" y="835.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1152.8" y="819.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.39%)</title><rect x="1152.8" y="803.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.39%)</title><rect x="1152.8" y="787.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.8" y="798.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.39%)</title><rect x="1152.8" y="771.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.8" y="782.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.39%)</title><rect x="1152.8" y="755.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.8" y="766.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.39%)</title><rect x="1152.8" y="739.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.8" y="750.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.39%)</title><rect x="1152.8" y="723.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.8" y="734.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.18%)</title><rect x="1157.5" y="1267.0" width="13.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.5" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.18%)</title><rect x="1157.5" y="1251.0" width="13.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.5" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.18%)</title><rect x="1157.5" y="1235.0" width="13.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.5" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.18%)</title><rect x="1157.5" y="1219.0" width="13.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.5" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.18%)</title><rect x="1157.5" y="1203.0" width="13.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.18%)</title><rect x="1157.5" y="1187.0" width="13.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.18%)</title><rect x="1157.5" y="1171.0" width="13.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.5" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.18%)</title><rect x="1157.5" y="1155.0" width="13.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.5" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.18%)</title><rect x="1157.5" y="1139.0" width="13.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.18%)</title><rect x="1157.5" y="1123.0" width="13.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.18%)</title><rect x="1157.5" y="1107.0" width="13.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.18%)</title><rect x="1157.5" y="1091.0" width="13.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.79%)</title><rect x="1157.5" y="1075.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.5" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.79%)</title><rect x="1157.5" y="1059.0" width="9.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.5" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.79%)</title><rect x="1157.5" y="1043.0" width="9.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.79%)</title><rect x="1157.5" y="1027.0" width="9.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.79%)</title><rect x="1157.5" y="1011.0" width="9.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.79%)</title><rect x="1157.5" y="995.0" width="9.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.79%)</title><rect x="1157.5" y="979.0" width="9.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.5" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.79%)</title><rect x="1157.5" y="963.0" width="9.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.5" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.79%)</title><rect x="1157.5" y="947.0" width="9.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.79%)</title><rect x="1157.5" y="931.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.79%)</title><rect x="1157.5" y="915.0" width="9.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.79%)</title><rect x="1157.5" y="899.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.79%)</title><rect x="1157.5" y="883.0" width="9.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.5" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.79%)</title><rect x="1157.5" y="867.0" width="9.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.5" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.79%)</title><rect x="1157.5" y="851.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.79%)</title><rect x="1157.5" y="835.0" width="9.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.79%)</title><rect x="1157.5" y="819.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.79%)</title><rect x="1157.5" y="803.0" width="9.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1157.5" y="787.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.5" y="798.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1157.5" y="771.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.5" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1157.5" y="755.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.5" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1157.5" y="739.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1157.5" y="723.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1157.5" y="707.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1157.5" y="691.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1157.5" y="675.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.5" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1157.5" y="659.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.5" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1157.5" y="643.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1157.5" y="627.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1157.5" y="611.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1157.5" y="595.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1157.5" y="579.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.5" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1157.5" y="563.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.5" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1157.5" y="547.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1157.5" y="531.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1157.5" y="515.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1157.5" y="499.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1157.5" y="483.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.5" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1157.5" y="467.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.5" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1157.5" y="451.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1157.5" y="435.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1157.5" y="419.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1157.5" y="403.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1157.5" y="387.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.5" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1157.5" y="371.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.5" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1157.5" y="355.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1157.5" y="339.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1157.5" y="323.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1157.5" y="307.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1157.5" y="291.0" width="4.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.5" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1157.5" y="275.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.5" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1157.5" y="259.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1157.5" y="243.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1157.5" y="227.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1157.5" y="211.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1157.5" y="195.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.5" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1157.5" y="179.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.5" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1157.5" y="163.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.5" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1157.5" y="147.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1157.5" y="131.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1157.5" y="115.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.5" y="126.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.39%)</title><rect x="1157.5" y="99.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.5" y="110.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.39%)</title><rect x="1157.5" y="83.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.5" y="94.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.39%)</title><rect x="1157.5" y="67.0" width="4.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.5" y="78.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.39%)</title><rect x="1157.5" y="51.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.5" y="62.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.39%)</title><rect x="1157.5" y="35.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.5" y="46.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.39%)</title><rect x="1162.1" y="787.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.1" y="798.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.39%)</title><rect x="1162.1" y="771.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.1" y="782.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.39%)</title><rect x="1162.1" y="755.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.1" y="766.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.39%)</title><rect x="1162.1" y="739.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.1" y="750.0"></text>
</g>
<g>
<title>ConstraintCastNode::Identity(PhaseTransform*) (1 samples, 0.39%)</title><rect x="1162.1" y="723.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.1" y="734.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.39%)</title><rect x="1162.1" y="707.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.1" y="718.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.39%)</title><rect x="1162.1" y="691.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.1" y="702.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.39%)</title><rect x="1162.1" y="675.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.1" y="686.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.39%)</title><rect x="1166.8" y="1075.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.8" y="1086.0"></text>
</g>
<g>
<title>CmpINode::Ideal(PhaseGVN*, bool) (1 samples, 0.39%)</title><rect x="1166.8" y="1059.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.8" y="1070.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.39%)</title><rect x="1171.4" y="1283.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.4" y="1294.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.39%)</title><rect x="1171.4" y="1267.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.4" y="1278.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.39%)</title><rect x="1171.4" y="1251.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.4" y="1262.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.39%)</title><rect x="1171.4" y="1235.0" width="4.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1174.4" y="1246.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.39%)</title><rect x="1176.1" y="1459.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.1" y="1470.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.39%)</title><rect x="1176.1" y="1443.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.1" y="1454.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.39%)</title><rect x="1176.1" y="1427.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.1" y="1438.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.79%)</title><rect x="1180.7" y="1491.0" width="9.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.7" y="1502.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.79%)</title><rect x="1180.7" y="1475.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.7" y="1486.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.79%)</title><rect x="1180.7" y="1459.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.7" y="1470.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.79%)</title><rect x="1180.7" y="1443.0" width="9.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.7" y="1454.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.79%)</title><rect x="1180.7" y="1427.0" width="9.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.7" y="1438.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.39%)</title><rect x="1180.7" y="1411.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="1422.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.39%)</title><rect x="1180.7" y="1395.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.7" y="1406.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.39%)</title><rect x="1180.7" y="1379.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="1390.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.39%)</title><rect x="1180.7" y="1363.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.7" y="1374.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.39%)</title><rect x="1180.7" y="1347.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.7" y="1358.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.39%)</title><rect x="1180.7" y="1331.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="1342.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.39%)</title><rect x="1180.7" y="1315.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.7" y="1326.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.39%)</title><rect x="1180.7" y="1299.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.7" y="1310.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.39%)</title><rect x="1185.4" y="1411.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.4" y="1422.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.39%)</title><rect x="1185.4" y="1395.0" width="4.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.4" y="1406.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.39%)</title><rect x="1185.4" y="1379.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.4" y="1390.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.39%)</title><rect x="1185.4" y="1363.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.4" y="1374.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.39%)</title><rect x="1185.4" y="1347.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.4" y="1358.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.39%)</title><rect x="1185.4" y="1331.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.4" y="1342.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.39%)</title><rect x="1185.4" y="1315.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.4" y="1326.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.39%)</title><rect x="1185.4" y="1299.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.4" y="1310.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.39%)</title><rect x="1185.4" y="1283.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.4" y="1294.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.39%)</title><rect x="1185.4" y="1267.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.4" y="1278.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.39%)</title><rect x="1185.4" y="1251.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.4" y="1262.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.39%)</title><rect x="1185.4" y="1235.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.4" y="1246.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.39%)</title><rect x="1185.4" y="1219.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.4" y="1230.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.39%)</title><rect x="1185.4" y="1203.0" width="4.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.4" y="1214.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.39%)</title><rect x="1185.4" y="1187.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.4" y="1198.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.39%)</title><rect x="1185.4" y="1171.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.4" y="1182.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.39%)</title><rect x="1185.4" y="1155.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.4" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.39%)</title><rect x="1185.4" y="1139.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.4" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::inline_sync_entry(Instruction*, BlockBegin*) (1 samples, 0.39%)</title><rect x="1185.4" y="1123.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.4" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::monitorenter(Instruction*, int) (1 samples, 0.39%)</title><rect x="1185.4" y="1107.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.4" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.39%)</title><rect x="1185.4" y="1091.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.4" y="1102.0"></text>
</g>
<g>
<title>ValueMap::kill_memory() (1 samples, 0.39%)</title><rect x="1185.4" y="1075.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.4" y="1086.0"></text>
</g>
</g>
</svg>
