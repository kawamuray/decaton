<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1366" onload="init(evt)" viewBox="0 0 1200 1366" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1349"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1349"> </text>
<g id="frames">
<g>
<title>all (1,172 samples, 100.00%)</title><rect x="10.0" y="1315.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1326.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.09%)</title><rect x="10.0" y="1299.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="11.0" y="1299.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="14.0" y="1310.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.09%)</title><rect x="11.0" y="1283.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="14.0" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (270 samples, 23.04%)</title><rect x="12.0" y="1299.0" width="271.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.0" y="1310.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.09%)</title><rect x="12.0" y="1283.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.0" y="1294.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="12.0" y="1267.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.0" y="1278.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="12.0" y="1251.0" width="1.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="15.0" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (268 samples, 22.87%)</title><rect x="13.0" y="1283.0" width="269.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.0" y="1294.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.34%)</title><rect x="13.0" y="1267.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.0" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.26%)</title><rect x="13.0" y="1251.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.0" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/543331443.accept (3 samples, 0.26%)</title><rect x="13.0" y="1235.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.0" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (3 samples, 0.26%)</title><rect x="13.0" y="1219.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.26%)</title><rect x="13.0" y="1203.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.0" y="1214.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.26%)</title><rect x="13.0" y="1187.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.0" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.09%)</title><rect x="16.0" y="1251.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.0" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.26%)</title><rect x="17.0" y="1267.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.0" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.17%)</title><rect x="18.1" y="1251.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.1" y="1262.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="18.1" y="1235.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.1" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="18.1" y="1219.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.1" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="18.1" y="1203.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.1" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="19.1" y="1235.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.1" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="19.1" y="1219.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.1" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="19.1" y="1203.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.1" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="19.1" y="1187.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.1" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="19.1" y="1171.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.1" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="19.1" y="1155.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.1" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="19.1" y="1139.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.1" y="1150.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="19.1" y="1123.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="22.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (213 samples, 18.17%)</title><rect x="20.1" y="1267.0" width="214.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.1" y="1278.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/216751329.accept (198 samples, 16.89%)</title><rect x="22.1" y="1251.0" width="199.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.1" y="1262.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (197 samples, 16.81%)</title><rect x="23.1" y="1235.0" width="198.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="26.1" y="1246.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (2 samples, 0.17%)</title><rect x="23.1" y="1219.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.1" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (159 samples, 13.57%)</title><rect x="25.1" y="1219.0" width="160.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.1" y="1230.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (159 samples, 13.57%)</title><rect x="25.1" y="1203.0" width="160.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.1" y="1214.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (159 samples, 13.57%)</title><rect x="25.1" y="1187.0" width="160.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.1" y="1198.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (159 samples, 13.57%)</title><rect x="25.1" y="1171.0" width="160.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.1" y="1182.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (159 samples, 13.57%)</title><rect x="25.1" y="1155.0" width="160.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.1" y="1166.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (159 samples, 13.57%)</title><rect x="25.1" y="1139.0" width="160.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.1" y="1150.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (118 samples, 10.07%)</title><rect x="25.1" y="1123.0" width="118.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.1" y="1134.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (31 samples, 2.65%)</title><rect x="25.1" y="1107.0" width="31.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.1" y="1118.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (31 samples, 2.65%)</title><rect x="25.1" y="1091.0" width="31.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.1" y="1102.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (24 samples, 2.05%)</title><rect x="32.2" y="1075.0" width="24.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="35.2" y="1086.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (24 samples, 2.05%)</title><rect x="32.2" y="1059.0" width="24.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="35.2" y="1070.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.26%)</title><rect x="56.3" y="1107.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (3 samples, 0.26%)</title><rect x="56.3" y="1091.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="59.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.17%)</title><rect x="56.3" y="1075.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="59.3" y="1086.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.17%)</title><rect x="56.3" y="1059.0" width="2.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="59.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.09%)</title><rect x="58.3" y="1075.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="61.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (84 samples, 7.17%)</title><rect x="59.3" y="1107.0" width="84.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="62.3" y="1118.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (84 samples, 7.17%)</title><rect x="59.3" y="1091.0" width="84.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.3" y="1102.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (84 samples, 7.17%)</title><rect x="59.3" y="1075.0" width="84.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="62.3" y="1086.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (84 samples, 7.17%)</title><rect x="59.3" y="1059.0" width="84.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="62.3" y="1070.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (83 samples, 7.08%)</title><rect x="60.3" y="1043.0" width="83.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="63.3" y="1054.0">sun/misc/..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="60.3" y="1027.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="63.3" y="1038.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="61.3" y="1027.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="64.3" y="1038.0"></text>
</g>
<g>
<title>Unsafe_Unpark (68 samples, 5.80%)</title><rect x="62.4" y="1027.0" width="68.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="65.4" y="1038.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.26%)</title><rect x="64.4" y="1011.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="67.4" y="1022.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="67.4" y="1011.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="70.4" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="68.4" y="1011.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="71.4" y="1022.0"></text>
</g>
<g>
<title>__pthread_cond_signal (45 samples, 3.84%)</title><rect x="69.4" y="1011.0" width="45.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="72.4" y="1022.0">__pt..</text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="114.7" y="1011.0" width="1.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="117.7" y="1022.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.34%)</title><rect x="115.7" y="1011.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="118.7" y="1022.0"></text>
</g>
<g>
<title>pthread_mutex_lock (11 samples, 0.94%)</title><rect x="119.7" y="1011.0" width="11.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="122.7" y="1022.0"></text>
</g>
<g>
<title>__lll_unlock_wake (8 samples, 0.68%)</title><rect x="130.8" y="1027.0" width="8.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="133.8" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.34%)</title><rect x="138.9" y="1027.0" width="4.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="141.9" y="1038.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="142.9" y="1027.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="145.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (39 samples, 3.33%)</title><rect x="143.9" y="1123.0" width="39.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="146.9" y="1134.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (39 samples, 3.33%)</title><rect x="143.9" y="1107.0" width="39.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="146.9" y="1118.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (39 samples, 3.33%)</title><rect x="143.9" y="1091.0" width="39.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="146.9" y="1102.0">jav..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="182.2" y="1075.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="185.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.09%)</title><rect x="183.2" y="1123.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="186.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.09%)</title><rect x="183.2" y="1107.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="186.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.09%)</title><rect x="183.2" y="1091.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.2" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="183.2" y="1075.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="186.2" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.09%)</title><rect x="183.2" y="1059.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="186.2" y="1070.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="183.2" y="1043.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="186.2" y="1054.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="183.2" y="1027.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="186.2" y="1038.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="183.2" y="1011.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="186.2" y="1022.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.09%)</title><rect x="183.2" y="995.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="186.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="184.2" y="1123.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="187.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="184.2" y="1107.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="187.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="184.2" y="1091.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="187.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="184.2" y="1075.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="187.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (3 samples, 0.26%)</title><rect x="185.2" y="1219.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="188.2" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.26%)</title><rect x="185.2" y="1203.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="188.2" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (2 samples, 0.17%)</title><rect x="188.2" y="1219.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="191.2" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.17%)</title><rect x="188.2" y="1203.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="191.2" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.17%)</title><rect x="188.2" y="1187.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="191.2" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (31 samples, 2.65%)</title><rect x="190.2" y="1219.0" width="31.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.2" y="1230.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (31 samples, 2.65%)</title><rect x="190.2" y="1203.0" width="31.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="193.2" y="1214.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (19 samples, 1.62%)</title><rect x="200.3" y="1187.0" width="19.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.3" y="1198.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.68%)</title><rect x="200.3" y="1171.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="203.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 0.68%)</title><rect x="200.3" y="1155.0" width="8.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="203.3" y="1166.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.68%)</title><rect x="200.3" y="1139.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.3" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.17%)</title><rect x="203.3" y="1123.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="206.3" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.09%)</title><rect x="203.3" y="1107.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="206.3" y="1118.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="203.3" y="1091.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="206.3" y="1102.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="203.3" y="1075.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="206.3" y="1086.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="203.3" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="206.3" y="1070.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="204.3" y="1107.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="207.3" y="1118.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="205.3" y="1123.0" width="3.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="208.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (6 samples, 0.51%)</title><rect x="208.3" y="1171.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="211.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="213.4" y="1155.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="216.4" y="1166.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.43%)</title><rect x="214.4" y="1171.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.4" y="1182.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="219.4" y="1187.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="222.4" y="1198.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="220.4" y="1187.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="223.4" y="1198.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.26%)</title><rect x="221.4" y="1251.0" width="3.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="224.4" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.09%)</title><rect x="224.5" y="1251.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="227.5" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="224.5" y="1235.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.5" y="1246.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="225.5" y="1251.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="228.5" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.09%)</title><rect x="225.5" y="1235.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.5" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="225.5" y="1219.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="228.5" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="225.5" y="1203.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.5" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.09%)</title><rect x="225.5" y="1187.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="228.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.60%)</title><rect x="226.5" y="1251.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="229.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.51%)</title><rect x="227.5" y="1235.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="230.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.51%)</title><rect x="227.5" y="1219.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="230.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.51%)</title><rect x="227.5" y="1203.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="233.5" y="1251.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="233.5" y="1235.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (48 samples, 4.10%)</title><rect x="234.5" y="1267.0" width="48.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.5" y="1278.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (48 samples, 4.10%)</title><rect x="234.5" y="1251.0" width="48.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.5" y="1262.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (30 samples, 2.56%)</title><rect x="235.5" y="1235.0" width="30.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.5" y="1246.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (2 samples, 0.17%)</title><rect x="235.5" y="1219.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (2 samples, 0.17%)</title><rect x="235.5" y="1203.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="238.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (2 samples, 0.17%)</title><rect x="235.5" y="1187.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="238.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (28 samples, 2.39%)</title><rect x="237.5" y="1219.0" width="28.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="240.5" y="1230.0">or..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="237.5" y="1203.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.5" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="237.5" y="1187.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="240.5" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.09%)</title><rect x="237.5" y="1171.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="240.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (25 samples, 2.13%)</title><rect x="238.5" y="1203.0" width="25.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="241.5" y="1214.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (22 samples, 1.88%)</title><rect x="239.6" y="1187.0" width="22.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.6" y="1198.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (22 samples, 1.88%)</title><rect x="239.6" y="1171.0" width="22.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="242.6" y="1182.0">o..</text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="241.6" y="1155.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="244.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (8 samples, 0.68%)</title><rect x="242.6" y="1155.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.09%)</title><rect x="248.6" y="1139.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.09%)</title><rect x="248.6" y="1123.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="251.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.09%)</title><rect x="248.6" y="1107.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.09%)</title><rect x="248.6" y="1091.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="251.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.09%)</title><rect x="248.6" y="1075.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="251.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.09%)</title><rect x="248.6" y="1059.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="251.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.09%)</title><rect x="248.6" y="1043.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="251.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="249.6" y="1139.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="252.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (10 samples, 0.85%)</title><rect x="250.6" y="1155.0" width="10.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.85%)</title><rect x="250.6" y="1139.0" width="10.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="253.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (6 samples, 0.51%)</title><rect x="250.6" y="1123.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="253.6" y="1134.0"></text>
</g>
<g>
<title>java/util/Optional.of (6 samples, 0.51%)</title><rect x="250.6" y="1107.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="253.6" y="1118.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.09%)</title><rect x="255.7" y="1091.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="258.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.34%)</title><rect x="256.7" y="1123.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="259.7" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.34%)</title><rect x="256.7" y="1107.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.7" y="1118.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="259.7" y="1091.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="262.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.09%)</title><rect x="260.7" y="1155.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.09%)</title><rect x="261.7" y="1187.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="264.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.09%)</title><rect x="261.7" y="1171.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="264.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="261.7" y="1155.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="261.7" y="1139.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="261.7" y="1123.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="261.7" y="1107.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="264.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="261.7" y="1091.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="264.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="262.7" y="1187.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="262.7" y="1171.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="262.7" y="1155.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="265.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="262.7" y="1139.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="262.7" y="1123.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="265.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="262.7" y="1107.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.7" y="1118.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.09%)</title><rect x="262.7" y="1091.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.7" y="1102.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.09%)</title><rect x="262.7" y="1075.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="265.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (2 samples, 0.17%)</title><rect x="263.7" y="1203.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.09%)</title><rect x="264.7" y="1187.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="267.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="264.7" y="1171.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.7" y="1182.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="264.7" y="1155.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.7" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="264.7" y="1139.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="267.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (10 samples, 0.85%)</title><rect x="265.7" y="1235.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="268.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.68%)</title><rect x="265.7" y="1219.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.60%)</title><rect x="265.7" y="1203.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.7" y="1214.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="265.7" y="1187.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/645474870.accept (1 samples, 0.09%)</title><rect x="265.7" y="1171.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="268.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.09%)</title><rect x="265.7" y="1155.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="268.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="265.7" y="1139.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="265.7" y="1123.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.7" y="1134.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="266.7" y="1187.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="269.7" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="266.7" y="1171.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="269.7" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="266.7" y="1155.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="267.7" y="1187.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="267.7" y="1171.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.17%)</title><rect x="268.8" y="1187.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="271.8" y="1198.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.17%)</title><rect x="268.8" y="1171.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.8" y="1182.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.17%)</title><rect x="268.8" y="1155.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="271.8" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.09%)</title><rect x="268.8" y="1139.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.8" y="1150.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="269.8" y="1139.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.8" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="269.8" y="1123.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.17%)</title><rect x="270.8" y="1187.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.09%)</title><rect x="271.8" y="1171.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="274.8" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="271.8" y="1155.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="274.8" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="271.8" y="1139.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.8" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="271.8" y="1123.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.8" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="271.8" y="1107.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.8" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="271.8" y="1091.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.8" y="1102.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="271.8" y="1075.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="274.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.09%)</title><rect x="272.8" y="1203.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="275.8" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.09%)</title><rect x="272.8" y="1187.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.8" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="272.8" y="1171.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="275.8" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="272.8" y="1155.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="275.8" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="272.8" y="1139.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="275.8" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="272.8" y="1123.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="275.8" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="272.8" y="1107.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.8" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="272.8" y="1091.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.8" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.09%)</title><rect x="272.8" y="1075.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.09%)</title><rect x="272.8" y="1059.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.17%)</title><rect x="273.8" y="1219.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.09%)</title><rect x="274.8" y="1203.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="277.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.subscription (1 samples, 0.09%)</title><rect x="274.8" y="1187.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.34%)</title><rect x="275.8" y="1235.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.34%)</title><rect x="275.8" y="1219.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="278.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.34%)</title><rect x="275.8" y="1203.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="278.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.34%)</title><rect x="275.8" y="1187.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="278.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.09%)</title><rect x="275.8" y="1171.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.09%)</title><rect x="275.8" y="1155.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="275.8" y="1139.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="278.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="275.8" y="1123.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="275.8" y="1107.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="278.8" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="275.8" y="1091.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="278.8" y="1102.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="275.8" y="1075.0" width="1.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="278.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (3 samples, 0.26%)</title><rect x="276.8" y="1171.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="279.8" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.26%)</title><rect x="276.8" y="1155.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="279.8" y="1166.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.26%)</title><rect x="276.8" y="1139.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="279.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.09%)</title><rect x="279.8" y="1235.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="282.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.09%)</title><rect x="279.8" y="1219.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.8" y="1230.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="279.8" y="1203.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/1675699065.accept (1 samples, 0.09%)</title><rect x="279.8" y="1187.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="282.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.09%)</title><rect x="279.8" y="1171.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="279.8" y="1155.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="279.8" y="1139.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="282.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="279.8" y="1123.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.8" y="1134.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="279.8" y="1107.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="282.8" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="279.8" y="1091.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.09%)</title><rect x="280.8" y="1235.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="280.8" y="1219.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="280.8" y="1203.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="283.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="280.8" y="1187.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.09%)</title><rect x="281.8" y="1235.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="284.8" y="1246.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="281.8" y="1219.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="284.8" y="1230.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.09%)</title><rect x="282.8" y="1283.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="285.8" y="1294.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.09%)</title><rect x="282.8" y="1267.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="285.8" y="1278.0"></text>
</g>
<g>
<title>java/lang/Thread.run (662 samples, 56.48%)</title><rect x="283.9" y="1299.0" width="666.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="286.9" y="1310.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (662 samples, 56.48%)</title><rect x="283.9" y="1283.0" width="666.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.9" y="1294.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (662 samples, 56.48%)</title><rect x="283.9" y="1267.0" width="666.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="286.9" y="1278.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1214051491.run (420 samples, 35.84%)</title><rect x="285.9" y="1251.0" width="422.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="288.9" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lamb..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (420 samples, 35.84%)</title><rect x="285.9" y="1235.0" width="422.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.9" y="1246.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambd..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (420 samples, 35.84%)</title><rect x="285.9" y="1219.0" width="422.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.9" y="1230.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (414 samples, 35.32%)</title><rect x="285.9" y="1203.0" width="416.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.9" y="1214.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.sc..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.09%)</title><rect x="294.9" y="1187.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="297.9" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (116 samples, 9.90%)</title><rect x="295.9" y="1187.0" width="116.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="298.9" y="1198.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (116 samples, 9.90%)</title><rect x="295.9" y="1171.0" width="116.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="298.9" y="1182.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (116 samples, 9.90%)</title><rect x="295.9" y="1155.0" width="116.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="298.9" y="1166.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (115 samples, 9.81%)</title><rect x="296.9" y="1139.0" width="115.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="299.9" y="1150.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (115 samples, 9.81%)</title><rect x="296.9" y="1123.0" width="115.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="299.9" y="1134.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (115 samples, 9.81%)</title><rect x="296.9" y="1107.0" width="115.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.9" y="1118.0">com/fasterxml/..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.17%)</title><rect x="302.0" y="1091.0" width="2.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="305.0" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.17%)</title><rect x="302.0" y="1075.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="305.0" y="1086.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="304.0" y="1091.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="307.0" y="1102.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.77%)</title><rect x="305.0" y="1091.0" width="9.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="308.0" y="1102.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.60%)</title><rect x="307.0" y="1075.0" width="7.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="310.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (18 samples, 1.54%)</title><rect x="314.1" y="1091.0" width="18.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="317.1" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (18 samples, 1.54%)</title><rect x="314.1" y="1075.0" width="18.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (18 samples, 1.54%)</title><rect x="314.1" y="1059.0" width="18.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="317.1" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="314.1" y="1043.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="317.1" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="314.1" y="1027.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="317.1" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="314.1" y="1011.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="317.1" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="314.1" y="995.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="317.1" y="1006.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="314.1" y="979.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="317.1" y="990.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.09%)</title><rect x="314.1" y="963.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="317.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (16 samples, 1.37%)</title><rect x="315.1" y="1043.0" width="16.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="318.1" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="315.1" y="1027.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="318.1" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="315.1" y="1011.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="318.1" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="315.1" y="995.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="318.1" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="315.1" y="979.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="318.1" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="315.1" y="963.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="318.1" y="974.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (1 samples, 0.09%)</title><rect x="315.1" y="947.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="318.1" y="958.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit_prologue() (1 samples, 0.09%)</title><rect x="315.1" y="931.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="318.1" y="942.0"></text>
</g>
<g>
<title>VM_GC_Operation::doit_prologue() (1 samples, 0.09%)</title><rect x="315.1" y="915.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="318.1" y="926.0"></text>
</g>
<g>
<title>InstanceRefKlass::acquire_pending_list_lock(BasicLock*) (1 samples, 0.09%)</title><rect x="315.1" y="899.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="318.1" y="910.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.09%)</title><rect x="315.1" y="883.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="318.1" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin_VaryDuration(Thread*) (1 samples, 0.09%)</title><rect x="315.1" y="867.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="318.1" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.09%)</title><rect x="315.1" y="851.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="318.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (15 samples, 1.28%)</title><rect x="316.1" y="1027.0" width="15.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="319.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.09%)</title><rect x="331.2" y="1043.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="334.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.09%)</title><rect x="331.2" y="1027.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="334.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.09%)</title><rect x="331.2" y="1011.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="334.2" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="331.2" y="995.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="334.2" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="331.2" y="979.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="334.2" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="331.2" y="963.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="334.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (73 samples, 6.23%)</title><rect x="332.2" y="1091.0" width="73.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="335.2" y="1102.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.09%)</title><rect x="333.2" y="1075.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="336.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.09%)</title><rect x="334.2" y="1075.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="337.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.26%)</title><rect x="335.2" y="1075.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="338.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (12 samples, 1.02%)</title><rect x="338.2" y="1075.0" width="12.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="341.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.77%)</title><rect x="341.2" y="1059.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="344.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (8 samples, 0.68%)</title><rect x="341.2" y="1043.0" width="8.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="344.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.34%)</title><rect x="345.3" y="1027.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="348.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.09%)</title><rect x="349.3" y="1043.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="352.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (8 samples, 0.68%)</title><rect x="350.3" y="1075.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="353.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.51%)</title><rect x="352.3" y="1059.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="355.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (47 samples, 4.01%)</title><rect x="358.4" y="1075.0" width="47.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="361.4" y="1086.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 1.02%)</title><rect x="359.4" y="1059.0" width="12.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="362.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.34%)</title><rect x="360.4" y="1043.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="363.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.34%)</title><rect x="360.4" y="1027.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="363.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.34%)</title><rect x="360.4" y="1011.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="363.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.34%)</title><rect x="360.4" y="995.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="363.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.09%)</title><rect x="363.4" y="979.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="366.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 0.43%)</title><rect x="364.4" y="1043.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="367.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (3 samples, 0.26%)</title><rect x="364.4" y="1027.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="367.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.17%)</title><rect x="367.4" y="1027.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="370.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.17%)</title><rect x="367.4" y="1011.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="370.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.17%)</title><rect x="367.4" y="995.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="370.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.17%)</title><rect x="367.4" y="979.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="370.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="369.4" y="1043.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="372.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="369.4" y="1027.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="372.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.09%)</title><rect x="370.4" y="1043.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="373.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (34 samples, 2.90%)</title><rect x="371.5" y="1059.0" width="34.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="374.5" y="1070.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (34 samples, 2.90%)</title><rect x="371.5" y="1043.0" width="34.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="374.5" y="1054.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (34 samples, 2.90%)</title><rect x="371.5" y="1027.0" width="34.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="374.5" y="1038.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.37%)</title><rect x="373.5" y="1011.0" width="16.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="376.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.17%)</title><rect x="374.5" y="995.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="377.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.77%)</title><rect x="376.5" y="995.0" width="9.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="379.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.77%)</title><rect x="376.5" y="979.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="379.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.77%)</title><rect x="376.5" y="963.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="379.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.09%)</title><rect x="376.5" y="947.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="379.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (8 samples, 0.68%)</title><rect x="377.5" y="947.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="380.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.09%)</title><rect x="385.5" y="995.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="388.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.09%)</title><rect x="385.5" y="979.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="388.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.09%)</title><rect x="385.5" y="963.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="388.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.17%)</title><rect x="386.6" y="995.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="389.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.17%)</title><rect x="386.6" y="979.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="389.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="387.6" y="963.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="390.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.09%)</title><rect x="388.6" y="995.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="391.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.26%)</title><rect x="389.6" y="1011.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="392.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.17%)</title><rect x="390.6" y="995.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="393.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.17%)</title><rect x="390.6" y="979.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="393.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.17%)</title><rect x="390.6" y="963.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="393.6" y="974.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.17%)</title><rect x="390.6" y="947.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.68%)</title><rect x="392.6" y="1011.0" width="8.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="395.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.68%)</title><rect x="392.6" y="995.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="395.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.68%)</title><rect x="392.6" y="979.0" width="8.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="395.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (8 samples, 0.68%)</title><rect x="392.6" y="963.0" width="8.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="395.6" y="974.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (8 samples, 0.68%)</title><rect x="392.6" y="947.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="395.6" y="958.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 0.43%)</title><rect x="394.6" y="931.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="397.6" y="942.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (3 samples, 0.26%)</title><rect x="396.6" y="915.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="399.6" y="926.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.09%)</title><rect x="399.6" y="931.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="402.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.43%)</title><rect x="400.6" y="1011.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="403.6" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.43%)</title><rect x="400.6" y="995.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="403.6" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.43%)</title><rect x="400.6" y="979.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="403.6" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="404.7" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="407.7" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.09%)</title><rect x="404.7" y="947.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="407.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 0.60%)</title><rect x="405.7" y="1091.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="408.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.09%)</title><rect x="405.7" y="1075.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="408.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 0.51%)</title><rect x="406.7" y="1075.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="409.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 0.51%)</title><rect x="406.7" y="1059.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="409.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.51%)</title><rect x="406.7" y="1043.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="409.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.51%)</title><rect x="406.7" y="1027.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="409.7" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (264 samples, 22.53%)</title><rect x="412.7" y="1187.0" width="265.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="415.7" y="1198.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (46 samples, 3.92%)</title><rect x="414.7" y="1171.0" width="46.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="417.7" y="1182.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (45 samples, 3.84%)</title><rect x="415.8" y="1155.0" width="45.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="418.8" y="1166.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (40 samples, 3.41%)</title><rect x="420.8" y="1139.0" width="40.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="423.8" y="1150.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.43%)</title><rect x="422.8" y="1123.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="425.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.09%)</title><rect x="422.8" y="1107.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="425.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="423.8" y="1107.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="426.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="423.8" y="1091.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="426.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="423.8" y="1075.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="426.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.17%)</title><rect x="425.8" y="1107.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="428.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.17%)</title><rect x="425.8" y="1091.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="428.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.17%)</title><rect x="425.8" y="1075.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="428.8" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (1 samples, 0.09%)</title><rect x="427.8" y="1123.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="430.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (11 samples, 0.94%)</title><rect x="428.8" y="1123.0" width="11.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="431.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.26%)</title><rect x="436.9" y="1107.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="439.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.26%)</title><rect x="436.9" y="1091.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="439.9" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (21 samples, 1.79%)</title><rect x="439.9" y="1123.0" width="21.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="442.9" y="1134.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 0.60%)</title><rect x="454.0" y="1107.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="457.0" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 0.51%)</title><rect x="455.0" y="1091.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="458.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.68%)</title><rect x="461.1" y="1171.0" width="8.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="464.1" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.60%)</title><rect x="462.1" y="1155.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="465.1" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.60%)</title><rect x="462.1" y="1139.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="465.1" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="468.1" y="1123.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="471.1" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="468.1" y="1107.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="471.1" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="468.1" y="1091.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="471.1" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="468.1" y="1075.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="471.1" y="1086.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="468.1" y="1059.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="471.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (147 samples, 12.54%)</title><rect x="469.1" y="1171.0" width="148.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="472.1" y="1182.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (147 samples, 12.54%)</title><rect x="469.1" y="1155.0" width="148.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="472.1" y="1166.0">com/linecorp/decato..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.34%)</title><rect x="477.2" y="1139.0" width="4.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="480.2" y="1150.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="478.2" y="1123.0" width="3.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="481.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (39 samples, 3.33%)</title><rect x="481.2" y="1139.0" width="39.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="484.2" y="1150.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (37 samples, 3.16%)</title><rect x="483.2" y="1123.0" width="37.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="486.2" y="1134.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (29 samples, 2.47%)</title><rect x="487.2" y="1107.0" width="29.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="490.2" y="1118.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (17 samples, 1.45%)</title><rect x="495.3" y="1091.0" width="17.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="498.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (17 samples, 1.45%)</title><rect x="495.3" y="1075.0" width="17.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="498.3" y="1086.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (17 samples, 1.45%)</title><rect x="495.3" y="1059.0" width="17.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="498.3" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 0.43%)</title><rect x="503.3" y="1043.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="506.3" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.26%)</title><rect x="503.3" y="1027.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="506.3" y="1038.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.09%)</title><rect x="503.3" y="1011.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="506.3" y="1022.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.17%)</title><rect x="504.4" y="1011.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="507.4" y="1022.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.17%)</title><rect x="504.4" y="995.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="507.4" y="1006.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="505.4" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="508.4" y="990.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.17%)</title><rect x="506.4" y="1027.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="509.4" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="507.4" y="1011.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="510.4" y="1022.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="507.4" y="995.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="510.4" y="1006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.34%)</title><rect x="508.4" y="1043.0" width="4.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="511.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.09%)</title><rect x="512.4" y="1091.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="515.4" y="1102.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="513.4" y="1091.0" width="3.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="516.4" y="1102.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.34%)</title><rect x="516.4" y="1107.0" width="4.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="519.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (5 samples, 0.43%)</title><rect x="520.5" y="1139.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="523.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.09%)</title><rect x="520.5" y="1123.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="523.5" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="520.5" y="1107.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="523.5" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="520.5" y="1091.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="523.5" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="520.5" y="1075.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="523.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.34%)</title><rect x="521.5" y="1123.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="524.5" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="521.5" y="1107.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="524.5" y="1118.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="521.5" y="1091.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="524.5" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="521.5" y="1075.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="524.5" y="1086.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="521.5" y="1059.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="524.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.26%)</title><rect x="522.5" y="1107.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="525.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="524.5" y="1091.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="527.5" y="1102.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (91 samples, 7.76%)</title><rect x="525.5" y="1139.0" width="91.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="528.5" y="1150.0">org/slf4j/M..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (88 samples, 7.51%)</title><rect x="528.5" y="1123.0" width="88.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="531.5" y="1134.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.26%)</title><rect x="528.5" y="1107.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="531.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.26%)</title><rect x="528.5" y="1091.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="531.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.26%)</title><rect x="528.5" y="1075.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="531.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.26%)</title><rect x="528.5" y="1059.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="531.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="531.5" y="1107.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="534.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="531.5" y="1091.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="534.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="531.5" y="1075.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="534.5" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.17%)</title><rect x="531.5" y="1059.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="534.5" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (83 samples, 7.08%)</title><rect x="533.5" y="1107.0" width="83.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="536.5" y="1118.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.put (79 samples, 6.74%)</title><rect x="537.6" y="1091.0" width="79.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="540.6" y="1102.0">java/util..</text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.09%)</title><rect x="569.8" y="1075.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="572.8" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (46 samples, 3.92%)</title><rect x="570.8" y="1075.0" width="46.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="573.8" y="1086.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (8 samples, 0.68%)</title><rect x="589.9" y="1059.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="592.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (14 samples, 1.19%)</title><rect x="598.0" y="1059.0" width="14.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="601.0" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="610.1" y="1043.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="613.1" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="611.1" y="1027.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="614.1" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="611.1" y="1011.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="614.1" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="611.1" y="995.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="614.1" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="611.1" y="979.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="614.1" y="990.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.43%)</title><rect x="612.1" y="1059.0" width="5.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="615.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (40 samples, 3.41%)</title><rect x="617.1" y="1171.0" width="40.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="620.1" y="1182.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (40 samples, 3.41%)</title><rect x="617.1" y="1155.0" width="40.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="620.1" y="1166.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="617.1" y="1139.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="620.1" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="617.1" y="1123.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="620.1" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="617.1" y="1107.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="620.1" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="617.1" y="1091.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="620.1" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="617.1" y="1075.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="620.1" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="617.1" y="1059.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="620.1" y="1070.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="617.1" y="1043.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="620.1" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="617.1" y="1027.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="620.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/580786606.process (20 samples, 1.71%)</title><rect x="618.1" y="1139.0" width="20.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="621.1" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (20 samples, 1.71%)</title><rect x="618.1" y="1123.0" width="20.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="621.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (16 samples, 1.37%)</title><rect x="620.1" y="1107.0" width="16.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="623.1" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.26%)</title><rect x="620.1" y="1091.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="623.1" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.26%)</title><rect x="620.1" y="1075.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="623.1" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.26%)</title><rect x="620.1" y="1059.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="623.1" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.26%)</title><rect x="620.1" y="1043.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="623.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.17%)</title><rect x="621.1" y="1027.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="624.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (2 samples, 0.17%)</title><rect x="621.1" y="1011.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="624.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (3 samples, 0.26%)</title><rect x="623.2" y="1091.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="626.2" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.26%)</title><rect x="623.2" y="1075.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="626.2" y="1086.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="623.2" y="1059.0" width="3.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="626.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.85%)</title><rect x="626.2" y="1091.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="629.2" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.17%)</title><rect x="636.2" y="1107.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="639.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="636.2" y="1091.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="639.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="636.2" y="1075.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="639.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="636.2" y="1059.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="639.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.26%)</title><rect x="638.3" y="1139.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="641.3" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.26%)</title><rect x="638.3" y="1123.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="641.3" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.68%)</title><rect x="641.3" y="1139.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="644.3" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.51%)</title><rect x="643.3" y="1123.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="646.3" y="1134.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.26%)</title><rect x="643.3" y="1107.0" width="3.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="646.3" y="1118.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.26%)</title><rect x="646.3" y="1107.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="649.3" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (5 samples, 0.43%)</title><rect x="649.3" y="1139.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="652.3" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (5 samples, 0.43%)</title><rect x="649.3" y="1123.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="652.3" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.26%)</title><rect x="654.4" y="1139.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="657.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/4502125.linkToTargetMethod (1 samples, 0.09%)</title><rect x="657.4" y="1171.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="660.4" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/110771485.invokeStatic_L3_L (1 samples, 0.09%)</title><rect x="657.4" y="1155.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="660.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/703095315.get$Lambda (1 samples, 0.09%)</title><rect x="657.4" y="1139.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="660.4" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="657.4" y="1123.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="660.4" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="657.4" y="1107.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="660.4" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="657.4" y="1091.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="660.4" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="657.4" y="1075.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="660.4" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="657.4" y="1059.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="660.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (20 samples, 1.71%)</title><rect x="658.4" y="1171.0" width="20.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="661.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (20 samples, 1.71%)</title><rect x="658.4" y="1155.0" width="20.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="661.4" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="665.4" y="1139.0" width="3.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="668.4" y="1150.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="665.4" y="1123.0" width="3.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="668.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.85%)</title><rect x="668.5" y="1139.0" width="10.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="671.5" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/703095315.accept (10 samples, 0.85%)</title><rect x="668.5" y="1123.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="671.5" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (10 samples, 0.85%)</title><rect x="668.5" y="1107.0" width="10.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="671.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (10 samples, 0.85%)</title><rect x="668.5" y="1091.0" width="10.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="671.5" y="1102.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (10 samples, 0.85%)</title><rect x="668.5" y="1075.0" width="10.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="671.5" y="1086.0"></text>
</g>
<g>
<title>java/time/Duration.create (10 samples, 0.85%)</title><rect x="668.5" y="1059.0" width="10.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="671.5" y="1070.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="673.5" y="1043.0" width="2.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="676.5" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="675.5" y="1043.0" width="3.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="678.5" y="1054.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="676.5" y="1027.0" width="2.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="679.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.02%)</title><rect x="678.5" y="1187.0" width="12.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="681.5" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 1.02%)</title><rect x="678.5" y="1171.0" width="12.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="681.5" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (2 samples, 0.17%)</title><rect x="678.5" y="1155.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="681.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.85%)</title><rect x="680.5" y="1155.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="683.5" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/703095315.accept (10 samples, 0.85%)</title><rect x="680.5" y="1139.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="683.5" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (10 samples, 0.85%)</title><rect x="680.5" y="1123.0" width="10.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="683.5" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (10 samples, 0.85%)</title><rect x="680.5" y="1107.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="683.5" y="1118.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (10 samples, 0.85%)</title><rect x="680.5" y="1091.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="683.5" y="1102.0"></text>
</g>
<g>
<title>java/time/Duration.create (10 samples, 0.85%)</title><rect x="680.5" y="1075.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="683.5" y="1086.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.09%)</title><rect x="690.6" y="1187.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="693.6" y="1198.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.09%)</title><rect x="690.6" y="1171.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="693.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="690.6" y="1155.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="693.6" y="1166.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (11 samples, 0.94%)</title><rect x="691.6" y="1187.0" width="11.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="694.6" y="1198.0"></text>
</g>
<g>
<title>[vdso] (11 samples, 0.94%)</title><rect x="691.6" y="1171.0" width="11.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="694.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="702.7" y="1203.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="705.7" y="1214.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.09%)</title><rect x="702.7" y="1187.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="705.7" y="1198.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.09%)</title><rect x="702.7" y="1171.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="705.7" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="702.7" y="1155.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="705.7" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="702.7" y="1139.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="705.7" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="702.7" y="1123.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="705.7" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="702.7" y="1107.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="705.7" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="702.7" y="1091.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="705.7" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 0.43%)</title><rect x="703.7" y="1203.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="706.7" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="703.7" y="1187.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="706.7" y="1198.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.34%)</title><rect x="704.7" y="1187.0" width="4.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="707.7" y="1198.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.34%)</title><rect x="704.7" y="1171.0" width="4.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="707.7" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.34%)</title><rect x="708.7" y="1251.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="711.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.34%)</title><rect x="708.7" y="1235.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="711.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.34%)</title><rect x="708.7" y="1219.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="711.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.34%)</title><rect x="708.7" y="1203.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="711.7" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1214051491.run (2 samples, 0.17%)</title><rect x="710.8" y="1187.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="713.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (236 samples, 20.14%)</title><rect x="712.8" y="1251.0" width="237.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="715.8" y="1262.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (236 samples, 20.14%)</title><rect x="712.8" y="1235.0" width="237.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="715.8" y="1246.0">java/util/concurrent/LinkedBloc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (205 samples, 17.49%)</title><rect x="715.8" y="1219.0" width="206.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="718.8" y="1230.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (22 samples, 1.88%)</title><rect x="721.8" y="1203.0" width="22.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="724.8" y="1214.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (13 samples, 1.11%)</title><rect x="744.0" y="1203.0" width="13.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="747.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 1.11%)</title><rect x="744.0" y="1187.0" width="13.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="747.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 1.11%)</title><rect x="744.0" y="1171.0" width="13.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="747.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 1.11%)</title><rect x="744.0" y="1155.0" width="13.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="747.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (163 samples, 13.91%)</title><rect x="757.1" y="1203.0" width="164.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="760.1" y="1214.0">java/util/concurrent/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (163 samples, 13.91%)</title><rect x="757.1" y="1187.0" width="164.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="760.1" y="1198.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="766.1" y="1171.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="769.1" y="1182.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.17%)</title><rect x="767.1" y="1171.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="770.1" y="1182.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="769.1" y="1171.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="772.1" y="1182.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.17%)</title><rect x="770.2" y="1171.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="773.2" y="1182.0"></text>
</g>
<g>
<title>Unsafe_Park (142 samples, 12.12%)</title><rect x="772.2" y="1171.0" width="142.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="775.2" y="1182.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.17%)</title><rect x="773.2" y="1155.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="776.2" y="1166.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (27 samples, 2.30%)</title><rect x="775.2" y="1155.0" width="27.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="778.2" y="1166.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.43%)</title><rect x="788.3" y="1139.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="791.3" y="1150.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.17%)</title><rect x="790.3" y="1123.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="793.3" y="1134.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.17%)</title><rect x="790.3" y="1107.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="793.3" y="1118.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="792.3" y="1123.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="795.3" y="1134.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="793.3" y="1139.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="796.3" y="1150.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="794.3" y="1139.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="797.3" y="1150.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.60%)</title><rect x="795.3" y="1139.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="798.3" y="1150.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="802.4" y="1155.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="805.4" y="1166.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.09%)</title><rect x="803.4" y="1155.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="806.4" y="1166.0"></text>
</g>
<g>
<title>__lll_lock_wait (12 samples, 1.02%)</title><rect x="804.4" y="1155.0" width="12.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="807.4" y="1166.0"></text>
</g>
<g>
<title>__lll_unlock_wake (33 samples, 2.82%)</title><rect x="816.5" y="1155.0" width="33.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="819.5" y="1166.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (50 samples, 4.27%)</title><rect x="849.7" y="1155.0" width="50.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="852.7" y="1166.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.26%)</title><rect x="900.0" y="1155.0" width="3.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="903.0" y="1166.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="903.1" y="1155.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="906.1" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.17%)</title><rect x="904.1" y="1155.0" width="2.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="907.1" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="906.1" y="1155.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="909.1" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.17%)</title><rect x="907.1" y="1155.0" width="2.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="910.1" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.09%)</title><rect x="909.1" y="1155.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="912.1" y="1166.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="910.1" y="1155.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="913.1" y="1166.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.17%)</title><rect x="911.1" y="1155.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="914.1" y="1166.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.17%)</title><rect x="913.1" y="1155.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="916.1" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.34%)</title><rect x="915.1" y="1171.0" width="4.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="918.1" y="1182.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.17%)</title><rect x="919.2" y="1171.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="922.2" y="1182.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.09%)</title><rect x="921.2" y="1203.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="924.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.09%)</title><rect x="922.2" y="1219.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="925.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.09%)</title><rect x="922.2" y="1203.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="925.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.09%)</title><rect x="922.2" y="1187.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="925.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (27 samples, 2.30%)</title><rect x="923.2" y="1219.0" width="27.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="926.2" y="1230.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (27 samples, 2.30%)</title><rect x="923.2" y="1203.0" width="27.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="926.2" y="1214.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (27 samples, 2.30%)</title><rect x="923.2" y="1187.0" width="27.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="926.2" y="1198.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (27 samples, 2.30%)</title><rect x="923.2" y="1171.0" width="27.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="926.2" y="1182.0">j..</text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.09%)</title><rect x="945.3" y="1155.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="948.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (4 samples, 0.34%)</title><rect x="946.3" y="1155.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="949.3" y="1166.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.09%)</title><rect x="950.4" y="1299.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="953.4" y="1310.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.09%)</title><rect x="950.4" y="1283.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="953.4" y="1294.0"></text>
</g>
<g>
<title>start_thread (237 samples, 20.22%)</title><rect x="951.4" y="1299.0" width="238.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="954.4" y="1310.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (237 samples, 20.22%)</title><rect x="951.4" y="1283.0" width="238.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="954.4" y="1294.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 1.62%)</title><rect x="951.4" y="1267.0" width="19.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="954.4" y="1278.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.26%)</title><rect x="951.4" y="1251.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="954.4" y="1262.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.26%)</title><rect x="951.4" y="1235.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="954.4" y="1246.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="951.4" y="1219.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="954.4" y="1230.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.17%)</title><rect x="952.4" y="1219.0" width="2.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="955.4" y="1230.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 1.28%)</title><rect x="954.4" y="1251.0" width="15.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="957.4" y="1262.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.34%)</title><rect x="954.4" y="1235.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="957.4" y="1246.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.17%)</title><rect x="954.4" y="1219.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="957.4" y="1230.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.17%)</title><rect x="956.4" y="1219.0" width="2.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="959.4" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (8 samples, 0.68%)</title><rect x="958.4" y="1235.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="961.4" y="1246.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (6 samples, 0.51%)</title><rect x="958.4" y="1219.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="961.4" y="1230.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (5 samples, 0.43%)</title><rect x="958.4" y="1203.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="961.4" y="1214.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (5 samples, 0.43%)</title><rect x="958.4" y="1187.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="961.4" y="1198.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (3 samples, 0.26%)</title><rect x="960.4" y="1171.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="963.4" y="1182.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="963.5" y="1203.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="966.5" y="1214.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="963.5" y="1187.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="966.5" y="1198.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="963.5" y="1171.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="966.5" y="1182.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="963.5" y="1155.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="966.5" y="1166.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="963.5" y="1139.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="966.5" y="1150.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.17%)</title><rect x="964.5" y="1219.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="967.5" y="1230.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.17%)</title><rect x="964.5" y="1203.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="967.5" y="1214.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="965.5" y="1187.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="968.5" y="1198.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="965.5" y="1171.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="968.5" y="1182.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (3 samples, 0.26%)</title><rect x="966.5" y="1235.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="969.5" y="1246.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (3 samples, 0.26%)</title><rect x="966.5" y="1219.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="969.5" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (2 samples, 0.17%)</title><rect x="966.5" y="1203.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="969.5" y="1214.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.17%)</title><rect x="966.5" y="1187.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="969.5" y="1198.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.17%)</title><rect x="966.5" y="1171.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="969.5" y="1182.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.17%)</title><rect x="966.5" y="1155.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="969.5" y="1166.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.17%)</title><rect x="966.5" y="1139.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="969.5" y="1150.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.09%)</title><rect x="967.5" y="1123.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="970.5" y="1134.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="968.5" y="1203.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="971.5" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::start_cset_region_for_worker(unsigned int) (1 samples, 0.09%)</title><rect x="968.5" y="1187.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="971.5" y="1198.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.09%)</title><rect x="969.5" y="1251.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="972.5" y="1262.0"></text>
</g>
<g>
<title>JavaThread::run() (216 samples, 18.43%)</title><rect x="970.5" y="1267.0" width="217.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="973.5" y="1278.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (216 samples, 18.43%)</title><rect x="970.5" y="1251.0" width="217.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="973.5" y="1262.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (215 samples, 18.34%)</title><rect x="970.5" y="1235.0" width="216.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="973.5" y="1246.0">CompileBroker::compiler_thre..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (214 samples, 18.26%)</title><rect x="970.5" y="1219.0" width="215.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="973.5" y="1230.0">CompileBroker::invoke_compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (214 samples, 18.26%)</title><rect x="970.5" y="1203.0" width="215.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="973.5" y="1214.0">C2Compiler::compile_method(c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (214 samples, 18.26%)</title><rect x="970.5" y="1187.0" width="215.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="973.5" y="1198.0">Compile::Compile(ciEnv*, C2C..</text>
</g>
<g>
<title>Compile::Code_Gen() (144 samples, 12.29%)</title><rect x="970.5" y="1171.0" width="145.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="973.5" y="1182.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.34%)</title><rect x="970.5" y="1155.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="973.5" y="1166.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="970.5" y="1139.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="973.5" y="1150.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.17%)</title><rect x="971.5" y="1139.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="974.5" y="1150.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.17%)</title><rect x="971.5" y="1123.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="974.5" y="1134.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.09%)</title><rect x="973.5" y="1139.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="976.5" y="1150.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (6 samples, 0.51%)</title><rect x="974.5" y="1155.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="977.5" y="1166.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.09%)</title><rect x="975.5" y="1139.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="978.5" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="975.5" y="1123.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="978.5" y="1134.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.09%)</title><rect x="975.5" y="1107.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="978.5" y="1118.0"></text>
</g>
<g>
<title>Location::write_on(DebugInfoWriteStream*) (1 samples, 0.09%)</title><rect x="975.5" y="1091.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="978.5" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (3 samples, 0.26%)</title><rect x="976.6" y="1139.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.6" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.17%)</title><rect x="977.6" y="1123.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="980.6" y="1134.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.09%)</title><rect x="979.6" y="1139.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="982.6" y="1150.0"></text>
</g>
<g>
<title>Matcher::match() (14 samples, 1.19%)</title><rect x="980.6" y="1155.0" width="14.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="983.6" y="1166.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="980.6" y="1139.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="983.6" y="1150.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.09%)</title><rect x="981.6" y="1139.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="984.6" y="1150.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (12 samples, 1.02%)</title><rect x="982.6" y="1139.0" width="12.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="985.6" y="1150.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.34%)</title><rect x="986.6" y="1123.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="989.6" y="1134.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.09%)</title><rect x="990.6" y="1123.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="993.6" y="1134.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="990.6" y="1107.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="993.6" y="1118.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="990.6" y="1091.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="993.6" y="1102.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.17%)</title><rect x="991.7" y="1123.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="994.7" y="1134.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="991.7" y="1107.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="994.7" y="1118.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="992.7" y="1107.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="995.7" y="1118.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.09%)</title><rect x="992.7" y="1091.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="995.7" y="1102.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="992.7" y="1075.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="995.7" y="1086.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.09%)</title><rect x="992.7" y="1059.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="995.7" y="1070.0"></text>
</g>
<g>
<title>Node::get_int() const (1 samples, 0.09%)</title><rect x="992.7" y="1043.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="995.7" y="1054.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.09%)</title><rect x="993.7" y="1123.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="996.7" y="1134.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.09%)</title><rect x="994.7" y="1155.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="997.7" y="1166.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.09%)</title><rect x="994.7" y="1139.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="997.7" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 0.51%)</title><rect x="995.7" y="1155.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="998.7" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 0.51%)</title><rect x="995.7" y="1139.0" width="6.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="998.7" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (4 samples, 0.34%)</title><rect x="995.7" y="1123.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="998.7" y="1134.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.09%)</title><rect x="995.7" y="1107.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="998.7" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.09%)</title><rect x="996.7" y="1107.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="999.7" y="1118.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.09%)</title><rect x="996.7" y="1091.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="999.7" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.17%)</title><rect x="997.7" y="1107.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1000.7" y="1118.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.09%)</title><rect x="998.7" y="1091.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1001.7" y="1102.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="998.7" y="1075.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1001.7" y="1086.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="998.7" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1001.7" y="1070.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="998.7" y="1043.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1001.7" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.17%)</title><rect x="999.7" y="1123.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1002.7" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.09%)</title><rect x="1001.7" y="1155.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1004.7" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (112 samples, 9.56%)</title><rect x="1002.7" y="1155.0" width="112.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1005.7" y="1166.0">PhaseChaitin::..</text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.09%)</title><rect x="1004.7" y="1139.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1007.7" y="1150.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.09%)</title><rect x="1005.8" y="1139.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1008.8" y="1150.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (4 samples, 0.34%)</title><rect x="1006.8" y="1139.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1009.8" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.43%)</title><rect x="1010.8" y="1139.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1013.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.17%)</title><rect x="1013.8" y="1123.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1016.8" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1013.8" y="1107.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1016.8" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 0.43%)</title><rect x="1015.8" y="1139.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1018.8" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1016.8" y="1123.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1019.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.17%)</title><rect x="1018.8" y="1123.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1021.8" y="1134.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1019.8" y="1107.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1022.8" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (14 samples, 1.19%)</title><rect x="1020.9" y="1139.0" width="14.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1023.9" y="1150.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.09%)</title><rect x="1030.9" y="1123.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1033.9" y="1134.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.09%)</title><rect x="1031.9" y="1123.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1034.9" y="1134.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.09%)</title><rect x="1032.9" y="1123.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1035.9" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="1033.9" y="1123.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1036.9" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="1033.9" y="1107.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1036.9" y="1118.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1033.9" y="1091.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1036.9" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (16 samples, 1.37%)</title><rect x="1034.9" y="1139.0" width="16.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.9" y="1150.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.17%)</title><rect x="1039.0" y="1123.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1042.0" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1041.0" y="1123.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1044.0" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (7 samples, 0.60%)</title><rect x="1043.0" y="1123.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1046.0" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1048.0" y="1107.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1051.0" y="1118.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.09%)</title><rect x="1050.1" y="1123.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1053.1" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.09%)</title><rect x="1051.1" y="1139.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1054.1" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1051.1" y="1123.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1054.1" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (12 samples, 1.02%)</title><rect x="1052.1" y="1139.0" width="12.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1055.1" y="1150.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.09%)</title><rect x="1056.1" y="1123.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1059.1" y="1134.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.09%)</title><rect x="1057.1" y="1123.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1060.1" y="1134.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.26%)</title><rect x="1058.1" y="1123.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1061.1" y="1134.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.09%)</title><rect x="1061.1" y="1123.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1064.1" y="1134.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1062.1" y="1123.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1065.1" y="1134.0"></text>
</g>
<g>
<title>rRegPOper::type() const (1 samples, 0.09%)</title><rect x="1063.1" y="1123.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1066.1" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.17%)</title><rect x="1064.1" y="1139.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1067.1" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.09%)</title><rect x="1065.2" y="1123.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1068.2" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (9 samples, 0.77%)</title><rect x="1066.2" y="1139.0" width="9.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1069.2" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (6 samples, 0.51%)</title><rect x="1067.2" y="1123.0" width="6.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1070.2" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (2 samples, 0.17%)</title><rect x="1073.2" y="1123.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1076.2" y="1134.0"></text>
</g>
<g>
<title>Block::find_remove(Node const*) (1 samples, 0.09%)</title><rect x="1073.2" y="1107.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1076.2" y="1118.0"></text>
</g>
<g>
<title>Node_Array::remove(unsigned int) (1 samples, 0.09%)</title><rect x="1073.2" y="1091.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1076.2" y="1102.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.09%)</title><rect x="1074.2" y="1107.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1077.2" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (2 samples, 0.17%)</title><rect x="1075.2" y="1139.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1078.2" y="1150.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (17 samples, 1.45%)</title><rect x="1077.2" y="1139.0" width="17.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1080.2" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (17 samples, 1.45%)</title><rect x="1077.2" y="1123.0" width="17.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1080.2" y="1134.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (17 samples, 1.45%)</title><rect x="1077.2" y="1107.0" width="17.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1080.2" y="1118.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (5 samples, 0.43%)</title><rect x="1077.2" y="1091.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.2" y="1102.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1080.3" y="1075.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1083.3" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1081.3" y="1075.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1084.3" y="1086.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (9 samples, 0.77%)</title><rect x="1082.3" y="1091.0" width="9.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1085.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.17%)</title><rect x="1091.3" y="1091.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1094.3" y="1102.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1093.3" y="1091.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1096.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.26%)</title><rect x="1094.4" y="1139.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.4" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.26%)</title><rect x="1094.4" y="1123.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1097.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (6 samples, 0.51%)</title><rect x="1097.4" y="1139.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1100.4" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1099.4" y="1123.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1102.4" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.26%)</title><rect x="1100.4" y="1123.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.09%)</title><rect x="1103.4" y="1139.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1106.4" y="1150.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.09%)</title><rect x="1103.4" y="1123.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.4" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (10 samples, 0.85%)</title><rect x="1104.4" y="1139.0" width="10.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1107.4" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.34%)</title><rect x="1110.5" y="1123.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.5" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1113.5" y="1107.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1116.5" y="1118.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1114.5" y="1139.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1117.5" y="1150.0"></text>
</g>
<g>
<title>Compile::Optimize() (62 samples, 5.29%)</title><rect x="1115.5" y="1171.0" width="62.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1118.5" y="1182.0">Compil..</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="1115.5" y="1155.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1115.5" y="1139.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1115.5" y="1123.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.5" y="1134.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1115.5" y="1107.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1118.5" y="1118.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1115.5" y="1091.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.5" y="1102.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1115.5" y="1075.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1118.5" y="1086.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1115.5" y="1059.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.5" y="1070.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1115.5" y="1043.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1118.5" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.17%)</title><rect x="1116.5" y="1155.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.5" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.17%)</title><rect x="1116.5" y="1139.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1119.5" y="1150.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.09%)</title><rect x="1118.5" y="1155.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.5" y="1166.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.09%)</title><rect x="1118.5" y="1139.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1121.5" y="1150.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.09%)</title><rect x="1118.5" y="1123.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1121.5" y="1134.0"></text>
</g>
<g>
<title>TypePtr::singleton() const (1 samples, 0.09%)</title><rect x="1118.5" y="1107.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.5" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (45 samples, 3.84%)</title><rect x="1119.5" y="1155.0" width="45.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.5" y="1166.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.09%)</title><rect x="1119.5" y="1139.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.26%)</title><rect x="1120.5" y="1139.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1123.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1122.5" y="1123.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1125.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (28 samples, 2.39%)</title><rect x="1123.5" y="1139.0" width="28.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.5" y="1150.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (24 samples, 2.05%)</title><rect x="1127.6" y="1123.0" width="24.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.6" y="1134.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1128.6" y="1107.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (22 samples, 1.88%)</title><rect x="1129.6" y="1107.0" width="22.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.6" y="1118.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1150.7" y="1091.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1150.7" y="1075.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.34%)</title><rect x="1151.7" y="1139.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.09%)</title><rect x="1154.8" y="1123.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (6 samples, 0.51%)</title><rect x="1155.8" y="1139.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.09%)</title><rect x="1157.8" y="1123.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.09%)</title><rect x="1157.8" y="1107.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.17%)</title><rect x="1158.8" y="1123.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.8" y="1134.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.09%)</title><rect x="1159.8" y="1107.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.8" y="1118.0"></text>
</g>
<g>
<title>StoreINode::Opcode() const (1 samples, 0.09%)</title><rect x="1160.8" y="1123.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.26%)</title><rect x="1161.8" y="1139.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.17%)</title><rect x="1161.8" y="1123.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1161.8" y="1107.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.8" y="1118.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1162.8" y="1107.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.8" y="1118.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1162.8" y="1091.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.8" y="1102.0"></text>
</g>
<g>
<title>RegionNode::hash() const (1 samples, 0.09%)</title><rect x="1163.8" y="1123.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (11 samples, 0.94%)</title><rect x="1164.8" y="1155.0" width="11.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.8" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (11 samples, 0.94%)</title><rect x="1164.8" y="1139.0" width="11.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.8" y="1150.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1165.8" y="1123.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.8" y="1134.0"></text>
</g>
<g>
<title>IfNode::IfNode(Node*, Node*, float, float) (1 samples, 0.09%)</title><rect x="1165.8" y="1107.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.8" y="1118.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.09%)</title><rect x="1165.8" y="1091.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.8" y="1102.0"></text>
</g>
<g>
<title>IfNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1166.8" y="1123.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.8" y="1134.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1167.8" y="1123.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.8" y="1134.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1167.8" y="1107.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.8" y="1118.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1167.8" y="1091.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.8" y="1102.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1167.8" y="1075.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.8" y="1086.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1168.9" y="1123.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.9" y="1134.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1168.9" y="1107.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.9" y="1118.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1168.9" y="1091.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.9" y="1102.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1168.9" y="1075.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.9" y="1086.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1169.9" y="1123.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.9" y="1134.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.09%)</title><rect x="1169.9" y="1107.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.9" y="1118.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.09%)</title><rect x="1169.9" y="1091.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.26%)</title><rect x="1170.9" y="1123.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.9" y="1134.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1171.9" y="1107.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1172.9" y="1107.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.9" y="1118.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.09%)</title><rect x="1172.9" y="1091.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.9" y="1102.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1173.9" y="1123.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.9" y="1134.0"></text>
</g>
<g>
<title>TypeNarrowPtr::filter_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1173.9" y="1107.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.9" y="1118.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1173.9" y="1091.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.9" y="1102.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1173.9" y="1075.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.9" y="1086.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1174.9" y="1123.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1174.9" y="1107.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1174.9" y="1091.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.9" y="1102.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.09%)</title><rect x="1174.9" y="1075.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.9" y="1086.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.17%)</title><rect x="1175.9" y="1155.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.17%)</title><rect x="1175.9" y="1139.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.17%)</title><rect x="1175.9" y="1123.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.9" y="1134.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1175.9" y="1107.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.9" y="1118.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.09%)</title><rect x="1175.9" y="1091.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.9" y="1102.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1176.9" y="1107.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.9" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.68%)</title><rect x="1177.9" y="1171.0" width="8.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.68%)</title><rect x="1177.9" y="1155.0" width="8.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.9" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.68%)</title><rect x="1177.9" y="1139.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.68%)</title><rect x="1177.9" y="1123.0" width="8.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.9" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.68%)</title><rect x="1177.9" y="1107.0" width="8.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.68%)</title><rect x="1177.9" y="1091.0" width="8.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.43%)</title><rect x="1177.9" y="1075.0" width="5.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.9" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.43%)</title><rect x="1177.9" y="1059.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.43%)</title><rect x="1177.9" y="1043.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.9" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.43%)</title><rect x="1177.9" y="1027.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.9" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.43%)</title><rect x="1177.9" y="1011.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.43%)</title><rect x="1177.9" y="995.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.9" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1177.9" y="979.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.9" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1177.9" y="963.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1177.9" y="947.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1177.9" y="931.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.09%)</title><rect x="1177.9" y="915.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="926.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.09%)</title><rect x="1177.9" y="899.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="910.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.09%)</title><rect x="1177.9" y="883.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.9" y="894.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.09%)</title><rect x="1177.9" y="867.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.9" y="878.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.09%)</title><rect x="1177.9" y="851.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.9" y="862.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.09%)</title><rect x="1177.9" y="835.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.9" y="915.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.9" y="899.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.9" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.9" y="883.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.9" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.9" y="867.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.9" y="851.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.9" y="835.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.9" y="819.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.09%)</title><rect x="1178.9" y="803.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="814.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.09%)</title><rect x="1178.9" y="787.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.9" y="798.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.09%)</title><rect x="1178.9" y="771.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.9" y="782.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.09%)</title><rect x="1178.9" y="755.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.9" y="766.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1178.9" y="739.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.9" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1178.9" y="723.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.9" y="734.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1178.9" y="707.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.9" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.09%)</title><rect x="1178.9" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.9" y="702.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.09%)</title><rect x="1178.9" y="675.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.9" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1179.9" y="979.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.9" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1179.9" y="963.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1179.9" y="947.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1179.9" y="931.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1179.9" y="915.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1179.9" y="899.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1179.9" y="883.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1179.9" y="867.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.9" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1179.9" y="851.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1179.9" y="835.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1179.9" y="819.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1179.9" y="803.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1179.9" y="787.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1179.9" y="771.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1179.9" y="755.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1179.9" y="739.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1179.9" y="723.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1179.9" y="707.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1179.9" y="691.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1179.9" y="675.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.9" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1179.9" y="659.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1179.9" y="643.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1179.9" y="627.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1179.9" y="611.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1179.9" y="595.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1179.9" y="579.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.9" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1179.9" y="563.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1179.9" y="547.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1179.9" y="531.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1179.9" y="515.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1179.9" y="499.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="510.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1179.9" y="483.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="494.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1179.9" y="467.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="478.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1179.9" y="451.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.9" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1179.9" y="435.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.9" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1179.9" y="419.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1179.9" y="403.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.9" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1179.9" y="387.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1179.9" y="371.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1179.9" y="355.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.9" y="366.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1179.9" y="339.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.9" y="483.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1180.9" y="467.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1180.9" y="451.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1180.9" y="435.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1180.9" y="419.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1180.9" y="403.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.9" y="387.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1180.9" y="371.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1180.9" y="355.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1180.9" y="339.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1180.9" y="323.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1180.9" y="307.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="318.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1180.9" y="291.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="302.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1180.9" y="275.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="286.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1180.9" y="259.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1180.9" y="243.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1180.9" y="227.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1180.9" y="211.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1180.9" y="195.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.9" y="291.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.9" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.9" y="275.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.9" y="259.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.9" y="243.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.9" y="227.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.9" y="211.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.9" y="222.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1181.9" y="195.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.9" y="206.0"></text>
</g>
<g>
<title>ciBytecodeStream::has_method_type() (1 samples, 0.09%)</title><rect x="1181.9" y="179.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.9" y="190.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1183.0" y="1075.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.0" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1183.0" y="1059.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.0" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1183.0" y="1043.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.0" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1183.0" y="1027.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.0" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1183.0" y="1011.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1183.0" y="995.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.0" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1183.0" y="979.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.0" y="990.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1183.0" y="963.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.0" y="974.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1183.0" y="947.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.0" y="958.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1183.0" y="931.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.0" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1183.0" y="915.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.0" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1183.0" y="899.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.0" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1183.0" y="883.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.0" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1183.0" y="867.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.0" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1183.0" y="851.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.0" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1183.0" y="835.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.0" y="846.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1183.0" y="819.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.0" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1183.0" y="803.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.0" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1183.0" y="787.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="798.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1183.0" y="771.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.0" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1183.0" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.0" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1183.0" y="739.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.0" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.09%)</title><rect x="1183.0" y="723.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.0" y="734.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.09%)</title><rect x="1183.0" y="707.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.0" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1184.0" y="963.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.0" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1184.0" y="947.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1184.0" y="931.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1184.0" y="915.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1184.0" y="899.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1184.0" y="883.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.0" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1184.0" y="867.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.0" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1184.0" y="851.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1184.0" y="835.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1184.0" y="819.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1184.0" y="803.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1184.0" y="787.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.0" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1184.0" y="771.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.0" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1184.0" y="755.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1184.0" y="739.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1184.0" y="723.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1184.0" y="707.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1184.0" y="691.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.0" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1184.0" y="675.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.0" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1184.0" y="659.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1184.0" y="643.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1184.0" y="627.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1184.0" y="611.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1184.0" y="595.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.0" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1184.0" y="579.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.0" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1184.0" y="563.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1184.0" y="547.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1184.0" y="531.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1184.0" y="515.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1184.0" y="499.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.0" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.0" y="483.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.0" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.0" y="467.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.0" y="451.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.0" y="435.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.0" y="419.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.0" y="403.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.0" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.0" y="387.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.0" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.0" y="371.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.0" y="355.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.0" y="339.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.0" y="323.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.0" y="307.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.0" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.0" y="291.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.0" y="302.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.0" y="275.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.0" y="286.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.09%)</title><rect x="1184.0" y="259.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.0" y="270.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1184.0" y="243.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.0" y="254.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1184.0" y="227.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.0" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1185.0" y="483.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.0" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1185.0" y="467.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.0" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1185.0" y="451.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1185.0" y="435.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1185.0" y="419.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1185.0" y="403.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1185.0" y="387.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.0" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1185.0" y="371.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.0" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1185.0" y="355.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1185.0" y="339.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1185.0" y="323.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1185.0" y="307.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1185.0" y="291.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.0" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1185.0" y="275.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.0" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1185.0" y="259.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1185.0" y="243.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1185.0" y="227.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1185.0" y="211.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1185.0" y="195.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.0" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1185.0" y="179.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.0" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1185.0" y="163.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1185.0" y="147.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1185.0" y="131.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1185.0" y="115.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.0" y="126.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1185.0" y="99.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.0" y="110.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1185.0" y="83.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.0" y="94.0"></text>
</g>
<g>
<title>OptoRuntime::uncommon_trap_Type() (1 samples, 0.09%)</title><rect x="1185.0" y="67.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.0" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1185.0" y="51.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.0" y="62.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1185.0" y="35.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.0" y="46.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.09%)</title><rect x="1186.0" y="1219.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.0" y="1230.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.09%)</title><rect x="1186.0" y="1203.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.0" y="1214.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.09%)</title><rect x="1186.0" y="1187.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.0" y="1198.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.09%)</title><rect x="1186.0" y="1171.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.0" y="1182.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.09%)</title><rect x="1187.0" y="1235.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.0" y="1246.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.09%)</title><rect x="1187.0" y="1219.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.0" y="1230.0"></text>
</g>
<g>
<title>Profiler::CompiledMethodLoad(_jvmtiEnv*, _jmethodID*, int, void const*, int, _jvmtiAddrLocationMap const*, void const*) (1 samples, 0.09%)</title><rect x="1187.0" y="1203.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.0" y="1214.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.17%)</title><rect x="1188.0" y="1267.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.0" y="1278.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.17%)</title><rect x="1188.0" y="1251.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.0" y="1262.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.17%)</title><rect x="1188.0" y="1235.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.0" y="1246.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.17%)</title><rect x="1188.0" y="1219.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.0" y="1230.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.17%)</title><rect x="1188.0" y="1203.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.0" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.17%)</title><rect x="1188.0" y="1187.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.0" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1188.0" y="1171.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.0" y="1182.0"></text>
</g>
<g>
<title>G1RemSet::prepare_for_oops_into_collection_set_do() (1 samples, 0.09%)</title><rect x="1188.0" y="1155.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.0" y="1166.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::concatenate_logs() (1 samples, 0.09%)</title><rect x="1188.0" y="1139.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.0" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1189.0" y="1171.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.0" y="1182.0"></text>
</g>
</g>
</svg>
