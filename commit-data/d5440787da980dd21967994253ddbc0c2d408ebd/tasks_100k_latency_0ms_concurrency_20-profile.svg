<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="805"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="805"> </text>
<g id="frames">
<g>
<title>all (162 samples, 100.00%)</title><rect x="10.0" y="771.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="782.0">all</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.62%)</title><rect x="10.0" y="755.0" width="7.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>monitorexit_nofpu Runtime1 stub (1 samples, 0.62%)</title><rect x="10.0" y="739.0" width="7.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (30 samples, 18.52%)</title><rect x="17.3" y="755.0" width="218.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.3" y="766.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (30 samples, 18.52%)</title><rect x="17.3" y="739.0" width="218.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.3" y="750.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.62%)</title><rect x="17.3" y="723.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.3" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.62%)</title><rect x="17.3" y="707.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1385534085.accept (1 samples, 0.62%)</title><rect x="17.3" y="691.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.62%)</title><rect x="17.3" y="675.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.62%)</title><rect x="17.3" y="659.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.3" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.62%)</title><rect x="17.3" y="643.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.3" y="654.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (17 samples, 10.49%)</title><rect x="24.6" y="723.0" width="123.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.6" y="734.0">java/lang/Itera..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1383856192.accept (16 samples, 9.88%)</title><rect x="24.6" y="707.0" width="116.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.6" y="718.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (16 samples, 9.88%)</title><rect x="24.6" y="691.0" width="116.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.6" y="702.0">com/linecorp/d..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.62%)</title><rect x="24.6" y="675.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="27.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (12 samples, 7.41%)</title><rect x="31.9" y="675.0" width="87.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.9" y="686.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (12 samples, 7.41%)</title><rect x="31.9" y="659.0" width="87.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="34.9" y="670.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (12 samples, 7.41%)</title><rect x="31.9" y="643.0" width="87.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="34.9" y="654.0">com/lineco..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (10 samples, 6.17%)</title><rect x="46.4" y="627.0" width="72.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="49.4" y="638.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (10 samples, 6.17%)</title><rect x="46.4" y="611.0" width="72.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="49.4" y="622.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (10 samples, 6.17%)</title><rect x="46.4" y="595.0" width="72.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="49.4" y="606.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (9 samples, 5.56%)</title><rect x="53.7" y="579.0" width="65.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="56.7" y="590.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.62%)</title><rect x="61.0" y="563.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="64.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.62%)</title><rect x="61.0" y="547.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="64.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.62%)</title><rect x="61.0" y="531.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="64.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 4.32%)</title><rect x="68.3" y="563.0" width="51.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="71.3" y="574.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 4.32%)</title><rect x="68.3" y="547.0" width="51.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="71.3" y="558.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 4.32%)</title><rect x="68.3" y="531.0" width="51.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="71.3" y="542.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 4.32%)</title><rect x="68.3" y="515.0" width="51.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="71.3" y="526.0">java/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (6 samples, 3.70%)</title><rect x="75.6" y="499.0" width="43.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="78.6" y="510.0">sun/..</text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 3.70%)</title><rect x="75.6" y="483.0" width="43.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="78.6" y="494.0">Unsa..</text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 1.85%)</title><rect x="75.6" y="467.0" width="21.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="78.6" y="478.0">_..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.62%)</title><rect x="97.4" y="467.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="100.4" y="478.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 1.23%)</title><rect x="104.7" y="467.0" width="14.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="107.7" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 1.23%)</title><rect x="119.3" y="675.0" width="14.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="122.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.62%)</title><rect x="126.5" y="659.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="129.5" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.62%)</title><rect x="133.8" y="675.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="136.8" y="686.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.62%)</title><rect x="133.8" y="659.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="136.8" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.62%)</title><rect x="133.8" y="643.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="136.8" y="654.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.62%)</title><rect x="141.1" y="707.0" width="7.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="144.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 7.41%)</title><rect x="148.4" y="723.0" width="87.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="151.4" y="734.0">org/apache..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 7.41%)</title><rect x="148.4" y="707.0" width="87.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="151.4" y="718.0">org/apache..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.62%)</title><rect x="148.4" y="691.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="151.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquire (1 samples, 0.62%)</title><rect x="148.4" y="675.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="151.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 4.94%)</title><rect x="155.7" y="691.0" width="58.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="158.7" y="702.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (8 samples, 4.94%)</title><rect x="155.7" y="675.0" width="58.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="158.7" y="686.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (8 samples, 4.94%)</title><rect x="155.7" y="659.0" width="58.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="158.7" y="670.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (8 samples, 4.94%)</title><rect x="155.7" y="643.0" width="58.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="158.7" y="654.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (8 samples, 4.94%)</title><rect x="155.7" y="627.0" width="58.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="158.7" y="638.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.85%)</title><rect x="155.7" y="611.0" width="21.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="158.7" y="622.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.62%)</title><rect x="155.7" y="595.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="158.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.62%)</title><rect x="155.7" y="579.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="158.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$4100 (1 samples, 0.62%)</title><rect x="155.7" y="563.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="158.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordTopicFetchMetrics (1 samples, 0.62%)</title><rect x="155.7" y="547.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="158.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.62%)</title><rect x="163.0" y="595.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="166.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.62%)</title><rect x="163.0" y="579.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="166.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.62%)</title><rect x="163.0" y="563.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="166.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.62%)</title><rect x="163.0" y="547.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="166.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.62%)</title><rect x="163.0" y="531.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="166.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.62%)</title><rect x="163.0" y="515.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="166.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.62%)</title><rect x="163.0" y="499.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="166.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.62%)</title><rect x="170.2" y="595.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="173.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.uncompressedIterator (1 samples, 0.62%)</title><rect x="170.2" y="579.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="173.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.&lt;init&gt; (1 samples, 0.62%)</title><rect x="170.2" y="563.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="173.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.&lt;init&gt; (1 samples, 0.62%)</title><rect x="170.2" y="547.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="173.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.baseOffset (1 samples, 0.62%)</title><rect x="170.2" y="531.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="173.2" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getLong (1 samples, 0.62%)</title><rect x="170.2" y="515.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="173.2" y="526.0"></text>
</g>
<g>
<title>java/nio/Bits.getLong (1 samples, 0.62%)</title><rect x="170.2" y="499.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="173.2" y="510.0"></text>
</g>
<g>
<title>java/nio/Bits.getLongB (1 samples, 0.62%)</title><rect x="170.2" y="483.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="173.2" y="494.0"></text>
</g>
<g>
<title>java/nio/Bits.makeLong (1 samples, 0.62%)</title><rect x="170.2" y="467.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="173.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (5 samples, 3.09%)</title><rect x="177.5" y="611.0" width="36.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="180.5" y="622.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (5 samples, 3.09%)</title><rect x="177.5" y="595.0" width="36.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="180.5" y="606.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (3 samples, 1.85%)</title><rect x="177.5" y="579.0" width="21.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="180.5" y="590.0">o..</text>
</g>
<g>
<title>java/util/Optional.of (3 samples, 1.85%)</title><rect x="177.5" y="563.0" width="21.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="180.5" y="574.0">j..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.62%)</title><rect x="192.1" y="547.0" width="7.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="195.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 1.23%)</title><rect x="199.4" y="579.0" width="14.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="202.4" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 1.23%)</title><rect x="199.4" y="563.0" width="14.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="202.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.62%)</title><rect x="214.0" y="691.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.62%)</title><rect x="214.0" y="675.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="217.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.62%)</title><rect x="214.0" y="659.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="217.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.62%)</title><rect x="214.0" y="643.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="217.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.62%)</title><rect x="214.0" y="627.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.62%)</title><rect x="214.0" y="611.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="217.0" y="622.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.62%)</title><rect x="214.0" y="595.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="217.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.62%)</title><rect x="214.0" y="579.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="217.0" y="590.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.62%)</title><rect x="214.0" y="563.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="217.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.62%)</title><rect x="221.2" y="691.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="224.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.62%)</title><rect x="221.2" y="675.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.62%)</title><rect x="221.2" y="659.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="224.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.62%)</title><rect x="221.2" y="643.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.62%)</title><rect x="221.2" y="627.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="224.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.62%)</title><rect x="221.2" y="611.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.62%)</title><rect x="221.2" y="595.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.62%)</title><rect x="221.2" y="579.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="224.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.62%)</title><rect x="221.2" y="563.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="224.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.62%)</title><rect x="221.2" y="547.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="224.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.62%)</title><rect x="221.2" y="531.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="224.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.62%)</title><rect x="221.2" y="515.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="224.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.62%)</title><rect x="228.5" y="691.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.62%)</title><rect x="228.5" y="675.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.62%)</title><rect x="228.5" y="659.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.62%)</title><rect x="228.5" y="643.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.62%)</title><rect x="228.5" y="627.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="231.5" y="638.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.62%)</title><rect x="228.5" y="611.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.5" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.62%)</title><rect x="228.5" y="595.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.5" y="606.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.62%)</title><rect x="228.5" y="579.0" width="7.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="231.5" y="590.0"></text>
</g>
<g>
<title>java/lang/Thread.run (50 samples, 30.86%)</title><rect x="235.8" y="755.0" width="364.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.8" y="766.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (50 samples, 30.86%)</title><rect x="235.8" y="739.0" width="364.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="238.8" y="750.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (50 samples, 30.86%)</title><rect x="235.8" y="723.0" width="364.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="238.8" y="734.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/427750945.run (30 samples, 18.52%)</title><rect x="250.4" y="707.0" width="218.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="253.4" y="718.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (30 samples, 18.52%)</title><rect x="250.4" y="691.0" width="218.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="253.4" y="702.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (30 samples, 18.52%)</title><rect x="250.4" y="675.0" width="218.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="253.4" y="686.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (29 samples, 17.90%)</title><rect x="250.4" y="659.0" width="211.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="253.4" y="670.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (14 samples, 8.64%)</title><rect x="250.4" y="643.0" width="101.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.4" y="654.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (14 samples, 8.64%)</title><rect x="250.4" y="627.0" width="101.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.4" y="638.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (14 samples, 8.64%)</title><rect x="250.4" y="611.0" width="101.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="253.4" y="622.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (14 samples, 8.64%)</title><rect x="250.4" y="595.0" width="101.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="253.4" y="606.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (14 samples, 8.64%)</title><rect x="250.4" y="579.0" width="101.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="253.4" y="590.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (14 samples, 8.64%)</title><rect x="250.4" y="563.0" width="101.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.4" y="574.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (8 samples, 4.94%)</title><rect x="250.4" y="547.0" width="58.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.4" y="558.0">com/fa..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.62%)</title><rect x="250.4" y="531.0" width="7.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="253.4" y="542.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.62%)</title><rect x="250.4" y="515.0" width="7.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="253.4" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 1.23%)</title><rect x="257.7" y="531.0" width="14.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 1.23%)</title><rect x="257.7" y="515.0" width="14.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="260.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 1.23%)</title><rect x="257.7" y="499.0" width="14.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="260.7" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.23%)</title><rect x="257.7" y="483.0" width="14.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="260.7" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 1.23%)</title><rect x="257.7" y="467.0" width="14.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.7" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 1.23%)</title><rect x="257.7" y="451.0" width="14.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="260.7" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 2.47%)</title><rect x="272.2" y="531.0" width="29.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.2" y="542.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 2.47%)</title><rect x="272.2" y="515.0" width="29.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="275.2" y="526.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.62%)</title><rect x="286.8" y="499.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="289.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.62%)</title><rect x="286.8" y="483.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.62%)</title><rect x="294.1" y="499.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="297.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.62%)</title><rect x="294.1" y="483.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="297.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.62%)</title><rect x="294.1" y="467.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="297.1" y="478.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.62%)</title><rect x="301.4" y="531.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="304.4" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (3 samples, 1.85%)</title><rect x="308.6" y="547.0" width="21.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="311.6" y="558.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 1.85%)</title><rect x="308.6" y="531.0" width="21.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="311.6" y="542.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.62%)</title><rect x="308.6" y="515.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="311.6" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.62%)</title><rect x="308.6" y="499.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="311.6" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (2 samples, 1.23%)</title><rect x="315.9" y="515.0" width="14.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="318.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (2 samples, 1.23%)</title><rect x="315.9" y="499.0" width="14.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="318.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 1.23%)</title><rect x="315.9" y="483.0" width="14.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="318.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.62%)</title><rect x="315.9" y="467.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="318.9" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.62%)</title><rect x="315.9" y="451.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="318.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.62%)</title><rect x="315.9" y="435.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="318.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.62%)</title><rect x="315.9" y="419.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="318.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.62%)</title><rect x="315.9" y="403.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="318.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.62%)</title><rect x="315.9" y="387.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="318.9" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.62%)</title><rect x="315.9" y="371.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="318.9" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.62%)</title><rect x="315.9" y="355.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="318.9" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.62%)</title><rect x="323.2" y="467.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="326.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.62%)</title><rect x="323.2" y="451.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="326.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.62%)</title><rect x="323.2" y="435.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="326.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.62%)</title><rect x="323.2" y="419.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="326.2" y="430.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.62%)</title><rect x="323.2" y="403.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="326.2" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 1.85%)</title><rect x="330.5" y="547.0" width="21.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="333.5" y="558.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 1.85%)</title><rect x="330.5" y="531.0" width="21.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="333.5" y="542.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 1.85%)</title><rect x="330.5" y="515.0" width="21.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="333.5" y="526.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 1.85%)</title><rect x="330.5" y="499.0" width="21.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="333.5" y="510.0">c..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 1.85%)</title><rect x="330.5" y="483.0" width="21.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="333.5" y="494.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (14 samples, 8.64%)</title><rect x="352.3" y="643.0" width="102.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="355.3" y="654.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (2 samples, 1.23%)</title><rect x="352.3" y="627.0" width="14.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="355.3" y="638.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (2 samples, 1.23%)</title><rect x="352.3" y="611.0" width="14.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="355.3" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (2 samples, 1.23%)</title><rect x="352.3" y="595.0" width="14.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="355.3" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.62%)</title><rect x="352.3" y="579.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="355.3" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.62%)</title><rect x="352.3" y="563.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="355.3" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.62%)</title><rect x="352.3" y="547.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="355.3" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.62%)</title><rect x="352.3" y="531.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="355.3" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.62%)</title><rect x="359.6" y="579.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="362.6" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.62%)</title><rect x="359.6" y="563.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="362.6" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.62%)</title><rect x="359.6" y="547.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="362.6" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.62%)</title><rect x="359.6" y="531.0" width="7.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="362.6" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.62%)</title><rect x="359.6" y="515.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="362.6" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (9 samples, 5.56%)</title><rect x="366.9" y="627.0" width="65.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="369.9" y="638.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (9 samples, 5.56%)</title><rect x="366.9" y="611.0" width="65.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="369.9" y="622.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 1.85%)</title><rect x="366.9" y="595.0" width="21.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="369.9" y="606.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.85%)</title><rect x="366.9" y="579.0" width="21.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="369.9" y="590.0">j..</text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.62%)</title><rect x="381.5" y="563.0" width="7.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="384.5" y="574.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.62%)</title><rect x="388.8" y="595.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="391.8" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.62%)</title><rect x="388.8" y="579.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="391.8" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.62%)</title><rect x="388.8" y="563.0" width="7.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="391.8" y="574.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.62%)</title><rect x="396.0" y="595.0" width="7.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="399.0" y="606.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (4 samples, 2.47%)</title><rect x="403.3" y="595.0" width="29.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="406.3" y="606.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (4 samples, 2.47%)</title><rect x="403.3" y="579.0" width="29.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="406.3" y="590.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.62%)</title><rect x="403.3" y="563.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="406.3" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.62%)</title><rect x="403.3" y="547.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="406.3" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.62%)</title><rect x="403.3" y="531.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="406.3" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.62%)</title><rect x="403.3" y="515.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="406.3" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.85%)</title><rect x="410.6" y="563.0" width="21.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="413.6" y="574.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.85%)</title><rect x="410.6" y="547.0" width="21.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="413.6" y="558.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.62%)</title><rect x="425.2" y="531.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="428.2" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (3 samples, 1.85%)</title><rect x="432.5" y="627.0" width="21.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="435.5" y="638.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (3 samples, 1.85%)</title><rect x="432.5" y="611.0" width="21.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="435.5" y="622.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/564617543.process (1 samples, 0.62%)</title><rect x="432.5" y="595.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="435.5" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.62%)</title><rect x="432.5" y="579.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="435.5" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.62%)</title><rect x="432.5" y="563.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="435.5" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.62%)</title><rect x="432.5" y="547.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="435.5" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.62%)</title><rect x="432.5" y="531.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="435.5" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.62%)</title><rect x="432.5" y="515.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="435.5" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.62%)</title><rect x="432.5" y="499.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="435.5" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.62%)</title><rect x="432.5" y="483.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="435.5" y="494.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.62%)</title><rect x="432.5" y="467.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="435.5" y="478.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.62%)</title><rect x="432.5" y="451.0" width="7.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="435.5" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.62%)</title><rect x="439.8" y="595.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="442.8" y="606.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.62%)</title><rect x="439.8" y="579.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="442.8" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.62%)</title><rect x="447.0" y="595.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="450.0" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.62%)</title><rect x="447.0" y="579.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="450.0" y="590.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.62%)</title><rect x="447.0" y="563.0" width="7.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="450.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.62%)</title><rect x="454.3" y="643.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="457.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.62%)</title><rect x="454.3" y="627.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="457.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.62%)</title><rect x="454.3" y="611.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="457.3" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/40569266.accept (1 samples, 0.62%)</title><rect x="454.3" y="595.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="457.3" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (1 samples, 0.62%)</title><rect x="454.3" y="579.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="457.3" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1798780163.complete (1 samples, 0.62%)</title><rect x="454.3" y="563.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="457.3" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (1 samples, 0.62%)</title><rect x="454.3" y="547.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="457.3" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.62%)</title><rect x="454.3" y="531.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="457.3" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.62%)</title><rect x="454.3" y="515.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="457.3" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.62%)</title><rect x="454.3" y="499.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="457.3" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.62%)</title><rect x="454.3" y="483.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="457.3" y="494.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.62%)</title><rect x="454.3" y="467.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="457.3" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.62%)</title><rect x="461.6" y="659.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="464.6" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.62%)</title><rect x="461.6" y="643.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="464.6" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.62%)</title><rect x="461.6" y="627.0" width="7.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="464.6" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.62%)</title><rect x="461.6" y="611.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="464.6" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.62%)</title><rect x="461.6" y="595.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="464.6" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.62%)</title><rect x="461.6" y="579.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="464.6" y="590.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.62%)</title><rect x="461.6" y="563.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="464.6" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.62%)</title><rect x="461.6" y="547.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="464.6" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 1.23%)</title><rect x="468.9" y="707.0" width="14.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="471.9" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.62%)</title><rect x="476.2" y="691.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="479.2" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.273] (1 samples, 0.62%)</title><rect x="476.2" y="675.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="479.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.62%)</title><rect x="483.5" y="707.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="486.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.62%)</title><rect x="483.5" y="691.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="486.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.62%)</title><rect x="483.5" y="675.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="486.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 1.23%)</title><rect x="490.7" y="707.0" width="14.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="493.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.62%)</title><rect x="498.0" y="691.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="501.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.62%)</title><rect x="498.0" y="675.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="501.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (13 samples, 8.02%)</title><rect x="505.3" y="707.0" width="94.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="508.3" y="718.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (13 samples, 8.02%)</title><rect x="505.3" y="691.0" width="94.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="508.3" y="702.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (10 samples, 6.17%)</title><rect x="505.3" y="675.0" width="72.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="508.3" y="686.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (9 samples, 5.56%)</title><rect x="512.6" y="659.0" width="65.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="515.6" y="670.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (9 samples, 5.56%)</title><rect x="512.6" y="643.0" width="65.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="515.6" y="654.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Park (8 samples, 4.94%)</title><rect x="512.6" y="627.0" width="58.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="515.6" y="638.0">Unsafe..</text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.62%)</title><rect x="519.9" y="611.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="522.9" y="622.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.62%)</title><rect x="527.2" y="611.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="530.2" y="622.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.62%)</title><rect x="527.2" y="595.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="530.2" y="606.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.62%)</title><rect x="534.4" y="611.0" width="7.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="537.4" y="622.0"></text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 2.47%)</title><rect x="541.7" y="611.0" width="29.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="544.7" y="622.0">__..</text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.62%)</title><rect x="570.9" y="627.0" width="7.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="573.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.85%)</title><rect x="578.1" y="675.0" width="21.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="581.1" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.85%)</title><rect x="578.1" y="659.0" width="21.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="581.1" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.85%)</title><rect x="578.1" y="643.0" width="21.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="581.1" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.85%)</title><rect x="578.1" y="627.0" width="21.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="581.1" y="638.0">j..</text>
</g>
<g>
<title>start_thread (81 samples, 50.00%)</title><rect x="600.0" y="755.0" width="590.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="603.0" y="766.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (81 samples, 50.00%)</title><rect x="600.0" y="739.0" width="590.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="603.0" y="750.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 6.79%)</title><rect x="600.0" y="723.0" width="80.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="603.0" y="734.0">GangWorke..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 1.85%)</title><rect x="600.0" y="707.0" width="21.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="603.0" y="718.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 1.85%)</title><rect x="600.0" y="691.0" width="21.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="603.0" y="702.0">G..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.62%)</title><rect x="600.0" y="675.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="603.0" y="686.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.23%)</title><rect x="607.3" y="675.0" width="14.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="610.3" y="686.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (8 samples, 4.94%)</title><rect x="621.9" y="707.0" width="58.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="624.9" y="718.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 3.70%)</title><rect x="621.9" y="691.0" width="43.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="624.9" y="702.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 1.85%)</title><rect x="621.9" y="675.0" width="21.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="624.9" y="686.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.23%)</title><rect x="629.1" y="659.0" width="14.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="632.1" y="670.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 1.85%)</title><rect x="643.7" y="675.0" width="21.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="646.7" y="686.0">G..</text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.62%)</title><rect x="665.6" y="691.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="668.6" y="702.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.62%)</title><rect x="665.6" y="675.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="668.6" y="686.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.62%)</title><rect x="665.6" y="659.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="668.6" y="670.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.62%)</title><rect x="665.6" y="643.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="668.6" y="654.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.62%)</title><rect x="672.8" y="691.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="675.8" y="702.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.62%)</title><rect x="672.8" y="675.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="675.8" y="686.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.62%)</title><rect x="672.8" y="659.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="675.8" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.62%)</title><rect x="672.8" y="643.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="675.8" y="654.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.62%)</title><rect x="672.8" y="627.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="675.8" y="638.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.62%)</title><rect x="672.8" y="611.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="675.8" y="622.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.62%)</title><rect x="672.8" y="595.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="675.8" y="606.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (69 samples, 42.59%)</title><rect x="680.1" y="723.0" width="502.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="683.1" y="734.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (69 samples, 42.59%)</title><rect x="680.1" y="707.0" width="502.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="683.1" y="718.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (69 samples, 42.59%)</title><rect x="680.1" y="691.0" width="502.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="683.1" y="702.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (68 samples, 41.98%)</title><rect x="680.1" y="675.0" width="495.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="683.1" y="686.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (68 samples, 41.98%)</title><rect x="680.1" y="659.0" width="495.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="683.1" y="670.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bo..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.62%)</title><rect x="680.1" y="643.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="683.1" y="654.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.62%)</title><rect x="680.1" y="627.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="683.1" y="638.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.62%)</title><rect x="680.1" y="611.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="683.1" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.62%)</title><rect x="680.1" y="595.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="683.1" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.62%)</title><rect x="680.1" y="579.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="683.1" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.62%)</title><rect x="680.1" y="563.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="683.1" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.62%)</title><rect x="680.1" y="547.0" width="7.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="683.1" y="558.0"></text>
</g>
<g>
<title>ciExceptionHandlerStream::count() (1 samples, 0.62%)</title><rect x="680.1" y="531.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="683.1" y="542.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (34 samples, 20.99%)</title><rect x="687.4" y="643.0" width="247.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="690.4" y="654.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 1.23%)</title><rect x="687.4" y="627.0" width="14.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="690.4" y="638.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.62%)</title><rect x="687.4" y="611.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="690.4" y="622.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.62%)</title><rect x="694.7" y="611.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="697.7" y="622.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.62%)</title><rect x="694.7" y="595.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="697.7" y="606.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.62%)</title><rect x="694.7" y="579.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="697.7" y="590.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.62%)</title><rect x="694.7" y="563.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="697.7" y="574.0"></text>
</g>
<g>
<title>MacroAssembler::int3() (1 samples, 0.62%)</title><rect x="694.7" y="547.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="697.7" y="558.0"></text>
</g>
<g>
<title>AddressLiteral::AddressLiteral(unsigned char*, relocInfo::relocType) (1 samples, 0.62%)</title><rect x="694.7" y="531.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="697.7" y="542.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.23%)</title><rect x="702.0" y="627.0" width="14.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="705.0" y="638.0"></text>
</g>
<g>
<title>testI_regNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.62%)</title><rect x="709.3" y="611.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="712.3" y="622.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 2.47%)</title><rect x="716.5" y="627.0" width="29.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="719.5" y="638.0">Ma..</text>
</g>
<g>
<title>ConLNode::Opcode() const (1 samples, 0.62%)</title><rect x="716.5" y="611.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="719.5" y="622.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.85%)</title><rect x="723.8" y="611.0" width="21.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="726.8" y="622.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.62%)</title><rect x="731.1" y="595.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="734.1" y="606.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.62%)</title><rect x="738.4" y="595.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="741.4" y="606.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.62%)</title><rect x="738.4" y="579.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="741.4" y="590.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.62%)</title><rect x="738.4" y="563.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="741.4" y="574.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.62%)</title><rect x="738.4" y="547.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="741.4" y="558.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.62%)</title><rect x="738.4" y="531.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="741.4" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 2.47%)</title><rect x="745.7" y="627.0" width="29.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="748.7" y="638.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 2.47%)</title><rect x="745.7" y="611.0" width="29.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="748.7" y="622.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.62%)</title><rect x="745.7" y="595.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="748.7" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 1.85%)</title><rect x="753.0" y="595.0" width="21.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="756.0" y="606.0">P..</text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.62%)</title><rect x="753.0" y="579.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="756.0" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.62%)</title><rect x="760.2" y="579.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="763.2" y="590.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.62%)</title><rect x="760.2" y="563.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="763.2" y="574.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.62%)</title><rect x="760.2" y="547.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="763.2" y="558.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.62%)</title><rect x="760.2" y="531.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="763.2" y="542.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.62%)</title><rect x="760.2" y="515.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="763.2" y="526.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.62%)</title><rect x="760.2" y="499.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="763.2" y="510.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.62%)</title><rect x="767.5" y="579.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="770.5" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (22 samples, 13.58%)</title><rect x="774.8" y="627.0" width="160.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="777.8" y="638.0">PhaseChaitin::Regist..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.62%)</title><rect x="774.8" y="611.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="777.8" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 3.09%)</title><rect x="782.1" y="611.0" width="36.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="785.1" y="622.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.62%)</title><rect x="811.2" y="595.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="814.2" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 3.70%)</title><rect x="818.5" y="611.0" width="43.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="821.5" y="622.0">Phas..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.62%)</title><rect x="840.4" y="595.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="843.4" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.23%)</title><rect x="847.7" y="595.0" width="14.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="850.7" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.23%)</title><rect x="847.7" y="579.0" width="14.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="850.7" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (1 samples, 0.62%)</title><rect x="862.2" y="611.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="865.2" y="622.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.62%)</title><rect x="862.2" y="595.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="865.2" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.62%)</title><rect x="869.5" y="611.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="872.5" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (2 samples, 1.23%)</title><rect x="876.8" y="611.0" width="14.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="879.8" y="622.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 1.23%)</title><rect x="891.4" y="611.0" width="14.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="894.4" y="622.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.62%)</title><rect x="891.4" y="595.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="894.4" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.62%)</title><rect x="891.4" y="579.0" width="7.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="894.4" y="590.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.62%)</title><rect x="891.4" y="563.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="894.4" y="574.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.62%)</title><rect x="898.6" y="595.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="901.6" y="606.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.62%)</title><rect x="898.6" y="579.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="901.6" y="590.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.62%)</title><rect x="898.6" y="563.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="901.6" y="574.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.62%)</title><rect x="905.9" y="611.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="908.9" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.62%)</title><rect x="905.9" y="595.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="908.9" y="606.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.23%)</title><rect x="913.2" y="611.0" width="14.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="916.2" y="622.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.62%)</title><rect x="920.5" y="595.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="923.5" y="606.0"></text>
</g>
<g>
<title>loadNNode::oper_input_base() const (1 samples, 0.62%)</title><rect x="927.8" y="611.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="930.8" y="622.0"></text>
</g>
<g>
<title>Compile::Optimize() (27 samples, 16.67%)</title><rect x="935.1" y="643.0" width="196.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="938.1" y="654.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.62%)</title><rect x="935.1" y="627.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="938.1" y="638.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.62%)</title><rect x="935.1" y="611.0" width="7.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="938.1" y="622.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.62%)</title><rect x="935.1" y="595.0" width="7.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="938.1" y="606.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.62%)</title><rect x="942.3" y="627.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="945.3" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.62%)</title><rect x="942.3" y="611.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="945.3" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.62%)</title><rect x="942.3" y="595.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="945.3" y="606.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.62%)</title><rect x="942.3" y="579.0" width="7.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="945.3" y="590.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.62%)</title><rect x="942.3" y="563.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="945.3" y="574.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.62%)</title><rect x="942.3" y="547.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="945.3" y="558.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.62%)</title><rect x="942.3" y="531.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="945.3" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.62%)</title><rect x="949.6" y="627.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="952.6" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.62%)</title><rect x="949.6" y="611.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="952.6" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.62%)</title><rect x="949.6" y="595.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="952.6" y="606.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.62%)</title><rect x="956.9" y="627.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="959.9" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (17 samples, 10.49%)</title><rect x="964.2" y="627.0" width="123.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="967.2" y="638.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.85%)</title><rect x="964.2" y="611.0" width="21.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="967.2" y="622.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.62%)</title><rect x="978.8" y="595.0" width="7.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="981.8" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (10 samples, 6.17%)</title><rect x="986.0" y="611.0" width="72.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="989.0" y="622.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (10 samples, 6.17%)</title><rect x="986.0" y="595.0" width="72.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="989.0" y="606.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (7 samples, 4.32%)</title><rect x="1007.9" y="579.0" width="51.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1010.9" y="590.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (7 samples, 4.32%)</title><rect x="1007.9" y="563.0" width="51.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1010.9" y="574.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.62%)</title><rect x="1058.9" y="611.0" width="7.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1061.9" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.62%)</title><rect x="1058.9" y="595.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1061.9" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.62%)</title><rect x="1058.9" y="579.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.9" y="590.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.62%)</title><rect x="1058.9" y="563.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1061.9" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.85%)</title><rect x="1066.2" y="611.0" width="21.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1069.2" y="622.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.85%)</title><rect x="1066.2" y="595.0" width="21.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1069.2" y="606.0">P..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.62%)</title><rect x="1066.2" y="579.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1069.2" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.62%)</title><rect x="1066.2" y="563.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1069.2" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.62%)</title><rect x="1066.2" y="547.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1069.2" y="558.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.62%)</title><rect x="1073.5" y="579.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1076.5" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.62%)</title><rect x="1080.7" y="579.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1083.7" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 3.70%)</title><rect x="1088.0" y="627.0" width="43.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1091.0" y="638.0">Phas..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 3.70%)</title><rect x="1088.0" y="611.0" width="43.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1091.0" y="622.0">Phas..</text>
</g>
<g>
<title>Opaque1Node::Opcode() const (1 samples, 0.62%)</title><rect x="1088.0" y="595.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.0" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.62%)</title><rect x="1095.3" y="595.0" width="7.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1098.3" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.62%)</title><rect x="1095.3" y="579.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1098.3" y="590.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.62%)</title><rect x="1095.3" y="563.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.3" y="574.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 1.23%)</title><rect x="1102.6" y="595.0" width="14.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.6" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 1.23%)</title><rect x="1102.6" y="579.0" width="14.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.6" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 1.23%)</title><rect x="1102.6" y="563.0" width="14.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.6" y="574.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (2 samples, 1.23%)</title><rect x="1102.6" y="547.0" width="14.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.6" y="558.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.62%)</title><rect x="1117.2" y="595.0" width="7.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1120.2" y="606.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.62%)</title><rect x="1117.2" y="579.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.2" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.62%)</title><rect x="1117.2" y="563.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.2" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.62%)</title><rect x="1117.2" y="547.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1120.2" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.62%)</title><rect x="1117.2" y="531.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.2" y="542.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.62%)</title><rect x="1117.2" y="515.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.2" y="526.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.62%)</title><rect x="1117.2" y="499.0" width="7.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1120.2" y="510.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.62%)</title><rect x="1124.4" y="595.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.4" y="606.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.62%)</title><rect x="1124.4" y="579.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.4" y="590.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.62%)</title><rect x="1131.7" y="643.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.7" y="654.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (1 samples, 0.62%)</title><rect x="1131.7" y="627.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.7" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1131.7" y="611.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1131.7" y="595.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1131.7" y="579.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1131.7" y="563.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1131.7" y="547.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.62%)</title><rect x="1131.7" y="531.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1131.7" y="515.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.7" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1131.7" y="499.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1131.7" y="483.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1131.7" y="467.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1131.7" y="451.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.62%)</title><rect x="1131.7" y="435.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1131.7" y="419.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1131.7" y="403.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1131.7" y="387.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1131.7" y="371.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1131.7" y="355.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.62%)</title><rect x="1131.7" y="339.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.7" y="350.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.62%)</title><rect x="1131.7" y="323.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.7" y="334.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.62%)</title><rect x="1131.7" y="307.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.7" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.62%)</title><rect x="1131.7" y="291.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.7" y="302.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.62%)</title><rect x="1131.7" y="275.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.7" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.62%)</title><rect x="1131.7" y="259.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.7" y="270.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.62%)</title><rect x="1131.7" y="243.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1134.7" y="254.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.62%)</title><rect x="1131.7" y="227.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.7" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.47%)</title><rect x="1139.0" y="643.0" width="29.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.0" y="654.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.47%)</title><rect x="1139.0" y="627.0" width="29.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.0" y="638.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.47%)</title><rect x="1139.0" y="611.0" width="29.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.0" y="622.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.47%)</title><rect x="1139.0" y="595.0" width="29.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.0" y="606.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.47%)</title><rect x="1139.0" y="579.0" width="29.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.0" y="590.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.47%)</title><rect x="1139.0" y="563.0" width="29.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.0" y="574.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.47%)</title><rect x="1139.0" y="547.0" width="29.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.0" y="558.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.47%)</title><rect x="1139.0" y="531.0" width="29.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.0" y="542.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.47%)</title><rect x="1139.0" y="515.0" width="29.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.0" y="526.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.47%)</title><rect x="1139.0" y="499.0" width="29.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.0" y="510.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.47%)</title><rect x="1139.0" y="483.0" width="29.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.0" y="494.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.47%)</title><rect x="1139.0" y="467.0" width="29.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.0" y="478.0">Pa..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.62%)</title><rect x="1139.0" y="451.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.0" y="462.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.62%)</title><rect x="1139.0" y="435.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.0" y="446.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.62%)</title><rect x="1139.0" y="419.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.0" y="430.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.62%)</title><rect x="1139.0" y="403.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.0" y="414.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.62%)</title><rect x="1139.0" y="387.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.0" y="398.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.62%)</title><rect x="1139.0" y="371.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.0" y="382.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol_or_null() (1 samples, 0.62%)</title><rect x="1139.0" y="355.0" width="7.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.0" y="366.0"></text>
</g>
<g>
<title>SymbolTable::lookup_only(char const*, int, unsigned int&amp;) (1 samples, 0.62%)</title><rect x="1139.0" y="339.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.0" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.85%)</title><rect x="1146.3" y="451.0" width="21.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.3" y="462.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.85%)</title><rect x="1146.3" y="435.0" width="21.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.3" y="446.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.85%)</title><rect x="1146.3" y="419.0" width="21.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.3" y="430.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.85%)</title><rect x="1146.3" y="403.0" width="21.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.3" y="414.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.85%)</title><rect x="1146.3" y="387.0" width="21.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.3" y="398.0">P..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.23%)</title><rect x="1146.3" y="371.0" width="14.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.3" y="382.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.62%)</title><rect x="1146.3" y="355.0" width="7.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.3" y="366.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.62%)</title><rect x="1146.3" y="339.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.3" y="350.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.62%)</title><rect x="1146.3" y="323.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.3" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.62%)</title><rect x="1146.3" y="307.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.3" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.62%)</title><rect x="1146.3" y="291.0" width="7.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.3" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.62%)</title><rect x="1146.3" y="275.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1149.3" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.62%)</title><rect x="1146.3" y="259.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.3" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.62%)</title><rect x="1146.3" y="243.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.3" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.62%)</title><rect x="1146.3" y="227.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.3" y="238.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.62%)</title><rect x="1146.3" y="211.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.3" y="222.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.62%)</title><rect x="1146.3" y="195.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.3" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.62%)</title><rect x="1146.3" y="179.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.3" y="190.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.62%)</title><rect x="1146.3" y="163.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.3" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.62%)</title><rect x="1146.3" y="147.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.3" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.62%)</title><rect x="1146.3" y="131.0" width="7.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.3" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.62%)</title><rect x="1146.3" y="115.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.3" y="126.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.62%)</title><rect x="1146.3" y="99.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.3" y="110.0"></text>
</g>
<g>
<title>Klass::array_klass_or_null(int) (1 samples, 0.62%)</title><rect x="1146.3" y="83.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.3" y="94.0"></text>
</g>
<g>
<title>InstanceKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.62%)</title><rect x="1146.3" y="67.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.3" y="78.0"></text>
</g>
<g>
<title>InstanceKlass::array_klass_impl(instanceKlassHandle, bool, int, Thread*) (1 samples, 0.62%)</title><rect x="1146.3" y="51.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.3" y="62.0"></text>
</g>
<g>
<title>ObjArrayKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.62%)</title><rect x="1146.3" y="35.0" width="7.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.3" y="46.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1153.6" y="355.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.6" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1153.6" y="339.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1153.6" y="323.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.6" y="334.0"></text>
</g>
<g>
<title>Parse::ensure_phis_everywhere() (1 samples, 0.62%)</title><rect x="1153.6" y="307.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.6" y="318.0"></text>
</g>
<g>
<title>Parse::ensure_memory_phi(int, bool) (1 samples, 0.62%)</title><rect x="1153.6" y="291.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.6" y="302.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.62%)</title><rect x="1153.6" y="275.0" width="7.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.62%)</title><rect x="1160.9" y="371.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.62%)</title><rect x="1160.9" y="355.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.9" y="366.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.62%)</title><rect x="1160.9" y="339.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.9" y="350.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.62%)</title><rect x="1160.9" y="323.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.9" y="334.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.62%)</title><rect x="1160.9" y="307.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.9" y="318.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.62%)</title><rect x="1160.9" y="291.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.9" y="302.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.62%)</title><rect x="1160.9" y="275.0" width="7.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.9" y="286.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.62%)</title><rect x="1168.1" y="643.0" width="7.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.1" y="654.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.62%)</title><rect x="1168.1" y="627.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.1" y="638.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.62%)</title><rect x="1175.4" y="675.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.4" y="686.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.62%)</title><rect x="1175.4" y="659.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.4" y="670.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.62%)</title><rect x="1175.4" y="643.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.4" y="654.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.62%)</title><rect x="1175.4" y="627.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.4" y="638.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.62%)</title><rect x="1175.4" y="611.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.4" y="622.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.62%)</title><rect x="1175.4" y="595.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.4" y="606.0"></text>
</g>
<g>
<title>LIR_Assembler::leal(LIR_OprDesc*, LIR_OprDesc*) (1 samples, 0.62%)</title><rect x="1175.4" y="579.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.4" y="590.0"></text>
</g>
<g>
<title>Assembler::lea(RegisterImpl*, Address) (1 samples, 0.62%)</title><rect x="1175.4" y="563.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.4" y="574.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.62%)</title><rect x="1182.7" y="723.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.7" y="734.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.62%)</title><rect x="1182.7" y="707.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.7" y="718.0"></text>
</g>
<g>
<title>__sched_yield (1 samples, 0.62%)</title><rect x="1182.7" y="691.0" width="7.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1185.7" y="702.0"></text>
</g>
</g>
</svg>
