<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="981"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="981"> </text>
<g id="frames">
<g>
<title>all (232 samples, 100.00%)</title><rect x="10.0" y="947.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="958.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.43%)</title><rect x="10.0" y="931.0" width="5.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.86%)</title><rect x="15.1" y="931.0" width="10.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="18.1" y="942.0"></text>
</g>
<g>
<title>_int_free (1 samples, 0.43%)</title><rect x="15.1" y="915.0" width="5.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="18.1" y="926.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.43%)</title><rect x="20.2" y="915.0" width="5.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="23.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (30 samples, 12.93%)</title><rect x="25.3" y="931.0" width="152.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.3" y="942.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (30 samples, 12.93%)</title><rect x="25.3" y="915.0" width="152.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.3" y="926.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.43%)</title><rect x="25.3" y="899.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.43%)</title><rect x="25.3" y="883.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.3" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/2029371325.accept (1 samples, 0.43%)</title><rect x="25.3" y="867.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="28.3" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.86%)</title><rect x="30.3" y="899.0" width="10.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.3" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.86%)</title><rect x="30.3" y="883.0" width="10.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.3" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.43%)</title><rect x="30.3" y="867.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="33.3" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.43%)</title><rect x="30.3" y="851.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.3" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.43%)</title><rect x="30.3" y="835.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="33.3" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.43%)</title><rect x="30.3" y="819.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.3" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.43%)</title><rect x="30.3" y="803.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.3" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.43%)</title><rect x="30.3" y="787.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="33.3" y="798.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.43%)</title><rect x="30.3" y="771.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.3" y="782.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.43%)</title><rect x="30.3" y="755.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.43%)</title><rect x="30.3" y="739.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="33.3" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.43%)</title><rect x="35.4" y="867.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="38.4" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (1 samples, 0.43%)</title><rect x="35.4" y="851.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.4" y="862.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (17 samples, 7.33%)</title><rect x="40.5" y="899.0" width="86.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="43.5" y="910.0">java/lang/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/533549108.accept (17 samples, 7.33%)</title><rect x="40.5" y="883.0" width="86.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="43.5" y="894.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (17 samples, 7.33%)</title><rect x="40.5" y="867.0" width="86.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="43.5" y="878.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (11 samples, 4.74%)</title><rect x="40.5" y="851.0" width="56.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="43.5" y="862.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (11 samples, 4.74%)</title><rect x="40.5" y="835.0" width="56.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="43.5" y="846.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (11 samples, 4.74%)</title><rect x="40.5" y="819.0" width="56.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.5" y="830.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (11 samples, 4.74%)</title><rect x="40.5" y="803.0" width="56.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="43.5" y="814.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (11 samples, 4.74%)</title><rect x="40.5" y="787.0" width="56.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.5" y="798.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (9 samples, 3.88%)</title><rect x="50.7" y="771.0" width="45.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="53.7" y="782.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (7 samples, 3.02%)</title><rect x="50.7" y="755.0" width="35.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="53.7" y="766.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 3.02%)</title><rect x="50.7" y="739.0" width="35.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.7" y="750.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 3.02%)</title><rect x="50.7" y="723.0" width="35.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="53.7" y="734.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 3.02%)</title><rect x="50.7" y="707.0" width="35.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.7" y="718.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 3.02%)</title><rect x="50.7" y="691.0" width="35.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="53.7" y="702.0">jav..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (5 samples, 2.16%)</title><rect x="60.9" y="675.0" width="25.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.9" y="686.0">s..</text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 1.72%)</title><rect x="60.9" y="659.0" width="20.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="63.9" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 1.29%)</title><rect x="60.9" y="643.0" width="15.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="63.9" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.43%)</title><rect x="76.1" y="643.0" width="5.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="79.1" y="654.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.43%)</title><rect x="81.2" y="659.0" width="5.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="84.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.86%)</title><rect x="86.3" y="755.0" width="10.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="89.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.86%)</title><rect x="86.3" y="739.0" width="10.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="89.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.86%)</title><rect x="86.3" y="723.0" width="10.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="89.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.86%)</title><rect x="86.3" y="707.0" width="10.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="89.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.43%)</title><rect x="96.5" y="851.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="99.5" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.43%)</title><rect x="96.5" y="835.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="99.5" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.43%)</title><rect x="96.5" y="819.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="99.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (5 samples, 2.16%)</title><rect x="101.6" y="851.0" width="25.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="104.6" y="862.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 2.16%)</title><rect x="101.6" y="835.0" width="25.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="104.6" y="846.0">j..</text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.43%)</title><rect x="121.9" y="819.0" width="5.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="124.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 4.31%)</title><rect x="127.0" y="899.0" width="50.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="130.0" y="910.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 4.31%)</title><rect x="127.0" y="883.0" width="50.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="130.0" y="894.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 2.16%)</title><rect x="127.0" y="867.0" width="25.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="130.0" y="878.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 2.16%)</title><rect x="127.0" y="851.0" width="25.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="130.0" y="862.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 2.16%)</title><rect x="127.0" y="835.0" width="25.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="130.0" y="846.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.72%)</title><rect x="127.0" y="819.0" width="20.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="130.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.72%)</title><rect x="127.0" y="803.0" width="20.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="130.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.86%)</title><rect x="127.0" y="787.0" width="10.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="130.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.43%)</title><rect x="127.0" y="771.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="130.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.43%)</title><rect x="127.0" y="755.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="130.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.43%)</title><rect x="127.0" y="739.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="130.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.43%)</title><rect x="127.0" y="723.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="130.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.43%)</title><rect x="127.0" y="707.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="130.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.43%)</title><rect x="127.0" y="691.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="130.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.43%)</title><rect x="127.0" y="675.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="130.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.43%)</title><rect x="132.1" y="771.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="135.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.43%)</title><rect x="132.1" y="755.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="135.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.43%)</title><rect x="132.1" y="739.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="135.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.43%)</title><rect x="132.1" y="723.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="135.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.43%)</title><rect x="132.1" y="707.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="135.1" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.slice (1 samples, 0.43%)</title><rect x="132.1" y="691.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="135.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.86%)</title><rect x="137.2" y="787.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="140.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.86%)</title><rect x="137.2" y="771.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="140.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.86%)</title><rect x="137.2" y="755.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="140.2" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.86%)</title><rect x="137.2" y="739.0" width="10.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="140.2" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.43%)</title><rect x="142.2" y="723.0" width="5.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="145.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.43%)</title><rect x="147.3" y="819.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="150.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.43%)</title><rect x="147.3" y="803.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="150.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.43%)</title><rect x="147.3" y="787.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="150.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.43%)</title><rect x="147.3" y="771.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="150.3" y="782.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.43%)</title><rect x="147.3" y="755.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="150.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.86%)</title><rect x="152.4" y="867.0" width="10.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="155.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.43%)</title><rect x="152.4" y="851.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="155.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.43%)</title><rect x="152.4" y="835.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="155.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.43%)</title><rect x="152.4" y="819.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="155.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.43%)</title><rect x="152.4" y="803.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="155.4" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.43%)</title><rect x="152.4" y="787.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="155.4" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.&lt;init&gt; (1 samples, 0.43%)</title><rect x="152.4" y="771.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="155.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.43%)</title><rect x="157.5" y="851.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="160.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.43%)</title><rect x="157.5" y="835.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="160.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.access$100 (1 samples, 0.43%)</title><rect x="157.5" y="819.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="160.5" y="830.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.43%)</title><rect x="157.5" y="803.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="160.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.43%)</title><rect x="162.6" y="867.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="165.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.43%)</title><rect x="162.6" y="851.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.43%)</title><rect x="162.6" y="835.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="165.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.43%)</title><rect x="162.6" y="819.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="165.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.43%)</title><rect x="162.6" y="803.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="165.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.43%)</title><rect x="167.7" y="867.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="170.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.43%)</title><rect x="167.7" y="851.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="170.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.43%)</title><rect x="167.7" y="835.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="170.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.43%)</title><rect x="167.7" y="819.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="170.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.43%)</title><rect x="172.8" y="867.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.8" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.43%)</title><rect x="172.8" y="851.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="175.8" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.43%)</title><rect x="172.8" y="835.0" width="5.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="175.8" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.run (48 samples, 20.69%)</title><rect x="177.8" y="931.0" width="244.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="180.8" y="942.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (48 samples, 20.69%)</title><rect x="177.8" y="915.0" width="244.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="180.8" y="926.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (48 samples, 20.69%)</title><rect x="177.8" y="899.0" width="244.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="180.8" y="910.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1118163586.run (32 samples, 13.79%)</title><rect x="182.9" y="883.0" width="162.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="185.9" y="894.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (32 samples, 13.79%)</title><rect x="182.9" y="867.0" width="162.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="185.9" y="878.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (32 samples, 13.79%)</title><rect x="182.9" y="851.0" width="162.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="185.9" y="862.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (32 samples, 13.79%)</title><rect x="182.9" y="835.0" width="162.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="185.9" y="846.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (11 samples, 4.74%)</title><rect x="182.9" y="819.0" width="56.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="185.9" y="830.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (11 samples, 4.74%)</title><rect x="182.9" y="803.0" width="56.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="185.9" y="814.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (11 samples, 4.74%)</title><rect x="182.9" y="787.0" width="56.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="185.9" y="798.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (11 samples, 4.74%)</title><rect x="182.9" y="771.0" width="56.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="185.9" y="782.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (11 samples, 4.74%)</title><rect x="182.9" y="755.0" width="56.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="185.9" y="766.0">com/l..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (11 samples, 4.74%)</title><rect x="182.9" y="739.0" width="56.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="185.9" y="750.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (10 samples, 4.31%)</title><rect x="182.9" y="723.0" width="50.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.9" y="734.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.86%)</title><rect x="188.0" y="707.0" width="10.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="191.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.86%)</title><rect x="188.0" y="691.0" width="10.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="191.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.86%)</title><rect x="188.0" y="675.0" width="10.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="191.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.86%)</title><rect x="188.0" y="659.0" width="10.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="191.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.86%)</title><rect x="188.0" y="643.0" width="10.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="191.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (7 samples, 3.02%)</title><rect x="198.2" y="707.0" width="35.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="201.2" y="718.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.86%)</title><rect x="198.2" y="691.0" width="10.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="201.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.86%)</title><rect x="198.2" y="675.0" width="10.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="201.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 2.16%)</title><rect x="208.4" y="691.0" width="25.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.4" y="702.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 2.16%)</title><rect x="208.4" y="675.0" width="25.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="211.4" y="686.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 2.16%)</title><rect x="208.4" y="659.0" width="25.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="211.4" y="670.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.43%)</title><rect x="218.5" y="643.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.43%)</title><rect x="223.6" y="643.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.43%)</title><rect x="223.6" y="627.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="226.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.43%)</title><rect x="223.6" y="611.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.43%)</title><rect x="223.6" y="595.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="226.6" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.43%)</title><rect x="223.6" y="579.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="226.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.43%)</title><rect x="228.7" y="643.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="231.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.43%)</title><rect x="228.7" y="627.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.43%)</title><rect x="228.7" y="611.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.43%)</title><rect x="233.8" y="723.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="236.8" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (20 samples, 8.62%)</title><rect x="238.9" y="819.0" width="101.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="241.9" y="830.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (4 samples, 1.72%)</title><rect x="238.9" y="803.0" width="20.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="241.9" y="814.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 1.72%)</title><rect x="238.9" y="787.0" width="20.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="241.9" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (4 samples, 1.72%)</title><rect x="238.9" y="771.0" width="20.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.9" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.43%)</title><rect x="238.9" y="755.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="241.9" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.43%)</title><rect x="238.9" y="739.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="241.9" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.43%)</title><rect x="238.9" y="723.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="241.9" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.43%)</title><rect x="238.9" y="707.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.9" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 1.29%)</title><rect x="244.0" y="755.0" width="15.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="247.0" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.43%)</title><rect x="254.1" y="739.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="257.1" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.43%)</title><rect x="254.1" y="723.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (8 samples, 3.45%)</title><rect x="259.2" y="803.0" width="40.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.2" y="814.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (8 samples, 3.45%)</title><rect x="259.2" y="787.0" width="40.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="262.2" y="798.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.key (1 samples, 0.43%)</title><rect x="269.4" y="771.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.86%)</title><rect x="274.5" y="771.0" width="10.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.5" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.43%)</title><rect x="279.6" y="755.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.6" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.43%)</title><rect x="279.6" y="739.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="282.6" y="750.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.43%)</title><rect x="279.6" y="723.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="282.6" y="734.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 1.29%)</title><rect x="284.7" y="771.0" width="15.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.7" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 1.29%)</title><rect x="284.7" y="755.0" width="15.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="287.7" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.29%)</title><rect x="284.7" y="739.0" width="15.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.7" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.29%)</title><rect x="284.7" y="723.0" width="15.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.7" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.86%)</title><rect x="289.7" y="707.0" width="10.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="292.7" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.43%)</title><rect x="289.7" y="691.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.43%)</title><rect x="294.8" y="691.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (6 samples, 2.59%)</title><rect x="299.9" y="803.0" width="30.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="302.9" y="814.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (6 samples, 2.59%)</title><rect x="299.9" y="787.0" width="30.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="302.9" y="798.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/2087351575.process (2 samples, 0.86%)</title><rect x="299.9" y="771.0" width="10.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.9" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.43%)</title><rect x="299.9" y="755.0" width="5.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="302.9" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.43%)</title><rect x="299.9" y="739.0" width="5.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="302.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.43%)</title><rect x="305.0" y="755.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.43%)</title><rect x="305.0" y="739.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="308.0" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.43%)</title><rect x="305.0" y="723.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.0" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.43%)</title><rect x="305.0" y="707.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.0" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.43%)</title><rect x="305.0" y="691.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="308.0" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.43%)</title><rect x="305.0" y="675.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="308.0" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453523494.linkToTargetMethod (1 samples, 0.43%)</title><rect x="310.1" y="771.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="313.1" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (1 samples, 0.43%)</title><rect x="310.1" y="755.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="313.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/1570364821.get$Lambda (1 samples, 0.43%)</title><rect x="310.1" y="739.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/1570364821.&lt;init&gt; (1 samples, 0.43%)</title><rect x="310.1" y="723.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="313.1" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.86%)</title><rect x="315.2" y="771.0" width="10.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="318.2" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.86%)</title><rect x="315.2" y="755.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="318.2" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.43%)</title><rect x="320.3" y="739.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="323.3" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.rangeCheck (1 samples, 0.43%)</title><rect x="320.3" y="723.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.3" y="734.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.43%)</title><rect x="320.3" y="707.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="323.3" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.43%)</title><rect x="325.3" y="771.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="328.3" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.43%)</title><rect x="325.3" y="755.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="328.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 0.86%)</title><rect x="330.4" y="803.0" width="10.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="333.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.86%)</title><rect x="330.4" y="787.0" width="10.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="333.4" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.43%)</title><rect x="340.6" y="819.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="343.6" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.43%)</title><rect x="340.6" y="803.0" width="5.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="343.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.43%)</title><rect x="345.7" y="883.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="348.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (14 samples, 6.03%)</title><rect x="350.8" y="883.0" width="71.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="353.8" y="894.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (14 samples, 6.03%)</title><rect x="350.8" y="867.0" width="71.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="353.8" y="878.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (14 samples, 6.03%)</title><rect x="350.8" y="851.0" width="71.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="353.8" y="862.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.43%)</title><rect x="350.8" y="835.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="353.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.tryAcquire (1 samples, 0.43%)</title><rect x="350.8" y="819.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="353.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (13 samples, 5.60%)</title><rect x="355.9" y="835.0" width="66.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="358.9" y="846.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (13 samples, 5.60%)</title><rect x="355.9" y="819.0" width="66.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="358.9" y="830.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Park (13 samples, 5.60%)</title><rect x="355.9" y="803.0" width="66.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="358.9" y="814.0">Unsafe_..</text>
</g>
<g>
<title>BarrierSet::write_barrier(oopDesc*) (1 samples, 0.43%)</title><rect x="355.9" y="787.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="358.9" y="798.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.86%)</title><rect x="360.9" y="787.0" width="10.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="363.9" y="798.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.43%)</title><rect x="366.0" y="771.0" width="5.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="369.0" y="782.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.86%)</title><rect x="371.1" y="787.0" width="10.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="374.1" y="798.0"></text>
</g>
<g>
<title>__pthread_cond_wait (6 samples, 2.59%)</title><rect x="381.3" y="787.0" width="30.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="384.3" y="798.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.43%)</title><rect x="411.8" y="787.0" width="5.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="414.8" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.43%)</title><rect x="416.9" y="787.0" width="5.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="419.9" y="798.0"></text>
</g>
<g>
<title>start_thread (151 samples, 65.09%)</title><rect x="422.0" y="931.0" width="768.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="425.0" y="942.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (151 samples, 65.09%)</title><rect x="422.0" y="915.0" width="768.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="425.0" y="926.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 4.74%)</title><rect x="422.0" y="899.0" width="55.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="425.0" y="910.0">GangW..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 1.29%)</title><rect x="422.0" y="883.0" width="15.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="425.0" y="894.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 1.29%)</title><rect x="422.0" y="867.0" width="15.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="425.0" y="878.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.43%)</title><rect x="422.0" y="851.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="425.0" y="862.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.86%)</title><rect x="427.1" y="851.0" width="10.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="430.1" y="862.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (8 samples, 3.45%)</title><rect x="437.2" y="883.0" width="40.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="440.2" y="894.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 2.16%)</title><rect x="437.2" y="867.0" width="25.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="440.2" y="878.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 1.29%)</title><rect x="437.2" y="851.0" width="15.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="440.2" y="862.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.86%)</title><rect x="442.3" y="835.0" width="10.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="445.3" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.43%)</title><rect x="447.4" y="819.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="450.4" y="830.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.43%)</title><rect x="447.4" y="803.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="450.4" y="814.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 0.86%)</title><rect x="452.5" y="851.0" width="10.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="455.5" y="862.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.43%)</title><rect x="462.7" y="867.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="465.7" y="878.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.43%)</title><rect x="462.7" y="851.0" width="5.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="465.7" y="862.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.43%)</title><rect x="462.7" y="835.0" width="5.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="465.7" y="846.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.43%)</title><rect x="462.7" y="819.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="465.7" y="830.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.43%)</title><rect x="462.7" y="803.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="465.7" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.43%)</title><rect x="462.7" y="787.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="465.7" y="798.0"></text>
</g>
<g>
<title>InstanceMirrorKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.43%)</title><rect x="462.7" y="771.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="465.7" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.43%)</title><rect x="462.7" y="755.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="465.7" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.86%)</title><rect x="467.8" y="867.0" width="10.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="470.8" y="878.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.86%)</title><rect x="467.8" y="851.0" width="10.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="470.8" y="862.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.86%)</title><rect x="467.8" y="835.0" width="10.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="470.8" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.86%)</title><rect x="467.8" y="819.0" width="10.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="470.8" y="830.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (2 samples, 0.86%)</title><rect x="467.8" y="803.0" width="10.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="470.8" y="814.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (2 samples, 0.86%)</title><rect x="467.8" y="787.0" width="10.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="470.8" y="798.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.43%)</title><rect x="467.8" y="771.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="470.8" y="782.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.43%)</title><rect x="467.8" y="755.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="470.8" y="766.0"></text>
</g>
<g>
<title>nmethod::test_set_oops_do_mark() (1 samples, 0.43%)</title><rect x="472.8" y="771.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="475.8" y="782.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (140 samples, 60.34%)</title><rect x="477.9" y="899.0" width="712.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="480.9" y="910.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (140 samples, 60.34%)</title><rect x="477.9" y="883.0" width="712.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="480.9" y="894.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (140 samples, 60.34%)</title><rect x="477.9" y="867.0" width="712.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="480.9" y="878.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (136 samples, 58.62%)</title><rect x="477.9" y="851.0" width="691.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="480.9" y="862.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (136 samples, 58.62%)</title><rect x="477.9" y="835.0" width="691.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="480.9" y="846.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (57 samples, 24.57%)</title><rect x="477.9" y="819.0" width="289.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="480.9" y="830.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.43%)</title><rect x="477.9" y="803.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="480.9" y="814.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.43%)</title><rect x="477.9" y="787.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="480.9" y="798.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.43%)</title><rect x="477.9" y="771.0" width="5.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="480.9" y="782.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.43%)</title><rect x="477.9" y="755.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="480.9" y="766.0"></text>
</g>
<g>
<title>cmpFastUnlockNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.43%)</title><rect x="477.9" y="739.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="480.9" y="750.0"></text>
</g>
<g>
<title>MacroAssembler::fast_unlock(RegisterImpl*, RegisterImpl*, RegisterImpl*, bool) (1 samples, 0.43%)</title><rect x="477.9" y="723.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="480.9" y="734.0"></text>
</g>
<g>
<title>Assembler::movslq(Address, int) (1 samples, 0.43%)</title><rect x="477.9" y="707.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="480.9" y="718.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.86%)</title><rect x="483.0" y="803.0" width="10.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="486.0" y="814.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.43%)</title><rect x="488.1" y="787.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="491.1" y="798.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 2.59%)</title><rect x="493.2" y="803.0" width="30.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="496.2" y="814.0">Ma..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 2.59%)</title><rect x="493.2" y="787.0" width="30.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="496.2" y="798.0">Ma..</text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.29%)</title><rect x="498.3" y="771.0" width="15.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="501.3" y="782.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.43%)</title><rect x="513.5" y="771.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="516.5" y="782.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.43%)</title><rect x="513.5" y="755.0" width="5.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="516.5" y="766.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.43%)</title><rect x="513.5" y="739.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="516.5" y="750.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.43%)</title><rect x="518.6" y="771.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="521.6" y="782.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.43%)</title><rect x="518.6" y="755.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="521.6" y="766.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.43%)</title><rect x="518.6" y="739.0" width="5.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="521.6" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 1.72%)</title><rect x="523.7" y="803.0" width="20.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="526.7" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 1.72%)</title><rect x="523.7" y="787.0" width="20.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="526.7" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (2 samples, 0.86%)</title><rect x="523.7" y="771.0" width="10.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="526.7" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::replace_block_proj_ctrl(Node*) (1 samples, 0.43%)</title><rect x="528.8" y="755.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="531.8" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.43%)</title><rect x="533.9" y="771.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="536.9" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.43%)</title><rect x="533.9" y="755.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="536.9" y="766.0"></text>
</g>
<g>
<title>Compile::can_alias(TypePtr const*, int) (1 samples, 0.43%)</title><rect x="533.9" y="739.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="536.9" y="750.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.43%)</title><rect x="533.9" y="723.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="536.9" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.43%)</title><rect x="539.0" y="771.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="542.0" y="782.0"></text>
</g>
<g>
<title>Node::is_iteratively_computed() (1 samples, 0.43%)</title><rect x="539.0" y="755.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="542.0" y="766.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.43%)</title><rect x="539.0" y="739.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="542.0" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (44 samples, 18.97%)</title><rect x="544.1" y="803.0" width="223.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="547.1" y="814.0">PhaseChaitin::Register_Alloca..</text>
</g>
<g>
<title>MachProjNode::ideal_reg() const (1 samples, 0.43%)</title><rect x="544.1" y="787.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="547.1" y="798.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.43%)</title><rect x="549.1" y="787.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="552.1" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.86%)</title><rect x="554.2" y="787.0" width="10.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="557.2" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 2.16%)</title><rect x="564.4" y="787.0" width="25.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="567.4" y="798.0">P..</text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 1.72%)</title><rect x="569.5" y="771.0" width="20.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="572.5" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 2.16%)</title><rect x="589.8" y="787.0" width="25.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="592.8" y="798.0">P..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 3.45%)</title><rect x="615.3" y="787.0" width="40.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="618.3" y="798.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.86%)</title><rect x="645.8" y="771.0" width="10.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="648.8" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.43%)</title><rect x="650.9" y="755.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="653.9" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.86%)</title><rect x="655.9" y="787.0" width="10.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="658.9" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.86%)</title><rect x="655.9" y="771.0" width="10.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="658.9" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (2 samples, 0.86%)</title><rect x="666.1" y="787.0" width="10.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="669.1" y="798.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.43%)</title><rect x="671.2" y="771.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="674.2" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (3 samples, 1.29%)</title><rect x="676.3" y="787.0" width="15.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="679.3" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 2.16%)</title><rect x="691.6" y="787.0" width="25.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="694.6" y="798.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 1.29%)</title><rect x="701.7" y="771.0" width="15.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="704.7" y="782.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.43%)</title><rect x="717.0" y="787.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="720.0" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.43%)</title><rect x="722.1" y="787.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="725.1" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.43%)</title><rect x="722.1" y="771.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="725.1" y="782.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 3.02%)</title><rect x="727.2" y="787.0" width="35.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="730.2" y="798.0">Pha..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.43%)</title><rect x="742.4" y="771.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="745.4" y="782.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 1.29%)</title><rect x="747.5" y="771.0" width="15.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="750.5" y="782.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.43%)</title><rect x="752.6" y="755.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="755.6" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.43%)</title><rect x="757.7" y="755.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="760.7" y="766.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.43%)</title><rect x="762.8" y="787.0" width="5.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="765.8" y="798.0"></text>
</g>
<g>
<title>Compile::Optimize() (65 samples, 28.02%)</title><rect x="767.8" y="819.0" width="330.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="770.8" y="830.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.43%)</title><rect x="767.8" y="803.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="770.8" y="814.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.43%)</title><rect x="767.8" y="787.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="770.8" y="798.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.43%)</title><rect x="767.8" y="771.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="770.8" y="782.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.43%)</title><rect x="767.8" y="755.0" width="5.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="770.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 1.29%)</title><rect x="772.9" y="803.0" width="15.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="775.9" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 1.29%)</title><rect x="772.9" y="787.0" width="15.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="775.9" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.43%)</title><rect x="772.9" y="771.0" width="5.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="775.9" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.86%)</title><rect x="778.0" y="771.0" width="10.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="781.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.86%)</title><rect x="778.0" y="755.0" width="10.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="781.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.43%)</title><rect x="778.0" y="739.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="781.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.43%)</title><rect x="778.0" y="723.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="781.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.43%)</title><rect x="778.0" y="707.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="781.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.43%)</title><rect x="778.0" y="691.0" width="5.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="781.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.43%)</title><rect x="778.0" y="675.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="781.0" y="686.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.43%)</title><rect x="778.0" y="659.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="781.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.43%)</title><rect x="783.1" y="739.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="786.1" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.43%)</title><rect x="783.1" y="723.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="786.1" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.43%)</title><rect x="783.1" y="707.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="786.1" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.43%)</title><rect x="783.1" y="691.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="786.1" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.43%)</title><rect x="783.1" y="675.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="786.1" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.43%)</title><rect x="783.1" y="659.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="786.1" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.43%)</title><rect x="783.1" y="643.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="786.1" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.43%)</title><rect x="783.1" y="627.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="786.1" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.43%)</title><rect x="783.1" y="611.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="786.1" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.43%)</title><rect x="783.1" y="595.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="786.1" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.43%)</title><rect x="783.1" y="579.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="786.1" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (47 samples, 20.26%)</title><rect x="788.2" y="803.0" width="239.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="791.2" y="814.0">PhaseIdealLoop::build_and_optimi..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.43%)</title><rect x="788.2" y="787.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="791.2" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.43%)</title><rect x="793.3" y="787.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="796.3" y="798.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.43%)</title><rect x="793.3" y="771.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="796.3" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.29%)</title><rect x="798.4" y="787.0" width="15.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="801.4" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.43%)</title><rect x="803.4" y="771.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="806.4" y="782.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.43%)</title><rect x="808.5" y="771.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="811.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (34 samples, 14.66%)</title><rect x="813.6" y="787.0" width="173.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="816.6" y="798.0">PhaseIdealLoop::build_..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (31 samples, 13.36%)</title><rect x="828.9" y="771.0" width="157.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="831.9" y="782.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (28 samples, 12.07%)</title><rect x="844.1" y="755.0" width="142.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="847.1" y="766.0">PhaseIdealLoop::ge..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.86%)</title><rect x="859.4" y="739.0" width="10.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="862.4" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.86%)</title><rect x="859.4" y="723.0" width="10.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="862.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (23 samples, 9.91%)</title><rect x="869.6" y="739.0" width="117.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="872.6" y="750.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 1.72%)</title><rect x="986.6" y="787.0" width="20.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="989.6" y="798.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.43%)</title><rect x="991.6" y="771.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="994.6" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.86%)</title><rect x="996.7" y="771.0" width="10.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="999.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.43%)</title><rect x="996.7" y="755.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="999.7" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::try_common_shenandoah_barriers(Node*, Node*) (1 samples, 0.43%)</title><rect x="1001.8" y="755.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1004.8" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.29%)</title><rect x="1006.9" y="787.0" width="15.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1009.9" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.29%)</title><rect x="1006.9" y="771.0" width="15.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1009.9" y="782.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.43%)</title><rect x="1006.9" y="755.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1009.9" y="766.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.43%)</title><rect x="1012.0" y="755.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1015.0" y="766.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.43%)</title><rect x="1012.0" y="739.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1015.0" y="750.0"></text>
</g>
<g>
<title>TypeLong::filter_helper(Type const*, bool) const (1 samples, 0.43%)</title><rect x="1017.1" y="755.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1020.1" y="766.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.43%)</title><rect x="1017.1" y="739.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1020.1" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.43%)</title><rect x="1022.2" y="787.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1025.2" y="798.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.43%)</title><rect x="1022.2" y="771.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1025.2" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (13 samples, 5.60%)</title><rect x="1027.2" y="803.0" width="66.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1030.2" y="814.0">PhaseIt..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (13 samples, 5.60%)</title><rect x="1027.2" y="787.0" width="66.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1030.2" y="798.0">PhaseIt..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.43%)</title><rect x="1027.2" y="771.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1030.2" y="782.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.43%)</title><rect x="1027.2" y="755.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1030.2" y="766.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.43%)</title><rect x="1027.2" y="739.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1030.2" y="750.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.43%)</title><rect x="1027.2" y="723.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1030.2" y="734.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.43%)</title><rect x="1032.3" y="771.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1035.3" y="782.0"></text>
</g>
<g>
<title>LoadNode::is_instance_field_load_with_local_phi(Node*) (1 samples, 0.43%)</title><rect x="1032.3" y="755.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1035.3" y="766.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.43%)</title><rect x="1032.3" y="739.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1035.3" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.43%)</title><rect x="1032.3" y="723.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1035.3" y="734.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.43%)</title><rect x="1032.3" y="707.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1035.3" y="718.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.43%)</title><rect x="1032.3" y="691.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1035.3" y="702.0"></text>
</g>
<g>
<title>TypeOopPtr::eq_speculative(TypeOopPtr const*) const (1 samples, 0.43%)</title><rect x="1032.3" y="675.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1035.3" y="686.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.43%)</title><rect x="1037.4" y="771.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1040.4" y="782.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.43%)</title><rect x="1037.4" y="755.0" width="5.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1040.4" y="766.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.43%)</title><rect x="1037.4" y="739.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1040.4" y="750.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.43%)</title><rect x="1037.4" y="723.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1040.4" y="734.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.43%)</title><rect x="1037.4" y="707.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1040.4" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.86%)</title><rect x="1042.5" y="771.0" width="10.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1045.5" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.43%)</title><rect x="1047.6" y="755.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1050.6" y="766.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.43%)</title><rect x="1047.6" y="739.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1050.6" y="750.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.43%)</title><rect x="1052.7" y="771.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1055.7" y="782.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.86%)</title><rect x="1057.8" y="771.0" width="10.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1060.8" y="782.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.43%)</title><rect x="1057.8" y="755.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1060.8" y="766.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.43%)</title><rect x="1062.8" y="755.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1065.8" y="766.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (5 samples, 2.16%)</title><rect x="1067.9" y="771.0" width="25.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1070.9" y="782.0">S..</text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.43%)</title><rect x="1067.9" y="755.0" width="5.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1070.9" y="766.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.43%)</title><rect x="1067.9" y="739.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1070.9" y="750.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_canonical_holder(int) (1 samples, 0.43%)</title><rect x="1067.9" y="723.0" width="5.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1070.9" y="734.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (4 samples, 1.72%)</title><rect x="1073.0" y="755.0" width="20.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1076.0" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 1.72%)</title><rect x="1073.0" y="739.0" width="20.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1076.0" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 1.72%)</title><rect x="1073.0" y="723.0" width="20.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1076.0" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 1.72%)</title><rect x="1073.0" y="707.0" width="20.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1076.0" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 1.72%)</title><rect x="1073.0" y="691.0" width="20.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1076.0" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 1.29%)</title><rect x="1073.0" y="675.0" width="15.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1076.0" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 1.29%)</title><rect x="1073.0" y="659.0" width="15.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1076.0" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 1.29%)</title><rect x="1073.0" y="643.0" width="15.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1076.0" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 1.29%)</title><rect x="1073.0" y="627.0" width="15.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1076.0" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 1.29%)</title><rect x="1073.0" y="611.0" width="15.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1076.0" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 1.29%)</title><rect x="1073.0" y="595.0" width="15.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1076.0" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 1.29%)</title><rect x="1073.0" y="579.0" width="15.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1076.0" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 1.29%)</title><rect x="1073.0" y="563.0" width="15.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1076.0" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 1.29%)</title><rect x="1073.0" y="547.0" width="15.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1076.0" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 1.29%)</title><rect x="1073.0" y="531.0" width="15.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1076.0" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 1.29%)</title><rect x="1073.0" y="515.0" width="15.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1076.0" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.86%)</title><rect x="1073.0" y="499.0" width="10.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1076.0" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.86%)</title><rect x="1073.0" y="483.0" width="10.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1076.0" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.86%)</title><rect x="1073.0" y="467.0" width="10.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1076.0" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.86%)</title><rect x="1073.0" y="451.0" width="10.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1076.0" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.86%)</title><rect x="1073.0" y="435.0" width="10.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1076.0" y="446.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.86%)</title><rect x="1073.0" y="419.0" width="10.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1076.0" y="430.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.86%)</title><rect x="1073.0" y="403.0" width="10.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1076.0" y="414.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.43%)</title><rect x="1083.2" y="499.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1086.2" y="510.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.43%)</title><rect x="1083.2" y="483.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1086.2" y="494.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.43%)</title><rect x="1088.3" y="675.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1091.3" y="686.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.43%)</title><rect x="1088.3" y="659.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1091.3" y="670.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.43%)</title><rect x="1093.4" y="803.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.4" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.43%)</title><rect x="1093.4" y="787.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1096.4" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.43%)</title><rect x="1093.4" y="771.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.4" y="782.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseTransform*) const (1 samples, 0.43%)</title><rect x="1093.4" y="755.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.4" y="766.0"></text>
</g>
<g>
<title>AddNode::add_of_identity(Type const*, Type const*) const (1 samples, 0.43%)</title><rect x="1093.4" y="739.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1096.4" y="750.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.43%)</title><rect x="1093.4" y="723.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.4" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 4.74%)</title><rect x="1098.4" y="819.0" width="56.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1101.4" y="830.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 4.74%)</title><rect x="1098.4" y="803.0" width="56.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1101.4" y="814.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 4.74%)</title><rect x="1098.4" y="787.0" width="56.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1101.4" y="798.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 4.74%)</title><rect x="1098.4" y="771.0" width="56.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1101.4" y="782.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 4.74%)</title><rect x="1098.4" y="755.0" width="56.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1101.4" y="766.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (9 samples, 3.88%)</title><rect x="1098.4" y="739.0" width="45.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1101.4" y="750.0">Pars..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.43%)</title><rect x="1098.4" y="723.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1101.4" y="734.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.43%)</title><rect x="1098.4" y="707.0" width="5.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1101.4" y="718.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.43%)</title><rect x="1098.4" y="691.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1101.4" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 3.02%)</title><rect x="1103.5" y="723.0" width="35.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1106.5" y="734.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 3.02%)</title><rect x="1103.5" y="707.0" width="35.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.5" y="718.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 3.02%)</title><rect x="1103.5" y="691.0" width="35.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.5" y="702.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 3.02%)</title><rect x="1103.5" y="675.0" width="35.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.5" y="686.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 3.02%)</title><rect x="1103.5" y="659.0" width="35.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1106.5" y="670.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.59%)</title><rect x="1103.5" y="643.0" width="30.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1106.5" y="654.0">Pa..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.43%)</title><rect x="1103.5" y="627.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1106.5" y="638.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.43%)</title><rect x="1103.5" y="611.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.5" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.43%)</title><rect x="1103.5" y="595.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.5" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.43%)</title><rect x="1103.5" y="579.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.5" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.43%)</title><rect x="1103.5" y="563.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.5" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.43%)</title><rect x="1103.5" y="547.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1106.5" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.72%)</title><rect x="1108.6" y="627.0" width="20.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.6" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.72%)</title><rect x="1108.6" y="611.0" width="20.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.72%)</title><rect x="1108.6" y="595.0" width="20.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1111.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.72%)</title><rect x="1108.6" y="579.0" width="20.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1111.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.72%)</title><rect x="1108.6" y="563.0" width="20.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.29%)</title><rect x="1108.6" y="547.0" width="15.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.29%)</title><rect x="1108.6" y="531.0" width="15.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.29%)</title><rect x="1108.6" y="515.0" width="15.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.29%)</title><rect x="1108.6" y="499.0" width="15.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.29%)</title><rect x="1108.6" y="483.0" width="15.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.29%)</title><rect x="1108.6" y="467.0" width="15.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1111.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.29%)</title><rect x="1108.6" y="451.0" width="15.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1111.6" y="462.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.43%)</title><rect x="1108.6" y="435.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.6" y="446.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.43%)</title><rect x="1108.6" y="419.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1111.6" y="430.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.43%)</title><rect x="1108.6" y="403.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1111.6" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.43%)</title><rect x="1108.6" y="387.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1111.6" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.43%)</title><rect x="1108.6" y="371.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1111.6" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.43%)</title><rect x="1108.6" y="355.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.6" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.86%)</title><rect x="1113.7" y="435.0" width="10.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1116.7" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.86%)</title><rect x="1113.7" y="419.0" width="10.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.86%)</title><rect x="1113.7" y="403.0" width="10.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.86%)</title><rect x="1113.7" y="387.0" width="10.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1116.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.86%)</title><rect x="1113.7" y="371.0" width="10.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.86%)</title><rect x="1113.7" y="355.0" width="10.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.7" y="366.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.43%)</title><rect x="1113.7" y="339.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.7" y="350.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.43%)</title><rect x="1113.7" y="323.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.7" y="334.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.43%)</title><rect x="1113.7" y="307.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.7" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.43%)</title><rect x="1113.7" y="291.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.7" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.43%)</title><rect x="1113.7" y="275.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.7" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.43%)</title><rect x="1113.7" y="259.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.7" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.43%)</title><rect x="1113.7" y="243.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1116.7" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.43%)</title><rect x="1113.7" y="227.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.7" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.43%)</title><rect x="1113.7" y="211.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.7" y="222.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.43%)</title><rect x="1113.7" y="195.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.7" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.43%)</title><rect x="1113.7" y="179.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1116.7" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.43%)</title><rect x="1113.7" y="163.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.7" y="174.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.43%)</title><rect x="1113.7" y="147.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1116.7" y="158.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.43%)</title><rect x="1113.7" y="131.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.7" y="142.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.43%)</title><rect x="1113.7" y="115.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.7" y="126.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.43%)</title><rect x="1113.7" y="99.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.7" y="110.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.43%)</title><rect x="1113.7" y="83.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.7" y="94.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.43%)</title><rect x="1118.8" y="339.0" width="5.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.8" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.43%)</title><rect x="1118.8" y="323.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.43%)</title><rect x="1118.8" y="307.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.43%)</title><rect x="1118.8" y="291.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.43%)</title><rect x="1118.8" y="275.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.43%)</title><rect x="1118.8" y="259.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.8" y="270.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.43%)</title><rect x="1118.8" y="243.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.8" y="254.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.43%)</title><rect x="1118.8" y="227.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.8" y="238.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.43%)</title><rect x="1118.8" y="211.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.8" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.43%)</title><rect x="1118.8" y="195.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.8" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.43%)</title><rect x="1118.8" y="179.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.8" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.43%)</title><rect x="1118.8" y="163.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1121.8" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.43%)</title><rect x="1118.8" y="147.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.8" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.43%)</title><rect x="1118.8" y="131.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.8" y="142.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.43%)</title><rect x="1118.8" y="115.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.8" y="126.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.43%)</title><rect x="1118.8" y="99.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.8" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.43%)</title><rect x="1118.8" y="83.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.8" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.43%)</title><rect x="1118.8" y="67.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.8" y="78.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.43%)</title><rect x="1118.8" y="51.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.8" y="62.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.43%)</title><rect x="1118.8" y="35.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.8" y="46.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.43%)</title><rect x="1123.9" y="547.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1126.9" y="558.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.43%)</title><rect x="1123.9" y="531.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.9" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.43%)</title><rect x="1129.0" y="627.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.0" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.43%)</title><rect x="1129.0" y="611.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.0" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.43%)</title><rect x="1129.0" y="595.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.43%)</title><rect x="1129.0" y="579.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.43%)</title><rect x="1129.0" y="563.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.43%)</title><rect x="1129.0" y="547.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.43%)</title><rect x="1129.0" y="531.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.0" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.43%)</title><rect x="1129.0" y="515.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.0" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.43%)</title><rect x="1129.0" y="499.0" width="5.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1132.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.43%)</title><rect x="1129.0" y="483.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.43%)</title><rect x="1129.0" y="467.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.43%)</title><rect x="1129.0" y="451.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.43%)</title><rect x="1129.0" y="435.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.43%)</title><rect x="1129.0" y="419.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.0" y="430.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.43%)</title><rect x="1129.0" y="403.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.0" y="414.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.43%)</title><rect x="1129.0" y="387.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.0" y="398.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.43%)</title><rect x="1129.0" y="371.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.0" y="382.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.43%)</title><rect x="1129.0" y="355.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.43%)</title><rect x="1134.1" y="643.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.43%)</title><rect x="1134.1" y="627.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.1" y="638.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.43%)</title><rect x="1134.1" y="611.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.1" y="622.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.43%)</title><rect x="1134.1" y="595.0" width="5.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.1" y="606.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.43%)</title><rect x="1134.1" y="579.0" width="5.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.1" y="590.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.43%)</title><rect x="1134.1" y="563.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.1" y="574.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.43%)</title><rect x="1134.1" y="547.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.1" y="558.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.43%)</title><rect x="1134.1" y="531.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.1" y="542.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.43%)</title><rect x="1134.1" y="515.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.1" y="526.0"></text>
</g>
<g>
<title>PhaseTransform::zerocon(BasicType) (1 samples, 0.43%)</title><rect x="1134.1" y="499.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.1" y="510.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.43%)</title><rect x="1134.1" y="483.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.1" y="494.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.43%)</title><rect x="1134.1" y="467.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.1" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.43%)</title><rect x="1139.1" y="723.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.1" y="734.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.43%)</title><rect x="1139.1" y="707.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.1" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.43%)</title><rect x="1139.1" y="691.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.1" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.43%)</title><rect x="1139.1" y="675.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.43%)</title><rect x="1139.1" y="659.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.43%)</title><rect x="1139.1" y="643.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.43%)</title><rect x="1139.1" y="627.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.43%)</title><rect x="1139.1" y="611.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.1" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.43%)</title><rect x="1139.1" y="595.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.1" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.43%)</title><rect x="1139.1" y="579.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.43%)</title><rect x="1139.1" y="563.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.43%)</title><rect x="1139.1" y="547.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.43%)</title><rect x="1139.1" y="531.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.43%)</title><rect x="1139.1" y="515.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.43%)</title><rect x="1139.1" y="499.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.1" y="510.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.43%)</title><rect x="1139.1" y="483.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.1" y="494.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.43%)</title><rect x="1139.1" y="467.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.1" y="478.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.43%)</title><rect x="1139.1" y="451.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.1" y="462.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.43%)</title><rect x="1139.1" y="435.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.43%)</title><rect x="1144.2" y="739.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.43%)</title><rect x="1144.2" y="723.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.2" y="734.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.43%)</title><rect x="1144.2" y="707.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.2" y="718.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.43%)</title><rect x="1144.2" y="691.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.2" y="702.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.43%)</title><rect x="1144.2" y="675.0" width="5.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.2" y="686.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.43%)</title><rect x="1144.2" y="659.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.43%)</title><rect x="1149.3" y="739.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.3" y="750.0"></text>
</g>
<g>
<title>Parse::Block::successor_for_bci(int) (1 samples, 0.43%)</title><rect x="1149.3" y="723.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.3" y="734.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.86%)</title><rect x="1154.4" y="819.0" width="10.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.4" y="830.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.43%)</title><rect x="1154.4" y="803.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.4" y="814.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.43%)</title><rect x="1159.5" y="803.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.5" y="814.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.43%)</title><rect x="1164.6" y="819.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.6" y="830.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.43%)</title><rect x="1164.6" y="803.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.6" y="814.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.43%)</title><rect x="1164.6" y="787.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.6" y="798.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 1.72%)</title><rect x="1169.7" y="851.0" width="20.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.7" y="862.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 1.72%)</title><rect x="1169.7" y="835.0" width="20.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.7" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.72%)</title><rect x="1169.7" y="819.0" width="20.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.7" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 1.72%)</title><rect x="1169.7" y="803.0" width="20.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.7" y="814.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.43%)</title><rect x="1169.7" y="787.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.7" y="798.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.43%)</title><rect x="1169.7" y="771.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.7" y="782.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.43%)</title><rect x="1169.7" y="755.0" width="5.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.7" y="766.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.43%)</title><rect x="1169.7" y="739.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.7" y="750.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.43%)</title><rect x="1169.7" y="723.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.7" y="734.0"></text>
</g>
<g>
<title>BlockBegin::state_values_do(ValueVisitor*) (1 samples, 0.43%)</title><rect x="1169.7" y="707.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.7" y="718.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.43%)</title><rect x="1169.7" y="691.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.7" y="702.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.86%)</title><rect x="1174.7" y="787.0" width="10.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.7" y="798.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (2 samples, 0.86%)</title><rect x="1174.7" y="771.0" width="10.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.7" y="782.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.43%)</title><rect x="1174.7" y="755.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.7" y="766.0"></text>
</g>
<g>
<title>LIR_Assembler::align_call(LIR_Code) (1 samples, 0.43%)</title><rect x="1174.7" y="739.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.7" y="750.0"></text>
</g>
<g>
<title>Assembler::nop(int) (1 samples, 0.43%)</title><rect x="1174.7" y="723.0" width="5.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.7" y="734.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.43%)</title><rect x="1179.8" y="755.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.8" y="766.0"></text>
</g>
<g>
<title>FrameMap::make_new_address(int) const (1 samples, 0.43%)</title><rect x="1179.8" y="739.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.8" y="750.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.43%)</title><rect x="1184.9" y="787.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.9" y="798.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.43%)</title><rect x="1184.9" y="771.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.9" y="782.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.43%)</title><rect x="1184.9" y="755.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.9" y="766.0"></text>
</g>
<g>
<title>LIRGenerator::do_ProfileCall(ProfileCall*) (1 samples, 0.43%)</title><rect x="1184.9" y="739.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.9" y="750.0"></text>
</g>
<g>
<title>LIRGenerator::profile_arguments(ProfileCall*) (1 samples, 0.43%)</title><rect x="1184.9" y="723.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.9" y="734.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.43%)</title><rect x="1184.9" y="707.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.9" y="718.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.43%)</title><rect x="1184.9" y="691.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.9" y="702.0"></text>
</g>
</g>
</svg>
