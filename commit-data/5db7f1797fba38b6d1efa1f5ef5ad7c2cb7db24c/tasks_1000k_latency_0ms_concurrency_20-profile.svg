<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1206" onload="init(evt)" viewBox="0 0 1200 1206" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1189"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1189"> </text>
<g id="frames">
<g>
<title>all (1,127 samples, 100.00%)</title><rect x="10.0" y="1155.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1166.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="10.0" y="1139.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>_int_free (1 samples, 0.09%)</title><rect x="10.0" y="1123.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (260 samples, 23.07%)</title><rect x="11.0" y="1139.0" width="272.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1150.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/StaticProperty.value (1 samples, 0.09%)</title><rect x="12.1" y="1123.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (258 samples, 22.89%)</title><rect x="13.1" y="1123.0" width="270.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.1" y="1134.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (3 samples, 0.27%)</title><rect x="13.1" y="1107.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.1" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.27%)</title><rect x="13.1" y="1091.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/1447001476.accept (3 samples, 0.27%)</title><rect x="13.1" y="1075.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (3 samples, 0.27%)</title><rect x="13.1" y="1059.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.27%)</title><rect x="13.1" y="1043.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.1" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.27%)</title><rect x="13.1" y="1027.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.35%)</title><rect x="16.3" y="1107.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.3" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.35%)</title><rect x="16.3" y="1091.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.3" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.35%)</title><rect x="16.3" y="1075.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.3" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.35%)</title><rect x="16.3" y="1059.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.3" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.09%)</title><rect x="16.3" y="1043.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.3" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.09%)</title><rect x="16.3" y="1027.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.3" y="1038.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="16.3" y="1011.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.3" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="16.3" y="995.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.3" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="16.3" y="979.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.3" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.27%)</title><rect x="17.3" y="1043.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.3" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.27%)</title><rect x="17.3" y="1027.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.3" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="17.3" y="1011.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.3" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.18%)</title><rect x="17.3" y="995.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.3" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.18%)</title><rect x="17.3" y="979.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.3" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.18%)</title><rect x="17.3" y="963.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$249/1324860860.test (1 samples, 0.09%)</title><rect x="17.3" y="947.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.3" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$250/1464059243.test (1 samples, 0.09%)</title><rect x="18.4" y="947.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.4" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="19.4" y="1011.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.4" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="19.4" y="995.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.4" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="19.4" y="979.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.4" y="990.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="19.4" y="963.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.18%)</title><rect x="20.5" y="1107.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.5" y="1118.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="20.5" y="1091.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="23.5" y="1102.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="20.5" y="1075.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="23.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (1 samples, 0.09%)</title><rect x="21.5" y="1091.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (191 samples, 16.95%)</title><rect x="22.6" y="1107.0" width="199.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.6" y="1118.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/1635802254.accept (184 samples, 16.33%)</title><rect x="22.6" y="1091.0" width="192.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.6" y="1102.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (182 samples, 16.15%)</title><rect x="24.7" y="1075.0" width="190.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.7" y="1086.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.09%)</title><rect x="24.7" y="1059.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.7" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (143 samples, 12.69%)</title><rect x="25.7" y="1059.0" width="149.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.7" y="1070.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (143 samples, 12.69%)</title><rect x="25.7" y="1043.0" width="149.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.7" y="1054.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (143 samples, 12.69%)</title><rect x="25.7" y="1027.0" width="149.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.7" y="1038.0">com/linecorp/decato..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (143 samples, 12.69%)</title><rect x="25.7" y="1011.0" width="149.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.7" y="1022.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (143 samples, 12.69%)</title><rect x="25.7" y="995.0" width="149.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.7" y="1006.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (143 samples, 12.69%)</title><rect x="25.7" y="979.0" width="149.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.7" y="990.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (99 samples, 8.78%)</title><rect x="25.7" y="963.0" width="103.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.7" y="974.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (15 samples, 1.33%)</title><rect x="25.7" y="947.0" width="15.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (15 samples, 1.33%)</title><rect x="25.7" y="931.0" width="15.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (10 samples, 0.89%)</title><rect x="30.9" y="915.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (10 samples, 0.89%)</title><rect x="30.9" y="899.0" width="10.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="33.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.80%)</title><rect x="41.4" y="947.0" width="9.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="44.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (9 samples, 0.80%)</title><rect x="41.4" y="931.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="44.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.27%)</title><rect x="42.5" y="915.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.5" y="926.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.18%)</title><rect x="43.5" y="899.0" width="2.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="46.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.44%)</title><rect x="45.6" y="915.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="48.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (75 samples, 6.65%)</title><rect x="50.8" y="947.0" width="78.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="53.8" y="958.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (75 samples, 6.65%)</title><rect x="50.8" y="931.0" width="78.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="53.8" y="942.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (74 samples, 6.57%)</title><rect x="51.9" y="915.0" width="77.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="54.9" y="926.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (74 samples, 6.57%)</title><rect x="51.9" y="899.0" width="77.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="54.9" y="910.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (74 samples, 6.57%)</title><rect x="51.9" y="883.0" width="77.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="54.9" y="894.0">sun/misc/..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="52.9" y="867.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="55.9" y="878.0"></text>
</g>
<g>
<title>Unsafe_Unpark (66 samples, 5.86%)</title><rect x="54.0" y="867.0" width="69.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="57.0" y="878.0">Unsafe_..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="56.1" y="851.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="59.1" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="57.1" y="851.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="60.1" y="862.0"></text>
</g>
<g>
<title>__pthread_cond_signal (44 samples, 3.90%)</title><rect x="58.2" y="851.0" width="46.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="61.2" y="862.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.27%)</title><rect x="104.2" y="851.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="107.2" y="862.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.33%)</title><rect x="107.4" y="851.0" width="15.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="110.4" y="862.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.35%)</title><rect x="123.1" y="867.0" width="4.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="126.1" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.18%)</title><rect x="127.3" y="867.0" width="2.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="130.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.27%)</title><rect x="129.4" y="963.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="132.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (3 samples, 0.27%)</title><rect x="129.4" y="947.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="132.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.27%)</title><rect x="129.4" y="931.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="132.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (41 samples, 3.64%)</title><rect x="132.5" y="963.0" width="42.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="135.5" y="974.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (41 samples, 3.64%)</title><rect x="132.5" y="947.0" width="42.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="135.5" y="958.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (41 samples, 3.64%)</title><rect x="132.5" y="931.0" width="42.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="135.5" y="942.0">java..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="174.4" y="915.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="177.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (3 samples, 0.27%)</title><rect x="175.4" y="1059.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="178.4" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.27%)</title><rect x="175.4" y="1043.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="178.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (35 samples, 3.11%)</title><rect x="178.6" y="1059.0" width="36.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="181.6" y="1070.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (35 samples, 3.11%)</title><rect x="178.6" y="1043.0" width="36.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="181.6" y="1054.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (12 samples, 1.06%)</title><rect x="198.5" y="1027.0" width="12.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="201.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.80%)</title><rect x="198.5" y="1011.0" width="9.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="201.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 0.80%)</title><rect x="198.5" y="995.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="201.5" y="1006.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.80%)</title><rect x="198.5" y="979.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="201.5" y="990.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="206.8" y="963.0" width="1.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="209.8" y="974.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.09%)</title><rect x="207.9" y="1011.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="210.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.18%)</title><rect x="208.9" y="1011.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="211.9" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.35%)</title><rect x="211.0" y="1027.0" width="4.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="214.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.35%)</title><rect x="215.2" y="1091.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="218.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.35%)</title><rect x="215.2" y="1075.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="218.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.35%)</title><rect x="215.2" y="1059.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.35%)</title><rect x="215.2" y="1043.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="218.2" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (2 samples, 0.18%)</title><rect x="217.3" y="1027.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="220.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (3 samples, 0.27%)</title><rect x="219.4" y="1091.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.27%)</title><rect x="219.4" y="1075.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.09%)</title><rect x="221.5" y="1059.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="224.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="221.5" y="1043.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="221.5" y="1027.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="224.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 5.15%)</title><rect x="222.5" y="1107.0" width="60.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="225.5" y="1118.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (57 samples, 5.06%)</title><rect x="222.5" y="1091.0" width="59.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="225.5" y="1102.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (38 samples, 3.37%)</title><rect x="222.5" y="1075.0" width="39.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="225.5" y="1086.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="222.5" y="1059.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="222.5" y="1043.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="225.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.09%)</title><rect x="222.5" y="1027.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.09%)</title><rect x="222.5" y="1011.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="225.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.09%)</title><rect x="222.5" y="995.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="225.5" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="222.5" y="979.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="225.5" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="222.5" y="963.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="225.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (37 samples, 3.28%)</title><rect x="223.6" y="1059.0" width="38.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="226.6" y="1070.0">org..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="223.6" y="1043.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="226.6" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="223.6" y="1027.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (36 samples, 3.19%)</title><rect x="224.6" y="1043.0" width="37.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="227.6" y="1054.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (34 samples, 3.02%)</title><rect x="224.6" y="1027.0" width="35.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.6" y="1038.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (34 samples, 3.02%)</title><rect x="224.6" y="1011.0" width="35.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.6" y="1022.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (17 samples, 1.51%)</title><rect x="226.7" y="995.0" width="17.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="229.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.62%)</title><rect x="236.2" y="979.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="239.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.62%)</title><rect x="236.2" y="963.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="239.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.62%)</title><rect x="236.2" y="947.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="239.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.62%)</title><rect x="236.2" y="931.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="239.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.62%)</title><rect x="236.2" y="915.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="239.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.62%)</title><rect x="236.2" y="899.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.62%)</title><rect x="236.2" y="883.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.09%)</title><rect x="243.5" y="979.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (1 samples, 0.09%)</title><rect x="243.5" y="963.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="246.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (1 samples, 0.09%)</title><rect x="243.5" y="947.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="246.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (15 samples, 1.33%)</title><rect x="244.5" y="995.0" width="15.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="247.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (15 samples, 1.33%)</title><rect x="244.5" y="979.0" width="15.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (11 samples, 0.98%)</title><rect x="245.6" y="963.0" width="11.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="248.6" y="974.0"></text>
</g>
<g>
<title>java/util/Optional.of (11 samples, 0.98%)</title><rect x="245.6" y="947.0" width="11.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="248.6" y="958.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.27%)</title><rect x="254.0" y="931.0" width="3.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="257.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 0.27%)</title><rect x="257.1" y="963.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.1" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.27%)</title><rect x="257.1" y="947.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="260.1" y="958.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="259.2" y="931.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="262.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.09%)</title><rect x="260.2" y="1027.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="263.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.09%)</title><rect x="260.2" y="1011.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="263.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="260.2" y="995.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="263.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="260.2" y="979.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="263.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="260.2" y="963.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="260.2" y="947.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="261.3" y="1027.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="264.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="261.3" y="1011.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="264.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="261.3" y="995.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="264.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="261.3" y="979.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="264.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (10 samples, 0.89%)</title><rect x="262.3" y="1075.0" width="10.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="265.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.71%)</title><rect x="262.3" y="1059.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="265.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.62%)</title><rect x="262.3" y="1043.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="265.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.27%)</title><rect x="263.4" y="1027.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="266.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1290526183.accept (3 samples, 0.27%)</title><rect x="263.4" y="1011.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (3 samples, 0.27%)</title><rect x="263.4" y="995.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="266.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.18%)</title><rect x="263.4" y="979.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (2 samples, 0.18%)</title><rect x="263.4" y="963.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (2 samples, 0.18%)</title><rect x="263.4" y="947.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.4" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="263.4" y="931.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="266.4" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="263.4" y="915.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.4" y="926.0"></text>
</g>
<g>
<title>java/util/Optional.ofNullable (1 samples, 0.09%)</title><rect x="264.4" y="931.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.4" y="942.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.09%)</title><rect x="264.4" y="915.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="265.5" y="979.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="268.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.09%)</title><rect x="265.5" y="963.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.09%)</title><rect x="265.5" y="947.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.5" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.18%)</title><rect x="266.5" y="1027.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="269.5" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="266.5" y="1011.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="269.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.18%)</title><rect x="266.5" y="995.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="269.5" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="266.5" y="979.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="269.5" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="266.5" y="963.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="269.5" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="266.5" y="947.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.5" y="958.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="267.6" y="947.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="270.6" y="958.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="267.6" y="931.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="270.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="268.6" y="1027.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="271.6" y="1038.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="268.6" y="1011.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="271.6" y="1022.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="268.6" y="995.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.6" y="1006.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="268.6" y="979.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="271.6" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="268.6" y="963.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="271.6" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="268.6" y="947.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.6" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.09%)</title><rect x="268.6" y="931.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.09%)</title><rect x="269.7" y="1043.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="272.7" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.09%)</title><rect x="269.7" y="1027.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="272.7" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="269.7" y="1011.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="272.7" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="269.7" y="995.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.7" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="269.7" y="979.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="272.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.18%)</title><rect x="270.7" y="1059.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="273.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.09%)</title><rect x="270.7" y="1043.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.09%)</title><rect x="270.7" y="1027.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="273.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.09%)</title><rect x="270.7" y="1011.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="270.7" y="995.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="270.7" y="979.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="273.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="270.7" y="963.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="270.7" y="947.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="273.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.09%)</title><rect x="271.8" y="1043.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (2 samples, 0.18%)</title><rect x="272.8" y="1075.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (2 samples, 0.18%)</title><rect x="272.8" y="1059.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.27%)</title><rect x="274.9" y="1075.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.27%)</title><rect x="274.9" y="1059.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.27%)</title><rect x="274.9" y="1043.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="277.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="274.9" y="1027.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.9" y="1038.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="274.9" y="1011.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="277.9" y="1022.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="274.9" y="995.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="277.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.18%)</title><rect x="275.9" y="1027.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="278.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.18%)</title><rect x="275.9" y="1011.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="278.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.18%)</title><rect x="275.9" y="995.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.9" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="275.9" y="979.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="278.9" y="990.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="275.9" y="963.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="278.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="277.0" y="979.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="280.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="277.0" y="963.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="280.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="277.0" y="947.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="280.0" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="277.0" y="931.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="280.0" y="942.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="277.0" y="915.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="280.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.18%)</title><rect x="278.0" y="1075.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="281.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.18%)</title><rect x="278.0" y="1059.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.09%)</title><rect x="278.0" y="1043.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="281.0" y="1054.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.09%)</title><rect x="278.0" y="1027.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="281.0" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.09%)</title><rect x="278.0" y="1011.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="281.0" y="1022.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.09%)</title><rect x="278.0" y="995.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="281.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.09%)</title><rect x="279.1" y="1043.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="279.1" y="1027.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.1" y="1038.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.09%)</title><rect x="279.1" y="1011.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.18%)</title><rect x="280.1" y="1075.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="283.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="280.1" y="1059.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="280.1" y="1043.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="283.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="280.1" y="1027.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="283.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (2 samples, 0.18%)</title><rect x="280.1" y="1011.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="283.1" y="1022.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="280.1" y="995.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="283.1" y="1006.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.09%)</title><rect x="281.2" y="995.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.09%)</title><rect x="282.2" y="1091.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="285.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="282.2" y="1075.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="285.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.update (1 samples, 0.09%)</title><rect x="282.2" y="1059.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="285.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.update (1 samples, 0.09%)</title><rect x="282.2" y="1043.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/Math.max (1 samples, 0.09%)</title><rect x="282.2" y="1027.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="285.2" y="1038.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="282.2" y="1011.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="285.2" y="1022.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="282.2" y="995.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="285.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.run (698 samples, 61.93%)</title><rect x="283.3" y="1139.0" width="730.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="286.3" y="1150.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (698 samples, 61.93%)</title><rect x="283.3" y="1123.0" width="730.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="286.3" y="1134.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (697 samples, 61.85%)</title><rect x="284.3" y="1107.0" width="729.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="287.3" y="1118.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1725484690.run (466 samples, 41.35%)</title><rect x="287.5" y="1091.0" width="487.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.5" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/17..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (466 samples, 41.35%)</title><rect x="287.5" y="1075.0" width="487.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="290.5" y="1086.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (466 samples, 41.35%)</title><rect x="287.5" y="1059.0" width="487.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.5" y="1070.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (458 samples, 40.64%)</title><rect x="287.5" y="1043.0" width="479.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.5" y="1054.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThe..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="291.7" y="1027.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="294.7" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (1 samples, 0.09%)</title><rect x="292.7" y="1027.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="295.7" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (137 samples, 12.16%)</title><rect x="293.7" y="1027.0" width="143.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.7" y="1038.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (137 samples, 12.16%)</title><rect x="293.7" y="1011.0" width="143.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.7" y="1022.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (137 samples, 12.16%)</title><rect x="293.7" y="995.0" width="143.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.7" y="1006.0">com/linecorp/decat..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="303.2" y="979.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="306.2" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="303.2" y="963.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="306.2" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="304.2" y="963.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="307.2" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="304.2" y="947.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="307.2" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="304.2" y="931.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="307.2" y="942.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.09%)</title><rect x="304.2" y="915.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="307.2" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.53%)</title><rect x="305.3" y="979.0" width="6.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="308.3" y="990.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="307.4" y="963.0" width="4.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="310.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (120 samples, 10.65%)</title><rect x="311.5" y="979.0" width="125.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="314.5" y="990.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (120 samples, 10.65%)</title><rect x="311.5" y="963.0" width="125.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="314.5" y="974.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (120 samples, 10.65%)</title><rect x="311.5" y="947.0" width="125.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="314.5" y="958.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (31 samples, 2.75%)</title><rect x="311.5" y="931.0" width="32.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="314.5" y="942.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (31 samples, 2.75%)</title><rect x="311.5" y="915.0" width="32.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="314.5" y="926.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="311.5" y="899.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="314.5" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="311.5" y="883.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="314.5" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="311.5" y="867.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="314.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (30 samples, 2.66%)</title><rect x="312.6" y="899.0" width="31.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="315.6" y="910.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="312.6" y="883.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="315.6" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="312.6" y="867.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="315.6" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="312.6" y="851.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="315.6" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="312.6" y="835.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="315.6" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="312.6" y="819.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="315.6" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="312.6" y="803.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="315.6" y="814.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="312.6" y="787.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="315.6" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="312.6" y="771.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="315.6" y="782.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="312.6" y="755.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="315.6" y="766.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.09%)</title><rect x="312.6" y="739.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="315.6" y="750.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.09%)</title><rect x="312.6" y="723.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="315.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (22 samples, 1.95%)</title><rect x="313.6" y="883.0" width="23.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="316.6" y="894.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (22 samples, 1.95%)</title><rect x="313.6" y="867.0" width="23.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="316.6" y="878.0">c..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.byteOffset (1 samples, 0.09%)</title><rect x="335.6" y="851.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="338.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (7 samples, 0.62%)</title><rect x="336.7" y="883.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="339.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (7 samples, 0.62%)</title><rect x="336.7" y="867.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="339.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (7 samples, 0.62%)</title><rect x="336.7" y="851.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="339.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (7 samples, 0.62%)</title><rect x="336.7" y="835.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="339.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonStreamContext.&lt;init&gt; (7 samples, 0.62%)</title><rect x="336.7" y="819.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="339.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (83 samples, 7.36%)</title><rect x="344.0" y="931.0" width="86.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="347.0" y="942.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.44%)</title><rect x="344.0" y="915.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="347.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (5 samples, 0.44%)</title><rect x="344.0" y="899.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="347.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (5 samples, 0.44%)</title><rect x="344.0" y="883.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="347.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (5 samples, 0.44%)</title><rect x="344.0" y="867.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="347.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (5 samples, 0.44%)</title><rect x="344.0" y="851.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="347.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (5 samples, 0.44%)</title><rect x="344.0" y="835.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="347.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (5 samples, 0.44%)</title><rect x="344.0" y="819.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="347.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.18%)</title><rect x="347.1" y="803.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="350.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 0.53%)</title><rect x="349.2" y="915.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="352.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.53%)</title><rect x="349.2" y="899.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="352.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.18%)</title><rect x="353.4" y="883.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="356.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.80%)</title><rect x="355.5" y="915.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="358.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.62%)</title><rect x="357.6" y="899.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="360.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.09%)</title><rect x="358.7" y="883.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="361.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.27%)</title><rect x="359.7" y="883.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="362.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.09%)</title><rect x="361.8" y="867.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="364.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (2 samples, 0.18%)</title><rect x="362.8" y="883.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="365.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.44%)</title><rect x="364.9" y="915.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="367.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.35%)</title><rect x="366.0" y="899.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="369.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (58 samples, 5.15%)</title><rect x="370.2" y="915.0" width="60.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="373.2" y="926.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.33%)</title><rect x="371.2" y="899.0" width="15.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="374.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.18%)</title><rect x="371.2" y="883.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="374.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.18%)</title><rect x="373.3" y="883.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="376.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.18%)</title><rect x="373.3" y="867.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="376.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.18%)</title><rect x="373.3" y="851.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="376.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.18%)</title><rect x="373.3" y="835.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="376.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (7 samples, 0.62%)</title><rect x="375.4" y="883.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="378.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (7 samples, 0.62%)</title><rect x="375.4" y="867.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="378.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.18%)</title><rect x="380.6" y="851.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="383.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.27%)</title><rect x="382.7" y="883.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="385.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.27%)</title><rect x="382.7" y="867.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="385.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.09%)</title><rect x="385.9" y="883.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="388.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (42 samples, 3.73%)</title><rect x="386.9" y="899.0" width="44.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="389.9" y="910.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (42 samples, 3.73%)</title><rect x="386.9" y="883.0" width="44.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="389.9" y="894.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (41 samples, 3.64%)</title><rect x="388.0" y="867.0" width="42.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="391.0" y="878.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.42%)</title><rect x="391.1" y="851.0" width="16.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="394.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (5 samples, 0.44%)</title><rect x="392.2" y="835.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="395.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.18%)</title><rect x="397.4" y="835.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="400.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.44%)</title><rect x="399.5" y="835.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="402.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.44%)</title><rect x="399.5" y="819.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="402.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.44%)</title><rect x="399.5" y="803.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="402.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.09%)</title><rect x="399.5" y="787.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="402.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.35%)</title><rect x="400.5" y="787.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="403.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.35%)</title><rect x="400.5" y="771.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="403.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.18%)</title><rect x="402.6" y="755.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="405.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (2 samples, 0.18%)</title><rect x="402.6" y="739.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="405.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.18%)</title><rect x="404.7" y="835.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="407.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.09%)</title><rect x="404.7" y="819.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="407.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.09%)</title><rect x="405.8" y="819.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="408.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.09%)</title><rect x="405.8" y="803.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="408.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.09%)</title><rect x="406.8" y="835.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="409.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (5 samples, 0.44%)</title><rect x="407.9" y="851.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="410.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.44%)</title><rect x="407.9" y="835.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="410.9" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.44%)</title><rect x="407.9" y="819.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="410.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.44%)</title><rect x="407.9" y="803.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="410.9" y="814.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.44%)</title><rect x="407.9" y="787.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="410.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.09%)</title><rect x="413.1" y="851.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="416.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.71%)</title><rect x="414.2" y="851.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="417.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.71%)</title><rect x="414.2" y="835.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="417.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.71%)</title><rect x="414.2" y="819.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="417.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (8 samples, 0.71%)</title><rect x="414.2" y="803.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="417.2" y="814.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (8 samples, 0.71%)</title><rect x="414.2" y="787.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="417.2" y="798.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 0.44%)</title><rect x="417.3" y="771.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="420.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="420.4" y="755.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="423.4" y="766.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor20.newInstance (1 samples, 0.09%)</title><rect x="421.5" y="755.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="424.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.44%)</title><rect x="422.5" y="851.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="425.5" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.44%)</title><rect x="422.5" y="835.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="425.5" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.44%)</title><rect x="422.5" y="819.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="425.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.27%)</title><rect x="427.8" y="851.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="430.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (6 samples, 0.53%)</title><rect x="430.9" y="931.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="433.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 0.53%)</title><rect x="430.9" y="915.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="433.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 0.53%)</title><rect x="430.9" y="899.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="433.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.53%)</title><rect x="430.9" y="883.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="433.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.53%)</title><rect x="430.9" y="867.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="433.9" y="878.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.18%)</title><rect x="435.1" y="851.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="438.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (287 samples, 25.47%)</title><rect x="437.2" y="1027.0" width="300.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="440.2" y="1038.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (59 samples, 5.24%)</title><rect x="438.2" y="1011.0" width="61.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="441.2" y="1022.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (59 samples, 5.24%)</title><rect x="438.2" y="995.0" width="61.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="441.2" y="1006.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (56 samples, 4.97%)</title><rect x="441.4" y="979.0" width="58.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="444.4" y="990.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.35%)</title><rect x="444.5" y="963.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="447.5" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.35%)</title><rect x="444.5" y="947.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="447.5" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.35%)</title><rect x="444.5" y="931.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="447.5" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.35%)</title><rect x="444.5" y="915.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="447.5" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="448.7" y="963.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="451.7" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="448.7" y="947.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="451.7" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="448.7" y="931.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="451.7" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.09%)</title><rect x="449.8" y="915.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="452.8" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (47 samples, 4.17%)</title><rect x="450.8" y="963.0" width="49.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="453.8" y="974.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.remove (41 samples, 3.64%)</title><rect x="457.1" y="947.0" width="42.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="460.1" y="958.0">java..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.62%)</title><rect x="492.7" y="931.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="495.7" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (10 samples, 0.89%)</title><rect x="500.0" y="1011.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="503.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.80%)</title><rect x="501.1" y="995.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="504.1" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (9 samples, 0.80%)</title><rect x="501.1" y="979.0" width="9.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="504.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (154 samples, 13.66%)</title><rect x="510.5" y="1011.0" width="161.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="513.5" y="1022.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (154 samples, 13.66%)</title><rect x="510.5" y="995.0" width="161.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="513.5" y="1006.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="522.0" y="979.0" width="1.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="525.0" y="990.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="522.0" y="963.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="525.0" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.35%)</title><rect x="523.0" y="979.0" width="4.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="526.0" y="990.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="525.1" y="963.0" width="2.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="528.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (55 samples, 4.88%)</title><rect x="527.2" y="979.0" width="57.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="530.2" y="990.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (55 samples, 4.88%)</title><rect x="527.2" y="963.0" width="57.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="530.2" y="974.0">java/l..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (35 samples, 3.11%)</title><rect x="538.7" y="947.0" width="36.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="541.7" y="958.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (20 samples, 1.77%)</title><rect x="551.3" y="931.0" width="21.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="554.3" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (20 samples, 1.77%)</title><rect x="551.3" y="915.0" width="21.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="554.3" y="926.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (20 samples, 1.77%)</title><rect x="551.3" y="899.0" width="21.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="554.3" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (8 samples, 0.71%)</title><rect x="558.6" y="883.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="561.6" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.27%)</title><rect x="558.6" y="867.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="561.6" y="878.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.09%)</title><rect x="558.6" y="851.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="561.6" y="862.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.18%)</title><rect x="559.7" y="851.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="562.7" y="862.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.18%)</title><rect x="559.7" y="835.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="562.7" y="846.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.18%)</title><rect x="559.7" y="819.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="562.7" y="830.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="560.7" y="803.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="563.7" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.44%)</title><rect x="561.8" y="867.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="564.8" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (5 samples, 0.44%)</title><rect x="561.8" y="851.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="564.8" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="561.8" y="835.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="564.8" y="846.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="562.8" y="835.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="565.8" y="846.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="563.9" y="835.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="566.9" y="846.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.18%)</title><rect x="564.9" y="835.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="567.9" y="846.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (2 samples, 0.18%)</title><rect x="564.9" y="819.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="567.9" y="830.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.44%)</title><rect x="567.0" y="883.0" width="5.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="570.0" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.18%)</title><rect x="572.3" y="931.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="575.3" y="942.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="574.3" y="931.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="577.3" y="942.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="575.4" y="947.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="578.4" y="958.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.71%)</title><rect x="576.4" y="947.0" width="8.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="579.4" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="584.8" y="979.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="587.8" y="990.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.53%)</title><rect x="585.9" y="979.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="588.9" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.53%)</title><rect x="585.9" y="963.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="588.9" y="974.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.53%)</title><rect x="585.9" y="947.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="588.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.27%)</title><rect x="589.0" y="931.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="592.0" y="942.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (75 samples, 6.65%)</title><rect x="592.1" y="979.0" width="78.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="595.1" y="990.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (74 samples, 6.57%)</title><rect x="593.2" y="963.0" width="77.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="596.2" y="974.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.53%)</title><rect x="593.2" y="947.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="596.2" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.53%)</title><rect x="593.2" y="931.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="596.2" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.53%)</title><rect x="593.2" y="915.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="596.2" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.53%)</title><rect x="593.2" y="899.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="596.2" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="599.5" y="947.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="602.5" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="599.5" y="931.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="602.5" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="599.5" y="915.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="602.5" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="599.5" y="899.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="602.5" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (67 samples, 5.94%)</title><rect x="600.5" y="947.0" width="70.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="603.5" y="958.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (60 samples, 5.32%)</title><rect x="607.9" y="931.0" width="62.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="610.9" y="942.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (27 samples, 2.40%)</title><rect x="642.4" y="915.0" width="28.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="645.4" y="926.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.27%)</title><rect x="658.1" y="899.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="661.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.71%)</title><rect x="661.3" y="899.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="664.3" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="667.5" y="883.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="670.5" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="668.6" y="883.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="671.6" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="668.6" y="867.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="671.6" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="668.6" y="851.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="671.6" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="668.6" y="835.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="671.6" y="846.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="669.6" y="899.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="672.6" y="910.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="670.7" y="979.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="673.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (45 samples, 3.99%)</title><rect x="671.7" y="1011.0" width="47.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="674.7" y="1022.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (45 samples, 3.99%)</title><rect x="671.7" y="995.0" width="47.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="674.7" y="1006.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1049560985.process (22 samples, 1.95%)</title><rect x="677.0" y="979.0" width="23.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="680.0" y="990.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (18 samples, 1.60%)</title><rect x="678.0" y="963.0" width="18.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="681.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (18 samples, 1.60%)</title><rect x="678.0" y="947.0" width="18.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="681.0" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.35%)</title><rect x="689.5" y="931.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="692.5" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.35%)</title><rect x="689.5" y="915.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="692.5" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 0.35%)</title><rect x="689.5" y="899.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="692.5" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 0.35%)</title><rect x="689.5" y="883.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="692.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.18%)</title><rect x="691.6" y="867.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="694.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (3 samples, 0.27%)</title><rect x="693.7" y="931.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="696.7" y="942.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.18%)</title><rect x="694.8" y="915.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="697.8" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="695.8" y="899.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="698.8" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.27%)</title><rect x="696.9" y="963.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="699.9" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="700.0" y="979.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="703.0" y="990.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.09%)</title><rect x="700.0" y="963.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="703.0" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="701.0" y="979.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="704.0" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="701.0" y="963.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="704.0" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.80%)</title><rect x="702.1" y="979.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="705.1" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.53%)</title><rect x="705.2" y="963.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="708.2" y="974.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.35%)</title><rect x="705.2" y="947.0" width="4.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="708.2" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.18%)</title><rect x="709.4" y="947.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="712.4" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (7 samples, 0.62%)</title><rect x="711.5" y="979.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="714.5" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="715.7" y="963.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="718.7" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="715.7" y="947.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="718.7" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="715.7" y="931.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="718.7" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="715.7" y="915.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="718.7" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="715.7" y="899.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="718.7" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.09%)</title><rect x="716.7" y="963.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="719.7" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="716.7" y="947.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="719.7" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="716.7" y="931.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="719.7" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="716.7" y="915.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="719.7" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="716.7" y="899.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="719.7" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="716.7" y="883.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="719.7" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="716.7" y="867.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="719.7" y="878.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="716.7" y="851.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="719.7" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="716.7" y="835.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="719.7" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.09%)</title><rect x="716.7" y="819.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="719.7" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.09%)</title><rect x="717.8" y="963.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="720.8" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1483399266.linkToTargetMethod (1 samples, 0.09%)</title><rect x="718.8" y="1011.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="721.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/110771485.invokeStatic_L3_L (1 samples, 0.09%)</title><rect x="718.8" y="995.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="721.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/1172642092.get$Lambda (1 samples, 0.09%)</title><rect x="718.8" y="979.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="721.8" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="718.8" y="963.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="721.8" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="718.8" y="947.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="721.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.51%)</title><rect x="719.9" y="1011.0" width="17.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="722.9" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.18%)</title><rect x="725.1" y="995.0" width="2.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="728.1" y="1006.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="725.1" y="979.0" width="2.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="728.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.89%)</title><rect x="727.2" y="995.0" width="10.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="730.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.89%)</title><rect x="727.2" y="979.0" width="10.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="730.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/1172642092.accept (9 samples, 0.80%)</title><rect x="727.2" y="963.0" width="9.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="730.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (9 samples, 0.80%)</title><rect x="727.2" y="947.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="730.2" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="727.2" y="931.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="730.2" y="942.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.09%)</title><rect x="727.2" y="915.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="730.2" y="926.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.09%)</title><rect x="727.2" y="899.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="730.2" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="727.2" y="883.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="730.2" y="894.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (8 samples, 0.71%)</title><rect x="728.3" y="931.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="731.3" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (8 samples, 0.71%)</title><rect x="728.3" y="915.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="731.3" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.53%)</title><rect x="729.3" y="899.0" width="6.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="732.3" y="910.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.53%)</title><rect x="729.3" y="883.0" width="6.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="732.3" y="894.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="735.6" y="899.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="738.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$272/1044915847.accept (1 samples, 0.09%)</title><rect x="736.6" y="963.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="739.6" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="736.6" y="947.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="739.6" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="736.6" y="931.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="739.6" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="736.6" y="915.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="739.6" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="736.6" y="899.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="739.6" y="910.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="736.6" y="883.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="739.6" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (1 samples, 0.09%)</title><rect x="737.7" y="1027.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="740.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="737.7" y="1011.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="740.7" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$272/1044915847.get$Lambda (1 samples, 0.09%)</title><rect x="737.7" y="995.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="740.7" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="737.7" y="979.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="740.7" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="737.7" y="963.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="740.7" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="737.7" y="947.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="740.7" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="737.7" y="931.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="740.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.42%)</title><rect x="738.7" y="1027.0" width="16.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="741.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (15 samples, 1.33%)</title><rect x="739.8" y="1011.0" width="15.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="742.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.98%)</title><rect x="744.0" y="995.0" width="11.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="747.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/1172642092.accept (1 samples, 0.09%)</title><rect x="744.0" y="979.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="747.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.09%)</title><rect x="744.0" y="963.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="747.0" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.09%)</title><rect x="744.0" y="947.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="747.0" y="958.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.09%)</title><rect x="744.0" y="931.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="747.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$272/1044915847.accept (10 samples, 0.89%)</title><rect x="745.0" y="979.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="748.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (10 samples, 0.89%)</title><rect x="745.0" y="963.0" width="10.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="748.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$259/657402371.complete (10 samples, 0.89%)</title><rect x="745.0" y="947.0" width="10.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="748.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (10 samples, 0.89%)</title><rect x="745.0" y="931.0" width="10.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="748.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (10 samples, 0.89%)</title><rect x="745.0" y="915.0" width="10.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="748.0" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 0.89%)</title><rect x="745.0" y="899.0" width="10.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="748.0" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 0.89%)</title><rect x="745.0" y="883.0" width="10.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="748.0" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (10 samples, 0.89%)</title><rect x="745.0" y="867.0" width="10.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="748.0" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (10 samples, 0.89%)</title><rect x="745.0" y="851.0" width="10.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="748.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.09%)</title><rect x="754.4" y="835.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="757.4" y="846.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.09%)</title><rect x="755.5" y="1027.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="758.5" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.09%)</title><rect x="755.5" y="1011.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="758.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="755.5" y="995.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="758.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="755.5" y="979.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="758.5" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="755.5" y="963.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="758.5" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (10 samples, 0.89%)</title><rect x="756.5" y="1027.0" width="10.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="759.5" y="1038.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.89%)</title><rect x="756.5" y="1011.0" width="10.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="759.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (8 samples, 0.71%)</title><rect x="767.0" y="1043.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="770.0" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.62%)</title><rect x="767.0" y="1027.0" width="7.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="770.0" y="1038.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.62%)</title><rect x="767.0" y="1011.0" width="7.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="770.0" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="774.3" y="1027.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="777.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (10 samples, 0.89%)</title><rect x="775.4" y="1091.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="778.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.89%)</title><rect x="775.4" y="1075.0" width="10.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="778.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.89%)</title><rect x="775.4" y="1059.0" width="10.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="778.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.89%)</title><rect x="775.4" y="1043.0" width="10.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="778.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1725484690.run (4 samples, 0.35%)</title><rect x="781.7" y="1027.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="784.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (218 samples, 19.34%)</title><rect x="785.8" y="1091.0" width="228.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="788.8" y="1102.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (217 samples, 19.25%)</title><rect x="786.9" y="1075.0" width="227.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="789.9" y="1086.0">java/util/concurrent/LinkedBlo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (182 samples, 16.15%)</title><rect x="811.0" y="1059.0" width="190.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="814.0" y="1070.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.53%)</title><rect x="818.3" y="1043.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="821.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.53%)</title><rect x="818.3" y="1027.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="821.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.53%)</title><rect x="818.3" y="1011.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="821.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.53%)</title><rect x="818.3" y="995.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="821.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (168 samples, 14.91%)</title><rect x="824.6" y="1043.0" width="175.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="827.6" y="1054.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (168 samples, 14.91%)</title><rect x="824.6" y="1027.0" width="175.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="827.6" y="1038.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.18%)</title><rect x="826.7" y="1011.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="829.7" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="828.8" y="1011.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="831.8" y="1022.0"></text>
</g>
<g>
<title>Unsafe_Park (156 samples, 13.84%)</title><rect x="829.8" y="1011.0" width="163.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="832.8" y="1022.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.18%)</title><rect x="833.0" y="995.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="836.0" y="1006.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.09%)</title><rect x="835.1" y="995.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="838.1" y="1006.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (14 samples, 1.24%)</title><rect x="836.1" y="995.0" width="14.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="839.1" y="1006.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.62%)</title><rect x="837.2" y="979.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="840.2" y="990.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.18%)</title><rect x="839.2" y="963.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="842.2" y="974.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="840.3" y="947.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="843.3" y="958.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.18%)</title><rect x="841.3" y="963.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="844.3" y="974.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="843.4" y="963.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="846.4" y="974.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="844.5" y="979.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="847.5" y="990.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.44%)</title><rect x="845.5" y="979.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="848.5" y="990.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="850.8" y="995.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="853.8" y="1006.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="851.8" y="995.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="854.8" y="1006.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.09%)</title><rect x="853.9" y="995.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="856.9" y="1006.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.71%)</title><rect x="855.0" y="995.0" width="8.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="858.0" y="1006.0"></text>
</g>
<g>
<title>__lll_unlock_wake (31 samples, 2.75%)</title><rect x="863.3" y="995.0" width="32.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="866.3" y="1006.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (69 samples, 6.12%)</title><rect x="895.8" y="995.0" width="72.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="898.8" y="1006.0">__pthrea..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.62%)</title><rect x="968.0" y="995.0" width="7.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="971.0" y="1006.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.18%)</title><rect x="975.4" y="995.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="978.4" y="1006.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.27%)</title><rect x="977.5" y="995.0" width="3.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="980.5" y="1006.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.18%)</title><rect x="980.6" y="995.0" width="2.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="983.6" y="1006.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.53%)</title><rect x="982.7" y="995.0" width="6.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="985.7" y="1006.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.27%)</title><rect x="989.0" y="995.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="992.0" y="1006.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="992.1" y="995.0" width="1.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="995.1" y="1006.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.35%)</title><rect x="993.2" y="1011.0" width="4.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="996.2" y="1022.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.27%)</title><rect x="997.3" y="1011.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1000.3" y="1022.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.09%)</title><rect x="1000.5" y="1043.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1003.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (12 samples, 1.06%)</title><rect x="1001.5" y="1059.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1004.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 1.06%)</title><rect x="1001.5" y="1043.0" width="12.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1004.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 1.06%)</title><rect x="1001.5" y="1027.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1004.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 1.06%)</title><rect x="1001.5" y="1011.0" width="12.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1004.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1014.1" y="1139.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1017.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.pollTimeoutExpired (1 samples, 0.09%)</title><rect x="1014.1" y="1123.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1017.1" y="1134.0"></text>
</g>
<g>
<title>start_thread (167 samples, 14.82%)</title><rect x="1015.1" y="1139.0" width="174.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1018.1" y="1150.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (167 samples, 14.82%)</title><rect x="1015.1" y="1123.0" width="174.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1018.1" y="1134.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (17 samples, 1.51%)</title><rect x="1015.1" y="1107.0" width="17.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1018.1" y="1118.0"></text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (2 samples, 0.18%)</title><rect x="1015.1" y="1091.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1018.1" y="1102.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1016.2" y="1075.0" width="1.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1019.2" y="1086.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 0.44%)</title><rect x="1017.2" y="1091.0" width="5.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1020.2" y="1102.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.44%)</title><rect x="1017.2" y="1075.0" width="5.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1020.2" y="1086.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1017.2" y="1059.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1020.2" y="1070.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.35%)</title><rect x="1018.3" y="1059.0" width="4.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1021.3" y="1070.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (10 samples, 0.89%)</title><rect x="1022.5" y="1091.0" width="10.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1025.5" y="1102.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.18%)</title><rect x="1022.5" y="1075.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1025.5" y="1086.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.18%)</title><rect x="1022.5" y="1059.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1025.5" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.35%)</title><rect x="1024.6" y="1075.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1027.6" y="1086.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.18%)</title><rect x="1024.6" y="1059.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1027.6" y="1070.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="1024.6" y="1043.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1027.6" y="1054.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1025.6" y="1043.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1028.6" y="1054.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1025.6" y="1027.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1028.6" y="1038.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.09%)</title><rect x="1025.6" y="1011.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1028.6" y="1022.0"></text>
</g>
<g>
<title>metadata_Relocation::fix_metadata_relocation() (1 samples, 0.09%)</title><rect x="1025.6" y="995.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1028.6" y="1006.0"></text>
</g>
<g>
<title>metadata_Relocation::value() (1 samples, 0.09%)</title><rect x="1025.6" y="979.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1028.6" y="990.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.18%)</title><rect x="1026.7" y="1059.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1029.7" y="1070.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.18%)</title><rect x="1026.7" y="1043.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1029.7" y="1054.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.35%)</title><rect x="1028.8" y="1075.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1031.8" y="1086.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.35%)</title><rect x="1028.8" y="1059.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1031.8" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (2 samples, 0.18%)</title><rect x="1028.8" y="1043.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1031.8" y="1054.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.18%)</title><rect x="1028.8" y="1027.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1031.8" y="1038.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.18%)</title><rect x="1028.8" y="1011.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1031.8" y="1022.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.18%)</title><rect x="1028.8" y="995.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1031.8" y="1006.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.18%)</title><rect x="1030.9" y="1043.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1033.9" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.18%)</title><rect x="1030.9" y="1027.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1033.9" y="1038.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.09%)</title><rect x="1031.9" y="1011.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1034.9" y="1022.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::HeapRegionRemSetIterator(HeapRegionRemSet*) (1 samples, 0.09%)</title><rect x="1031.9" y="995.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1034.9" y="1006.0"></text>
</g>
<g>
<title>JavaThread::run() (149 samples, 13.22%)</title><rect x="1032.9" y="1107.0" width="156.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1035.9" y="1118.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (149 samples, 13.22%)</title><rect x="1032.9" y="1091.0" width="156.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1035.9" y="1102.0">JavaThread::thread_m..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (149 samples, 13.22%)</title><rect x="1032.9" y="1075.0" width="156.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1035.9" y="1086.0">CompileBroker::compi..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (149 samples, 13.22%)</title><rect x="1032.9" y="1059.0" width="156.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1035.9" y="1070.0">CompileBroker::invok..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (149 samples, 13.22%)</title><rect x="1032.9" y="1043.0" width="156.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1035.9" y="1054.0">C2Compiler::compile_..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (149 samples, 13.22%)</title><rect x="1032.9" y="1027.0" width="156.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1035.9" y="1038.0">Compile::Compile(ciE..</text>
</g>
<g>
<title>Compile::Code_Gen() (49 samples, 4.35%)</title><rect x="1032.9" y="1011.0" width="51.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1035.9" y="1022.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.09%)</title><rect x="1032.9" y="995.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1035.9" y="1006.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.09%)</title><rect x="1032.9" y="979.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1035.9" y="990.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.09%)</title><rect x="1032.9" y="963.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1035.9" y="974.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.27%)</title><rect x="1034.0" y="995.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1037.0" y="1006.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.09%)</title><rect x="1034.0" y="979.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1037.0" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="1034.0" y="963.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1037.0" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1034.0" y="947.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1037.0" y="958.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="1035.0" y="979.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1038.0" y="990.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.09%)</title><rect x="1036.1" y="979.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1039.1" y="990.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.27%)</title><rect x="1037.1" y="995.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1040.1" y="1006.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.27%)</title><rect x="1037.1" y="979.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1040.1" y="990.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="1038.2" y="963.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1041.2" y="974.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1039.2" y="963.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1042.2" y="974.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.09%)</title><rect x="1040.3" y="995.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1043.3" y="1006.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.09%)</title><rect x="1040.3" y="979.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1043.3" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.35%)</title><rect x="1041.3" y="995.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1044.3" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.09%)</title><rect x="1041.3" y="979.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1044.3" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::create_loop_tree() (1 samples, 0.09%)</title><rect x="1041.3" y="963.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1044.3" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.27%)</title><rect x="1042.4" y="979.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1045.4" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.18%)</title><rect x="1042.4" y="963.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1045.4" y="974.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.18%)</title><rect x="1042.4" y="947.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1045.4" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1044.5" y="963.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1047.5" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (36 samples, 3.19%)</title><rect x="1045.5" y="995.0" width="37.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1048.5" y="1006.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1045.5" y="979.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1048.5" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1046.6" y="979.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1049.6" y="990.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.09%)</title><rect x="1047.6" y="979.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1050.6" y="990.0"></text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.09%)</title><rect x="1048.7" y="979.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1051.7" y="990.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.18%)</title><rect x="1049.7" y="979.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1052.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.27%)</title><rect x="1051.8" y="979.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1054.8" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1052.8" y="963.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1055.8" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="1053.9" y="963.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1056.9" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.18%)</title><rect x="1054.9" y="979.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1057.9" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.18%)</title><rect x="1054.9" y="963.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1057.9" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1056.0" y="947.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1059.0" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.27%)</title><rect x="1057.0" y="979.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1060.0" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.71%)</title><rect x="1060.2" y="979.0" width="8.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1063.2" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1062.3" y="963.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1065.3" y="974.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.09%)</title><rect x="1063.3" y="963.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1066.3" y="974.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.09%)</title><rect x="1064.4" y="963.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1067.4" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.27%)</title><rect x="1065.4" y="963.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1068.4" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1067.5" y="947.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1070.5" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.35%)</title><rect x="1068.5" y="979.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1071.5" y="990.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.09%)</title><rect x="1070.6" y="963.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1073.6" y="974.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.09%)</title><rect x="1071.7" y="963.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1074.7" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.18%)</title><rect x="1072.7" y="979.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1075.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.18%)</title><rect x="1074.8" y="979.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1077.8" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1074.8" y="963.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1077.8" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.09%)</title><rect x="1075.9" y="963.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.9" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.09%)</title><rect x="1075.9" y="947.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1078.9" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.18%)</title><rect x="1076.9" y="979.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1079.9" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1076.9" y="963.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.9" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1078.0" y="963.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.0" y="974.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.27%)</title><rect x="1079.0" y="979.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1082.0" y="990.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.09%)</title><rect x="1080.1" y="963.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1083.1" y="974.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1081.1" y="963.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1084.1" y="974.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.09%)</title><rect x="1082.2" y="979.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1085.2" y="990.0"></text>
</g>
<g>
<title>loadConPNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.09%)</title><rect x="1083.2" y="995.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1086.2" y="1006.0"></text>
</g>
<g>
<title>Compile::Optimize() (90 samples, 7.99%)</title><rect x="1084.3" y="1011.0" width="94.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1087.3" y="1022.0">Compile::Op..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.09%)</title><rect x="1085.3" y="995.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1088.3" y="1006.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.09%)</title><rect x="1085.3" y="979.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1088.3" y="990.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.09%)</title><rect x="1085.3" y="963.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1088.3" y="974.0"></text>
</g>
<g>
<title>Node::subsume_by(Node*, Compile*) (1 samples, 0.09%)</title><rect x="1085.3" y="947.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1088.3" y="958.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.09%)</title><rect x="1085.3" y="931.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1088.3" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.35%)</title><rect x="1086.3" y="995.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1089.3" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.35%)</title><rect x="1086.3" y="979.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.3" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1087.4" y="963.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1090.4" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.09%)</title><rect x="1087.4" y="947.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1090.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.09%)</title><rect x="1087.4" y="931.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1090.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1088.4" y="963.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1091.4" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.09%)</title><rect x="1088.4" y="947.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1091.4" y="958.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::append(PointsToNode* const&amp;) (1 samples, 0.09%)</title><rect x="1088.4" y="931.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1091.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1089.5" y="963.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1092.5" y="974.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1090.5" y="995.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.5" y="1006.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1090.5" y="979.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.5" y="990.0"></text>
</g>
<g>
<title>TypeInt::filter_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1090.5" y="963.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.5" y="974.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1090.5" y="947.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1093.5" y="958.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1090.5" y="931.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1093.5" y="942.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1090.5" y="915.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.5" y="926.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1090.5" y="899.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1093.5" y="910.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.09%)</title><rect x="1091.6" y="995.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1094.6" y="1006.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.09%)</title><rect x="1091.6" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.6" y="990.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.09%)</title><rect x="1091.6" y="963.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1094.6" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (71 samples, 6.30%)</title><rect x="1092.6" y="995.0" width="74.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1095.6" y="1006.0">PhaseIde..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1092.6" y="979.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1095.6" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1092.6" y="963.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1095.6" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1092.6" y="947.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.6" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1092.6" y="931.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.6" y="942.0"></text>
</g>
<g>
<title>CmpINode::Opcode() const (1 samples, 0.09%)</title><rect x="1092.6" y="915.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.6" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1093.7" y="979.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.09%)</title><rect x="1093.7" y="963.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1096.7" y="974.0"></text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (1 samples, 0.09%)</title><rect x="1093.7" y="947.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1096.7" y="958.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.09%)</title><rect x="1094.7" y="979.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.27%)</title><rect x="1095.8" y="979.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.8" y="990.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.18%)</title><rect x="1096.8" y="963.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1099.8" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (61 samples, 5.41%)</title><rect x="1098.9" y="979.0" width="63.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1101.9" y="990.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (61 samples, 5.41%)</title><rect x="1098.9" y="963.0" width="63.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1101.9" y="974.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 0.35%)</title><rect x="1098.9" y="947.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1101.9" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1103.1" y="947.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.1" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (56 samples, 4.97%)</title><rect x="1104.1" y="947.0" width="58.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.1" y="958.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 0.44%)</title><rect x="1154.4" y="931.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.4" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.27%)</title><rect x="1159.6" y="931.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.6" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.18%)</title><rect x="1160.7" y="915.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.7" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1162.8" y="979.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.8" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.09%)</title><rect x="1162.8" y="963.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.8" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.09%)</title><rect x="1162.8" y="947.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.8" y="958.0"></text>
</g>
<g>
<title>Dict::operator[](void const*) const (1 samples, 0.09%)</title><rect x="1162.8" y="931.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.8" y="942.0"></text>
</g>
<g>
<title>cmpkey(void const*, void const*) (1 samples, 0.09%)</title><rect x="1162.8" y="915.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1165.8" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1163.8" y="979.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.8" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1163.8" y="963.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.8" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1163.8" y="947.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.8" y="958.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1163.8" y="931.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.8" y="942.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1164.9" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.9" y="990.0"></text>
</g>
<g>
<title>RegionNode::pinned() const (1 samples, 0.09%)</title><rect x="1165.9" y="979.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.9" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.09%)</title><rect x="1167.0" y="995.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1167.0" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.0" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (9 samples, 0.80%)</title><rect x="1168.0" y="995.0" width="9.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 0.80%)</title><rect x="1168.0" y="979.0" width="9.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.0" y="990.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.18%)</title><rect x="1168.0" y="963.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.0" y="974.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.18%)</title><rect x="1168.0" y="947.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.0" y="958.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.18%)</title><rect x="1168.0" y="931.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.0" y="942.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.18%)</title><rect x="1168.0" y="915.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.0" y="926.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1170.1" y="963.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.1" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.18%)</title><rect x="1171.2" y="963.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.2" y="974.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1173.2" y="963.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.2" y="974.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1174.3" y="963.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.3" y="974.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1174.3" y="947.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.3" y="958.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.18%)</title><rect x="1175.3" y="963.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.3" y="974.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.18%)</title><rect x="1175.3" y="947.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.3" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.18%)</title><rect x="1175.3" y="931.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.3" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.18%)</title><rect x="1175.3" y="915.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.3" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.18%)</title><rect x="1175.3" y="899.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.3" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.18%)</title><rect x="1175.3" y="883.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.3" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.18%)</title><rect x="1175.3" y="867.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.3" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1175.3" y="851.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.3" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1175.3" y="835.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.3" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1175.3" y="819.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.3" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1175.3" y="803.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.3" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1175.3" y="787.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.3" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1175.3" y="771.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.3" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1175.3" y="755.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.3" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1175.3" y="739.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.3" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1175.3" y="723.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.3" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1175.3" y="707.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.3" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1175.3" y="691.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.3" y="702.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1175.3" y="675.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.3" y="686.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1175.3" y="659.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.3" y="670.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1176.4" y="851.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.4" y="862.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1176.4" y="835.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.4" y="846.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.09%)</title><rect x="1177.4" y="995.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1177.4" y="979.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.4" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1177.4" y="963.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.4" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.89%)</title><rect x="1178.5" y="1011.0" width="10.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.5" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.89%)</title><rect x="1178.5" y="995.0" width="10.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.89%)</title><rect x="1178.5" y="979.0" width="10.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.89%)</title><rect x="1178.5" y="963.0" width="10.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.89%)</title><rect x="1178.5" y="947.0" width="10.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.89%)</title><rect x="1178.5" y="931.0" width="10.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.5" y="942.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1178.5" y="915.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="926.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1178.5" y="899.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.5" y="910.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1178.5" y="883.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.5" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1178.5" y="867.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.5" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1178.5" y="851.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.5" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1178.5" y="835.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.5" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1178.5" y="819.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.5" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1178.5" y="803.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.5" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1178.5" y="787.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.5" y="798.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1178.5" y="771.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.5" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1178.5" y="755.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.5" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1178.5" y="739.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.5" y="750.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1178.5" y="723.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.5" y="734.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1178.5" y="707.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.5" y="718.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1178.5" y="691.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.5" y="702.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.09%)</title><rect x="1178.5" y="675.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.5" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.09%)</title><rect x="1178.5" y="659.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.5" y="670.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1178.5" y="643.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.5" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.62%)</title><rect x="1179.5" y="915.0" width="7.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.5" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.62%)</title><rect x="1179.5" y="899.0" width="7.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.62%)</title><rect x="1179.5" y="883.0" width="7.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.62%)</title><rect x="1179.5" y="867.0" width="7.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.62%)</title><rect x="1179.5" y="851.0" width="7.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.5" y="862.0"></text>
</g>
<g>
<title>GraphKit::push(Node*) (1 samples, 0.09%)</title><rect x="1179.5" y="835.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.53%)</title><rect x="1180.6" y="835.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.6" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1180.6" y="819.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.6" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1180.6" y="803.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1180.6" y="787.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1180.6" y="771.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1180.6" y="755.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1180.6" y="739.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.6" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1180.6" y="723.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.6" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1180.6" y="707.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1180.6" y="691.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1180.6" y="675.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1180.6" y="659.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1180.6" y="643.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.6" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1180.6" y="627.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.6" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1180.6" y="611.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1180.6" y="595.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1180.6" y="579.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1180.6" y="563.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1180.6" y="547.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1180.6" y="531.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1180.6" y="515.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1180.6" y="499.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1180.6" y="483.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1180.6" y="467.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.6" y="451.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.6" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.6" y="435.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.6" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.6" y="419.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.6" y="403.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.6" y="387.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.6" y="371.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.6" y="355.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.6" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.6" y="339.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.6" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.6" y="323.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.6" y="307.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.6" y="291.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.6" y="275.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.6" y="259.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.6" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.6" y="243.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.6" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.6" y="227.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.6" y="211.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.6" y="195.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.6" y="179.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.6" y="163.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.6" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.6" y="147.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.6" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.6" y="131.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.6" y="115.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.6" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.6" y="99.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.6" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.6" y="83.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.6" y="94.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.6" y="67.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="78.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1180.6" y="51.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.6" y="62.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1180.6" y="35.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.6" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1181.6" y="451.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1181.6" y="435.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.6" y="446.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.09%)</title><rect x="1181.6" y="419.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.6" y="430.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1181.6" y="403.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.6" y="414.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1181.6" y="387.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.6" y="398.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1181.6" y="371.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.6" y="382.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.09%)</title><rect x="1181.6" y="355.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.6" y="366.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.09%)</title><rect x="1181.6" y="339.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.6" y="350.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.09%)</title><rect x="1181.6" y="323.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.6" y="334.0"></text>
</g>
<g>
<title>ciField::ciField(fieldDescriptor*) (1 samples, 0.09%)</title><rect x="1181.6" y="307.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.6" y="318.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol*) (1 samples, 0.09%)</title><rect x="1181.6" y="291.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.6" y="302.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1182.7" y="819.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.7" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1182.7" y="803.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.7" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1182.7" y="787.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1182.7" y="771.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1182.7" y="755.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1182.7" y="739.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.35%)</title><rect x="1182.7" y="723.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.7" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1182.7" y="707.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.7" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1182.7" y="691.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1182.7" y="675.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1182.7" y="659.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1182.7" y="643.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.35%)</title><rect x="1182.7" y="627.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.7" y="638.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1182.7" y="611.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.7" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.27%)</title><rect x="1183.7" y="611.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.27%)</title><rect x="1183.7" y="595.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.27%)</title><rect x="1183.7" y="579.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.27%)</title><rect x="1183.7" y="563.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.27%)</title><rect x="1183.7" y="547.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.27%)</title><rect x="1183.7" y="531.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.7" y="542.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1183.7" y="515.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.7" y="526.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1183.7" y="499.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.7" y="510.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1183.7" y="483.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.7" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1183.7" y="467.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.7" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1183.7" y="451.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.7" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1183.7" y="435.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.7" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1183.7" y="419.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.7" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1183.7" y="403.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.7" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1183.7" y="387.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.7" y="398.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1183.7" y="371.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.7" y="382.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1183.7" y="355.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.7" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1183.7" y="339.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.7" y="350.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1183.7" y="323.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.7" y="334.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1183.7" y="307.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.7" y="318.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1183.7" y="291.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.7" y="302.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.09%)</title><rect x="1183.7" y="275.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.7" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.09%)</title><rect x="1183.7" y="259.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.7" y="270.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.09%)</title><rect x="1183.7" y="243.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1186.7" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1184.8" y="515.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.8" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1184.8" y="499.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1184.8" y="483.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1184.8" y="467.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1184.8" y="451.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1184.8" y="435.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1184.8" y="419.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1184.8" y="403.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1184.8" y="387.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1184.8" y="371.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1184.8" y="355.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.8" y="366.0"></text>
</g>
<g>
<title>CmpNode::CmpNode(Node*, Node*) (1 samples, 0.09%)</title><rect x="1184.8" y="339.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.8" y="350.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1184.8" y="323.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1185.8" y="339.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1185.8" y="323.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.8" y="334.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1185.8" y="307.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.8" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1186.9" y="915.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.9" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1186.9" y="899.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.9" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1186.9" y="883.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1186.9" y="867.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1186.9" y="851.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1186.9" y="835.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1186.9" y="819.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.9" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1186.9" y="803.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.9" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1186.9" y="787.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1186.9" y="771.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1186.9" y="755.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1186.9" y="739.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1186.9" y="723.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.9" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1186.9" y="707.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1186.9" y="691.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1186.9" y="675.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1186.9" y="659.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.09%)</title><rect x="1186.9" y="643.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.9" y="654.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.09%)</title><rect x="1186.9" y="627.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.9" y="638.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1186.9" y="611.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.9" y="622.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1186.9" y="595.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.9" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1187.9" y="707.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.9" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1187.9" y="691.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.9" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1187.9" y="675.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1187.9" y="659.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1187.9" y="643.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1187.9" y="627.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1187.9" y="611.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.9" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1187.9" y="595.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.9" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1187.9" y="579.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1187.9" y="563.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1187.9" y="547.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1187.9" y="531.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1187.9" y="515.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1187.9" y="499.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.9" y="510.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1187.9" y="483.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.9" y="494.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.09%)</title><rect x="1187.9" y="467.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.9" y="478.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1187.9" y="451.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.9" y="462.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1187.9" y="435.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.9" y="446.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.09%)</title><rect x="1189.0" y="1107.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.0" y="1118.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.09%)</title><rect x="1189.0" y="1091.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.0" y="1102.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1189.0" y="1075.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.0" y="1086.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1189.0" y="1059.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.0" y="1070.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1189.0" y="1043.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.0" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1189.0" y="1027.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.0" y="1038.0"></text>
</g>
<g>
<title>GCHeapLog::log_heap(bool) (1 samples, 0.09%)</title><rect x="1189.0" y="1011.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.0" y="1022.0"></text>
</g>
<g>
<title>outputStream::print_cr(char const*, ...) (1 samples, 0.09%)</title><rect x="1189.0" y="995.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.0" y="1006.0"></text>
</g>
<g>
<title>__strncpy_sse2_unaligned (1 samples, 0.09%)</title><rect x="1189.0" y="979.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1192.0" y="990.0"></text>
</g>
</g>
</svg>
