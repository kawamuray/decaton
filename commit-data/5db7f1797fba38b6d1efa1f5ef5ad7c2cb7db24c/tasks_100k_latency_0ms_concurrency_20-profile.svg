<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1061"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1061"> </text>
<g id="frames">
<g>
<title>all (170 samples, 100.00%)</title><rect x="10.0" y="1027.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1038.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.59%)</title><rect x="10.0" y="1011.0" width="6.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info(JavaThread*) (1 samples, 0.59%)</title><rect x="10.0" y="995.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info_helper(JavaThread*) (1 samples, 0.59%)</title><rect x="10.0" y="979.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.59%)</title><rect x="10.0" y="963.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.59%)</title><rect x="10.0" y="947.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (26 samples, 15.29%)</title><rect x="16.9" y="1011.0" width="180.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.9" y="1022.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (26 samples, 15.29%)</title><rect x="16.9" y="995.0" width="180.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.9" y="1006.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.59%)</title><rect x="16.9" y="979.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.59%)</title><rect x="16.9" y="963.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.9" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toList (1 samples, 0.59%)</title><rect x="16.9" y="947.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.9" y="958.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.59%)</title><rect x="16.9" y="931.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.9" y="942.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (17 samples, 10.00%)</title><rect x="23.9" y="979.0" width="118.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.9" y="990.0">java/lang/Iter..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/1046024376.accept (16 samples, 9.41%)</title><rect x="23.9" y="963.0" width="111.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.9" y="974.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (16 samples, 9.41%)</title><rect x="23.9" y="947.0" width="111.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.9" y="958.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (12 samples, 7.06%)</title><rect x="23.9" y="931.0" width="83.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.9" y="942.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (12 samples, 7.06%)</title><rect x="23.9" y="915.0" width="83.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.9" y="926.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (12 samples, 7.06%)</title><rect x="23.9" y="899.0" width="83.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.9" y="910.0">com/linec..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (12 samples, 7.06%)</title><rect x="23.9" y="883.0" width="83.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.9" y="894.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (12 samples, 7.06%)</title><rect x="23.9" y="867.0" width="83.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.9" y="878.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (12 samples, 7.06%)</title><rect x="23.9" y="851.0" width="83.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="26.9" y="862.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (7 samples, 4.12%)</title><rect x="23.9" y="835.0" width="48.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.9" y="846.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 4.12%)</title><rect x="23.9" y="819.0" width="48.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.9" y="830.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 4.12%)</title><rect x="23.9" y="803.0" width="48.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.9" y="814.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 4.12%)</title><rect x="23.9" y="787.0" width="48.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.9" y="798.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 4.12%)</title><rect x="23.9" y="771.0" width="48.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.9" y="782.0">java..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (7 samples, 4.12%)</title><rect x="23.9" y="755.0" width="48.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.9" y="766.0">sun/..</text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 4.12%)</title><rect x="23.9" y="739.0" width="48.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="26.9" y="750.0">Unsa..</text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 2.94%)</title><rect x="23.9" y="723.0" width="34.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="26.9" y="734.0">__..</text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 1.18%)</title><rect x="58.6" y="723.0" width="13.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="61.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 2.94%)</title><rect x="72.5" y="835.0" width="34.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="75.5" y="846.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 2.94%)</title><rect x="72.5" y="819.0" width="34.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="75.5" y="830.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 2.94%)</title><rect x="72.5" y="803.0" width="34.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="75.5" y="814.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.59%)</title><rect x="93.3" y="787.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.3" y="798.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.59%)</title><rect x="100.2" y="787.0" width="7.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="103.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.59%)</title><rect x="107.2" y="931.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="110.2" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.59%)</title><rect x="107.2" y="915.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="110.2" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.59%)</title><rect x="107.2" y="899.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="110.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.76%)</title><rect x="114.1" y="931.0" width="20.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="117.1" y="942.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.76%)</title><rect x="114.1" y="915.0" width="20.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="117.1" y="926.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.59%)</title><rect x="128.0" y="899.0" width="6.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="131.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.59%)</title><rect x="134.9" y="963.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="137.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.59%)</title><rect x="134.9" y="947.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="137.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.59%)</title><rect x="134.9" y="931.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="137.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.59%)</title><rect x="134.9" y="915.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="137.9" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.59%)</title><rect x="134.9" y="899.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="137.9" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.59%)</title><rect x="134.9" y="883.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="137.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 4.71%)</title><rect x="141.9" y="979.0" width="55.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="144.9" y="990.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 4.71%)</title><rect x="141.9" y="963.0" width="55.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="144.9" y="974.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 2.94%)</title><rect x="141.9" y="947.0" width="34.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="144.9" y="958.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 2.94%)</title><rect x="141.9" y="931.0" width="34.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="144.9" y="942.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 2.94%)</title><rect x="141.9" y="915.0" width="34.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="144.9" y="926.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 2.94%)</title><rect x="141.9" y="899.0" width="34.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="144.9" y="910.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 2.94%)</title><rect x="141.9" y="883.0" width="34.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="144.9" y="894.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (4 samples, 2.35%)</title><rect x="141.9" y="867.0" width="27.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="144.9" y="878.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.59%)</title><rect x="148.8" y="851.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="151.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.59%)</title><rect x="148.8" y="835.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="151.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.59%)</title><rect x="148.8" y="819.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="151.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.59%)</title><rect x="148.8" y="803.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="151.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.59%)</title><rect x="148.8" y="787.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="151.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.59%)</title><rect x="148.8" y="771.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="151.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.59%)</title><rect x="148.8" y="755.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="151.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 1.18%)</title><rect x="155.8" y="851.0" width="13.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="158.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 1.18%)</title><rect x="155.8" y="835.0" width="13.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="158.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (2 samples, 1.18%)</title><rect x="155.8" y="819.0" width="13.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="158.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (2 samples, 1.18%)</title><rect x="155.8" y="803.0" width="13.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="158.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (2 samples, 1.18%)</title><rect x="155.8" y="787.0" width="13.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="158.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (2 samples, 1.18%)</title><rect x="155.8" y="771.0" width="13.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="158.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatchSize (1 samples, 0.59%)</title><rect x="162.7" y="755.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="165.7" y="766.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.59%)</title><rect x="162.7" y="739.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="165.7" y="750.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.59%)</title><rect x="162.7" y="723.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="165.7" y="734.0"></text>
</g>
<g>
<title>InlineCacheBuffer::create_transition_stub(CompiledIC*, void*, unsigned char*) (1 samples, 0.59%)</title><rect x="162.7" y="707.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="165.7" y="718.0"></text>
</g>
<g>
<title>InlineCacheBuffer::assemble_ic_buffer_code(unsigned char*, void*, unsigned char*) (1 samples, 0.59%)</title><rect x="162.7" y="691.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="165.7" y="702.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.59%)</title><rect x="162.7" y="675.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="165.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.59%)</title><rect x="169.6" y="867.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="172.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.59%)</title><rect x="169.6" y="851.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="172.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.59%)</title><rect x="169.6" y="835.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="172.6" y="846.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.59%)</title><rect x="169.6" y="819.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="172.6" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.59%)</title><rect x="169.6" y="803.0" width="7.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="172.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.59%)</title><rect x="176.6" y="947.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="179.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.59%)</title><rect x="176.6" y="931.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="179.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.isEmpty (1 samples, 0.59%)</title><rect x="176.6" y="915.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="179.6" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.59%)</title><rect x="176.6" y="899.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.6" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.59%)</title><rect x="176.6" y="883.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.59%)</title><rect x="183.5" y="947.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="186.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.59%)</title><rect x="183.5" y="931.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="186.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.59%)</title><rect x="183.5" y="915.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="186.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.59%)</title><rect x="183.5" y="899.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.59%)</title><rect x="183.5" y="883.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="186.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.59%)</title><rect x="183.5" y="867.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="186.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.59%)</title><rect x="183.5" y="851.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="186.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.59%)</title><rect x="183.5" y="835.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="186.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.59%)</title><rect x="183.5" y="819.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="186.5" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.59%)</title><rect x="183.5" y="803.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="186.5" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.59%)</title><rect x="183.5" y="787.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="186.5" y="798.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (1 samples, 0.59%)</title><rect x="183.5" y="771.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="186.5" y="782.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.59%)</title><rect x="183.5" y="755.0" width="7.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="186.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.59%)</title><rect x="190.5" y="947.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="193.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.59%)</title><rect x="190.5" y="931.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.5" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.run (71 samples, 41.76%)</title><rect x="197.4" y="1011.0" width="492.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="200.4" y="1022.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (71 samples, 41.76%)</title><rect x="197.4" y="995.0" width="492.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="200.4" y="1006.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (71 samples, 41.76%)</title><rect x="197.4" y="979.0" width="492.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="200.4" y="990.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1681407644.run (53 samples, 31.18%)</title><rect x="211.3" y="963.0" width="367.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="214.3" y="974.0">com/linecorp/decaton/processor/runtime/ProcessorUn..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (53 samples, 31.18%)</title><rect x="211.3" y="947.0" width="367.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.3" y="958.0">com/linecorp/decaton/processor/runtime/ProcessorUn..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (53 samples, 31.18%)</title><rect x="211.3" y="931.0" width="367.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="214.3" y="942.0">com/linecorp/decaton/processor/runtime/ProcessorUn..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (52 samples, 30.59%)</title><rect x="211.3" y="915.0" width="360.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.3" y="926.0">com/linecorp/decaton/processor/runtime/ProcessPip..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.76%)</title><rect x="232.1" y="899.0" width="20.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="235.1" y="910.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.18%)</title><rect x="239.1" y="883.0" width="13.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="242.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (17 samples, 10.00%)</title><rect x="252.9" y="899.0" width="118.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="255.9" y="910.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (17 samples, 10.00%)</title><rect x="252.9" y="883.0" width="118.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="255.9" y="894.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (17 samples, 10.00%)</title><rect x="252.9" y="867.0" width="118.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="255.9" y="878.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (17 samples, 10.00%)</title><rect x="252.9" y="851.0" width="118.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="255.9" y="862.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (17 samples, 10.00%)</title><rect x="252.9" y="835.0" width="118.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="255.9" y="846.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (17 samples, 10.00%)</title><rect x="252.9" y="819.0" width="118.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.9" y="830.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 2.35%)</title><rect x="252.9" y="803.0" width="27.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="255.9" y="814.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 2.35%)</title><rect x="252.9" y="787.0" width="27.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="255.9" y="798.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 2.35%)</title><rect x="252.9" y="771.0" width="27.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="255.9" y="782.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 1.18%)</title><rect x="252.9" y="755.0" width="13.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="255.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 1.18%)</title><rect x="252.9" y="739.0" width="13.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="255.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 1.18%)</title><rect x="266.8" y="755.0" width="13.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 1.18%)</title><rect x="266.8" y="739.0" width="13.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="269.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.59%)</title><rect x="273.8" y="723.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="276.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (11 samples, 6.47%)</title><rect x="280.7" y="803.0" width="76.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.7" y="814.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 1.18%)</title><rect x="280.7" y="787.0" width="13.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 1.18%)</title><rect x="280.7" y="771.0" width="13.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 1.18%)</title><rect x="280.7" y="755.0" width="13.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="283.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 1.18%)</title><rect x="280.7" y="739.0" width="13.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.59%)</title><rect x="287.6" y="723.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="290.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.59%)</title><rect x="287.6" y="707.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (1 samples, 0.59%)</title><rect x="287.6" y="691.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="290.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 1.18%)</title><rect x="294.6" y="787.0" width="13.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="297.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 1.18%)</title><rect x="294.6" y="771.0" width="13.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.59%)</title><rect x="301.5" y="755.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="304.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.59%)</title><rect x="308.5" y="787.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="311.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.59%)</title><rect x="308.5" y="771.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="311.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.59%)</title><rect x="308.5" y="755.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="311.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.59%)</title><rect x="308.5" y="739.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="311.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.59%)</title><rect x="315.4" y="787.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="318.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.59%)</title><rect x="315.4" y="771.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="318.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.59%)</title><rect x="315.4" y="755.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="318.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.59%)</title><rect x="315.4" y="739.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="318.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 2.94%)</title><rect x="322.4" y="787.0" width="34.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="325.4" y="798.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.59%)</title><rect x="322.4" y="771.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="325.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.59%)</title><rect x="322.4" y="755.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="325.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 2.35%)</title><rect x="329.3" y="771.0" width="27.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="332.3" y="782.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 2.35%)</title><rect x="329.3" y="755.0" width="27.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="332.3" y="766.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 2.35%)</title><rect x="329.3" y="739.0" width="27.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="332.3" y="750.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 1.18%)</title><rect x="336.2" y="723.0" width="13.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="339.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.59%)</title><rect x="343.2" y="707.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="346.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.59%)</title><rect x="343.2" y="691.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="346.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.59%)</title><rect x="343.2" y="675.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="346.2" y="686.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.59%)</title><rect x="343.2" y="659.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="346.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.59%)</title><rect x="350.1" y="723.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="353.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 1.18%)</title><rect x="357.1" y="803.0" width="13.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="360.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 1.18%)</title><rect x="357.1" y="787.0" width="13.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="360.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 1.18%)</title><rect x="357.1" y="771.0" width="13.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="360.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 1.18%)</title><rect x="357.1" y="755.0" width="13.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="360.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 1.18%)</title><rect x="357.1" y="739.0" width="13.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="360.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.59%)</title><rect x="364.0" y="723.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="367.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (27 samples, 15.88%)</title><rect x="370.9" y="899.0" width="187.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="373.9" y="910.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (6 samples, 3.53%)</title><rect x="370.9" y="883.0" width="41.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="373.9" y="894.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (6 samples, 3.53%)</title><rect x="370.9" y="867.0" width="41.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="373.9" y="878.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (6 samples, 3.53%)</title><rect x="370.9" y="851.0" width="41.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="373.9" y="862.0">ch/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (6 samples, 3.53%)</title><rect x="370.9" y="835.0" width="41.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="373.9" y="846.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 2.35%)</title><rect x="384.8" y="819.0" width="27.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="387.8" y="830.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 2.35%)</title><rect x="384.8" y="803.0" width="27.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="387.8" y="814.0">j..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.59%)</title><rect x="405.6" y="787.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="408.6" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.59%)</title><rect x="412.6" y="883.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="415.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.59%)</title><rect x="412.6" y="867.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="415.6" y="878.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.59%)</title><rect x="412.6" y="851.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="415.6" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (9 samples, 5.29%)</title><rect x="419.5" y="883.0" width="62.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="422.5" y="894.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (9 samples, 5.29%)</title><rect x="419.5" y="867.0" width="62.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="422.5" y="878.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 1.76%)</title><rect x="426.5" y="851.0" width="20.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="429.5" y="862.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.76%)</title><rect x="426.5" y="835.0" width="20.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="429.5" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.18%)</title><rect x="433.4" y="819.0" width="13.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="436.4" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.59%)</title><rect x="433.4" y="803.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="436.4" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.59%)</title><rect x="433.4" y="787.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="436.4" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.59%)</title><rect x="433.4" y="771.0" width="7.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="436.4" y="782.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.59%)</title><rect x="440.4" y="803.0" width="6.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="443.4" y="814.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 2.94%)</title><rect x="447.3" y="851.0" width="34.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="450.3" y="862.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (4 samples, 2.35%)</title><rect x="454.2" y="835.0" width="27.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="457.2" y="846.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.59%)</title><rect x="454.2" y="819.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="457.2" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.59%)</title><rect x="454.2" y="803.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="457.2" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.59%)</title><rect x="454.2" y="787.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="457.2" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.59%)</title><rect x="454.2" y="771.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="457.2" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.76%)</title><rect x="461.2" y="819.0" width="20.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="464.2" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.76%)</title><rect x="461.2" y="803.0" width="20.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="464.2" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.18%)</title><rect x="468.1" y="787.0" width="13.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="471.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.59%)</title><rect x="475.1" y="771.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="478.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (10 samples, 5.88%)</title><rect x="482.0" y="883.0" width="69.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="485.0" y="894.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (10 samples, 5.88%)</title><rect x="482.0" y="867.0" width="69.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="485.0" y="878.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/937908263.process (4 samples, 2.35%)</title><rect x="482.0" y="851.0" width="27.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="485.0" y="862.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (4 samples, 2.35%)</title><rect x="482.0" y="835.0" width="27.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="485.0" y="846.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (4 samples, 2.35%)</title><rect x="482.0" y="819.0" width="27.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="485.0" y="830.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 2.35%)</title><rect x="482.0" y="803.0" width="27.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="485.0" y="814.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 1.18%)</title><rect x="482.0" y="787.0" width="13.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="485.0" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 1.18%)</title><rect x="482.0" y="771.0" width="13.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="485.0" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.59%)</title><rect x="488.9" y="755.0" width="7.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="491.9" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.59%)</title><rect x="488.9" y="739.0" width="7.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="491.9" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 1.18%)</title><rect x="495.9" y="787.0" width="13.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="498.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.59%)</title><rect x="509.8" y="851.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="512.8" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.59%)</title><rect x="509.8" y="835.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="512.8" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.59%)</title><rect x="509.8" y="819.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="512.8" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.59%)</title><rect x="509.8" y="803.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="512.8" y="814.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.59%)</title><rect x="509.8" y="787.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="512.8" y="798.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.59%)</title><rect x="509.8" y="771.0" width="6.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="512.8" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453523494.linkToTargetMethod (2 samples, 1.18%)</title><rect x="516.7" y="851.0" width="13.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="519.7" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (2 samples, 1.18%)</title><rect x="516.7" y="835.0" width="13.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="519.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/592751069.get$Lambda (2 samples, 1.18%)</title><rect x="516.7" y="819.0" width="13.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="519.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/592751069.&lt;init&gt; (2 samples, 1.18%)</title><rect x="516.7" y="803.0" width="13.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="519.7" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.59%)</title><rect x="530.6" y="851.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="533.6" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.59%)</title><rect x="530.6" y="835.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="533.6" y="846.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.59%)</title><rect x="530.6" y="819.0" width="6.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="533.6" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.59%)</title><rect x="537.5" y="851.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="540.5" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.59%)</title><rect x="537.5" y="835.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="540.5" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.59%)</title><rect x="537.5" y="819.0" width="7.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="540.5" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.59%)</title><rect x="537.5" y="803.0" width="7.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="540.5" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.59%)</title><rect x="544.5" y="851.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="547.5" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.59%)</title><rect x="544.5" y="835.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="547.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.59%)</title><rect x="551.4" y="883.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="554.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.59%)</title><rect x="551.4" y="867.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="554.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.59%)</title><rect x="551.4" y="851.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="554.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/1484053885.accept (1 samples, 0.59%)</title><rect x="551.4" y="835.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="554.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.59%)</title><rect x="551.4" y="819.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="554.4" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.59%)</title><rect x="551.4" y="803.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="554.4" y="814.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.59%)</title><rect x="551.4" y="787.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="554.4" y="798.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.59%)</title><rect x="551.4" y="771.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="554.4" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.59%)</title><rect x="551.4" y="755.0" width="7.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="554.4" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.59%)</title><rect x="551.4" y="739.0" width="7.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="554.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.18%)</title><rect x="558.4" y="899.0" width="13.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="561.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.18%)</title><rect x="558.4" y="883.0" width="13.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="561.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.18%)</title><rect x="558.4" y="867.0" width="13.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="561.4" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/1484053885.accept (2 samples, 1.18%)</title><rect x="558.4" y="851.0" width="13.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="561.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (2 samples, 1.18%)</title><rect x="558.4" y="835.0" width="13.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="561.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 1.18%)</title><rect x="558.4" y="819.0" width="13.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="561.4" y="830.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 1.18%)</title><rect x="558.4" y="803.0" width="13.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="561.4" y="814.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 1.18%)</title><rect x="558.4" y="787.0" width="13.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="561.4" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.59%)</title><rect x="572.2" y="915.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="575.2" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.59%)</title><rect x="572.2" y="899.0" width="7.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="575.2" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.59%)</title><rect x="572.2" y="883.0" width="7.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="575.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.59%)</title><rect x="579.2" y="963.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="582.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.59%)</title><rect x="579.2" y="947.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="582.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.59%)</title><rect x="586.1" y="963.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="589.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (14 samples, 8.24%)</title><rect x="593.1" y="963.0" width="97.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="596.1" y="974.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (13 samples, 7.65%)</title><rect x="593.1" y="947.0" width="90.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="596.1" y="958.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (12 samples, 7.06%)</title><rect x="600.0" y="931.0" width="83.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="603.0" y="942.0">java/util..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.59%)</title><rect x="600.0" y="915.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="603.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.59%)</title><rect x="606.9" y="915.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="609.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.59%)</title><rect x="606.9" y="899.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="609.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.59%)</title><rect x="606.9" y="883.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="609.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (2 samples, 1.18%)</title><rect x="613.9" y="915.0" width="13.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="616.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.59%)</title><rect x="620.8" y="899.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="623.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (8 samples, 4.71%)</title><rect x="627.8" y="915.0" width="55.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="630.8" y="926.0">java/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (8 samples, 4.71%)</title><rect x="627.8" y="899.0" width="55.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="630.8" y="910.0">sun/m..</text>
</g>
<g>
<title>Unsafe_Park (8 samples, 4.71%)</title><rect x="627.8" y="883.0" width="55.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="630.8" y="894.0">Unsaf..</text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 1.18%)</title><rect x="627.8" y="867.0" width="13.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="630.8" y="878.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.18%)</title><rect x="641.6" y="867.0" width="13.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="644.6" y="878.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.59%)</title><rect x="655.5" y="867.0" width="7.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="658.5" y="878.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 1.18%)</title><rect x="662.5" y="867.0" width="13.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="665.5" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.59%)</title><rect x="676.4" y="867.0" width="6.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="679.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (1 samples, 0.59%)</title><rect x="683.3" y="947.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="686.3" y="958.0"></text>
</g>
<g>
<title>start_thread (72 samples, 42.35%)</title><rect x="690.2" y="1011.0" width="499.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="693.2" y="1022.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (72 samples, 42.35%)</title><rect x="690.2" y="995.0" width="499.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="693.2" y="1006.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 7.06%)</title><rect x="690.2" y="979.0" width="83.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="693.2" y="990.0">GangWorke..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 1.76%)</title><rect x="690.2" y="963.0" width="20.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="693.2" y="974.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 1.76%)</title><rect x="690.2" y="947.0" width="20.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="693.2" y="958.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.59%)</title><rect x="690.2" y="931.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="693.2" y="942.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.18%)</title><rect x="697.2" y="931.0" width="13.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="700.2" y="942.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (9 samples, 5.29%)</title><rect x="711.1" y="963.0" width="62.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="714.1" y="974.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 4.12%)</title><rect x="711.1" y="947.0" width="48.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="714.1" y="958.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.59%)</title><rect x="711.1" y="931.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="714.1" y="942.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.59%)</title><rect x="711.1" y="915.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="714.1" y="926.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 1.18%)</title><rect x="718.0" y="931.0" width="13.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="721.0" y="942.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.59%)</title><rect x="731.9" y="931.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="734.9" y="942.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 1.76%)</title><rect x="738.8" y="931.0" width="20.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="741.8" y="942.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 1.18%)</title><rect x="759.6" y="947.0" width="13.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="762.6" y="958.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.59%)</title><rect x="759.6" y="931.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="762.6" y="942.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.59%)</title><rect x="766.6" y="931.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="769.6" y="942.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (60 samples, 35.29%)</title><rect x="773.5" y="979.0" width="416.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="776.5" y="990.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (60 samples, 35.29%)</title><rect x="773.5" y="963.0" width="416.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="776.5" y="974.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (60 samples, 35.29%)</title><rect x="773.5" y="947.0" width="416.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="776.5" y="958.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (56 samples, 32.94%)</title><rect x="773.5" y="931.0" width="388.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="776.5" y="942.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (56 samples, 32.94%)</title><rect x="773.5" y="915.0" width="388.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="776.5" y="926.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int,..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.59%)</title><rect x="773.5" y="899.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="776.5" y="910.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.59%)</title><rect x="773.5" y="883.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="776.5" y="894.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.59%)</title><rect x="773.5" y="867.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="776.5" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.59%)</title><rect x="773.5" y="851.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="776.5" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.59%)</title><rect x="773.5" y="835.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="776.5" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.59%)</title><rect x="773.5" y="819.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="776.5" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.59%)</title><rect x="773.5" y="803.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="776.5" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.59%)</title><rect x="773.5" y="787.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="776.5" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.59%)</title><rect x="773.5" y="771.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="776.5" y="782.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.59%)</title><rect x="773.5" y="755.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="776.5" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.59%)</title><rect x="773.5" y="739.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="776.5" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.59%)</title><rect x="773.5" y="723.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="776.5" y="734.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.59%)</title><rect x="773.5" y="707.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="776.5" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.59%)</title><rect x="773.5" y="691.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="776.5" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.59%)</title><rect x="773.5" y="675.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="776.5" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.59%)</title><rect x="773.5" y="659.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="776.5" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.59%)</title><rect x="773.5" y="643.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="776.5" y="654.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.59%)</title><rect x="773.5" y="627.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="776.5" y="638.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (27 samples, 15.88%)</title><rect x="780.5" y="899.0" width="187.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="783.5" y="910.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.59%)</title><rect x="780.5" y="883.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="783.5" y="894.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.59%)</title><rect x="780.5" y="867.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="783.5" y="878.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.59%)</title><rect x="780.5" y="851.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="783.5" y="862.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.59%)</title><rect x="780.5" y="835.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="783.5" y="846.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.59%)</title><rect x="780.5" y="819.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="783.5" y="830.0"></text>
</g>
<g>
<title>Assembler::movq(RegisterImpl*, Address) (1 samples, 0.59%)</title><rect x="780.5" y="803.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="783.5" y="814.0"></text>
</g>
<g>
<title>Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&amp;, int) [clone .constprop.172] (1 samples, 0.59%)</title><rect x="780.5" y="787.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="783.5" y="798.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.18%)</title><rect x="787.4" y="883.0" width="13.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="790.4" y="894.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.59%)</title><rect x="787.4" y="867.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="790.4" y="878.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.59%)</title><rect x="787.4" y="851.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="790.4" y="862.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.59%)</title><rect x="794.4" y="867.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="797.4" y="878.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.18%)</title><rect x="801.3" y="883.0" width="13.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="804.3" y="894.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 1.18%)</title><rect x="801.3" y="867.0" width="13.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="804.3" y="878.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.59%)</title><rect x="808.2" y="851.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="811.2" y="862.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.59%)</title><rect x="808.2" y="835.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="811.2" y="846.0"></text>
</g>
<g>
<title>State::_sub_Op_StoreCM(Node const*) (1 samples, 0.59%)</title><rect x="808.2" y="819.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="811.2" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.18%)</title><rect x="815.2" y="883.0" width="13.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="818.2" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.18%)</title><rect x="815.2" y="867.0" width="13.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="818.2" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 1.18%)</title><rect x="815.2" y="851.0" width="13.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="818.2" y="862.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.59%)</title><rect x="815.2" y="835.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="818.2" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.59%)</title><rect x="822.1" y="835.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="825.1" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (20 samples, 11.76%)</title><rect x="829.1" y="883.0" width="138.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="832.1" y="894.0">PhaseChaitin::Reg..</text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.76%)</title><rect x="829.1" y="867.0" width="20.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="832.1" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.59%)</title><rect x="842.9" y="851.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="845.9" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.59%)</title><rect x="842.9" y="835.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="845.9" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.59%)</title><rect x="849.9" y="867.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="852.9" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.59%)</title><rect x="849.9" y="851.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="852.9" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.59%)</title><rect x="849.9" y="835.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="852.9" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 1.18%)</title><rect x="856.8" y="867.0" width="13.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="859.8" y="878.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.59%)</title><rect x="863.8" y="851.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="866.8" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 1.76%)</title><rect x="870.7" y="867.0" width="20.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="873.7" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.18%)</title><rect x="877.6" y="851.0" width="13.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="880.6" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.18%)</title><rect x="877.6" y="835.0" width="13.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="880.6" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.59%)</title><rect x="891.5" y="867.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="894.5" y="878.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.59%)</title><rect x="891.5" y="851.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="894.5" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (1 samples, 0.59%)</title><rect x="898.5" y="867.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="901.5" y="878.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.59%)</title><rect x="898.5" y="851.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="901.5" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (3 samples, 1.76%)</title><rect x="905.4" y="867.0" width="20.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="908.4" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.59%)</title><rect x="926.2" y="867.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="929.2" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.59%)</title><rect x="926.2" y="851.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="929.2" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 1.18%)</title><rect x="933.2" y="867.0" width="13.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="936.2" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.59%)</title><rect x="940.1" y="851.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="943.1" y="862.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.76%)</title><rect x="947.1" y="867.0" width="20.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="950.1" y="878.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.59%)</title><rect x="960.9" y="851.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="963.9" y="862.0"></text>
</g>
<g>
<title>Compile::Optimize() (20 samples, 11.76%)</title><rect x="967.9" y="899.0" width="138.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="970.9" y="910.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.59%)</title><rect x="967.9" y="883.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="970.9" y="894.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.59%)</title><rect x="967.9" y="867.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="970.9" y="878.0"></text>
</g>
<g>
<title>Compile::eliminate_redundant_card_marks(Node*) (1 samples, 0.59%)</title><rect x="967.9" y="851.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="970.9" y="862.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.59%)</title><rect x="974.8" y="883.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="977.8" y="894.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.59%)</title><rect x="974.8" y="867.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="977.8" y="878.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.59%)</title><rect x="974.8" y="851.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="977.8" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (12 samples, 7.06%)</title><rect x="981.8" y="883.0" width="83.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="984.8" y="894.0">PhaseIdea..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 1.18%)</title><rect x="981.8" y="867.0" width="13.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="984.8" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 1.18%)</title><rect x="981.8" y="851.0" width="13.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="984.8" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (2 samples, 1.18%)</title><rect x="981.8" y="835.0" width="13.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="984.8" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.59%)</title><rect x="981.8" y="819.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="984.8" y="830.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.59%)</title><rect x="981.8" y="803.0" width="6.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="984.8" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.59%)</title><rect x="988.7" y="819.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="991.7" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.59%)</title><rect x="988.7" y="803.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="991.7" y="814.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.59%)</title><rect x="988.7" y="787.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="991.7" y="798.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.59%)</title><rect x="988.7" y="771.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="991.7" y="782.0"></text>
</g>
<g>
<title>ParmNode::is_CFG() const (1 samples, 0.59%)</title><rect x="995.6" y="867.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="998.6" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.59%)</title><rect x="1002.6" y="867.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1005.6" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.76%)</title><rect x="1009.5" y="867.0" width="20.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1012.5" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 1.18%)</title><rect x="1030.4" y="867.0" width="13.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1033.4" y="878.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.59%)</title><rect x="1044.2" y="867.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1047.2" y="878.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (2 samples, 1.18%)</title><rect x="1051.2" y="867.0" width="13.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1054.2" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 2.35%)</title><rect x="1065.1" y="883.0" width="27.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1068.1" y="894.0">P..</text>
</g>
<g>
<title>CmpUNode::Value(PhaseTransform*) const (1 samples, 0.59%)</title><rect x="1065.1" y="867.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1068.1" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.76%)</title><rect x="1072.0" y="867.0" width="20.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1075.0" y="878.0"></text>
</g>
<g>
<title>CmpPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.59%)</title><rect x="1072.0" y="851.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1075.0" y="862.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.59%)</title><rect x="1078.9" y="851.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1081.9" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.59%)</title><rect x="1085.9" y="851.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1088.9" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) (1 samples, 0.59%)</title><rect x="1085.9" y="835.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1088.9" y="846.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.59%)</title><rect x="1092.8" y="883.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1095.8" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.59%)</title><rect x="1092.8" y="867.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1095.8" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.59%)</title><rect x="1092.8" y="851.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.8" y="862.0"></text>
</g>
<g>
<title>URShiftLNode::Value(PhaseTransform*) const (1 samples, 0.59%)</title><rect x="1092.8" y="835.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1095.8" y="846.0"></text>
</g>
<g>
<title>SubNode::Value(PhaseTransform*) const (1 samples, 0.59%)</title><rect x="1099.8" y="883.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1102.8" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 4.71%)</title><rect x="1106.7" y="899.0" width="55.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1109.7" y="910.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 4.71%)</title><rect x="1106.7" y="883.0" width="55.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1109.7" y="894.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 4.71%)</title><rect x="1106.7" y="867.0" width="55.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1109.7" y="878.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 4.71%)</title><rect x="1106.7" y="851.0" width="55.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.7" y="862.0">Parse..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.59%)</title><rect x="1106.7" y="835.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1109.7" y="846.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.59%)</title><rect x="1106.7" y="819.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1109.7" y="830.0"></text>
</g>
<g>
<title>GraphKit::combine_exception_states(SafePointNode*, SafePointNode*) (1 samples, 0.59%)</title><rect x="1106.7" y="803.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1109.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 4.12%)</title><rect x="1113.6" y="835.0" width="48.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.6" y="846.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.53%)</title><rect x="1113.6" y="819.0" width="41.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1116.6" y="830.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 3.53%)</title><rect x="1113.6" y="803.0" width="41.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.6" y="814.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 3.53%)</title><rect x="1113.6" y="787.0" width="41.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.6" y="798.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.53%)</title><rect x="1113.6" y="771.0" width="41.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.6" y="782.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.53%)</title><rect x="1113.6" y="755.0" width="41.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.6" y="766.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.53%)</title><rect x="1113.6" y="739.0" width="41.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.6" y="750.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.53%)</title><rect x="1113.6" y="723.0" width="41.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.6" y="734.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.35%)</title><rect x="1113.6" y="707.0" width="27.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.6" y="718.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.35%)</title><rect x="1113.6" y="691.0" width="27.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.6" y="702.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.35%)</title><rect x="1113.6" y="675.0" width="27.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.6" y="686.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.35%)</title><rect x="1113.6" y="659.0" width="27.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.6" y="670.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.35%)</title><rect x="1113.6" y="643.0" width="27.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.6" y="654.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.35%)</title><rect x="1113.6" y="627.0" width="27.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.6" y="638.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.35%)</title><rect x="1113.6" y="611.0" width="27.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.6" y="622.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.35%)</title><rect x="1113.6" y="595.0" width="27.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.6" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.35%)</title><rect x="1113.6" y="579.0" width="27.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.6" y="590.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.35%)</title><rect x="1113.6" y="563.0" width="27.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.6" y="574.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.35%)</title><rect x="1113.6" y="547.0" width="27.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.6" y="558.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.76%)</title><rect x="1113.6" y="531.0" width="20.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1116.6" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.76%)</title><rect x="1113.6" y="515.0" width="20.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.6" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.76%)</title><rect x="1113.6" y="499.0" width="20.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1116.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.76%)</title><rect x="1113.6" y="483.0" width="20.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.76%)</title><rect x="1113.6" y="467.0" width="20.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.76%)</title><rect x="1113.6" y="451.0" width="20.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.76%)</title><rect x="1113.6" y="435.0" width="20.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.6" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.76%)</title><rect x="1113.6" y="419.0" width="20.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.6" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.76%)</title><rect x="1113.6" y="403.0" width="20.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.76%)</title><rect x="1113.6" y="387.0" width="20.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.76%)</title><rect x="1113.6" y="371.0" width="20.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.76%)</title><rect x="1113.6" y="355.0" width="20.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.76%)</title><rect x="1113.6" y="339.0" width="20.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1116.6" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.76%)</title><rect x="1113.6" y="323.0" width="20.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.6" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.76%)</title><rect x="1113.6" y="307.0" width="20.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.76%)</title><rect x="1113.6" y="291.0" width="20.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.76%)</title><rect x="1113.6" y="275.0" width="20.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1116.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.76%)</title><rect x="1113.6" y="259.0" width="20.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.76%)</title><rect x="1113.6" y="243.0" width="20.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1116.6" y="254.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.59%)</title><rect x="1113.6" y="227.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.6" y="238.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.59%)</title><rect x="1113.6" y="211.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.6" y="222.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.59%)</title><rect x="1113.6" y="195.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.6" y="206.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.59%)</title><rect x="1113.6" y="179.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.6" y="190.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.59%)</title><rect x="1113.6" y="163.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.6" y="174.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.59%)</title><rect x="1113.6" y="147.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.6" y="158.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.59%)</title><rect x="1113.6" y="131.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.6" y="142.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.59%)</title><rect x="1113.6" y="115.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1116.6" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.18%)</title><rect x="1120.6" y="227.0" width="13.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.6" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.18%)</title><rect x="1120.6" y="211.0" width="13.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1123.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.18%)</title><rect x="1120.6" y="195.0" width="13.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.6" y="206.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.59%)</title><rect x="1120.6" y="179.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.6" y="190.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.59%)</title><rect x="1120.6" y="163.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1123.6" y="174.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) [clone .constprop.338] (1 samples, 0.59%)</title><rect x="1120.6" y="147.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1123.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.59%)</title><rect x="1127.5" y="179.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.59%)</title><rect x="1127.5" y="163.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.5" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.59%)</title><rect x="1127.5" y="147.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.5" y="158.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.59%)</title><rect x="1127.5" y="131.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.5" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.59%)</title><rect x="1127.5" y="115.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.5" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.59%)</title><rect x="1127.5" y="99.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.5" y="110.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.59%)</title><rect x="1127.5" y="83.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.5" y="94.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.59%)</title><rect x="1127.5" y="67.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.5" y="78.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_special_method(CallInfo&amp;, methodHandle, KlassHandle, KlassHandle, Handle, bool, Thread*) (1 samples, 0.59%)</title><rect x="1127.5" y="51.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.5" y="62.0"></text>
</g>
<g>
<title>CallInfo::set_static(KlassHandle, methodHandle, Thread*) (1 samples, 0.59%)</title><rect x="1127.5" y="35.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.5" y="46.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.59%)</title><rect x="1134.5" y="531.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.5" y="542.0"></text>
</g>
<g>
<title>Parse::merge(int) (1 samples, 0.59%)</title><rect x="1134.5" y="515.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.5" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.18%)</title><rect x="1141.4" y="707.0" width="13.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.4" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1141.4" y="691.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.4" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.59%)</title><rect x="1141.4" y="675.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.59%)</title><rect x="1141.4" y="659.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.59%)</title><rect x="1141.4" y="643.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.59%)</title><rect x="1141.4" y="627.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.59%)</title><rect x="1141.4" y="611.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.59%)</title><rect x="1141.4" y="595.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.4" y="606.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.59%)</title><rect x="1141.4" y="579.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.4" y="590.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.59%)</title><rect x="1141.4" y="563.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.4" y="574.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.59%)</title><rect x="1141.4" y="547.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.4" y="558.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.59%)</title><rect x="1141.4" y="531.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.4" y="542.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.59%)</title><rect x="1141.4" y="515.0" width="7.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1144.4" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1148.4" y="691.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.4" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1148.4" y="675.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.4" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.59%)</title><rect x="1148.4" y="659.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.59%)</title><rect x="1148.4" y="643.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.59%)</title><rect x="1148.4" y="627.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.59%)</title><rect x="1148.4" y="611.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.59%)</title><rect x="1148.4" y="595.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1148.4" y="579.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.4" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.59%)</title><rect x="1148.4" y="563.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.59%)</title><rect x="1148.4" y="547.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.59%)</title><rect x="1148.4" y="531.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.59%)</title><rect x="1148.4" y="515.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.59%)</title><rect x="1148.4" y="499.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.4" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1148.4" y="483.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.4" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.59%)</title><rect x="1148.4" y="467.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.59%)</title><rect x="1148.4" y="451.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.59%)</title><rect x="1148.4" y="435.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.59%)</title><rect x="1148.4" y="419.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.59%)</title><rect x="1148.4" y="403.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.4" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1148.4" y="387.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.4" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.59%)</title><rect x="1148.4" y="371.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.59%)</title><rect x="1148.4" y="355.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.59%)</title><rect x="1148.4" y="339.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.59%)</title><rect x="1148.4" y="323.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.59%)</title><rect x="1148.4" y="307.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.59%)</title><rect x="1148.4" y="291.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.4" y="302.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.59%)</title><rect x="1148.4" y="275.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.4" y="286.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.59%)</title><rect x="1148.4" y="259.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.4" y="270.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.59%)</title><rect x="1148.4" y="243.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.4" y="254.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.59%)</title><rect x="1148.4" y="227.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.4" y="238.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.59%)</title><rect x="1148.4" y="211.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.59%)</title><rect x="1155.3" y="819.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.3" y="830.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.59%)</title><rect x="1155.3" y="803.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.3" y="814.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.76%)</title><rect x="1162.2" y="931.0" width="20.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.2" y="942.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.76%)</title><rect x="1162.2" y="915.0" width="20.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.2" y="926.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.76%)</title><rect x="1162.2" y="899.0" width="20.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.2" y="910.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.76%)</title><rect x="1162.2" y="883.0" width="20.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.2" y="894.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 1.18%)</title><rect x="1162.2" y="867.0" width="13.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.2" y="878.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 1.18%)</title><rect x="1162.2" y="851.0" width="13.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.2" y="862.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.59%)</title><rect x="1162.2" y="835.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.2" y="846.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.59%)</title><rect x="1162.2" y="819.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.2" y="830.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.59%)</title><rect x="1162.2" y="803.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.2" y="814.0"></text>
</g>
<g>
<title>LinearScanWalker::split_and_spill_interval(Interval*) (1 samples, 0.59%)</title><rect x="1162.2" y="787.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.2" y="798.0"></text>
</g>
<g>
<title>IntervalWalker::append_to_unhandled(Interval**, Interval*) (1 samples, 0.59%)</title><rect x="1162.2" y="771.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.2" y="782.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.59%)</title><rect x="1169.2" y="835.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.2" y="846.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.59%)</title><rect x="1169.2" y="819.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.2" y="830.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.59%)</title><rect x="1169.2" y="803.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.2" y="814.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.59%)</title><rect x="1169.2" y="787.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.2" y="798.0"></text>
</g>
<g>
<title>LinearScan::append_scope_value(int, Instruction*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.59%)</title><rect x="1169.2" y="771.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.2" y="782.0"></text>
</g>
<g>
<title>LinearScan::color_lir_opr(LIR_OprDesc*, int, LIR_OpVisitState::OprMode) (1 samples, 0.59%)</title><rect x="1169.2" y="755.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.2" y="766.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.59%)</title><rect x="1176.1" y="867.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.1" y="878.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.59%)</title><rect x="1176.1" y="851.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.1" y="862.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.59%)</title><rect x="1176.1" y="835.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.1" y="846.0"></text>
</g>
<g>
<title>ciReceiverTypeData::translate_receiver_data_from(ProfileData const*) (1 samples, 0.59%)</title><rect x="1176.1" y="819.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.1" y="830.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.59%)</title><rect x="1176.1" y="803.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.1" y="814.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.59%)</title><rect x="1176.1" y="787.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.1" y="798.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(KlassHandle) (1 samples, 0.59%)</title><rect x="1176.1" y="771.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.1" y="782.0"></text>
</g>
<g>
<title>ciKlass::ciKlass(KlassHandle) (1 samples, 0.59%)</title><rect x="1176.1" y="755.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.1" y="766.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.59%)</title><rect x="1176.1" y="739.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.1" y="750.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.59%)</title><rect x="1183.1" y="931.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.1" y="942.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.59%)</title><rect x="1183.1" y="915.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.1" y="926.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_object(oopDesc*) (1 samples, 0.59%)</title><rect x="1183.1" y="899.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.1" y="910.0"></text>
</g>
<g>
<title>JNIHandles::make_local(oopDesc*) (1 samples, 0.59%)</title><rect x="1183.1" y="883.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="894.0"></text>
</g>
</g>
</svg>
