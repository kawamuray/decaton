<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,468 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2035.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2019.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2003.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1987.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1971.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1955.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1939.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1923.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1907.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1891.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1763.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1731.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1715.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1683.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1667.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1651.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1635.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1619.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1603.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1587.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1571.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1555.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1539.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1523.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1507.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1491.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1475.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1459.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1443.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1427.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1395.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1379.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1299.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1283.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1267.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1251.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1235.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1219.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1155.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1123.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="915.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="899.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="835.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="819.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="787.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="771.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="755.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="739.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="723.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="707.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="691.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="675.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="659.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="643.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="627.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="611.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="595.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="579.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="563.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="547.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="531.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="515.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="483.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="467.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="451.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="435.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="419.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="403.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="387.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="371.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="355.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="339.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="323.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="307.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="291.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="275.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="259.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="243.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="227.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="211.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="195.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="179.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="163.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="147.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="131.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="115.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="99.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="83.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="67.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="51.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="10.0" y="35.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.07%)</title><rect x="10.8" y="2035.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.8" y="2046.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.07%)</title><rect x="10.8" y="2019.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="13.8" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (240 samples, 16.35%)</title><rect x="11.6" y="2035.0" width="192.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.6" y="2046.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.07%)</title><rect x="11.6" y="2019.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.6" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.07%)</title><rect x="11.6" y="2003.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="14.6" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.07%)</title><rect x="11.6" y="1987.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="14.6" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.07%)</title><rect x="11.6" y="1971.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.07%)</title><rect x="11.6" y="1955.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="11.6" y="1939.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="11.6" y="1923.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="14.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="11.6" y="1907.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.07%)</title><rect x="11.6" y="1891.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.07%)</title><rect x="11.6" y="1875.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.07%)</title><rect x="11.6" y="1859.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="14.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.07%)</title><rect x="11.6" y="1843.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.07%)</title><rect x="11.6" y="1827.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="14.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.07%)</title><rect x="11.6" y="1811.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.6" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.07%)</title><rect x="11.6" y="1795.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.6" y="1806.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.07%)</title><rect x="11.6" y="1779.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.6" y="1790.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.07%)</title><rect x="11.6" y="1763.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.6" y="1774.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.07%)</title><rect x="11.6" y="1747.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.6" y="1758.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerLastTemporaryDirectBuffer (1 samples, 0.07%)</title><rect x="11.6" y="1731.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.6" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (239 samples, 16.28%)</title><rect x="12.4" y="2019.0" width="192.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="15.4" y="2030.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (3 samples, 0.20%)</title><rect x="14.0" y="2003.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.0" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.20%)</title><rect x="14.0" y="1987.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.0" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/211492285.accept (3 samples, 0.20%)</title><rect x="14.0" y="1971.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.0" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (3 samples, 0.20%)</title><rect x="14.0" y="1955.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.14%)</title><rect x="14.8" y="1939.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.8" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.14%)</title><rect x="14.8" y="1923.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.8" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.14%)</title><rect x="16.4" y="2003.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.4" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.14%)</title><rect x="16.4" y="1987.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.4" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.14%)</title><rect x="16.4" y="1971.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="19.4" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="16.4" y="1955.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.4" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="17.2" y="1939.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="20.2" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="17.2" y="1923.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="17.2" y="1907.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.2" y="1918.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="17.2" y="1891.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="20.2" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="18.0" y="2003.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.0" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.maybeHandlePropertyReload (1 samples, 0.07%)</title><rect x="18.0" y="1987.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.0" y="1998.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (180 samples, 12.26%)</title><rect x="18.8" y="2003.0" width="144.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="21.8" y="2014.0">java/lang/Iterable..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/520692097.accept (169 samples, 11.51%)</title><rect x="18.8" y="1987.0" width="135.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.8" y="1998.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (169 samples, 11.51%)</title><rect x="18.8" y="1971.0" width="135.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.8" y="1982.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (2 samples, 0.14%)</title><rect x="18.8" y="1955.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="21.8" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (135 samples, 9.20%)</title><rect x="20.4" y="1955.0" width="108.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.4" y="1966.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (135 samples, 9.20%)</title><rect x="20.4" y="1939.0" width="108.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.4" y="1950.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (135 samples, 9.20%)</title><rect x="20.4" y="1923.0" width="108.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="23.4" y="1934.0">com/linecorp/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (135 samples, 9.20%)</title><rect x="20.4" y="1907.0" width="108.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.4" y="1918.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (135 samples, 9.20%)</title><rect x="20.4" y="1891.0" width="108.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.4" y="1902.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (135 samples, 9.20%)</title><rect x="20.4" y="1875.0" width="108.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="23.4" y="1886.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (86 samples, 5.86%)</title><rect x="51.8" y="1859.0" width="69.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="54.8" y="1870.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (18 samples, 1.23%)</title><rect x="55.0" y="1843.0" width="14.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="58.0" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (18 samples, 1.23%)</title><rect x="55.0" y="1827.0" width="14.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.0" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (18 samples, 1.23%)</title><rect x="55.0" y="1811.0" width="14.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="58.0" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.14%)</title><rect x="69.5" y="1843.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="72.5" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (2 samples, 0.14%)</title><rect x="69.5" y="1827.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="72.5" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.07%)</title><rect x="70.3" y="1811.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="73.3" y="1822.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.07%)</title><rect x="70.3" y="1795.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="73.3" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (62 samples, 4.22%)</title><rect x="71.1" y="1843.0" width="49.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="74.1" y="1854.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (62 samples, 4.22%)</title><rect x="71.1" y="1827.0" width="49.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="74.1" y="1838.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (60 samples, 4.09%)</title><rect x="71.1" y="1811.0" width="48.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="74.1" y="1822.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (60 samples, 4.09%)</title><rect x="71.1" y="1795.0" width="48.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.1" y="1806.0">java..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (60 samples, 4.09%)</title><rect x="71.1" y="1779.0" width="48.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="74.1" y="1790.0">sun/..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="71.9" y="1763.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="74.9" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Unpark (53 samples, 3.61%)</title><rect x="72.7" y="1763.0" width="42.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="75.7" y="1774.0">Unsa..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.07%)</title><rect x="74.3" y="1747.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="77.3" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (34 samples, 2.32%)</title><rect x="75.1" y="1747.0" width="27.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="78.1" y="1758.0">_..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (5 samples, 0.34%)</title><rect x="102.4" y="1747.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="105.4" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (11 samples, 0.75%)</title><rect x="106.5" y="1747.0" width="8.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="109.5" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.20%)</title><rect x="115.3" y="1763.0" width="2.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="118.3" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.14%)</title><rect x="117.7" y="1763.0" width="1.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="120.7" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.14%)</title><rect x="119.3" y="1811.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="122.3" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.41%)</title><rect x="120.9" y="1859.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="123.9" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (6 samples, 0.41%)</title><rect x="120.9" y="1843.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="123.9" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.41%)</title><rect x="120.9" y="1827.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="123.9" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.14%)</title><rect x="125.7" y="1859.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="128.7" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.14%)</title><rect x="125.7" y="1843.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="128.7" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="125.7" y="1827.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="128.7" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.07%)</title><rect x="125.7" y="1811.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="128.7" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.07%)</title><rect x="126.6" y="1827.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="129.6" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.07%)</title><rect x="126.6" y="1811.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="129.6" y="1822.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="127.4" y="1859.0" width="1.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="130.4" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.14%)</title><rect x="129.0" y="1955.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="132.0" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.14%)</title><rect x="129.0" y="1939.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.0" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (6 samples, 0.41%)</title><rect x="130.6" y="1955.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="133.6" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.41%)</title><rect x="130.6" y="1939.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="133.6" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.41%)</title><rect x="130.6" y="1923.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="133.6" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (24 samples, 1.63%)</title><rect x="135.4" y="1955.0" width="19.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="138.4" y="1966.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.07%)</title><rect x="136.2" y="1939.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="139.2" y="1950.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (22 samples, 1.50%)</title><rect x="137.0" y="1939.0" width="17.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="140.0" y="1950.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 0.54%)</title><rect x="147.5" y="1923.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="150.5" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.34%)</title><rect x="147.5" y="1907.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="150.5" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 0.34%)</title><rect x="147.5" y="1891.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="150.5" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.34%)</title><rect x="147.5" y="1875.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="150.5" y="1886.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="149.9" y="1859.0" width="1.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="152.9" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.14%)</title><rect x="151.5" y="1907.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="154.5" y="1918.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.07%)</title><rect x="153.1" y="1907.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="156.1" y="1918.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="153.9" y="1923.0" width="0.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="156.9" y="1934.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="154.7" y="1987.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="157.7" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (9 samples, 0.61%)</title><rect x="155.5" y="1987.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="158.5" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (9 samples, 0.61%)</title><rect x="155.5" y="1971.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="158.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.14%)</title><rect x="161.1" y="1955.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="164.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.14%)</title><rect x="161.1" y="1939.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="164.1" y="1950.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (2 samples, 0.14%)</title><rect x="161.1" y="1923.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="164.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.07%)</title><rect x="162.7" y="1987.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="165.7" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="162.7" y="1971.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="165.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (51 samples, 3.47%)</title><rect x="163.5" y="2003.0" width="41.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="166.5" y="2014.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (51 samples, 3.47%)</title><rect x="163.5" y="1987.0" width="41.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="166.5" y="1998.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (28 samples, 1.91%)</title><rect x="164.3" y="1971.0" width="22.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="167.3" y="1982.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (28 samples, 1.91%)</title><rect x="164.3" y="1955.0" width="22.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="167.3" y="1966.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (26 samples, 1.77%)</title><rect x="165.1" y="1939.0" width="20.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="168.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (22 samples, 1.50%)</title><rect x="165.1" y="1923.0" width="17.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="168.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (22 samples, 1.50%)</title><rect x="165.1" y="1907.0" width="17.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="168.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 0.68%)</title><rect x="166.7" y="1891.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="169.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (4 samples, 0.27%)</title><rect x="171.6" y="1875.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="174.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.27%)</title><rect x="171.6" y="1859.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="174.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.27%)</title><rect x="171.6" y="1843.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="174.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.27%)</title><rect x="171.6" y="1827.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="174.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.27%)</title><rect x="171.6" y="1811.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="174.6" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (4 samples, 0.27%)</title><rect x="171.6" y="1795.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="174.6" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (4 samples, 0.27%)</title><rect x="171.6" y="1779.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="174.6" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (9 samples, 0.61%)</title><rect x="174.8" y="1891.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="177.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (9 samples, 0.61%)</title><rect x="174.8" y="1875.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="177.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.34%)</title><rect x="174.8" y="1859.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="177.8" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.34%)</title><rect x="174.8" y="1843.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="177.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.27%)</title><rect x="178.8" y="1859.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="181.8" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.27%)</title><rect x="178.8" y="1843.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="181.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.07%)</title><rect x="182.0" y="1891.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="185.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.14%)</title><rect x="182.8" y="1923.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="185.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.14%)</title><rect x="182.8" y="1907.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="185.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="182.8" y="1891.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="185.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="182.8" y="1875.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="185.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="182.8" y="1859.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="185.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="183.6" y="1843.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="186.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="183.6" y="1827.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.07%)</title><rect x="184.4" y="1923.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="187.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (1 samples, 0.07%)</title><rect x="185.2" y="1923.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="188.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.07%)</title><rect x="185.2" y="1907.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="188.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.07%)</title><rect x="185.2" y="1891.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="188.2" y="1902.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="185.2" y="1875.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="188.2" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="185.2" y="1859.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="188.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.07%)</title><rect x="186.0" y="1939.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="189.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (10 samples, 0.68%)</title><rect x="186.8" y="1971.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.54%)</title><rect x="186.8" y="1955.0" width="6.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="189.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.34%)</title><rect x="186.8" y="1939.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="189.8" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.14%)</title><rect x="186.8" y="1923.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="189.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/284839787.accept (2 samples, 0.14%)</title><rect x="186.8" y="1907.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="189.8" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="188.4" y="1923.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="191.4" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="188.4" y="1907.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="191.4" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="188.4" y="1891.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="191.4" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="188.4" y="1875.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="191.4" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="188.4" y="1859.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="191.4" y="1870.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="188.4" y="1843.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="191.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.14%)</title><rect x="189.3" y="1923.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="192.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.14%)</title><rect x="189.3" y="1907.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="192.3" y="1918.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.07%)</title><rect x="189.3" y="1891.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="192.3" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="190.1" y="1891.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="193.1" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="190.1" y="1875.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="193.1" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="190.1" y="1859.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="193.1" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="190.1" y="1843.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="193.1" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="190.1" y="1827.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="193.1" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="190.1" y="1811.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="193.1" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="190.1" y="1795.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.1" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="190.1" y="1779.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.1" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="190.1" y="1763.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="193.1" y="1774.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="190.1" y="1747.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="193.1" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (3 samples, 0.20%)</title><rect x="190.9" y="1939.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="193.9" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.14%)</title><rect x="191.7" y="1923.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="194.7" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="191.7" y="1907.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="194.7" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.14%)</title><rect x="191.7" y="1891.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.7" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.14%)</title><rect x="191.7" y="1875.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="194.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="191.7" y="1859.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="194.7" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.14%)</title><rect x="191.7" y="1843.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="194.7" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.14%)</title><rect x="191.7" y="1827.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="194.7" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.07%)</title><rect x="191.7" y="1811.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="194.7" y="1822.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.07%)</title><rect x="191.7" y="1795.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.7" y="1806.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.07%)</title><rect x="191.7" y="1779.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="194.7" y="1790.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="191.7" y="1763.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="194.7" y="1774.0"></text>
</g>
<g>
<title>CompiledIC::is_in_transition_state() const (1 samples, 0.07%)</title><rect x="191.7" y="1747.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="194.7" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="192.5" y="1811.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="195.5" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.14%)</title><rect x="193.3" y="1955.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="196.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.07%)</title><rect x="193.3" y="1939.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="196.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.07%)</title><rect x="193.3" y="1923.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="196.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.07%)</title><rect x="193.3" y="1907.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="196.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.07%)</title><rect x="193.3" y="1891.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.07%)</title><rect x="193.3" y="1875.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="196.3" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="193.3" y="1859.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="196.3" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="193.3" y="1843.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="196.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.07%)</title><rect x="194.1" y="1939.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="197.1" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.07%)</title><rect x="194.1" y="1923.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="197.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.07%)</title><rect x="194.1" y="1907.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="197.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (2 samples, 0.14%)</title><rect x="194.9" y="1971.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="197.9" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.07%)</title><rect x="194.9" y="1955.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="197.9" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.07%)</title><rect x="194.9" y="1939.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="197.9" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="194.9" y="1923.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="197.9" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.07%)</title><rect x="194.9" y="1907.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="197.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.07%)</title><rect x="195.7" y="1955.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="198.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.41%)</title><rect x="196.5" y="1971.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.20%)</title><rect x="196.5" y="1955.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="199.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.20%)</title><rect x="196.5" y="1939.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="199.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="196.5" y="1923.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="199.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="196.5" y="1907.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="196.5" y="1891.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="199.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/MetricConfig.quota (1 samples, 0.07%)</title><rect x="196.5" y="1875.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.14%)</title><rect x="197.3" y="1923.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="200.3" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.07%)</title><rect x="197.3" y="1907.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="200.3" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.07%)</title><rect x="197.3" y="1891.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="200.3" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="197.3" y="1875.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="200.3" y="1886.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="197.3" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="200.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.07%)</title><rect x="198.1" y="1907.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="201.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.07%)</title><rect x="198.1" y="1891.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="201.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.07%)</title><rect x="198.1" y="1875.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="201.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.07%)</title><rect x="198.1" y="1859.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="201.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.07%)</title><rect x="198.1" y="1843.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="201.1" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.07%)</title><rect x="198.1" y="1827.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="201.1" y="1838.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="198.1" y="1811.0" width="0.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="201.1" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (3 samples, 0.20%)</title><rect x="198.9" y="1955.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="201.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (3 samples, 0.20%)</title><rect x="198.9" y="1939.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="201.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (3 samples, 0.20%)</title><rect x="198.9" y="1923.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="201.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (3 samples, 0.20%)</title><rect x="198.9" y="1907.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="201.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (3 samples, 0.20%)</title><rect x="198.9" y="1891.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="201.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (3 samples, 0.20%)</title><rect x="198.9" y="1875.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="201.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (2 samples, 0.14%)</title><rect x="198.9" y="1859.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="201.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.&lt;init&gt; (1 samples, 0.07%)</title><rect x="199.7" y="1843.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.07%)</title><rect x="200.5" y="1859.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.07%)</title><rect x="200.5" y="1843.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="203.5" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.07%)</title><rect x="200.5" y="1827.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="203.5" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.sizeOf (1 samples, 0.07%)</title><rect x="200.5" y="1811.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="203.5" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8Length (1 samples, 0.07%)</title><rect x="200.5" y="1795.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="203.5" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.20%)</title><rect x="201.3" y="1971.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="204.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.20%)</title><rect x="201.3" y="1955.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="204.3" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="202.1" y="1939.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="205.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/314277302.accept (1 samples, 0.07%)</title><rect x="202.1" y="1923.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="205.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.07%)</title><rect x="202.1" y="1907.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="205.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.07%)</title><rect x="202.1" y="1891.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="205.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.07%)</title><rect x="202.1" y="1875.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="205.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.07%)</title><rect x="202.1" y="1859.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.1" y="1870.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="202.1" y="1843.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="205.1" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="202.1" y="1827.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="205.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.07%)</title><rect x="202.9" y="1939.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="205.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.07%)</title><rect x="202.9" y="1923.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="205.9" y="1934.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.07%)</title><rect x="202.9" y="1907.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.9" y="1918.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.07%)</title><rect x="202.9" y="1891.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="205.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$258/1761511087.get$Lambda (1 samples, 0.07%)</title><rect x="202.9" y="1875.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="205.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.07%)</title><rect x="203.7" y="1971.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="206.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="203.7" y="1955.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="206.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="203.7" y="1939.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="206.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="203.7" y="1923.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="206.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="203.7" y="1907.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="206.7" y="1918.0"></text>
</g>
<g>
<title>java/lang/Thread.run (702 samples, 47.82%)</title><rect x="204.5" y="2035.0" width="564.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="207.5" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (702 samples, 47.82%)</title><rect x="204.5" y="2019.0" width="564.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="207.5" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (702 samples, 47.82%)</title><rect x="204.5" y="2003.0" width="564.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="207.5" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/761336491.run (463 samples, 31.54%)</title><rect x="206.9" y="1987.0" width="372.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="209.9" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUni..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (463 samples, 31.54%)</title><rect x="206.9" y="1971.0" width="372.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="209.9" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUni..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (462 samples, 31.47%)</title><rect x="207.7" y="1955.0" width="371.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="210.7" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUni..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (458 samples, 31.20%)</title><rect x="207.7" y="1939.0" width="368.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="210.7" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipe..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (172 samples, 11.72%)</title><rect x="215.0" y="1923.0" width="138.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="218.0" y="1934.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (172 samples, 11.72%)</title><rect x="215.0" y="1907.0" width="138.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="218.0" y="1918.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (172 samples, 11.72%)</title><rect x="215.0" y="1891.0" width="138.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.0" y="1902.0">com/linecorp/deca..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="215.0" y="1875.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="218.0" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="215.0" y="1859.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="218.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (170 samples, 11.58%)</title><rect x="215.8" y="1875.0" width="136.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.8" y="1886.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (170 samples, 11.58%)</title><rect x="215.8" y="1859.0" width="136.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.8" y="1870.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (170 samples, 11.58%)</title><rect x="215.8" y="1843.0" width="136.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="218.8" y="1854.0">com/fasterxml/jac..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (63 samples, 4.29%)</title><rect x="215.8" y="1827.0" width="50.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="218.8" y="1838.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (38 samples, 2.59%)</title><rect x="215.8" y="1811.0" width="30.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.8" y="1822.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (37 samples, 2.52%)</title><rect x="215.8" y="1795.0" width="29.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="218.8" y="1806.0">co..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="231.9" y="1779.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="234.9" y="1790.0"></text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.68%)</title><rect x="232.7" y="1779.0" width="8.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="235.7" y="1790.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.27%)</title><rect x="237.5" y="1763.0" width="3.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="240.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.14%)</title><rect x="240.7" y="1779.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="243.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.27%)</title><rect x="242.3" y="1779.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.3" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.27%)</title><rect x="242.3" y="1763.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="245.3" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (4 samples, 0.27%)</title><rect x="242.3" y="1747.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="245.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (1 samples, 0.07%)</title><rect x="245.5" y="1795.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="248.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.07%)</title><rect x="245.5" y="1779.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="248.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (25 samples, 1.70%)</title><rect x="246.3" y="1811.0" width="20.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.3" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="246.3" y="1795.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="249.3" y="1806.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="246.3" y="1779.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="249.3" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="246.3" y="1763.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="249.3" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="246.3" y="1747.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="249.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (2 samples, 0.14%)</title><rect x="247.1" y="1795.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (22 samples, 1.50%)</title><rect x="248.7" y="1795.0" width="17.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (7 samples, 0.48%)</title><rect x="251.1" y="1779.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="254.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (7 samples, 0.48%)</title><rect x="256.8" y="1779.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="259.8" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="256.8" y="1763.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="259.8" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="256.8" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="259.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (6 samples, 0.41%)</title><rect x="257.6" y="1763.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.07%)</title><rect x="257.6" y="1747.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="260.6" y="1758.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.07%)</title><rect x="257.6" y="1731.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="260.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (5 samples, 0.34%)</title><rect x="258.4" y="1747.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="261.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (5 samples, 0.34%)</title><rect x="262.4" y="1779.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.07%)</title><rect x="265.6" y="1763.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="268.6" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="265.6" y="1747.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="268.6" y="1758.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="265.6" y="1731.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="268.6" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="265.6" y="1715.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="268.6" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="265.6" y="1699.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="268.6" y="1710.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="265.6" y="1683.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="268.6" y="1694.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="265.6" y="1667.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="268.6" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (99 samples, 6.74%)</title><rect x="266.4" y="1827.0" width="79.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.4" y="1838.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (7 samples, 0.48%)</title><rect x="266.4" y="1811.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="269.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (7 samples, 0.48%)</title><rect x="266.4" y="1795.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="269.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (5 samples, 0.34%)</title><rect x="267.2" y="1779.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="270.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.14%)</title><rect x="269.6" y="1763.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="272.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.07%)</title><rect x="271.2" y="1779.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="274.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (8 samples, 0.54%)</title><rect x="272.0" y="1811.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="275.0" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.54%)</title><rect x="272.0" y="1795.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="275.0" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (4 samples, 0.27%)</title><rect x="275.3" y="1779.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="278.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (13 samples, 0.89%)</title><rect x="278.5" y="1811.0" width="10.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="281.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.75%)</title><rect x="279.3" y="1795.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="282.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (10 samples, 0.68%)</title><rect x="280.1" y="1779.0" width="8.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="283.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (8 samples, 0.54%)</title><rect x="281.7" y="1763.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="284.7" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="284.9" y="1747.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="287.9" y="1758.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="284.9" y="1731.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="287.9" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="284.9" y="1715.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="287.9" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="284.9" y="1699.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="287.9" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.20%)</title><rect x="285.7" y="1747.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="288.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.07%)</title><rect x="288.1" y="1795.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="291.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (8 samples, 0.54%)</title><rect x="288.9" y="1811.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="291.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (8 samples, 0.54%)</title><rect x="288.9" y="1795.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="291.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.14%)</title><rect x="292.1" y="1779.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (2 samples, 0.14%)</title><rect x="293.7" y="1779.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="296.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (2 samples, 0.14%)</title><rect x="293.7" y="1763.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="296.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (2 samples, 0.14%)</title><rect x="293.7" y="1747.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (63 samples, 4.29%)</title><rect x="295.4" y="1811.0" width="50.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="298.4" y="1822.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.36%)</title><rect x="296.2" y="1795.0" width="16.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="299.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.07%)</title><rect x="300.2" y="1779.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="303.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.27%)</title><rect x="301.0" y="1779.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="304.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.27%)</title><rect x="301.0" y="1763.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="304.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.27%)</title><rect x="301.0" y="1747.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="304.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (10 samples, 0.68%)</title><rect x="304.2" y="1779.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="307.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (42 samples, 2.86%)</title><rect x="312.2" y="1795.0" width="33.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="315.2" y="1806.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (39 samples, 2.66%)</title><rect x="314.6" y="1779.0" width="31.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="317.6" y="1790.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (39 samples, 2.66%)</title><rect x="314.6" y="1763.0" width="31.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="317.6" y="1774.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.54%)</title><rect x="319.5" y="1747.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="322.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.27%)</title><rect x="320.3" y="1731.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="323.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.07%)</title><rect x="323.5" y="1731.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="326.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.07%)</title><rect x="323.5" y="1715.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="326.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.07%)</title><rect x="323.5" y="1699.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="326.5" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="323.5" y="1683.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="326.5" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.14%)</title><rect x="324.3" y="1731.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="327.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.14%)</title><rect x="324.3" y="1715.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="327.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.14%)</title><rect x="324.3" y="1699.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="327.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.54%)</title><rect x="325.9" y="1747.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="328.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.34%)</title><rect x="328.3" y="1731.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="331.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.34%)</title><rect x="328.3" y="1715.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="331.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.34%)</title><rect x="328.3" y="1699.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="331.3" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.34%)</title><rect x="328.3" y="1683.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="331.3" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.14%)</title><rect x="332.3" y="1747.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="335.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 0.20%)</title><rect x="333.9" y="1747.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 0.20%)</title><rect x="333.9" y="1731.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="336.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 0.20%)</title><rect x="333.9" y="1715.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="336.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 0.20%)</title><rect x="333.9" y="1699.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="336.9" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.20%)</title><rect x="333.9" y="1683.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.9" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.20%)</title><rect x="333.9" y="1667.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="336.9" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor13.newInstance (1 samples, 0.07%)</title><rect x="335.5" y="1651.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="338.5" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (8 samples, 0.54%)</title><rect x="336.3" y="1747.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="339.3" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.54%)</title><rect x="336.3" y="1731.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="339.3" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.54%)</title><rect x="336.3" y="1715.0" width="6.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="339.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.14%)</title><rect x="340.4" y="1699.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="343.4" y="1710.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor13.newInstance (1 samples, 0.07%)</title><rect x="342.0" y="1699.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="345.0" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.27%)</title><rect x="342.8" y="1747.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="345.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (8 samples, 0.54%)</title><rect x="346.0" y="1827.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="349.0" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (8 samples, 0.54%)</title><rect x="346.0" y="1811.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="349.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (8 samples, 0.54%)</title><rect x="346.0" y="1795.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="349.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.07%)</title><rect x="347.6" y="1779.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="350.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (1 samples, 0.07%)</title><rect x="348.4" y="1779.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="351.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 0.27%)</title><rect x="349.2" y="1779.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="352.2" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.27%)</title><rect x="349.2" y="1763.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="352.2" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.07%)</title><rect x="352.4" y="1875.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="355.4" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="352.4" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="355.4" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="352.4" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="355.4" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="352.4" y="1827.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="355.4" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="352.4" y="1811.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="355.4" y="1822.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="352.4" y="1795.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="355.4" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (258 samples, 17.57%)</title><rect x="353.2" y="1923.0" width="207.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="356.2" y="1934.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (41 samples, 2.79%)</title><rect x="354.0" y="1907.0" width="33.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="357.0" y="1918.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (41 samples, 2.79%)</title><rect x="354.0" y="1891.0" width="33.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="357.0" y="1902.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (40 samples, 2.72%)</title><rect x="354.8" y="1875.0" width="32.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="357.8" y="1886.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.14%)</title><rect x="362.1" y="1859.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="365.1" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.14%)</title><rect x="362.1" y="1843.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="365.1" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.14%)</title><rect x="362.1" y="1827.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="365.1" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.14%)</title><rect x="362.1" y="1811.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="365.1" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.14%)</title><rect x="362.1" y="1795.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="365.1" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.14%)</title><rect x="362.1" y="1779.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="365.1" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (29 samples, 1.98%)</title><rect x="363.7" y="1859.0" width="23.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="366.7" y="1870.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 0.41%)</title><rect x="382.2" y="1843.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="385.2" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 0.41%)</title><rect x="382.2" y="1827.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="385.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.14%)</title><rect x="385.4" y="1811.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="388.4" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.20%)</title><rect x="387.0" y="1907.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="390.0" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.20%)</title><rect x="387.0" y="1891.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="390.0" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.20%)</title><rect x="387.0" y="1875.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="390.0" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (156 samples, 10.63%)</title><rect x="389.4" y="1907.0" width="125.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="392.4" y="1918.0">com/linecorp/de..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="389.4" y="1891.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="392.4" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="389.4" y="1875.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="392.4" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="389.4" y="1859.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="392.4" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="389.4" y="1843.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="392.4" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="389.4" y="1827.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="392.4" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="389.4" y="1811.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="392.4" y="1822.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="389.4" y="1795.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="392.4" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="389.4" y="1779.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="392.4" y="1790.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="389.4" y="1763.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="392.4" y="1774.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.07%)</title><rect x="389.4" y="1747.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="392.4" y="1758.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.07%)</title><rect x="389.4" y="1731.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="392.4" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (155 samples, 10.56%)</title><rect x="390.2" y="1891.0" width="124.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="393.2" y="1902.0">com/linecorp/de..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.27%)</title><rect x="399.9" y="1875.0" width="3.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="402.9" y="1886.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.27%)</title><rect x="399.9" y="1859.0" width="3.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="402.9" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (48 samples, 3.27%)</title><rect x="403.1" y="1875.0" width="38.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="406.1" y="1886.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (32 samples, 2.18%)</title><rect x="410.3" y="1859.0" width="25.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="413.3" y="1870.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (32 samples, 2.18%)</title><rect x="410.3" y="1843.0" width="25.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="413.3" y="1854.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (20 samples, 1.36%)</title><rect x="414.3" y="1827.0" width="16.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="417.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (20 samples, 1.36%)</title><rect x="414.3" y="1811.0" width="16.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="417.3" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (20 samples, 1.36%)</title><rect x="414.3" y="1795.0" width="16.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="417.3" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.48%)</title><rect x="422.4" y="1779.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="425.4" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.20%)</title><rect x="422.4" y="1763.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="425.4" y="1774.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.07%)</title><rect x="422.4" y="1747.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="425.4" y="1758.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="423.2" y="1747.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="426.2" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="424.0" y="1747.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="427.0" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.07%)</title><rect x="424.0" y="1731.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="427.0" y="1742.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="424.0" y="1715.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="427.0" y="1726.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.27%)</title><rect x="424.8" y="1763.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="427.8" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.14%)</title><rect x="425.6" y="1747.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="428.6" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="425.6" y="1731.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="428.6" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="425.6" y="1715.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="428.6" y="1726.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.07%)</title><rect x="425.6" y="1699.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="428.6" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.07%)</title><rect x="425.6" y="1683.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="428.6" y="1694.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.07%)</title><rect x="425.6" y="1667.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="428.6" y="1678.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.07%)</title><rect x="426.4" y="1731.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="429.4" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.07%)</title><rect x="427.2" y="1747.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="430.2" y="1758.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.20%)</title><rect x="428.0" y="1779.0" width="2.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="431.0" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.27%)</title><rect x="430.4" y="1827.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="433.4" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="433.6" y="1827.0" width="1.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="436.6" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="435.2" y="1827.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="438.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.07%)</title><rect x="436.0" y="1859.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="439.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.07%)</title><rect x="436.0" y="1843.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="439.0" y="1854.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.07%)</title><rect x="436.0" y="1827.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="439.0" y="1838.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="436.0" y="1811.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="439.0" y="1822.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="436.0" y="1795.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="439.0" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="436.0" y="1779.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="439.0" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="436.0" y="1763.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="439.0" y="1774.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="436.8" y="1859.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="439.8" y="1870.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.34%)</title><rect x="437.6" y="1859.0" width="4.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="440.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (8 samples, 0.54%)</title><rect x="441.6" y="1875.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="444.6" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.14%)</title><rect x="441.6" y="1859.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="444.6" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="441.6" y="1843.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="444.6" y="1854.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.07%)</title><rect x="441.6" y="1827.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="444.6" y="1838.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="442.5" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="445.5" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="442.5" y="1827.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="445.5" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="442.5" y="1811.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="445.5" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="442.5" y="1795.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="445.5" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="442.5" y="1779.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="445.5" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="442.5" y="1763.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="445.5" y="1774.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.07%)</title><rect x="442.5" y="1747.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="445.5" y="1758.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.07%)</title><rect x="442.5" y="1731.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="445.5" y="1742.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.41%)</title><rect x="443.3" y="1859.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="446.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.41%)</title><rect x="443.3" y="1843.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="446.3" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.07%)</title><rect x="446.5" y="1827.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="449.5" y="1838.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.07%)</title><rect x="447.3" y="1827.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="450.3" y="1838.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (83 samples, 5.65%)</title><rect x="448.1" y="1875.0" width="66.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="451.1" y="1886.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (81 samples, 5.52%)</title><rect x="449.7" y="1859.0" width="65.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="452.7" y="1870.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.54%)</title><rect x="449.7" y="1843.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="452.7" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.54%)</title><rect x="449.7" y="1827.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="452.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.54%)</title><rect x="449.7" y="1811.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="452.7" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.54%)</title><rect x="449.7" y="1795.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="452.7" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.07%)</title><rect x="455.3" y="1779.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="458.3" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="455.3" y="1763.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="458.3" y="1774.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (73 samples, 4.97%)</title><rect x="456.1" y="1843.0" width="58.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="459.1" y="1854.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (64 samples, 4.36%)</title><rect x="463.4" y="1827.0" width="51.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="466.4" y="1838.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (38 samples, 2.59%)</title><rect x="484.3" y="1811.0" width="30.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="487.3" y="1822.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.20%)</title><rect x="501.1" y="1795.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="504.1" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.61%)</title><rect x="503.5" y="1795.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="506.5" y="1806.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.34%)</title><rect x="510.8" y="1795.0" width="4.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="513.8" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (39 samples, 2.66%)</title><rect x="514.8" y="1907.0" width="31.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="517.8" y="1918.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (39 samples, 2.66%)</title><rect x="514.8" y="1891.0" width="31.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="517.8" y="1902.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/2032810883.process (16 samples, 1.09%)</title><rect x="518.0" y="1875.0" width="12.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="521.0" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (15 samples, 1.02%)</title><rect x="518.8" y="1859.0" width="12.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="521.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (14 samples, 0.95%)</title><rect x="518.8" y="1843.0" width="11.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="521.8" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.34%)</title><rect x="519.6" y="1827.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="522.6" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.27%)</title><rect x="520.4" y="1811.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="523.4" y="1822.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.20%)</title><rect x="521.2" y="1795.0" width="2.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="524.2" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.54%)</title><rect x="523.6" y="1827.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="526.6" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.07%)</title><rect x="530.1" y="1843.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="533.1" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="530.1" y="1827.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="533.1" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="530.1" y="1811.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="533.1" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="530.1" y="1795.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="533.1" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.07%)</title><rect x="530.9" y="1875.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="533.9" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (8 samples, 0.54%)</title><rect x="531.7" y="1875.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="534.7" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (8 samples, 0.54%)</title><rect x="531.7" y="1859.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="534.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1637348601.get$Lambda (8 samples, 0.54%)</title><rect x="531.7" y="1843.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="534.7" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1637348601.&lt;init&gt; (8 samples, 0.54%)</title><rect x="531.7" y="1827.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="534.7" y="1838.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="537.3" y="1811.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="540.3" y="1822.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="537.3" y="1795.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="540.3" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="537.3" y="1779.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="540.3" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="537.3" y="1763.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="540.3" y="1774.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.07%)</title><rect x="537.3" y="1747.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="540.3" y="1758.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.34%)</title><rect x="538.1" y="1875.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="541.1" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.34%)</title><rect x="538.1" y="1859.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="541.1" y="1870.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.27%)</title><rect x="538.1" y="1843.0" width="3.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="541.1" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.07%)</title><rect x="541.3" y="1843.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="544.3" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.34%)</title><rect x="542.1" y="1875.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="545.1" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.07%)</title><rect x="545.3" y="1859.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="548.3" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.23%)</title><rect x="546.1" y="1907.0" width="14.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="549.1" y="1918.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.20%)</title><rect x="550.2" y="1891.0" width="2.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="553.2" y="1902.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.20%)</title><rect x="550.2" y="1875.0" width="2.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="553.2" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.54%)</title><rect x="552.6" y="1891.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="555.6" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.54%)</title><rect x="552.6" y="1875.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="555.6" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/2122526164.accept (7 samples, 0.48%)</title><rect x="552.6" y="1859.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="555.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (7 samples, 0.48%)</title><rect x="552.6" y="1843.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="555.6" y="1854.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (7 samples, 0.48%)</title><rect x="552.6" y="1827.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="555.6" y="1838.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (7 samples, 0.48%)</title><rect x="552.6" y="1811.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="555.6" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.27%)</title><rect x="555.0" y="1795.0" width="3.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="558.0" y="1806.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.27%)</title><rect x="555.0" y="1779.0" width="3.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="558.0" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/1414182285.accept (1 samples, 0.07%)</title><rect x="558.2" y="1859.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="561.2" y="1870.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.07%)</title><rect x="558.2" y="1843.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="561.2" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.07%)</title><rect x="559.0" y="1891.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="562.0" y="1902.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="559.8" y="1891.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="562.8" y="1902.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (1 samples, 0.07%)</title><rect x="560.6" y="1923.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="563.6" y="1934.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (1 samples, 0.07%)</title><rect x="560.6" y="1907.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="563.6" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/1414182285.get$Lambda (1 samples, 0.07%)</title><rect x="560.6" y="1891.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="563.6" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="560.6" y="1875.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="563.6" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="560.6" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="563.6" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="560.6" y="1843.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="563.6" y="1854.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.07%)</title><rect x="560.6" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="563.6" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 0.89%)</title><rect x="561.4" y="1923.0" width="10.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="564.4" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.07%)</title><rect x="562.2" y="1907.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="565.2" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 0.75%)</title><rect x="563.0" y="1907.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="566.0" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.61%)</title><rect x="564.6" y="1891.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="567.6" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/2122526164.accept (1 samples, 0.07%)</title><rect x="564.6" y="1875.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="567.6" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (1 samples, 0.07%)</title><rect x="564.6" y="1859.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="567.6" y="1870.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.07%)</title><rect x="564.6" y="1843.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="567.6" y="1854.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.07%)</title><rect x="564.6" y="1827.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="567.6" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/1414182285.accept (8 samples, 0.54%)</title><rect x="565.4" y="1875.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="568.4" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (8 samples, 0.54%)</title><rect x="565.4" y="1859.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="568.4" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1263741752.complete (8 samples, 0.54%)</title><rect x="565.4" y="1843.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="568.4" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (8 samples, 0.54%)</title><rect x="565.4" y="1827.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="568.4" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (8 samples, 0.54%)</title><rect x="565.4" y="1811.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="568.4" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 0.54%)</title><rect x="565.4" y="1795.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="568.4" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 0.54%)</title><rect x="565.4" y="1779.0" width="6.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="568.4" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (8 samples, 0.54%)</title><rect x="565.4" y="1763.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="568.4" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (8 samples, 0.54%)</title><rect x="565.4" y="1747.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="568.4" y="1758.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.34%)</title><rect x="571.9" y="1923.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="574.9" y="1934.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.34%)</title><rect x="571.9" y="1907.0" width="4.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="574.9" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="575.9" y="1939.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="578.9" y="1950.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="575.9" y="1923.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="578.9" y="1934.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="575.9" y="1907.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="578.9" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="575.9" y="1891.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="578.9" y="1902.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="575.9" y="1875.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="578.9" y="1886.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="575.9" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="578.9" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 0.20%)</title><rect x="576.7" y="1939.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="579.7" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.14%)</title><rect x="577.5" y="1923.0" width="1.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="580.5" y="1934.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="577.5" y="1907.0" width="1.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="580.5" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.48%)</title><rect x="579.1" y="1987.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="582.1" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.48%)</title><rect x="579.1" y="1971.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="582.1" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.48%)</title><rect x="579.1" y="1955.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="582.1" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.48%)</title><rect x="579.1" y="1939.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="582.1" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (1 samples, 0.07%)</title><rect x="583.9" y="1923.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="586.9" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (229 samples, 15.60%)</title><rect x="584.7" y="1987.0" width="184.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="587.7" y="1998.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (228 samples, 15.53%)</title><rect x="585.5" y="1971.0" width="183.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="588.5" y="1982.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (4 samples, 0.27%)</title><rect x="590.4" y="1955.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="593.4" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (210 samples, 14.31%)</title><rect x="593.6" y="1955.0" width="168.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="596.6" y="1966.0">java/util/concurrent/l..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (5 samples, 0.34%)</title><rect x="600.0" y="1939.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="603.0" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.34%)</title><rect x="600.0" y="1923.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="603.0" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (20 samples, 1.36%)</title><rect x="604.0" y="1939.0" width="16.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="607.0" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (17 samples, 1.16%)</title><rect x="620.1" y="1939.0" width="13.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="623.1" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 1.16%)</title><rect x="620.1" y="1923.0" width="13.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="623.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (17 samples, 1.16%)</title><rect x="620.1" y="1907.0" width="13.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="623.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 1.16%)</title><rect x="620.1" y="1891.0" width="13.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="623.1" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (160 samples, 10.90%)</title><rect x="633.8" y="1939.0" width="128.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="636.8" y="1950.0">java/util/concur..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (160 samples, 10.90%)</title><rect x="633.8" y="1923.0" width="128.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="636.8" y="1934.0">sun/misc/Unsafe...</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.07%)</title><rect x="642.6" y="1907.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="645.6" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (147 samples, 10.01%)</title><rect x="643.4" y="1907.0" width="118.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="646.4" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.14%)</title><rect x="645.8" y="1891.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="648.8" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.07%)</title><rect x="647.4" y="1891.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="650.4" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (18 samples, 1.23%)</title><rect x="648.2" y="1891.0" width="14.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="651.2" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.41%)</title><rect x="653.1" y="1875.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="656.1" y="1886.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="654.7" y="1859.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="657.7" y="1870.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="655.5" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="658.5" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.14%)</title><rect x="656.3" y="1859.0" width="1.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="659.3" y="1870.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="657.9" y="1875.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="660.9" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.34%)</title><rect x="658.7" y="1875.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="661.7" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.07%)</title><rect x="662.7" y="1891.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="665.7" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="663.5" y="1891.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="666.5" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.54%)</title><rect x="664.3" y="1891.0" width="6.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="667.3" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (33 samples, 2.25%)</title><rect x="670.7" y="1891.0" width="26.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="673.7" y="1902.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (60 samples, 4.09%)</title><rect x="697.3" y="1891.0" width="48.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="700.3" y="1902.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.48%)</title><rect x="745.5" y="1891.0" width="5.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="748.5" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="751.1" y="1891.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="754.1" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.27%)</title><rect x="751.9" y="1891.0" width="3.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="754.9" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.34%)</title><rect x="755.1" y="1891.0" width="4.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="758.1" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.14%)</title><rect x="759.2" y="1891.0" width="1.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="762.2" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="760.8" y="1891.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="763.8" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="761.6" y="1907.0" width="0.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="764.6" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (7 samples, 0.48%)</title><rect x="762.4" y="1955.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="765.4" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (7 samples, 0.48%)</title><rect x="762.4" y="1939.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="765.4" y="1950.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (7 samples, 0.48%)</title><rect x="762.4" y="1923.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="765.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.07%)</title><rect x="768.0" y="1955.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="771.0" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.07%)</title><rect x="768.0" y="1939.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="771.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="768.8" y="2035.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="771.8" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="768.8" y="2019.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="771.8" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="768.8" y="2003.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="771.8" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.07%)</title><rect x="768.8" y="1987.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="771.8" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.07%)</title><rect x="768.8" y="1971.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="771.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.07%)</title><rect x="768.8" y="1955.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="771.8" y="1966.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.07%)</title><rect x="768.8" y="1939.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="771.8" y="1950.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.07%)</title><rect x="768.8" y="1923.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="771.8" y="1934.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.07%)</title><rect x="768.8" y="1907.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="771.8" y="1918.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.07%)</title><rect x="768.8" y="1891.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="771.8" y="1902.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="768.8" y="1875.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="771.8" y="1886.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.07%)</title><rect x="768.8" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="771.8" y="1870.0"></text>
</g>
<g>
<title>start_thread (523 samples, 35.63%)</title><rect x="769.6" y="2035.0" width="420.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="772.6" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (523 samples, 35.63%)</title><rect x="769.6" y="2019.0" width="420.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="772.6" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (18 samples, 1.23%)</title><rect x="769.6" y="2003.0" width="14.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="772.6" y="2014.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.14%)</title><rect x="769.6" y="1987.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="772.6" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.14%)</title><rect x="769.6" y="1971.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="772.6" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.07%)</title><rect x="769.6" y="1955.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="772.6" y="1966.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.07%)</title><rect x="770.4" y="1955.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="773.4" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.09%)</title><rect x="771.2" y="1987.0" width="12.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="774.2" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.27%)</title><rect x="771.2" y="1971.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="774.2" y="1982.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.07%)</title><rect x="771.2" y="1955.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="774.2" y="1966.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.07%)</title><rect x="771.2" y="1939.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="774.2" y="1950.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.07%)</title><rect x="772.0" y="1955.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="775.0" y="1966.0"></text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.07%)</title><rect x="772.0" y="1939.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="775.0" y="1950.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.14%)</title><rect x="772.8" y="1955.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="775.8" y="1966.0"></text>
</g>
<g>
<title>G1ParGCAllocator::create_allocator(G1CollectedHeap*) (1 samples, 0.07%)</title><rect x="774.4" y="1971.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="777.4" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.48%)</title><rect x="775.2" y="1971.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="778.2" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.27%)</title><rect x="775.2" y="1955.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="778.2" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.14%)</title><rect x="775.2" y="1939.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="778.2" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.14%)</title><rect x="775.2" y="1923.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="778.2" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.14%)</title><rect x="775.2" y="1907.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="778.2" y="1918.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.14%)</title><rect x="776.8" y="1939.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="779.8" y="1950.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.14%)</title><rect x="776.8" y="1923.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="779.8" y="1934.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.07%)</title><rect x="777.6" y="1907.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="780.6" y="1918.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.07%)</title><rect x="777.6" y="1891.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="780.6" y="1902.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.07%)</title><rect x="777.6" y="1875.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="780.6" y="1886.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.14%)</title><rect x="778.4" y="1955.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="781.4" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.14%)</title><rect x="778.4" y="1939.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="781.4" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="780.1" y="1955.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="783.1" y="1966.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="780.1" y="1939.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="783.1" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.27%)</title><rect x="780.9" y="1971.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="783.9" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.27%)</title><rect x="780.9" y="1955.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="783.9" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.20%)</title><rect x="780.9" y="1939.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="783.9" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.20%)</title><rect x="780.9" y="1923.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="783.9" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.20%)</title><rect x="780.9" y="1907.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="783.9" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.20%)</title><rect x="780.9" y="1891.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="783.9" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.14%)</title><rect x="781.7" y="1875.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="784.7" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.07%)</title><rect x="781.7" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="784.7" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.07%)</title><rect x="782.5" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="785.5" y="1870.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.07%)</title><rect x="783.3" y="1939.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="786.3" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.07%)</title><rect x="783.3" y="1923.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="786.3" y="1934.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.07%)</title><rect x="783.3" y="1907.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="786.3" y="1918.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.07%)</title><rect x="783.3" y="1891.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="786.3" y="1902.0"></text>
</g>
<g>
<title>RSHashTableIter::has_next(unsigned long&amp;) (1 samples, 0.07%)</title><rect x="783.3" y="1875.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="786.3" y="1886.0"></text>
</g>
<g>
<title>JavaThread::run() (504 samples, 34.33%)</title><rect x="784.1" y="2003.0" width="405.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="787.1" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (504 samples, 34.33%)</title><rect x="784.1" y="1987.0" width="405.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="787.1" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (503 samples, 34.26%)</title><rect x="784.1" y="1971.0" width="404.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="787.1" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (503 samples, 34.26%)</title><rect x="784.1" y="1955.0" width="404.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="787.1" y="1966.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (501 samples, 34.13%)</title><rect x="784.1" y="1939.0" width="402.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="787.1" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (501 samples, 34.13%)</title><rect x="784.1" y="1923.0" width="402.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="787.1" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, b..</text>
</g>
<g>
<title>Compile::Code_Gen() (113 samples, 7.70%)</title><rect x="784.1" y="1907.0" width="90.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="787.1" y="1918.0">Compile::C..</text>
</g>
<g>
<title>Compile::Output() (5 samples, 0.34%)</title><rect x="784.1" y="1891.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="787.1" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.14%)</title><rect x="784.1" y="1875.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="787.1" y="1886.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.07%)</title><rect x="784.9" y="1859.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="787.9" y="1870.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.20%)</title><rect x="785.7" y="1875.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="788.7" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (3 samples, 0.20%)</title><rect x="785.7" y="1859.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="788.7" y="1870.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.14%)</title><rect x="786.5" y="1843.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="789.5" y="1854.0"></text>
</g>
<g>
<title>CodeBuffer::~CodeBuffer() (1 samples, 0.07%)</title><rect x="786.5" y="1827.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="789.5" y="1838.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.07%)</title><rect x="786.5" y="1811.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="789.5" y="1822.0"></text>
</g>
<g>
<title>loadConNKlassNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.07%)</title><rect x="787.3" y="1827.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="790.3" y="1838.0"></text>
</g>
<g>
<title>TypeKlassPtr::get_con() const (1 samples, 0.07%)</title><rect x="787.3" y="1811.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="790.3" y="1822.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 0.34%)</title><rect x="788.1" y="1891.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="791.1" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.14%)</title><rect x="788.1" y="1875.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="791.1" y="1886.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="788.1" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="791.1" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="788.9" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="791.9" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="788.9" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="791.9" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (3 samples, 0.20%)</title><rect x="789.7" y="1875.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="792.7" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.14%)</title><rect x="790.5" y="1859.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="793.5" y="1870.0"></text>
</g>
<g>
<title>Matcher::match() (14 samples, 0.95%)</title><rect x="792.1" y="1891.0" width="11.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="795.1" y="1902.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (3 samples, 0.20%)</title><rect x="792.1" y="1875.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="795.1" y="1886.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.07%)</title><rect x="793.7" y="1859.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="796.7" y="1870.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (11 samples, 0.75%)</title><rect x="794.5" y="1875.0" width="8.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="797.5" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.27%)</title><rect x="795.3" y="1859.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="798.3" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.07%)</title><rect x="798.5" y="1859.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="801.5" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.07%)</title><rect x="798.5" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="801.5" y="1854.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="798.5" y="1827.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="801.5" y="1838.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="798.5" y="1811.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="801.5" y="1822.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.07%)</title><rect x="798.5" y="1795.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="801.5" y="1806.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (5 samples, 0.34%)</title><rect x="799.3" y="1859.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="802.3" y="1870.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.07%)</title><rect x="799.3" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="802.3" y="1854.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.07%)</title><rect x="799.3" y="1827.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="802.3" y="1838.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.14%)</title><rect x="800.1" y="1843.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="803.1" y="1854.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="800.1" y="1827.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="803.1" y="1838.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.07%)</title><rect x="800.1" y="1811.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="803.1" y="1822.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="800.1" y="1795.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="803.1" y="1806.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.07%)</title><rect x="800.1" y="1779.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="803.1" y="1790.0"></text>
</g>
<g>
<title>Matcher::narrow_oop_use_complex_address() (1 samples, 0.07%)</title><rect x="801.0" y="1827.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="804.0" y="1838.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.14%)</title><rect x="801.8" y="1843.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="804.8" y="1854.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="802.6" y="1827.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="805.6" y="1838.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="802.6" y="1811.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="805.6" y="1822.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.34%)</title><rect x="803.4" y="1891.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="806.4" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.34%)</title><rect x="803.4" y="1875.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="806.4" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.07%)</title><rect x="803.4" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="806.4" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::latency_from_uses(Node*) (1 samples, 0.07%)</title><rect x="803.4" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="806.4" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.14%)</title><rect x="804.2" y="1859.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="807.2" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.07%)</title><rect x="805.0" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="808.0" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="805.8" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="808.8" y="1870.0"></text>
</g>
<g>
<title>Node::is_iteratively_computed() (1 samples, 0.07%)</title><rect x="805.8" y="1843.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="808.8" y="1854.0"></text>
</g>
<g>
<title>storeLConditionalNode::ideal_Opcode() const (1 samples, 0.07%)</title><rect x="806.6" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="809.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (83 samples, 5.65%)</title><rect x="807.4" y="1891.0" width="66.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="810.4" y="1902.0">PhaseCh..</text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.07%)</title><rect x="807.4" y="1875.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="810.4" y="1886.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.07%)</title><rect x="808.2" y="1875.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="811.2" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (4 samples, 0.27%)</title><rect x="809.0" y="1875.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="812.0" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.20%)</title><rect x="812.2" y="1875.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="815.2" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="812.2" y="1859.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="815.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.14%)</title><rect x="813.0" y="1859.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="816.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="813.8" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="816.8" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (7 samples, 0.48%)</title><rect x="814.6" y="1875.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="817.6" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="816.2" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="819.2" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="817.0" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="820.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.20%)</title><rect x="817.8" y="1859.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="820.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (12 samples, 0.82%)</title><rect x="820.2" y="1875.0" width="9.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="823.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (15 samples, 1.02%)</title><rect x="829.9" y="1875.0" width="12.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="832.9" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 0.41%)</title><rect x="837.1" y="1859.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="840.1" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="840.3" y="1843.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="843.3" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.48%)</title><rect x="841.9" y="1875.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="844.9" y="1886.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.07%)</title><rect x="846.8" y="1859.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="849.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (10 samples, 0.68%)</title><rect x="847.6" y="1875.0" width="8.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="850.6" y="1886.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="850.8" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="853.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.20%)</title><rect x="851.6" y="1859.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="854.6" y="1870.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.07%)</title><rect x="854.0" y="1859.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="857.0" y="1870.0"></text>
</g>
<g>
<title>r15_RegPOper::type() const (1 samples, 0.07%)</title><rect x="854.8" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="857.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.07%)</title><rect x="855.6" y="1875.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="858.6" y="1886.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 0.27%)</title><rect x="856.4" y="1875.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="859.4" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 0.27%)</title><rect x="856.4" y="1859.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="859.4" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (4 samples, 0.27%)</title><rect x="856.4" y="1843.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="859.4" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.20%)</title><rect x="856.4" y="1827.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="859.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.07%)</title><rect x="858.8" y="1827.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="861.8" y="1838.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="858.8" y="1811.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="861.8" y="1822.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 0.27%)</title><rect x="859.6" y="1875.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="862.6" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="861.2" y="1859.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="864.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (5 samples, 0.34%)</title><rect x="862.8" y="1875.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="865.8" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="863.7" y="1859.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="866.7" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.20%)</title><rect x="864.5" y="1859.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="867.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.07%)</title><rect x="866.9" y="1875.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="869.9" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="866.9" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="869.9" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.41%)</title><rect x="867.7" y="1875.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="870.7" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.14%)</title><rect x="870.9" y="1859.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="873.9" y="1870.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="872.5" y="1875.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="875.5" y="1886.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.07%)</title><rect x="873.3" y="1875.0" width="0.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="876.3" y="1886.0"></text>
</g>
<g>
<title>VectorSet::set(unsigned int) (1 samples, 0.07%)</title><rect x="874.1" y="1891.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="877.1" y="1902.0"></text>
</g>
<g>
<title>Compile::Optimize() (373 samples, 25.41%)</title><rect x="874.9" y="1907.0" width="299.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="877.9" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>CallNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="874.9" y="1891.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="877.9" y="1902.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="875.7" y="1891.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="878.7" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="875.7" y="1875.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="878.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="875.7" y="1859.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="878.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="875.7" y="1843.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="878.7" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (17 samples, 1.16%)</title><rect x="876.5" y="1891.0" width="13.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="879.5" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (17 samples, 1.16%)</title><rect x="876.5" y="1875.0" width="13.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="879.5" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (16 samples, 1.09%)</title><rect x="877.3" y="1859.0" width="12.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="880.3" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (15 samples, 1.02%)</title><rect x="877.3" y="1843.0" width="12.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="880.3" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.20%)</title><rect x="877.3" y="1827.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="880.3" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1811.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="880.3" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1795.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="880.3" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1779.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="880.3" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1763.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="880.3" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1747.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="880.3" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1731.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="880.3" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1715.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="880.3" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="880.3" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1683.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="880.3" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1667.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="880.3" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1651.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="880.3" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1635.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="880.3" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1619.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="880.3" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1603.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="880.3" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1587.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="880.3" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1571.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="880.3" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1555.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="880.3" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1539.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="880.3" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1523.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="880.3" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1507.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="880.3" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1491.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="880.3" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1475.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="880.3" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1459.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="880.3" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1443.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="880.3" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1427.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="880.3" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1411.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="880.3" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1395.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="880.3" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1379.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="880.3" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1363.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="880.3" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="880.3" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1331.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="880.3" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1315.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="880.3" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1299.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="880.3" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1283.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="880.3" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1267.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="880.3" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1251.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="880.3" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1235.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="880.3" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1219.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="880.3" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1203.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="880.3" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1187.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="880.3" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1171.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="880.3" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1155.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="880.3" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1139.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="880.3" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1123.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="880.3" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1107.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="880.3" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1091.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="880.3" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1075.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="880.3" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1059.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="880.3" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1043.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="880.3" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1027.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="880.3" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="877.3" y="1011.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="880.3" y="1022.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="877.3" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="880.3" y="1006.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="877.3" y="979.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="880.3" y="990.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="877.3" y="963.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="880.3" y="974.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="877.3" y="947.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="880.3" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="878.1" y="1811.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="881.1" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="878.1" y="1795.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="881.1" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="878.1" y="1779.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="881.1" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="878.1" y="1763.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="881.1" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="878.9" y="1747.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="881.9" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="878.9" y="1731.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="881.9" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (12 samples, 0.82%)</title><rect x="879.7" y="1827.0" width="9.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="882.7" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (6 samples, 0.41%)</title><rect x="879.7" y="1811.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="882.7" y="1822.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (5 samples, 0.34%)</title><rect x="880.5" y="1795.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="883.5" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.41%)</title><rect x="884.6" y="1811.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="887.6" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.41%)</title><rect x="884.6" y="1795.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="887.6" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.41%)</title><rect x="884.6" y="1779.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="887.6" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="884.6" y="1763.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="887.6" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="884.6" y="1747.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="887.6" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="884.6" y="1731.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="887.6" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="885.4" y="1715.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="888.4" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="885.4" y="1699.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="888.4" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="885.4" y="1683.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="888.4" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="885.4" y="1667.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="888.4" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="885.4" y="1651.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="888.4" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="885.4" y="1635.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="888.4" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="885.4" y="1619.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="888.4" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="885.4" y="1603.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="888.4" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="885.4" y="1587.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="888.4" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="885.4" y="1571.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="888.4" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="885.4" y="1555.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="888.4" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="885.4" y="1539.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="888.4" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="885.4" y="1523.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="888.4" y="1534.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="885.4" y="1507.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="888.4" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.27%)</title><rect x="886.2" y="1763.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="889.2" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.27%)</title><rect x="886.2" y="1747.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="889.2" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.27%)</title><rect x="886.2" y="1731.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="889.2" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.27%)</title><rect x="886.2" y="1715.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="889.2" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.27%)</title><rect x="886.2" y="1699.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="889.2" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.27%)</title><rect x="886.2" y="1683.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="889.2" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.27%)</title><rect x="886.2" y="1667.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="889.2" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.27%)</title><rect x="886.2" y="1651.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="889.2" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.27%)</title><rect x="886.2" y="1635.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="889.2" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.27%)</title><rect x="886.2" y="1619.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="889.2" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.27%)</title><rect x="886.2" y="1603.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="889.2" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.27%)</title><rect x="886.2" y="1587.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="889.2" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="886.2" y="1571.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="889.2" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="886.2" y="1555.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="889.2" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="886.2" y="1539.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="889.2" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="886.2" y="1523.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="889.2" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="886.2" y="1507.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="889.2" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="886.2" y="1491.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="889.2" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="886.2" y="1475.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="889.2" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1459.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="889.2" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1443.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="889.2" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1427.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="889.2" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1411.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="889.2" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1395.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="889.2" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1379.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="889.2" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1363.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="889.2" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1347.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="889.2" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1331.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="889.2" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1315.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="889.2" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1299.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="889.2" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1283.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="889.2" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1267.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="889.2" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1251.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="889.2" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1235.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="889.2" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1219.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="889.2" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1203.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="889.2" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1187.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="889.2" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1171.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="889.2" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1155.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="889.2" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1139.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="889.2" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1123.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="889.2" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1107.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="889.2" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1091.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="889.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1075.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="889.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1059.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="889.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1043.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="889.2" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1027.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="889.2" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="1011.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="889.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="995.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="889.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="979.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="889.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="963.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="889.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="947.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="889.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="889.2" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="915.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="889.2" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="899.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="889.2" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="883.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="889.2" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="867.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="889.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="851.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="889.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="835.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="889.2" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="819.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="889.2" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="803.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="889.2" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="787.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="889.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="771.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="889.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="755.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="889.2" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="739.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="889.2" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="723.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="889.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="707.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="889.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="691.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="889.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="675.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="889.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="659.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="889.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="643.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="889.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="627.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="889.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="611.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="889.2" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="595.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="889.2" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="579.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="889.2" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="563.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="889.2" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="547.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="889.2" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="531.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="889.2" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="515.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="889.2" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="499.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="889.2" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="483.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="889.2" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="467.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="889.2" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="451.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="889.2" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="435.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="889.2" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="886.2" y="419.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="889.2" y="430.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="886.2" y="403.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="889.2" y="414.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="886.2" y="387.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="889.2" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.0" y="1459.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="890.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.0" y="1443.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="890.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.0" y="1427.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="890.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.0" y="1411.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="890.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.0" y="1395.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="890.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.0" y="1379.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="890.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.0" y="1363.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="890.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.0" y="1347.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="890.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.0" y="1331.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="890.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.0" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="890.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.0" y="1299.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="890.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.0" y="1283.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="890.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.0" y="1267.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="890.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.0" y="1251.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="890.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.0" y="1235.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="890.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.0" y="1219.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="890.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.0" y="1203.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="890.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.0" y="1187.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="890.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="887.8" y="1571.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="890.8" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="887.8" y="1555.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="890.8" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="887.8" y="1539.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="890.8" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="887.8" y="1523.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="890.8" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="887.8" y="1507.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="890.8" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="887.8" y="1491.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="890.8" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="887.8" y="1475.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="890.8" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="887.8" y="1459.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="890.8" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="887.8" y="1443.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="890.8" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="887.8" y="1427.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="890.8" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1411.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="890.8" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1395.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="890.8" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1379.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="890.8" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1363.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="890.8" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1347.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="890.8" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1331.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="890.8" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1315.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="890.8" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1299.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="890.8" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1283.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="890.8" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1267.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="890.8" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1251.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="890.8" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1235.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="890.8" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1219.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="890.8" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1203.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="890.8" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1187.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="890.8" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1171.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="890.8" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1155.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="890.8" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="890.8" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1123.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="890.8" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1107.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="890.8" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1091.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="890.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1075.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="890.8" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1059.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="890.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1043.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="890.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1027.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="890.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="1011.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="890.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="995.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="890.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="979.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="890.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="887.8" y="963.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="890.8" y="974.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="887.8" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="890.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1411.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="891.6" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1395.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="891.6" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1379.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="891.6" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1363.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="891.6" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1347.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="891.6" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1331.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="891.6" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1315.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="891.6" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1299.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="891.6" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1283.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="891.6" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1267.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="891.6" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1251.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="891.6" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1235.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="891.6" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1219.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="891.6" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1203.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="891.6" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1187.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="891.6" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1171.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="891.6" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1155.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="891.6" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1139.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="891.6" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1123.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="891.6" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1107.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="891.6" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1091.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="891.6" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1075.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="891.6" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1059.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="891.6" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1043.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="891.6" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1027.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="891.6" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="1011.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="891.6" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="995.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="891.6" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="979.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="891.6" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="963.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="891.6" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="947.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="891.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="931.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="891.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="915.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="891.6" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="899.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="891.6" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="883.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="891.6" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="867.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="891.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="851.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="891.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="835.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="891.6" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="819.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="891.6" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="803.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="891.6" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="787.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="891.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="771.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="891.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="755.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="891.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="739.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="891.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="723.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="891.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="707.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="891.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="691.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="891.6" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="675.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="891.6" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="659.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="891.6" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="643.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="891.6" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="627.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="891.6" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="611.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="891.6" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="595.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="891.6" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="579.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="891.6" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="563.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="891.6" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="547.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="891.6" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="531.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="891.6" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="515.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="891.6" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="499.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="891.6" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="483.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="891.6" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="467.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="891.6" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="451.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="891.6" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="435.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="891.6" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="419.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="891.6" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="888.6" y="403.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="891.6" y="414.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="888.6" y="387.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="891.6" y="398.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.07%)</title><rect x="889.4" y="1843.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="892.4" y="1854.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="889.4" y="1827.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="892.4" y="1838.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.07%)</title><rect x="890.2" y="1891.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="893.2" y="1902.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.07%)</title><rect x="891.0" y="1891.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="894.0" y="1902.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="891.0" y="1875.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="894.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (313 samples, 21.32%)</title><rect x="891.8" y="1891.0" width="251.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="894.8" y="1902.0">PhaseIdealLoop::build_and_optimiz..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="891.8" y="1875.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="894.8" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="891.8" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="894.8" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="891.8" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="894.8" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.07%)</title><rect x="891.8" y="1827.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="894.8" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.07%)</title><rect x="891.8" y="1811.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="894.8" y="1822.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="891.8" y="1795.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="894.8" y="1806.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="891.8" y="1779.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="894.8" y="1790.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (7 samples, 0.48%)</title><rect x="892.6" y="1875.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="895.6" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.14%)</title><rect x="896.6" y="1859.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="899.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.41%)</title><rect x="898.2" y="1875.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="901.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (4 samples, 0.27%)</title><rect x="899.8" y="1859.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="902.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.14%)</title><rect x="901.4" y="1843.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="904.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (286 samples, 19.48%)</title><rect x="903.0" y="1875.0" width="229.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="906.0" y="1886.0">PhaseIdealLoop::build_loop_lat..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="909.5" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="912.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (277 samples, 18.87%)</title><rect x="910.3" y="1859.0" width="222.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="913.3" y="1870.0">PhaseIdealLoop::build_loop_la..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (12 samples, 0.82%)</title><rect x="914.3" y="1843.0" width="9.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="917.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="923.9" y="1843.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="926.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (259 samples, 17.64%)</title><rect x="924.7" y="1843.0" width="208.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="927.7" y="1854.0">PhaseIdealLoop::get_late_ct..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1090.3" y="1827.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.3" y="1838.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1090.3" y="1811.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1093.3" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (5 samples, 0.34%)</title><rect x="1091.1" y="1827.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1094.1" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (5 samples, 0.34%)</title><rect x="1091.1" y="1811.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1094.1" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (41 samples, 2.79%)</title><rect x="1095.1" y="1827.0" width="33.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.1" y="1838.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (6 samples, 0.41%)</title><rect x="1128.1" y="1827.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.1" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1132.1" y="1811.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.1" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.27%)</title><rect x="1132.9" y="1875.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (4 samples, 0.27%)</title><rect x="1132.9" y="1859.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.9" y="1870.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1135.3" y="1843.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.20%)</title><rect x="1136.1" y="1875.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.07%)</title><rect x="1137.8" y="1859.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.8" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::is_member(IdealLoopTree const*) const (1 samples, 0.07%)</title><rect x="1137.8" y="1843.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.8" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.41%)</title><rect x="1138.6" y="1875.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.41%)</title><rect x="1138.6" y="1859.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.6" y="1870.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1139.4" y="1843.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.4" y="1854.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1139.4" y="1827.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.4" y="1838.0"></text>
</g>
<g>
<title>CmpPNode::Opcode() const (1 samples, 0.07%)</title><rect x="1141.0" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.0" y="1854.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1141.8" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.8" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1142.6" y="1843.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.6" y="1854.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1142.6" y="1827.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (2 samples, 0.14%)</title><rect x="1143.4" y="1891.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.4" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (2 samples, 0.14%)</title><rect x="1143.4" y="1875.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (32 samples, 2.18%)</title><rect x="1145.0" y="1891.0" width="25.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.0" y="1902.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (31 samples, 2.11%)</title><rect x="1145.8" y="1875.0" width="24.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.8" y="1886.0">P..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1146.6" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.6" y="1870.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1146.6" y="1843.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.6" y="1854.0"></text>
</g>
<g>
<title>LoadINode::Opcode() const (1 samples, 0.07%)</title><rect x="1147.4" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.4" y="1870.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1148.2" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.2" y="1870.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1148.2" y="1843.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.2" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1148.2" y="1827.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.2" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1148.2" y="1811.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.2" y="1822.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1149.0" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.0" y="1870.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1149.0" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.0" y="1854.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1149.8" y="1859.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.8" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1151.4" y="1859.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (14 samples, 0.95%)</title><rect x="1152.2" y="1859.0" width="11.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.2" y="1870.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.07%)</title><rect x="1157.0" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.0" y="1854.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.07%)</title><rect x="1157.8" y="1843.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.8" y="1854.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.14%)</title><rect x="1158.7" y="1843.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.7" y="1854.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1159.5" y="1827.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.5" y="1838.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="1159.5" y="1811.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.5" y="1822.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (4 samples, 0.27%)</title><rect x="1160.3" y="1843.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.3" y="1854.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (3 samples, 0.20%)</title><rect x="1160.3" y="1827.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.3" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1162.7" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.7" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1163.5" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.5" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (4 samples, 0.27%)</title><rect x="1164.3" y="1859.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.3" y="1870.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (4 samples, 0.27%)</title><rect x="1164.3" y="1843.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.3" y="1854.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (4 samples, 0.27%)</title><rect x="1167.5" y="1859.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.5" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (3 samples, 0.20%)</title><rect x="1167.5" y="1843.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.5" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.20%)</title><rect x="1167.5" y="1827.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.5" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.20%)</title><rect x="1167.5" y="1811.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.5" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.20%)</title><rect x="1167.5" y="1795.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.5" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1167.5" y="1779.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.5" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1167.5" y="1763.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.5" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1167.5" y="1747.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.5" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1167.5" y="1731.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.5" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1167.5" y="1715.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.5" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1167.5" y="1699.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.5" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1167.5" y="1683.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.5" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1167.5" y="1667.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.5" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1167.5" y="1651.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.5" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1635.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.3" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1619.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.3" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1603.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.3" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1587.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.3" y="1598.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1168.3" y="1571.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.3" y="1582.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1168.3" y="1555.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1171.3" y="1566.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1169.1" y="1779.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.1" y="1790.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1169.1" y="1763.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.1" y="1774.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1169.9" y="1843.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.9" y="1854.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.07%)</title><rect x="1169.9" y="1827.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.9" y="1838.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1169.9" y="1811.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.9" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.07%)</title><rect x="1169.9" y="1795.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.9" y="1806.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1169.9" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.9" y="1790.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1169.9" y="1763.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.9" y="1774.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (2 samples, 0.14%)</title><rect x="1170.7" y="1891.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.7" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (2 samples, 0.14%)</title><rect x="1170.7" y="1875.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.7" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.07%)</title><rect x="1170.7" y="1859.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1170.7" y="1843.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1170.7" y="1827.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.7" y="1838.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.5" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.5" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.07%)</title><rect x="1171.5" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.5" y="1854.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.07%)</title><rect x="1171.5" y="1827.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.5" y="1838.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1171.5" y="1811.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.5" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1171.5" y="1795.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.5" y="1806.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1171.5" y="1779.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.5" y="1790.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1171.5" y="1763.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.5" y="1774.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.14%)</title><rect x="1172.3" y="1891.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.3" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.14%)</title><rect x="1172.3" y="1875.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.14%)</title><rect x="1172.3" y="1859.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.14%)</title><rect x="1172.3" y="1843.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.3" y="1854.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1172.3" y="1827.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1173.1" y="1827.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.1" y="1838.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1173.1" y="1811.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.1" y="1822.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1173.9" y="1891.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1176.9" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (13 samples, 0.89%)</title><rect x="1174.7" y="1907.0" width="10.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.7" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (13 samples, 0.89%)</title><rect x="1174.7" y="1891.0" width="10.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.7" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (13 samples, 0.89%)</title><rect x="1174.7" y="1875.0" width="10.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.7" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (13 samples, 0.89%)</title><rect x="1174.7" y="1859.0" width="10.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.7" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (13 samples, 0.89%)</title><rect x="1174.7" y="1843.0" width="10.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.7" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 0.89%)</title><rect x="1174.7" y="1827.0" width="10.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.7" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.54%)</title><rect x="1174.7" y="1811.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.7" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.54%)</title><rect x="1174.7" y="1795.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.7" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.54%)</title><rect x="1174.7" y="1779.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.7" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.54%)</title><rect x="1174.7" y="1763.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.7" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.54%)</title><rect x="1174.7" y="1747.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.7" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.54%)</title><rect x="1174.7" y="1731.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.7" y="1742.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1174.7" y="1715.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.7" y="1726.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1174.7" y="1699.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.7" y="1710.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1174.7" y="1683.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.7" y="1694.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1174.7" y="1667.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.7" y="1678.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1174.7" y="1651.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.7" y="1662.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1174.7" y="1635.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.7" y="1646.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1174.7" y="1619.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.7" y="1630.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1174.7" y="1603.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.7" y="1614.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1174.7" y="1587.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.7" y="1598.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1174.7" y="1571.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.7" y="1582.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1174.7" y="1555.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.7" y="1566.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1174.7" y="1539.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.7" y="1550.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1174.7" y="1523.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.7" y="1534.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1174.7" y="1507.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.7" y="1518.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1174.7" y="1491.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.7" y="1502.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1174.7" y="1475.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.7" y="1486.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.07%)</title><rect x="1174.7" y="1459.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.7" y="1470.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1175.5" y="1715.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.5" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1175.5" y="1699.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.5" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1175.5" y="1683.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.5" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1175.5" y="1667.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.5" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1175.5" y="1651.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.5" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1175.5" y="1635.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.5" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.5" y="1619.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.5" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.5" y="1603.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.5" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.5" y="1587.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.5" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.5" y="1571.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.5" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.5" y="1555.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.5" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.5" y="1539.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.5" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.5" y="1523.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.5" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.5" y="1507.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.5" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.5" y="1491.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.5" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.5" y="1475.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.5" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.5" y="1459.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.5" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.5" y="1443.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.5" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.5" y="1427.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.5" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.5" y="1411.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.5" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.5" y="1395.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.5" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.5" y="1379.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.5" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.5" y="1363.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.5" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.5" y="1347.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.5" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.5" y="1331.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.5" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.5" y="1315.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.5" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.5" y="1299.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.5" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.5" y="1283.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.5" y="1267.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.5" y="1278.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1175.5" y="1251.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.5" y="1262.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1175.5" y="1235.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.5" y="1246.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.07%)</title><rect x="1175.5" y="1219.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.5" y="1230.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.3" y="1619.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.3" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.3" y="1603.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.3" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.3" y="1587.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.3" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.3" y="1571.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.3" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.3" y="1555.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.3" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.3" y="1539.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.3" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.3" y="1523.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.3" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.3" y="1507.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.3" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.3" y="1491.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.3" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.3" y="1475.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.3" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.3" y="1459.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.3" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.3" y="1443.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.3" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.3" y="1427.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.3" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.3" y="1411.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.3" y="1395.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.3" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.3" y="1379.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.3" y="1363.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.3" y="1347.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.3" y="1358.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1176.3" y="1331.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.3" y="1342.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1176.3" y="1315.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.3" y="1326.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.07%)</title><rect x="1176.3" y="1299.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.3" y="1310.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1176.3" y="1283.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.3" y="1294.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1176.3" y="1267.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.3" y="1278.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1176.3" y="1251.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.3" y="1262.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.34%)</title><rect x="1177.1" y="1715.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.1" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.34%)</title><rect x="1177.1" y="1699.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.34%)</title><rect x="1177.1" y="1683.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.1" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.34%)</title><rect x="1177.1" y="1667.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.1" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.34%)</title><rect x="1177.1" y="1651.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.1" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.34%)</title><rect x="1177.1" y="1635.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.1" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.34%)</title><rect x="1177.1" y="1619.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.1" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.34%)</title><rect x="1177.1" y="1603.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.1" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.34%)</title><rect x="1177.1" y="1587.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.1" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.34%)</title><rect x="1177.1" y="1571.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.1" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.34%)</title><rect x="1177.1" y="1555.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="1566.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.07%)</title><rect x="1177.1" y="1539.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="1550.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.07%)</title><rect x="1177.1" y="1523.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="1534.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.07%)</title><rect x="1177.1" y="1507.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.1" y="1518.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1177.1" y="1491.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.1" y="1502.0"></text>
</g>
<g>
<title>LoadNKlassNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1177.1" y="1475.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="1486.0"></text>
</g>
<g>
<title>LoadNode::klass_value_common(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1177.1" y="1459.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.1" y="1470.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1177.1" y="1443.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.1" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1177.9" y="1539.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.9" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1177.9" y="1523.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.9" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1177.9" y="1507.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.9" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1177.9" y="1491.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.9" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1177.9" y="1475.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1177.9" y="1459.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1177.9" y="1443.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.9" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1177.9" y="1427.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.9" y="1438.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1177.9" y="1411.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="1422.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1177.9" y="1395.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.9" y="1406.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1177.9" y="1379.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.9" y="1390.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1177.9" y="1363.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="1374.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1177.9" y="1347.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="1358.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_heads(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1177.9" y="1331.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.9" y="1342.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_head(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1177.9" y="1315.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.9" y="1326.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1177.9" y="1299.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.9" y="1310.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1177.9" y="1283.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.9" y="1294.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1177.9" y="1267.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.9" y="1278.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1177.9" y="1251.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.9" y="1262.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1177.9" y="1235.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="1246.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1177.9" y="1219.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.9" y="1230.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1177.9" y="1203.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="1214.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.07%)</title><rect x="1177.9" y="1187.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.9" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.7" y="1411.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.7" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.7" y="1395.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.7" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.7" y="1379.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.7" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.7" y="1363.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.7" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.7" y="1347.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.7" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.7" y="1331.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.7" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.7" y="1315.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.7" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.7" y="1299.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.7" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.7" y="1283.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.7" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.7" y="1267.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.7" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.7" y="1251.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.7" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.7" y="1235.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.7" y="1246.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.7" y="1219.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.7" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.7" y="1203.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.7" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.7" y="1187.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.7" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.7" y="1171.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.7" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.7" y="1155.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.7" y="1139.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.7" y="1150.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1178.7" y="1123.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.7" y="1134.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1178.7" y="1107.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.7" y="1118.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1178.7" y="1091.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.7" y="1102.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1178.7" y="1075.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.7" y="1086.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.07%)</title><rect x="1178.7" y="1059.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.7" y="1070.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1178.7" y="1043.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.7" y="1054.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1178.7" y="1027.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.7" y="1038.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.6" y="1411.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.6" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.6" y="1395.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.6" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.6" y="1379.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.6" y="1363.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.6" y="1347.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.6" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.6" y="1331.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.6" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.6" y="1315.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.6" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.6" y="1299.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.6" y="1283.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.6" y="1267.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.6" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.6" y="1251.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.6" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.6" y="1235.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.6" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.6" y="1219.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.6" y="1230.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.6" y="1203.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.6" y="1214.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1179.6" y="1187.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.6" y="1198.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.07%)</title><rect x="1179.6" y="1171.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.6" y="1182.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1179.6" y="1155.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.6" y="1166.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1179.6" y="1139.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.6" y="1150.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.4" y="1507.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.4" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.4" y="1491.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.4" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.4" y="1475.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.4" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.4" y="1459.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.4" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.4" y="1443.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.4" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.4" y="1427.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.4" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.4" y="1411.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.4" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.4" y="1395.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.4" y="1379.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.4" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.4" y="1363.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.4" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.4" y="1347.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.4" y="1331.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.4" y="1342.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1180.4" y="1315.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.4" y="1326.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1180.4" y="1299.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.4" y="1310.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1180.4" y="1283.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.4" y="1294.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1180.4" y="1267.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.4" y="1278.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.07%)</title><rect x="1180.4" y="1251.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="1262.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1180.4" y="1235.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.4" y="1246.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1180.4" y="1219.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.4" y="1230.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1180.4" y="1203.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.4" y="1214.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1180.4" y="1187.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.4" y="1198.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="1180.4" y="1171.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.4" y="1182.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.34%)</title><rect x="1181.2" y="1811.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.2" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.34%)</title><rect x="1181.2" y="1795.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.2" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.34%)</title><rect x="1181.2" y="1779.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.2" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.34%)</title><rect x="1181.2" y="1763.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.2" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.34%)</title><rect x="1181.2" y="1747.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.34%)</title><rect x="1181.2" y="1731.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.2" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.34%)</title><rect x="1181.2" y="1715.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.2" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.34%)</title><rect x="1181.2" y="1699.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.2" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.34%)</title><rect x="1181.2" y="1683.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.2" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.34%)</title><rect x="1181.2" y="1667.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.2" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.34%)</title><rect x="1181.2" y="1651.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.34%)</title><rect x="1181.2" y="1635.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.2" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.34%)</title><rect x="1181.2" y="1619.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.34%)</title><rect x="1181.2" y="1603.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.34%)</title><rect x="1181.2" y="1587.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.2" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1181.2" y="1571.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.2" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1181.2" y="1555.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.2" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1181.2" y="1539.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.2" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1181.2" y="1523.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="1534.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1181.2" y="1507.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.2" y="1518.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1181.2" y="1491.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="1502.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1181.2" y="1475.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.2" y="1486.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1181.2" y="1459.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="1470.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1181.2" y="1443.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.2" y="1454.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1181.2" y="1427.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.2" y="1438.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1181.2" y="1411.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="1422.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1181.2" y="1395.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="1406.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1181.2" y="1379.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.2" y="1390.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1181.2" y="1363.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="1374.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1181.2" y="1347.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.2" y="1358.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1181.2" y="1331.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.2" y="1342.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1181.2" y="1315.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.2" y="1326.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1181.2" y="1299.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.2" y="1310.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1181.2" y="1283.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.2" y="1294.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.07%)</title><rect x="1181.2" y="1267.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="1278.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.07%)</title><rect x="1181.2" y="1251.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.2" y="1262.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1181.2" y="1235.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.2" y="1246.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1181.2" y="1219.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="1230.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1181.2" y="1203.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="1214.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1181.2" y="1187.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1182.0" y="1507.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.0" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1182.0" y="1491.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.0" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1182.0" y="1475.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.0" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1182.0" y="1459.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.0" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1182.0" y="1443.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.0" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.0" y="1427.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.0" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.0" y="1411.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.0" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.0" y="1395.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.0" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.0" y="1379.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.0" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.0" y="1363.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.0" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.0" y="1347.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.0" y="1358.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1182.0" y="1331.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.0" y="1342.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1182.0" y="1315.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.0" y="1326.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1182.0" y="1299.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="1310.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.07%)</title><rect x="1182.8" y="1427.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.8" y="1438.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.07%)</title><rect x="1182.8" y="1411.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="1422.0"></text>
</g>
<g>
<title>GraphKit::gen_subtype_check(Node*, Node*) (1 samples, 0.07%)</title><rect x="1182.8" y="1395.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.8" y="1406.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1182.8" y="1379.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.8" y="1390.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1183.6" y="1427.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.6" y="1438.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1183.6" y="1411.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.6" y="1422.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.07%)</title><rect x="1183.6" y="1395.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.6" y="1406.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.07%)</title><rect x="1183.6" y="1379.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.6" y="1390.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1183.6" y="1363.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.6" y="1374.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1183.6" y="1347.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.6" y="1358.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.07%)</title><rect x="1184.4" y="1571.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.4" y="1582.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1184.4" y="1555.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.4" y="1566.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.14%)</title><rect x="1185.2" y="1907.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.2" y="1918.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1185.2" y="1891.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.2" y="1902.0"></text>
</g>
<g>
<title>Unique_Node_List::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.07%)</title><rect x="1186.0" y="1891.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.0" y="1902.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.07%)</title><rect x="1186.8" y="1939.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.8" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.07%)</title><rect x="1186.8" y="1923.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.8" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.07%)</title><rect x="1186.8" y="1907.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.8" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.07%)</title><rect x="1186.8" y="1891.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.8" y="1902.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.07%)</title><rect x="1186.8" y="1875.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.8" y="1886.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.07%)</title><rect x="1186.8" y="1859.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.8" y="1870.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.07%)</title><rect x="1186.8" y="1843.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.8" y="1854.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.07%)</title><rect x="1186.8" y="1827.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.8" y="1838.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.07%)</title><rect x="1186.8" y="1811.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.8" y="1822.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.07%)</title><rect x="1186.8" y="1795.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.8" y="1806.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.07%)</title><rect x="1187.6" y="1939.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.6" y="1950.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1187.6" y="1923.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.6" y="1934.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1187.6" y="1907.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.6" y="1918.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1187.6" y="1891.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.6" y="1902.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.07%)</title><rect x="1187.6" y="1875.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.6" y="1886.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.07%)</title><rect x="1187.6" y="1859.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.6" y="1870.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1187.6" y="1843.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.6" y="1854.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1187.6" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.6" y="1838.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1187.6" y="1811.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.6" y="1822.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1187.6" y="1795.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.6" y="1806.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1188.4" y="1971.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.4" y="1982.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1188.4" y="1955.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.4" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1188.4" y="1939.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.4" y="1950.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1188.4" y="1923.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1191.4" y="1934.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.07%)</title><rect x="1188.4" y="1907.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.4" y="1918.0"></text>
</g>
<g>
<title>ScopeDesc::ScopeDesc(nmethod const*, int, int, bool, bool) (1 samples, 0.07%)</title><rect x="1188.4" y="1891.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.4" y="1902.0"></text>
</g>
<g>
<title>ScopeDesc::decode_object_values(int) (1 samples, 0.07%)</title><rect x="1188.4" y="1875.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.4" y="1886.0"></text>
</g>
<g>
<title>DebugInfoReadStream::read_object_value() (1 samples, 0.07%)</title><rect x="1188.4" y="1859.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.4" y="1870.0"></text>
</g>
<g>
<title>ScopeValue::read_from(DebugInfoReadStream*) (1 samples, 0.07%)</title><rect x="1188.4" y="1843.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.4" y="1854.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.07%)</title><rect x="1189.2" y="2003.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.2" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.07%)</title><rect x="1189.2" y="1987.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.2" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.07%)</title><rect x="1189.2" y="1971.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.2" y="1982.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.07%)</title><rect x="1189.2" y="1955.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.2" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.07%)</title><rect x="1189.2" y="1939.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.2" y="1950.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1189.2" y="1923.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.2" y="1934.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1189.2" y="1907.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.2" y="1918.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="1189.2" y="1891.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.2" y="1902.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.07%)</title><rect x="1189.2" y="1875.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.2" y="1886.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="1189.2" y="1859.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.2" y="1870.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.07%)</title><rect x="1189.2" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.2" y="1854.0"></text>
</g>
</g>
</svg>
