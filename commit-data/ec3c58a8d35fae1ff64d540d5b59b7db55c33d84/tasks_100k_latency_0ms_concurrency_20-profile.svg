<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="437"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="437"> </text>
<g id="frames">
<g>
<title>all (114 samples, 100.00%)</title><rect x="10.0" y="403.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="414.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (34 samples, 29.82%)</title><rect x="10.0" y="387.0" width="351.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="398.0">com/linecorp/decaton/processor/runtime/Processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (34 samples, 29.82%)</title><rect x="10.0" y="371.0" width="351.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="382.0">com/linecorp/decaton/processor/runtime/Processor..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (24 samples, 21.05%)</title><rect x="10.0" y="355.0" width="248.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="366.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1612081961.accept (24 samples, 21.05%)</title><rect x="10.0" y="339.0" width="248.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="350.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (24 samples, 21.05%)</title><rect x="10.0" y="323.0" width="248.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="334.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (23 samples, 20.18%)</title><rect x="10.0" y="307.0" width="238.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="318.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (23 samples, 20.18%)</title><rect x="10.0" y="291.0" width="238.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="302.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (23 samples, 20.18%)</title><rect x="10.0" y="275.0" width="238.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="286.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (23 samples, 20.18%)</title><rect x="10.0" y="259.0" width="238.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="270.0">java/util/concurrent/Executors$D..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (23 samples, 20.18%)</title><rect x="10.0" y="243.0" width="238.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="254.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (18 samples, 15.79%)</title><rect x="61.8" y="227.0" width="186.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="64.8" y="238.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (17 samples, 14.91%)</title><rect x="72.1" y="211.0" width="176.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="75.1" y="222.0">java/util/concurrent/Li..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 2.63%)</title><rect x="92.8" y="195.0" width="31.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="95.8" y="206.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 2.63%)</title><rect x="92.8" y="179.0" width="31.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="95.8" y="190.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 2.63%)</title><rect x="92.8" y="163.0" width="31.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="95.8" y="174.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (12 samples, 10.53%)</title><rect x="123.9" y="195.0" width="124.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="126.9" y="206.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 10.53%)</title><rect x="123.9" y="179.0" width="124.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="126.9" y="190.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 10.53%)</title><rect x="123.9" y="163.0" width="124.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="126.9" y="174.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 10.53%)</title><rect x="123.9" y="147.0" width="124.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="126.9" y="158.0">java/util/concu..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (12 samples, 10.53%)</title><rect x="123.9" y="131.0" width="124.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="126.9" y="142.0">sun/misc/Unsafe..</text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 6.14%)</title><rect x="144.6" y="115.0" width="72.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="147.6" y="126.0">Unsafe_U..</text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 5.26%)</title><rect x="144.6" y="99.0" width="62.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="147.6" y="110.0">__pthr..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.88%)</title><rect x="206.7" y="99.0" width="10.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="209.7" y="110.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.75%)</title><rect x="217.0" y="115.0" width="20.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="220.0" y="126.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.88%)</title><rect x="237.7" y="115.0" width="10.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="240.7" y="126.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.88%)</title><rect x="248.1" y="307.0" width="10.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.1" y="318.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.88%)</title><rect x="248.1" y="291.0" width="10.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.1" y="302.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.88%)</title><rect x="248.1" y="275.0" width="10.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="251.1" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 8.77%)</title><rect x="258.4" y="355.0" width="103.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.4" y="366.0">org/apache/k..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 8.77%)</title><rect x="258.4" y="339.0" width="103.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="261.4" y="350.0">org/apache/k..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 4.39%)</title><rect x="258.4" y="323.0" width="51.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="261.4" y="334.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 4.39%)</title><rect x="258.4" y="307.0" width="51.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.4" y="318.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 4.39%)</title><rect x="258.4" y="291.0" width="51.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="261.4" y="302.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 3.51%)</title><rect x="258.4" y="275.0" width="41.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="261.4" y="286.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 3.51%)</title><rect x="258.4" y="259.0" width="41.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="261.4" y="270.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.88%)</title><rect x="268.8" y="243.0" width="10.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="271.8" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.88%)</title><rect x="268.8" y="227.0" width="10.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.8" y="238.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.88%)</title><rect x="268.8" y="211.0" width="10.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="271.8" y="222.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.88%)</title><rect x="268.8" y="195.0" width="10.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="271.8" y="206.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.88%)</title><rect x="268.8" y="179.0" width="10.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="271.8" y="190.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.88%)</title><rect x="268.8" y="163.0" width="10.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="271.8" y="174.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.88%)</title><rect x="268.8" y="147.0" width="10.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="271.8" y="158.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatchSize (1 samples, 0.88%)</title><rect x="268.8" y="131.0" width="10.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="271.8" y="142.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.88%)</title><rect x="268.8" y="115.0" width="10.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="271.8" y="126.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.88%)</title><rect x="268.8" y="99.0" width="10.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="271.8" y="110.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_method(JavaThread*, Thread*) (1 samples, 0.88%)</title><rect x="268.8" y="83.0" width="10.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="271.8" y="94.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.88%)</title><rect x="268.8" y="67.0" width="10.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="271.8" y="78.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.88%)</title><rect x="268.8" y="51.0" width="10.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="271.8" y="62.0"></text>
</g>
<g>
<title>frame::oopmapreg_to_location(VMRegImpl*, RegisterMap const*) const (1 samples, 0.88%)</title><rect x="268.8" y="35.0" width="10.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="271.8" y="46.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 1.75%)</title><rect x="279.1" y="243.0" width="20.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="282.1" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 1.75%)</title><rect x="279.1" y="227.0" width="20.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.1" y="238.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 1.75%)</title><rect x="279.1" y="211.0" width="20.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.1" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 1.75%)</title><rect x="279.1" y="195.0" width="20.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.1" y="206.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.88%)</title><rect x="289.5" y="179.0" width="10.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="292.5" y="190.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.88%)</title><rect x="289.5" y="163.0" width="10.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="292.5" y="174.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.88%)</title><rect x="299.8" y="275.0" width="10.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="302.8" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.88%)</title><rect x="299.8" y="259.0" width="10.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="302.8" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.88%)</title><rect x="299.8" y="243.0" width="10.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="302.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.88%)</title><rect x="299.8" y="227.0" width="10.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="302.8" y="238.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.88%)</title><rect x="299.8" y="211.0" width="10.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="302.8" y="222.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 2.63%)</title><rect x="310.2" y="323.0" width="31.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="313.2" y="334.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 2.63%)</title><rect x="310.2" y="307.0" width="31.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="313.2" y="318.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 2.63%)</title><rect x="310.2" y="291.0" width="31.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="313.2" y="302.0">or..</text>
</g>
<g>
<title>java/util/stream/Collectors.toMap (1 samples, 0.88%)</title><rect x="310.2" y="275.0" width="10.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="313.2" y="286.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toMap (1 samples, 0.88%)</title><rect x="310.2" y="259.0" width="10.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="313.2" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/823919400.linkToTargetMethod (1 samples, 0.88%)</title><rect x="310.2" y="243.0" width="10.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="313.2" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/809762318.invokeStatic_L3_L (1 samples, 0.88%)</title><rect x="310.2" y="227.0" width="10.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="313.2" y="238.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$80/1741419430.get$Lambda (1 samples, 0.88%)</title><rect x="310.2" y="211.0" width="10.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.2" y="222.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.88%)</title><rect x="320.5" y="275.0" width="10.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.5" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.88%)</title><rect x="320.5" y="259.0" width="10.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="323.5" y="270.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.88%)</title><rect x="320.5" y="243.0" width="10.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="323.5" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.88%)</title><rect x="330.9" y="275.0" width="10.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="333.9" y="286.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.88%)</title><rect x="330.9" y="259.0" width="10.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="333.9" y="270.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.88%)</title><rect x="330.9" y="243.0" width="10.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="333.9" y="254.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.88%)</title><rect x="330.9" y="227.0" width="10.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="333.9" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.88%)</title><rect x="330.9" y="211.0" width="10.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="333.9" y="222.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.88%)</title><rect x="341.2" y="323.0" width="10.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="344.2" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.88%)</title><rect x="341.2" y="307.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="344.2" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.88%)</title><rect x="341.2" y="291.0" width="10.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="344.2" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.88%)</title><rect x="341.2" y="275.0" width="10.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="344.2" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.88%)</title><rect x="341.2" y="259.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="344.2" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/Errors.forCode (1 samples, 0.88%)</title><rect x="341.2" y="243.0" width="10.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="344.2" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.88%)</title><rect x="341.2" y="227.0" width="10.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="344.2" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.88%)</title><rect x="341.2" y="211.0" width="10.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="344.2" y="222.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.88%)</title><rect x="351.6" y="323.0" width="10.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.6" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.88%)</title><rect x="351.6" y="307.0" width="10.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="354.6" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.88%)</title><rect x="351.6" y="291.0" width="10.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="354.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.88%)</title><rect x="351.6" y="275.0" width="10.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="354.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.88%)</title><rect x="351.6" y="259.0" width="10.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="354.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.88%)</title><rect x="351.6" y="243.0" width="10.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="354.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.88%)</title><rect x="351.6" y="227.0" width="10.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="354.6" y="238.0"></text>
</g>
<g>
<title>java/lang/Thread.run (51 samples, 44.74%)</title><rect x="361.9" y="387.0" width="527.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="364.9" y="398.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (51 samples, 44.74%)</title><rect x="361.9" y="371.0" width="527.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="364.9" y="382.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (51 samples, 44.74%)</title><rect x="361.9" y="355.0" width="527.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="364.9" y="366.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/2038354488.run (31 samples, 27.19%)</title><rect x="372.3" y="339.0" width="320.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="375.3" y="350.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (31 samples, 27.19%)</title><rect x="372.3" y="323.0" width="320.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="375.3" y="334.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (31 samples, 27.19%)</title><rect x="372.3" y="307.0" width="320.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="375.3" y="318.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (31 samples, 27.19%)</title><rect x="372.3" y="291.0" width="320.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="375.3" y="302.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (12 samples, 10.53%)</title><rect x="372.3" y="275.0" width="124.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="375.3" y="286.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (12 samples, 10.53%)</title><rect x="372.3" y="259.0" width="124.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="375.3" y="270.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (12 samples, 10.53%)</title><rect x="372.3" y="243.0" width="124.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="375.3" y="254.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 10.53%)</title><rect x="372.3" y="227.0" width="124.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="375.3" y="238.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 10.53%)</title><rect x="372.3" y="211.0" width="124.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="375.3" y="222.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (12 samples, 10.53%)</title><rect x="372.3" y="195.0" width="124.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="375.3" y="206.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (5 samples, 4.39%)</title><rect x="372.3" y="179.0" width="51.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="375.3" y="190.0">com/f..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.88%)</title><rect x="403.3" y="163.0" width="10.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="406.3" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.88%)</title><rect x="413.7" y="163.0" width="10.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="416.7" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (7 samples, 6.14%)</title><rect x="424.0" y="179.0" width="72.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="427.0" y="190.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.88%)</title><rect x="424.0" y="163.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="427.0" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.88%)</title><rect x="434.4" y="163.0" width="10.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="437.4" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 4.39%)</title><rect x="444.7" y="163.0" width="51.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="447.7" y="174.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.75%)</title><rect x="444.7" y="147.0" width="20.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="447.7" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.88%)</title><rect x="455.1" y="131.0" width="10.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="458.1" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 2.63%)</title><rect x="465.4" y="147.0" width="31.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="468.4" y="158.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 2.63%)</title><rect x="465.4" y="131.0" width="31.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="468.4" y="142.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 2.63%)</title><rect x="465.4" y="115.0" width="31.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="468.4" y="126.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.88%)</title><rect x="465.4" y="99.0" width="10.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="468.4" y="110.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.88%)</title><rect x="465.4" y="83.0" width="10.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="468.4" y="94.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.88%)</title><rect x="465.4" y="67.0" width="10.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="468.4" y="78.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.88%)</title><rect x="465.4" y="51.0" width="10.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="468.4" y="62.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.88%)</title><rect x="465.4" y="35.0" width="10.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="468.4" y="46.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.88%)</title><rect x="475.8" y="99.0" width="10.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="478.8" y="110.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.88%)</title><rect x="486.1" y="99.0" width="10.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="489.1" y="110.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.88%)</title><rect x="486.1" y="83.0" width="10.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="489.1" y="94.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.88%)</title><rect x="486.1" y="67.0" width="10.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="489.1" y="78.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (17 samples, 14.91%)</title><rect x="496.5" y="275.0" width="176.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="499.5" y="286.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (3 samples, 2.63%)</title><rect x="527.5" y="259.0" width="31.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="530.5" y="270.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 2.63%)</title><rect x="527.5" y="243.0" width="31.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="530.5" y="254.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 2.63%)</title><rect x="527.5" y="227.0" width="31.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="530.5" y="238.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 2.63%)</title><rect x="527.5" y="211.0" width="31.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="530.5" y="222.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.88%)</title><rect x="548.2" y="195.0" width="10.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="551.2" y="206.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.88%)</title><rect x="548.2" y="179.0" width="10.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="551.2" y="190.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.88%)</title><rect x="548.2" y="163.0" width="10.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="551.2" y="174.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (7 samples, 6.14%)</title><rect x="558.6" y="259.0" width="72.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="561.6" y="270.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (7 samples, 6.14%)</title><rect x="558.6" y="243.0" width="72.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="561.6" y="254.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 3.51%)</title><rect x="558.6" y="227.0" width="41.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="561.6" y="238.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 3.51%)</title><rect x="558.6" y="211.0" width="41.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="561.6" y="222.0">jav..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.88%)</title><rect x="579.3" y="195.0" width="10.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="582.3" y="206.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.88%)</title><rect x="579.3" y="179.0" width="10.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="582.3" y="190.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.88%)</title><rect x="589.6" y="195.0" width="10.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="592.6" y="206.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 2.63%)</title><rect x="600.0" y="227.0" width="31.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="603.0" y="238.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 2.63%)</title><rect x="600.0" y="211.0" width="31.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="603.0" y="222.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.88%)</title><rect x="600.0" y="195.0" width="10.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="603.0" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.88%)</title><rect x="600.0" y="179.0" width="10.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="603.0" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.88%)</title><rect x="600.0" y="163.0" width="10.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="603.0" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.88%)</title><rect x="600.0" y="147.0" width="10.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="603.0" y="158.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 1.75%)</title><rect x="610.4" y="195.0" width="20.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="613.4" y="206.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.75%)</title><rect x="610.4" y="179.0" width="20.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="613.4" y="190.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.88%)</title><rect x="620.7" y="163.0" width="10.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="623.7" y="174.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (3 samples, 2.63%)</title><rect x="631.1" y="259.0" width="31.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="634.1" y="270.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (3 samples, 2.63%)</title><rect x="631.1" y="243.0" width="31.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="634.1" y="254.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/117397272.process (1 samples, 0.88%)</title><rect x="631.1" y="227.0" width="10.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="634.1" y="238.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.88%)</title><rect x="631.1" y="211.0" width="10.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="634.1" y="222.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.88%)</title><rect x="631.1" y="195.0" width="10.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="634.1" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.88%)</title><rect x="631.1" y="179.0" width="10.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="634.1" y="190.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 1.75%)</title><rect x="641.4" y="227.0" width="20.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="644.4" y="238.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 1.75%)</title><rect x="641.4" y="211.0" width="20.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="644.4" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 1.75%)</title><rect x="641.4" y="195.0" width="20.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="644.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.88%)</title><rect x="662.1" y="259.0" width="10.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="665.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.75%)</title><rect x="672.5" y="275.0" width="20.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="675.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.75%)</title><rect x="672.5" y="259.0" width="20.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="675.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.88%)</title><rect x="682.8" y="243.0" width="10.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="685.8" y="254.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$286/467887002.accept (1 samples, 0.88%)</title><rect x="682.8" y="227.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="685.8" y="238.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (1 samples, 0.88%)</title><rect x="682.8" y="211.0" width="10.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="685.8" y="222.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1475451182.complete (1 samples, 0.88%)</title><rect x="682.8" y="195.0" width="10.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="685.8" y="206.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (1 samples, 0.88%)</title><rect x="682.8" y="179.0" width="10.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="685.8" y="190.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.88%)</title><rect x="682.8" y="163.0" width="10.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="685.8" y="174.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.88%)</title><rect x="682.8" y="147.0" width="10.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="685.8" y="158.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.88%)</title><rect x="682.8" y="131.0" width="10.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="685.8" y="142.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.88%)</title><rect x="682.8" y="115.0" width="10.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="685.8" y="126.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.88%)</title><rect x="682.8" y="99.0" width="10.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="685.8" y="110.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 1.75%)</title><rect x="693.2" y="339.0" width="20.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="696.2" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.88%)</title><rect x="703.5" y="323.0" width="10.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="706.5" y="334.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.88%)</title><rect x="703.5" y="307.0" width="10.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="706.5" y="318.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.88%)</title><rect x="703.5" y="291.0" width="10.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="706.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 1.75%)</title><rect x="713.9" y="339.0" width="20.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="716.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (15 samples, 13.16%)</title><rect x="734.6" y="339.0" width="155.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="737.6" y="350.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (14 samples, 12.28%)</title><rect x="744.9" y="323.0" width="144.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="747.9" y="334.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (13 samples, 11.40%)</title><rect x="755.3" y="307.0" width="134.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="758.3" y="318.0">java/util/concurr..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.88%)</title><rect x="765.6" y="291.0" width="10.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="768.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 9.65%)</title><rect x="776.0" y="291.0" width="113.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="779.0" y="302.0">java/util/conc..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (11 samples, 9.65%)</title><rect x="776.0" y="275.0" width="113.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="779.0" y="286.0">sun/misc/Unsaf..</text>
</g>
<g>
<title>Unsafe_Park (8 samples, 7.02%)</title><rect x="807.0" y="259.0" width="82.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="810.0" y="270.0">Unsafe_Park</text>
</g>
<g>
<title>BarrierSet::write_barrier(oopDesc*) (1 samples, 0.88%)</title><rect x="807.0" y="243.0" width="10.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="810.0" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.88%)</title><rect x="817.4" y="243.0" width="10.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="820.4" y="254.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.88%)</title><rect x="817.4" y="227.0" width="10.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="820.4" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.178] (1 samples, 0.88%)</title><rect x="827.7" y="243.0" width="10.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="830.7" y="254.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.75%)</title><rect x="838.1" y="243.0" width="20.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="841.1" y="254.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 2.63%)</title><rect x="858.8" y="243.0" width="31.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="861.8" y="254.0">__..</text>
</g>
<g>
<title>start_thread (29 samples, 25.44%)</title><rect x="889.8" y="387.0" width="300.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="892.8" y="398.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (29 samples, 25.44%)</title><rect x="889.8" y="371.0" width="300.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="892.8" y="382.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 8.77%)</title><rect x="889.8" y="355.0" width="103.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="892.8" y="366.0">GangWorker::..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (10 samples, 8.77%)</title><rect x="889.8" y="339.0" width="103.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="892.8" y="350.0">G1ParTask::w..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 7.89%)</title><rect x="889.8" y="323.0" width="93.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="892.8" y="334.0">G1ParEvacua..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 2.63%)</title><rect x="910.5" y="307.0" width="31.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="913.5" y="318.0">G1..</text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.88%)</title><rect x="941.6" y="307.0" width="10.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="944.6" y="318.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.88%)</title><rect x="951.9" y="307.0" width="10.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="954.9" y="318.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.75%)</title><rect x="962.3" y="307.0" width="20.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="965.3" y="318.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.88%)</title><rect x="983.0" y="323.0" width="10.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="986.0" y="334.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.88%)</title><rect x="983.0" y="307.0" width="10.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="986.0" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.88%)</title><rect x="983.0" y="291.0" width="10.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="986.0" y="302.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.88%)</title><rect x="983.0" y="275.0" width="10.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="986.0" y="286.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer_helper(CardTableEntryClosure*, unsigned int, BufferNode*) (1 samples, 0.88%)</title><rect x="983.0" y="259.0" width="10.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="986.0" y="270.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.88%)</title><rect x="983.0" y="243.0" width="10.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="986.0" y="254.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) [clone .part.174] (1 samples, 0.88%)</title><rect x="983.0" y="227.0" width="10.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="986.0" y="238.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (19 samples, 16.67%)</title><rect x="993.3" y="355.0" width="196.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="996.3" y="366.0">JavaThread::thread_main_in..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (19 samples, 16.67%)</title><rect x="993.3" y="339.0" width="196.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.3" y="350.0">CompileBroker::compiler_th..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (19 samples, 16.67%)</title><rect x="993.3" y="323.0" width="196.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="996.3" y="334.0">CompileBroker::invoke_comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (15 samples, 13.16%)</title><rect x="993.3" y="307.0" width="155.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="996.3" y="318.0">C2Compiler::compile_..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (15 samples, 13.16%)</title><rect x="993.3" y="291.0" width="155.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="996.3" y="302.0">Compile::Compile(ciE..</text>
</g>
<g>
<title>Compile::Code_Gen() (11 samples, 9.65%)</title><rect x="993.3" y="275.0" width="113.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="996.3" y="286.0">Compile::Code_..</text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.75%)</title><rect x="993.3" y="259.0" width="20.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="996.3" y="270.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 1.75%)</title><rect x="993.3" y="243.0" width="20.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="996.3" y="254.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.88%)</title><rect x="1003.7" y="227.0" width="10.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1006.7" y="238.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.88%)</title><rect x="1003.7" y="211.0" width="10.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1006.7" y="222.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.88%)</title><rect x="1003.7" y="195.0" width="10.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1006.7" y="206.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.88%)</title><rect x="1003.7" y="179.0" width="10.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1006.7" y="190.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 0.88%)</title><rect x="1003.7" y="163.0" width="10.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1006.7" y="174.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (9 samples, 7.89%)</title><rect x="1014.0" y="259.0" width="93.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1017.0" y="270.0">PhaseChaiti..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 2.63%)</title><rect x="1014.0" y="243.0" width="31.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1017.0" y="254.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.88%)</title><rect x="1014.0" y="227.0" width="10.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1017.0" y="238.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.88%)</title><rect x="1024.4" y="227.0" width="10.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1027.4" y="238.0"></text>
</g>
<g>
<title>rFlagsRegUOper::type() const (1 samples, 0.88%)</title><rect x="1024.4" y="211.0" width="10.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1027.4" y="222.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.88%)</title><rect x="1034.7" y="227.0" width="10.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1037.7" y="238.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (2 samples, 1.75%)</title><rect x="1045.1" y="243.0" width="20.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1048.1" y="254.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.88%)</title><rect x="1045.1" y="227.0" width="10.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1048.1" y="238.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.88%)</title><rect x="1055.4" y="227.0" width="10.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1058.4" y="238.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (1 samples, 0.88%)</title><rect x="1065.8" y="243.0" width="10.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1068.8" y="254.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.75%)</title><rect x="1076.1" y="243.0" width="20.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1079.1" y="254.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.88%)</title><rect x="1096.8" y="243.0" width="10.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1099.8" y="254.0"></text>
</g>
<g>
<title>Compile::Optimize() (4 samples, 3.51%)</title><rect x="1107.2" y="275.0" width="41.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1110.2" y="286.0">Com..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (3 samples, 2.63%)</title><rect x="1107.2" y="259.0" width="31.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.2" y="270.0">Ph..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.88%)</title><rect x="1107.2" y="243.0" width="10.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1110.2" y="254.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.88%)</title><rect x="1107.2" y="227.0" width="10.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1110.2" y="238.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.88%)</title><rect x="1107.2" y="211.0" width="10.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.2" y="222.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.88%)</title><rect x="1107.2" y="195.0" width="10.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.2" y="206.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_phi_for_loop(Node*, unsigned int, Node*, Node*, LoopNode*) (1 samples, 0.88%)</title><rect x="1107.2" y="179.0" width="10.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.2" y="190.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.88%)</title><rect x="1107.2" y="163.0" width="10.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.2" y="174.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.88%)</title><rect x="1107.2" y="147.0" width="10.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1110.2" y="158.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.75%)</title><rect x="1117.5" y="243.0" width="20.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.5" y="254.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.75%)</title><rect x="1117.5" y="227.0" width="20.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1120.5" y="238.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.88%)</title><rect x="1138.2" y="259.0" width="10.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.2" y="270.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.88%)</title><rect x="1138.2" y="243.0" width="10.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.2" y="254.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.88%)</title><rect x="1138.2" y="227.0" width="10.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1141.2" y="238.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.88%)</title><rect x="1138.2" y="211.0" width="10.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.2" y="222.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 3.51%)</title><rect x="1148.6" y="307.0" width="41.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.6" y="318.0">Com..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 3.51%)</title><rect x="1148.6" y="291.0" width="41.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.6" y="302.0">Com..</text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 3.51%)</title><rect x="1148.6" y="275.0" width="41.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.6" y="286.0">Com..</text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 3.51%)</title><rect x="1148.6" y="259.0" width="41.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.6" y="270.0">Com..</text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 1.75%)</title><rect x="1148.6" y="243.0" width="20.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.6" y="254.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 1.75%)</title><rect x="1148.6" y="227.0" width="20.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.6" y="238.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 1.75%)</title><rect x="1148.6" y="211.0" width="20.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.6" y="222.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 1.75%)</title><rect x="1148.6" y="195.0" width="20.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.6" y="206.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.88%)</title><rect x="1148.6" y="179.0" width="10.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.6" y="190.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.88%)</title><rect x="1148.6" y="163.0" width="10.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.6" y="174.0"></text>
</g>
<g>
<title>GraphBuilder::new_instance(int) (1 samples, 0.88%)</title><rect x="1148.6" y="147.0" width="10.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.6" y="158.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.88%)</title><rect x="1148.6" y="131.0" width="10.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.6" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.88%)</title><rect x="1148.6" y="115.0" width="10.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.6" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.88%)</title><rect x="1148.6" y="99.0" width="10.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.6" y="110.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle, int) (1 samples, 0.88%)</title><rect x="1148.6" y="83.0" width="10.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.6" y="94.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.88%)</title><rect x="1148.6" y="67.0" width="10.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.6" y="78.0"></text>
</g>
<g>
<title>PhiSimplifier::PhiSimplifier(BlockBegin*) (1 samples, 0.88%)</title><rect x="1158.9" y="179.0" width="10.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.9" y="190.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.88%)</title><rect x="1158.9" y="163.0" width="10.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.9" y="174.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.88%)</title><rect x="1158.9" y="147.0" width="10.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.9" y="158.0"></text>
</g>
<g>
<title>PhiSimplifier::block_do(BlockBegin*) (1 samples, 0.88%)</title><rect x="1158.9" y="131.0" width="10.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.9" y="142.0"></text>
</g>
<g>
<title>PhiSimplifier::simplify(Instruction*) (1 samples, 0.88%)</title><rect x="1158.9" y="115.0" width="10.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.9" y="126.0"></text>
</g>
<g>
<title>PhiSimplifier::simplify(Instruction*) (1 samples, 0.88%)</title><rect x="1158.9" y="99.0" width="10.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.9" y="110.0"></text>
</g>
<g>
<title>Phi::operand_at(int) const (1 samples, 0.88%)</title><rect x="1158.9" y="83.0" width="10.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.9" y="94.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 1.75%)</title><rect x="1169.3" y="243.0" width="20.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.3" y="254.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.88%)</title><rect x="1169.3" y="227.0" width="10.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.3" y="238.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.88%)</title><rect x="1169.3" y="211.0" width="10.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.3" y="222.0"></text>
</g>
<g>
<title>LIRGenerator::do_Return(Return*) (1 samples, 0.88%)</title><rect x="1169.3" y="195.0" width="10.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.3" y="206.0"></text>
</g>
<g>
<title>Phi::as_Phi() (1 samples, 0.88%)</title><rect x="1169.3" y="179.0" width="10.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.3" y="190.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.88%)</title><rect x="1179.6" y="227.0" width="10.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.6" y="238.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.88%)</title><rect x="1179.6" y="211.0" width="10.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.6" y="222.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.88%)</title><rect x="1179.6" y="195.0" width="10.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.6" y="206.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.88%)</title><rect x="1179.6" y="179.0" width="10.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.6" y="190.0"></text>
</g>
<g>
<title>MonitorValue::MonitorValue(ScopeValue*, Location, bool) (1 samples, 0.88%)</title><rect x="1179.6" y="163.0" width="10.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.6" y="174.0"></text>
</g>
</g>
</svg>
