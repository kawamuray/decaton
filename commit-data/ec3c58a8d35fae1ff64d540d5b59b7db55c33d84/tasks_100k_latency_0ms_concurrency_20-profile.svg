<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="805"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="805"> </text>
<g id="frames">
<g>
<title>all (127 samples, 100.00%)</title><rect x="10.0" y="771.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="782.0">all</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.79%)</title><rect x="10.0" y="755.0" width="9.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>BarrierSet::write_ref_array(HeapWord*, unsigned long) (1 samples, 0.79%)</title><rect x="10.0" y="739.0" width="9.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_ref_array_work(MemRegion) (1 samples, 0.79%)</title><rect x="10.0" y="723.0" width="9.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (28 samples, 22.05%)</title><rect x="19.3" y="755.0" width="260.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.3" y="766.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.79%)</title><rect x="19.3" y="739.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="22.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.79%)</title><rect x="19.3" y="723.0" width="9.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.79%)</title><rect x="19.3" y="707.0" width="9.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.79%)</title><rect x="19.3" y="691.0" width="9.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.79%)</title><rect x="19.3" y="675.0" width="9.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="22.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.79%)</title><rect x="19.3" y="659.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.79%)</title><rect x="19.3" y="643.0" width="9.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.79%)</title><rect x="19.3" y="627.0" width="9.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.79%)</title><rect x="19.3" y="611.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.79%)</title><rect x="19.3" y="595.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.79%)</title><rect x="19.3" y="579.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.79%)</title><rect x="19.3" y="563.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.79%)</title><rect x="19.3" y="547.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.79%)</title><rect x="19.3" y="531.0" width="9.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.3" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.79%)</title><rect x="19.3" y="515.0" width="9.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.79%)</title><rect x="19.3" y="499.0" width="9.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.3" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.79%)</title><rect x="19.3" y="483.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.3" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.79%)</title><rect x="19.3" y="467.0" width="9.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.3" y="478.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (1 samples, 0.79%)</title><rect x="19.3" y="451.0" width="9.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="22.3" y="462.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.79%)</title><rect x="19.3" y="435.0" width="9.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="22.3" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (27 samples, 21.26%)</title><rect x="28.6" y="739.0" width="250.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.6" y="750.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (3 samples, 2.36%)</title><rect x="28.6" y="723.0" width="27.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="31.6" y="734.0">c..</text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 2.36%)</title><rect x="28.6" y="707.0" width="27.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="31.6" y="718.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1986793876.accept (3 samples, 2.36%)</title><rect x="28.6" y="691.0" width="27.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.6" y="702.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (3 samples, 2.36%)</title><rect x="28.6" y="675.0" width="27.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="31.6" y="686.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 2.36%)</title><rect x="28.6" y="659.0" width="27.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.6" y="670.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 2.36%)</title><rect x="28.6" y="643.0" width="27.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="31.6" y="654.0">c..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (17 samples, 13.39%)</title><rect x="56.5" y="723.0" width="157.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="59.5" y="734.0">java/lang/Iterable.f..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1612081961.accept (14 samples, 11.02%)</title><rect x="56.5" y="707.0" width="130.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.5" y="718.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (14 samples, 11.02%)</title><rect x="56.5" y="691.0" width="130.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="59.5" y="702.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (13 samples, 10.24%)</title><rect x="56.5" y="675.0" width="120.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.5" y="686.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (13 samples, 10.24%)</title><rect x="56.5" y="659.0" width="120.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="59.5" y="670.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (13 samples, 10.24%)</title><rect x="56.5" y="643.0" width="120.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="59.5" y="654.0">com/linecorp/de..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (13 samples, 10.24%)</title><rect x="56.5" y="627.0" width="120.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.5" y="638.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (13 samples, 10.24%)</title><rect x="56.5" y="611.0" width="120.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="59.5" y="622.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (13 samples, 10.24%)</title><rect x="56.5" y="595.0" width="120.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.5" y="606.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (10 samples, 7.87%)</title><rect x="65.7" y="579.0" width="93.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="68.7" y="590.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.79%)</title><rect x="65.7" y="563.0" width="9.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="68.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.79%)</title><rect x="65.7" y="547.0" width="9.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.79%)</title><rect x="65.7" y="531.0" width="9.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="68.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 7.09%)</title><rect x="75.0" y="563.0" width="83.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="78.0" y="574.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 7.09%)</title><rect x="75.0" y="547.0" width="83.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.0" y="558.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.79%)</title><rect x="75.0" y="531.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 6.30%)</title><rect x="84.3" y="531.0" width="74.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="87.3" y="542.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 6.30%)</title><rect x="84.3" y="515.0" width="74.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="87.3" y="526.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (7 samples, 5.51%)</title><rect x="93.6" y="499.0" width="65.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="96.6" y="510.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 5.51%)</title><rect x="93.6" y="483.0" width="65.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="96.6" y="494.0">Unsafe_..</text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 3.94%)</title><rect x="93.6" y="467.0" width="46.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="96.6" y="478.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.79%)</title><rect x="140.1" y="467.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="143.1" y="478.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.79%)</title><rect x="149.4" y="467.0" width="9.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="152.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.79%)</title><rect x="158.7" y="579.0" width="9.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="161.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.79%)</title><rect x="158.7" y="563.0" width="9.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="161.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.79%)</title><rect x="158.7" y="547.0" width="9.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="161.7" y="558.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.79%)</title><rect x="168.0" y="579.0" width="9.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="171.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.79%)</title><rect x="177.2" y="675.0" width="9.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="180.2" y="686.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.79%)</title><rect x="177.2" y="659.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="180.2" y="670.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.79%)</title><rect x="186.5" y="707.0" width="9.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="189.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 1.57%)</title><rect x="195.8" y="707.0" width="18.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 1.57%)</title><rect x="195.8" y="691.0" width="18.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="198.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (2 samples, 1.57%)</title><rect x="195.8" y="675.0" width="18.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="198.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (2 samples, 1.57%)</title><rect x="195.8" y="659.0" width="18.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="198.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 5.51%)</title><rect x="214.4" y="723.0" width="65.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="217.4" y="734.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 5.51%)</title><rect x="214.4" y="707.0" width="65.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.4" y="718.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 3.15%)</title><rect x="214.4" y="691.0" width="37.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="217.4" y="702.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 3.15%)</title><rect x="214.4" y="675.0" width="37.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="217.4" y="686.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 3.15%)</title><rect x="214.4" y="659.0" width="37.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="217.4" y="670.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 2.36%)</title><rect x="214.4" y="643.0" width="27.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="217.4" y="654.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 2.36%)</title><rect x="214.4" y="627.0" width="27.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="217.4" y="638.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 2.36%)</title><rect x="214.4" y="611.0" width="27.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="217.4" y="622.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 2.36%)</title><rect x="214.4" y="595.0" width="27.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="217.4" y="606.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 2.36%)</title><rect x="214.4" y="579.0" width="27.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="217.4" y="590.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (3 samples, 2.36%)</title><rect x="214.4" y="563.0" width="27.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="217.4" y="574.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (3 samples, 2.36%)</title><rect x="214.4" y="547.0" width="27.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.4" y="558.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (3 samples, 2.36%)</title><rect x="214.4" y="531.0" width="27.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="217.4" y="542.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (3 samples, 2.36%)</title><rect x="214.4" y="515.0" width="27.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="217.4" y="526.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (3 samples, 2.36%)</title><rect x="214.4" y="499.0" width="27.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="217.4" y="510.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.79%)</title><rect x="242.3" y="643.0" width="9.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.79%)</title><rect x="242.3" y="627.0" width="9.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="245.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.79%)</title><rect x="242.3" y="611.0" width="9.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.79%)</title><rect x="242.3" y="595.0" width="9.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="245.3" y="606.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.79%)</title><rect x="242.3" y="579.0" width="9.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="245.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.79%)</title><rect x="251.6" y="691.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="254.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.79%)</title><rect x="251.6" y="675.0" width="9.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="254.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.79%)</title><rect x="251.6" y="659.0" width="9.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="254.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.79%)</title><rect x="251.6" y="643.0" width="9.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="254.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.79%)</title><rect x="251.6" y="627.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="254.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.79%)</title><rect x="251.6" y="611.0" width="9.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="254.6" y="622.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.79%)</title><rect x="251.6" y="595.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="254.6" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.79%)</title><rect x="251.6" y="579.0" width="9.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="254.6" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.79%)</title><rect x="251.6" y="563.0" width="9.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="254.6" y="574.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.79%)</title><rect x="251.6" y="547.0" width="9.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="254.6" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 1.57%)</title><rect x="260.9" y="691.0" width="18.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="263.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 1.57%)</title><rect x="260.9" y="675.0" width="18.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 1.57%)</title><rect x="260.9" y="659.0" width="18.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.9" y="670.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.79%)</title><rect x="260.9" y="643.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.79%)</title><rect x="270.2" y="643.0" width="9.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="273.2" y="654.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toList (1 samples, 0.79%)</title><rect x="270.2" y="627.0" width="9.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.2" y="638.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.79%)</title><rect x="270.2" y="611.0" width="9.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="273.2" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.run (51 samples, 40.16%)</title><rect x="279.4" y="755.0" width="473.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.4" y="766.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (51 samples, 40.16%)</title><rect x="279.4" y="739.0" width="473.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.4" y="750.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (51 samples, 40.16%)</title><rect x="279.4" y="723.0" width="473.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.4" y="734.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/2038354488.run (34 samples, 26.77%)</title><rect x="279.4" y="707.0" width="316.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.4" y="718.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (34 samples, 26.77%)</title><rect x="279.4" y="691.0" width="316.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="282.4" y="702.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (34 samples, 26.77%)</title><rect x="279.4" y="675.0" width="316.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="282.4" y="686.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (34 samples, 26.77%)</title><rect x="279.4" y="659.0" width="316.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="282.4" y="670.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (12 samples, 9.45%)</title><rect x="288.7" y="643.0" width="111.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="291.7" y="654.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (12 samples, 9.45%)</title><rect x="288.7" y="627.0" width="111.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="291.7" y="638.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (12 samples, 9.45%)</title><rect x="288.7" y="611.0" width="111.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="291.7" y="622.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 9.45%)</title><rect x="288.7" y="595.0" width="111.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="291.7" y="606.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 9.45%)</title><rect x="288.7" y="579.0" width="111.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="291.7" y="590.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (12 samples, 9.45%)</title><rect x="288.7" y="563.0" width="111.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="291.7" y="574.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (7 samples, 5.51%)</title><rect x="288.7" y="547.0" width="65.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="291.7" y="558.0">com/fas..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.79%)</title><rect x="298.0" y="531.0" width="9.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="301.0" y="542.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.79%)</title><rect x="298.0" y="515.0" width="9.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="301.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.79%)</title><rect x="307.3" y="531.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="310.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.79%)</title><rect x="307.3" y="515.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="310.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.79%)</title><rect x="307.3" y="499.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="310.3" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.79%)</title><rect x="307.3" y="483.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="310.3" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.79%)</title><rect x="307.3" y="467.0" width="9.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="310.3" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.79%)</title><rect x="307.3" y="451.0" width="9.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="310.3" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 3.15%)</title><rect x="316.6" y="531.0" width="37.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="319.6" y="542.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 2.36%)</title><rect x="325.9" y="515.0" width="27.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="328.9" y="526.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.79%)</title><rect x="335.2" y="499.0" width="9.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="338.2" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.79%)</title><rect x="335.2" y="483.0" width="9.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="338.2" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.79%)</title><rect x="335.2" y="467.0" width="9.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="338.2" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.79%)</title><rect x="335.2" y="451.0" width="9.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="338.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.79%)</title><rect x="344.5" y="499.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="347.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (4 samples, 3.15%)</title><rect x="353.8" y="547.0" width="37.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="356.8" y="558.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 1.57%)</title><rect x="353.8" y="531.0" width="18.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="356.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.79%)</title><rect x="363.1" y="515.0" width="9.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="366.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.79%)</title><rect x="363.1" y="499.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="366.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.79%)</title><rect x="363.1" y="483.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="366.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (2 samples, 1.57%)</title><rect x="372.4" y="531.0" width="18.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="375.4" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (2 samples, 1.57%)</title><rect x="372.4" y="515.0" width="18.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="375.4" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (2 samples, 1.57%)</title><rect x="372.4" y="499.0" width="18.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="375.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 1.57%)</title><rect x="372.4" y="483.0" width="18.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="375.4" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.79%)</title><rect x="372.4" y="467.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="375.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.79%)</title><rect x="372.4" y="451.0" width="9.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="375.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.79%)</title><rect x="372.4" y="435.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="375.4" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.79%)</title><rect x="372.4" y="419.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="375.4" y="430.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.79%)</title><rect x="372.4" y="403.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="375.4" y="414.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.79%)</title><rect x="372.4" y="387.0" width="9.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="375.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.79%)</title><rect x="381.7" y="467.0" width="9.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="384.7" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.79%)</title><rect x="381.7" y="451.0" width="9.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="384.7" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.79%)</title><rect x="381.7" y="435.0" width="9.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="384.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.79%)</title><rect x="390.9" y="547.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="393.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.79%)</title><rect x="390.9" y="531.0" width="9.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="393.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.79%)</title><rect x="390.9" y="515.0" width="9.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.79%)</title><rect x="390.9" y="499.0" width="9.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="393.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.79%)</title><rect x="390.9" y="483.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="393.9" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (20 samples, 15.75%)</title><rect x="400.2" y="643.0" width="185.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="403.2" y="654.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (6 samples, 4.72%)</title><rect x="400.2" y="627.0" width="55.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="403.2" y="638.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (6 samples, 4.72%)</title><rect x="400.2" y="611.0" width="55.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="403.2" y="622.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (6 samples, 4.72%)</title><rect x="400.2" y="595.0" width="55.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="403.2" y="606.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.57%)</title><rect x="400.2" y="579.0" width="18.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="403.2" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.79%)</title><rect x="409.5" y="563.0" width="9.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="412.5" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.79%)</title><rect x="409.5" y="547.0" width="9.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="412.5" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.79%)</title><rect x="409.5" y="531.0" width="9.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="412.5" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 3.15%)</title><rect x="418.8" y="579.0" width="37.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="421.8" y="590.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 2.36%)</title><rect x="428.1" y="563.0" width="27.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="431.1" y="574.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 2.36%)</title><rect x="428.1" y="547.0" width="27.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="431.1" y="558.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (12 samples, 9.45%)</title><rect x="456.0" y="627.0" width="111.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="459.0" y="638.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (12 samples, 9.45%)</title><rect x="456.0" y="611.0" width="111.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="459.0" y="622.0">com/linecorp/..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.79%)</title><rect x="465.3" y="595.0" width="9.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="468.3" y="606.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.79%)</title><rect x="465.3" y="579.0" width="9.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="468.3" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 2.36%)</title><rect x="474.6" y="595.0" width="27.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="477.6" y="606.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.57%)</title><rect x="474.6" y="579.0" width="18.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="477.6" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.57%)</title><rect x="474.6" y="563.0" width="18.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="477.6" y="574.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.79%)</title><rect x="483.9" y="547.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="486.9" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.79%)</title><rect x="483.9" y="531.0" width="9.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="486.9" y="542.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.79%)</title><rect x="493.1" y="579.0" width="9.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="496.1" y="590.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 1.57%)</title><rect x="502.4" y="595.0" width="18.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="505.4" y="606.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 3.94%)</title><rect x="521.0" y="595.0" width="46.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="524.0" y="606.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 3.94%)</title><rect x="521.0" y="579.0" width="46.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="524.0" y="590.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 2.36%)</title><rect x="521.0" y="563.0" width="27.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="524.0" y="574.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.57%)</title><rect x="530.3" y="547.0" width="18.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="533.3" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.57%)</title><rect x="530.3" y="531.0" width="18.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="533.3" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.57%)</title><rect x="530.3" y="515.0" width="18.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="533.3" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 1.57%)</title><rect x="548.9" y="563.0" width="18.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="551.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.57%)</title><rect x="548.9" y="547.0" width="18.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="551.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.79%)</title><rect x="558.2" y="531.0" width="9.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="561.2" y="542.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.79%)</title><rect x="558.2" y="515.0" width="9.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="561.2" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (2 samples, 1.57%)</title><rect x="567.5" y="627.0" width="18.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="570.5" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 1.57%)</title><rect x="567.5" y="611.0" width="18.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="570.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.79%)</title><rect x="586.1" y="643.0" width="9.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="589.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.79%)</title><rect x="586.1" y="627.0" width="9.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="589.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.79%)</title><rect x="586.1" y="611.0" width="9.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="589.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 1.57%)</title><rect x="595.4" y="707.0" width="18.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="598.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.57%)</title><rect x="595.4" y="691.0" width="18.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="598.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (2 samples, 1.57%)</title><rect x="595.4" y="675.0" width="18.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="598.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.79%)</title><rect x="604.6" y="659.0" width="9.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="607.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (15 samples, 11.81%)</title><rect x="613.9" y="707.0" width="139.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="616.9" y="718.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (15 samples, 11.81%)</title><rect x="613.9" y="691.0" width="139.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="616.9" y="702.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (12 samples, 9.45%)</title><rect x="641.8" y="675.0" width="111.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="644.8" y="686.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (12 samples, 9.45%)</title><rect x="641.8" y="659.0" width="111.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="644.8" y="670.0">java/util/con..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (12 samples, 9.45%)</title><rect x="641.8" y="643.0" width="111.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="644.8" y="654.0">sun/misc/Unsa..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.79%)</title><rect x="651.1" y="627.0" width="9.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="654.1" y="638.0"></text>
</g>
<g>
<title>Unsafe_Park (10 samples, 7.87%)</title><rect x="660.4" y="627.0" width="92.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="663.4" y="638.0">Unsafe_Park</text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.79%)</title><rect x="660.4" y="611.0" width="9.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="663.4" y="622.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.79%)</title><rect x="669.7" y="611.0" width="9.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="672.7" y="622.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 2.36%)</title><rect x="679.0" y="611.0" width="27.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="682.0" y="622.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 2.36%)</title><rect x="706.9" y="611.0" width="27.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="709.9" y="622.0">_..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.79%)</title><rect x="734.7" y="611.0" width="9.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="737.7" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.79%)</title><rect x="744.0" y="611.0" width="9.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="747.0" y="622.0"></text>
</g>
<g>
<title>start_thread (47 samples, 37.01%)</title><rect x="753.3" y="755.0" width="436.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="756.3" y="766.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (47 samples, 37.01%)</title><rect x="753.3" y="739.0" width="436.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="756.3" y="750.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 8.66%)</title><rect x="753.3" y="723.0" width="102.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="756.3" y="734.0">GangWorker::..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.79%)</title><rect x="753.3" y="707.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="756.3" y="718.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.79%)</title><rect x="753.3" y="691.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="756.3" y="702.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.79%)</title><rect x="753.3" y="675.0" width="9.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="756.3" y="686.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (10 samples, 7.87%)</title><rect x="762.6" y="707.0" width="92.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="765.6" y="718.0">G1ParTask::..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 6.30%)</title><rect x="762.6" y="691.0" width="74.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="765.6" y="702.0">G1ParEva..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 2.36%)</title><rect x="762.6" y="675.0" width="27.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="765.6" y="686.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.57%)</title><rect x="771.9" y="659.0" width="18.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="774.9" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.79%)</title><rect x="781.2" y="643.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="784.2" y="654.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 2.36%)</title><rect x="790.5" y="675.0" width="27.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="793.5" y="686.0">G..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.79%)</title><rect x="818.3" y="675.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="821.3" y="686.0"></text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.79%)</title><rect x="827.6" y="675.0" width="9.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="830.6" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.79%)</title><rect x="836.9" y="691.0" width="9.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="839.9" y="702.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.79%)</title><rect x="836.9" y="675.0" width="9.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="839.9" y="686.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.79%)</title><rect x="836.9" y="659.0" width="9.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="839.9" y="670.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.79%)</title><rect x="836.9" y="643.0" width="9.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="839.9" y="654.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.79%)</title><rect x="836.9" y="627.0" width="9.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="839.9" y="638.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.79%)</title><rect x="846.2" y="691.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="849.2" y="702.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.79%)</title><rect x="846.2" y="675.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="849.2" y="686.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.79%)</title><rect x="846.2" y="659.0" width="9.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="849.2" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.79%)</title><rect x="846.2" y="643.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="849.2" y="654.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.79%)</title><rect x="846.2" y="627.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="849.2" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::push_dirty_cards_region(HeapRegion*) (1 samples, 0.79%)</title><rect x="846.2" y="611.0" width="9.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="849.2" y="622.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (36 samples, 28.35%)</title><rect x="855.5" y="723.0" width="334.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="858.5" y="734.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (36 samples, 28.35%)</title><rect x="855.5" y="707.0" width="334.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="858.5" y="718.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (36 samples, 28.35%)</title><rect x="855.5" y="691.0" width="334.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="858.5" y="702.0">CompileBroker::invoke_compiler_on_method(Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (34 samples, 26.77%)</title><rect x="855.5" y="675.0" width="315.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="858.5" y="686.0">C2Compiler::compile_method(ciEnv*, ciMethod..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (34 samples, 26.77%)</title><rect x="855.5" y="659.0" width="315.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="858.5" y="670.0">Compile::Compile(ciEnv*, C2Compiler*, ciMet..</text>
</g>
<g>
<title>Compile::Code_Gen() (20 samples, 15.75%)</title><rect x="855.5" y="643.0" width="185.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="858.5" y="654.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.57%)</title><rect x="855.5" y="627.0" width="18.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="858.5" y="638.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.79%)</title><rect x="864.8" y="611.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="867.8" y="622.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.57%)</title><rect x="874.1" y="627.0" width="18.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="877.1" y="638.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 1.57%)</title><rect x="874.1" y="611.0" width="18.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="877.1" y="622.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.79%)</title><rect x="883.4" y="595.0" width="9.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="886.4" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.79%)</title><rect x="892.7" y="627.0" width="9.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="895.7" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.79%)</title><rect x="892.7" y="611.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="895.7" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.79%)</title><rect x="892.7" y="595.0" width="9.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="895.7" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::replace_block_proj_ctrl(Node*) (1 samples, 0.79%)</title><rect x="892.7" y="579.0" width="9.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="895.7" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (14 samples, 11.02%)</title><rect x="902.0" y="627.0" width="130.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="905.0" y="638.0">PhaseChaitin::Re..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.79%)</title><rect x="911.3" y="611.0" width="9.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="914.3" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.57%)</title><rect x="920.6" y="611.0" width="18.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="923.6" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.79%)</title><rect x="920.6" y="595.0" width="9.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="923.6" y="606.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.79%)</title><rect x="920.6" y="579.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="923.6" y="590.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.79%)</title><rect x="929.8" y="595.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="932.8" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.79%)</title><rect x="939.1" y="611.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="942.1" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.79%)</title><rect x="948.4" y="611.0" width="9.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="951.4" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.79%)</title><rect x="948.4" y="595.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="951.4" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (1 samples, 0.79%)</title><rect x="957.7" y="611.0" width="9.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="960.7" y="622.0"></text>
</g>
<g>
<title>xorL_rRegNode::cisc_RegMask() const (1 samples, 0.79%)</title><rect x="957.7" y="595.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="960.7" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 3.15%)</title><rect x="967.0" y="611.0" width="37.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="970.0" y="622.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 1.57%)</title><rect x="985.6" y="595.0" width="18.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="988.6" y="606.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.79%)</title><rect x="1004.2" y="611.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1007.2" y="622.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.79%)</title><rect x="1004.2" y="595.0" width="9.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1007.2" y="606.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.57%)</title><rect x="1013.5" y="611.0" width="18.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1016.5" y="622.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 1.57%)</title><rect x="1013.5" y="595.0" width="18.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1016.5" y="606.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.79%)</title><rect x="1032.0" y="627.0" width="9.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1035.0" y="638.0"></text>
</g>
<g>
<title>Compile::Optimize() (7 samples, 5.51%)</title><rect x="1041.3" y="643.0" width="65.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1044.3" y="654.0">Compile..</text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 1.57%)</title><rect x="1041.3" y="627.0" width="18.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1044.3" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (3 samples, 2.36%)</title><rect x="1059.9" y="627.0" width="27.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1062.9" y="638.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.79%)</title><rect x="1059.9" y="611.0" width="9.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1062.9" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.79%)</title><rect x="1069.2" y="611.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1072.2" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.79%)</title><rect x="1069.2" y="595.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1072.2" y="606.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.79%)</title><rect x="1069.2" y="579.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1072.2" y="590.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.79%)</title><rect x="1078.5" y="611.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1081.5" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.57%)</title><rect x="1087.8" y="627.0" width="18.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.8" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.57%)</title><rect x="1087.8" y="611.0" width="18.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1090.8" y="622.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.79%)</title><rect x="1087.8" y="595.0" width="9.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.8" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.79%)</title><rect x="1087.8" y="579.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.8" y="590.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.79%)</title><rect x="1087.8" y="563.0" width="9.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.8" y="574.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.79%)</title><rect x="1097.1" y="595.0" width="9.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1100.1" y="606.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.79%)</title><rect x="1097.1" y="579.0" width="9.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1100.1" y="590.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.79%)</title><rect x="1097.1" y="563.0" width="9.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1100.1" y="574.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.79%)</title><rect x="1097.1" y="547.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1100.1" y="558.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.79%)</title><rect x="1097.1" y="531.0" width="9.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1100.1" y="542.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.79%)</title><rect x="1097.1" y="515.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1100.1" y="526.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.79%)</title><rect x="1097.1" y="499.0" width="9.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1100.1" y="510.0"></text>
</g>
<g>
<title>TypeOopPtr::speculative() const (1 samples, 0.79%)</title><rect x="1097.1" y="483.0" width="9.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1100.1" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 4.72%)</title><rect x="1106.4" y="643.0" width="55.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1109.4" y="654.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 4.72%)</title><rect x="1106.4" y="627.0" width="55.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.4" y="638.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 4.72%)</title><rect x="1106.4" y="611.0" width="55.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1109.4" y="622.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 4.72%)</title><rect x="1106.4" y="595.0" width="55.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.4" y="606.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 4.72%)</title><rect x="1106.4" y="579.0" width="55.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1109.4" y="590.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 4.72%)</title><rect x="1106.4" y="563.0" width="55.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.4" y="574.0">Parse..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.79%)</title><rect x="1106.4" y="547.0" width="9.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1109.4" y="558.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.79%)</title><rect x="1106.4" y="531.0" width="9.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1109.4" y="542.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.79%)</title><rect x="1106.4" y="515.0" width="9.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1109.4" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.79%)</title><rect x="1106.4" y="499.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.4" y="510.0"></text>
</g>
<g>
<title>ciType::make(BasicType) (1 samples, 0.79%)</title><rect x="1106.4" y="483.0" width="9.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.4" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 3.15%)</title><rect x="1115.7" y="547.0" width="37.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1118.7" y="558.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 3.15%)</title><rect x="1115.7" y="531.0" width="37.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1118.7" y="542.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 3.15%)</title><rect x="1115.7" y="515.0" width="37.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1118.7" y="526.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 3.15%)</title><rect x="1115.7" y="499.0" width="37.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1118.7" y="510.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 3.15%)</title><rect x="1115.7" y="483.0" width="37.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.7" y="494.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.36%)</title><rect x="1115.7" y="467.0" width="27.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.7" y="478.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.79%)</title><rect x="1115.7" y="451.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.7" y="462.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.79%)</title><rect x="1115.7" y="435.0" width="9.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1118.7" y="446.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call_or_null(KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.79%)</title><rect x="1115.7" y="419.0" width="9.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1118.7" y="430.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_interface_method(CallInfo&amp;, methodHandle, KlassHandle, Handle, KlassHandle, bool, Thread*) (1 samples, 0.79%)</title><rect x="1115.7" y="403.0" width="9.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.7" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1125.0" y="451.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.0" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.79%)</title><rect x="1125.0" y="435.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.79%)</title><rect x="1125.0" y="419.0" width="9.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.79%)</title><rect x="1125.0" y="403.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.79%)</title><rect x="1125.0" y="387.0" width="9.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1128.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.79%)</title><rect x="1125.0" y="371.0" width="9.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.0" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1125.0" y="355.0" width="9.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.0" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.79%)</title><rect x="1125.0" y="339.0" width="9.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1128.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.79%)</title><rect x="1125.0" y="323.0" width="9.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.79%)</title><rect x="1125.0" y="307.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.79%)</title><rect x="1125.0" y="291.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.79%)</title><rect x="1125.0" y="275.0" width="9.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.0" y="286.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.79%)</title><rect x="1125.0" y="259.0" width="9.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1128.0" y="270.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.79%)</title><rect x="1125.0" y="243.0" width="9.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.0" y="254.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.79%)</title><rect x="1125.0" y="227.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.0" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.79%)</title><rect x="1125.0" y="211.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.0" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.79%)</title><rect x="1125.0" y="195.0" width="9.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.0" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.79%)</title><rect x="1125.0" y="179.0" width="9.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.0" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.79%)</title><rect x="1125.0" y="163.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.0" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.79%)</title><rect x="1125.0" y="147.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.0" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::store_local_long(int) (1 samples, 0.79%)</title><rect x="1125.0" y="131.0" width="9.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1128.0" y="142.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1134.3" y="451.0" width="9.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.3" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1134.3" y="435.0" width="9.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.3" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.79%)</title><rect x="1134.3" y="419.0" width="9.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.79%)</title><rect x="1134.3" y="403.0" width="9.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.79%)</title><rect x="1134.3" y="387.0" width="9.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.79%)</title><rect x="1134.3" y="371.0" width="9.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.79%)</title><rect x="1134.3" y="355.0" width="9.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.3" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1134.3" y="339.0" width="9.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.3" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.79%)</title><rect x="1134.3" y="323.0" width="9.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.79%)</title><rect x="1134.3" y="307.0" width="9.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.79%)</title><rect x="1134.3" y="291.0" width="9.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.79%)</title><rect x="1134.3" y="275.0" width="9.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.79%)</title><rect x="1134.3" y="259.0" width="9.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.3" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1134.3" y="243.0" width="9.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.3" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.79%)</title><rect x="1134.3" y="227.0" width="9.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.79%)</title><rect x="1134.3" y="211.0" width="9.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.79%)</title><rect x="1134.3" y="195.0" width="9.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.79%)</title><rect x="1134.3" y="179.0" width="9.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.79%)</title><rect x="1134.3" y="163.0" width="9.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.79%)</title><rect x="1134.3" y="147.0" width="9.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.3" y="158.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.79%)</title><rect x="1134.3" y="131.0" width="9.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.3" y="142.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.79%)</title><rect x="1134.3" y="115.0" width="9.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.3" y="126.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.79%)</title><rect x="1134.3" y="99.0" width="9.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.3" y="110.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.79%)</title><rect x="1143.5" y="467.0" width="9.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.79%)</title><rect x="1143.5" y="451.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.5" y="462.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.79%)</title><rect x="1143.5" y="435.0" width="9.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.5" y="446.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.79%)</title><rect x="1143.5" y="419.0" width="9.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.5" y="430.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.79%)</title><rect x="1143.5" y="403.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.5" y="414.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.79%)</title><rect x="1143.5" y="387.0" width="9.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.5" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1152.8" y="547.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.8" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1152.8" y="531.0" width="9.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.8" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.79%)</title><rect x="1152.8" y="515.0" width="9.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.79%)</title><rect x="1152.8" y="499.0" width="9.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.79%)</title><rect x="1152.8" y="483.0" width="9.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.79%)</title><rect x="1152.8" y="467.0" width="9.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.79%)</title><rect x="1152.8" y="451.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.8" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1152.8" y="435.0" width="9.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.8" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.79%)</title><rect x="1152.8" y="419.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.79%)</title><rect x="1152.8" y="403.0" width="9.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.79%)</title><rect x="1152.8" y="387.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.79%)</title><rect x="1152.8" y="371.0" width="9.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.79%)</title><rect x="1152.8" y="355.0" width="9.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.8" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1152.8" y="339.0" width="9.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.8" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.79%)</title><rect x="1152.8" y="323.0" width="9.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.79%)</title><rect x="1152.8" y="307.0" width="9.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.79%)</title><rect x="1152.8" y="291.0" width="9.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.79%)</title><rect x="1152.8" y="275.0" width="9.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.79%)</title><rect x="1152.8" y="259.0" width="9.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.8" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1152.8" y="243.0" width="9.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.8" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.79%)</title><rect x="1152.8" y="227.0" width="9.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.79%)</title><rect x="1152.8" y="211.0" width="9.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.79%)</title><rect x="1152.8" y="195.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.79%)</title><rect x="1152.8" y="179.0" width="9.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.79%)</title><rect x="1152.8" y="163.0" width="9.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.8" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1152.8" y="147.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.8" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.79%)</title><rect x="1152.8" y="131.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.79%)</title><rect x="1152.8" y="115.0" width="9.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.8" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.79%)</title><rect x="1152.8" y="99.0" width="9.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.8" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.79%)</title><rect x="1152.8" y="83.0" width="9.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.8" y="94.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.79%)</title><rect x="1152.8" y="67.0" width="9.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.8" y="78.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.79%)</title><rect x="1152.8" y="51.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.8" y="62.0"></text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.79%)</title><rect x="1152.8" y="35.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.8" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.79%)</title><rect x="1162.1" y="643.0" width="9.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.1" y="654.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.79%)</title><rect x="1162.1" y="627.0" width="9.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.1" y="638.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.57%)</title><rect x="1171.4" y="675.0" width="18.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.4" y="686.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.57%)</title><rect x="1171.4" y="659.0" width="18.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.4" y="670.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.57%)</title><rect x="1171.4" y="643.0" width="18.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.4" y="654.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.57%)</title><rect x="1171.4" y="627.0" width="18.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.4" y="638.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.79%)</title><rect x="1171.4" y="611.0" width="9.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.4" y="622.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.79%)</title><rect x="1171.4" y="595.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.4" y="606.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.79%)</title><rect x="1171.4" y="579.0" width="9.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.4" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.79%)</title><rect x="1171.4" y="563.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.4" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.79%)</title><rect x="1171.4" y="547.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.4" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::store_local(ValueStack*, Instruction*, int) (1 samples, 0.79%)</title><rect x="1171.4" y="531.0" width="9.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.4" y="542.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.79%)</title><rect x="1180.7" y="611.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.7" y="622.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.79%)</title><rect x="1180.7" y="595.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="606.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.79%)</title><rect x="1180.7" y="579.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.7" y="590.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.79%)</title><rect x="1180.7" y="563.0" width="9.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.7" y="574.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_activation(int, int, int, int, int, int, bool) (1 samples, 0.79%)</title><rect x="1180.7" y="547.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.7" y="558.0"></text>
</g>
</g>
</svg>
