<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1350" onload="init(evt)" viewBox="0 0 1200 1350" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1333"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1333"> </text>
<g id="frames">
<g>
<title>all (235 samples, 100.00%)</title><rect x="10.0" y="1299.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1310.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (22 samples, 9.36%)</title><rect x="10.0" y="1283.0" width="110.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1294.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (22 samples, 9.36%)</title><rect x="10.0" y="1267.0" width="110.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1278.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.43%)</title><rect x="10.0" y="1251.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.43%)</title><rect x="10.0" y="1235.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1803073465.accept (1 samples, 0.43%)</title><rect x="10.0" y="1219.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.85%)</title><rect x="15.0" y="1251.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.0" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.43%)</title><rect x="20.0" y="1235.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.0" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toList (1 samples, 0.43%)</title><rect x="20.0" y="1219.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.0" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.43%)</title><rect x="20.0" y="1203.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="23.0" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.43%)</title><rect x="20.0" y="1187.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (8 samples, 3.40%)</title><rect x="25.1" y="1251.0" width="40.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.1" y="1262.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1760100634.accept (7 samples, 2.98%)</title><rect x="25.1" y="1235.0" width="35.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.1" y="1246.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (7 samples, 2.98%)</title><rect x="25.1" y="1219.0" width="35.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.1" y="1230.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.43%)</title><rect x="25.1" y="1203.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.1" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (3 samples, 1.28%)</title><rect x="30.1" y="1203.0" width="15.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.1" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (3 samples, 1.28%)</title><rect x="30.1" y="1187.0" width="15.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.1" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (3 samples, 1.28%)</title><rect x="30.1" y="1171.0" width="15.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="33.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 1.28%)</title><rect x="30.1" y="1155.0" width="15.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 1.28%)</title><rect x="30.1" y="1139.0" width="15.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 1.28%)</title><rect x="30.1" y="1123.0" width="15.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="33.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.43%)</title><rect x="30.1" y="1107.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="33.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.43%)</title><rect x="30.1" y="1091.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.43%)</title><rect x="30.1" y="1075.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.85%)</title><rect x="35.1" y="1107.0" width="10.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.85%)</title><rect x="35.1" y="1091.0" width="10.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="38.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.85%)</title><rect x="35.1" y="1075.0" width="10.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.43%)</title><rect x="45.1" y="1203.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="48.1" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.43%)</title><rect x="45.1" y="1187.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.1" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.85%)</title><rect x="50.2" y="1203.0" width="10.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="53.2" y="1214.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.85%)</title><rect x="50.2" y="1187.0" width="10.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.2" y="1198.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.85%)</title><rect x="50.2" y="1171.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="53.2" y="1182.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.85%)</title><rect x="50.2" y="1155.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="53.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.85%)</title><rect x="50.2" y="1139.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.2" y="1150.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.85%)</title><rect x="50.2" y="1123.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="53.2" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.43%)</title><rect x="50.2" y="1107.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="53.2" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.43%)</title><rect x="50.2" y="1091.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="53.2" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.43%)</title><rect x="50.2" y="1075.0" width="5.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="53.2" y="1086.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.43%)</title><rect x="50.2" y="1059.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="53.2" y="1070.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.43%)</title><rect x="50.2" y="1043.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="53.2" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.43%)</title><rect x="55.2" y="1107.0" width="5.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="58.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.43%)</title><rect x="60.2" y="1235.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.43%)</title><rect x="60.2" y="1219.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="63.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.43%)</title><rect x="60.2" y="1203.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="63.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.43%)</title><rect x="60.2" y="1187.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="63.2" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.43%)</title><rect x="60.2" y="1171.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.2" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.43%)</title><rect x="60.2" y="1155.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="63.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 4.68%)</title><rect x="65.2" y="1251.0" width="55.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.2" y="1262.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 4.68%)</title><rect x="65.2" y="1235.0" width="55.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="68.2" y="1246.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 1.70%)</title><rect x="65.2" y="1219.0" width="20.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="68.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.85%)</title><rect x="65.2" y="1203.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="68.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.85%)</title><rect x="65.2" y="1187.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="68.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.85%)</title><rect x="65.2" y="1171.0" width="10.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="68.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.85%)</title><rect x="65.2" y="1155.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="68.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.43%)</title><rect x="65.2" y="1139.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.43%)</title><rect x="65.2" y="1123.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="68.2" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.43%)</title><rect x="65.2" y="1107.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="68.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.43%)</title><rect x="70.3" y="1139.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="73.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (1 samples, 0.43%)</title><rect x="70.3" y="1123.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="73.3" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.43%)</title><rect x="70.3" y="1107.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="73.3" y="1118.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.43%)</title><rect x="70.3" y="1091.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="73.3" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.43%)</title><rect x="70.3" y="1075.0" width="5.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="73.3" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_humongous(unsigned long, unsigned int*, unsigned int*) (1 samples, 0.43%)</title><rect x="70.3" y="1059.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="73.3" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate(unsigned long, unsigned char) (1 samples, 0.43%)</title><rect x="70.3" y="1043.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="73.3" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.43%)</title><rect x="70.3" y="1027.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="73.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 0.85%)</title><rect x="75.3" y="1203.0" width="10.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="78.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.85%)</title><rect x="75.3" y="1187.0" width="10.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="78.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.85%)</title><rect x="75.3" y="1171.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.85%)</title><rect x="75.3" y="1155.0" width="10.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.43%)</title><rect x="75.3" y="1139.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="78.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.43%)</title><rect x="75.3" y="1123.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.43%)</title><rect x="75.3" y="1107.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="78.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.43%)</title><rect x="75.3" y="1091.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="78.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.43%)</title><rect x="80.3" y="1139.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.43%)</title><rect x="80.3" y="1123.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.43%)</title><rect x="80.3" y="1107.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="83.3" y="1118.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.43%)</title><rect x="80.3" y="1091.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="83.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 1.28%)</title><rect x="85.3" y="1219.0" width="15.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="88.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 1.28%)</title><rect x="85.3" y="1203.0" width="15.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="88.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.85%)</title><rect x="90.3" y="1187.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="93.3" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.43%)</title><rect x="90.3" y="1171.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="93.3" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.43%)</title><rect x="90.3" y="1155.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="93.3" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.43%)</title><rect x="90.3" y="1139.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.3" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.43%)</title><rect x="90.3" y="1123.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="93.3" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.43%)</title><rect x="90.3" y="1107.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="93.3" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.43%)</title><rect x="90.3" y="1091.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="93.3" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$79/439054207.get (1 samples, 0.43%)</title><rect x="90.3" y="1075.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="93.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.43%)</title><rect x="95.4" y="1171.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.4" y="1182.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.43%)</title><rect x="95.4" y="1155.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="98.4" y="1166.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.43%)</title><rect x="95.4" y="1139.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="98.4" y="1150.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.43%)</title><rect x="95.4" y="1123.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="98.4" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.43%)</title><rect x="95.4" y="1107.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="98.4" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.43%)</title><rect x="95.4" y="1091.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.4" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.43%)</title><rect x="95.4" y="1075.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.85%)</title><rect x="100.4" y="1219.0" width="10.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="103.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.43%)</title><rect x="100.4" y="1203.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.43%)</title><rect x="100.4" y="1187.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="103.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.43%)</title><rect x="100.4" y="1171.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="103.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.43%)</title><rect x="100.4" y="1155.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="103.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.43%)</title><rect x="100.4" y="1139.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.43%)</title><rect x="100.4" y="1123.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="103.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.43%)</title><rect x="100.4" y="1107.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="103.4" y="1118.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.43%)</title><rect x="100.4" y="1091.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.4" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.43%)</title><rect x="100.4" y="1075.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.4" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.43%)</title><rect x="100.4" y="1059.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="103.4" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (1 samples, 0.43%)</title><rect x="100.4" y="1043.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="103.4" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (1 samples, 0.43%)</title><rect x="100.4" y="1027.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.43%)</title><rect x="105.4" y="1203.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="108.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.43%)</title><rect x="105.4" y="1187.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="108.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.43%)</title><rect x="105.4" y="1171.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="108.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.85%)</title><rect x="110.4" y="1219.0" width="10.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="113.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$100 (1 samples, 0.43%)</title><rect x="110.4" y="1203.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="113.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.maybeUpdateAssignment (1 samples, 0.43%)</title><rect x="110.4" y="1187.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="113.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignmentId (1 samples, 0.43%)</title><rect x="110.4" y="1171.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.43%)</title><rect x="115.4" y="1203.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="118.4" y="1214.0"></text>
</g>
<g>
<title>java/lang/Thread.run (141 samples, 60.00%)</title><rect x="120.5" y="1283.0" width="708.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="123.5" y="1294.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (141 samples, 60.00%)</title><rect x="120.5" y="1267.0" width="708.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="123.5" y="1278.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (141 samples, 60.00%)</title><rect x="120.5" y="1251.0" width="708.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="123.5" y="1262.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1377692592.run (135 samples, 57.45%)</title><rect x="125.5" y="1235.0" width="677.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="128.5" y="1246.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1377692592.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (135 samples, 57.45%)</title><rect x="125.5" y="1219.0" width="677.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="128.5" y="1230.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (135 samples, 57.45%)</title><rect x="125.5" y="1203.0" width="677.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="128.5" y="1214.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (133 samples, 56.60%)</title><rect x="125.5" y="1187.0" width="667.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="128.5" y="1198.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (34 samples, 14.47%)</title><rect x="125.5" y="1171.0" width="170.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="128.5" y="1182.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (34 samples, 14.47%)</title><rect x="125.5" y="1155.0" width="170.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="128.5" y="1166.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (34 samples, 14.47%)</title><rect x="125.5" y="1139.0" width="170.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="128.5" y="1150.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (34 samples, 14.47%)</title><rect x="125.5" y="1123.0" width="170.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="128.5" y="1134.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (34 samples, 14.47%)</title><rect x="125.5" y="1107.0" width="170.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="128.5" y="1118.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (34 samples, 14.47%)</title><rect x="125.5" y="1091.0" width="170.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="128.5" y="1102.0">com/fasterxml/jackson/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (13 samples, 5.53%)</title><rect x="125.5" y="1075.0" width="65.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="128.5" y="1086.0">com/fas..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.85%)</title><rect x="150.6" y="1059.0" width="10.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="153.6" y="1070.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.85%)</title><rect x="150.6" y="1043.0" width="10.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="153.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.43%)</title><rect x="160.6" y="1059.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="163.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.43%)</title><rect x="160.6" y="1043.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="163.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (5 samples, 2.13%)</title><rect x="165.7" y="1059.0" width="25.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="168.7" y="1070.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.85%)</title><rect x="180.7" y="1043.0" width="10.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="183.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.85%)</title><rect x="180.7" y="1027.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="183.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.85%)</title><rect x="180.7" y="1011.0" width="10.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="183.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (19 samples, 8.09%)</title><rect x="190.8" y="1075.0" width="95.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="193.8" y="1086.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.43%)</title><rect x="190.8" y="1059.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="193.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.43%)</title><rect x="195.8" y="1059.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.43%)</title><rect x="195.8" y="1043.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="198.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.43%)</title><rect x="195.8" y="1027.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="198.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.43%)</title><rect x="195.8" y="1011.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="198.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (17 samples, 7.23%)</title><rect x="200.8" y="1059.0" width="85.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="203.8" y="1070.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.28%)</title><rect x="205.8" y="1043.0" width="15.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="208.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.43%)</title><rect x="205.8" y="1027.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="208.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.43%)</title><rect x="205.8" y="1011.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="208.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.43%)</title><rect x="205.8" y="995.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="208.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.85%)</title><rect x="210.9" y="1027.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="213.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (13 samples, 5.53%)</title><rect x="220.9" y="1043.0" width="65.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.9" y="1054.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (13 samples, 5.53%)</title><rect x="220.9" y="1027.0" width="65.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="223.9" y="1038.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (13 samples, 5.53%)</title><rect x="220.9" y="1011.0" width="65.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.9" y="1022.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.70%)</title><rect x="225.9" y="995.0" width="20.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.43%)</title><rect x="225.9" y="979.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.43%)</title><rect x="225.9" y="963.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="228.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.43%)</title><rect x="225.9" y="947.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.43%)</title><rect x="225.9" y="931.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.43%)</title><rect x="230.9" y="979.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.43%)</title><rect x="236.0" y="979.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="239.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.43%)</title><rect x="236.0" y="963.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="239.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.43%)</title><rect x="241.0" y="979.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="244.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 1.28%)</title><rect x="246.0" y="995.0" width="15.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 1.28%)</title><rect x="246.0" y="979.0" width="15.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="249.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 1.28%)</title><rect x="246.0" y="963.0" width="15.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 1.28%)</title><rect x="246.0" y="947.0" width="15.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.0" y="958.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 1.28%)</title><rect x="246.0" y="931.0" width="15.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.43%)</title><rect x="261.1" y="995.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="264.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.43%)</title><rect x="266.1" y="995.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="269.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.43%)</title><rect x="266.1" y="979.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="269.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.43%)</title><rect x="266.1" y="963.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="269.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.43%)</title><rect x="266.1" y="947.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.1" y="958.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.43%)</title><rect x="266.1" y="931.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.1" y="942.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.43%)</title><rect x="266.1" y="915.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="269.1" y="926.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor16.newInstance (1 samples, 0.43%)</title><rect x="266.1" y="899.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.43%)</title><rect x="271.1" y="995.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.1" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.43%)</title><rect x="271.1" y="979.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="274.1" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.43%)</title><rect x="271.1" y="963.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.85%)</title><rect x="276.1" y="995.0" width="10.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="279.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.43%)</title><rect x="281.1" y="979.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.1" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.43%)</title><rect x="281.1" y="963.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="284.1" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.43%)</title><rect x="281.1" y="947.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="284.1" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.43%)</title><rect x="281.1" y="931.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="284.1" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.43%)</title><rect x="281.1" y="915.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="284.1" y="926.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.43%)</title><rect x="281.1" y="899.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="284.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.85%)</title><rect x="286.2" y="1075.0" width="10.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="289.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.43%)</title><rect x="286.2" y="1059.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.43%)</title><rect x="291.2" y="1059.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="294.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.43%)</title><rect x="291.2" y="1043.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="294.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.43%)</title><rect x="291.2" y="1027.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="294.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.43%)</title><rect x="291.2" y="1011.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (93 samples, 39.57%)</title><rect x="296.2" y="1171.0" width="467.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="299.2" y="1182.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (17 samples, 7.23%)</title><rect x="296.2" y="1155.0" width="85.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="299.2" y="1166.0">com/lineco..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (16 samples, 6.81%)</title><rect x="301.2" y="1139.0" width="80.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="304.2" y="1150.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (11 samples, 4.68%)</title><rect x="326.3" y="1123.0" width="55.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="329.3" y="1134.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.28%)</title><rect x="331.4" y="1107.0" width="15.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="334.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.28%)</title><rect x="331.4" y="1091.0" width="15.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="334.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 1.28%)</title><rect x="331.4" y="1075.0" width="15.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="334.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 1.28%)</title><rect x="331.4" y="1059.0" width="15.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="334.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.85%)</title><rect x="336.4" y="1043.0" width="10.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="339.4" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.85%)</title><rect x="336.4" y="1027.0" width="10.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="339.4" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (7 samples, 2.98%)</title><rect x="346.4" y="1107.0" width="35.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="349.4" y="1118.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (5 samples, 2.13%)</title><rect x="356.5" y="1091.0" width="25.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="359.5" y="1102.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 2.13%)</title><rect x="356.5" y="1075.0" width="25.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="359.5" y="1086.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.43%)</title><rect x="381.6" y="1155.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="384.6" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.43%)</title><rect x="381.6" y="1139.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="384.6" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.43%)</title><rect x="381.6" y="1123.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="384.6" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (19 samples, 8.09%)</title><rect x="386.6" y="1155.0" width="95.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="389.6" y="1166.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (19 samples, 8.09%)</title><rect x="386.6" y="1139.0" width="95.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="389.6" y="1150.0">com/linecor..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.43%)</title><rect x="396.6" y="1123.0" width="5.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="399.6" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.43%)</title><rect x="396.6" y="1107.0" width="5.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="399.6" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 3.40%)</title><rect x="401.7" y="1123.0" width="40.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="404.7" y="1134.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 2.98%)</title><rect x="406.7" y="1107.0" width="35.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="409.7" y="1118.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 2.55%)</title><rect x="411.7" y="1091.0" width="30.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="414.7" y="1102.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 2.13%)</title><rect x="416.7" y="1075.0" width="25.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="419.7" y="1086.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 2.13%)</title><rect x="416.7" y="1059.0" width="25.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="419.7" y="1070.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 2.13%)</title><rect x="416.7" y="1043.0" width="25.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="419.7" y="1054.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.85%)</title><rect x="426.8" y="1027.0" width="10.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="429.8" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.85%)</title><rect x="426.8" y="1011.0" width="10.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="429.8" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.85%)</title><rect x="426.8" y="995.0" width="10.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="429.8" y="1006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.43%)</title><rect x="436.8" y="1027.0" width="5.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="439.8" y="1038.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 3.40%)</title><rect x="441.8" y="1123.0" width="40.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="444.8" y="1134.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 3.40%)</title><rect x="441.8" y="1107.0" width="40.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="444.8" y="1118.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.28%)</title><rect x="441.8" y="1091.0" width="15.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="444.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.28%)</title><rect x="441.8" y="1075.0" width="15.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="444.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 1.28%)</title><rect x="441.8" y="1059.0" width="15.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="444.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 1.28%)</title><rect x="441.8" y="1043.0" width="15.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="444.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.85%)</title><rect x="446.9" y="1027.0" width="10.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="449.9" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.85%)</title><rect x="446.9" y="1011.0" width="10.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="449.9" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 2.13%)</title><rect x="456.9" y="1091.0" width="25.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="459.9" y="1102.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.28%)</title><rect x="466.9" y="1075.0" width="15.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="469.9" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.43%)</title><rect x="477.0" y="1059.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="480.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.43%)</title><rect x="477.0" y="1043.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="480.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (45 samples, 19.15%)</title><rect x="482.0" y="1155.0" width="226.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="485.0" y="1166.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (45 samples, 19.15%)</title><rect x="482.0" y="1139.0" width="226.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="485.0" y="1150.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/703875274.process (36 samples, 15.32%)</title><rect x="497.1" y="1123.0" width="180.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="500.1" y="1134.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (36 samples, 15.32%)</title><rect x="497.1" y="1107.0" width="180.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="500.1" y="1118.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (36 samples, 15.32%)</title><rect x="497.1" y="1091.0" width="180.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="500.1" y="1102.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (34 samples, 14.47%)</title><rect x="502.1" y="1075.0" width="170.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="505.1" y="1086.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>java/lang/Thread.sleep (33 samples, 14.04%)</title><rect x="502.1" y="1059.0" width="165.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="505.1" y="1070.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (25 samples, 10.64%)</title><rect x="517.1" y="1043.0" width="125.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="520.1" y="1054.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.85%)</title><rect x="532.2" y="1027.0" width="10.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="535.2" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.28%)</title><rect x="542.3" y="1027.0" width="15.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="545.3" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.43%)</title><rect x="552.3" y="1011.0" width="5.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="555.3" y="1022.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.43%)</title><rect x="557.3" y="1027.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="560.3" y="1038.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (16 samples, 6.81%)</title><rect x="562.3" y="1027.0" width="80.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="565.3" y="1038.0">os::sleep..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.43%)</title><rect x="582.4" y="1011.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="585.4" y="1022.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.43%)</title><rect x="582.4" y="995.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="585.4" y="1006.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.85%)</title><rect x="587.4" y="1011.0" width="10.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="590.4" y="1022.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (5 samples, 2.13%)</title><rect x="597.5" y="1011.0" width="25.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="600.5" y="1022.0">_..</text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.43%)</title><rect x="622.6" y="1011.0" width="5.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="625.6" y="1022.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 1.28%)</title><rect x="627.6" y="1011.0" width="15.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="630.6" y="1022.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.43%)</title><rect x="642.7" y="1043.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="645.7" y="1054.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 1.28%)</title><rect x="647.7" y="1043.0" width="15.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="650.7" y="1054.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (1 samples, 0.43%)</title><rect x="662.8" y="1043.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="665.8" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.43%)</title><rect x="667.8" y="1059.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="670.8" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.43%)</title><rect x="667.8" y="1043.0" width="5.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="670.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.43%)</title><rect x="672.8" y="1075.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="675.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.43%)</title><rect x="677.8" y="1123.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="680.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.43%)</title><rect x="677.8" y="1107.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="680.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/879895114.get$Lambda (1 samples, 0.43%)</title><rect x="677.8" y="1091.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="680.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/879895114.&lt;init&gt; (1 samples, 0.43%)</title><rect x="677.8" y="1075.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="680.8" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 1.28%)</title><rect x="682.9" y="1123.0" width="15.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="685.9" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 1.28%)</title><rect x="682.9" y="1107.0" width="15.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="685.9" y="1118.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.43%)</title><rect x="682.9" y="1091.0" width="5.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="685.9" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.85%)</title><rect x="687.9" y="1091.0" width="10.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="690.9" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.85%)</title><rect x="697.9" y="1123.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="700.9" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.85%)</title><rect x="697.9" y="1107.0" width="10.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="700.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 4.68%)</title><rect x="708.0" y="1155.0" width="55.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="711.0" y="1166.0">java/..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.85%)</title><rect x="733.1" y="1139.0" width="10.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="736.1" y="1150.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.85%)</title><rect x="733.1" y="1123.0" width="10.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="736.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.28%)</title><rect x="743.1" y="1139.0" width="15.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="746.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.28%)</title><rect x="743.1" y="1123.0" width="15.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="746.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/1018258027.accept (3 samples, 1.28%)</title><rect x="743.1" y="1107.0" width="15.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="746.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (3 samples, 1.28%)</title><rect x="743.1" y="1091.0" width="15.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="746.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.43%)</title><rect x="743.1" y="1075.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="746.1" y="1086.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.43%)</title><rect x="743.1" y="1059.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="746.1" y="1070.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.43%)</title><rect x="743.1" y="1043.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="746.1" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.43%)</title><rect x="743.1" y="1027.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="746.1" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.43%)</title><rect x="743.1" y="1011.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="746.1" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.43%)</title><rect x="743.1" y="995.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="746.1" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.43%)</title><rect x="743.1" y="979.0" width="5.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="746.1" y="990.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.43%)</title><rect x="743.1" y="963.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="746.1" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.85%)</title><rect x="748.1" y="1075.0" width="10.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="751.1" y="1086.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (2 samples, 0.85%)</title><rect x="748.1" y="1059.0" width="10.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="751.1" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.43%)</title><rect x="758.2" y="1139.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="761.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.55%)</title><rect x="763.2" y="1171.0" width="30.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="766.2" y="1182.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.70%)</title><rect x="773.2" y="1155.0" width="20.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="776.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.70%)</title><rect x="773.2" y="1139.0" width="20.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="776.2" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/1474717765.accept (4 samples, 1.70%)</title><rect x="773.2" y="1123.0" width="20.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="776.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (4 samples, 1.70%)</title><rect x="773.2" y="1107.0" width="20.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="776.2" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/741815089.complete (4 samples, 1.70%)</title><rect x="773.2" y="1091.0" width="20.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="776.2" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (4 samples, 1.70%)</title><rect x="773.2" y="1075.0" width="20.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="776.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (4 samples, 1.70%)</title><rect x="773.2" y="1059.0" width="20.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="776.2" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 1.70%)</title><rect x="773.2" y="1043.0" width="20.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="776.2" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 1.70%)</title><rect x="773.2" y="1027.0" width="20.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="776.2" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 1.70%)</title><rect x="773.2" y="1011.0" width="20.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="776.2" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 1.70%)</title><rect x="773.2" y="995.0" width="20.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="776.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 0.85%)</title><rect x="793.3" y="1187.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="796.3" y="1198.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.43%)</title><rect x="798.3" y="1171.0" width="5.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="801.3" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.43%)</title><rect x="798.3" y="1155.0" width="5.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="801.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 2.13%)</title><rect x="803.4" y="1235.0" width="25.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="806.4" y="1246.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 1.70%)</title><rect x="808.4" y="1219.0" width="20.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="811.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.43%)</title><rect x="808.4" y="1203.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="811.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.43%)</title><rect x="808.4" y="1187.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="811.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.43%)</title><rect x="808.4" y="1171.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="811.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.43%)</title><rect x="808.4" y="1155.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="811.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.43%)</title><rect x="808.4" y="1139.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="811.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.28%)</title><rect x="813.4" y="1203.0" width="15.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="816.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.28%)</title><rect x="813.4" y="1187.0" width="15.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="816.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.28%)</title><rect x="813.4" y="1171.0" width="15.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="816.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.28%)</title><rect x="813.4" y="1155.0" width="15.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="816.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.85%)</title><rect x="828.5" y="1283.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="831.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.access$500 (1 samples, 0.43%)</title><rect x="828.5" y="1267.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="831.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.43%)</title><rect x="833.5" y="1267.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="836.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.43%)</title><rect x="833.5" y="1251.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="836.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.43%)</title><rect x="833.5" y="1235.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="836.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.43%)</title><rect x="833.5" y="1219.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="836.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.43%)</title><rect x="833.5" y="1203.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="836.5" y="1214.0"></text>
</g>
<g>
<title>start_thread (70 samples, 29.79%)</title><rect x="838.5" y="1283.0" width="351.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="841.5" y="1294.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (70 samples, 29.79%)</title><rect x="838.5" y="1267.0" width="351.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="841.5" y="1278.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (16 samples, 6.81%)</title><rect x="838.5" y="1251.0" width="80.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="841.5" y="1262.0">GangWorke..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 6.81%)</title><rect x="838.5" y="1235.0" width="80.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="841.5" y="1246.0">G1ParTask..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 3.40%)</title><rect x="838.5" y="1219.0" width="40.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="841.5" y="1230.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 3.40%)</title><rect x="838.5" y="1203.0" width="40.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="841.5" y="1214.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.43%)</title><rect x="848.6" y="1187.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="851.6" y="1198.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (5 samples, 2.13%)</title><rect x="853.6" y="1187.0" width="25.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="856.6" y="1198.0">_..</text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 2.55%)</title><rect x="878.7" y="1219.0" width="30.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="881.7" y="1230.0">G1..</text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.43%)</title><rect x="878.7" y="1203.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="881.7" y="1214.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.43%)</title><rect x="878.7" y="1187.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="881.7" y="1198.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.43%)</title><rect x="878.7" y="1171.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="881.7" y="1182.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.43%)</title><rect x="878.7" y="1155.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="881.7" y="1166.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 2.13%)</title><rect x="883.7" y="1203.0" width="25.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="886.7" y="1214.0">G..</text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 1.70%)</title><rect x="883.7" y="1187.0" width="20.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="886.7" y="1198.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.43%)</title><rect x="903.8" y="1187.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="906.8" y="1198.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.43%)</title><rect x="903.8" y="1171.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="906.8" y="1182.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.85%)</title><rect x="908.8" y="1219.0" width="10.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="911.8" y="1230.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.85%)</title><rect x="908.8" y="1203.0" width="10.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="911.8" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (2 samples, 0.85%)</title><rect x="908.8" y="1187.0" width="10.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="911.8" y="1198.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.85%)</title><rect x="908.8" y="1171.0" width="10.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="911.8" y="1182.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.85%)</title><rect x="908.8" y="1155.0" width="10.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="911.8" y="1166.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.85%)</title><rect x="908.8" y="1139.0" width="10.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="911.8" y="1150.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.85%)</title><rect x="908.8" y="1123.0" width="10.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="911.8" y="1134.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.43%)</title><rect x="908.8" y="1107.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="911.8" y="1118.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.43%)</title><rect x="913.8" y="1107.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="916.8" y="1118.0"></text>
</g>
<g>
<title>G1ParPushHeapRSClosure::do_oop(unsigned int*) (1 samples, 0.43%)</title><rect x="913.8" y="1091.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="916.8" y="1102.0"></text>
</g>
<g>
<title>JavaThread::run() (54 samples, 22.98%)</title><rect x="918.9" y="1251.0" width="271.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="921.9" y="1262.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (54 samples, 22.98%)</title><rect x="918.9" y="1235.0" width="271.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="921.9" y="1246.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (54 samples, 22.98%)</title><rect x="918.9" y="1219.0" width="271.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="921.9" y="1230.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (54 samples, 22.98%)</title><rect x="918.9" y="1203.0" width="271.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="921.9" y="1214.0">CompileBroker::invoke_compiler_on_me..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (51 samples, 21.70%)</title><rect x="918.9" y="1187.0" width="256.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="921.9" y="1198.0">C2Compiler::compile_method(ciEnv*,..</text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.43%)</title><rect x="918.9" y="1171.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="921.9" y="1182.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.43%)</title><rect x="918.9" y="1155.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="921.9" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.43%)</title><rect x="918.9" y="1139.0" width="5.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="921.9" y="1150.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (50 samples, 21.28%)</title><rect x="923.9" y="1171.0" width="251.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="926.9" y="1182.0">Compile::Compile(ciEnv*, C2Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (28 samples, 11.91%)</title><rect x="923.9" y="1155.0" width="140.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="926.9" y="1166.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.43%)</title><rect x="923.9" y="1139.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="926.9" y="1150.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.43%)</title><rect x="923.9" y="1123.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="926.9" y="1134.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.43%)</title><rect x="923.9" y="1107.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="926.9" y="1118.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.43%)</title><rect x="923.9" y="1091.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="926.9" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.43%)</title><rect x="928.9" y="1139.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="931.9" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.43%)</title><rect x="928.9" y="1123.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="931.9" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (26 samples, 11.06%)</title><rect x="933.9" y="1139.0" width="130.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="936.9" y="1150.0">PhaseChaitin::Re..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.43%)</title><rect x="933.9" y="1123.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="936.9" y="1134.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.43%)</title><rect x="938.9" y="1123.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="941.9" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.43%)</title><rect x="944.0" y="1123.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="947.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.43%)</title><rect x="944.0" y="1107.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="947.0" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.43%)</title><rect x="944.0" y="1091.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="947.0" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.28%)</title><rect x="949.0" y="1123.0" width="15.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="952.0" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.85%)</title><rect x="964.0" y="1123.0" width="10.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="967.0" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.43%)</title><rect x="964.0" y="1107.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="967.0" y="1118.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.43%)</title><rect x="964.0" y="1091.0" width="5.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="967.0" y="1102.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.43%)</title><rect x="969.1" y="1107.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="972.1" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 2.13%)</title><rect x="974.1" y="1123.0" width="25.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="977.1" y="1134.0">P..</text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.43%)</title><rect x="989.1" y="1107.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="992.1" y="1118.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.43%)</title><rect x="994.2" y="1107.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="997.2" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.43%)</title><rect x="999.2" y="1123.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1002.2" y="1134.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.43%)</title><rect x="999.2" y="1107.0" width="5.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1002.2" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.43%)</title><rect x="1004.2" y="1123.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1007.2" y="1134.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.43%)</title><rect x="1004.2" y="1107.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1007.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 1.28%)</title><rect x="1009.2" y="1123.0" width="15.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1012.2" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.85%)</title><rect x="1014.3" y="1107.0" width="10.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1017.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 1.28%)</title><rect x="1024.3" y="1123.0" width="15.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1027.3" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.85%)</title><rect x="1029.3" y="1107.0" width="10.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1032.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.43%)</title><rect x="1039.4" y="1123.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1042.4" y="1134.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.43%)</title><rect x="1039.4" y="1107.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1042.4" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.70%)</title><rect x="1044.4" y="1123.0" width="20.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1047.4" y="1134.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.43%)</title><rect x="1049.4" y="1107.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1052.4" y="1118.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.43%)</title><rect x="1054.4" y="1107.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1057.4" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.43%)</title><rect x="1059.4" y="1107.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1062.4" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.43%)</title><rect x="1059.4" y="1091.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1062.4" y="1102.0"></text>
</g>
<g>
<title>Compile::Init(int) (1 samples, 0.43%)</title><rect x="1064.5" y="1155.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1067.5" y="1166.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.43%)</title><rect x="1064.5" y="1139.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1067.5" y="1150.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.43%)</title><rect x="1064.5" y="1123.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1067.5" y="1134.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.43%)</title><rect x="1064.5" y="1107.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1067.5" y="1118.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.43%)</title><rect x="1064.5" y="1091.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1067.5" y="1102.0"></text>
</g>
<g>
<title>Compile::Optimize() (16 samples, 6.81%)</title><rect x="1069.5" y="1155.0" width="80.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1072.5" y="1166.0">Compile::..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.43%)</title><rect x="1069.5" y="1139.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1072.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.43%)</title><rect x="1069.5" y="1123.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1072.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.43%)</title><rect x="1069.5" y="1107.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1072.5" y="1118.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.43%)</title><rect x="1069.5" y="1091.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1072.5" y="1102.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.43%)</title><rect x="1069.5" y="1075.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1072.5" y="1086.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.43%)</title><rect x="1069.5" y="1059.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1072.5" y="1070.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.43%)</title><rect x="1069.5" y="1043.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1072.5" y="1054.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.43%)</title><rect x="1069.5" y="1027.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1072.5" y="1038.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.43%)</title><rect x="1069.5" y="1011.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1072.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (12 samples, 5.11%)</title><rect x="1074.5" y="1139.0" width="60.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1077.5" y="1150.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.85%)</title><rect x="1074.5" y="1123.0" width="10.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1077.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.43%)</title><rect x="1084.6" y="1123.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1087.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 2.98%)</title><rect x="1089.6" y="1123.0" width="35.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.6" y="1134.0">Pha..</text>
</g>
<g>
<title>LoadKlassNode::Opcode() const (1 samples, 0.43%)</title><rect x="1094.6" y="1107.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 2.13%)</title><rect x="1099.6" y="1107.0" width="25.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1102.6" y="1118.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (5 samples, 2.13%)</title><rect x="1099.6" y="1091.0" width="25.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1102.6" y="1102.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.43%)</title><rect x="1119.7" y="1075.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.43%)</title><rect x="1119.7" y="1059.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.7" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.43%)</title><rect x="1119.7" y="1043.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.85%)</title><rect x="1124.7" y="1123.0" width="10.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.7" y="1134.0"></text>
</g>
<g>
<title>IfFalseNode::Opcode() const (1 samples, 0.43%)</title><rect x="1129.7" y="1107.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.28%)</title><rect x="1134.8" y="1139.0" width="15.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.28%)</title><rect x="1134.8" y="1123.0" width="15.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.8" y="1134.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.43%)</title><rect x="1139.8" y="1107.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.8" y="1118.0"></text>
</g>
<g>
<title>ConINode::ConINode(TypeInt const*) (1 samples, 0.43%)</title><rect x="1139.8" y="1091.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.8" y="1102.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.43%)</title><rect x="1139.8" y="1075.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.8" y="1086.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.43%)</title><rect x="1144.8" y="1107.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.8" y="1118.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.43%)</title><rect x="1144.8" y="1091.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.8" y="1102.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.43%)</title><rect x="1144.8" y="1075.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.8" y="1086.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.43%)</title><rect x="1144.8" y="1059.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.8" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.13%)</title><rect x="1149.8" y="1155.0" width="25.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.8" y="1166.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.13%)</title><rect x="1149.8" y="1139.0" width="25.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.8" y="1150.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.13%)</title><rect x="1149.8" y="1123.0" width="25.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.8" y="1134.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.13%)</title><rect x="1149.8" y="1107.0" width="25.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.8" y="1118.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.13%)</title><rect x="1149.8" y="1091.0" width="25.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.8" y="1102.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.13%)</title><rect x="1149.8" y="1075.0" width="25.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.8" y="1086.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.43%)</title><rect x="1149.8" y="1059.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.8" y="1070.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.43%)</title><rect x="1149.8" y="1043.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.8" y="1054.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.43%)</title><rect x="1149.8" y="1027.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.8" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.43%)</title><rect x="1149.8" y="1011.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.8" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.43%)</title><rect x="1149.8" y="995.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.8" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.43%)</title><rect x="1149.8" y="979.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.8" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.43%)</title><rect x="1149.8" y="963.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.8" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.43%)</title><rect x="1149.8" y="947.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.8" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.43%)</title><rect x="1149.8" y="931.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.8" y="942.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.43%)</title><rect x="1149.8" y="915.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.8" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.43%)</title><rect x="1149.8" y="899.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.8" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.43%)</title><rect x="1149.8" y="883.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.8" y="894.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.43%)</title><rect x="1149.8" y="867.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.8" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.43%)</title><rect x="1149.8" y="851.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.8" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.43%)</title><rect x="1149.8" y="835.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.8" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.43%)</title><rect x="1149.8" y="819.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.8" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.43%)</title><rect x="1149.8" y="803.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.8" y="814.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.43%)</title><rect x="1149.8" y="787.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.8" y="798.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.43%)</title><rect x="1149.8" y="771.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.8" y="782.0"></text>
</g>
<g>
<title>Klass::subklass() const (1 samples, 0.43%)</title><rect x="1149.8" y="755.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.8" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.70%)</title><rect x="1154.9" y="1059.0" width="20.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.9" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.70%)</title><rect x="1154.9" y="1043.0" width="20.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.9" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.70%)</title><rect x="1154.9" y="1027.0" width="20.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.9" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.70%)</title><rect x="1154.9" y="1011.0" width="20.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.70%)</title><rect x="1154.9" y="995.0" width="20.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.70%)</title><rect x="1154.9" y="979.0" width="20.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.9" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.70%)</title><rect x="1154.9" y="963.0" width="20.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.9" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.70%)</title><rect x="1154.9" y="947.0" width="20.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.70%)</title><rect x="1154.9" y="931.0" width="20.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.70%)</title><rect x="1154.9" y="915.0" width="20.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.70%)</title><rect x="1154.9" y="899.0" width="20.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.70%)</title><rect x="1154.9" y="883.0" width="20.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.9" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.70%)</title><rect x="1154.9" y="867.0" width="20.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.9" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.70%)</title><rect x="1154.9" y="851.0" width="20.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.70%)</title><rect x="1154.9" y="835.0" width="20.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.70%)</title><rect x="1154.9" y="819.0" width="20.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.70%)</title><rect x="1154.9" y="803.0" width="20.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.70%)</title><rect x="1154.9" y="787.0" width="20.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.9" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.70%)</title><rect x="1154.9" y="771.0" width="20.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.9" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.70%)</title><rect x="1154.9" y="755.0" width="20.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.70%)</title><rect x="1154.9" y="739.0" width="20.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.70%)</title><rect x="1154.9" y="723.0" width="20.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.70%)</title><rect x="1154.9" y="707.0" width="20.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.85%)</title><rect x="1154.9" y="691.0" width="10.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.9" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.85%)</title><rect x="1154.9" y="675.0" width="10.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.9" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.85%)</title><rect x="1154.9" y="659.0" width="10.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.85%)</title><rect x="1154.9" y="643.0" width="10.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.85%)</title><rect x="1154.9" y="627.0" width="10.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.85%)</title><rect x="1154.9" y="611.0" width="10.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.85%)</title><rect x="1154.9" y="595.0" width="10.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.9" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.85%)</title><rect x="1154.9" y="579.0" width="10.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.9" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.85%)</title><rect x="1154.9" y="563.0" width="10.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.85%)</title><rect x="1154.9" y="547.0" width="10.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.85%)</title><rect x="1154.9" y="531.0" width="10.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.85%)</title><rect x="1154.9" y="515.0" width="10.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.85%)</title><rect x="1154.9" y="499.0" width="10.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.9" y="510.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.43%)</title><rect x="1154.9" y="483.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.9" y="494.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.43%)</title><rect x="1154.9" y="467.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.9" y="478.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.43%)</title><rect x="1154.9" y="451.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.9" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.43%)</title><rect x="1159.9" y="483.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.9" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.43%)</title><rect x="1159.9" y="467.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.43%)</title><rect x="1159.9" y="451.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.43%)</title><rect x="1159.9" y="435.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.43%)</title><rect x="1159.9" y="419.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.43%)</title><rect x="1159.9" y="403.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.9" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.43%)</title><rect x="1159.9" y="387.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.9" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.43%)</title><rect x="1159.9" y="371.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.43%)</title><rect x="1159.9" y="355.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.43%)</title><rect x="1159.9" y="339.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.43%)</title><rect x="1159.9" y="323.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.43%)</title><rect x="1159.9" y="307.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.9" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.43%)</title><rect x="1159.9" y="291.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.9" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.43%)</title><rect x="1159.9" y="275.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.43%)</title><rect x="1159.9" y="259.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.43%)</title><rect x="1159.9" y="243.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.43%)</title><rect x="1159.9" y="227.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.43%)</title><rect x="1159.9" y="211.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.43%)</title><rect x="1159.9" y="195.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.9" y="206.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.43%)</title><rect x="1159.9" y="179.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.9" y="190.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.43%)</title><rect x="1159.9" y="163.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.9" y="174.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.43%)</title><rect x="1159.9" y="147.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.9" y="158.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.43%)</title><rect x="1159.9" y="131.0" width="5.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.9" y="142.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.43%)</title><rect x="1159.9" y="115.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.9" y="126.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.43%)</title><rect x="1159.9" y="99.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.9" y="110.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.43%)</title><rect x="1159.9" y="83.0" width="5.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.9" y="94.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.43%)</title><rect x="1159.9" y="67.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.9" y="78.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.43%)</title><rect x="1159.9" y="51.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.9" y="62.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.43%)</title><rect x="1159.9" y="35.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.9" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.85%)</title><rect x="1164.9" y="691.0" width="10.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (2 samples, 0.85%)</title><rect x="1164.9" y="675.0" width="10.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.9" y="686.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.43%)</title><rect x="1164.9" y="659.0" width="5.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.9" y="670.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.43%)</title><rect x="1164.9" y="643.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.9" y="654.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.43%)</title><rect x="1164.9" y="627.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.9" y="638.0"></text>
</g>
<g>
<title>IdealKit::store(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.43%)</title><rect x="1164.9" y="611.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.9" y="622.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.43%)</title><rect x="1164.9" y="595.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.9" y="606.0"></text>
</g>
<g>
<title>StoreNode::StoreNode(Node*, Node*, Node*, TypePtr const*, Node*, MemNode::MemOrd) (1 samples, 0.43%)</title><rect x="1164.9" y="579.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.9" y="590.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.43%)</title><rect x="1164.9" y="563.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.9" y="574.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.43%)</title><rect x="1169.9" y="659.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.9" y="670.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.43%)</title><rect x="1169.9" y="643.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.9" y="654.0"></text>
</g>
<g>
<title>StoreNode::StoreNode(Node*, Node*, Node*, TypePtr const*, Node*, MemNode::MemOrd) (1 samples, 0.43%)</title><rect x="1169.9" y="627.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.9" y="638.0"></text>
</g>
<g>
<title>_init (1 samples, 0.43%)</title><rect x="1169.9" y="611.0" width="5.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1172.9" y="622.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.28%)</title><rect x="1174.9" y="1187.0" width="15.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.9" y="1198.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.28%)</title><rect x="1174.9" y="1171.0" width="15.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.9" y="1182.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.28%)</title><rect x="1174.9" y="1155.0" width="15.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.9" y="1166.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.85%)</title><rect x="1174.9" y="1139.0" width="10.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.9" y="1150.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.43%)</title><rect x="1174.9" y="1123.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.9" y="1134.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.43%)</title><rect x="1174.9" y="1107.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.9" y="1118.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.43%)</title><rect x="1174.9" y="1091.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.9" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.43%)</title><rect x="1174.9" y="1075.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.9" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::eliminate_redundant_phis(BlockBegin*) (1 samples, 0.43%)</title><rect x="1174.9" y="1059.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.9" y="1070.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.43%)</title><rect x="1174.9" y="1043.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.9" y="1054.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.43%)</title><rect x="1174.9" y="1027.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.9" y="1038.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.43%)</title><rect x="1180.0" y="1123.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.0" y="1134.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.43%)</title><rect x="1180.0" y="1107.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.0" y="1118.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.43%)</title><rect x="1180.0" y="1091.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.0" y="1102.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.43%)</title><rect x="1180.0" y="1075.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.0" y="1086.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.43%)</title><rect x="1180.0" y="1059.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.0" y="1070.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.43%)</title><rect x="1185.0" y="1139.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.0" y="1150.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.43%)</title><rect x="1185.0" y="1123.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.0" y="1134.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.43%)</title><rect x="1185.0" y="1107.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.0" y="1118.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.43%)</title><rect x="1185.0" y="1091.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.0" y="1102.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (1 samples, 0.43%)</title><rect x="1185.0" y="1075.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.0" y="1086.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.43%)</title><rect x="1185.0" y="1059.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.0" y="1070.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.43%)</title><rect x="1185.0" y="1043.0" width="5.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1188.0" y="1054.0"></text>
</g>
</g>
</svg>
