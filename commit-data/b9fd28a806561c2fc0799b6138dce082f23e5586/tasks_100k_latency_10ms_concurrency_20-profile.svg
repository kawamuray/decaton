<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="901"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="901"> </text>
<g id="frames">
<g>
<title>all (225 samples, 100.00%)</title><rect x="10.0" y="867.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="878.0">all</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.44%)</title><rect x="10.0" y="851.0" width="5.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.44%)</title><rect x="10.0" y="835.0" width="5.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (21 samples, 9.33%)</title><rect x="15.2" y="851.0" width="110.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.2" y="862.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (21 samples, 9.33%)</title><rect x="15.2" y="835.0" width="110.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.2" y="846.0">com/linecorp/..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (9 samples, 4.00%)</title><rect x="15.2" y="819.0" width="47.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.2" y="830.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/184142115.accept (8 samples, 3.56%)</title><rect x="20.5" y="803.0" width="41.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.5" y="814.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (8 samples, 3.56%)</title><rect x="20.5" y="787.0" width="41.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.5" y="798.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (5 samples, 2.22%)</title><rect x="20.5" y="771.0" width="26.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.5" y="782.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (5 samples, 2.22%)</title><rect x="20.5" y="755.0" width="26.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="23.5" y="766.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (5 samples, 2.22%)</title><rect x="20.5" y="739.0" width="26.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.5" y="750.0">c..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (5 samples, 2.22%)</title><rect x="20.5" y="723.0" width="26.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.5" y="734.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 2.22%)</title><rect x="20.5" y="707.0" width="26.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.5" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (5 samples, 2.22%)</title><rect x="20.5" y="691.0" width="26.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.5" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.89%)</title><rect x="31.0" y="675.0" width="10.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="34.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.89%)</title><rect x="31.0" y="659.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.89%)</title><rect x="31.0" y="643.0" width="10.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="34.0" y="654.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.89%)</title><rect x="31.0" y="627.0" width="10.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="34.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.44%)</title><rect x="41.5" y="675.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="44.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.44%)</title><rect x="41.5" y="659.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="44.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.44%)</title><rect x="41.5" y="643.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="44.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.44%)</title><rect x="41.5" y="627.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="44.5" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.44%)</title><rect x="46.7" y="771.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="49.7" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.44%)</title><rect x="46.7" y="755.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="49.7" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.44%)</title><rect x="46.7" y="739.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="49.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.89%)</title><rect x="52.0" y="771.0" width="10.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="55.0" y="782.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.89%)</title><rect x="52.0" y="755.0" width="10.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="55.0" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.44%)</title><rect x="57.2" y="739.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="60.2" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.44%)</title><rect x="57.2" y="723.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 5.33%)</title><rect x="62.4" y="819.0" width="63.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="65.4" y="830.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 5.33%)</title><rect x="62.4" y="803.0" width="63.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.4" y="814.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (11 samples, 4.89%)</title><rect x="62.4" y="787.0" width="57.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="65.4" y="798.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.78%)</title><rect x="62.4" y="771.0" width="21.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="65.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.78%)</title><rect x="62.4" y="755.0" width="21.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="65.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.89%)</title><rect x="62.4" y="739.0" width="10.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="65.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.44%)</title><rect x="62.4" y="723.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.44%)</title><rect x="62.4" y="707.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="65.4" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySet.iterator (1 samples, 0.44%)</title><rect x="62.4" y="691.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="65.4" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$EntryIterator.&lt;init&gt; (1 samples, 0.44%)</title><rect x="62.4" y="675.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="65.4" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.44%)</title><rect x="62.4" y="659.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="65.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.44%)</title><rect x="67.7" y="723.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.44%)</title><rect x="67.7" y="707.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="70.7" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.44%)</title><rect x="67.7" y="691.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="70.7" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.44%)</title><rect x="67.7" y="675.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.7" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.44%)</title><rect x="67.7" y="659.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.7" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.44%)</title><rect x="67.7" y="643.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="70.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.44%)</title><rect x="67.7" y="627.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="70.7" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.44%)</title><rect x="67.7" y="611.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$244/272602760.shouldBlock (1 samples, 0.44%)</title><rect x="72.9" y="739.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="75.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.44%)</title><rect x="72.9" y="723.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="75.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.44%)</title><rect x="72.9" y="707.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="75.9" y="718.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.44%)</title><rect x="72.9" y="691.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="75.9" y="702.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.44%)</title><rect x="72.9" y="675.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="75.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.44%)</title><rect x="78.2" y="739.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.44%)</title><rect x="78.2" y="723.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 2.22%)</title><rect x="83.4" y="771.0" width="26.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="86.4" y="782.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 2.22%)</title><rect x="83.4" y="755.0" width="26.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="86.4" y="766.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.78%)</title><rect x="83.4" y="739.0" width="21.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="86.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.78%)</title><rect x="83.4" y="723.0" width="21.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="86.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.89%)</title><rect x="83.4" y="707.0" width="10.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="86.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.89%)</title><rect x="93.9" y="707.0" width="10.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="96.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.89%)</title><rect x="93.9" y="691.0" width="10.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="96.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.44%)</title><rect x="93.9" y="675.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.9" y="686.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.44%)</title><rect x="93.9" y="659.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="96.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.44%)</title><rect x="99.2" y="675.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="102.2" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.44%)</title><rect x="99.2" y="659.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="102.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.44%)</title><rect x="104.4" y="739.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="107.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.44%)</title><rect x="104.4" y="723.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="107.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.44%)</title><rect x="104.4" y="707.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="107.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.44%)</title><rect x="104.4" y="691.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="107.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.89%)</title><rect x="109.6" y="771.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="112.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.89%)</title><rect x="109.6" y="755.0" width="10.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="112.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.44%)</title><rect x="109.6" y="739.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="112.6" y="750.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.44%)</title><rect x="109.6" y="723.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="112.6" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.44%)</title><rect x="109.6" y="707.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="112.6" y="718.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.44%)</title><rect x="109.6" y="691.0" width="5.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="112.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.44%)</title><rect x="114.9" y="739.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="117.9" y="750.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.44%)</title><rect x="114.9" y="723.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="117.9" y="734.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.44%)</title><rect x="114.9" y="707.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="117.9" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.44%)</title><rect x="114.9" y="691.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="117.9" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.44%)</title><rect x="114.9" y="675.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="117.9" y="686.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.iterator (1 samples, 0.44%)</title><rect x="114.9" y="659.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="117.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.44%)</title><rect x="120.1" y="787.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="123.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.44%)</title><rect x="120.1" y="771.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="123.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.44%)</title><rect x="120.1" y="755.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="123.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.44%)</title><rect x="120.1" y="739.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="123.1" y="750.0"></text>
</g>
<g>
<title>java/lang/Thread.run (160 samples, 71.11%)</title><rect x="125.4" y="851.0" width="839.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="128.4" y="862.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (160 samples, 71.11%)</title><rect x="125.4" y="835.0" width="839.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="128.4" y="846.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (160 samples, 71.11%)</title><rect x="125.4" y="819.0" width="839.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="128.4" y="830.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/422585383.run (150 samples, 66.67%)</title><rect x="130.6" y="803.0" width="786.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="133.6" y="814.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/422585383.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (150 samples, 66.67%)</title><rect x="130.6" y="787.0" width="786.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="133.6" y="798.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (150 samples, 66.67%)</title><rect x="130.6" y="771.0" width="786.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="133.6" y="782.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (149 samples, 66.22%)</title><rect x="130.6" y="755.0" width="781.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="133.6" y="766.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.44%)</title><rect x="141.1" y="739.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="144.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (32 samples, 14.22%)</title><rect x="146.4" y="739.0" width="167.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="149.4" y="750.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (32 samples, 14.22%)</title><rect x="146.4" y="723.0" width="167.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="149.4" y="734.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (32 samples, 14.22%)</title><rect x="146.4" y="707.0" width="167.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.4" y="718.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (31 samples, 13.78%)</title><rect x="146.4" y="691.0" width="162.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="149.4" y="702.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (31 samples, 13.78%)</title><rect x="146.4" y="675.0" width="162.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="149.4" y="686.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (31 samples, 13.78%)</title><rect x="146.4" y="659.0" width="162.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="149.4" y="670.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (3 samples, 1.33%)</title><rect x="172.6" y="643.0" width="15.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="175.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.44%)</title><rect x="172.6" y="627.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="175.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.44%)</title><rect x="172.6" y="611.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="175.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.44%)</title><rect x="172.6" y="595.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.6" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.44%)</title><rect x="172.6" y="579.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="175.6" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.44%)</title><rect x="172.6" y="563.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="175.6" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.44%)</title><rect x="172.6" y="547.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="175.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 0.89%)</title><rect x="177.8" y="627.0" width="10.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="180.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.89%)</title><rect x="177.8" y="611.0" width="10.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="180.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.89%)</title><rect x="177.8" y="595.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="180.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.89%)</title><rect x="177.8" y="579.0" width="10.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="180.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (21 samples, 9.33%)</title><rect x="188.3" y="643.0" width="110.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="191.3" y="654.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 1.33%)</title><rect x="188.3" y="627.0" width="15.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="191.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (3 samples, 1.33%)</title><rect x="188.3" y="611.0" width="15.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="191.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.89%)</title><rect x="188.3" y="595.0" width="10.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="191.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.89%)</title><rect x="188.3" y="579.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="191.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.44%)</title><rect x="198.8" y="595.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="201.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.89%)</title><rect x="204.0" y="627.0" width="10.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="207.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.89%)</title><rect x="204.0" y="611.0" width="10.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="207.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (5 samples, 2.22%)</title><rect x="214.5" y="627.0" width="26.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="217.5" y="638.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.78%)</title><rect x="219.8" y="611.0" width="21.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="222.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.89%)</title><rect x="225.0" y="595.0" width="10.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="228.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.89%)</title><rect x="225.0" y="579.0" width="10.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="228.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.44%)</title><rect x="230.3" y="563.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.44%)</title><rect x="235.5" y="595.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.44%)</title><rect x="240.8" y="627.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="243.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.44%)</title><rect x="240.8" y="611.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="243.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.44%)</title><rect x="240.8" y="595.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="243.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (10 samples, 4.44%)</title><rect x="246.0" y="627.0" width="52.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.0" y="638.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 2.22%)</title><rect x="246.0" y="611.0" width="26.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="249.0" y="622.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.44%)</title><rect x="261.7" y="595.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="264.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.44%)</title><rect x="261.7" y="579.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.44%)</title><rect x="267.0" y="595.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="270.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 2.22%)</title><rect x="272.2" y="611.0" width="26.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="275.2" y="622.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 1.78%)</title><rect x="277.5" y="595.0" width="20.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="280.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 1.78%)</title><rect x="277.5" y="579.0" width="20.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="280.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.33%)</title><rect x="277.5" y="563.0" width="15.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.89%)</title><rect x="282.7" y="547.0" width="10.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="285.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.89%)</title><rect x="282.7" y="531.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="285.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.44%)</title><rect x="288.0" y="515.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.44%)</title><rect x="293.2" y="563.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.44%)</title><rect x="293.2" y="547.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="296.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.44%)</title><rect x="293.2" y="531.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="296.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.44%)</title><rect x="293.2" y="515.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="296.2" y="526.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.44%)</title><rect x="293.2" y="499.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="296.2" y="510.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.44%)</title><rect x="293.2" y="483.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.2" y="494.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor19.newInstance (1 samples, 0.44%)</title><rect x="293.2" y="467.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="296.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.89%)</title><rect x="298.4" y="643.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="301.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.89%)</title><rect x="298.4" y="627.0" width="10.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.89%)</title><rect x="298.4" y="611.0" width="10.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (1 samples, 0.44%)</title><rect x="298.4" y="595.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.44%)</title><rect x="303.7" y="595.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.44%)</title><rect x="303.7" y="579.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="306.7" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.44%)</title><rect x="308.9" y="691.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="311.9" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.44%)</title><rect x="308.9" y="675.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="311.9" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (106 samples, 47.11%)</title><rect x="314.2" y="739.0" width="555.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.2" y="750.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (14 samples, 6.22%)</title><rect x="314.2" y="723.0" width="73.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.2" y="734.0">com/line..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (12 samples, 5.33%)</title><rect x="324.7" y="707.0" width="62.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="327.7" y="718.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (10 samples, 4.44%)</title><rect x="335.2" y="691.0" width="52.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="338.2" y="702.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.33%)</title><rect x="345.6" y="675.0" width="15.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="348.6" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.33%)</title><rect x="345.6" y="659.0" width="15.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="348.6" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.89%)</title><rect x="350.9" y="643.0" width="10.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="353.9" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.89%)</title><rect x="350.9" y="627.0" width="10.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="353.9" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.89%)</title><rect x="350.9" y="611.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="353.9" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (5 samples, 2.22%)</title><rect x="361.4" y="675.0" width="26.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="364.4" y="686.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (5 samples, 2.22%)</title><rect x="361.4" y="659.0" width="26.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="364.4" y="670.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.44%)</title><rect x="361.4" y="643.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="364.4" y="654.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.44%)</title><rect x="361.4" y="627.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="364.4" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 1.78%)</title><rect x="366.6" y="643.0" width="21.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="369.6" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.44%)</title><rect x="387.6" y="723.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="390.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.44%)</title><rect x="387.6" y="707.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="390.6" y="718.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.44%)</title><rect x="387.6" y="691.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="390.6" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (31 samples, 13.78%)</title><rect x="392.8" y="723.0" width="162.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="395.8" y="734.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.89%)</title><rect x="392.8" y="707.0" width="10.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="395.8" y="718.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.89%)</title><rect x="392.8" y="691.0" width="10.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="395.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (28 samples, 12.44%)</title><rect x="403.3" y="707.0" width="146.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="406.3" y="718.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (12 samples, 5.33%)</title><rect x="419.1" y="691.0" width="62.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="422.1" y="702.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (12 samples, 5.33%)</title><rect x="419.1" y="675.0" width="62.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="422.1" y="686.0">java/l..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (12 samples, 5.33%)</title><rect x="419.1" y="659.0" width="62.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="422.1" y="670.0">java/l..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.78%)</title><rect x="419.1" y="643.0" width="20.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="422.1" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 1.78%)</title><rect x="419.1" y="627.0" width="20.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="422.1" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.78%)</title><rect x="419.1" y="611.0" width="20.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="422.1" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.44%)</title><rect x="429.6" y="595.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="432.6" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.44%)</title><rect x="429.6" y="579.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="432.6" y="590.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.44%)</title><rect x="429.6" y="563.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="432.6" y="574.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.44%)</title><rect x="429.6" y="547.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="432.6" y="558.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.44%)</title><rect x="429.6" y="531.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="432.6" y="542.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.44%)</title><rect x="434.8" y="595.0" width="5.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="437.8" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 3.56%)</title><rect x="440.0" y="643.0" width="42.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="443.0" y="654.0">jav..</text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.44%)</title><rect x="476.8" y="627.0" width="5.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="479.8" y="638.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.89%)</title><rect x="482.0" y="691.0" width="10.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="485.0" y="702.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.44%)</title><rect x="482.0" y="675.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="485.0" y="686.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.44%)</title><rect x="482.0" y="659.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="485.0" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.44%)</title><rect x="487.2" y="675.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="490.2" y="686.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.44%)</title><rect x="487.2" y="659.0" width="5.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="490.2" y="670.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.44%)</title><rect x="492.5" y="691.0" width="5.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="495.5" y="702.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (10 samples, 4.44%)</title><rect x="497.7" y="691.0" width="52.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="500.7" y="702.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (10 samples, 4.44%)</title><rect x="497.7" y="675.0" width="52.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="500.7" y="686.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.33%)</title><rect x="497.7" y="659.0" width="15.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="500.7" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.33%)</title><rect x="497.7" y="643.0" width="15.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="500.7" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.33%)</title><rect x="513.5" y="659.0" width="15.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="516.5" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 1.33%)</title><rect x="513.5" y="643.0" width="15.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="516.5" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 1.33%)</title><rect x="513.5" y="627.0" width="15.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="516.5" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 1.33%)</title><rect x="513.5" y="611.0" width="15.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="516.5" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 1.78%)</title><rect x="529.2" y="659.0" width="21.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="532.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 1.78%)</title><rect x="529.2" y="643.0" width="21.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="532.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 1.78%)</title><rect x="529.2" y="627.0" width="21.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="532.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.89%)</title><rect x="539.7" y="611.0" width="10.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="542.7" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.44%)</title><rect x="544.9" y="595.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="547.9" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.44%)</title><rect x="544.9" y="579.0" width="5.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="547.9" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.44%)</title><rect x="544.9" y="563.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="547.9" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.44%)</title><rect x="544.9" y="547.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="547.9" y="558.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.44%)</title><rect x="550.2" y="707.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="553.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (54 samples, 24.00%)</title><rect x="555.4" y="723.0" width="283.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="558.4" y="734.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (54 samples, 24.00%)</title><rect x="555.4" y="707.0" width="283.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="558.4" y="718.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1486259237.process (53 samples, 23.56%)</title><rect x="555.4" y="691.0" width="278.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="558.4" y="702.0">com/linecorp/decaton/benchmark/Decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (53 samples, 23.56%)</title><rect x="555.4" y="675.0" width="278.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="558.4" y="686.0">com/linecorp/decaton/benchmark/Decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (47 samples, 20.89%)</title><rect x="555.4" y="659.0" width="246.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="558.4" y="670.0">com/linecorp/decaton/benchmark/Re..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.44%)</title><rect x="560.7" y="643.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="563.7" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.44%)</title><rect x="560.7" y="627.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="563.7" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.44%)</title><rect x="560.7" y="611.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="563.7" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.44%)</title><rect x="560.7" y="595.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="563.7" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (44 samples, 19.56%)</title><rect x="565.9" y="643.0" width="230.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="568.9" y="654.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>java/lang/Thread.sleep (44 samples, 19.56%)</title><rect x="565.9" y="627.0" width="230.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="568.9" y="638.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (37 samples, 16.44%)</title><rect x="581.6" y="611.0" width="194.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="584.6" y="622.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.44%)</title><rect x="602.6" y="595.0" width="5.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="605.6" y="606.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.89%)</title><rect x="607.9" y="595.0" width="10.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="610.9" y="606.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.89%)</title><rect x="607.9" y="579.0" width="10.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="610.9" y="590.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.44%)</title><rect x="618.4" y="595.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="621.4" y="606.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (29 samples, 12.89%)</title><rect x="623.6" y="595.0" width="152.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="626.6" y="606.0">os::sleep(Thread*, ..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.44%)</title><rect x="665.6" y="579.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="668.6" y="590.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 2.67%)</title><rect x="670.8" y="579.0" width="31.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="673.8" y="590.0">__..</text>
</g>
<g>
<title>__pthread_cond_timedwait (7 samples, 3.11%)</title><rect x="702.3" y="579.0" width="36.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="705.3" y="590.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.89%)</title><rect x="739.0" y="579.0" width="10.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="742.0" y="590.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 1.33%)</title><rect x="749.5" y="579.0" width="15.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="752.5" y="590.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.44%)</title><rect x="765.2" y="579.0" width="5.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="768.2" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.44%)</title><rect x="770.4" y="579.0" width="5.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="773.4" y="590.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 1.33%)</title><rect x="775.7" y="611.0" width="15.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="778.7" y="622.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.44%)</title><rect x="791.4" y="611.0" width="5.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="794.4" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.44%)</title><rect x="796.7" y="643.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="799.7" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.44%)</title><rect x="796.7" y="627.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="799.7" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.44%)</title><rect x="796.7" y="611.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="799.7" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (6 samples, 2.67%)</title><rect x="801.9" y="659.0" width="31.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="804.9" y="670.0">co..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 2.67%)</title><rect x="801.9" y="643.0" width="31.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="804.9" y="654.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 2.67%)</title><rect x="801.9" y="627.0" width="31.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="804.9" y="638.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 2.67%)</title><rect x="801.9" y="611.0" width="31.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="804.9" y="622.0">ja..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.44%)</title><rect x="833.4" y="691.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="836.4" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.44%)</title><rect x="833.4" y="675.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="836.4" y="686.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.44%)</title><rect x="833.4" y="659.0" width="5.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="836.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.67%)</title><rect x="838.6" y="723.0" width="31.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="841.6" y="734.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 2.67%)</title><rect x="838.6" y="707.0" width="31.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="841.6" y="718.0">ja..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.44%)</title><rect x="849.1" y="691.0" width="5.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="852.1" y="702.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.44%)</title><rect x="849.1" y="675.0" width="5.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="852.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.33%)</title><rect x="854.4" y="691.0" width="15.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="857.4" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/1081404494.accept (3 samples, 1.33%)</title><rect x="854.4" y="675.0" width="15.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="857.4" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (3 samples, 1.33%)</title><rect x="854.4" y="659.0" width="15.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="857.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (3 samples, 1.33%)</title><rect x="854.4" y="643.0" width="15.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="857.4" y="654.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 1.33%)</title><rect x="854.4" y="627.0" width="15.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="857.4" y="638.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 1.33%)</title><rect x="854.4" y="611.0" width="15.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="857.4" y="622.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.44%)</title><rect x="864.8" y="595.0" width="5.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="867.8" y="606.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.44%)</title><rect x="864.8" y="579.0" width="5.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="867.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 3.56%)</title><rect x="870.1" y="739.0" width="41.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="873.1" y="750.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 3.56%)</title><rect x="870.1" y="723.0" width="41.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="873.1" y="734.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 3.11%)</title><rect x="875.3" y="707.0" width="36.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="878.3" y="718.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/1081404494.accept (7 samples, 3.11%)</title><rect x="875.3" y="691.0" width="36.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="878.3" y="702.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (7 samples, 3.11%)</title><rect x="875.3" y="675.0" width="36.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="878.3" y="686.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (7 samples, 3.11%)</title><rect x="875.3" y="659.0" width="36.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="878.3" y="670.0">com..</text>
</g>
<g>
<title>java/time/Duration.ofNanos (7 samples, 3.11%)</title><rect x="875.3" y="643.0" width="36.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="878.3" y="654.0">jav..</text>
</g>
<g>
<title>java/time/Duration.create (7 samples, 3.11%)</title><rect x="875.3" y="627.0" width="36.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="878.3" y="638.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.44%)</title><rect x="912.0" y="755.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="915.0" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.44%)</title><rect x="912.0" y="739.0" width="5.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="915.0" y="750.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.44%)</title><rect x="912.0" y="723.0" width="5.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="915.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.89%)</title><rect x="917.3" y="803.0" width="10.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="920.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.89%)</title><rect x="917.3" y="787.0" width="10.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="920.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.89%)</title><rect x="917.3" y="771.0" width="10.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="920.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.89%)</title><rect x="917.3" y="755.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="920.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (7 samples, 3.11%)</title><rect x="927.8" y="803.0" width="36.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="930.8" y="814.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (7 samples, 3.11%)</title><rect x="927.8" y="787.0" width="36.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="930.8" y="798.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (3 samples, 1.33%)</title><rect x="927.8" y="771.0" width="15.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="930.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 1.33%)</title><rect x="927.8" y="755.0" width="15.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="930.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.33%)</title><rect x="927.8" y="739.0" width="15.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="930.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.33%)</title><rect x="927.8" y="723.0" width="15.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="930.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.33%)</title><rect x="927.8" y="707.0" width="15.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="930.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.78%)</title><rect x="943.5" y="771.0" width="21.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="946.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.78%)</title><rect x="943.5" y="755.0" width="21.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="946.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.78%)</title><rect x="943.5" y="739.0" width="21.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="946.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.78%)</title><rect x="943.5" y="723.0" width="21.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="946.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.89%)</title><rect x="964.5" y="851.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="967.5" y="862.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.44%)</title><rect x="964.5" y="835.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="967.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.44%)</title><rect x="969.7" y="835.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="972.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.44%)</title><rect x="969.7" y="819.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="972.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.isEmpty (1 samples, 0.44%)</title><rect x="969.7" y="803.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="972.7" y="814.0"></text>
</g>
<g>
<title>start_thread (41 samples, 18.22%)</title><rect x="975.0" y="851.0" width="215.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="978.0" y="862.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (41 samples, 18.22%)</title><rect x="975.0" y="835.0" width="215.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="978.0" y="846.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (9 samples, 4.00%)</title><rect x="975.0" y="819.0" width="47.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="978.0" y="830.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (9 samples, 4.00%)</title><rect x="975.0" y="803.0" width="47.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="978.0" y="814.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 4.00%)</title><rect x="975.0" y="787.0" width="47.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="978.0" y="798.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 3.56%)</title><rect x="975.0" y="771.0" width="41.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="978.0" y="782.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.33%)</title><rect x="1001.2" y="755.0" width="15.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1004.2" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.89%)</title><rect x="1006.4" y="739.0" width="10.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1009.4" y="750.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.44%)</title><rect x="1016.9" y="771.0" width="5.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1019.9" y="782.0"></text>
</g>
<g>
<title>JavaThread::run() (31 samples, 13.78%)</title><rect x="1022.2" y="819.0" width="162.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1025.2" y="830.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (31 samples, 13.78%)</title><rect x="1022.2" y="803.0" width="162.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1025.2" y="814.0">JavaThread::thread_ma..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (31 samples, 13.78%)</title><rect x="1022.2" y="787.0" width="162.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1025.2" y="798.0">CompileBroker::compil..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (31 samples, 13.78%)</title><rect x="1022.2" y="771.0" width="162.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1025.2" y="782.0">CompileBroker::invoke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (28 samples, 12.44%)</title><rect x="1022.2" y="755.0" width="146.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1025.2" y="766.0">C2Compiler::compil..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (28 samples, 12.44%)</title><rect x="1022.2" y="739.0" width="146.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1025.2" y="750.0">Compile::Compile(c..</text>
</g>
<g>
<title>Compile::Code_Gen() (14 samples, 6.22%)</title><rect x="1022.2" y="723.0" width="73.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1025.2" y="734.0">Compile:..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.44%)</title><rect x="1022.2" y="707.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1025.2" y="718.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.44%)</title><rect x="1022.2" y="691.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1025.2" y="702.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.44%)</title><rect x="1022.2" y="675.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1025.2" y="686.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.44%)</title><rect x="1027.4" y="707.0" width="5.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1030.4" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.89%)</title><rect x="1032.7" y="707.0" width="10.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1035.7" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.89%)</title><rect x="1032.7" y="691.0" width="10.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1035.7" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.44%)</title><rect x="1032.7" y="675.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1035.7" y="686.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.44%)</title><rect x="1032.7" y="659.0" width="5.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1035.7" y="670.0"></text>
</g>
<g>
<title>jmpConUNode::pinned() const (1 samples, 0.44%)</title><rect x="1037.9" y="675.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1040.9" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (10 samples, 4.44%)</title><rect x="1043.2" y="707.0" width="52.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1046.2" y="718.0">Phase..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.44%)</title><rect x="1043.2" y="691.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1046.2" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.44%)</title><rect x="1043.2" y="675.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1046.2" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.44%)</title><rect x="1048.4" y="691.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1051.4" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.44%)</title><rect x="1048.4" y="675.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1051.4" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.44%)</title><rect x="1048.4" y="659.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1051.4" y="670.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.44%)</title><rect x="1048.4" y="643.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1051.4" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.44%)</title><rect x="1053.6" y="691.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1056.6" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.44%)</title><rect x="1053.6" y="675.0" width="5.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1056.6" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.44%)</title><rect x="1058.9" y="691.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1061.9" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.33%)</title><rect x="1064.1" y="691.0" width="15.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1067.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.44%)</title><rect x="1074.6" y="675.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1077.6" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.89%)</title><rect x="1079.9" y="691.0" width="10.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1082.9" y="702.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.44%)</title><rect x="1090.4" y="691.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1093.4" y="702.0"></text>
</g>
<g>
<title>Compile::Optimize() (10 samples, 4.44%)</title><rect x="1095.6" y="723.0" width="52.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.6" y="734.0">Compi..</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.44%)</title><rect x="1095.6" y="707.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1098.6" y="718.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.44%)</title><rect x="1095.6" y="691.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.6" y="702.0"></text>
</g>
<g>
<title>MergeMemNode::bottom_type() const (1 samples, 0.44%)</title><rect x="1095.6" y="675.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1098.6" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (4 samples, 1.78%)</title><rect x="1100.8" y="707.0" width="21.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.8" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.33%)</title><rect x="1100.8" y="691.0" width="15.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1103.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 1.33%)</title><rect x="1100.8" y="675.0" width="15.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1103.8" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 1.33%)</title><rect x="1100.8" y="659.0" width="15.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.8" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.44%)</title><rect x="1116.6" y="691.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.6" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.44%)</title><rect x="1116.6" y="675.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1119.6" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_region(Node*, Node*) (1 samples, 0.44%)</title><rect x="1116.6" y="659.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1119.6" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.44%)</title><rect x="1116.6" y="643.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1119.6" y="654.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.44%)</title><rect x="1116.6" y="627.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.6" y="638.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.44%)</title><rect x="1116.6" y="611.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1119.6" y="622.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.44%)</title><rect x="1116.6" y="595.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.6" y="606.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.44%)</title><rect x="1116.6" y="579.0" width="5.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1119.6" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.78%)</title><rect x="1121.8" y="707.0" width="21.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1124.8" y="718.0"></text>
</g>
<g>
<title>Node::Identity(PhaseTransform*) (1 samples, 0.44%)</title><rect x="1121.8" y="691.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1124.8" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.89%)</title><rect x="1127.1" y="691.0" width="10.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.1" y="702.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.44%)</title><rect x="1127.1" y="675.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.1" y="686.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.44%)</title><rect x="1127.1" y="659.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.1" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.44%)</title><rect x="1132.3" y="675.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.3" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.44%)</title><rect x="1132.3" y="659.0" width="5.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.3" y="670.0"></text>
</g>
<g>
<title>StoreNode::Value(PhaseTransform*) const (1 samples, 0.44%)</title><rect x="1137.6" y="691.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.6" y="702.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.44%)</title><rect x="1142.8" y="707.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.8" y="718.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.44%)</title><rect x="1142.8" y="691.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.8" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.44%)</title><rect x="1142.8" y="675.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.8" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.33%)</title><rect x="1148.0" y="723.0" width="15.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.0" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.33%)</title><rect x="1148.0" y="707.0" width="15.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.33%)</title><rect x="1148.0" y="691.0" width="15.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.33%)</title><rect x="1148.0" y="675.0" width="15.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.33%)</title><rect x="1148.0" y="659.0" width="15.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.33%)</title><rect x="1148.0" y="643.0" width="15.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.33%)</title><rect x="1148.0" y="627.0" width="15.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.33%)</title><rect x="1148.0" y="611.0" width="15.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.33%)</title><rect x="1148.0" y="595.0" width="15.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.33%)</title><rect x="1148.0" y="579.0" width="15.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.33%)</title><rect x="1148.0" y="563.0" width="15.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1151.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.89%)</title><rect x="1148.0" y="547.0" width="10.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.89%)</title><rect x="1148.0" y="531.0" width="10.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.89%)</title><rect x="1148.0" y="515.0" width="10.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.89%)</title><rect x="1148.0" y="499.0" width="10.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.89%)</title><rect x="1148.0" y="483.0" width="10.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.89%)</title><rect x="1148.0" y="467.0" width="10.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.89%)</title><rect x="1148.0" y="451.0" width="10.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.0" y="462.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.44%)</title><rect x="1148.0" y="435.0" width="5.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.0" y="446.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.44%)</title><rect x="1148.0" y="419.0" width="5.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.0" y="430.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.44%)</title><rect x="1148.0" y="403.0" width="5.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.0" y="414.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.44%)</title><rect x="1148.0" y="387.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.0" y="398.0"></text>
</g>
<g>
<title>ciMethod::has_compiled_code() (1 samples, 0.44%)</title><rect x="1148.0" y="371.0" width="5.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.0" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1153.3" y="435.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1153.3" y="419.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.3" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.44%)</title><rect x="1153.3" y="403.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.44%)</title><rect x="1153.3" y="387.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.44%)</title><rect x="1153.3" y="371.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.44%)</title><rect x="1153.3" y="355.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.44%)</title><rect x="1153.3" y="339.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.3" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1153.3" y="323.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.3" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1153.3" y="307.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.3" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.44%)</title><rect x="1153.3" y="291.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.44%)</title><rect x="1153.3" y="275.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.44%)</title><rect x="1153.3" y="259.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.44%)</title><rect x="1153.3" y="243.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.44%)</title><rect x="1153.3" y="227.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.3" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1153.3" y="211.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.3" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.44%)</title><rect x="1153.3" y="195.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.44%)</title><rect x="1153.3" y="179.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.44%)</title><rect x="1153.3" y="163.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.44%)</title><rect x="1153.3" y="147.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.44%)</title><rect x="1153.3" y="131.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.3" y="142.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1153.3" y="115.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.3" y="126.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.44%)</title><rect x="1153.3" y="99.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.3" y="110.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.44%)</title><rect x="1153.3" y="83.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.3" y="94.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.44%)</title><rect x="1153.3" y="67.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.3" y="78.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_input_for_runtime_call(SafePointNode*) (1 samples, 0.44%)</title><rect x="1153.3" y="51.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.3" y="62.0"></text>
</g>
<g>
<title>MergeMemNode::Identity(PhaseTransform*) (1 samples, 0.44%)</title><rect x="1153.3" y="35.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.3" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.44%)</title><rect x="1158.5" y="547.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.44%)</title><rect x="1158.5" y="531.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.5" y="542.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.44%)</title><rect x="1158.5" y="515.0" width="5.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.5" y="526.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.44%)</title><rect x="1158.5" y="499.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.5" y="510.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.44%)</title><rect x="1158.5" y="483.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.5" y="494.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.44%)</title><rect x="1158.5" y="467.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.5" y="478.0"></text>
</g>
<g>
<title>TypeInstPtr::xdual() const (1 samples, 0.44%)</title><rect x="1158.5" y="451.0" width="5.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.5" y="462.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.44%)</title><rect x="1158.5" y="435.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.5" y="446.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.44%)</title><rect x="1158.5" y="419.0" width="5.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.5" y="430.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.44%)</title><rect x="1163.8" y="723.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.8" y="734.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.44%)</title><rect x="1163.8" y="707.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.8" y="718.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.33%)</title><rect x="1169.0" y="755.0" width="15.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.0" y="766.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.33%)</title><rect x="1169.0" y="739.0" width="15.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.0" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.33%)</title><rect x="1169.0" y="723.0" width="15.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.0" y="734.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.89%)</title><rect x="1169.0" y="707.0" width="10.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.0" y="718.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.89%)</title><rect x="1169.0" y="691.0" width="10.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.0" y="702.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.89%)</title><rect x="1169.0" y="675.0" width="10.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.0" y="686.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.89%)</title><rect x="1169.0" y="659.0" width="10.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.0" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.89%)</title><rect x="1169.0" y="643.0" width="10.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.0" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.89%)</title><rect x="1169.0" y="627.0" width="10.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.0" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.89%)</title><rect x="1169.0" y="611.0" width="10.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.0" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.89%)</title><rect x="1169.0" y="595.0" width="10.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.0" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.44%)</title><rect x="1169.0" y="579.0" width="5.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.0" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.44%)</title><rect x="1169.0" y="563.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.0" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.44%)</title><rect x="1169.0" y="547.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.0" y="558.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.44%)</title><rect x="1169.0" y="531.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.0" y="542.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.44%)</title><rect x="1169.0" y="515.0" width="5.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.0" y="526.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.44%)</title><rect x="1169.0" y="499.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.0" y="510.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.44%)</title><rect x="1169.0" y="483.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.0" y="494.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.44%)</title><rect x="1169.0" y="467.0" width="5.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.0" y="478.0"></text>
</g>
<g>
<title>BitMap::BitMap(unsigned long*, unsigned long) (1 samples, 0.44%)</title><rect x="1169.0" y="451.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.0" y="462.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.44%)</title><rect x="1174.3" y="579.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.3" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.44%)</title><rect x="1174.3" y="563.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.3" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.44%)</title><rect x="1174.3" y="547.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.3" y="558.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.44%)</title><rect x="1174.3" y="531.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.3" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.44%)</title><rect x="1174.3" y="515.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.3" y="526.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.44%)</title><rect x="1174.3" y="499.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.3" y="510.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.44%)</title><rect x="1174.3" y="483.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.3" y="494.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.44%)</title><rect x="1179.5" y="707.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.5" y="718.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.44%)</title><rect x="1179.5" y="691.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.5" y="702.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.44%)</title><rect x="1179.5" y="675.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.5" y="686.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.44%)</title><rect x="1179.5" y="659.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.5" y="670.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.44%)</title><rect x="1179.5" y="643.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.5" y="654.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.44%)</title><rect x="1184.8" y="819.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.8" y="830.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.44%)</title><rect x="1184.8" y="803.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.8" y="814.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.44%)</title><rect x="1184.8" y="787.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.8" y="798.0"></text>
</g>
</g>
</svg>
