<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,421 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2035.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2019.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2003.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1987.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1971.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1955.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1939.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1923.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1907.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1891.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1763.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1731.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1715.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1683.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1667.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1651.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1635.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1619.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1603.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1587.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1571.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1555.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1539.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1523.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1507.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1491.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1475.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1459.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1443.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1427.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1395.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1379.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1299.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1283.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1267.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1251.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1235.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1219.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1155.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1123.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="915.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="899.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="835.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="819.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="787.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="771.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="755.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="739.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="723.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="707.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="691.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="675.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="659.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="643.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="627.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="611.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="595.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="579.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="563.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="547.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="531.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="515.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="483.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="467.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="451.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="435.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="419.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="403.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="387.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="371.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="355.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="339.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="323.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="307.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="291.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="275.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="259.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="243.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="227.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="211.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="195.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="179.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="163.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="147.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="131.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="115.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="99.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="83.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="67.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="51.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="35.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="10.8" y="2035.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.8" y="2046.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.07%)</title><rect x="10.8" y="2019.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="13.8" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (265 samples, 18.65%)</title><rect x="11.7" y="2035.0" width="220.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.7" y="2046.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.07%)</title><rect x="13.3" y="2019.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.3" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.commitOffsets (1 samples, 0.07%)</title><rect x="13.3" y="2003.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.3" y="2014.0"></text>
</g>
<g>
<title>java/util/OptionalLong.ifPresent (1 samples, 0.07%)</title><rect x="13.3" y="1987.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="16.3" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$276/1916313256.accept (1 samples, 0.07%)</title><rect x="13.3" y="1971.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.3" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.lambda$commitOffsets$42 (1 samples, 0.07%)</title><rect x="13.3" y="1955.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/OffsetAndMetadata.&lt;init&gt; (1 samples, 0.07%)</title><rect x="13.3" y="1939.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/OffsetAndMetadata.&lt;init&gt; (1 samples, 0.07%)</title><rect x="13.3" y="1923.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.3" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (262 samples, 18.44%)</title><rect x="14.2" y="2019.0" width="217.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.2" y="2030.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (5 samples, 0.35%)</title><rect x="14.2" y="2003.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.2" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.28%)</title><rect x="15.0" y="1987.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="18.0" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1515303956.accept (4 samples, 0.28%)</title><rect x="15.0" y="1971.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="18.0" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.28%)</title><rect x="15.0" y="1955.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.0" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.28%)</title><rect x="15.0" y="1939.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.0" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.28%)</title><rect x="15.0" y="1923.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.0" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (9 samples, 0.63%)</title><rect x="18.3" y="2003.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="21.3" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (9 samples, 0.63%)</title><rect x="18.3" y="1987.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.3" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (9 samples, 0.63%)</title><rect x="18.3" y="1971.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.3" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (9 samples, 0.63%)</title><rect x="18.3" y="1955.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.3" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (9 samples, 0.63%)</title><rect x="18.3" y="1939.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.3" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (7 samples, 0.49%)</title><rect x="18.3" y="1923.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.3" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (5 samples, 0.35%)</title><rect x="18.3" y="1907.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.3" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (3 samples, 0.21%)</title><rect x="18.3" y="1891.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.3" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.14%)</title><rect x="19.1" y="1875.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.1" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.14%)</title><rect x="19.1" y="1859.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/402987653.test (1 samples, 0.07%)</title><rect x="19.1" y="1843.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.1" y="1854.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="20.0" y="1843.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="23.0" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (2 samples, 0.14%)</title><rect x="20.8" y="1891.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.8" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (2 samples, 0.14%)</title><rect x="20.8" y="1875.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.8" y="1886.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="20.8" y="1859.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="23.8" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="21.6" y="1859.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.6" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.07%)</title><rect x="21.6" y="1843.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="24.6" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (2 samples, 0.14%)</title><rect x="22.5" y="1907.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="25.5" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (2 samples, 0.14%)</title><rect x="22.5" y="1891.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.5" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (2 samples, 0.14%)</title><rect x="22.5" y="1875.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.5" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (2 samples, 0.14%)</title><rect x="22.5" y="1859.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.5" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (2 samples, 0.14%)</title><rect x="22.5" y="1843.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.5" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (2 samples, 0.14%)</title><rect x="24.1" y="1923.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.1" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (2 samples, 0.14%)</title><rect x="24.1" y="1907.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.1" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="24.1" y="1891.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.1" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.07%)</title><rect x="25.8" y="2003.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.8" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.07%)</title><rect x="25.8" y="1987.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.8" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="25.8" y="1971.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.8" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="25.8" y="1955.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.8" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="25.8" y="1939.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.8" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.07%)</title><rect x="25.8" y="1923.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="28.8" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.07%)</title><rect x="25.8" y="1907.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.8" y="1918.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.07%)</title><rect x="25.8" y="1891.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="28.8" y="1902.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (189 samples, 13.30%)</title><rect x="26.6" y="2003.0" width="157.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="29.6" y="2014.0">java/lang/Iterable.f..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/276127478.accept (183 samples, 12.88%)</title><rect x="27.4" y="1987.0" width="152.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.4" y="1998.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (183 samples, 12.88%)</title><rect x="27.4" y="1971.0" width="152.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.4" y="1982.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (147 samples, 10.34%)</title><rect x="27.4" y="1955.0" width="122.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.4" y="1966.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (147 samples, 10.34%)</title><rect x="27.4" y="1939.0" width="122.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="30.4" y="1950.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (147 samples, 10.34%)</title><rect x="27.4" y="1923.0" width="122.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="30.4" y="1934.0">com/linecorp/de..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (147 samples, 10.34%)</title><rect x="27.4" y="1907.0" width="122.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="30.4" y="1918.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (147 samples, 10.34%)</title><rect x="27.4" y="1891.0" width="122.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="30.4" y="1902.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (147 samples, 10.34%)</title><rect x="27.4" y="1875.0" width="122.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.4" y="1886.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (105 samples, 7.39%)</title><rect x="57.3" y="1859.0" width="87.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.3" y="1870.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (15 samples, 1.06%)</title><rect x="58.2" y="1843.0" width="12.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="61.2" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (15 samples, 1.06%)</title><rect x="58.2" y="1827.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="61.2" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (15 samples, 1.06%)</title><rect x="58.2" y="1811.0" width="12.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="61.2" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (16 samples, 1.13%)</title><rect x="70.6" y="1843.0" width="13.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="73.6" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (16 samples, 1.13%)</title><rect x="70.6" y="1827.0" width="13.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="73.6" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.28%)</title><rect x="73.9" y="1811.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="76.9" y="1822.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (4 samples, 0.28%)</title><rect x="73.9" y="1795.0" width="3.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="76.9" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.28%)</title><rect x="77.3" y="1811.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="80.3" y="1822.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.28%)</title><rect x="80.6" y="1811.0" width="3.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="83.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (73 samples, 5.14%)</title><rect x="83.9" y="1843.0" width="60.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="86.9" y="1854.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (73 samples, 5.14%)</title><rect x="83.9" y="1827.0" width="60.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.9" y="1838.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (70 samples, 4.93%)</title><rect x="84.7" y="1811.0" width="58.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="87.7" y="1822.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (70 samples, 4.93%)</title><rect x="84.7" y="1795.0" width="58.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="87.7" y="1806.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (70 samples, 4.93%)</title><rect x="84.7" y="1779.0" width="58.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="87.7" y="1790.0">sun/mi..</text>
</g>
<g>
<title>Unsafe_Unpark (62 samples, 4.36%)</title><rect x="84.7" y="1763.0" width="51.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="87.7" y="1774.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="84.7" y="1747.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="87.7" y="1758.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.14%)</title><rect x="85.6" y="1747.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="88.6" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (43 samples, 3.03%)</title><rect x="87.2" y="1747.0" width="35.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="90.2" y="1758.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.14%)</title><rect x="122.9" y="1747.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="125.9" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (14 samples, 0.99%)</title><rect x="124.6" y="1747.0" width="11.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="127.6" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.28%)</title><rect x="136.2" y="1763.0" width="3.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="139.2" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.28%)</title><rect x="139.5" y="1763.0" width="3.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="142.5" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.14%)</title><rect x="142.9" y="1811.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="145.9" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.14%)</title><rect x="144.5" y="1859.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="147.5" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (2 samples, 0.14%)</title><rect x="144.5" y="1843.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="147.5" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.14%)</title><rect x="144.5" y="1827.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="147.5" y="1838.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.14%)</title><rect x="144.5" y="1811.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="147.5" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.14%)</title><rect x="144.5" y="1795.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="147.5" y="1806.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.14%)</title><rect x="144.5" y="1779.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="147.5" y="1790.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.14%)</title><rect x="144.5" y="1763.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="147.5" y="1774.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="144.5" y="1747.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="147.5" y="1758.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="144.5" y="1731.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="147.5" y="1742.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="145.4" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="148.4" y="1758.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.07%)</title><rect x="145.4" y="1731.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="148.4" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.21%)</title><rect x="146.2" y="1859.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="149.2" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.21%)</title><rect x="146.2" y="1843.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="149.2" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="146.2" y="1827.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="149.2" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.07%)</title><rect x="146.2" y="1811.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="149.2" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.14%)</title><rect x="147.0" y="1827.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="150.0" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.14%)</title><rect x="147.0" y="1811.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="150.0" y="1822.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="148.7" y="1859.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="151.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.14%)</title><rect x="149.5" y="1955.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="152.5" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.14%)</title><rect x="149.5" y="1939.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="152.5" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.21%)</title><rect x="151.2" y="1955.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="154.2" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.21%)</title><rect x="151.2" y="1939.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="154.2" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.21%)</title><rect x="151.2" y="1923.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="154.2" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (31 samples, 2.18%)</title><rect x="153.7" y="1955.0" width="25.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="156.7" y="1966.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="153.7" y="1939.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="156.7" y="1950.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="153.7" y="1923.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="156.7" y="1934.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.07%)</title><rect x="153.7" y="1907.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="156.7" y="1918.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (30 samples, 2.11%)</title><rect x="154.5" y="1939.0" width="24.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="157.5" y="1950.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 0.42%)</title><rect x="171.1" y="1923.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="174.1" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.14%)</title><rect x="171.1" y="1907.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="174.1" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.14%)</title><rect x="171.1" y="1891.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="174.1" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.14%)</title><rect x="171.1" y="1875.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="174.1" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="171.9" y="1859.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="174.9" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.07%)</title><rect x="171.9" y="1843.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="174.9" y="1854.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="171.9" y="1827.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="174.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.14%)</title><rect x="172.8" y="1907.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="175.8" y="1918.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.14%)</title><rect x="174.4" y="1907.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="177.4" y="1918.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.28%)</title><rect x="176.1" y="1923.0" width="3.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="179.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.35%)</title><rect x="179.4" y="1987.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="182.4" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.35%)</title><rect x="179.4" y="1971.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="182.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.35%)</title><rect x="179.4" y="1955.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="182.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.35%)</title><rect x="179.4" y="1939.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="182.4" y="1950.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (3 samples, 0.21%)</title><rect x="181.1" y="1923.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="184.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 4.08%)</title><rect x="183.6" y="2003.0" width="48.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="186.6" y="2014.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 4.08%)</title><rect x="183.6" y="1987.0" width="48.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="186.6" y="1998.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (39 samples, 2.74%)</title><rect x="184.4" y="1971.0" width="32.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="187.4" y="1982.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="184.4" y="1955.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="187.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="184.4" y="1939.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="187.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.07%)</title><rect x="184.4" y="1923.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="187.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.07%)</title><rect x="184.4" y="1907.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="187.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.07%)</title><rect x="184.4" y="1891.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="187.4" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.07%)</title><rect x="184.4" y="1875.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="187.4" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.07%)</title><rect x="184.4" y="1859.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="187.4" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="184.4" y="1843.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="187.4" y="1854.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="184.4" y="1827.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="187.4" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.07%)</title><rect x="184.4" y="1811.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="187.4" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="184.4" y="1795.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="187.4" y="1806.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="184.4" y="1779.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="187.4" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="184.4" y="1763.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="187.4" y="1774.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="184.4" y="1747.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="187.4" y="1758.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.07%)</title><rect x="184.4" y="1731.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="187.4" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (38 samples, 2.67%)</title><rect x="185.2" y="1955.0" width="31.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="188.2" y="1966.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (37 samples, 2.60%)</title><rect x="185.2" y="1939.0" width="30.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="188.2" y="1950.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (32 samples, 2.25%)</title><rect x="186.0" y="1923.0" width="26.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="189.0" y="1934.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (32 samples, 2.25%)</title><rect x="186.0" y="1907.0" width="26.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.0" y="1918.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (16 samples, 1.13%)</title><rect x="190.2" y="1891.0" width="13.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="193.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.42%)</title><rect x="197.7" y="1875.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="200.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.42%)</title><rect x="197.7" y="1859.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="200.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.42%)</title><rect x="197.7" y="1843.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="200.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.42%)</title><rect x="197.7" y="1827.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="200.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.42%)</title><rect x="197.7" y="1811.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="200.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.42%)</title><rect x="197.7" y="1795.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="200.7" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.42%)</title><rect x="197.7" y="1779.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="200.7" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.07%)</title><rect x="202.7" y="1875.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="205.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.07%)</title><rect x="202.7" y="1859.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="205.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.07%)</title><rect x="202.7" y="1843.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.07%)</title><rect x="202.7" y="1827.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="205.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.07%)</title><rect x="202.7" y="1811.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.7" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="202.7" y="1795.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="205.7" y="1806.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="202.7" y="1779.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="205.7" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="202.7" y="1763.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="205.7" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="202.7" y="1747.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="205.7" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.07%)</title><rect x="202.7" y="1731.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="205.7" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (11 samples, 0.77%)</title><rect x="203.5" y="1891.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="206.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (11 samples, 0.77%)</title><rect x="203.5" y="1875.0" width="9.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="206.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (4 samples, 0.28%)</title><rect x="203.5" y="1859.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.5" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.of (4 samples, 0.28%)</title><rect x="203.5" y="1843.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="206.5" y="1854.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.14%)</title><rect x="205.1" y="1827.0" width="1.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="208.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (7 samples, 0.49%)</title><rect x="206.8" y="1859.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="209.8" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (7 samples, 0.49%)</title><rect x="206.8" y="1843.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="209.8" y="1854.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="211.8" y="1827.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="214.8" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.07%)</title><rect x="212.6" y="1923.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.07%)</title><rect x="212.6" y="1907.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="212.6" y="1891.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="215.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="212.6" y="1875.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="215.6" y="1886.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="212.6" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="215.6" y="1870.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="212.6" y="1843.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="215.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.14%)</title><rect x="213.4" y="1923.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="216.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.14%)</title><rect x="213.4" y="1907.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="216.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.07%)</title><rect x="213.4" y="1891.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="216.4" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="213.4" y="1875.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.4" y="1886.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="213.4" y="1859.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="216.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="214.3" y="1891.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="217.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="214.3" y="1875.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="217.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.07%)</title><rect x="215.1" y="1923.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="218.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.contains (1 samples, 0.07%)</title><rect x="215.1" y="1907.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.1" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="215.1" y="1891.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="218.1" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="215.1" y="1875.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.07%)</title><rect x="215.9" y="1939.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="218.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.63%)</title><rect x="216.8" y="1971.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="219.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.56%)</title><rect x="216.8" y="1955.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="219.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.56%)</title><rect x="216.8" y="1939.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="219.8" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="217.6" y="1923.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="220.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/2006706088.accept (1 samples, 0.07%)</title><rect x="217.6" y="1907.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.07%)</title><rect x="217.6" y="1891.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="220.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="217.6" y="1875.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="220.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.07%)</title><rect x="217.6" y="1859.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="220.6" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="217.6" y="1843.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="220.6" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="217.6" y="1827.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="220.6" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="218.4" y="1923.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.4" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="218.4" y="1907.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.4" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="218.4" y="1891.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="221.4" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="218.4" y="1875.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="221.4" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="218.4" y="1859.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="221.4" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="218.4" y="1843.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.4" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$67/1740169311.get (1 samples, 0.07%)</title><rect x="218.4" y="1827.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.4" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.07%)</title><rect x="219.3" y="1923.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.3" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="219.3" y="1907.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.3" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="219.3" y="1891.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="222.3" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.07%)</title><rect x="219.3" y="1875.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="222.3" y="1886.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.07%)</title><rect x="219.3" y="1859.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.3" y="1870.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.07%)</title><rect x="219.3" y="1843.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (4 samples, 0.28%)</title><rect x="220.1" y="1923.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="223.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (4 samples, 0.28%)</title><rect x="220.1" y="1907.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="223.1" y="1918.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.07%)</title><rect x="220.1" y="1891.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="223.1" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.21%)</title><rect x="220.9" y="1891.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="223.9" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.07%)</title><rect x="220.9" y="1875.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="223.9" y="1886.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="220.9" y="1859.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="223.9" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="220.9" y="1843.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="223.9" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="220.9" y="1827.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="223.9" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="221.8" y="1875.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.8" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="222.6" y="1859.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="225.6" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="222.6" y="1843.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="225.6" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="222.6" y="1827.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.6" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="222.6" y="1811.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="225.6" y="1822.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="222.6" y="1795.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="225.6" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="222.6" y="1779.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.6" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$213/502084342.apply (1 samples, 0.07%)</title><rect x="222.6" y="1763.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="225.6" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.07%)</title><rect x="223.4" y="1955.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="226.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.07%)</title><rect x="223.4" y="1939.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="226.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsAutoAssigned (1 samples, 0.07%)</title><rect x="223.4" y="1923.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="226.4" y="1934.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.07%)</title><rect x="223.4" y="1907.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="226.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.07%)</title><rect x="224.2" y="1971.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="227.2" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.07%)</title><rect x="224.2" y="1955.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="227.2" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.07%)</title><rect x="224.2" y="1939.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="227.2" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="224.2" y="1923.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.2" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.07%)</title><rect x="224.2" y="1907.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="227.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.35%)</title><rect x="225.1" y="1971.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.21%)</title><rect x="225.1" y="1955.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="228.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.07%)</title><rect x="225.1" y="1939.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="228.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.07%)</title><rect x="225.1" y="1923.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.07%)</title><rect x="225.1" y="1907.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="225.1" y="1891.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="228.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.14%)</title><rect x="225.9" y="1939.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="228.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.07%)</title><rect x="225.9" y="1923.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="228.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.07%)</title><rect x="225.9" y="1907.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="228.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.07%)</title><rect x="225.9" y="1891.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="228.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.07%)</title><rect x="225.9" y="1875.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="228.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.07%)</title><rect x="225.9" y="1859.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.07%)</title><rect x="225.9" y="1843.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="228.9" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.07%)</title><rect x="225.9" y="1827.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="228.9" y="1838.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="225.9" y="1811.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="228.9" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.07%)</title><rect x="226.7" y="1923.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="229.7" y="1934.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.07%)</title><rect x="226.7" y="1907.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="229.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.clear (1 samples, 0.07%)</title><rect x="226.7" y="1891.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.14%)</title><rect x="227.6" y="1955.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.14%)</title><rect x="227.6" y="1939.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="230.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.14%)</title><rect x="227.6" y="1923.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.14%)</title><rect x="227.6" y="1907.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (2 samples, 0.14%)</title><rect x="227.6" y="1891.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="230.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (2 samples, 0.14%)</title><rect x="227.6" y="1875.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="230.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (2 samples, 0.14%)</title><rect x="227.6" y="1859.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.6" y="1870.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.07%)</title><rect x="227.6" y="1843.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="230.6" y="1854.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.07%)</title><rect x="227.6" y="1827.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.07%)</title><rect x="228.4" y="1843.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="231.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.07%)</title><rect x="228.4" y="1827.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="231.4" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.write (1 samples, 0.07%)</title><rect x="228.4" y="1811.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.07%)</title><rect x="228.4" y="1795.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="231.4" y="1806.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.07%)</title><rect x="228.4" y="1779.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.4" y="1790.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.07%)</title><rect x="228.4" y="1763.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.4" y="1774.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (1 samples, 0.07%)</title><rect x="228.4" y="1747.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="231.4" y="1758.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="228.4" y="1731.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.4" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.21%)</title><rect x="229.2" y="1971.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.21%)</title><rect x="229.2" y="1955.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="232.2" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="229.2" y="1939.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.2" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.07%)</title><rect x="229.2" y="1923.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="232.2" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.07%)</title><rect x="229.2" y="1907.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="232.2" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="229.2" y="1891.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.2" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="229.2" y="1875.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="232.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.07%)</title><rect x="230.1" y="1939.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.1" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="230.1" y="1923.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="233.1" y="1934.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="230.1" y="1907.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="233.1" y="1918.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="230.1" y="1891.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="233.1" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="230.1" y="1875.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="233.1" y="1886.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.07%)</title><rect x="230.1" y="1859.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="233.1" y="1870.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="230.9" y="1939.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="233.9" y="1950.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="230.9" y="1923.0" width="0.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="233.9" y="1934.0"></text>
</g>
<g>
<title>java/lang/Thread.run (786 samples, 55.31%)</title><rect x="231.7" y="2035.0" width="652.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="234.7" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (786 samples, 55.31%)</title><rect x="231.7" y="2019.0" width="652.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="234.7" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (786 samples, 55.31%)</title><rect x="231.7" y="2003.0" width="652.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="234.7" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/2050380040.run (556 samples, 39.13%)</title><rect x="240.0" y="1987.0" width="461.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="243.0" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$26..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (556 samples, 39.13%)</title><rect x="240.0" y="1971.0" width="461.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.0" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$put..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (556 samples, 39.13%)</title><rect x="240.0" y="1955.0" width="461.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="243.0" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (553 samples, 38.92%)</title><rect x="240.0" y="1939.0" width="459.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="243.0" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.schedule..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (152 samples, 10.70%)</title><rect x="246.7" y="1923.0" width="126.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="249.7" y="1934.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (152 samples, 10.70%)</title><rect x="246.7" y="1907.0" width="126.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.7" y="1918.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (152 samples, 10.70%)</title><rect x="246.7" y="1891.0" width="126.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="249.7" y="1902.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (152 samples, 10.70%)</title><rect x="246.7" y="1875.0" width="126.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="249.7" y="1886.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (152 samples, 10.70%)</title><rect x="246.7" y="1859.0" width="126.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="249.7" y="1870.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (152 samples, 10.70%)</title><rect x="246.7" y="1843.0" width="126.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="249.7" y="1854.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (56 samples, 3.94%)</title><rect x="246.7" y="1827.0" width="46.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="249.7" y="1838.0">com/..</text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.63%)</title><rect x="259.1" y="1811.0" width="7.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="262.1" y="1822.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.56%)</title><rect x="260.0" y="1795.0" width="6.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="263.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (12 samples, 0.84%)</title><rect x="266.6" y="1811.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="269.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (10 samples, 0.70%)</title><rect x="268.3" y="1795.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="271.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (10 samples, 0.70%)</title><rect x="268.3" y="1779.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="271.3" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.70%)</title><rect x="268.3" y="1763.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.3" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (10 samples, 0.70%)</title><rect x="268.3" y="1747.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.3" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (10 samples, 0.70%)</title><rect x="268.3" y="1731.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="271.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (20 samples, 1.41%)</title><rect x="276.6" y="1811.0" width="16.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="279.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 0.42%)</title><rect x="288.2" y="1795.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="291.2" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="288.2" y="1779.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="291.2" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="288.2" y="1763.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="291.2" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="288.2" y="1747.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="291.2" y="1758.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="289.0" y="1763.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="292.0" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="289.0" y="1747.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="292.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.14%)</title><rect x="289.8" y="1779.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="292.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.14%)</title><rect x="289.8" y="1763.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="292.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.14%)</title><rect x="291.5" y="1779.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="294.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.14%)</title><rect x="291.5" y="1763.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.14%)</title><rect x="291.5" y="1747.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="294.5" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="291.5" y="1731.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="294.5" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.14%)</title><rect x="291.5" y="1715.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="294.5" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="291.5" y="1699.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="294.5" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="291.5" y="1683.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="294.5" y="1694.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="291.5" y="1667.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="294.5" y="1678.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.07%)</title><rect x="292.3" y="1699.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="295.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (84 samples, 5.91%)</title><rect x="293.2" y="1827.0" width="69.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.2" y="1838.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.14%)</title><rect x="293.2" y="1811.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="296.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.07%)</title><rect x="294.8" y="1811.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="297.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.07%)</title><rect x="295.7" y="1811.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="298.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.35%)</title><rect x="296.5" y="1811.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="299.5" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.21%)</title><rect x="298.1" y="1795.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="301.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (10 samples, 0.70%)</title><rect x="300.6" y="1811.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.49%)</title><rect x="303.1" y="1795.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="306.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.35%)</title><rect x="304.0" y="1779.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="307.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.28%)</title><rect x="304.8" y="1763.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="307.8" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="304.8" y="1747.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="307.8" y="1758.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.14%)</title><rect x="304.8" y="1731.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="307.8" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="305.6" y="1715.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="308.6" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="305.6" y="1699.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="308.6" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="305.6" y="1683.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="308.6" y="1694.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="305.6" y="1667.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="308.6" y="1678.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="305.6" y="1651.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="308.6" y="1662.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="305.6" y="1635.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="308.6" y="1646.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="305.6" y="1619.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="308.6" y="1630.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.07%)</title><rect x="305.6" y="1603.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="308.6" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.14%)</title><rect x="306.5" y="1747.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="309.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="308.1" y="1779.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="311.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.35%)</title><rect x="308.9" y="1811.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.28%)</title><rect x="309.8" y="1795.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="312.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (59 samples, 4.15%)</title><rect x="313.1" y="1811.0" width="49.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="316.1" y="1822.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 0.91%)</title><rect x="313.1" y="1795.0" width="10.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="316.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.28%)</title><rect x="316.4" y="1779.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.28%)</title><rect x="316.4" y="1763.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="319.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.28%)</title><rect x="316.4" y="1747.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="319.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.14%)</title><rect x="319.7" y="1779.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="322.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.21%)</title><rect x="321.4" y="1779.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="324.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.21%)</title><rect x="321.4" y="1763.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="324.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 0.21%)</title><rect x="323.9" y="1795.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="326.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (43 samples, 3.03%)</title><rect x="326.4" y="1795.0" width="35.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="329.4" y="1806.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (43 samples, 3.03%)</title><rect x="326.4" y="1779.0" width="35.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="329.4" y="1790.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (43 samples, 3.03%)</title><rect x="326.4" y="1763.0" width="35.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="329.4" y="1774.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.06%)</title><rect x="332.2" y="1747.0" width="12.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="335.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.49%)</title><rect x="332.2" y="1731.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="335.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.49%)</title><rect x="332.2" y="1715.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="335.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.49%)</title><rect x="332.2" y="1699.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="335.2" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (6 samples, 0.42%)</title><rect x="333.0" y="1683.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="336.0" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.21%)</title><rect x="333.0" y="1667.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="336.0" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.21%)</title><rect x="333.0" y="1651.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="336.0" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (3 samples, 0.21%)</title><rect x="333.0" y="1635.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="336.0" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.21%)</title><rect x="335.5" y="1667.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="338.5" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 0.35%)</title><rect x="338.0" y="1731.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="341.0" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.21%)</title><rect x="342.2" y="1731.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="345.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.21%)</title><rect x="342.2" y="1715.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="345.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.14%)</title><rect x="343.0" y="1699.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="346.0" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (9 samples, 0.63%)</title><rect x="344.7" y="1747.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="347.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (8 samples, 0.56%)</title><rect x="345.5" y="1731.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="348.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.56%)</title><rect x="345.5" y="1715.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="348.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.56%)</title><rect x="345.5" y="1699.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="348.5" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (8 samples, 0.56%)</title><rect x="345.5" y="1683.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="348.5" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.07%)</title><rect x="352.1" y="1747.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="355.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.07%)</title><rect x="352.1" y="1731.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="355.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.07%)</title><rect x="352.1" y="1715.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="355.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.07%)</title><rect x="352.1" y="1699.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="355.1" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.07%)</title><rect x="352.1" y="1683.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="355.1" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.07%)</title><rect x="352.1" y="1667.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="355.1" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor6.newInstance (1 samples, 0.07%)</title><rect x="352.1" y="1651.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="355.1" y="1662.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="352.1" y="1635.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="355.1" y="1646.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.07%)</title><rect x="352.1" y="1619.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="355.1" y="1630.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="352.1" y="1603.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="355.1" y="1614.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="352.1" y="1587.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="355.1" y="1598.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="352.1" y="1571.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="355.1" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.49%)</title><rect x="353.0" y="1747.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="356.0" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.49%)</title><rect x="353.0" y="1731.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="356.0" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.49%)</title><rect x="353.0" y="1715.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="356.0" y="1726.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="357.9" y="1699.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="360.9" y="1710.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="357.9" y="1683.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="360.9" y="1694.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="357.9" y="1667.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="360.9" y="1678.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="357.9" y="1651.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="360.9" y="1662.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.07%)</title><rect x="357.9" y="1635.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="360.9" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.28%)</title><rect x="358.8" y="1747.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="361.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (4 samples, 0.28%)</title><rect x="358.8" y="1731.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="361.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.07%)</title><rect x="362.1" y="1811.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="365.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (12 samples, 0.84%)</title><rect x="362.9" y="1827.0" width="10.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="365.9" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.07%)</title><rect x="363.8" y="1811.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="366.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (10 samples, 0.70%)</title><rect x="364.6" y="1811.0" width="8.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="367.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (10 samples, 0.70%)</title><rect x="364.6" y="1795.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="367.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (10 samples, 0.70%)</title><rect x="364.6" y="1779.0" width="8.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="367.6" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 0.70%)</title><rect x="364.6" y="1763.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="367.6" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (366 samples, 25.76%)</title><rect x="372.9" y="1923.0" width="303.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="375.9" y="1934.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (56 samples, 3.94%)</title><rect x="375.4" y="1907.0" width="46.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="378.4" y="1918.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.07%)</title><rect x="375.4" y="1891.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="378.4" y="1902.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (55 samples, 3.87%)</title><rect x="376.2" y="1891.0" width="45.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="379.2" y="1902.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (53 samples, 3.73%)</title><rect x="377.9" y="1875.0" width="44.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="380.9" y="1886.0">ch/q..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (35 samples, 2.46%)</title><rect x="378.7" y="1859.0" width="29.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="381.7" y="1870.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (35 samples, 2.46%)</title><rect x="378.7" y="1843.0" width="29.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="381.7" y="1854.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (35 samples, 2.46%)</title><rect x="378.7" y="1827.0" width="29.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="381.7" y="1838.0">ja..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (17 samples, 1.20%)</title><rect x="407.8" y="1859.0" width="14.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="410.8" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 0.49%)</title><rect x="416.1" y="1843.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="419.1" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.49%)</title><rect x="416.1" y="1827.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="419.1" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.28%)</title><rect x="421.9" y="1907.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="424.9" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.28%)</title><rect x="421.9" y="1891.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="424.9" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.28%)</title><rect x="421.9" y="1875.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="424.9" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (146 samples, 10.27%)</title><rect x="425.2" y="1907.0" width="121.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="428.2" y="1918.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (146 samples, 10.27%)</title><rect x="425.2" y="1891.0" width="121.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="428.2" y="1902.0">com/linecorp/de..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.35%)</title><rect x="434.3" y="1875.0" width="4.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="437.3" y="1886.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.28%)</title><rect x="435.2" y="1859.0" width="3.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="438.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (43 samples, 3.03%)</title><rect x="438.5" y="1875.0" width="35.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="441.5" y="1886.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (40 samples, 2.81%)</title><rect x="439.3" y="1859.0" width="33.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="442.3" y="1870.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (28 samples, 1.97%)</title><rect x="445.1" y="1843.0" width="23.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="448.1" y="1854.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.14%)</title><rect x="449.3" y="1827.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="452.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (17 samples, 1.20%)</title><rect x="450.9" y="1827.0" width="14.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="453.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (17 samples, 1.20%)</title><rect x="450.9" y="1811.0" width="14.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="453.9" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (17 samples, 1.20%)</title><rect x="450.9" y="1795.0" width="14.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="453.9" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.63%)</title><rect x="454.3" y="1779.0" width="7.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="457.3" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.14%)</title><rect x="454.3" y="1763.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="457.3" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="455.9" y="1763.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="458.9" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="455.9" y="1747.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="458.9" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.21%)</title><rect x="456.8" y="1763.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="459.8" y="1774.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.21%)</title><rect x="456.8" y="1747.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="459.8" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.14%)</title><rect x="456.8" y="1731.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="459.8" y="1742.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.07%)</title><rect x="456.8" y="1715.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="459.8" y="1726.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="457.6" y="1715.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="460.6" y="1726.0"></text>
</g>
<g>
<title>nmethod::is_nmethod() const (1 samples, 0.07%)</title><rect x="458.4" y="1731.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="461.4" y="1742.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.21%)</title><rect x="459.2" y="1763.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="462.2" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.21%)</title><rect x="459.2" y="1747.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="462.2" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="459.2" y="1731.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="462.2" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="459.2" y="1715.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="462.2" y="1726.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.07%)</title><rect x="459.2" y="1699.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="462.2" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="460.1" y="1731.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="463.1" y="1742.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="460.9" y="1731.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="463.9" y="1742.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="461.7" y="1779.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="464.7" y="1790.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.21%)</title><rect x="462.6" y="1779.0" width="2.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="465.6" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.14%)</title><rect x="465.1" y="1827.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="468.1" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="466.7" y="1827.0" width="1.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="469.7" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="468.4" y="1843.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="471.4" y="1854.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.28%)</title><rect x="469.2" y="1843.0" width="3.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="472.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.14%)</title><rect x="472.5" y="1859.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="475.5" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.14%)</title><rect x="472.5" y="1843.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="475.5" y="1854.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.14%)</title><rect x="472.5" y="1827.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="475.5" y="1838.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.07%)</title><rect x="472.5" y="1811.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="475.5" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="473.4" y="1811.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="476.4" y="1822.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.07%)</title><rect x="473.4" y="1795.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="476.4" y="1806.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="473.4" y="1779.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="476.4" y="1790.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.42%)</title><rect x="474.2" y="1875.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="477.2" y="1886.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.42%)</title><rect x="474.2" y="1859.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="477.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.42%)</title><rect x="474.2" y="1843.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="477.2" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.07%)</title><rect x="478.3" y="1827.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="481.3" y="1838.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (80 samples, 5.63%)</title><rect x="479.2" y="1875.0" width="66.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="482.2" y="1886.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (79 samples, 5.56%)</title><rect x="480.0" y="1859.0" width="65.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="483.0" y="1870.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.21%)</title><rect x="480.0" y="1843.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="483.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.21%)</title><rect x="480.0" y="1827.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="483.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.21%)</title><rect x="480.0" y="1811.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="483.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.21%)</title><rect x="480.0" y="1795.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="483.0" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.14%)</title><rect x="482.5" y="1843.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="485.5" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.14%)</title><rect x="482.5" y="1827.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="485.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.14%)</title><rect x="482.5" y="1811.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="485.5" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.14%)</title><rect x="482.5" y="1795.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="485.5" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (74 samples, 5.21%)</title><rect x="484.2" y="1843.0" width="61.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="487.2" y="1854.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (68 samples, 4.79%)</title><rect x="489.1" y="1827.0" width="56.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="492.1" y="1838.0">java/u..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="516.5" y="1811.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="519.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.07%)</title><rect x="516.5" y="1795.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="519.5" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.07%)</title><rect x="516.5" y="1779.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="519.5" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (34 samples, 2.39%)</title><rect x="517.4" y="1811.0" width="28.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="520.4" y="1822.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.21%)</title><rect x="536.5" y="1795.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="539.5" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.56%)</title><rect x="539.0" y="1795.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="542.0" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="544.8" y="1779.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="547.8" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="544.8" y="1763.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="547.8" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="544.8" y="1747.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="547.8" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="544.8" y="1731.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="547.8" y="1742.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="544.8" y="1715.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="547.8" y="1726.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="545.6" y="1875.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="548.6" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (141 samples, 9.92%)</title><rect x="546.4" y="1907.0" width="117.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="549.4" y="1918.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (141 samples, 9.92%)</title><rect x="546.4" y="1891.0" width="117.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="549.4" y="1902.0">com/linecorp/d..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="548.1" y="1875.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="551.1" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="548.1" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="551.1" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="548.1" y="1843.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="551.1" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="548.1" y="1827.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="551.1" y="1838.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.07%)</title><rect x="548.1" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="551.1" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1792056606.process (105 samples, 7.39%)</title><rect x="548.9" y="1875.0" width="87.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="551.9" y="1886.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (18 samples, 1.27%)</title><rect x="549.8" y="1859.0" width="14.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="552.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (15 samples, 1.06%)</title><rect x="549.8" y="1843.0" width="12.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="552.8" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="551.4" y="1827.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="554.4" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="551.4" y="1811.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="554.4" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.07%)</title><rect x="551.4" y="1795.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="554.4" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.07%)</title><rect x="551.4" y="1779.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="554.4" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.35%)</title><rect x="552.3" y="1827.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="555.3" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.35%)</title><rect x="552.3" y="1811.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="555.3" y="1822.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.35%)</title><rect x="552.3" y="1795.0" width="4.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="555.3" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.49%)</title><rect x="556.4" y="1827.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="559.4" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.21%)</title><rect x="562.2" y="1843.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="565.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.14%)</title><rect x="563.0" y="1827.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="566.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.14%)</title><rect x="563.0" y="1811.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="566.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.14%)</title><rect x="563.0" y="1795.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="566.0" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (85 samples, 5.98%)</title><rect x="564.7" y="1859.0" width="70.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="567.7" y="1870.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="635.3" y="1859.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="638.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.07%)</title><rect x="636.1" y="1875.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="639.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/935776051.complete (3 samples, 0.21%)</title><rect x="637.0" y="1875.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="640.0" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$35 (3 samples, 0.21%)</title><rect x="637.0" y="1859.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="640.0" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (3 samples, 0.21%)</title><rect x="637.0" y="1843.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="640.0" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.07%)</title><rect x="637.0" y="1827.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="640.0" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 0.14%)</title><rect x="637.8" y="1827.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="640.8" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.35%)</title><rect x="639.4" y="1875.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="642.4" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.35%)</title><rect x="639.4" y="1859.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="642.4" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (8 samples, 0.56%)</title><rect x="643.6" y="1875.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="646.6" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (8 samples, 0.56%)</title><rect x="643.6" y="1859.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="646.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/935776051.get$Lambda (8 samples, 0.56%)</title><rect x="643.6" y="1843.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="646.6" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/935776051.&lt;init&gt; (7 samples, 0.49%)</title><rect x="644.4" y="1827.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="647.4" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (3 samples, 0.21%)</title><rect x="650.2" y="1875.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="653.2" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.14%)</title><rect x="651.1" y="1859.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="654.1" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (10 samples, 0.70%)</title><rect x="652.7" y="1875.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="655.7" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.49%)</title><rect x="655.2" y="1859.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="658.2" y="1870.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.28%)</title><rect x="655.2" y="1843.0" width="3.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="658.2" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.21%)</title><rect x="658.5" y="1843.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="661.5" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.21%)</title><rect x="661.0" y="1875.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="664.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.07%)</title><rect x="662.7" y="1859.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="665.7" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.13%)</title><rect x="663.5" y="1907.0" width="13.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="666.5" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (16 samples, 1.13%)</title><rect x="663.5" y="1891.0" width="13.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="666.5" y="1902.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.28%)</title><rect x="664.4" y="1875.0" width="3.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="667.4" y="1886.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.28%)</title><rect x="664.4" y="1859.0" width="3.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="667.4" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.77%)</title><rect x="667.7" y="1875.0" width="9.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="670.7" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/284210676.accept (8 samples, 0.56%)</title><rect x="667.7" y="1859.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="670.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (8 samples, 0.56%)</title><rect x="667.7" y="1843.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="670.7" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (8 samples, 0.56%)</title><rect x="667.7" y="1827.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="670.7" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (8 samples, 0.56%)</title><rect x="667.7" y="1811.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="670.7" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.create (8 samples, 0.56%)</title><rect x="667.7" y="1795.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="670.7" y="1806.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="671.0" y="1779.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="674.0" y="1790.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.21%)</title><rect x="671.8" y="1779.0" width="2.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="674.8" y="1790.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.21%)</title><rect x="671.8" y="1763.0" width="2.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="674.8" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/497403166.accept (3 samples, 0.21%)</title><rect x="674.3" y="1859.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="677.3" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="675.2" y="1843.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="678.2" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.14%)</title><rect x="675.2" y="1827.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="678.2" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.14%)</title><rect x="675.2" y="1811.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="678.2" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="676.0" y="1795.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="679.0" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.07%)</title><rect x="676.0" y="1779.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="679.0" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (21 samples, 1.48%)</title><rect x="676.8" y="1923.0" width="17.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="679.8" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (21 samples, 1.48%)</title><rect x="676.8" y="1907.0" width="17.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="679.8" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.07%)</title><rect x="681.0" y="1891.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="684.0" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (15 samples, 1.06%)</title><rect x="681.8" y="1891.0" width="12.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="684.8" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/284210676.accept (15 samples, 1.06%)</title><rect x="681.8" y="1875.0" width="12.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="684.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (15 samples, 1.06%)</title><rect x="681.8" y="1859.0" width="12.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="684.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (15 samples, 1.06%)</title><rect x="681.8" y="1843.0" width="12.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="684.8" y="1854.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (15 samples, 1.06%)</title><rect x="681.8" y="1827.0" width="12.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="684.8" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.create (15 samples, 1.06%)</title><rect x="681.8" y="1811.0" width="12.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="684.8" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.42%)</title><rect x="694.3" y="1923.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="697.3" y="1934.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.35%)</title><rect x="695.1" y="1907.0" width="4.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="698.1" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 0.21%)</title><rect x="699.2" y="1939.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="702.2" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.21%)</title><rect x="699.2" y="1923.0" width="2.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="702.2" y="1934.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.21%)</title><rect x="699.2" y="1907.0" width="2.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="702.2" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (9 samples, 0.63%)</title><rect x="701.7" y="1987.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="704.7" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.63%)</title><rect x="701.7" y="1971.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="704.7" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.63%)</title><rect x="701.7" y="1955.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="704.7" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.63%)</title><rect x="701.7" y="1939.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="704.7" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/2050380040.run (4 samples, 0.28%)</title><rect x="705.9" y="1923.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="708.9" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (211 samples, 14.85%)</title><rect x="709.2" y="1987.0" width="175.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="712.2" y="1998.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (210 samples, 14.78%)</title><rect x="710.0" y="1971.0" width="174.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="713.0" y="1982.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (170 samples, 11.96%)</title><rect x="728.3" y="1955.0" width="141.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="731.3" y="1966.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (16 samples, 1.13%)</title><rect x="732.4" y="1939.0" width="13.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="735.4" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (16 samples, 1.13%)</title><rect x="732.4" y="1923.0" width="13.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="735.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (16 samples, 1.13%)</title><rect x="732.4" y="1907.0" width="13.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="735.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (16 samples, 1.13%)</title><rect x="732.4" y="1891.0" width="13.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="735.4" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (149 samples, 10.49%)</title><rect x="745.7" y="1939.0" width="123.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="748.7" y="1950.0">java/util/concu..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (149 samples, 10.49%)</title><rect x="745.7" y="1923.0" width="123.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="748.7" y="1934.0">sun/misc/Unsafe..</text>
</g>
<g>
<title>Unsafe_Park (139 samples, 9.78%)</title><rect x="750.7" y="1907.0" width="115.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="753.7" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (9 samples, 0.63%)</title><rect x="752.4" y="1891.0" width="7.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="755.4" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (31 samples, 2.18%)</title><rect x="759.9" y="1891.0" width="25.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="762.9" y="1902.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (12 samples, 0.84%)</title><rect x="764.0" y="1875.0" width="10.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="767.0" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.42%)</title><rect x="764.8" y="1859.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="767.8" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.21%)</title><rect x="767.3" y="1843.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="770.3" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (4 samples, 0.28%)</title><rect x="769.8" y="1859.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="772.8" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="773.1" y="1859.0" width="0.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="776.1" y="1870.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="774.0" y="1875.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="777.0" y="1886.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="774.8" y="1875.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="777.8" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (12 samples, 0.84%)</title><rect x="775.6" y="1875.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="778.6" y="1886.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="785.6" y="1891.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="788.6" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="786.4" y="1891.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="789.4" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (4 samples, 0.28%)</title><rect x="787.3" y="1891.0" width="3.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="790.3" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (27 samples, 1.90%)</title><rect x="790.6" y="1891.0" width="22.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="793.6" y="1902.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (49 samples, 3.45%)</title><rect x="813.0" y="1891.0" width="40.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="816.0" y="1902.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.28%)</title><rect x="853.7" y="1891.0" width="3.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="856.7" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.14%)</title><rect x="857.0" y="1891.0" width="1.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="860.0" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.14%)</title><rect x="858.7" y="1891.0" width="1.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="861.7" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.21%)</title><rect x="860.3" y="1891.0" width="2.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="863.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.14%)</title><rect x="862.8" y="1891.0" width="1.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="865.8" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.07%)</title><rect x="864.5" y="1891.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="867.5" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="865.3" y="1891.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="868.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="866.1" y="1907.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="869.1" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.07%)</title><rect x="867.0" y="1907.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="870.0" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.14%)</title><rect x="867.8" y="1907.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="870.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.14%)</title><rect x="869.5" y="1955.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="872.5" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.14%)</title><rect x="869.5" y="1939.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="872.5" y="1950.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.14%)</title><rect x="869.5" y="1923.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="872.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.14%)</title><rect x="869.5" y="1907.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="872.5" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (16 samples, 1.13%)</title><rect x="871.1" y="1955.0" width="13.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="874.1" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (16 samples, 1.13%)</title><rect x="871.1" y="1939.0" width="13.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="874.1" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (16 samples, 1.13%)</title><rect x="871.1" y="1923.0" width="13.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="874.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (16 samples, 1.13%)</title><rect x="871.1" y="1907.0" width="13.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="874.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="884.4" y="2035.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="887.4" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="884.4" y="2019.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="887.4" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="884.4" y="2003.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="887.4" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.07%)</title><rect x="884.4" y="1987.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="887.4" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.07%)</title><rect x="884.4" y="1971.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="887.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.07%)</title><rect x="884.4" y="1955.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="887.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.07%)</title><rect x="884.4" y="1939.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="887.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="884.4" y="1923.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="887.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="884.4" y="1907.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="887.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="884.4" y="1891.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="887.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="884.4" y="1875.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="887.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="884.4" y="1859.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="887.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="884.4" y="1843.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="887.4" y="1854.0"></text>
</g>
<g>
<title>start_thread (367 samples, 25.83%)</title><rect x="885.2" y="2035.0" width="304.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="888.2" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (367 samples, 25.83%)</title><rect x="885.2" y="2019.0" width="304.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="888.2" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (26 samples, 1.83%)</title><rect x="885.2" y="2003.0" width="21.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="888.2" y="2014.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 0.49%)</title><rect x="885.2" y="1987.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="888.2" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.49%)</title><rect x="885.2" y="1971.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="888.2" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (4 samples, 0.28%)</title><rect x="885.2" y="1955.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="888.2" y="1966.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.21%)</title><rect x="888.6" y="1955.0" width="2.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="891.6" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 1.34%)</title><rect x="891.1" y="1987.0" width="15.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="894.1" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 0.63%)</title><rect x="891.1" y="1971.0" width="7.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="894.1" y="1982.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.14%)</title><rect x="891.1" y="1955.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="894.1" y="1966.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.07%)</title><rect x="891.9" y="1939.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="894.9" y="1950.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.07%)</title><rect x="891.9" y="1923.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="894.9" y="1934.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::peek() (1 samples, 0.07%)</title><rect x="892.7" y="1955.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="895.7" y="1966.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.14%)</title><rect x="893.5" y="1955.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="896.5" y="1966.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.28%)</title><rect x="895.2" y="1955.0" width="3.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="898.2" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.28%)</title><rect x="898.5" y="1971.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="901.5" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.21%)</title><rect x="898.5" y="1955.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="901.5" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.14%)</title><rect x="898.5" y="1939.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="901.5" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.14%)</title><rect x="898.5" y="1923.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="901.5" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.14%)</title><rect x="898.5" y="1907.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="901.5" y="1918.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="900.2" y="1939.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="903.2" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.07%)</title><rect x="901.0" y="1955.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="904.0" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.07%)</title><rect x="901.0" y="1939.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="904.0" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.42%)</title><rect x="901.9" y="1971.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="904.9" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.42%)</title><rect x="901.9" y="1955.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="904.9" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.42%)</title><rect x="901.9" y="1939.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="904.9" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.42%)</title><rect x="901.9" y="1923.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="904.9" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.42%)</title><rect x="901.9" y="1907.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="904.9" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (6 samples, 0.42%)</title><rect x="901.9" y="1891.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="904.9" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.35%)</title><rect x="902.7" y="1875.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="905.7" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.14%)</title><rect x="904.3" y="1859.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="907.3" y="1870.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.07%)</title><rect x="906.0" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="909.0" y="1870.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.07%)</title><rect x="906.0" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="909.0" y="1854.0"></text>
</g>
<g>
<title>JavaThread::run() (338 samples, 23.79%)</title><rect x="906.8" y="2003.0" width="280.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="909.8" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (338 samples, 23.79%)</title><rect x="906.8" y="1987.0" width="280.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="909.8" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (337 samples, 23.72%)</title><rect x="906.8" y="1971.0" width="279.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="909.8" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (337 samples, 23.72%)</title><rect x="906.8" y="1955.0" width="279.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="909.8" y="1966.0">CompileBroker::invoke_compiler_on_met..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (336 samples, 23.65%)</title><rect x="906.8" y="1939.0" width="279.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="909.8" y="1950.0">C2Compiler::compile_method(ciEnv*, ci..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (336 samples, 23.65%)</title><rect x="906.8" y="1923.0" width="279.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="909.8" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*,..</text>
</g>
<g>
<title>Compile::Code_Gen() (193 samples, 13.58%)</title><rect x="906.8" y="1907.0" width="160.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="909.8" y="1918.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (6 samples, 0.42%)</title><rect x="906.8" y="1891.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="909.8" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (4 samples, 0.28%)</title><rect x="906.8" y="1875.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="909.8" y="1886.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.07%)</title><rect x="909.3" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="912.3" y="1870.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.07%)</title><rect x="909.3" y="1843.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="912.3" y="1854.0"></text>
</g>
<g>
<title>OopMap::set_narrowoop(VMRegImpl*) (1 samples, 0.07%)</title><rect x="909.3" y="1827.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="912.3" y="1838.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.07%)</title><rect x="909.3" y="1811.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="912.3" y="1822.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.14%)</title><rect x="910.2" y="1875.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="913.2" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.14%)</title><rect x="910.2" y="1859.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="913.2" y="1870.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.14%)</title><rect x="910.2" y="1843.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="913.2" y="1854.0"></text>
</g>
<g>
<title>compN_rReg_imm_klassNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.07%)</title><rect x="911.0" y="1827.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="914.0" y="1838.0"></text>
</g>
<g>
<title>MacroAssembler::cmp_narrow_klass(RegisterImpl*, Klass*) (1 samples, 0.07%)</title><rect x="911.0" y="1811.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="914.0" y="1822.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_initialize() (1 samples, 0.07%)</title><rect x="911.0" y="1795.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="914.0" y="1806.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (7 samples, 0.49%)</title><rect x="911.8" y="1891.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="914.8" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.14%)</title><rect x="913.5" y="1875.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="916.5" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="913.5" y="1859.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="916.5" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="913.5" y="1843.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="916.5" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="914.3" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="917.3" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="914.3" y="1843.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="917.3" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.14%)</title><rect x="915.1" y="1875.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="918.1" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.14%)</title><rect x="915.1" y="1859.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="918.1" y="1870.0"></text>
</g>
<g>
<title>JVMState::of_depth(int) const (1 samples, 0.07%)</title><rect x="916.8" y="1875.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="919.8" y="1886.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.07%)</title><rect x="917.6" y="1891.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="920.6" y="1902.0"></text>
</g>
<g>
<title>Matcher::match() (16 samples, 1.13%)</title><rect x="918.5" y="1891.0" width="13.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="921.5" y="1902.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.07%)</title><rect x="918.5" y="1875.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="921.5" y="1886.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.07%)</title><rect x="918.5" y="1859.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="921.5" y="1870.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (14 samples, 0.99%)</title><rect x="919.3" y="1875.0" width="11.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="922.3" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (8 samples, 0.56%)</title><rect x="920.1" y="1859.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="923.1" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.07%)</title><rect x="926.8" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="929.8" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 0.28%)</title><rect x="927.6" y="1859.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="930.6" y="1870.0"></text>
</g>
<g>
<title>LoadLNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="929.3" y="1843.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="932.3" y="1854.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="930.1" y="1843.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="933.1" y="1854.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="930.1" y="1827.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="933.1" y="1838.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="930.1" y="1811.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="933.1" y="1822.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="930.1" y="1795.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="933.1" y="1806.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="930.1" y="1779.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="933.1" y="1790.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="930.9" y="1875.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="933.9" y="1886.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.07%)</title><rect x="931.7" y="1891.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="934.7" y="1902.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.07%)</title><rect x="931.7" y="1875.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="934.7" y="1886.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="931.7" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="934.7" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (10 samples, 0.70%)</title><rect x="932.6" y="1891.0" width="8.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="935.6" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (10 samples, 0.70%)</title><rect x="932.6" y="1875.0" width="8.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="935.6" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="932.6" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="935.6" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (7 samples, 0.49%)</title><rect x="933.4" y="1859.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="936.4" y="1870.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.07%)</title><rect x="933.4" y="1843.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="936.4" y="1854.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (4 samples, 0.28%)</title><rect x="934.2" y="1843.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="937.2" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.07%)</title><rect x="937.6" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="940.6" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.07%)</title><rect x="938.4" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="941.4" y="1854.0"></text>
</g>
<g>
<title>indOffset8Oper::base_position() const (1 samples, 0.07%)</title><rect x="938.4" y="1827.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="941.4" y="1838.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.14%)</title><rect x="939.2" y="1859.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.2" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.07%)</title><rect x="940.0" y="1843.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="943.0" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.07%)</title><rect x="940.9" y="1891.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="943.9" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (150 samples, 10.56%)</title><rect x="941.7" y="1891.0" width="124.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="944.7" y="1902.0">PhaseChaitin::R..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="942.5" y="1875.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="945.5" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="943.4" y="1875.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="946.4" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="944.2" y="1875.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="947.2" y="1886.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.07%)</title><rect x="945.0" y="1875.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="948.0" y="1886.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.07%)</title><rect x="945.9" y="1875.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="948.9" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (4 samples, 0.28%)</title><rect x="946.7" y="1875.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="949.7" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (7 samples, 0.49%)</title><rect x="950.0" y="1875.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="953.0" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="950.0" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="953.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.28%)</title><rect x="950.8" y="1859.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="953.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.14%)</title><rect x="954.2" y="1859.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="957.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (8 samples, 0.56%)</title><rect x="955.8" y="1875.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="958.8" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="956.7" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="959.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (6 samples, 0.42%)</title><rect x="957.5" y="1859.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="960.5" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.21%)</title><rect x="960.0" y="1843.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="963.0" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (18 samples, 1.27%)</title><rect x="962.5" y="1875.0" width="14.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="965.5" y="1886.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.07%)</title><rect x="973.3" y="1859.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="976.3" y="1870.0"></text>
</g>
<g>
<title>MachSpillCopyNode::MachSpillCopyNode(Node*, RegMask const&amp;, RegMask const&amp;) (1 samples, 0.07%)</title><rect x="974.1" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="977.1" y="1870.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="974.1" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="977.1" y="1854.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="974.1" y="1827.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="977.1" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (2 samples, 0.14%)</title><rect x="974.9" y="1859.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="977.9" y="1870.0"></text>
</g>
<g>
<title>Block::find_node(Node const*) const (1 samples, 0.07%)</title><rect x="974.9" y="1843.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="977.9" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.07%)</title><rect x="975.8" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="978.8" y="1854.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.07%)</title><rect x="975.8" y="1827.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="978.8" y="1838.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.07%)</title><rect x="976.6" y="1859.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="979.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (26 samples, 1.83%)</title><rect x="977.4" y="1875.0" width="21.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="980.4" y="1886.0">P..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.14%)</title><rect x="989.9" y="1859.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="992.9" y="1870.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.14%)</title><rect x="991.5" y="1859.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="994.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 0.42%)</title><rect x="993.2" y="1859.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="996.2" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="997.3" y="1843.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1000.3" y="1854.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.07%)</title><rect x="998.2" y="1859.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1001.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.14%)</title><rect x="999.0" y="1875.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1002.0" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.07%)</title><rect x="999.8" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1002.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (13 samples, 0.91%)</title><rect x="1000.7" y="1875.0" width="10.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1003.7" y="1886.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (2 samples, 0.14%)</title><rect x="1006.5" y="1859.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1009.5" y="1870.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="1007.3" y="1843.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1010.3" y="1854.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1008.1" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1011.1" y="1870.0"></text>
</g>
<g>
<title>MachTypeNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1008.1" y="1843.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1011.1" y="1854.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="1009.0" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1012.0" y="1870.0"></text>
</g>
<g>
<title>loadConI0Node::bottom_type() const (1 samples, 0.07%)</title><rect x="1009.8" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1012.8" y="1870.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1009.8" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1012.8" y="1854.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1009.8" y="1827.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1012.8" y="1838.0"></text>
</g>
<g>
<title>loadConPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1010.6" y="1859.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1013.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.07%)</title><rect x="1011.5" y="1875.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1014.5" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (9 samples, 0.63%)</title><rect x="1012.3" y="1875.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1015.3" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.28%)</title><rect x="1015.6" y="1859.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1018.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1017.3" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1020.3" y="1854.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.07%)</title><rect x="1017.3" y="1827.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1020.3" y="1838.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="1017.3" y="1811.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1020.3" y="1822.0"></text>
</g>
<g>
<title>rRegLOper::type() const (1 samples, 0.07%)</title><rect x="1018.1" y="1843.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1021.1" y="1854.0"></text>
</g>
<g>
<title>RegMask::num_registers(unsigned int) (1 samples, 0.07%)</title><rect x="1018.9" y="1859.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1021.9" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (24 samples, 1.69%)</title><rect x="1019.8" y="1875.0" width="19.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1022.8" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (24 samples, 1.69%)</title><rect x="1019.8" y="1859.0" width="19.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1022.8" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (24 samples, 1.69%)</title><rect x="1019.8" y="1843.0" width="19.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1022.8" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (6 samples, 0.42%)</title><rect x="1020.6" y="1827.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1023.6" y="1838.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1024.8" y="1811.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1027.8" y="1822.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (15 samples, 1.06%)</title><rect x="1025.6" y="1827.0" width="12.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1028.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.14%)</title><rect x="1038.0" y="1827.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1041.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 0.28%)</title><rect x="1039.7" y="1875.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1042.7" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="1040.5" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1043.5" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="1041.4" y="1859.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1044.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (6 samples, 0.42%)</title><rect x="1043.0" y="1875.0" width="5.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1046.0" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="1044.7" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1047.7" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.21%)</title><rect x="1045.5" y="1859.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1048.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.07%)</title><rect x="1048.0" y="1875.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1051.0" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="1048.0" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1051.0" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (17 samples, 1.20%)</title><rect x="1048.8" y="1875.0" width="14.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1051.8" y="1886.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.07%)</title><rect x="1054.6" y="1859.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1057.6" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (8 samples, 0.56%)</title><rect x="1055.5" y="1859.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1058.5" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1061.3" y="1843.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1064.3" y="1854.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.07%)</title><rect x="1062.1" y="1859.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1065.1" y="1870.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1062.1" y="1843.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1065.1" y="1854.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.07%)</title><rect x="1062.9" y="1875.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1065.9" y="1886.0"></text>
</g>
<g>
<title>addL_rReg_immNode::out_RegMask() const (1 samples, 0.07%)</title><rect x="1063.8" y="1875.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1066.8" y="1886.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (2 samples, 0.14%)</title><rect x="1064.6" y="1875.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1067.6" y="1886.0"></text>
</g>
<g>
<title>jmpConUNode::ideal_Opcode() const (1 samples, 0.07%)</title><rect x="1066.3" y="1891.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1069.3" y="1902.0"></text>
</g>
<g>
<title>Compile::Optimize() (126 samples, 8.87%)</title><rect x="1067.1" y="1907.0" width="104.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1070.1" y="1918.0">Compile::Opt..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.14%)</title><rect x="1067.9" y="1891.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1070.9" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.14%)</title><rect x="1067.9" y="1875.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1070.9" y="1886.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (2 samples, 0.14%)</title><rect x="1067.9" y="1859.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1070.9" y="1870.0"></text>
</g>
<g>
<title>Node::subsume_by(Node*, Compile*) (2 samples, 0.14%)</title><rect x="1067.9" y="1843.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1070.9" y="1854.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (2 samples, 0.14%)</title><rect x="1067.9" y="1827.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1070.9" y="1838.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.14%)</title><rect x="1069.6" y="1891.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1072.6" y="1902.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.07%)</title><rect x="1070.4" y="1875.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1073.4" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.28%)</title><rect x="1071.3" y="1891.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1074.3" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.21%)</title><rect x="1071.3" y="1875.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1074.3" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="1071.3" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1074.3" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.07%)</title><rect x="1071.3" y="1843.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1074.3" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.07%)</title><rect x="1071.3" y="1827.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1074.3" y="1838.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1071.3" y="1811.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1074.3" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1071.3" y="1795.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1074.3" y="1806.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1071.3" y="1779.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1074.3" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="1072.1" y="1859.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1075.1" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.07%)</title><rect x="1072.1" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1075.1" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1072.9" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1075.9" y="1854.0"></text>
</g>
<g>
<title>PhaseTransform::zerocon(BasicType) (1 samples, 0.07%)</title><rect x="1073.7" y="1875.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1076.7" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.07%)</title><rect x="1074.6" y="1891.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1077.6" y="1902.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.07%)</title><rect x="1075.4" y="1891.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1078.4" y="1902.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1075.4" y="1875.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1078.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (91 samples, 6.40%)</title><rect x="1076.2" y="1891.0" width="75.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1079.2" y="1902.0">PhaseIde..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1076.2" y="1875.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.2" y="1886.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.07%)</title><rect x="1077.1" y="1875.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1080.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.35%)</title><rect x="1077.9" y="1875.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1080.9" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.14%)</title><rect x="1080.4" y="1859.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1083.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.35%)</title><rect x="1082.0" y="1875.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1085.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1085.4" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (71 samples, 5.00%)</title><rect x="1086.2" y="1875.0" width="59.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1089.2" y="1886.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (64 samples, 4.50%)</title><rect x="1092.0" y="1859.0" width="53.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1095.0" y="1870.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (60 samples, 4.22%)</title><rect x="1094.5" y="1843.0" width="49.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1097.5" y="1854.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.07%)</title><rect x="1126.1" y="1827.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.1" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1126.1" y="1811.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.1" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1126.1" y="1795.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1129.1" y="1806.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (19 samples, 1.34%)</title><rect x="1126.9" y="1827.0" width="15.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.14%)</title><rect x="1142.7" y="1827.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.7" y="1838.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1144.3" y="1843.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1147.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.14%)</title><rect x="1145.2" y="1875.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.28%)</title><rect x="1146.8" y="1875.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (2 samples, 0.14%)</title><rect x="1148.5" y="1859.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.5" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.07%)</title><rect x="1148.5" y="1843.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_use_block(Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1149.3" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.3" y="1854.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1150.1" y="1875.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.1" y="1886.0"></text>
</g>
<g>
<title>SuperWord::SuperWord(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="1151.0" y="1875.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (20 samples, 1.41%)</title><rect x="1151.8" y="1891.0" width="16.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.8" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (20 samples, 1.41%)</title><rect x="1151.8" y="1875.0" width="16.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.8" y="1886.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1152.6" y="1859.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.6" y="1870.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1152.6" y="1843.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.6" y="1854.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (3 samples, 0.21%)</title><rect x="1153.5" y="1859.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.5" y="1870.0"></text>
</g>
<g>
<title>IfNode::up_one_dom(Node*, bool) (1 samples, 0.07%)</title><rect x="1153.5" y="1843.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.5" y="1854.0"></text>
</g>
<g>
<title>MultiNode::proj_out(unsigned int) const (1 samples, 0.07%)</title><rect x="1154.3" y="1843.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1155.1" y="1843.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.1" y="1854.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1156.0" y="1859.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.0" y="1870.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.14%)</title><rect x="1156.0" y="1843.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.0" y="1854.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (2 samples, 0.14%)</title><rect x="1156.0" y="1827.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.0" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (2 samples, 0.14%)</title><rect x="1156.0" y="1811.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.0" y="1822.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1156.0" y="1795.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.0" y="1806.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1156.0" y="1779.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.0" y="1790.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1156.8" y="1795.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.8" y="1806.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1156.8" y="1779.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.8" y="1790.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1157.6" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.6" y="1870.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1157.6" y="1843.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.6" y="1854.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1157.6" y="1827.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.6" y="1838.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (3 samples, 0.21%)</title><rect x="1158.4" y="1859.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.4" y="1870.0"></text>
</g>
<g>
<title>NodeHash::grow() (2 samples, 0.14%)</title><rect x="1159.3" y="1843.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1160.9" y="1859.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 0.28%)</title><rect x="1161.8" y="1859.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.8" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1165.1" y="1859.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.1" y="1870.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1165.1" y="1843.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.1" y="1854.0"></text>
</g>
<g>
<title>StoreCMNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1165.9" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.9" y="1870.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1165.9" y="1843.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.9" y="1854.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1165.9" y="1827.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.9" y="1838.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1166.7" y="1859.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.7" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1166.7" y="1843.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.7" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.7" y="1827.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.7" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.7" y="1811.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.7" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.7" y="1795.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.7" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.7" y="1779.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.7" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.7" y="1763.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.7" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.7" y="1747.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.7" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.7" y="1731.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.7" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.7" y="1715.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.7" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.7" y="1699.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.7" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.7" y="1683.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.7" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.7" y="1667.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.7" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.7" y="1651.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.7" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.7" y="1635.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.7" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.7" y="1619.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.7" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.7" y="1603.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.7" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.7" y="1587.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.7" y="1598.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1166.7" y="1571.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.7" y="1582.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1166.7" y="1555.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.7" y="1566.0"></text>
</g>
<g>
<title>URShiftLNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1167.6" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.6" y="1870.0"></text>
</g>
<g>
<title>PhaseTransform::type(Node const*) const (1 samples, 0.07%)</title><rect x="1167.6" y="1843.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.6" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (2 samples, 0.14%)</title><rect x="1168.4" y="1891.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.4" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (2 samples, 0.14%)</title><rect x="1168.4" y="1875.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.4" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="1168.4" y="1859.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.4" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (2 samples, 0.14%)</title><rect x="1168.4" y="1843.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.4" y="1854.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.07%)</title><rect x="1168.4" y="1827.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.4" y="1838.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1169.2" y="1827.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1172.2" y="1838.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.07%)</title><rect x="1170.1" y="1891.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.1" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.07%)</title><rect x="1170.1" y="1875.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.1" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::initialize_object(AllocateNode*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1170.1" y="1859.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.1" y="1870.0"></text>
</g>
<g>
<title>TypeRawPtr::make(unsigned char*) (1 samples, 0.07%)</title><rect x="1170.1" y="1843.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.1" y="1854.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1170.9" y="1891.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1173.9" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 0.99%)</title><rect x="1171.7" y="1907.0" width="11.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.7" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 0.99%)</title><rect x="1171.7" y="1891.0" width="11.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.7" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.99%)</title><rect x="1171.7" y="1875.0" width="11.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.7" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.99%)</title><rect x="1171.7" y="1859.0" width="11.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.7" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 0.99%)</title><rect x="1171.7" y="1843.0" width="11.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.7" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 0.91%)</title><rect x="1171.7" y="1827.0" width="10.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.7" y="1838.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1171.7" y="1811.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.7" y="1822.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1171.7" y="1795.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.7" y="1806.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1171.7" y="1779.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.7" y="1790.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1171.7" y="1763.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.7" y="1774.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1171.7" y="1747.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.7" y="1758.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1171.7" y="1731.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.7" y="1742.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1171.7" y="1715.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.7" y="1726.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1171.7" y="1699.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.7" y="1710.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1171.7" y="1683.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.7" y="1694.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1171.7" y="1667.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.7" y="1678.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1171.7" y="1651.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.7" y="1662.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1171.7" y="1635.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.7" y="1646.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1171.7" y="1619.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.7" y="1630.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1171.7" y="1603.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.7" y="1614.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1171.7" y="1587.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.7" y="1598.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1171.7" y="1571.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.7" y="1582.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1171.7" y="1555.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.7" y="1566.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.07%)</title><rect x="1171.7" y="1539.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.7" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.70%)</title><rect x="1172.6" y="1811.0" width="8.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.6" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.70%)</title><rect x="1172.6" y="1795.0" width="8.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.6" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.70%)</title><rect x="1172.6" y="1779.0" width="8.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.6" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.70%)</title><rect x="1172.6" y="1763.0" width="8.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.6" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.70%)</title><rect x="1172.6" y="1747.0" width="8.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.6" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.70%)</title><rect x="1172.6" y="1731.0" width="8.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.6" y="1742.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1172.6" y="1715.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.6" y="1726.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1172.6" y="1699.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.6" y="1710.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1172.6" y="1683.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.6" y="1694.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1172.6" y="1667.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.6" y="1678.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1172.6" y="1651.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.6" y="1662.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1172.6" y="1635.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.6" y="1646.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1172.6" y="1619.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.6" y="1630.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1172.6" y="1603.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.6" y="1614.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1172.6" y="1587.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.6" y="1598.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1172.6" y="1571.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.6" y="1582.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1172.6" y="1555.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.6" y="1566.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1172.6" y="1539.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.6" y="1550.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1172.6" y="1523.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.6" y="1534.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1172.6" y="1507.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.6" y="1518.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1172.6" y="1491.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.6" y="1502.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.07%)</title><rect x="1172.6" y="1475.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.6" y="1486.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.07%)</title><rect x="1172.6" y="1459.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.6" y="1470.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.28%)</title><rect x="1173.4" y="1715.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.4" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.28%)</title><rect x="1173.4" y="1699.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.4" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.28%)</title><rect x="1173.4" y="1683.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.4" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.28%)</title><rect x="1173.4" y="1667.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.4" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.28%)</title><rect x="1173.4" y="1651.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.4" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.28%)</title><rect x="1173.4" y="1635.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.4" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1173.4" y="1619.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.4" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1173.4" y="1603.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.4" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1173.4" y="1587.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.4" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1173.4" y="1571.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.4" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1173.4" y="1555.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.4" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1173.4" y="1539.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.4" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1173.4" y="1523.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.4" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1173.4" y="1507.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.4" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1173.4" y="1491.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.4" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1173.4" y="1475.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.4" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1173.4" y="1459.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.4" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1173.4" y="1443.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.4" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1173.4" y="1427.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.4" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1173.4" y="1411.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.4" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1173.4" y="1395.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.4" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1173.4" y="1379.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.4" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1173.4" y="1363.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.4" y="1374.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1173.4" y="1347.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.4" y="1358.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1173.4" y="1331.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.4" y="1342.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1173.4" y="1315.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.4" y="1326.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1173.4" y="1299.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.4" y="1310.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.07%)</title><rect x="1173.4" y="1283.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.4" y="1294.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1173.4" y="1267.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.4" y="1278.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1173.4" y="1251.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.4" y="1262.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1173.4" y="1235.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.4" y="1246.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.2" y="1523.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.2" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.2" y="1507.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.2" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1174.2" y="1491.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.2" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1174.2" y="1475.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.2" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1174.2" y="1459.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1174.2" y="1443.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.2" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1174.2" y="1427.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.2" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.2" y="1411.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.2" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1174.2" y="1395.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.2" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1174.2" y="1379.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.2" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1174.2" y="1363.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.2" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1174.2" y="1347.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.2" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1174.2" y="1331.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.2" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.2" y="1315.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.2" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1174.2" y="1299.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.2" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1174.2" y="1283.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.2" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1174.2" y="1267.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.2" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1174.2" y="1251.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.2" y="1262.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1174.2" y="1235.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.2" y="1246.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1174.2" y="1219.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.2" y="1230.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.07%)</title><rect x="1174.2" y="1203.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.2" y="1214.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1174.2" y="1187.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.2" y="1198.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1174.2" y="1171.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.2" y="1182.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1174.2" y="1155.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.2" y="1166.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.07%)</title><rect x="1174.2" y="1139.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.2" y="1150.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.07%)</title><rect x="1174.2" y="1123.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.2" y="1134.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.07%)</title><rect x="1174.2" y="1107.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.2" y="1118.0"></text>
</g>
<g>
<title>ciField::ciField(fieldDescriptor*) (1 samples, 0.07%)</title><rect x="1174.2" y="1091.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.2" y="1102.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.07%)</title><rect x="1174.2" y="1075.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.2" y="1086.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol*) (1 samples, 0.07%)</title><rect x="1174.2" y="1059.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.2" y="1070.0"></text>
</g>
<g>
<title>ciKlass::is_subtype_of(ciKlass*) (1 samples, 0.07%)</title><rect x="1175.1" y="1523.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.1" y="1534.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.9" y="1619.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.9" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.9" y="1603.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.9" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.9" y="1587.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.9" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.9" y="1571.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.9" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.9" y="1555.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.9" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.9" y="1539.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.9" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.9" y="1523.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.9" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.9" y="1507.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.9" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.9" y="1491.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.9" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.9" y="1475.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.9" y="1459.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.9" y="1443.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.9" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.9" y="1427.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.9" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.9" y="1411.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.9" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.9" y="1395.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.9" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.9" y="1379.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.9" y="1363.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.9" y="1347.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.9" y="1331.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.9" y="1342.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.9" y="1315.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.9" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.9" y="1299.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.9" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.9" y="1283.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.9" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.9" y="1267.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.9" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.9" y="1251.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.9" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.9" y="1235.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.9" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.9" y="1219.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.9" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.9" y="1203.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.9" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.9" y="1187.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.9" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.9" y="1171.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.9" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.9" y="1155.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.9" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.9" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.9" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.9" y="1123.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.9" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.9" y="1107.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.9" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.9" y="1091.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.9" y="1075.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.9" y="1059.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.9" y="1043.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.9" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.9" y="1027.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.9" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.9" y="1011.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.9" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.9" y="995.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.9" y="979.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.9" y="963.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.9" y="947.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.9" y="958.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.07%)</title><rect x="1175.9" y="931.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.9" y="942.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.07%)</title><rect x="1175.9" y="915.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.9" y="926.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1175.9" y="899.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.9" y="910.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.35%)</title><rect x="1176.7" y="1715.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.7" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.35%)</title><rect x="1176.7" y="1699.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.7" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.35%)</title><rect x="1176.7" y="1683.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.35%)</title><rect x="1176.7" y="1667.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.7" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.35%)</title><rect x="1176.7" y="1651.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.7" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.35%)</title><rect x="1176.7" y="1635.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.7" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.35%)</title><rect x="1176.7" y="1619.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.7" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.35%)</title><rect x="1176.7" y="1603.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.7" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.35%)</title><rect x="1176.7" y="1587.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.7" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.35%)</title><rect x="1176.7" y="1571.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.7" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.35%)</title><rect x="1176.7" y="1555.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.7" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.35%)</title><rect x="1176.7" y="1539.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.7" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.35%)</title><rect x="1176.7" y="1523.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.7" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.28%)</title><rect x="1176.7" y="1507.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.28%)</title><rect x="1176.7" y="1491.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.28%)</title><rect x="1176.7" y="1475.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.7" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.28%)</title><rect x="1176.7" y="1459.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.28%)</title><rect x="1176.7" y="1443.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.7" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.28%)</title><rect x="1176.7" y="1427.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.7" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.28%)</title><rect x="1176.7" y="1411.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.7" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.28%)</title><rect x="1176.7" y="1395.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.28%)</title><rect x="1176.7" y="1379.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.7" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.28%)</title><rect x="1176.7" y="1363.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.7" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.28%)</title><rect x="1176.7" y="1347.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.7" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.28%)</title><rect x="1176.7" y="1331.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.7" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.28%)</title><rect x="1176.7" y="1315.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.7" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.28%)</title><rect x="1176.7" y="1299.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.7" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.28%)</title><rect x="1176.7" y="1283.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.7" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.28%)</title><rect x="1176.7" y="1267.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.7" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.28%)</title><rect x="1176.7" y="1251.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.7" y="1262.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1176.7" y="1235.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="1246.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1176.7" y="1219.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.7" y="1230.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.07%)</title><rect x="1176.7" y="1203.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.7" y="1214.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.07%)</title><rect x="1176.7" y="1187.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.7" y="1198.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.07%)</title><rect x="1176.7" y="1171.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="1182.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.07%)</title><rect x="1176.7" y="1155.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.7" y="1166.0"></text>
</g>
<g>
<title>BitMap::set_union(BitMap) (1 samples, 0.07%)</title><rect x="1176.7" y="1139.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.7" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1177.5" y="1235.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.5" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1177.5" y="1219.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.5" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1177.5" y="1203.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1177.5" y="1187.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1177.5" y="1171.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1177.5" y="1155.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1177.5" y="1139.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.5" y="1123.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.5" y="1107.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.5" y="1091.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.5" y="1075.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.5" y="1059.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.5" y="1043.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.5" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.5" y="1027.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.5" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.5" y="1011.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.5" y="995.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.5" y="979.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.5" y="963.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.5" y="947.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.5" y="958.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1177.5" y="931.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.5" y="942.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1177.5" y="915.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="926.0"></text>
</g>
<g>
<title>InlineTree::build_inline_tree_for_callee(ciMethod*, JVMState*, int) (1 samples, 0.07%)</title><rect x="1177.5" y="899.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.5" y="910.0"></text>
</g>
<g>
<title>ciMethod::interpreter_call_site_count(int) (1 samples, 0.07%)</title><rect x="1177.5" y="883.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="894.0"></text>
</g>
<g>
<title>ciMethod::scale_count(int, float) (1 samples, 0.07%)</title><rect x="1177.5" y="867.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.5" y="878.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.4" y="1123.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.4" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.4" y="1107.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.4" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.4" y="1091.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.4" y="1075.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.4" y="1059.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.4" y="1043.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.4" y="1027.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.4" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.4" y="1011.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.4" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.4" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.4" y="1006.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.07%)</title><rect x="1178.4" y="979.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="990.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1178.4" y="963.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.4" y="974.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1178.4" y="947.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.4" y="958.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1178.4" y="931.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.4" y="942.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="1178.4" y="915.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1179.2" y="1235.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.2" y="1246.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1179.2" y="1219.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.2" y="1230.0"></text>
</g>
<g>
<title>GraphKit::basic_plus_adr(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1179.2" y="1203.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.2" y="1214.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1179.2" y="1187.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.2" y="1198.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1180.0" y="1507.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.0" y="1518.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.9" y="1811.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.9" y="1795.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1180.9" y="1779.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1180.9" y="1763.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1180.9" y="1747.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1180.9" y="1731.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.9" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1180.9" y="1715.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.9" y="1699.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1180.9" y="1683.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.9" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1180.9" y="1667.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1180.9" y="1651.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1180.9" y="1635.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.9" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1180.9" y="1619.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.9" y="1603.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1180.9" y="1587.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.9" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1180.9" y="1571.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1180.9" y="1555.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1180.9" y="1539.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.9" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1180.9" y="1523.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.9" y="1507.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.9" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1180.9" y="1491.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.9" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1180.9" y="1475.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1180.9" y="1459.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1180.9" y="1443.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1180.9" y="1427.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.9" y="1411.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.9" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1180.9" y="1395.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.9" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1180.9" y="1379.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1180.9" y="1363.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1180.9" y="1347.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1180.9" y="1331.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.9" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.9" y="1315.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1180.9" y="1299.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1180.9" y="1283.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.9" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1180.9" y="1267.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1180.9" y="1251.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.9" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1180.9" y="1235.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="1246.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.9" y="1219.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.9" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.9" y="1203.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1180.9" y="1187.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1180.9" y="1171.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.9" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1180.9" y="1155.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1180.9" y="1139.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.9" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1180.9" y="1123.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.9" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.9" y="1107.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.9" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1180.9" y="1091.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1180.9" y="1075.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1180.9" y="1059.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1180.9" y="1043.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1180.9" y="1027.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.9" y="1011.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.9" y="995.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.9" y="979.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.9" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.9" y="947.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.9" y="931.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.9" y="915.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.9" y="899.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.9" y="883.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.9" y="867.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.9" y="851.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1180.9" y="835.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1180.9" y="819.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="830.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.07%)</title><rect x="1180.9" y="803.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.9" y="814.0"></text>
</g>
<g>
<title>MemBarNode::make(Compile*, int, int, Node*) (1 samples, 0.07%)</title><rect x="1180.9" y="787.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="798.0"></text>
</g>
<g>
<title>MemBarNode::MemBarNode(Compile*, int, Node*) (1 samples, 0.07%)</title><rect x="1180.9" y="771.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="782.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="1180.9" y="755.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="766.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.7" y="1011.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.7" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.7" y="995.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.7" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.7" y="979.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.7" y="963.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.7" y="947.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.7" y="931.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.7" y="915.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.7" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.7" y="899.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.7" y="883.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.7" y="867.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.7" y="851.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.7" y="835.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.7" y="819.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="830.0"></text>
</g>
<g>
<title>Parse::can_not_compile_call_site(ciMethod*, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1181.7" y="803.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1182.5" y="1827.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.5" y="1838.0"></text>
</g>
<g>
<title>Parse::dynamic_branch_prediction(float&amp;, BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1182.5" y="1811.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.5" y="1822.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.07%)</title><rect x="1182.5" y="1795.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.5" y="1806.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.14%)</title><rect x="1183.4" y="1907.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.4" y="1918.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1183.4" y="1891.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.4" y="1902.0"></text>
</g>
<g>
<title>Compile::update_dead_node_list(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1184.2" y="1891.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.2" y="1902.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.07%)</title><rect x="1185.0" y="1907.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.0" y="1918.0"></text>
</g>
<g>
<title>Dependencies::encode_content_bytes() (1 samples, 0.07%)</title><rect x="1185.0" y="1891.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.0" y="1902.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.07%)</title><rect x="1185.8" y="1939.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.8" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.07%)</title><rect x="1185.8" y="1923.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.8" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.07%)</title><rect x="1185.8" y="1907.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.8" y="1918.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.07%)</title><rect x="1185.8" y="1891.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.8" y="1902.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.07%)</title><rect x="1185.8" y="1875.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.8" y="1886.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.07%)</title><rect x="1185.8" y="1859.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.8" y="1870.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.07%)</title><rect x="1185.8" y="1843.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.8" y="1854.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.07%)</title><rect x="1185.8" y="1827.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.8" y="1838.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1186.7" y="1971.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.7" y="1982.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1186.7" y="1955.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.7" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1186.7" y="1939.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.7" y="1950.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1186.7" y="1923.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1189.7" y="1934.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.07%)</title><rect x="1186.7" y="1907.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.7" y="1918.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.07%)</title><rect x="1186.7" y="1891.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.7" y="1902.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.07%)</title><rect x="1186.7" y="1875.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.7" y="1886.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.21%)</title><rect x="1187.5" y="2003.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.5" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.21%)</title><rect x="1187.5" y="1987.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.5" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.14%)</title><rect x="1187.5" y="1971.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.5" y="1982.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.07%)</title><rect x="1188.3" y="1955.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.3" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.07%)</title><rect x="1188.3" y="1939.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.3" y="1950.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1188.3" y="1923.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.3" y="1934.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1188.3" y="1907.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.3" y="1918.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="1188.3" y="1891.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.3" y="1902.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.07%)</title><rect x="1188.3" y="1875.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.3" y="1886.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.07%)</title><rect x="1188.3" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.3" y="1870.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.07%)</title><rect x="1189.2" y="1971.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.2" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.07%)</title><rect x="1189.2" y="1955.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.2" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.07%)</title><rect x="1189.2" y="1939.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.2" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.07%)</title><rect x="1189.2" y="1923.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.2" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.07%)</title><rect x="1189.2" y="1907.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.2" y="1918.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.07%)</title><rect x="1189.2" y="1891.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.2" y="1902.0"></text>
</g>
</g>
</svg>
