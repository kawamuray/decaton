<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1366" onload="init(evt)" viewBox="0 0 1200 1366" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1349"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1349"> </text>
<g id="frames">
<g>
<title>all (276 samples, 100.00%)</title><rect x="10.0" y="1315.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1326.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (22 samples, 7.97%)</title><rect x="10.0" y="1299.0" width="94.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1310.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (22 samples, 7.97%)</title><rect x="10.0" y="1283.0" width="94.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1294.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.36%)</title><rect x="10.0" y="1267.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.36%)</title><rect x="10.0" y="1251.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.36%)</title><rect x="14.3" y="1267.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.3" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.36%)</title><rect x="14.3" y="1251.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.3" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.36%)</title><rect x="14.3" y="1235.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.3" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.36%)</title><rect x="14.3" y="1219.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.3" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.36%)</title><rect x="18.6" y="1267.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.6" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.36%)</title><rect x="18.6" y="1251.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.6" y="1262.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.36%)</title><rect x="18.6" y="1235.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.6" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.36%)</title><rect x="18.6" y="1219.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.6" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.36%)</title><rect x="18.6" y="1203.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.6" y="1214.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 1.09%)</title><rect x="22.8" y="1267.0" width="12.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.8" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1392786029.accept (3 samples, 1.09%)</title><rect x="22.8" y="1251.0" width="12.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.8" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (3 samples, 1.09%)</title><rect x="22.8" y="1235.0" width="12.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.8" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (2 samples, 0.72%)</title><rect x="22.8" y="1219.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="25.8" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (2 samples, 0.72%)</title><rect x="22.8" y="1203.0" width="8.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.8" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 0.36%)</title><rect x="27.1" y="1187.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.36%)</title><rect x="27.1" y="1171.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="30.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.36%)</title><rect x="27.1" y="1155.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="30.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.36%)</title><rect x="27.1" y="1139.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.36%)</title><rect x="27.1" y="1123.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.36%)</title><rect x="27.1" y="1107.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.36%)</title><rect x="27.1" y="1091.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="30.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.36%)</title><rect x="27.1" y="1075.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.36%)</title><rect x="31.4" y="1219.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="34.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.36%)</title><rect x="31.4" y="1203.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 5.80%)</title><rect x="35.7" y="1267.0" width="68.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="38.7" y="1278.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 5.80%)</title><rect x="35.7" y="1251.0" width="68.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.7" y="1262.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (13 samples, 4.71%)</title><rect x="35.7" y="1235.0" width="55.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="38.7" y="1246.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.81%)</title><rect x="35.7" y="1219.0" width="21.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.7" y="1230.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.81%)</title><rect x="35.7" y="1203.0" width="21.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.7" y="1214.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.72%)</title><rect x="35.7" y="1187.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="38.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.72%)</title><rect x="35.7" y="1171.0" width="8.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (2 samples, 0.72%)</title><rect x="35.7" y="1155.0" width="8.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="38.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="35.7" y="1139.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="38.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="35.7" y="1123.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestHeader.apiKey (1 samples, 0.36%)</title><rect x="39.9" y="1139.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="42.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.forId (1 samples, 0.36%)</title><rect x="39.9" y="1123.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$244/1543564156.shouldBlock (1 samples, 0.36%)</title><rect x="44.2" y="1187.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.36%)</title><rect x="44.2" y="1171.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="47.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.36%)</title><rect x="44.2" y="1155.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.2" y="1166.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.36%)</title><rect x="44.2" y="1139.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.2" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.36%)</title><rect x="44.2" y="1123.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.36%)</title><rect x="48.5" y="1187.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="51.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.access$300 (1 samples, 0.36%)</title><rect x="48.5" y="1171.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.removeExpiredRequests (1 samples, 0.36%)</title><rect x="48.5" y="1155.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="51.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.36%)</title><rect x="52.8" y="1187.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="55.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.36%)</title><rect x="52.8" y="1171.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.36%)</title><rect x="52.8" y="1155.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="55.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.36%)</title><rect x="52.8" y="1139.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="55.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.36%)</title><rect x="52.8" y="1123.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="55.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.36%)</title><rect x="52.8" y="1107.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="55.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sessionHandler (1 samples, 0.36%)</title><rect x="52.8" y="1091.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="55.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 2.17%)</title><rect x="57.0" y="1219.0" width="25.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="60.0" y="1230.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 1.81%)</title><rect x="61.3" y="1203.0" width="21.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="64.3" y="1214.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.45%)</title><rect x="61.3" y="1187.0" width="17.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.45%)</title><rect x="61.3" y="1171.0" width="17.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (4 samples, 1.45%)</title><rect x="61.3" y="1155.0" width="17.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="64.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.36%)</title><rect x="61.3" y="1139.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="64.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.36%)</title><rect x="61.3" y="1123.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="61.3" y="1107.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="64.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="61.3" y="1091.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="64.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="61.3" y="1075.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="64.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.36%)</title><rect x="61.3" y="1059.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="64.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.36%)</title><rect x="61.3" y="1043.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="64.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.36%)</title><rect x="65.6" y="1139.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="68.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.36%)</title><rect x="65.6" y="1123.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="68.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.36%)</title><rect x="65.6" y="1107.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="68.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.36%)</title><rect x="65.6" y="1091.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="68.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.36%)</title><rect x="65.6" y="1075.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="68.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.36%)</title><rect x="65.6" y="1059.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.36%)</title><rect x="65.6" y="1043.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (2 samples, 0.72%)</title><rect x="69.9" y="1139.0" width="8.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="72.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (2 samples, 0.72%)</title><rect x="69.9" y="1123.0" width="8.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="72.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (2 samples, 0.72%)</title><rect x="69.9" y="1107.0" width="8.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="72.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.36%)</title><rect x="78.4" y="1187.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.36%)</title><rect x="78.4" y="1171.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="81.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="78.4" y="1155.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="78.4" y="1139.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="81.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="78.4" y="1123.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.36%)</title><rect x="78.4" y="1107.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.72%)</title><rect x="82.7" y="1219.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="85.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.72%)</title><rect x="82.7" y="1203.0" width="8.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="85.7" y="1214.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.36%)</title><rect x="82.7" y="1187.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="85.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.36%)</title><rect x="87.0" y="1187.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="90.0" y="1198.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.36%)</title><rect x="87.0" y="1171.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.0" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.36%)</title><rect x="87.0" y="1155.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.72%)</title><rect x="91.2" y="1235.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="94.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.72%)</title><rect x="91.2" y="1219.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="94.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.36%)</title><rect x="91.2" y="1203.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="94.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.36%)</title><rect x="91.2" y="1187.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="94.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.36%)</title><rect x="91.2" y="1171.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="94.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.36%)</title><rect x="91.2" y="1155.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="94.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.36%)</title><rect x="91.2" y="1139.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="94.2" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.36%)</title><rect x="91.2" y="1123.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="94.2" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.36%)</title><rect x="91.2" y="1107.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="94.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.36%)</title><rect x="95.5" y="1203.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="98.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.36%)</title><rect x="99.8" y="1235.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="102.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.36%)</title><rect x="99.8" y="1219.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="102.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.36%)</title><rect x="99.8" y="1203.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.36%)</title><rect x="99.8" y="1187.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.36%)</title><rect x="99.8" y="1171.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.36%)</title><rect x="99.8" y="1155.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.36%)</title><rect x="99.8" y="1139.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.36%)</title><rect x="99.8" y="1123.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="102.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.36%)</title><rect x="99.8" y="1107.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="102.8" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.36%)</title><rect x="99.8" y="1091.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="102.8" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.36%)</title><rect x="99.8" y="1075.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="102.8" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.36%)</title><rect x="99.8" y="1059.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="102.8" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.36%)</title><rect x="99.8" y="1043.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="102.8" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.36%)</title><rect x="99.8" y="1027.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="102.8" y="1038.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.36%)</title><rect x="99.8" y="1011.0" width="4.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="102.8" y="1022.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.36%)</title><rect x="99.8" y="995.0" width="4.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="102.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.run (151 samples, 54.71%)</title><rect x="104.1" y="1299.0" width="645.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="107.1" y="1310.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (151 samples, 54.71%)</title><rect x="104.1" y="1283.0" width="645.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="107.1" y="1294.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (151 samples, 54.71%)</title><rect x="104.1" y="1267.0" width="645.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="107.1" y="1278.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1051835364.run (146 samples, 52.90%)</title><rect x="104.1" y="1251.0" width="624.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="107.1" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1051835364.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (146 samples, 52.90%)</title><rect x="104.1" y="1235.0" width="624.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="107.1" y="1246.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (146 samples, 52.90%)</title><rect x="104.1" y="1219.0" width="624.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="107.1" y="1230.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (146 samples, 52.90%)</title><rect x="104.1" y="1203.0" width="624.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="107.1" y="1214.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (22 samples, 7.97%)</title><rect x="112.6" y="1187.0" width="94.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="115.6" y="1198.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (22 samples, 7.97%)</title><rect x="112.6" y="1171.0" width="94.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="115.6" y="1182.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (22 samples, 7.97%)</title><rect x="112.6" y="1155.0" width="94.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="115.6" y="1166.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (22 samples, 7.97%)</title><rect x="112.6" y="1139.0" width="94.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="115.6" y="1150.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (22 samples, 7.97%)</title><rect x="112.6" y="1123.0" width="94.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="115.6" y="1134.0">com/linecor..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (22 samples, 7.97%)</title><rect x="112.6" y="1107.0" width="94.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="115.6" y="1118.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 2.17%)</title><rect x="112.6" y="1091.0" width="25.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="115.6" y="1102.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.72%)</title><rect x="112.6" y="1075.0" width="8.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="115.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.72%)</title><rect x="112.6" y="1059.0" width="8.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="115.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.72%)</title><rect x="112.6" y="1043.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="115.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (2 samples, 0.72%)</title><rect x="112.6" y="1027.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="115.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.45%)</title><rect x="121.2" y="1075.0" width="17.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="124.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 1.45%)</title><rect x="121.2" y="1059.0" width="17.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="124.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 1.09%)</title><rect x="121.2" y="1043.0" width="12.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="124.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (1 samples, 0.36%)</title><rect x="121.2" y="1027.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="124.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF32 (1 samples, 0.36%)</title><rect x="125.4" y="1027.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="128.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.36%)</title><rect x="129.7" y="1027.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="132.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.36%)</title><rect x="134.0" y="1043.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="137.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (15 samples, 5.43%)</title><rect x="138.3" y="1091.0" width="64.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="141.3" y="1102.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.36%)</title><rect x="138.3" y="1075.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="141.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.36%)</title><rect x="138.3" y="1059.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="141.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.36%)</title><rect x="138.3" y="1043.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="141.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.36%)</title><rect x="138.3" y="1027.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="141.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.36%)</title><rect x="138.3" y="1011.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="141.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.36%)</title><rect x="142.5" y="1075.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="145.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.36%)</title><rect x="142.5" y="1059.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="145.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.36%)</title><rect x="142.5" y="1043.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="145.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.36%)</title><rect x="142.5" y="1027.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="145.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.36%)</title><rect x="142.5" y="1011.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="145.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (13 samples, 4.71%)</title><rect x="146.8" y="1075.0" width="55.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="149.8" y="1086.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.81%)</title><rect x="146.8" y="1059.0" width="21.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="149.8" y="1070.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.72%)</title><rect x="146.8" y="1043.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="149.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.72%)</title><rect x="146.8" y="1027.0" width="8.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="149.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.72%)</title><rect x="146.8" y="1011.0" width="8.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="149.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 1.09%)</title><rect x="155.4" y="1043.0" width="12.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="158.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (8 samples, 2.90%)</title><rect x="168.2" y="1059.0" width="34.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="171.2" y="1070.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (8 samples, 2.90%)</title><rect x="168.2" y="1043.0" width="34.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="171.2" y="1054.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (8 samples, 2.90%)</title><rect x="168.2" y="1027.0" width="34.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="171.2" y="1038.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.45%)</title><rect x="176.7" y="1011.0" width="17.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.36%)</title><rect x="181.0" y="995.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="184.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.36%)</title><rect x="181.0" y="979.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="184.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.36%)</title><rect x="181.0" y="963.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="184.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.36%)</title><rect x="181.0" y="947.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="184.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.36%)</title><rect x="181.0" y="931.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="184.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.72%)</title><rect x="185.3" y="995.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="188.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.72%)</title><rect x="185.3" y="979.0" width="8.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="188.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.72%)</title><rect x="193.8" y="1011.0" width="8.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="196.8" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.72%)</title><rect x="193.8" y="995.0" width="8.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.8" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.72%)</title><rect x="193.8" y="979.0" width="8.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="196.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.36%)</title><rect x="202.4" y="1091.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="205.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.36%)</title><rect x="202.4" y="1075.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.36%)</title><rect x="202.4" y="1059.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="205.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.36%)</title><rect x="202.4" y="1043.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="205.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (118 samples, 42.75%)</title><rect x="206.7" y="1187.0" width="504.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="209.7" y="1198.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (20 samples, 7.25%)</title><rect x="206.7" y="1171.0" width="85.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="209.7" y="1182.0">com/lineco..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (20 samples, 7.25%)</title><rect x="206.7" y="1155.0" width="85.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="209.7" y="1166.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (15 samples, 5.43%)</title><rect x="228.0" y="1139.0" width="64.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.0" y="1150.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.72%)</title><rect x="240.9" y="1123.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="243.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.72%)</title><rect x="240.9" y="1107.0" width="8.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="243.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.72%)</title><rect x="240.9" y="1091.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.72%)</title><rect x="240.9" y="1075.0" width="8.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="243.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.36%)</title><rect x="245.1" y="1059.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.1" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.36%)</title><rect x="245.1" y="1043.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="248.1" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (10 samples, 3.62%)</title><rect x="249.4" y="1123.0" width="42.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="252.4" y="1134.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 2.17%)</title><rect x="266.5" y="1107.0" width="25.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="269.5" y="1118.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 2.17%)</title><rect x="266.5" y="1091.0" width="25.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="269.5" y="1102.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.36%)</title><rect x="292.2" y="1171.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.2" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.36%)</title><rect x="292.2" y="1155.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="295.2" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.36%)</title><rect x="292.2" y="1139.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.2" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (25 samples, 9.06%)</title><rect x="296.4" y="1171.0" width="106.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.4" y="1182.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (25 samples, 9.06%)</title><rect x="296.4" y="1155.0" width="106.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="299.4" y="1166.0">com/linecorp/..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.72%)</title><rect x="300.7" y="1139.0" width="8.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="303.7" y="1150.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.72%)</title><rect x="300.7" y="1123.0" width="8.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="303.7" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (14 samples, 5.07%)</title><rect x="309.3" y="1139.0" width="59.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="312.3" y="1150.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (13 samples, 4.71%)</title><rect x="313.6" y="1123.0" width="55.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="316.6" y="1134.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 3.62%)</title><rect x="322.1" y="1107.0" width="42.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="325.1" y="1118.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 1.81%)</title><rect x="330.7" y="1091.0" width="21.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="333.7" y="1102.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 1.81%)</title><rect x="330.7" y="1075.0" width="21.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="333.7" y="1086.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 1.81%)</title><rect x="330.7" y="1059.0" width="21.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="333.7" y="1070.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 1.81%)</title><rect x="330.7" y="1043.0" width="21.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="333.7" y="1054.0">O..</text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.72%)</title><rect x="330.7" y="1027.0" width="8.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="333.7" y="1038.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.72%)</title><rect x="330.7" y="1011.0" width="8.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="333.7" y="1022.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.36%)</title><rect x="334.9" y="995.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="337.9" y="1006.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.36%)</title><rect x="334.9" y="979.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="337.9" y="990.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.36%)</title><rect x="339.2" y="1027.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="342.2" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.72%)</title><rect x="343.5" y="1027.0" width="8.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="346.5" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="343.5" y="1011.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="346.5" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.36%)</title><rect x="343.5" y="995.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="346.5" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.36%)</title><rect x="347.8" y="1011.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="350.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.72%)</title><rect x="352.0" y="1091.0" width="8.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="355.0" y="1102.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.36%)</title><rect x="360.6" y="1091.0" width="4.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="363.6" y="1102.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.36%)</title><rect x="364.9" y="1107.0" width="4.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="367.9" y="1118.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 2.90%)</title><rect x="369.1" y="1139.0" width="34.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="372.1" y="1150.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 2.54%)</title><rect x="373.4" y="1123.0" width="29.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="376.4" y="1134.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.36%)</title><rect x="373.4" y="1107.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="376.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.36%)</title><rect x="373.4" y="1091.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="376.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.36%)</title><rect x="373.4" y="1075.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="376.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.36%)</title><rect x="373.4" y="1059.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="376.4" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 2.17%)</title><rect x="377.7" y="1107.0" width="25.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="380.7" y="1118.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 1.81%)</title><rect x="382.0" y="1091.0" width="21.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="385.0" y="1102.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.72%)</title><rect x="394.8" y="1075.0" width="8.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="397.8" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.36%)</title><rect x="399.1" y="1059.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="402.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (67 samples, 24.28%)</title><rect x="403.3" y="1171.0" width="286.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="406.3" y="1182.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (67 samples, 24.28%)</title><rect x="403.3" y="1155.0" width="286.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="406.3" y="1166.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1898213318.process (61 samples, 22.10%)</title><rect x="403.3" y="1139.0" width="260.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="406.3" y="1150.0">com/linecorp/decaton/benchmark/Deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (61 samples, 22.10%)</title><rect x="403.3" y="1123.0" width="260.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="406.3" y="1134.0">com/linecorp/decaton/benchmark/Deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (60 samples, 21.74%)</title><rect x="403.3" y="1107.0" width="256.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="406.3" y="1118.0">com/linecorp/decaton/benchmark/Rec..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 1.09%)</title><rect x="407.6" y="1091.0" width="12.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="410.6" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.36%)</title><rect x="416.2" y="1075.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="419.2" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.36%)</title><rect x="416.2" y="1059.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="419.2" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.36%)</title><rect x="416.2" y="1043.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="419.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.36%)</title><rect x="416.2" y="1027.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="419.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (56 samples, 20.29%)</title><rect x="420.4" y="1091.0" width="239.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="423.4" y="1102.0">com/linecorp/decaton/benchmark/R..</text>
</g>
<g>
<title>java/lang/Thread.sleep (56 samples, 20.29%)</title><rect x="420.4" y="1075.0" width="239.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="423.4" y="1086.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (50 samples, 18.12%)</title><rect x="441.8" y="1059.0" width="213.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="444.8" y="1070.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.36%)</title><rect x="446.1" y="1043.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="449.1" y="1054.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.36%)</title><rect x="450.4" y="1043.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="453.4" y="1054.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.36%)</title><rect x="454.6" y="1043.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="457.6" y="1054.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="458.9" y="1043.0" width="4.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="461.9" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.09%)</title><rect x="463.2" y="1043.0" width="12.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="466.2" y="1054.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.72%)</title><rect x="467.5" y="1027.0" width="8.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="470.5" y="1038.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.36%)</title><rect x="476.0" y="1043.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="479.0" y="1054.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 1.09%)</title><rect x="480.3" y="1043.0" width="12.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="483.3" y="1054.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (38 samples, 13.77%)</title><rect x="493.1" y="1043.0" width="162.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="496.1" y="1054.0">os::sleep(Thread*, lo..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.36%)</title><rect x="527.3" y="1027.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="530.3" y="1038.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.36%)</title><rect x="527.3" y="1011.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="530.3" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.36%)</title><rect x="531.6" y="1027.0" width="4.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="534.6" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="531.6" y="1011.0" width="4.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="534.6" y="1022.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.72%)</title><rect x="535.9" y="1027.0" width="8.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="538.9" y="1038.0"></text>
</g>
<g>
<title>__pthread_cond_init (3 samples, 1.09%)</title><rect x="544.4" y="1027.0" width="12.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="547.4" y="1038.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (16 samples, 5.80%)</title><rect x="557.2" y="1027.0" width="68.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="560.2" y="1038.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.72%)</title><rect x="625.7" y="1027.0" width="8.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="628.7" y="1038.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.72%)</title><rect x="634.2" y="1027.0" width="8.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="637.2" y="1038.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.72%)</title><rect x="642.8" y="1027.0" width="8.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="645.8" y="1038.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.36%)</title><rect x="651.3" y="1027.0" width="4.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="654.3" y="1038.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.36%)</title><rect x="655.6" y="1059.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="658.6" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.36%)</title><rect x="659.9" y="1107.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="662.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.36%)</title><rect x="659.9" y="1091.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="662.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.36%)</title><rect x="659.9" y="1075.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="662.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.36%)</title><rect x="659.9" y="1059.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="662.9" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.36%)</title><rect x="664.1" y="1139.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="667.1" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.36%)</title><rect x="664.1" y="1123.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="667.1" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.36%)</title><rect x="668.4" y="1139.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="671.4" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.36%)</title><rect x="668.4" y="1123.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="671.4" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.72%)</title><rect x="672.7" y="1139.0" width="8.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="675.7" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.72%)</title><rect x="672.7" y="1123.0" width="8.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="675.7" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.36%)</title><rect x="681.2" y="1139.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="684.2" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.36%)</title><rect x="681.2" y="1123.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="684.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.36%)</title><rect x="685.5" y="1139.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="688.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.81%)</title><rect x="689.8" y="1171.0" width="21.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="692.8" y="1182.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.81%)</title><rect x="689.8" y="1155.0" width="21.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="692.8" y="1166.0">j..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.36%)</title><rect x="702.6" y="1139.0" width="4.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="705.6" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="702.6" y="1123.0" width="4.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="705.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.36%)</title><rect x="706.9" y="1139.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="709.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$277/771850914.accept (1 samples, 0.36%)</title><rect x="706.9" y="1123.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="709.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.36%)</title><rect x="706.9" y="1107.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="709.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.36%)</title><rect x="706.9" y="1091.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="709.9" y="1102.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.36%)</title><rect x="706.9" y="1075.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="709.9" y="1086.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.36%)</title><rect x="706.9" y="1059.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="709.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.45%)</title><rect x="711.2" y="1187.0" width="17.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="714.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.45%)</title><rect x="711.2" y="1171.0" width="17.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="714.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.72%)</title><rect x="719.7" y="1155.0" width="8.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="722.7" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$277/771850914.accept (2 samples, 0.72%)</title><rect x="719.7" y="1139.0" width="8.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="722.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (2 samples, 0.72%)</title><rect x="719.7" y="1123.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="722.7" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.72%)</title><rect x="719.7" y="1107.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="722.7" y="1118.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.72%)</title><rect x="719.7" y="1091.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="722.7" y="1102.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.72%)</title><rect x="719.7" y="1075.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="722.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.72%)</title><rect x="728.3" y="1251.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="731.3" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.72%)</title><rect x="728.3" y="1235.0" width="8.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="731.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.72%)</title><rect x="728.3" y="1219.0" width="8.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="731.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.72%)</title><rect x="728.3" y="1203.0" width="8.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="731.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (3 samples, 1.09%)</title><rect x="736.8" y="1251.0" width="12.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="739.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (3 samples, 1.09%)</title><rect x="736.8" y="1235.0" width="12.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="739.8" y="1246.0"></text>
</g>
<g>
<title>start_thread (103 samples, 37.32%)</title><rect x="749.6" y="1299.0" width="440.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="752.6" y="1310.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (103 samples, 37.32%)</title><rect x="749.6" y="1283.0" width="440.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="752.6" y="1294.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 5.07%)</title><rect x="749.6" y="1267.0" width="59.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="752.6" y="1278.0">GangWo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 5.07%)</title><rect x="749.6" y="1251.0" width="59.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="752.6" y="1262.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 4.35%)</title><rect x="749.6" y="1235.0" width="51.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="752.6" y="1246.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (10 samples, 3.62%)</title><rect x="749.6" y="1219.0" width="42.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="752.6" y="1230.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 1.45%)</title><rect x="775.3" y="1203.0" width="17.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="778.3" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.36%)</title><rect x="788.1" y="1187.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="791.1" y="1198.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 0.72%)</title><rect x="792.4" y="1219.0" width="8.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="795.4" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.36%)</title><rect x="800.9" y="1235.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="803.9" y="1246.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.36%)</title><rect x="800.9" y="1219.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="803.9" y="1230.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.36%)</title><rect x="800.9" y="1203.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="803.9" y="1214.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.36%)</title><rect x="805.2" y="1235.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="808.2" y="1246.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.36%)</title><rect x="805.2" y="1219.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="808.2" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.36%)</title><rect x="805.2" y="1203.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="808.2" y="1214.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.36%)</title><rect x="805.2" y="1187.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="808.2" y="1198.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.36%)</title><rect x="805.2" y="1171.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="808.2" y="1182.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.36%)</title><rect x="805.2" y="1155.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="808.2" y="1166.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.36%)</title><rect x="805.2" y="1139.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="808.2" y="1150.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.36%)</title><rect x="805.2" y="1123.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="808.2" y="1134.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.36%)</title><rect x="805.2" y="1107.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="808.2" y="1118.0"></text>
</g>
<g>
<title>JavaThread::run() (88 samples, 31.88%)</title><rect x="809.5" y="1267.0" width="376.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="812.5" y="1278.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (88 samples, 31.88%)</title><rect x="809.5" y="1251.0" width="376.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="812.5" y="1262.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (88 samples, 31.88%)</title><rect x="809.5" y="1235.0" width="376.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="812.5" y="1246.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (87 samples, 31.52%)</title><rect x="809.5" y="1219.0" width="371.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="812.5" y="1230.0">CompileBroker::invoke_compiler_on_method(CompileTas..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (85 samples, 30.80%)</title><rect x="809.5" y="1203.0" width="363.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="812.5" y="1214.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (85 samples, 30.80%)</title><rect x="809.5" y="1187.0" width="363.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="812.5" y="1198.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (48 samples, 17.39%)</title><rect x="809.5" y="1171.0" width="205.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="812.5" y="1182.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.36%)</title><rect x="809.5" y="1155.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="812.5" y="1166.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.36%)</title><rect x="809.5" y="1139.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="812.5" y="1150.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.36%)</title><rect x="809.5" y="1123.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="812.5" y="1134.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.36%)</title><rect x="809.5" y="1107.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="812.5" y="1118.0"></text>
</g>
<g>
<title>storeImmCM0_regNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.36%)</title><rect x="809.5" y="1091.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="812.5" y="1102.0"></text>
</g>
<g>
<title>Assembler::movb(Address, RegisterImpl*) (1 samples, 0.36%)</title><rect x="809.5" y="1075.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="812.5" y="1086.0"></text>
</g>
<g>
<title>Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&amp;, int) (1 samples, 0.36%)</title><rect x="809.5" y="1059.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="812.5" y="1070.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.72%)</title><rect x="813.8" y="1155.0" width="8.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="816.8" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.36%)</title><rect x="818.0" y="1139.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="821.0" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.36%)</title><rect x="818.0" y="1123.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="821.0" y="1134.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.36%)</title><rect x="822.3" y="1155.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="825.3" y="1166.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.45%)</title><rect x="826.6" y="1155.0" width="17.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="829.6" y="1166.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.36%)</title><rect x="826.6" y="1139.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="829.6" y="1150.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.09%)</title><rect x="830.9" y="1139.0" width="12.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="833.9" y="1150.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.72%)</title><rect x="830.9" y="1123.0" width="8.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="833.9" y="1134.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.36%)</title><rect x="839.4" y="1123.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="842.4" y="1134.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.36%)</title><rect x="843.7" y="1155.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="846.7" y="1166.0"></text>
</g>
<g>
<title>PhaseBlockLayout::reorder_traces(int) (1 samples, 0.36%)</title><rect x="843.7" y="1139.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="846.7" y="1150.0"></text>
</g>
<g>
<title>Trace::fixup_blocks(PhaseCFG&amp;) (1 samples, 0.36%)</title><rect x="843.7" y="1123.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="846.7" y="1134.0"></text>
</g>
<g>
<title>Block::num_fall_throughs() (1 samples, 0.36%)</title><rect x="843.7" y="1107.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="846.7" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 1.45%)</title><rect x="848.0" y="1155.0" width="17.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="851.0" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 1.45%)</title><rect x="848.0" y="1139.0" width="17.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="851.0" y="1150.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.36%)</title><rect x="848.0" y="1123.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="851.0" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.36%)</title><rect x="852.2" y="1123.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="855.2" y="1134.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.36%)</title><rect x="852.2" y="1107.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="855.2" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.36%)</title><rect x="856.5" y="1123.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="859.5" y="1134.0"></text>
</g>
<g>
<title>addI_rReg_immNode::ideal_Opcode() const (1 samples, 0.36%)</title><rect x="856.5" y="1107.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="859.5" y="1118.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.36%)</title><rect x="860.8" y="1123.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="863.8" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (35 samples, 12.68%)</title><rect x="865.1" y="1155.0" width="149.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="868.1" y="1166.0">PhaseChaitin::Regis..</text>
</g>
<g>
<title>MachNode::bottom_type() const (1 samples, 0.36%)</title><rect x="865.1" y="1139.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="868.1" y="1150.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.36%)</title><rect x="869.3" y="1139.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="872.3" y="1150.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.36%)</title><rect x="873.6" y="1139.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="876.6" y="1150.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.36%)</title><rect x="877.9" y="1139.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="880.9" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.36%)</title><rect x="882.2" y="1139.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="885.2" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.72%)</title><rect x="886.4" y="1139.0" width="8.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="889.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.36%)</title><rect x="890.7" y="1123.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="893.7" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.09%)</title><rect x="895.0" y="1139.0" width="12.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="898.0" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 1.45%)</title><rect x="907.8" y="1139.0" width="17.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="910.8" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.45%)</title><rect x="907.8" y="1123.0" width="17.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="910.8" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.72%)</title><rect x="916.4" y="1107.0" width="8.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="919.4" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.09%)</title><rect x="924.9" y="1139.0" width="12.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="927.9" y="1150.0"></text>
</g>
<g>
<title>indirectOper::in_RegMask(int) const (1 samples, 0.36%)</title><rect x="933.5" y="1123.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="936.5" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.09%)</title><rect x="937.8" y="1139.0" width="12.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="940.8" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.72%)</title><rect x="942.0" y="1123.0" width="8.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="945.0" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.36%)</title><rect x="946.3" y="1107.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="949.3" y="1118.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.36%)</title><rect x="946.3" y="1091.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="949.3" y="1102.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (7 samples, 2.54%)</title><rect x="950.6" y="1139.0" width="29.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="953.6" y="1150.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (7 samples, 2.54%)</title><rect x="950.6" y="1123.0" width="29.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="953.6" y="1134.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (7 samples, 2.54%)</title><rect x="950.6" y="1107.0" width="29.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="953.6" y="1118.0">Ph..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.36%)</title><rect x="950.6" y="1091.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="953.6" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="954.9" y="1091.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="957.9" y="1102.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (4 samples, 1.45%)</title><rect x="959.1" y="1091.0" width="17.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="962.1" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="972.0" y="1075.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="975.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.36%)</title><rect x="976.2" y="1091.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="979.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 1.09%)</title><rect x="980.5" y="1139.0" width="12.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="983.5" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.72%)</title><rect x="984.8" y="1123.0" width="8.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="987.8" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.81%)</title><rect x="993.3" y="1139.0" width="21.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="996.3" y="1150.0">P..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.36%)</title><rect x="993.3" y="1123.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="996.3" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 1.09%)</title><rect x="997.6" y="1123.0" width="12.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1000.6" y="1134.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.36%)</title><rect x="1010.4" y="1123.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1013.4" y="1134.0"></text>
</g>
<g>
<title>Compile::Optimize() (31 samples, 11.23%)</title><rect x="1014.7" y="1171.0" width="132.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1017.7" y="1182.0">Compile::Optimiz..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.36%)</title><rect x="1014.7" y="1155.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1017.7" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.36%)</title><rect x="1014.7" y="1139.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1017.7" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1014.7" y="1123.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1017.7" y="1134.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.36%)</title><rect x="1014.7" y="1107.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1017.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (25 samples, 9.06%)</title><rect x="1019.0" y="1155.0" width="106.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1022.0" y="1166.0">PhaseIdealLoo..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.36%)</title><rect x="1019.0" y="1139.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1022.0" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.36%)</title><rect x="1019.0" y="1123.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1022.0" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.36%)</title><rect x="1019.0" y="1107.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1022.0" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.36%)</title><rect x="1019.0" y="1091.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1022.0" y="1102.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.36%)</title><rect x="1023.3" y="1139.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1026.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.72%)</title><rect x="1027.5" y="1139.0" width="8.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1030.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.72%)</title><rect x="1027.5" y="1123.0" width="8.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1030.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (17 samples, 6.16%)</title><rect x="1036.1" y="1139.0" width="72.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1039.1" y="1150.0">PhaseIde..</text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.36%)</title><rect x="1040.4" y="1123.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1043.4" y="1134.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.36%)</title><rect x="1040.4" y="1107.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1043.4" y="1118.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.36%)</title><rect x="1040.4" y="1091.0" width="4.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1043.4" y="1102.0"></text>
</g>
<g>
<title>Opaque1Node::Opcode() const (1 samples, 0.36%)</title><rect x="1044.6" y="1123.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (14 samples, 5.07%)</title><rect x="1048.9" y="1123.0" width="59.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1051.9" y="1134.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (13 samples, 4.71%)</title><rect x="1053.2" y="1107.0" width="55.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1056.2" y="1118.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 1.45%)</title><rect x="1108.8" y="1139.0" width="17.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1111.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.36%)</title><rect x="1117.3" y="1123.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1120.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.36%)</title><rect x="1121.6" y="1123.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.36%)</title><rect x="1121.6" y="1107.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.36%)</title><rect x="1121.6" y="1091.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.45%)</title><rect x="1125.9" y="1155.0" width="17.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.45%)</title><rect x="1125.9" y="1139.0" width="17.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.9" y="1150.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1125.9" y="1123.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.9" y="1134.0"></text>
</g>
<g>
<title>IfFalseNode::IfFalseNode(IfNode*) (1 samples, 0.36%)</title><rect x="1125.9" y="1107.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.9" y="1118.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.36%)</title><rect x="1125.9" y="1091.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.36%)</title><rect x="1130.1" y="1123.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.1" y="1134.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.36%)</title><rect x="1130.1" y="1107.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.1" y="1118.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.72%)</title><rect x="1134.4" y="1123.0" width="8.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.4" y="1134.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.36%)</title><rect x="1138.7" y="1107.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1141.7" y="1118.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.36%)</title><rect x="1143.0" y="1155.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.0" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.36%)</title><rect x="1143.0" y="1139.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.0" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::initialize_object(AllocateNode*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.36%)</title><rect x="1143.0" y="1123.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.0" y="1134.0"></text>
</g>
<g>
<title>PhaseMacroExpand::make_load(Node*, Node*, Node*, int, Type const*, BasicType) (1 samples, 0.36%)</title><rect x="1143.0" y="1107.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.0" y="1118.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.36%)</title><rect x="1143.0" y="1091.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.0" y="1102.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.36%)</title><rect x="1143.0" y="1075.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.0" y="1086.0"></text>
</g>
<g>
<title>TypeLong::hash() const (1 samples, 0.36%)</title><rect x="1143.0" y="1059.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.0" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.17%)</title><rect x="1147.2" y="1171.0" width="25.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.2" y="1182.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.17%)</title><rect x="1147.2" y="1155.0" width="25.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.2" y="1166.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.17%)</title><rect x="1147.2" y="1139.0" width="25.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.2" y="1150.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.17%)</title><rect x="1147.2" y="1123.0" width="25.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.2" y="1134.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.17%)</title><rect x="1147.2" y="1107.0" width="25.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.2" y="1118.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.17%)</title><rect x="1147.2" y="1091.0" width="25.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.2" y="1102.0">P..</text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.36%)</title><rect x="1147.2" y="1075.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.2" y="1086.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.36%)</title><rect x="1147.2" y="1059.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.2" y="1070.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.36%)</title><rect x="1147.2" y="1043.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.2" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.45%)</title><rect x="1151.5" y="1075.0" width="17.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.5" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.45%)</title><rect x="1151.5" y="1059.0" width="17.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.45%)</title><rect x="1151.5" y="1043.0" width="17.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.45%)</title><rect x="1151.5" y="1027.0" width="17.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.45%)</title><rect x="1151.5" y="1011.0" width="17.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.45%)</title><rect x="1151.5" y="995.0" width="17.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.5" y="1006.0"></text>
</g>
<g>
<title>GraphKit::record_profiled_receiver_for_speculation(Node*) (1 samples, 0.36%)</title><rect x="1151.5" y="979.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.5" y="990.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.36%)</title><rect x="1151.5" y="963.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.5" y="974.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.36%)</title><rect x="1151.5" y="947.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.5" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1155.8" y="979.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.8" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1155.8" y="963.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1155.8" y="947.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1155.8" y="931.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1155.8" y="915.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1155.8" y="899.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.8" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1155.8" y="883.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.8" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1155.8" y="867.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1155.8" y="851.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1155.8" y="835.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1155.8" y="819.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1155.8" y="803.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.8" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1155.8" y="787.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.8" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1155.8" y="771.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1155.8" y="755.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.8" y="766.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.36%)</title><rect x="1155.8" y="739.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.8" y="750.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.36%)</title><rect x="1155.8" y="723.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.8" y="734.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.36%)</title><rect x="1155.8" y="707.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.8" y="718.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.36%)</title><rect x="1155.8" y="691.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.8" y="702.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.36%)</title><rect x="1155.8" y="675.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.8" y="686.0"></text>
</g>
<g>
<title>JVMState::clone_deep(Compile*) const (1 samples, 0.36%)</title><rect x="1155.8" y="659.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.8" y="670.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.36%)</title><rect x="1155.8" y="643.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.8" y="654.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.72%)</title><rect x="1160.1" y="979.0" width="8.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.1" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.72%)</title><rect x="1160.1" y="963.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.1" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.72%)</title><rect x="1160.1" y="947.0" width="8.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.1" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.72%)</title><rect x="1160.1" y="931.0" width="8.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.1" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.72%)</title><rect x="1160.1" y="915.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.1" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.72%)</title><rect x="1160.1" y="899.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.72%)</title><rect x="1160.1" y="883.0" width="8.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.1" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.72%)</title><rect x="1160.1" y="867.0" width="8.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.1" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.72%)</title><rect x="1160.1" y="851.0" width="8.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.72%)</title><rect x="1160.1" y="835.0" width="8.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.72%)</title><rect x="1160.1" y="819.0" width="8.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.72%)</title><rect x="1160.1" y="803.0" width="8.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.72%)</title><rect x="1160.1" y="787.0" width="8.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.1" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.72%)</title><rect x="1160.1" y="771.0" width="8.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.1" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.72%)</title><rect x="1160.1" y="755.0" width="8.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.72%)</title><rect x="1160.1" y="739.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.72%)</title><rect x="1160.1" y="723.0" width="8.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.72%)</title><rect x="1160.1" y="707.0" width="8.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.72%)</title><rect x="1160.1" y="691.0" width="8.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.1" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.72%)</title><rect x="1160.1" y="675.0" width="8.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.1" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.72%)</title><rect x="1160.1" y="659.0" width="8.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.72%)</title><rect x="1160.1" y="643.0" width="8.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.72%)</title><rect x="1160.1" y="627.0" width="8.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.72%)</title><rect x="1160.1" y="611.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.72%)</title><rect x="1160.1" y="595.0" width="8.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.1" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.72%)</title><rect x="1160.1" y="579.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.1" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.72%)</title><rect x="1160.1" y="563.0" width="8.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.72%)</title><rect x="1160.1" y="547.0" width="8.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.72%)</title><rect x="1160.1" y="531.0" width="8.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.72%)</title><rect x="1160.1" y="515.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.72%)</title><rect x="1160.1" y="499.0" width="8.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.1" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.72%)</title><rect x="1160.1" y="483.0" width="8.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.1" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.72%)</title><rect x="1160.1" y="467.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.72%)</title><rect x="1160.1" y="451.0" width="8.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.72%)</title><rect x="1160.1" y="435.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.72%)</title><rect x="1160.1" y="419.0" width="8.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.72%)</title><rect x="1160.1" y="403.0" width="8.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.1" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1160.1" y="387.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.1" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1160.1" y="371.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1160.1" y="355.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1160.1" y="339.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1160.1" y="323.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1160.1" y="307.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.1" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1160.1" y="291.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.1" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1160.1" y="275.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.1" y="286.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.36%)</title><rect x="1160.1" y="259.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.1" y="270.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.36%)</title><rect x="1160.1" y="243.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.1" y="254.0"></text>
</g>
<g>
<title>ciVirtualCallData::translate_from(ProfileData const*) (1 samples, 0.36%)</title><rect x="1160.1" y="227.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.1" y="238.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.36%)</title><rect x="1160.1" y="211.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.1" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.3" y="387.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.3" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.3" y="371.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.3" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.3" y="355.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.3" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1164.3" y="339.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1164.3" y="323.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1164.3" y="307.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1164.3" y="291.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1164.3" y="275.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.3" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.3" y="259.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.3" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1164.3" y="243.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1164.3" y="227.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1164.3" y="211.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1164.3" y="195.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1164.3" y="179.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.3" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.3" y="163.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.3" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1164.3" y="147.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1164.3" y="131.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.3" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1164.3" y="115.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.3" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1164.3" y="99.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.3" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1164.3" y="83.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.3" y="94.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.3" y="67.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.3" y="78.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.36%)</title><rect x="1164.3" y="51.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.3" y="62.0"></text>
</g>
<g>
<title>GraphKit::add_exception_state(SafePointNode*) (1 samples, 0.36%)</title><rect x="1164.3" y="35.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.3" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1168.6" y="1075.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.6" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1168.6" y="1059.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.6" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1168.6" y="1043.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.6" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1168.6" y="1027.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1168.6" y="1011.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1168.6" y="995.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.36%)</title><rect x="1168.6" y="979.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.36%)</title><rect x="1168.6" y="963.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.6" y="974.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.36%)</title><rect x="1168.6" y="947.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.6" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.36%)</title><rect x="1168.6" y="931.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.6" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.36%)</title><rect x="1168.6" y="915.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.6" y="926.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.36%)</title><rect x="1168.6" y="899.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.6" y="910.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.36%)</title><rect x="1168.6" y="883.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.6" y="894.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.36%)</title><rect x="1168.6" y="867.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.6" y="878.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.36%)</title><rect x="1168.6" y="851.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.6" y="862.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.36%)</title><rect x="1168.6" y="835.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.6" y="846.0"></text>
</g>
<g>
<title>ciField::ciField(fieldDescriptor*) (1 samples, 0.36%)</title><rect x="1168.6" y="819.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.6" y="830.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.36%)</title><rect x="1168.6" y="803.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.6" y="814.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.72%)</title><rect x="1172.9" y="1203.0" width="8.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.9" y="1214.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.72%)</title><rect x="1172.9" y="1187.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.9" y="1198.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.72%)</title><rect x="1172.9" y="1171.0" width="8.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.9" y="1182.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.72%)</title><rect x="1172.9" y="1155.0" width="8.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.9" y="1166.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.36%)</title><rect x="1172.9" y="1139.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.9" y="1150.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.36%)</title><rect x="1172.9" y="1123.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.9" y="1134.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.36%)</title><rect x="1172.9" y="1107.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.9" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.36%)</title><rect x="1172.9" y="1091.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.9" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.36%)</title><rect x="1172.9" y="1075.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.9" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.36%)</title><rect x="1172.9" y="1059.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.9" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.36%)</title><rect x="1172.9" y="1043.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.9" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.36%)</title><rect x="1172.9" y="1027.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.9" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.36%)</title><rect x="1172.9" y="1011.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.9" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.36%)</title><rect x="1172.9" y="995.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.9" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.36%)</title><rect x="1172.9" y="979.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.9" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.36%)</title><rect x="1172.9" y="963.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.9" y="974.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.36%)</title><rect x="1172.9" y="947.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.9" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.36%)</title><rect x="1172.9" y="931.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.9" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.36%)</title><rect x="1172.9" y="915.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.9" y="926.0"></text>
</g>
<g>
<title>ciInstanceKlass::field_cache() (1 samples, 0.36%)</title><rect x="1172.9" y="899.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.9" y="910.0"></text>
</g>
<g>
<title>ciConstantPoolCache::ciConstantPoolCache(Arena*, int) (1 samples, 0.36%)</title><rect x="1172.9" y="883.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.9" y="894.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.36%)</title><rect x="1177.2" y="1139.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.2" y="1150.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.36%)</title><rect x="1177.2" y="1123.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.2" y="1134.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.36%)</title><rect x="1177.2" y="1107.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.2" y="1118.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.36%)</title><rect x="1177.2" y="1091.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.2" y="1102.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(IntervalState, int) (1 samples, 0.36%)</title><rect x="1177.2" y="1075.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.2" y="1086.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.36%)</title><rect x="1181.4" y="1219.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.4" y="1230.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.36%)</title><rect x="1181.4" y="1203.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.4" y="1214.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.36%)</title><rect x="1181.4" y="1187.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.4" y="1198.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.36%)</title><rect x="1181.4" y="1171.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.4" y="1182.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.36%)</title><rect x="1181.4" y="1155.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.4" y="1166.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.36%)</title><rect x="1185.7" y="1267.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.7" y="1278.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.36%)</title><rect x="1185.7" y="1251.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.7" y="1262.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.36%)</title><rect x="1185.7" y="1235.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.7" y="1246.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.36%)</title><rect x="1185.7" y="1219.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.7" y="1230.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.36%)</title><rect x="1185.7" y="1203.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.7" y="1214.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.36%)</title><rect x="1185.7" y="1187.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.7" y="1198.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.36%)</title><rect x="1185.7" y="1171.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.7" y="1182.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.36%)</title><rect x="1185.7" y="1155.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.7" y="1166.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.36%)</title><rect x="1185.7" y="1139.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.7" y="1150.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.36%)</title><rect x="1185.7" y="1123.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.7" y="1134.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.36%)</title><rect x="1185.7" y="1107.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.7" y="1118.0"></text>
</g>
</g>
</svg>
