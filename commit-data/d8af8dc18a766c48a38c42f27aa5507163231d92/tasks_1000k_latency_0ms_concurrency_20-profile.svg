<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1045"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1045"> </text>
<g id="frames">
<g>
<title>all (1,351 samples, 100.00%)</title><rect x="10.0" y="1011.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1022.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (248 samples, 18.36%)</title><rect x="10.0" y="995.0" width="216.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1006.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (248 samples, 18.36%)</title><rect x="10.0" y="979.0" width="216.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="990.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.15%)</title><rect x="10.0" y="963.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.15%)</title><rect x="10.0" y="947.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/679415268.accept (2 samples, 0.15%)</title><rect x="10.0" y="931.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.15%)</title><rect x="10.0" y="915.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.15%)</title><rect x="10.0" y="899.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.15%)</title><rect x="10.0" y="883.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.15%)</title><rect x="11.7" y="963.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.15%)</title><rect x="11.7" y="947.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.7" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.15%)</title><rect x="11.7" y="931.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.7" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.15%)</title><rect x="11.7" y="915.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.7" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.15%)</title><rect x="11.7" y="899.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.7" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="11.7" y="883.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.7" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="11.7" y="867.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.7" y="878.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="11.7" y="851.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.7" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.07%)</title><rect x="11.7" y="835.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.07%)</title><rect x="12.6" y="883.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.07%)</title><rect x="12.6" y="867.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.6" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="12.6" y="851.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.6" y="862.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (197 samples, 14.58%)</title><rect x="13.5" y="963.0" width="172.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.5" y="974.0">java/lang/Iterable.for..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/422209909.accept (190 samples, 14.06%)</title><rect x="13.5" y="947.0" width="165.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.5" y="958.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (190 samples, 14.06%)</title><rect x="13.5" y="931.0" width="165.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.5" y="942.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (157 samples, 11.62%)</title><rect x="16.1" y="915.0" width="137.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.1" y="926.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (157 samples, 11.62%)</title><rect x="16.1" y="899.0" width="137.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.1" y="910.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (157 samples, 11.62%)</title><rect x="16.1" y="883.0" width="137.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.1" y="894.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (157 samples, 11.62%)</title><rect x="16.1" y="867.0" width="137.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.1" y="878.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (157 samples, 11.62%)</title><rect x="16.1" y="851.0" width="137.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.1" y="862.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (157 samples, 11.62%)</title><rect x="16.1" y="835.0" width="137.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.1" y="846.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (109 samples, 8.07%)</title><rect x="16.1" y="819.0" width="95.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.1" y="830.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (27 samples, 2.00%)</title><rect x="16.1" y="803.0" width="23.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.1" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (27 samples, 2.00%)</title><rect x="16.1" y="787.0" width="23.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.1" y="798.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (17 samples, 1.26%)</title><rect x="24.8" y="771.0" width="14.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (17 samples, 1.26%)</title><rect x="24.8" y="755.0" width="14.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.37%)</title><rect x="39.7" y="803.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (5 samples, 0.37%)</title><rect x="39.7" y="787.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="42.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.30%)</title><rect x="39.7" y="771.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="42.7" y="782.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (4 samples, 0.30%)</title><rect x="39.7" y="755.0" width="3.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="42.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.07%)</title><rect x="43.2" y="771.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="46.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (77 samples, 5.70%)</title><rect x="44.1" y="803.0" width="67.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.1" y="814.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (77 samples, 5.70%)</title><rect x="44.1" y="787.0" width="67.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.1" y="798.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (75 samples, 5.55%)</title><rect x="44.1" y="771.0" width="65.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="47.1" y="782.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (75 samples, 5.55%)</title><rect x="44.1" y="755.0" width="65.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.1" y="766.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (75 samples, 5.55%)</title><rect x="44.1" y="739.0" width="65.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.1" y="750.0">sun/mis..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.07%)</title><rect x="44.9" y="723.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="47.9" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark (64 samples, 4.74%)</title><rect x="45.8" y="723.0" width="55.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="48.8" y="734.0">Unsaf..</text>
</g>
<g>
<title>Parker::unpark() (5 samples, 0.37%)</title><rect x="47.6" y="707.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="50.6" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_signal (42 samples, 3.11%)</title><rect x="51.9" y="707.0" width="36.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="54.9" y="718.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.15%)</title><rect x="88.6" y="707.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="91.6" y="718.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 0.96%)</title><rect x="90.4" y="707.0" width="11.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="93.4" y="718.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.22%)</title><rect x="101.7" y="723.0" width="2.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="104.7" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.37%)</title><rect x="104.3" y="723.0" width="4.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="107.3" y="734.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="108.7" y="723.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="111.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.15%)</title><rect x="109.6" y="771.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="112.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (41 samples, 3.03%)</title><rect x="111.3" y="819.0" width="35.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="114.3" y="830.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (41 samples, 3.03%)</title><rect x="111.3" y="803.0" width="35.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="114.3" y="814.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (41 samples, 3.03%)</title><rect x="111.3" y="787.0" width="35.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="114.3" y="798.0">jav..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="146.3" y="771.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="149.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.22%)</title><rect x="147.1" y="819.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="150.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.15%)</title><rect x="147.1" y="803.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="150.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.15%)</title><rect x="147.1" y="787.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="150.1" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="148.0" y="771.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="151.0" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="148.0" y="755.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="151.0" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="148.0" y="739.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="151.0" y="750.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.07%)</title><rect x="148.0" y="723.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="151.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.07%)</title><rect x="148.9" y="803.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="151.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.07%)</title><rect x="148.9" y="787.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="151.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.30%)</title><rect x="149.7" y="819.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="152.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.30%)</title><rect x="149.7" y="803.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="152.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="149.7" y="787.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="152.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.07%)</title><rect x="149.7" y="771.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="152.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.22%)</title><rect x="150.6" y="787.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="153.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.07%)</title><rect x="150.6" y="771.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="153.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.15%)</title><rect x="151.5" y="771.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="154.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.07%)</title><rect x="153.2" y="915.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="156.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.07%)</title><rect x="153.2" y="899.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="156.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.07%)</title><rect x="154.1" y="915.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="157.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="154.1" y="899.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="157.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="154.1" y="883.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="157.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (26 samples, 1.92%)</title><rect x="155.0" y="915.0" width="22.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="158.0" y="926.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (26 samples, 1.92%)</title><rect x="155.0" y="899.0" width="22.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="158.0" y="910.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 0.59%)</title><rect x="165.5" y="883.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="168.5" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.15%)</title><rect x="167.2" y="867.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="170.2" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.15%)</title><rect x="167.2" y="851.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="170.2" y="862.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.15%)</title><rect x="167.2" y="835.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="170.2" y="846.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.15%)</title><rect x="169.0" y="867.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="172.0" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.15%)</title><rect x="170.7" y="867.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="173.7" y="878.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="172.5" y="883.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="175.5" y="894.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.37%)</title><rect x="173.3" y="883.0" width="4.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="176.3" y="894.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="177.7" y="915.0" width="1.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="180.7" y="926.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="179.4" y="947.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="182.4" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.07%)</title><rect x="180.3" y="947.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="183.3" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.07%)</title><rect x="180.3" y="931.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="183.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="180.3" y="915.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="183.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.30%)</title><rect x="181.2" y="947.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="184.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.30%)</title><rect x="181.2" y="931.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="184.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.30%)</title><rect x="181.2" y="915.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="184.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.30%)</title><rect x="181.2" y="899.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="184.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.07%)</title><rect x="184.7" y="947.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="187.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (47 samples, 3.48%)</title><rect x="185.6" y="963.0" width="41.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="188.6" y="974.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (46 samples, 3.40%)</title><rect x="186.4" y="947.0" width="40.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="189.4" y="958.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.07%)</title><rect x="186.4" y="931.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="189.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (30 samples, 2.22%)</title><rect x="187.3" y="931.0" width="26.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="190.3" y="942.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.07%)</title><rect x="187.3" y="915.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.07%)</title><rect x="187.3" y="899.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="190.3" y="910.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.07%)</title><rect x="187.3" y="883.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="190.3" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.07%)</title><rect x="187.3" y="867.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="190.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (29 samples, 2.15%)</title><rect x="188.2" y="915.0" width="25.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="191.2" y="926.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (29 samples, 2.15%)</title><rect x="188.2" y="899.0" width="25.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="191.2" y="910.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (25 samples, 1.85%)</title><rect x="188.2" y="883.0" width="21.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="191.2" y="894.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (25 samples, 1.85%)</title><rect x="188.2" y="867.0" width="21.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="191.2" y="878.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (16 samples, 1.18%)</title><rect x="189.1" y="851.0" width="13.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="192.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.07%)</title><rect x="194.3" y="835.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="197.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.07%)</title><rect x="194.3" y="819.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="197.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="194.3" y="803.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="197.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (9 samples, 0.67%)</title><rect x="195.2" y="835.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="198.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (9 samples, 0.67%)</title><rect x="195.2" y="819.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="198.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (9 samples, 0.67%)</title><rect x="195.2" y="803.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="198.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (9 samples, 0.67%)</title><rect x="195.2" y="787.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (9 samples, 0.67%)</title><rect x="195.2" y="771.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="198.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (9 samples, 0.67%)</title><rect x="195.2" y="755.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="198.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (9 samples, 0.67%)</title><rect x="195.2" y="739.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="198.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (8 samples, 0.59%)</title><rect x="203.0" y="851.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="206.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.07%)</title><rect x="203.0" y="835.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="206.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (7 samples, 0.52%)</title><rect x="203.9" y="835.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="206.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (4 samples, 0.30%)</title><rect x="203.9" y="819.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.9" y="830.0"></text>
</g>
<g>
<title>java/util/Optional.of (4 samples, 0.30%)</title><rect x="203.9" y="803.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="206.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 0.22%)</title><rect x="207.4" y="819.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="210.4" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.22%)</title><rect x="207.4" y="803.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="210.4" y="814.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="209.1" y="787.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="212.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.22%)</title><rect x="210.0" y="883.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="213.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.22%)</title><rect x="210.0" y="867.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="213.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.22%)</title><rect x="210.0" y="851.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="213.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.22%)</title><rect x="210.0" y="835.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.22%)</title><rect x="210.0" y="819.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="213.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="210.0" y="803.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/MetricConfig.quota (1 samples, 0.07%)</title><rect x="210.0" y="787.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="213.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (2 samples, 0.15%)</title><rect x="210.9" y="803.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.07%)</title><rect x="212.6" y="883.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.07%)</title><rect x="212.6" y="867.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.07%)</title><rect x="212.6" y="851.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="215.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="212.6" y="835.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="215.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (8 samples, 0.59%)</title><rect x="213.5" y="931.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.59%)</title><rect x="213.5" y="915.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="216.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.52%)</title><rect x="213.5" y="899.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="216.5" y="910.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.15%)</title><rect x="213.5" y="883.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="216.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1026478585.accept (2 samples, 0.15%)</title><rect x="213.5" y="867.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="216.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.15%)</title><rect x="213.5" y="851.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="213.5" y="835.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.07%)</title><rect x="213.5" y="819.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="213.5" y="803.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.5" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="213.5" y="787.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="216.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.07%)</title><rect x="214.4" y="835.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.07%)</title><rect x="214.4" y="819.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="217.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.07%)</title><rect x="214.4" y="803.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="217.4" y="814.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="214.4" y="787.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="217.4" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="214.4" y="771.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="217.4" y="782.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="215.3" y="883.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="218.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.07%)</title><rect x="216.1" y="883.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.07%)</title><rect x="216.1" y="867.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.1" y="878.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="216.1" y="851.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="219.1" y="862.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="216.1" y="835.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="219.1" y="846.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="216.1" y="819.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="219.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.07%)</title><rect x="217.0" y="883.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="220.0" y="894.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="217.0" y="867.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.0" y="878.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="217.0" y="851.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="220.0" y="862.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="217.0" y="835.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="220.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="217.0" y="819.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="220.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="217.0" y="803.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="220.0" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.07%)</title><rect x="217.0" y="787.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="220.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.15%)</title><rect x="217.9" y="883.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="220.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.15%)</title><rect x="217.9" y="867.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="220.9" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.15%)</title><rect x="217.9" y="851.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.9" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.15%)</title><rect x="217.9" y="835.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="220.9" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.15%)</title><rect x="217.9" y="819.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="220.9" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.15%)</title><rect x="217.9" y="803.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="220.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.15%)</title><rect x="217.9" y="787.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="220.9" y="798.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="218.7" y="771.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.7" y="782.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="218.7" y="755.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="221.7" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="218.7" y="739.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.7" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="218.7" y="723.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="221.7" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="218.7" y="707.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$214/570221060.test (1 samples, 0.07%)</title><rect x="218.7" y="691.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.07%)</title><rect x="219.6" y="899.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.6" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.07%)</title><rect x="219.6" y="883.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="219.6" y="867.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="222.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.22%)</title><rect x="220.5" y="931.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.22%)</title><rect x="220.5" y="915.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="223.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.07%)</title><rect x="220.5" y="899.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.07%)</title><rect x="220.5" y="883.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="223.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.07%)</title><rect x="220.5" y="867.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="220.5" y="851.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.07%)</title><rect x="220.5" y="835.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="223.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="220.5" y="819.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="223.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="220.5" y="803.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.07%)</title><rect x="220.5" y="787.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="223.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="220.5" y="771.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="220.5" y="755.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$16.read (1 samples, 0.07%)</title><rect x="220.5" y="739.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="223.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$16.read (1 samples, 0.07%)</title><rect x="220.5" y="723.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$14.read (1 samples, 0.07%)</title><rect x="220.5" y="707.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.5" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.slice (1 samples, 0.07%)</title><rect x="220.5" y="691.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.15%)</title><rect x="221.4" y="899.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="224.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="221.4" y="883.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="221.4" y="867.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="224.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.07%)</title><rect x="222.2" y="883.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="225.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.07%)</title><rect x="222.2" y="867.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.07%)</title><rect x="222.2" y="851.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.memoryAllocated (1 samples, 0.07%)</title><rect x="222.2" y="835.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.2" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.07%)</title><rect x="222.2" y="819.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="225.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.30%)</title><rect x="223.1" y="931.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="226.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.22%)</title><rect x="224.0" y="915.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="227.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.22%)</title><rect x="224.0" y="899.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="227.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.07%)</title><rect x="225.7" y="883.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="228.7" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="225.7" y="867.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.7" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="225.7" y="851.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.7" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="225.7" y="835.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="225.7" y="819.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.7" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="225.7" y="803.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="228.7" y="814.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="225.7" y="787.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.7" y="798.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="225.7" y="771.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.7" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="225.7" y="755.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="228.7" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="225.7" y="739.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="228.7" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="225.7" y="723.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="228.7" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.07%)</title><rect x="225.7" y="707.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="228.7" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$170/1730332792.accept (1 samples, 0.07%)</title><rect x="225.7" y="691.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="228.7" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.07%)</title><rect x="225.7" y="675.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="228.7" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.07%)</title><rect x="225.7" y="659.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="228.7" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.07%)</title><rect x="225.7" y="643.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="228.7" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.07%)</title><rect x="225.7" y="627.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="228.7" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.07%)</title><rect x="225.7" y="611.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="228.7" y="622.0"></text>
</g>
<g>
<title>edge_order(CFGEdge**, CFGEdge**) (1 samples, 0.07%)</title><rect x="226.6" y="995.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="229.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.run (716 samples, 53.00%)</title><rect x="227.5" y="995.0" width="625.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="230.5" y="1006.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (716 samples, 53.00%)</title><rect x="227.5" y="979.0" width="625.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="230.5" y="990.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (716 samples, 53.00%)</title><rect x="227.5" y="963.0" width="625.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="230.5" y="974.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1798090716.run (507 samples, 37.53%)</title><rect x="227.5" y="947.0" width="442.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="230.5" y="958.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (507 samples, 37.53%)</title><rect x="227.5" y="931.0" width="442.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.5" y="942.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (507 samples, 37.53%)</title><rect x="227.5" y="915.0" width="442.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="230.5" y="926.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (501 samples, 37.08%)</title><rect x="227.5" y="899.0" width="437.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="230.5" y="910.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.sched..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (2 samples, 0.15%)</title><rect x="239.7" y="883.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.7" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (177 samples, 13.10%)</title><rect x="241.5" y="883.0" width="154.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="244.5" y="894.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (177 samples, 13.10%)</title><rect x="241.5" y="867.0" width="154.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="244.5" y="878.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (177 samples, 13.10%)</title><rect x="241.5" y="851.0" width="154.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.5" y="862.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (177 samples, 13.10%)</title><rect x="241.5" y="835.0" width="154.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="244.5" y="846.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (177 samples, 13.10%)</title><rect x="241.5" y="819.0" width="154.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="244.5" y="830.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (177 samples, 13.10%)</title><rect x="241.5" y="803.0" width="154.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="244.5" y="814.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (53 samples, 3.92%)</title><rect x="241.5" y="787.0" width="46.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="244.5" y="798.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (32 samples, 2.37%)</title><rect x="241.5" y="771.0" width="27.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="244.5" y="782.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="241.5" y="755.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="244.5" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="241.5" y="739.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="244.5" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="241.5" y="723.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="244.5" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="241.5" y="707.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="244.5" y="718.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="241.5" y="691.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="244.5" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="242.3" y="755.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="245.3" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="242.3" y="739.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="245.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (27 samples, 2.00%)</title><rect x="243.2" y="755.0" width="23.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="246.2" y="766.0">c..</text>
</g>
<g>
<title>[unknown] (3 samples, 0.22%)</title><rect x="256.3" y="739.0" width="2.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="259.3" y="750.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.22%)</title><rect x="256.3" y="723.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="259.3" y="734.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="258.9" y="739.0" width="2.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="261.9" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.44%)</title><rect x="261.5" y="739.0" width="5.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="264.5" y="750.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.37%)</title><rect x="262.4" y="723.0" width="4.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="265.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (3 samples, 0.22%)</title><rect x="266.8" y="755.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.22%)</title><rect x="266.8" y="739.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="269.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (21 samples, 1.55%)</title><rect x="269.4" y="771.0" width="18.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (3 samples, 0.22%)</title><rect x="269.4" y="755.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.4" y="766.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.07%)</title><rect x="271.2" y="739.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="274.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (18 samples, 1.33%)</title><rect x="272.0" y="755.0" width="15.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.07%)</title><rect x="274.6" y="739.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="277.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.15%)</title><rect x="275.5" y="739.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.07%)</title><rect x="276.4" y="723.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="279.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (6 samples, 0.44%)</title><rect x="277.3" y="739.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="280.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (6 samples, 0.44%)</title><rect x="277.3" y="723.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (6 samples, 0.44%)</title><rect x="277.3" y="707.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (6 samples, 0.44%)</title><rect x="282.5" y="739.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (110 samples, 8.14%)</title><rect x="287.7" y="787.0" width="96.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="290.7" y="798.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (8 samples, 0.59%)</title><rect x="287.7" y="771.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="290.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (8 samples, 0.59%)</title><rect x="287.7" y="755.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="290.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (5 samples, 0.37%)</title><rect x="289.5" y="739.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="292.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.15%)</title><rect x="292.1" y="723.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="295.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.07%)</title><rect x="293.9" y="739.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (7 samples, 0.52%)</title><rect x="294.7" y="771.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="297.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.52%)</title><rect x="294.7" y="755.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="297.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/SimpleType.equals (2 samples, 0.15%)</title><rect x="296.5" y="739.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="299.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (3 samples, 0.22%)</title><rect x="298.2" y="739.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="301.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (11 samples, 0.81%)</title><rect x="300.9" y="771.0" width="9.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="303.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.59%)</title><rect x="302.6" y="755.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="305.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.07%)</title><rect x="302.6" y="739.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="305.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.52%)</title><rect x="303.5" y="739.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.30%)</title><rect x="306.1" y="723.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="309.1" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.15%)</title><rect x="307.8" y="707.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="310.8" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.15%)</title><rect x="307.8" y="691.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="310.8" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.15%)</title><rect x="307.8" y="675.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="310.8" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="308.7" y="659.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="311.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.07%)</title><rect x="309.6" y="755.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="312.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.44%)</title><rect x="310.5" y="771.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="313.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="310.5" y="755.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="313.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.37%)</title><rect x="311.3" y="755.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (78 samples, 5.77%)</title><rect x="315.7" y="771.0" width="68.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="318.7" y="782.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (22 samples, 1.63%)</title><rect x="315.7" y="755.0" width="19.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="318.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.44%)</title><rect x="318.3" y="739.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="321.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.44%)</title><rect x="318.3" y="723.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="321.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.44%)</title><rect x="318.3" y="707.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="321.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (6 samples, 0.44%)</title><rect x="318.3" y="691.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="321.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.07%)</title><rect x="322.7" y="675.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="325.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (9 samples, 0.67%)</title><rect x="323.6" y="739.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="326.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (4 samples, 0.30%)</title><rect x="323.6" y="723.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="326.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (5 samples, 0.37%)</title><rect x="327.1" y="723.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="330.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (5 samples, 0.37%)</title><rect x="327.1" y="707.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="330.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (5 samples, 0.37%)</title><rect x="327.1" y="691.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="330.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.getAndSet (5 samples, 0.37%)</title><rect x="327.1" y="675.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="330.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.30%)</title><rect x="331.4" y="739.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="334.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.30%)</title><rect x="331.4" y="723.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="334.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (56 samples, 4.15%)</title><rect x="334.9" y="755.0" width="48.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="337.9" y="766.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.22%)</title><rect x="334.9" y="739.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="337.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (53 samples, 3.92%)</title><rect x="337.5" y="739.0" width="46.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="340.5" y="750.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (53 samples, 3.92%)</title><rect x="337.5" y="723.0" width="46.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="340.5" y="734.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 0.96%)</title><rect x="340.2" y="707.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="343.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.07%)</title><rect x="340.2" y="691.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="343.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.07%)</title><rect x="341.0" y="691.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="344.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.52%)</title><rect x="341.9" y="691.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="344.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.52%)</title><rect x="341.9" y="675.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="344.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.52%)</title><rect x="341.9" y="659.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="344.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.15%)</title><rect x="341.9" y="643.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="344.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.37%)</title><rect x="343.6" y="643.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="346.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.22%)</title><rect x="343.6" y="627.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="346.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.15%)</title><rect x="344.5" y="611.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="347.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.07%)</title><rect x="345.4" y="595.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="348.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.15%)</title><rect x="346.3" y="627.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="349.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.15%)</title><rect x="348.0" y="691.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="351.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.15%)</title><rect x="348.0" y="675.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="351.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.15%)</title><rect x="348.0" y="659.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="351.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.15%)</title><rect x="348.0" y="643.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="351.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.getAndSet (2 samples, 0.15%)</title><rect x="348.0" y="627.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="351.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.07%)</title><rect x="349.8" y="691.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="352.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.07%)</title><rect x="349.8" y="675.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="352.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.07%)</title><rect x="350.6" y="691.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="353.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (12 samples, 0.89%)</title><rect x="351.5" y="707.0" width="10.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="354.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (10 samples, 0.74%)</title><rect x="353.3" y="691.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="356.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.74%)</title><rect x="353.3" y="675.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="356.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.74%)</title><rect x="353.3" y="659.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="356.3" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (10 samples, 0.74%)</title><rect x="353.3" y="643.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="356.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (9 samples, 0.67%)</title><rect x="362.0" y="707.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="365.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (9 samples, 0.67%)</title><rect x="362.0" y="691.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="365.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (9 samples, 0.67%)</title><rect x="362.0" y="675.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="365.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (9 samples, 0.67%)</title><rect x="362.0" y="659.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="365.0" y="670.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (9 samples, 0.67%)</title><rect x="362.0" y="643.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="365.0" y="654.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (9 samples, 0.67%)</title><rect x="362.0" y="627.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="365.0" y="638.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (9 samples, 0.67%)</title><rect x="362.0" y="611.0" width="7.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="365.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.52%)</title><rect x="369.9" y="707.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="372.9" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.52%)</title><rect x="369.9" y="691.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="372.9" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.52%)</title><rect x="369.9" y="675.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="372.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (9 samples, 0.67%)</title><rect x="376.0" y="707.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="379.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (2 samples, 0.15%)</title><rect x="382.1" y="691.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="385.1" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.07%)</title><rect x="382.1" y="675.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="385.1" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="383.0" y="675.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="386.0" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.07%)</title><rect x="383.0" y="659.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="386.0" y="670.0"></text>
</g>
<g>
<title>ObjArrayKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.07%)</title><rect x="383.0" y="643.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="386.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (14 samples, 1.04%)</title><rect x="383.8" y="787.0" width="12.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="386.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (14 samples, 1.04%)</title><rect x="383.8" y="771.0" width="12.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="386.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (14 samples, 1.04%)</title><rect x="383.8" y="755.0" width="12.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="386.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.07%)</title><rect x="383.8" y="739.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="386.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (2 samples, 0.15%)</title><rect x="384.7" y="739.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="387.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (6 samples, 0.44%)</title><rect x="386.4" y="739.0" width="5.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="389.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 0.37%)</title><rect x="391.7" y="739.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="394.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.37%)</title><rect x="391.7" y="723.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="394.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (293 samples, 21.69%)</title><rect x="396.1" y="883.0" width="255.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="399.1" y="894.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (72 samples, 5.33%)</title><rect x="396.1" y="867.0" width="62.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="399.1" y="878.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (5 samples, 0.37%)</title><rect x="396.1" y="851.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="399.1" y="862.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (67 samples, 4.96%)</title><rect x="400.4" y="851.0" width="58.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="403.4" y="862.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (65 samples, 4.81%)</title><rect x="402.2" y="835.0" width="56.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="405.2" y="846.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (13 samples, 0.96%)</title><rect x="404.8" y="819.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="407.8" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (13 samples, 0.96%)</title><rect x="404.8" y="803.0" width="11.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="407.8" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (13 samples, 0.96%)</title><rect x="404.8" y="787.0" width="11.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="407.8" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (13 samples, 0.96%)</title><rect x="404.8" y="771.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="407.8" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 0.22%)</title><rect x="413.5" y="755.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="416.5" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.22%)</title><rect x="413.5" y="739.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="416.5" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (49 samples, 3.63%)</title><rect x="416.1" y="819.0" width="42.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="419.1" y="830.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (40 samples, 2.96%)</title><rect x="424.0" y="803.0" width="34.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="427.0" y="814.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (12 samples, 0.89%)</title><rect x="448.5" y="787.0" width="10.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="451.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.59%)</title><rect x="458.9" y="867.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="461.9" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.30%)</title><rect x="462.4" y="851.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="465.4" y="862.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.30%)</title><rect x="462.4" y="835.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="465.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (158 samples, 11.70%)</title><rect x="465.9" y="867.0" width="138.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="468.9" y="878.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (158 samples, 11.70%)</title><rect x="465.9" y="851.0" width="138.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="468.9" y="862.0">com/linecorp/deca..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.15%)</title><rect x="473.8" y="835.0" width="1.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="476.8" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="474.7" y="819.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="477.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (52 samples, 3.85%)</title><rect x="475.5" y="835.0" width="45.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="478.5" y="846.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (45 samples, 3.33%)</title><rect x="479.0" y="819.0" width="39.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="482.0" y="830.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (27 samples, 2.00%)</title><rect x="486.9" y="803.0" width="23.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="489.9" y="814.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 0.44%)</title><rect x="497.4" y="787.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="500.4" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 0.44%)</title><rect x="497.4" y="771.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="500.4" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.44%)</title><rect x="497.4" y="755.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="500.4" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 0.37%)</title><rect x="497.4" y="739.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="500.4" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.30%)</title><rect x="497.4" y="723.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="500.4" y="734.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.30%)</title><rect x="497.4" y="707.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="500.4" y="718.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (4 samples, 0.30%)</title><rect x="497.4" y="691.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="500.4" y="702.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="497.4" y="675.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="500.4" y="686.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="497.4" y="659.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="500.4" y="670.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (3 samples, 0.22%)</title><rect x="498.2" y="675.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="501.2" y="686.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="500.9" y="723.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="503.9" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="500.9" y="707.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="503.9" y="718.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="500.9" y="691.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="503.9" y="702.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="501.7" y="739.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="504.7" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.15%)</title><rect x="502.6" y="787.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="505.6" y="798.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.22%)</title><rect x="504.4" y="787.0" width="2.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="507.4" y="798.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="507.0" y="787.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="510.0" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.22%)</title><rect x="507.9" y="787.0" width="2.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="510.9" y="798.0"></text>
</g>
<g>
<title>jshort_arraycopy (3 samples, 0.22%)</title><rect x="510.5" y="803.0" width="2.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="513.5" y="814.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.44%)</title><rect x="513.1" y="803.0" width="5.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="516.1" y="814.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.22%)</title><rect x="518.3" y="819.0" width="2.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="521.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.15%)</title><rect x="521.0" y="835.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="524.0" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.07%)</title><rect x="522.7" y="835.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="525.7" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.07%)</title><rect x="522.7" y="819.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="525.7" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.07%)</title><rect x="522.7" y="803.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="525.7" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.07%)</title><rect x="522.7" y="787.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="525.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (10 samples, 0.74%)</title><rect x="523.6" y="835.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="526.6" y="846.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.07%)</title><rect x="523.6" y="819.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="526.6" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.toString (9 samples, 0.67%)</title><rect x="524.4" y="819.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="527.4" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="524.4" y="803.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="527.4" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="524.4" y="787.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="527.4" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.59%)</title><rect x="525.3" y="803.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="528.3" y="814.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (82 samples, 6.07%)</title><rect x="532.3" y="835.0" width="71.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="535.3" y="846.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (79 samples, 5.85%)</title><rect x="534.9" y="819.0" width="69.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="537.9" y="830.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.59%)</title><rect x="534.9" y="803.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="537.9" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.59%)</title><rect x="534.9" y="787.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="537.9" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.59%)</title><rect x="534.9" y="771.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="537.9" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.59%)</title><rect x="534.9" y="755.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="537.9" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 0.22%)</title><rect x="539.3" y="739.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="542.3" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.22%)</title><rect x="539.3" y="723.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="542.3" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (71 samples, 5.26%)</title><rect x="541.9" y="803.0" width="62.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="544.9" y="814.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (65 samples, 4.81%)</title><rect x="547.2" y="787.0" width="56.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="550.2" y="798.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (36 samples, 2.66%)</title><rect x="572.5" y="771.0" width="31.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="575.5" y="782.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.22%)</title><rect x="590.0" y="755.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="593.0" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 0.81%)</title><rect x="592.6" y="755.0" width="9.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="595.6" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="601.3" y="739.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="604.3" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="601.3" y="723.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="604.3" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="601.3" y="707.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="604.3" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="601.3" y="691.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="604.3" y="702.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.07%)</title><rect x="601.3" y="675.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="604.3" y="686.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.15%)</title><rect x="602.2" y="755.0" width="1.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="605.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (42 samples, 3.11%)</title><rect x="603.9" y="867.0" width="36.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="606.9" y="878.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (41 samples, 3.03%)</title><rect x="604.8" y="851.0" width="35.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="607.8" y="862.0">com..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="606.6" y="835.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="609.6" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="606.6" y="819.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="609.6" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="606.6" y="803.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="609.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1538933891.process (21 samples, 1.55%)</title><rect x="607.4" y="835.0" width="18.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="610.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (20 samples, 1.48%)</title><rect x="608.3" y="819.0" width="17.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="611.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (19 samples, 1.41%)</title><rect x="608.3" y="803.0" width="16.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="611.3" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.30%)</title><rect x="615.3" y="787.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="618.3" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.30%)</title><rect x="615.3" y="771.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="618.3" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 0.30%)</title><rect x="615.3" y="755.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="618.3" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 0.30%)</title><rect x="615.3" y="739.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="618.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.22%)</title><rect x="616.2" y="723.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="619.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.07%)</title><rect x="617.9" y="707.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="620.9" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.37%)</title><rect x="618.8" y="787.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="621.8" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.37%)</title><rect x="618.8" y="771.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="621.8" y="782.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.37%)</title><rect x="618.8" y="755.0" width="4.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="621.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.07%)</title><rect x="623.1" y="787.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="626.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (1 samples, 0.07%)</title><rect x="624.0" y="787.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="627.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.07%)</title><rect x="624.9" y="803.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="627.9" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="624.9" y="787.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="627.9" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="624.9" y="771.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="627.9" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="624.9" y="755.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="627.9" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.15%)</title><rect x="625.8" y="835.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="628.8" y="846.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.15%)</title><rect x="625.8" y="819.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="628.8" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="626.6" y="803.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="629.6" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="626.6" y="787.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="629.6" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="626.6" y="771.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="629.6" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="626.6" y="755.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="629.6" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="626.6" y="739.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="629.6" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="626.6" y="723.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="629.6" y="734.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="626.6" y="707.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="629.6" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="626.6" y="691.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="629.6" y="702.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="626.6" y="675.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="629.6" y="686.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.07%)</title><rect x="626.6" y="659.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="629.6" y="670.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.07%)</title><rect x="626.6" y="643.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="629.6" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.52%)</title><rect x="627.5" y="835.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="630.5" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.44%)</title><rect x="628.4" y="819.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="631.4" y="830.0"></text>
</g>
<g>
<title>itable stub (6 samples, 0.44%)</title><rect x="628.4" y="803.0" width="5.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="631.4" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (4 samples, 0.30%)</title><rect x="633.6" y="835.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="636.6" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (4 samples, 0.30%)</title><rect x="633.6" y="819.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="636.6" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.30%)</title><rect x="637.1" y="835.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="640.1" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.07%)</title><rect x="639.7" y="819.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="642.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 0.96%)</title><rect x="640.6" y="867.0" width="11.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="643.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 0.96%)</title><rect x="640.6" y="851.0" width="11.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="643.6" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.30%)</title><rect x="643.2" y="835.0" width="3.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="646.2" y="846.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.30%)</title><rect x="643.2" y="819.0" width="3.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="646.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.37%)</title><rect x="646.7" y="835.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="649.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/159834882.accept (4 samples, 0.30%)</title><rect x="646.7" y="819.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="649.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (4 samples, 0.30%)</title><rect x="646.7" y="803.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="649.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (4 samples, 0.30%)</title><rect x="646.7" y="787.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="649.7" y="798.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 0.30%)</title><rect x="646.7" y="771.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="649.7" y="782.0"></text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 0.30%)</title><rect x="646.7" y="755.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="649.7" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.22%)</title><rect x="647.6" y="739.0" width="2.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="650.6" y="750.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="647.6" y="723.0" width="2.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="650.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/977890398.accept (1 samples, 0.07%)</title><rect x="650.2" y="819.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="653.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (1 samples, 0.07%)</title><rect x="650.2" y="803.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="653.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/173686298.complete (1 samples, 0.07%)</title><rect x="650.2" y="787.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="653.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (1 samples, 0.07%)</title><rect x="650.2" y="771.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="653.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.07%)</title><rect x="650.2" y="755.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="653.2" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.07%)</title><rect x="650.2" y="739.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="653.2" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.07%)</title><rect x="650.2" y="723.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="653.2" y="734.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="651.1" y="835.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="654.1" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (1 samples, 0.07%)</title><rect x="652.0" y="883.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="655.0" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (1 samples, 0.07%)</title><rect x="652.0" y="867.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="655.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/977890398.get$Lambda (1 samples, 0.07%)</title><rect x="652.0" y="851.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="655.0" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="652.0" y="835.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="655.0" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="652.0" y="819.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="655.0" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="652.0" y="803.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="655.0" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="652.0" y="787.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="655.0" y="798.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="652.0" y="771.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="655.0" y="782.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.07%)</title><rect x="652.0" y="755.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="655.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 0.89%)</title><rect x="652.8" y="883.0" width="10.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="655.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 0.89%)</title><rect x="652.8" y="867.0" width="10.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="655.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.81%)</title><rect x="653.7" y="851.0" width="9.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="656.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/159834882.accept (2 samples, 0.15%)</title><rect x="653.7" y="835.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="656.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (2 samples, 0.15%)</title><rect x="653.7" y="819.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="656.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.15%)</title><rect x="653.7" y="803.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="656.7" y="814.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.15%)</title><rect x="653.7" y="787.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="656.7" y="798.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.15%)</title><rect x="653.7" y="771.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="656.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/977890398.accept (9 samples, 0.67%)</title><rect x="655.5" y="835.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="658.5" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (9 samples, 0.67%)</title><rect x="655.5" y="819.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="658.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/173686298.complete (9 samples, 0.67%)</title><rect x="655.5" y="803.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="658.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (9 samples, 0.67%)</title><rect x="655.5" y="787.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="658.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (9 samples, 0.67%)</title><rect x="655.5" y="771.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="658.5" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 0.67%)</title><rect x="655.5" y="755.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="658.5" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 0.67%)</title><rect x="655.5" y="739.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="658.5" y="750.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.07%)</title><rect x="663.3" y="883.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="666.3" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.07%)</title><rect x="663.3" y="867.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="666.3" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.07%)</title><rect x="663.3" y="851.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="666.3" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.07%)</title><rect x="663.3" y="835.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="666.3" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.07%)</title><rect x="663.3" y="819.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="666.3" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.07%)</title><rect x="663.3" y="803.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="666.3" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.07%)</title><rect x="663.3" y="787.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="666.3" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="664.2" y="883.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="667.2" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="664.2" y="867.0" width="0.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="667.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="665.1" y="899.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="668.1" y="910.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="665.1" y="883.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="668.1" y="894.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="665.1" y="867.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="668.1" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="665.1" y="851.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="668.1" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="665.1" y="835.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="668.1" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="665.1" y="819.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="668.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 0.37%)</title><rect x="665.9" y="899.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="668.9" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.22%)</title><rect x="666.8" y="883.0" width="2.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="669.8" y="894.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="666.8" y="867.0" width="2.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="669.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.07%)</title><rect x="669.4" y="883.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="672.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.07%)</title><rect x="670.3" y="947.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="673.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.52%)</title><rect x="671.2" y="947.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="674.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.52%)</title><rect x="671.2" y="931.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="674.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.52%)</title><rect x="671.2" y="915.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="674.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.52%)</title><rect x="671.2" y="899.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="674.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (2 samples, 0.15%)</title><rect x="675.6" y="883.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="678.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (201 samples, 14.88%)</title><rect x="677.3" y="947.0" width="175.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="680.3" y="958.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (200 samples, 14.80%)</title><rect x="678.2" y="931.0" width="174.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="681.2" y="942.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (174 samples, 12.88%)</title><rect x="682.5" y="915.0" width="152.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="685.5" y="926.0">java/util/concurren..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (19 samples, 1.41%)</title><rect x="686.9" y="899.0" width="16.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="689.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (5 samples, 0.37%)</title><rect x="703.5" y="899.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="706.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.37%)</title><rect x="703.5" y="883.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="706.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.37%)</title><rect x="703.5" y="867.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="706.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.37%)</title><rect x="703.5" y="851.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="706.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (145 samples, 10.73%)</title><rect x="707.9" y="899.0" width="126.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="710.9" y="910.0">java/util/concur..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (145 samples, 10.73%)</title><rect x="707.9" y="883.0" width="126.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="710.9" y="894.0">sun/misc/Unsafe...</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.15%)</title><rect x="714.0" y="867.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="717.0" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.15%)</title><rect x="715.7" y="867.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="718.7" y="878.0"></text>
</g>
<g>
<title>Unsafe_Park (128 samples, 9.47%)</title><rect x="717.5" y="867.0" width="111.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="720.5" y="878.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 0.37%)</title><rect x="720.1" y="851.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="723.1" y="862.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="724.5" y="851.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="727.5" y="862.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (19 samples, 1.41%)</title><rect x="725.3" y="851.0" width="16.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="728.3" y="862.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.52%)</title><rect x="729.7" y="835.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="732.7" y="846.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.30%)</title><rect x="730.6" y="819.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="733.6" y="830.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (4 samples, 0.30%)</title><rect x="730.6" y="803.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="733.6" y="814.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="734.1" y="819.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="737.1" y="830.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="734.9" y="819.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="737.9" y="830.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="735.8" y="835.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="738.8" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.37%)</title><rect x="736.7" y="835.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="739.7" y="846.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="741.1" y="835.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="744.1" y="846.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="741.9" y="851.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="744.9" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.22%)</title><rect x="742.8" y="851.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="745.8" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.15%)</title><rect x="745.4" y="851.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="748.4" y="862.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.07%)</title><rect x="747.2" y="851.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="750.2" y="862.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.52%)</title><rect x="748.0" y="851.0" width="6.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="751.0" y="862.0"></text>
</g>
<g>
<title>__lll_unlock_wake (30 samples, 2.22%)</title><rect x="754.2" y="851.0" width="26.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="757.2" y="862.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (35 samples, 2.59%)</title><rect x="780.4" y="851.0" width="30.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="783.4" y="862.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (6 samples, 0.44%)</title><rect x="810.9" y="851.0" width="5.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="813.9" y="862.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.15%)</title><rect x="816.2" y="851.0" width="1.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="819.2" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.15%)</title><rect x="817.9" y="851.0" width="1.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="820.9" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.30%)</title><rect x="819.7" y="851.0" width="3.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="822.7" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.30%)</title><rect x="823.2" y="851.0" width="3.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="826.2" y="862.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.15%)</title><rect x="826.7" y="851.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="829.7" y="862.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="828.4" y="851.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="831.4" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.30%)</title><rect x="829.3" y="867.0" width="3.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="832.3" y="878.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.07%)</title><rect x="832.8" y="867.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="835.8" y="878.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="833.6" y="867.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="836.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (11 samples, 0.81%)</title><rect x="834.5" y="915.0" width="9.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="837.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (11 samples, 0.81%)</title><rect x="834.5" y="899.0" width="9.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="837.5" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (10 samples, 0.74%)</title><rect x="834.5" y="883.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="837.5" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.07%)</title><rect x="842.4" y="867.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="845.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.07%)</title><rect x="843.2" y="883.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="846.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.07%)</title><rect x="843.2" y="867.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="846.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.07%)</title><rect x="843.2" y="851.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="846.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 0.74%)</title><rect x="844.1" y="915.0" width="8.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="847.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.74%)</title><rect x="844.1" y="899.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="847.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.67%)</title><rect x="845.0" y="883.0" width="7.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="848.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.67%)</title><rect x="845.0" y="867.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="848.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="852.9" y="995.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="855.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="852.9" y="979.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="855.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="852.9" y="963.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="855.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.07%)</title><rect x="852.9" y="947.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="855.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.07%)</title><rect x="852.9" y="931.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="855.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.07%)</title><rect x="852.9" y="915.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="855.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.07%)</title><rect x="852.9" y="899.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="855.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="852.9" y="883.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="855.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="852.9" y="867.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="855.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sessionHandler (1 samples, 0.07%)</title><rect x="852.9" y="851.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="855.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="852.9" y="835.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="855.9" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="852.9" y="819.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="855.9" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.hashCode (1 samples, 0.07%)</title><rect x="852.9" y="803.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="855.9" y="814.0"></text>
</g>
<g>
<title>start_thread (385 samples, 28.50%)</title><rect x="853.7" y="995.0" width="336.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="856.7" y="1006.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (385 samples, 28.50%)</title><rect x="853.7" y="979.0" width="336.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="856.7" y="990.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 1.55%)</title><rect x="853.7" y="963.0" width="18.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="856.7" y="974.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (6 samples, 0.44%)</title><rect x="853.7" y="947.0" width="5.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="856.7" y="958.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.44%)</title><rect x="853.7" y="931.0" width="5.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="856.7" y="942.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.44%)</title><rect x="853.7" y="915.0" width="5.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="856.7" y="926.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.04%)</title><rect x="859.0" y="947.0" width="12.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="862.0" y="958.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.22%)</title><rect x="859.0" y="931.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="862.0" y="942.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.07%)</title><rect x="859.0" y="915.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="862.0" y="926.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.07%)</title><rect x="859.0" y="899.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="862.0" y="910.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.15%)</title><rect x="859.8" y="915.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="862.8" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.52%)</title><rect x="861.6" y="931.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="864.6" y="942.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.22%)</title><rect x="861.6" y="915.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="864.6" y="926.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.15%)</title><rect x="861.6" y="899.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="864.6" y="910.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.15%)</title><rect x="861.6" y="883.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="864.6" y="894.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.07%)</title><rect x="861.6" y="867.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="864.6" y="878.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.07%)</title><rect x="862.5" y="867.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="865.5" y="878.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="863.3" y="899.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="866.3" y="910.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="863.3" y="883.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="866.3" y="894.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.07%)</title><rect x="863.3" y="867.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="866.3" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.30%)</title><rect x="864.2" y="915.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="867.2" y="926.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.30%)</title><rect x="864.2" y="899.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="867.2" y="910.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.30%)</title><rect x="867.7" y="931.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="870.7" y="942.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.30%)</title><rect x="867.7" y="915.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="870.7" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.22%)</title><rect x="867.7" y="899.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="870.7" y="910.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.22%)</title><rect x="867.7" y="883.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="870.7" y="894.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.22%)</title><rect x="867.7" y="867.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="870.7" y="878.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.22%)</title><rect x="867.7" y="851.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="870.7" y="862.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.15%)</title><rect x="868.6" y="835.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="871.6" y="846.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.15%)</title><rect x="868.6" y="819.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="871.6" y="830.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.07%)</title><rect x="869.5" y="803.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="872.5" y="814.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.07%)</title><rect x="870.3" y="899.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="873.3" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.07%)</title><rect x="870.3" y="883.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="873.3" y="894.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.07%)</title><rect x="870.3" y="867.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="873.3" y="878.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.07%)</title><rect x="870.3" y="851.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="873.3" y="862.0"></text>
</g>
<g>
<title>Monitor::notify_all() (1 samples, 0.07%)</title><rect x="871.2" y="947.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="874.2" y="958.0"></text>
</g>
<g>
<title>JavaThread::run() (361 samples, 26.72%)</title><rect x="872.1" y="963.0" width="315.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="875.1" y="974.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (361 samples, 26.72%)</title><rect x="872.1" y="947.0" width="315.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="875.1" y="958.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (361 samples, 26.72%)</title><rect x="872.1" y="931.0" width="315.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="875.1" y="942.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (361 samples, 26.72%)</title><rect x="872.1" y="915.0" width="315.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="875.1" y="926.0">CompileBroker::invoke_compiler_on_method(Co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (360 samples, 26.65%)</title><rect x="872.1" y="899.0" width="314.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="875.1" y="910.0">C2Compiler::compile_method(ciEnv*, ciMetho..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (360 samples, 26.65%)</title><rect x="872.1" y="883.0" width="314.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="875.1" y="894.0">Compile::Compile(ciEnv*, C2Compiler*, ciMe..</text>
</g>
<g>
<title>Compile::Code_Gen() (72 samples, 5.33%)</title><rect x="872.1" y="867.0" width="62.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="875.1" y="878.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.07%)</title><rect x="872.1" y="851.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="875.1" y="862.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.07%)</title><rect x="872.1" y="835.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="875.1" y="846.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.30%)</title><rect x="872.9" y="851.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="875.9" y="862.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.07%)</title><rect x="872.9" y="835.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="875.9" y="846.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="872.9" y="819.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="875.9" y="830.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="872.9" y="803.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="875.9" y="814.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="873.8" y="835.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="876.8" y="846.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="873.8" y="819.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="876.8" y="830.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.07%)</title><rect x="874.7" y="835.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="877.7" y="846.0"></text>
</g>
<g>
<title>jmpCon_shortNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.07%)</title><rect x="875.6" y="835.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="878.6" y="846.0"></text>
</g>
<g>
<title>cmpOpOper::ccode() const (1 samples, 0.07%)</title><rect x="875.6" y="819.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="878.6" y="830.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="876.4" y="851.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="879.4" y="862.0"></text>
</g>
<g>
<title>Matcher::match() (9 samples, 0.67%)</title><rect x="877.3" y="851.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="880.3" y="862.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.07%)</title><rect x="877.3" y="835.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="880.3" y="846.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (8 samples, 0.59%)</title><rect x="878.2" y="835.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="881.2" y="846.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.30%)</title><rect x="879.1" y="819.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="882.1" y="830.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.22%)</title><rect x="882.6" y="819.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="885.6" y="830.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.15%)</title><rect x="882.6" y="803.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="885.6" y="814.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="883.4" y="787.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="886.4" y="798.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="883.4" y="771.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="886.4" y="782.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="883.4" y="755.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="886.4" y="766.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="883.4" y="739.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="886.4" y="750.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="884.3" y="803.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="887.3" y="814.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.07%)</title><rect x="884.3" y="787.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="887.3" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.22%)</title><rect x="885.2" y="851.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="888.2" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.07%)</title><rect x="885.2" y="835.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="888.2" y="846.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.07%)</title><rect x="885.2" y="819.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="888.2" y="830.0"></text>
</g>
<g>
<title>Block::is_block() (1 samples, 0.07%)</title><rect x="885.2" y="803.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="888.2" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.15%)</title><rect x="886.0" y="835.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="889.0" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="886.0" y="819.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="889.0" y="830.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.07%)</title><rect x="886.0" y="803.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="889.0" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="886.9" y="819.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="889.9" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="886.9" y="803.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="889.9" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.07%)</title><rect x="887.8" y="851.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="890.8" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (52 samples, 3.85%)</title><rect x="888.7" y="851.0" width="45.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="891.7" y="862.0">Phas..</text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.07%)</title><rect x="888.7" y="835.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="891.7" y="846.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.07%)</title><rect x="889.5" y="835.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="892.5" y="846.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.15%)</title><rect x="890.4" y="835.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="893.4" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.15%)</title><rect x="892.2" y="835.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="895.2" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.15%)</title><rect x="892.2" y="819.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="895.2" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="893.0" y="803.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="896.0" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 0.37%)</title><rect x="893.9" y="835.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="896.9" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="893.9" y="819.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="896.9" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 0.30%)</title><rect x="894.8" y="819.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="897.8" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.15%)</title><rect x="896.5" y="803.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="899.5" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 0.52%)</title><rect x="898.3" y="835.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="901.3" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (12 samples, 0.89%)</title><rect x="904.4" y="835.0" width="10.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="907.4" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (7 samples, 0.52%)</title><rect x="907.0" y="819.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="910.0" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.22%)</title><rect x="910.5" y="803.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="913.5" y="814.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="913.1" y="819.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="916.1" y="830.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.07%)</title><rect x="914.0" y="819.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="917.0" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.15%)</title><rect x="914.9" y="835.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="917.9" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.07%)</title><rect x="915.7" y="819.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="918.7" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.07%)</title><rect x="916.6" y="835.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="919.6" y="846.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.07%)</title><rect x="916.6" y="819.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="919.6" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.15%)</title><rect x="917.5" y="835.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="920.5" y="846.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.07%)</title><rect x="917.5" y="819.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="920.5" y="830.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="917.5" y="803.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="920.5" y="814.0"></text>
</g>
<g>
<title>MachNode::cisc_RegMask() const (1 samples, 0.07%)</title><rect x="918.4" y="819.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="921.4" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.07%)</title><rect x="919.2" y="835.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="922.2" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.37%)</title><rect x="920.1" y="835.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="923.1" y="846.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.07%)</title><rect x="920.1" y="819.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="923.1" y="830.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="921.0" y="819.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="924.0" y="830.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="921.0" y="803.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="924.0" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.22%)</title><rect x="921.9" y="819.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="924.9" y="830.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.07%)</title><rect x="924.5" y="835.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="927.5" y="846.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.07%)</title><rect x="924.5" y="819.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="927.5" y="830.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.07%)</title><rect x="924.5" y="803.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="927.5" y="814.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::union_helper(Node*, Node*, unsigned int, unsigned int, Node*, Node*, Node*, Block*, unsigned int) (1 samples, 0.07%)</title><rect x="924.5" y="787.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="927.5" y="798.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.07%)</title><rect x="924.5" y="771.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="927.5" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.15%)</title><rect x="925.4" y="835.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="928.4" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.15%)</title><rect x="925.4" y="819.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="928.4" y="830.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.37%)</title><rect x="927.1" y="835.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="930.1" y="846.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.22%)</title><rect x="928.0" y="819.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="931.0" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="929.7" y="803.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="932.7" y="814.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="930.6" y="819.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="933.6" y="830.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="931.5" y="835.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="934.5" y="846.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.07%)</title><rect x="932.3" y="835.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="935.3" y="846.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.07%)</title><rect x="933.2" y="835.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="936.2" y="846.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="934.1" y="851.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="937.1" y="862.0"></text>
</g>
<g>
<title>Compile::Optimize() (278 samples, 20.58%)</title><rect x="935.0" y="867.0" width="242.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="938.0" y="878.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (7 samples, 0.52%)</title><rect x="935.0" y="851.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="938.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (7 samples, 0.52%)</title><rect x="935.0" y="835.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="938.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="935.0" y="819.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="938.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::address_offset(Node*, PhaseTransform*) (1 samples, 0.07%)</title><rect x="935.0" y="803.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="938.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (6 samples, 0.44%)</title><rect x="935.8" y="819.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="938.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.44%)</title><rect x="935.8" y="803.0" width="5.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="938.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="935.8" y="787.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="938.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="935.8" y="771.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="938.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="935.8" y="755.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="938.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="935.8" y="739.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="938.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="935.8" y="723.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="938.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="707.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="938.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="691.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="938.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="675.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="938.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="659.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="938.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="643.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="938.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="627.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="938.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="611.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="938.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="595.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="938.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="579.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="938.8" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="563.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="938.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="547.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="938.8" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="531.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="938.8" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="515.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="938.8" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="499.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="938.8" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="483.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="938.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="467.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="938.8" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="451.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="938.8" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="435.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="938.8" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="419.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="938.8" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="403.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="938.8" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="387.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="938.8" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="371.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="938.8" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="355.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="938.8" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="339.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="938.8" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="323.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="938.8" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="307.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="938.8" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="291.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="938.8" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="275.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="938.8" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="259.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="938.8" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="243.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="938.8" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="227.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="938.8" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="211.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="938.8" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="195.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="938.8" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="179.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="938.8" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="163.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="938.8" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="147.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="938.8" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="131.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="938.8" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="115.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="938.8" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="99.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="938.8" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="83.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="938.8" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="67.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="938.8" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="935.8" y="51.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="938.8" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="935.8" y="35.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="938.8" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="936.7" y="707.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="939.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="936.7" y="691.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="939.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="936.7" y="675.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="939.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="936.7" y="659.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="939.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="936.7" y="643.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="939.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="936.7" y="627.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="939.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="936.7" y="611.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="939.7" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="936.7" y="595.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="939.7" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="936.7" y="579.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="939.7" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="936.7" y="563.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="939.7" y="574.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="936.7" y="547.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="939.7" y="558.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="936.7" y="531.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="939.7" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.30%)</title><rect x="937.6" y="787.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="940.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="937.6" y="771.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="940.6" y="782.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="937.6" y="755.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="940.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="938.5" y="771.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="941.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="939.3" y="755.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="942.3" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="939.3" y="739.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="942.3" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="723.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="942.3" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="707.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="942.3" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="691.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="942.3" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="675.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="942.3" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="659.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.3" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="643.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.3" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="627.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="942.3" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="611.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="942.3" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="595.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="942.3" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="579.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="942.3" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="563.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="942.3" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="547.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="942.3" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="531.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="942.3" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="515.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="942.3" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="499.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="942.3" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="483.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="942.3" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="467.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="942.3" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="451.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="942.3" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="435.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="942.3" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="419.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="942.3" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="403.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="942.3" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="387.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="942.3" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="371.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="942.3" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="355.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="942.3" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="339.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="942.3" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="323.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="942.3" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="307.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="942.3" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="291.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="942.3" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="275.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.3" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="259.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="942.3" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="243.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="942.3" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="227.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.3" y="238.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="939.3" y="211.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="942.3" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="940.2" y="723.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="943.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="940.2" y="707.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="943.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="940.2" y="691.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="943.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="940.2" y="675.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="943.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="940.2" y="659.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="943.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="940.2" y="643.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="943.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="940.2" y="627.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="943.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="940.2" y="611.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="943.2" y="622.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.07%)</title><rect x="941.1" y="851.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="944.1" y="862.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.07%)</title><rect x="941.1" y="835.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="944.1" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (248 samples, 18.36%)</title><rect x="941.9" y="851.0" width="216.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="944.9" y="862.0">PhaseIdealLoop::build_and_op..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.07%)</title><rect x="941.9" y="835.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="944.9" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (8 samples, 0.59%)</title><rect x="942.8" y="835.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="945.8" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.30%)</title><rect x="949.8" y="835.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="952.8" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.07%)</title><rect x="951.6" y="819.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="954.6" y="830.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.07%)</title><rect x="952.4" y="819.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="955.4" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (226 samples, 16.73%)</title><rect x="953.3" y="835.0" width="197.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="956.3" y="846.0">PhaseIdealLoop::build_loop..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (223 samples, 16.51%)</title><rect x="955.9" y="819.0" width="194.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="958.9" y="830.0">PhaseIdealLoop::build_loo..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (9 samples, 0.67%)</title><rect x="955.9" y="803.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="958.9" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (214 samples, 15.84%)</title><rect x="963.8" y="803.0" width="186.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="966.8" y="814.0">PhaseIdealLoop::get_late..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (4 samples, 0.30%)</title><rect x="1116.6" y="787.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1119.6" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.15%)</title><rect x="1118.4" y="771.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.4" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1119.3" y="755.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.3" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (34 samples, 2.52%)</title><rect x="1120.1" y="787.0" width="29.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.1" y="798.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1149.8" y="787.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.8" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.22%)</title><rect x="1150.7" y="835.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.7" y="846.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="1151.6" y="819.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.6" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.07%)</title><rect x="1152.4" y="819.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.4" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.30%)</title><rect x="1153.3" y="835.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.3" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.07%)</title><rect x="1155.1" y="819.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.1" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1155.1" y="803.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.1" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.07%)</title><rect x="1155.9" y="819.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.9" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.07%)</title><rect x="1155.9" y="803.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.9" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.15%)</title><rect x="1156.8" y="835.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.8" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.15%)</title><rect x="1156.8" y="819.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.8" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1156.8" y="803.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.8" y="814.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1157.7" y="803.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.7" y="814.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1157.7" y="787.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.7" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (18 samples, 1.33%)</title><rect x="1158.6" y="851.0" width="15.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.6" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (18 samples, 1.33%)</title><rect x="1158.6" y="835.0" width="15.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.6" y="846.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1158.6" y="819.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.6" y="830.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1158.6" y="803.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.6" y="814.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.07%)</title><rect x="1158.6" y="787.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.6" y="798.0"></text>
</g>
<g>
<title>IfNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1159.4" y="819.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.4" y="830.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1160.3" y="819.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.3" y="830.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1160.3" y="803.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.3" y="814.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1160.3" y="787.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.3" y="798.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1160.3" y="771.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.3" y="782.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1161.2" y="819.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.2" y="830.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1161.2" y="803.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.2" y="814.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1161.2" y="787.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.2" y="798.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1161.2" y="771.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.2" y="782.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1161.2" y="755.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.2" y="766.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.07%)</title><rect x="1161.2" y="739.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.2" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1162.1" y="819.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.1" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 0.30%)</title><rect x="1162.9" y="819.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.9" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1165.5" y="803.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.5" y="814.0"></text>
</g>
<g>
<title>AddPNode::Opcode() const (1 samples, 0.07%)</title><rect x="1165.5" y="787.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.5" y="798.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (3 samples, 0.22%)</title><rect x="1166.4" y="819.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.4" y="830.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (3 samples, 0.22%)</title><rect x="1166.4" y="803.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.4" y="814.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1169.0" y="819.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.0" y="830.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="1169.0" y="803.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.0" y="814.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1169.9" y="819.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.9" y="830.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1169.9" y="803.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.9" y="814.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1170.8" y="803.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.8" y="814.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 0.22%)</title><rect x="1171.7" y="819.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.7" y="830.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.15%)</title><rect x="1171.7" y="803.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.7" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.15%)</title><rect x="1171.7" y="787.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.7" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.15%)</title><rect x="1171.7" y="771.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.7" y="782.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.15%)</title><rect x="1171.7" y="755.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.7" y="766.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.15%)</title><rect x="1171.7" y="739.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.7" y="750.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1173.4" y="803.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.4" y="814.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.07%)</title><rect x="1173.4" y="787.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.4" y="798.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1173.4" y="771.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.4" y="782.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1173.4" y="755.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.4" y="766.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1173.4" y="739.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.4" y="750.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.07%)</title><rect x="1173.4" y="723.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.4" y="734.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.07%)</title><rect x="1174.3" y="851.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.3" y="862.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.07%)</title><rect x="1174.3" y="835.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.3" y="846.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1174.3" y="819.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.3" y="830.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.07%)</title><rect x="1174.3" y="803.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.3" y="814.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1174.3" y="787.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1177.3" y="798.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.15%)</title><rect x="1175.2" y="851.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.2" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.15%)</title><rect x="1175.2" y="835.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.2" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.15%)</title><rect x="1175.2" y="819.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.2" y="830.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1175.2" y="803.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="814.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1176.0" y="803.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.0" y="814.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1176.0" y="787.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.0" y="798.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1176.9" y="851.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.9" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.67%)</title><rect x="1177.8" y="867.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.8" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.67%)</title><rect x="1177.8" y="851.0" width="7.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.67%)</title><rect x="1177.8" y="835.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.67%)</title><rect x="1177.8" y="819.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.67%)</title><rect x="1177.8" y="803.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.8" y="814.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1177.8" y="787.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.8" y="798.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1177.8" y="771.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.8" y="782.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1177.8" y="755.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.52%)</title><rect x="1178.6" y="787.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.6" y="798.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1178.6" y="771.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.6" y="782.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1178.6" y="755.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.6" y="766.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1178.6" y="739.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.6" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.07%)</title><rect x="1178.6" y="723.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.6" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.30%)</title><rect x="1179.5" y="771.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.5" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.30%)</title><rect x="1179.5" y="755.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.30%)</title><rect x="1179.5" y="739.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.30%)</title><rect x="1179.5" y="723.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.30%)</title><rect x="1179.5" y="707.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.30%)</title><rect x="1179.5" y="691.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.5" y="702.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1179.5" y="675.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.5" y="686.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.07%)</title><rect x="1179.5" y="659.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.5" y="670.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.07%)</title><rect x="1179.5" y="643.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.5" y="654.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1179.5" y="627.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.5" y="638.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1179.5" y="611.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.5" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1179.5" y="595.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.5" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1179.5" y="579.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.5" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1179.5" y="563.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.5" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1179.5" y="547.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.5" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1179.5" y="531.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.5" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1179.5" y="515.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.5" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1179.5" y="499.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.5" y="510.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1179.5" y="483.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.5" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1179.5" y="467.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.5" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1179.5" y="451.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.5" y="462.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1179.5" y="435.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.5" y="446.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1179.5" y="419.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.5" y="430.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1179.5" y="403.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.5" y="414.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.07%)</title><rect x="1179.5" y="387.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.5" y="398.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.07%)</title><rect x="1179.5" y="371.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.5" y="382.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.07%)</title><rect x="1179.5" y="355.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.5" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1180.4" y="675.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.4" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1180.4" y="659.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1180.4" y="643.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1180.4" y="627.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1180.4" y="611.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1180.4" y="595.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1180.4" y="579.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.4" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1180.4" y="563.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1180.4" y="547.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1180.4" y="531.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1180.4" y="515.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1180.4" y="499.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.4" y="510.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1180.4" y="483.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.4" y="494.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.07%)</title><rect x="1180.4" y="467.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="478.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call_or_null(KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1180.4" y="451.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.4" y="462.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call(CallInfo&amp;, Handle, KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1180.4" y="435.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.4" y="446.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_interface_method(CallInfo&amp;, methodHandle, KlassHandle, Handle, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1180.4" y="419.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.4" y="430.0"></text>
</g>
<g>
<title>LinkResolver::lookup_instance_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, Thread*) (1 samples, 0.07%)</title><rect x="1180.4" y="403.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.4" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.07%)</title><rect x="1180.4" y="387.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.4" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.07%)</title><rect x="1180.4" y="371.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.4" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.3" y="483.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.3" y="467.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.3" y="451.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.3" y="435.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.3" y="419.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.3" y="403.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.3" y="387.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.3" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.3" y="371.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.3" y="355.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.3" y="339.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.3" y="323.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.07%)</title><rect x="1181.3" y="307.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="318.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.07%)</title><rect x="1181.3" y="291.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="302.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.07%)</title><rect x="1181.3" y="275.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="286.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar_volatile(int, int, Node*) (1 samples, 0.07%)</title><rect x="1181.3" y="259.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.3" y="270.0"></text>
</g>
<g>
<title>MemBarNode::make(Compile*, int, int, Node*) (1 samples, 0.07%)</title><rect x="1181.3" y="243.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.1" y="675.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.1" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.1" y="659.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.1" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.1" y="643.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.1" y="627.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.1" y="611.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.1" y="595.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.1" y="579.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.1" y="563.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.1" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.1" y="547.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.1" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.1" y="531.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.1" y="515.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.1" y="499.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.1" y="483.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.1" y="467.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.1" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.1" y="451.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.1" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.1" y="435.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.1" y="419.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.1" y="403.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.1" y="387.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.1" y="371.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.1" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.1" y="355.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.1" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.1" y="339.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.1" y="323.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.1" y="307.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.1" y="291.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.1" y="275.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.1" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.1" y="259.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.1" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.1" y="243.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.1" y="227.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.1" y="238.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1182.1" y="211.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.1" y="222.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.07%)</title><rect x="1182.1" y="195.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.1" y="206.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1182.1" y="179.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="190.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1182.1" y="163.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.1" y="174.0"></text>
</g>
<g>
<title>TypePtr::hash() const (1 samples, 0.07%)</title><rect x="1182.1" y="147.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.1" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1183.0" y="771.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.0" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1183.0" y="755.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.0" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1183.0" y="739.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1183.0" y="723.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1183.0" y="707.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1183.0" y="691.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1183.0" y="675.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.0" y="686.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1183.0" y="659.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.0" y="670.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1183.0" y="643.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.0" y="654.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1183.0" y="627.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.0" y="638.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1183.0" y="611.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.0" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1183.0" y="595.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.0" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1183.0" y="579.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.0" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1183.0" y="563.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.0" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1183.0" y="547.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.0" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1183.0" y="531.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.0" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1183.0" y="515.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.0" y="526.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1183.0" y="499.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.0" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1183.0" y="483.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.0" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1183.0" y="467.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.0" y="478.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1183.0" y="451.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.0" y="462.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1183.0" y="435.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.0" y="446.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1183.0" y="419.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.0" y="430.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1183.0" y="403.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.0" y="414.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1183.0" y="387.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.0" y="398.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1183.0" y="371.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.0" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.07%)</title><rect x="1183.0" y="355.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.0" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.07%)</title><rect x="1183.0" y="339.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.0" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.9" y="659.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.9" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.9" y="643.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.9" y="627.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.9" y="611.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.9" y="595.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.9" y="579.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.9" y="590.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1183.9" y="563.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.9" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1183.9" y="547.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.9" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1183.9" y="531.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.9" y="542.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1183.9" y="515.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.9" y="526.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1183.9" y="499.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.9" y="510.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1183.9" y="483.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.9" y="494.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1183.9" y="467.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.9" y="478.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1183.9" y="451.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.9" y="462.0"></text>
</g>
<g>
<title>SignatureStream::~SignatureStream() (1 samples, 0.07%)</title><rect x="1183.9" y="435.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1184.8" y="787.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1184.8" y="771.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.8" y="782.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.07%)</title><rect x="1184.8" y="755.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.8" y="766.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1184.8" y="739.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.8" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1184.8" y="723.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.8" y="734.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1184.8" y="707.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.8" y="718.0"></text>
</g>
<g>
<title>TypeLong::hash() const (1 samples, 0.07%)</title><rect x="1184.8" y="691.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.8" y="702.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="1185.6" y="867.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.6" y="878.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1185.6" y="851.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.6" y="862.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.07%)</title><rect x="1186.5" y="899.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.5" y="910.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.07%)</title><rect x="1186.5" y="883.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.5" y="894.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.07%)</title><rect x="1186.5" y="867.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.5" y="878.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.07%)</title><rect x="1186.5" y="851.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.5" y="862.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.07%)</title><rect x="1186.5" y="835.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.5" y="846.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.07%)</title><rect x="1186.5" y="819.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.5" y="830.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.07%)</title><rect x="1186.5" y="803.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.5" y="814.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.07%)</title><rect x="1186.5" y="787.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.5" y="798.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.22%)</title><rect x="1187.4" y="963.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.4" y="974.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.22%)</title><rect x="1187.4" y="947.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.4" y="958.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.07%)</title><rect x="1187.4" y="931.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.4" y="942.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (1 samples, 0.07%)</title><rect x="1188.3" y="931.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.3" y="942.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.07%)</title><rect x="1189.1" y="931.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.1" y="942.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.07%)</title><rect x="1189.1" y="915.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.1" y="926.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.07%)</title><rect x="1189.1" y="899.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.1" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.07%)</title><rect x="1189.1" y="883.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.1" y="894.0"></text>
</g>
<g>
<title>TraceMemoryManagerStats::TraceMemoryManagerStats(bool, GCCause::Cause, bool, bool, bool, bool, bool, bool, bool) (1 samples, 0.07%)</title><rect x="1189.1" y="867.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.1" y="878.0"></text>
</g>
<g>
<title>G1SurvivorPool::get_memory_usage() (1 samples, 0.07%)</title><rect x="1189.1" y="851.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.1" y="862.0"></text>
</g>
</g>
</svg>
