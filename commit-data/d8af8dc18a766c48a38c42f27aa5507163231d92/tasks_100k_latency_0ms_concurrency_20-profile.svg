<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1061"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1061"> </text>
<g id="frames">
<g>
<title>all (161 samples, 100.00%)</title><rect x="10.0" y="1027.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1038.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (28 samples, 17.39%)</title><rect x="10.0" y="1011.0" width="205.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1022.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (27 samples, 16.77%)</title><rect x="10.0" y="995.0" width="197.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1006.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.62%)</title><rect x="10.0" y="979.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.62%)</title><rect x="10.0" y="963.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/1428573220.accept (1 samples, 0.62%)</title><rect x="10.0" y="947.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.62%)</title><rect x="10.0" y="931.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.62%)</title><rect x="10.0" y="915.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.62%)</title><rect x="10.0" y="899.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.62%)</title><rect x="17.3" y="979.0" width="7.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.62%)</title><rect x="17.3" y="963.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.3" y="974.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.62%)</title><rect x="17.3" y="947.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.3" y="958.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.62%)</title><rect x="17.3" y="931.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.3" y="942.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.62%)</title><rect x="17.3" y="915.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.3" y="926.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (18 samples, 11.18%)</title><rect x="24.7" y="979.0" width="131.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="27.7" y="990.0">java/lang/Iterab..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/1138367127.accept (18 samples, 11.18%)</title><rect x="24.7" y="963.0" width="131.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.7" y="974.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (18 samples, 11.18%)</title><rect x="24.7" y="947.0" width="131.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.7" y="958.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.62%)</title><rect x="24.7" y="931.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="27.7" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (16 samples, 9.94%)</title><rect x="32.0" y="931.0" width="117.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.0" y="942.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (16 samples, 9.94%)</title><rect x="32.0" y="915.0" width="117.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="35.0" y="926.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (14 samples, 8.70%)</title><rect x="46.6" y="899.0" width="102.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="49.6" y="910.0">com/linecorp..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (14 samples, 8.70%)</title><rect x="46.6" y="883.0" width="102.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="49.6" y="894.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (14 samples, 8.70%)</title><rect x="46.6" y="867.0" width="102.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="49.6" y="878.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (14 samples, 8.70%)</title><rect x="46.6" y="851.0" width="102.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="49.6" y="862.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (13 samples, 8.07%)</title><rect x="46.6" y="835.0" width="95.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="49.6" y="846.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.24%)</title><rect x="46.6" y="819.0" width="14.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="49.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.24%)</title><rect x="46.6" y="803.0" width="14.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="49.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 1.24%)</title><rect x="46.6" y="787.0" width="14.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="49.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 6.83%)</title><rect x="61.3" y="819.0" width="80.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="64.3" y="830.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 6.83%)</title><rect x="61.3" y="803.0" width="80.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="64.3" y="814.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 6.83%)</title><rect x="61.3" y="787.0" width="80.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.3" y="798.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 6.83%)</title><rect x="61.3" y="771.0" width="80.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="64.3" y="782.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (11 samples, 6.83%)</title><rect x="61.3" y="755.0" width="80.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="64.3" y="766.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Unpark (10 samples, 6.21%)</title><rect x="61.3" y="739.0" width="73.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="64.3" y="750.0">Unsafe_U..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.62%)</title><rect x="61.3" y="723.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="64.3" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 3.11%)</title><rect x="68.6" y="723.0" width="36.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="71.6" y="734.0">__p..</text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 2.48%)</title><rect x="105.3" y="723.0" width="29.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="108.3" y="734.0">pt..</text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.62%)</title><rect x="134.6" y="739.0" width="7.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="137.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.62%)</title><rect x="141.9" y="835.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="144.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.62%)</title><rect x="141.9" y="819.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="144.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.62%)</title><rect x="141.9" y="803.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="144.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.62%)</title><rect x="141.9" y="787.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="144.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.62%)</title><rect x="149.3" y="931.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="152.3" y="942.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.62%)</title><rect x="149.3" y="915.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="152.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 4.35%)</title><rect x="156.6" y="979.0" width="51.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="159.6" y="990.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 4.35%)</title><rect x="156.6" y="963.0" width="51.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="159.6" y="974.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (3 samples, 1.86%)</title><rect x="156.6" y="947.0" width="22.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="159.6" y="958.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.86%)</title><rect x="156.6" y="931.0" width="22.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="159.6" y="942.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.86%)</title><rect x="156.6" y="915.0" width="22.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.6" y="926.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.86%)</title><rect x="156.6" y="899.0" width="22.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="159.6" y="910.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.86%)</title><rect x="156.6" y="883.0" width="22.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="159.6" y="894.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.62%)</title><rect x="156.6" y="867.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.6" y="878.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.62%)</title><rect x="156.6" y="851.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="159.6" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.62%)</title><rect x="156.6" y="835.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="159.6" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.62%)</title><rect x="156.6" y="819.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="159.6" y="830.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.62%)</title><rect x="156.6" y="803.0" width="7.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="159.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 1.24%)</title><rect x="163.9" y="867.0" width="14.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="166.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 1.24%)</title><rect x="163.9" y="851.0" width="14.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="166.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 1.24%)</title><rect x="163.9" y="835.0" width="14.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="166.9" y="846.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 1.24%)</title><rect x="163.9" y="819.0" width="14.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="166.9" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 1.24%)</title><rect x="163.9" y="803.0" width="14.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="166.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 1.24%)</title><rect x="178.6" y="947.0" width="14.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="181.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 1.24%)</title><rect x="178.6" y="931.0" width="14.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 1.24%)</title><rect x="178.6" y="915.0" width="14.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="181.6" y="926.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.62%)</title><rect x="178.6" y="899.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="181.6" y="910.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.62%)</title><rect x="178.6" y="883.0" width="7.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="181.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.62%)</title><rect x="185.9" y="899.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="188.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.62%)</title><rect x="185.9" y="883.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="188.9" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.62%)</title><rect x="185.9" y="867.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="188.9" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (1 samples, 0.62%)</title><rect x="185.9" y="851.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="188.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 1.24%)</title><rect x="193.2" y="947.0" width="14.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="196.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.62%)</title><rect x="193.2" y="931.0" width="7.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="196.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.62%)</title><rect x="193.2" y="915.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.put (1 samples, 0.62%)</title><rect x="193.2" y="899.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.62%)</title><rect x="193.2" y="883.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/Node.hashCode (1 samples, 0.62%)</title><rect x="193.2" y="867.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="196.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.62%)</title><rect x="200.6" y="931.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="203.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.62%)</title><rect x="200.6" y="915.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="203.6" y="926.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.62%)</title><rect x="200.6" y="899.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="203.6" y="910.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.62%)</title><rect x="200.6" y="883.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="203.6" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.62%)</title><rect x="200.6" y="867.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.6" y="878.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.hasNext (1 samples, 0.62%)</title><rect x="200.6" y="851.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="203.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.62%)</title><rect x="207.9" y="995.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="210.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.run (61 samples, 37.89%)</title><rect x="215.2" y="1011.0" width="447.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="218.2" y="1022.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (61 samples, 37.89%)</title><rect x="215.2" y="995.0" width="447.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="218.2" y="1006.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (61 samples, 37.89%)</title><rect x="215.2" y="979.0" width="447.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="218.2" y="990.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/81405562.run (43 samples, 26.71%)</title><rect x="229.9" y="963.0" width="315.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="232.9" y="974.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (43 samples, 26.71%)</title><rect x="229.9" y="947.0" width="315.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.9" y="958.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (43 samples, 26.71%)</title><rect x="229.9" y="931.0" width="315.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="232.9" y="942.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (43 samples, 26.71%)</title><rect x="229.9" y="915.0" width="315.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.9" y="926.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (8 samples, 4.97%)</title><rect x="237.2" y="899.0" width="58.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="240.2" y="910.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (8 samples, 4.97%)</title><rect x="237.2" y="883.0" width="58.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.2" y="894.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (8 samples, 4.97%)</title><rect x="237.2" y="867.0" width="58.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.2" y="878.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 4.97%)</title><rect x="237.2" y="851.0" width="58.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="240.2" y="862.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 4.97%)</title><rect x="237.2" y="835.0" width="58.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="240.2" y="846.0">com/li..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (8 samples, 4.97%)</title><rect x="237.2" y="819.0" width="58.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.2" y="830.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.62%)</title><rect x="237.2" y="803.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="240.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.62%)</title><rect x="237.2" y="787.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="240.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.62%)</title><rect x="237.2" y="771.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.62%)</title><rect x="237.2" y="755.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.62%)</title><rect x="237.2" y="739.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (6 samples, 3.73%)</title><rect x="244.5" y="803.0" width="44.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.5" y="814.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.62%)</title><rect x="244.5" y="787.0" width="7.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="247.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.62%)</title><rect x="244.5" y="771.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 3.11%)</title><rect x="251.9" y="787.0" width="36.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="254.9" y="798.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.62%)</title><rect x="251.9" y="771.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="254.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.62%)</title><rect x="251.9" y="755.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="254.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.62%)</title><rect x="251.9" y="739.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="254.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.62%)</title><rect x="251.9" y="723.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="254.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.62%)</title><rect x="251.9" y="707.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="254.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.62%)</title><rect x="251.9" y="691.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="254.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 2.48%)</title><rect x="259.2" y="771.0" width="29.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="262.2" y="782.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 2.48%)</title><rect x="259.2" y="755.0" width="29.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="262.2" y="766.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 2.48%)</title><rect x="259.2" y="739.0" width="29.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="262.2" y="750.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.62%)</title><rect x="259.2" y="723.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="262.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.62%)</title><rect x="259.2" y="707.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="262.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.62%)</title><rect x="259.2" y="691.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="262.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.62%)</title><rect x="259.2" y="675.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="262.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.62%)</title><rect x="266.5" y="723.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="269.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.62%)</title><rect x="266.5" y="707.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.62%)</title><rect x="266.5" y="691.0" width="7.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="269.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.62%)</title><rect x="266.5" y="675.0" width="7.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="269.5" y="686.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.62%)</title><rect x="266.5" y="659.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="269.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 1.24%)</title><rect x="273.9" y="723.0" width="14.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.9" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 1.24%)</title><rect x="273.9" y="707.0" width="14.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.9" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 1.24%)</title><rect x="273.9" y="691.0" width="14.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="276.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.62%)</title><rect x="288.5" y="803.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.62%)</title><rect x="288.5" y="787.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="291.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.62%)</title><rect x="288.5" y="771.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.62%)</title><rect x="288.5" y="755.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="291.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.62%)</title><rect x="288.5" y="739.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="291.5" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (32 samples, 19.88%)</title><rect x="295.8" y="899.0" width="234.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.8" y="910.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.62%)</title><rect x="317.8" y="883.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="320.8" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (3 samples, 1.86%)</title><rect x="325.2" y="883.0" width="21.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="328.2" y="894.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 1.86%)</title><rect x="325.2" y="867.0" width="21.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="328.2" y="878.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.86%)</title><rect x="325.2" y="851.0" width="21.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="328.2" y="862.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 1.86%)</title><rect x="325.2" y="835.0" width="21.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="328.2" y="846.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.62%)</title><rect x="339.8" y="819.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="342.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.62%)</title><rect x="339.8" y="803.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="342.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.62%)</title><rect x="347.1" y="883.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="350.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.62%)</title><rect x="347.1" y="867.0" width="7.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="350.1" y="878.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.62%)</title><rect x="347.1" y="851.0" width="7.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="350.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (13 samples, 8.07%)</title><rect x="354.5" y="883.0" width="95.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="357.5" y="894.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (13 samples, 8.07%)</title><rect x="354.5" y="867.0" width="95.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="357.5" y="878.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (6 samples, 3.73%)</title><rect x="361.8" y="851.0" width="44.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="364.8" y="862.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 3.73%)</title><rect x="361.8" y="835.0" width="44.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="364.8" y="846.0">java..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.62%)</title><rect x="361.8" y="819.0" width="7.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="364.8" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.62%)</title><rect x="361.8" y="803.0" width="7.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="364.8" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 2.48%)</title><rect x="369.1" y="819.0" width="29.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="372.1" y="830.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.86%)</title><rect x="376.5" y="803.0" width="21.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="379.5" y="814.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.86%)</title><rect x="376.5" y="787.0" width="21.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="379.5" y="798.0">j..</text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.62%)</title><rect x="398.4" y="819.0" width="7.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="401.4" y="830.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 1.24%)</title><rect x="405.8" y="851.0" width="14.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="408.8" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.62%)</title><rect x="413.1" y="835.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="416.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.topic (1 samples, 0.62%)</title><rect x="420.4" y="851.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="423.4" y="862.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 1.86%)</title><rect x="427.8" y="851.0" width="22.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="430.8" y="862.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 1.86%)</title><rect x="427.8" y="835.0" width="22.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="430.8" y="846.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.86%)</title><rect x="427.8" y="819.0" width="22.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="430.8" y="830.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.62%)</title><rect x="442.4" y="803.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="445.4" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (5 samples, 3.11%)</title><rect x="449.8" y="883.0" width="36.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="452.8" y="894.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (5 samples, 3.11%)</title><rect x="449.8" y="867.0" width="36.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="452.8" y="878.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/340408986.process (4 samples, 2.48%)</title><rect x="449.8" y="851.0" width="29.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="452.8" y="862.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (4 samples, 2.48%)</title><rect x="449.8" y="835.0" width="29.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="452.8" y="846.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (3 samples, 1.86%)</title><rect x="449.8" y="819.0" width="21.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="452.8" y="830.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.86%)</title><rect x="449.8" y="803.0" width="21.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="452.8" y="814.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.62%)</title><rect x="449.8" y="787.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="452.8" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.62%)</title><rect x="449.8" y="771.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="452.8" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.62%)</title><rect x="449.8" y="755.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="452.8" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.62%)</title><rect x="449.8" y="739.0" width="7.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="452.8" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 1.24%)</title><rect x="457.1" y="787.0" width="14.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="460.1" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.24%)</title><rect x="457.1" y="771.0" width="14.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="460.1" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.24%)</title><rect x="457.1" y="755.0" width="14.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="460.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.62%)</title><rect x="471.7" y="819.0" width="7.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="474.7" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.62%)</title><rect x="471.7" y="803.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="474.7" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.62%)</title><rect x="471.7" y="787.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="474.7" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.62%)</title><rect x="471.7" y="771.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="474.7" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.62%)</title><rect x="479.1" y="851.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="482.1" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.62%)</title><rect x="479.1" y="835.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="482.1" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.62%)</title><rect x="479.1" y="819.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="482.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.62%)</title><rect x="486.4" y="883.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="489.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.&lt;init&gt; (1 samples, 0.62%)</title><rect x="486.4" y="867.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="489.4" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/899159005.linkToTargetMethod (1 samples, 0.62%)</title><rect x="493.7" y="883.0" width="7.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="496.7" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/809762318.invokeStatic_L3_L (1 samples, 0.62%)</title><rect x="493.7" y="867.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="496.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$272/1016374454.get$Lambda (1 samples, 0.62%)</title><rect x="493.7" y="851.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="496.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 2.48%)</title><rect x="501.1" y="883.0" width="29.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="504.1" y="894.0">ja..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.62%)</title><rect x="501.1" y="867.0" width="7.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="504.1" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.62%)</title><rect x="501.1" y="851.0" width="7.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="504.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.86%)</title><rect x="508.4" y="867.0" width="22.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="511.4" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.86%)</title><rect x="508.4" y="851.0" width="22.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="511.4" y="862.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$272/1016374454.accept (3 samples, 1.86%)</title><rect x="508.4" y="835.0" width="22.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="511.4" y="846.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (3 samples, 1.86%)</title><rect x="508.4" y="819.0" width="22.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="511.4" y="830.0">c..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (3 samples, 1.86%)</title><rect x="508.4" y="803.0" width="22.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="511.4" y="814.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (3 samples, 1.86%)</title><rect x="508.4" y="787.0" width="22.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="511.4" y="798.0">i..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.86%)</title><rect x="508.4" y="771.0" width="22.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="511.4" y="782.0">_..</text>
</g>
<g>
<title>[vdso] (3 samples, 1.86%)</title><rect x="508.4" y="755.0" width="22.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="511.4" y="766.0">[..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.24%)</title><rect x="530.4" y="899.0" width="14.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="533.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.24%)</title><rect x="530.4" y="883.0" width="14.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="533.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.62%)</title><rect x="537.7" y="867.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="540.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$276/224837555.accept (1 samples, 0.62%)</title><rect x="537.7" y="851.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="540.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (1 samples, 0.62%)</title><rect x="537.7" y="835.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="540.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$259/2109522213.complete (1 samples, 0.62%)</title><rect x="537.7" y="819.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="540.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (1 samples, 0.62%)</title><rect x="537.7" y="803.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="540.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.62%)</title><rect x="537.7" y="787.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="540.7" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.62%)</title><rect x="537.7" y="771.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="540.7" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.62%)</title><rect x="537.7" y="755.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="540.7" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.62%)</title><rect x="537.7" y="739.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="540.7" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.62%)</title><rect x="537.7" y="723.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="540.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (16 samples, 9.94%)</title><rect x="545.0" y="963.0" width="117.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="548.0" y="974.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (16 samples, 9.94%)</title><rect x="545.0" y="947.0" width="117.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="548.0" y="958.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (13 samples, 8.07%)</title><rect x="567.0" y="931.0" width="95.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="570.0" y="942.0">java/util/c..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 1.24%)</title><rect x="567.0" y="915.0" width="14.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="570.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 6.83%)</title><rect x="581.7" y="915.0" width="80.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="584.7" y="926.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (11 samples, 6.83%)</title><rect x="581.7" y="899.0" width="80.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="584.7" y="910.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Park (11 samples, 6.83%)</title><rect x="581.7" y="883.0" width="80.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="584.7" y="894.0">Unsafe_Park</text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 1.24%)</title><rect x="581.7" y="867.0" width="14.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="584.7" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.178] (1 samples, 0.62%)</title><rect x="596.3" y="867.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="599.3" y="878.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.86%)</title><rect x="603.7" y="867.0" width="22.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="606.7" y="878.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 2.48%)</title><rect x="625.7" y="867.0" width="29.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="628.7" y="878.0">__..</text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.62%)</title><rect x="655.0" y="867.0" width="7.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="658.0" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.62%)</title><rect x="662.3" y="1011.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="665.3" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.62%)</title><rect x="662.3" y="995.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="665.3" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.62%)</title><rect x="662.3" y="979.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="665.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.62%)</title><rect x="662.3" y="963.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="665.3" y="974.0"></text>
</g>
<g>
<title>start_thread (71 samples, 44.10%)</title><rect x="669.6" y="1011.0" width="520.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="672.6" y="1022.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (71 samples, 44.10%)</title><rect x="669.6" y="995.0" width="520.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="672.6" y="1006.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 6.21%)</title><rect x="669.6" y="979.0" width="73.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="672.6" y="990.0">GangWork..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.62%)</title><rect x="669.6" y="963.0" width="7.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="672.6" y="974.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.62%)</title><rect x="669.6" y="947.0" width="7.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="672.6" y="958.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.62%)</title><rect x="669.6" y="931.0" width="7.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="672.6" y="942.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (9 samples, 5.59%)</title><rect x="677.0" y="963.0" width="65.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="680.0" y="974.0">G1ParTa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 3.73%)</title><rect x="677.0" y="947.0" width="43.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="680.0" y="958.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 1.24%)</title><rect x="677.0" y="931.0" width="14.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="680.0" y="942.0"></text>
</g>
<g>
<title>G1DefaultParGCAllocator::alloc_buffer(InCSetState, unsigned char) (1 samples, 0.62%)</title><rect x="684.3" y="915.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="687.3" y="926.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (4 samples, 2.48%)</title><rect x="691.6" y="931.0" width="29.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="694.6" y="942.0">Ge..</text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 1.24%)</title><rect x="720.9" y="947.0" width="14.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="723.9" y="958.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.62%)</title><rect x="720.9" y="931.0" width="7.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="723.9" y="942.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.62%)</title><rect x="720.9" y="915.0" width="7.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="723.9" y="926.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.62%)</title><rect x="720.9" y="899.0" width="7.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="723.9" y="910.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.62%)</title><rect x="720.9" y="883.0" width="7.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="723.9" y="894.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.62%)</title><rect x="720.9" y="867.0" width="7.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="723.9" y="878.0"></text>
</g>
<g>
<title>java_lang_Class::oop_size(oopDesc*) (1 samples, 0.62%)</title><rect x="720.9" y="851.0" width="7.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="723.9" y="862.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.62%)</title><rect x="728.3" y="931.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="731.3" y="942.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.62%)</title><rect x="728.3" y="915.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="731.3" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.62%)</title><rect x="735.6" y="947.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="738.6" y="958.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.62%)</title><rect x="735.6" y="931.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="738.6" y="942.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.62%)</title><rect x="735.6" y="915.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="738.6" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.62%)</title><rect x="735.6" y="899.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="738.6" y="910.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.62%)</title><rect x="735.6" y="883.0" width="7.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="738.6" y="894.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.62%)</title><rect x="735.6" y="867.0" width="7.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="738.6" y="878.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.62%)</title><rect x="735.6" y="851.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="738.6" y="862.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.62%)</title><rect x="735.6" y="835.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="738.6" y="846.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (61 samples, 37.89%)</title><rect x="742.9" y="979.0" width="447.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="745.9" y="990.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (61 samples, 37.89%)</title><rect x="742.9" y="963.0" width="447.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="745.9" y="974.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (61 samples, 37.89%)</title><rect x="742.9" y="947.0" width="447.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="745.9" y="958.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (57 samples, 35.40%)</title><rect x="742.9" y="931.0" width="417.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="745.9" y="942.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (57 samples, 35.40%)</title><rect x="742.9" y="915.0" width="417.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="745.9" y="926.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, boo..</text>
</g>
<g>
<title>Compile::Code_Gen() (30 samples, 18.63%)</title><rect x="742.9" y="899.0" width="219.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="745.9" y="910.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.62%)</title><rect x="742.9" y="883.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="745.9" y="894.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.62%)</title><rect x="742.9" y="867.0" width="7.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="745.9" y="878.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.62%)</title><rect x="742.9" y="851.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="745.9" y="862.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.62%)</title><rect x="742.9" y="835.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="745.9" y="846.0"></text>
</g>
<g>
<title>andL_rReg_immNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.62%)</title><rect x="742.9" y="819.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="745.9" y="830.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.62%)</title><rect x="750.2" y="883.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="753.2" y="894.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.86%)</title><rect x="757.6" y="883.0" width="22.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="760.6" y="894.0">M..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.86%)</title><rect x="757.6" y="867.0" width="22.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="760.6" y="878.0">M..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.24%)</title><rect x="757.6" y="851.0" width="14.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="760.6" y="862.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.62%)</title><rect x="757.6" y="835.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="760.6" y="846.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.62%)</title><rect x="757.6" y="819.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="760.6" y="830.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.62%)</title><rect x="757.6" y="803.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="760.6" y="814.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.62%)</title><rect x="757.6" y="787.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="760.6" y="798.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.62%)</title><rect x="757.6" y="771.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="760.6" y="782.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.62%)</title><rect x="764.9" y="835.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="767.9" y="846.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.62%)</title><rect x="764.9" y="819.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="767.9" y="830.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.62%)</title><rect x="764.9" y="803.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="767.9" y="814.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.62%)</title><rect x="772.2" y="851.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="775.2" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.62%)</title><rect x="779.6" y="883.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="782.6" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.62%)</title><rect x="779.6" y="867.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="782.6" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.62%)</title><rect x="779.6" y="851.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="782.6" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (23 samples, 14.29%)</title><rect x="786.9" y="883.0" width="168.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="789.9" y="894.0">PhaseChaitin::Register..</text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.62%)</title><rect x="786.9" y="867.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="789.9" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.62%)</title><rect x="786.9" y="851.0" width="7.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="789.9" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 2.48%)</title><rect x="794.2" y="867.0" width="29.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="797.2" y="878.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 4.35%)</title><rect x="823.5" y="867.0" width="51.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="826.5" y="878.0">Phase..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.62%)</title><rect x="845.5" y="851.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="848.5" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.24%)</title><rect x="852.9" y="851.0" width="14.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="855.9" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.62%)</title><rect x="860.2" y="835.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="863.2" y="846.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.62%)</title><rect x="867.5" y="851.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="870.5" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (1 samples, 0.62%)</title><rect x="874.8" y="867.0" width="7.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="877.8" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 3.11%)</title><rect x="882.2" y="867.0" width="36.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="885.2" y="878.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.62%)</title><rect x="911.5" y="851.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="914.5" y="862.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.62%)</title><rect x="918.8" y="867.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="921.8" y="878.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.62%)</title><rect x="918.8" y="851.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="921.8" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.62%)</title><rect x="918.8" y="835.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="921.8" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.62%)</title><rect x="926.1" y="867.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="929.1" y="878.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.24%)</title><rect x="933.5" y="867.0" width="14.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="936.5" y="878.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.24%)</title><rect x="933.5" y="851.0" width="14.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="936.5" y="862.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.62%)</title><rect x="948.1" y="867.0" width="7.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="951.1" y="878.0"></text>
</g>
<g>
<title>jmpCon_shortNode::label_set(Label*, unsigned int) (1 samples, 0.62%)</title><rect x="955.5" y="883.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="958.5" y="894.0"></text>
</g>
<g>
<title>Compile::Optimize() (18 samples, 11.18%)</title><rect x="962.8" y="899.0" width="131.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="965.8" y="910.0">Compile::Optimiz..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.62%)</title><rect x="962.8" y="883.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="965.8" y="894.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.62%)</title><rect x="962.8" y="867.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="965.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 1.24%)</title><rect x="970.1" y="883.0" width="14.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="973.1" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 1.24%)</title><rect x="970.1" y="867.0" width="14.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="973.1" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.62%)</title><rect x="970.1" y="851.0" width="7.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="973.1" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.62%)</title><rect x="970.1" y="835.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="973.1" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.62%)</title><rect x="977.5" y="851.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="980.5" y="862.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.62%)</title><rect x="977.5" y="835.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="980.5" y="846.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.62%)</title><rect x="977.5" y="819.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="980.5" y="830.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.62%)</title><rect x="977.5" y="803.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="980.5" y="814.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.62%)</title><rect x="977.5" y="787.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="980.5" y="798.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.62%)</title><rect x="977.5" y="771.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="980.5" y="782.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.62%)</title><rect x="977.5" y="755.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="980.5" y="766.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.62%)</title><rect x="977.5" y="739.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="980.5" y="750.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.62%)</title><rect x="977.5" y="723.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="980.5" y="734.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.62%)</title><rect x="977.5" y="707.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="980.5" y="718.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.62%)</title><rect x="977.5" y="691.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="980.5" y="702.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.62%)</title><rect x="977.5" y="675.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="980.5" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.62%)</title><rect x="977.5" y="659.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="980.5" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.62%)</title><rect x="977.5" y="643.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="980.5" y="654.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.62%)</title><rect x="977.5" y="627.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="980.5" y="638.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol*) (1 samples, 0.62%)</title><rect x="977.5" y="611.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="980.5" y="622.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.62%)</title><rect x="984.8" y="883.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="987.8" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (11 samples, 6.83%)</title><rect x="992.1" y="883.0" width="80.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="995.1" y="894.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 3.11%)</title><rect x="992.1" y="867.0" width="36.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="995.1" y="878.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 2.48%)</title><rect x="999.4" y="851.0" width="29.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1002.4" y="862.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 1.86%)</title><rect x="1006.8" y="835.0" width="22.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1009.8" y="846.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (3 samples, 1.86%)</title><rect x="1006.8" y="819.0" width="22.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1009.8" y="830.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 1.86%)</title><rect x="1028.8" y="867.0" width="21.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1031.8" y="878.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.62%)</title><rect x="1043.4" y="851.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1046.4" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.62%)</title><rect x="1043.4" y="835.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1046.4" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.24%)</title><rect x="1050.7" y="867.0" width="14.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1053.7" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.24%)</title><rect x="1050.7" y="851.0" width="14.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1053.7" y="862.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseTransform*) (1 samples, 0.62%)</title><rect x="1050.7" y="835.0" width="7.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1053.7" y="846.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.62%)</title><rect x="1050.7" y="819.0" width="7.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1053.7" y="830.0"></text>
</g>
<g>
<title>TypeInt::eq(Type const*) const (1 samples, 0.62%)</title><rect x="1050.7" y="803.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1053.7" y="814.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.62%)</title><rect x="1058.1" y="835.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1061.1" y="846.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.62%)</title><rect x="1058.1" y="819.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1061.1" y="830.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.62%)</title><rect x="1065.4" y="867.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1068.4" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.86%)</title><rect x="1072.7" y="883.0" width="22.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1075.7" y="894.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.86%)</title><rect x="1072.7" y="867.0" width="22.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1075.7" y="878.0">P..</text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.62%)</title><rect x="1072.7" y="851.0" width="7.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1075.7" y="862.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.62%)</title><rect x="1072.7" y="835.0" width="7.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1075.7" y="846.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 1.24%)</title><rect x="1080.1" y="851.0" width="14.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1083.1" y="862.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.62%)</title><rect x="1080.1" y="835.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1083.1" y="846.0"></text>
</g>
<g>
<title>RegionNode::try_clean_mem_phi(PhaseGVN*) (1 samples, 0.62%)</title><rect x="1087.4" y="835.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1090.4" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 4.35%)</title><rect x="1094.7" y="899.0" width="51.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1097.7" y="910.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 4.35%)</title><rect x="1094.7" y="883.0" width="51.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1097.7" y="894.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 4.35%)</title><rect x="1094.7" y="867.0" width="51.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.7" y="878.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 4.35%)</title><rect x="1094.7" y="851.0" width="51.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1097.7" y="862.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 4.35%)</title><rect x="1094.7" y="835.0" width="51.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.7" y="846.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 4.35%)</title><rect x="1094.7" y="819.0" width="51.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.7" y="830.0">Parse..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.48%)</title><rect x="1094.7" y="803.0" width="29.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1097.7" y="814.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.48%)</title><rect x="1094.7" y="787.0" width="29.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.7" y="798.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.48%)</title><rect x="1094.7" y="771.0" width="29.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.7" y="782.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.48%)</title><rect x="1094.7" y="755.0" width="29.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.7" y="766.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.48%)</title><rect x="1094.7" y="739.0" width="29.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.7" y="750.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.86%)</title><rect x="1094.7" y="723.0" width="22.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1097.7" y="734.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.86%)</title><rect x="1094.7" y="707.0" width="22.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1097.7" y="718.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.86%)</title><rect x="1094.7" y="691.0" width="22.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.7" y="702.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.86%)</title><rect x="1094.7" y="675.0" width="22.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.7" y="686.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.86%)</title><rect x="1094.7" y="659.0" width="22.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1097.7" y="670.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.86%)</title><rect x="1094.7" y="643.0" width="22.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1097.7" y="654.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.86%)</title><rect x="1094.7" y="627.0" width="22.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1097.7" y="638.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.62%)</title><rect x="1094.7" y="611.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1097.7" y="622.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.62%)</title><rect x="1094.7" y="595.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1097.7" y="606.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.62%)</title><rect x="1094.7" y="579.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1097.7" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.62%)</title><rect x="1094.7" y="563.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1097.7" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.62%)</title><rect x="1094.7" y="547.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.7" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.62%)</title><rect x="1094.7" y="531.0" width="7.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1097.7" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.62%)</title><rect x="1094.7" y="515.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1097.7" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.62%)</title><rect x="1094.7" y="499.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1097.7" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.62%)</title><rect x="1094.7" y="483.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.7" y="494.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.62%)</title><rect x="1094.7" y="467.0" width="7.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1097.7" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.62%)</title><rect x="1094.7" y="451.0" width="7.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1097.7" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.62%)</title><rect x="1094.7" y="435.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.7" y="446.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.62%)</title><rect x="1094.7" y="419.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.7" y="430.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.62%)</title><rect x="1094.7" y="403.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1097.7" y="414.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.62%)</title><rect x="1094.7" y="387.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.7" y="398.0"></text>
</g>
<g>
<title>Method::invocation_count() (1 samples, 0.62%)</title><rect x="1094.7" y="371.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1097.7" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.24%)</title><rect x="1102.0" y="611.0" width="14.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1105.0" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.24%)</title><rect x="1102.0" y="595.0" width="14.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1105.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.24%)</title><rect x="1102.0" y="579.0" width="14.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.24%)</title><rect x="1102.0" y="563.0" width="14.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1105.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.24%)</title><rect x="1102.0" y="547.0" width="14.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1105.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.24%)</title><rect x="1102.0" y="531.0" width="14.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1105.0" y="542.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1102.0" y="515.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.0" y="526.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.62%)</title><rect x="1102.0" y="499.0" width="7.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.0" y="510.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_reference_get() (1 samples, 0.62%)</title><rect x="1102.0" y="483.0" width="7.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.0" y="494.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.62%)</title><rect x="1102.0" y="467.0" width="7.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.0" y="478.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.62%)</title><rect x="1102.0" y="451.0" width="7.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1105.0" y="462.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.62%)</title><rect x="1102.0" y="435.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1105.0" y="446.0"></text>
</g>
<g>
<title>LoadNode::hash() const (1 samples, 0.62%)</title><rect x="1102.0" y="419.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.0" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1109.4" y="515.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1112.4" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1109.4" y="499.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1109.4" y="483.0" width="7.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1112.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1109.4" y="467.0" width="7.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1112.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1109.4" y="451.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1112.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.62%)</title><rect x="1109.4" y="435.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1112.4" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1109.4" y="419.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1112.4" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1109.4" y="403.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1112.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1109.4" y="387.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1109.4" y="371.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1109.4" y="355.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.62%)</title><rect x="1109.4" y="339.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.4" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1109.4" y="323.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.4" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1109.4" y="307.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1109.4" y="291.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1112.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1109.4" y="275.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1112.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1109.4" y="259.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1112.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.62%)</title><rect x="1109.4" y="243.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.4" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1109.4" y="227.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1112.4" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1109.4" y="211.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1109.4" y="195.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1112.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1109.4" y="179.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1109.4" y="163.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.62%)</title><rect x="1109.4" y="147.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1112.4" y="158.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.62%)</title><rect x="1109.4" y="131.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1112.4" y="142.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.62%)</title><rect x="1109.4" y="115.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1112.4" y="126.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.62%)</title><rect x="1109.4" y="99.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.4" y="110.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.62%)</title><rect x="1109.4" y="83.0" width="7.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1112.4" y="94.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.62%)</title><rect x="1116.7" y="723.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.62%)</title><rect x="1116.7" y="707.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1119.7" y="718.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.62%)</title><rect x="1116.7" y="691.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.7" y="702.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.62%)</title><rect x="1116.7" y="675.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.7" y="686.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.62%)</title><rect x="1116.7" y="659.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1119.7" y="670.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.62%)</title><rect x="1116.7" y="643.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1119.7" y="654.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.24%)</title><rect x="1124.0" y="803.0" width="14.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.0" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1124.0" y="787.0" width="7.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.0" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1124.0" y="771.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1124.0" y="755.0" width="7.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1124.0" y="739.0" width="7.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1124.0" y="723.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.62%)</title><rect x="1124.0" y="707.0" width="7.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.0" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1124.0" y="691.0" width="7.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.0" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1124.0" y="675.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1124.0" y="659.0" width="7.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1124.0" y="643.0" width="7.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1124.0" y="627.0" width="7.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.62%)</title><rect x="1124.0" y="611.0" width="7.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.0" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1124.0" y="595.0" width="7.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.0" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1124.0" y="579.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1124.0" y="563.0" width="7.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1127.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1124.0" y="547.0" width="7.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1124.0" y="531.0" width="7.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1127.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.62%)</title><rect x="1124.0" y="515.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.0" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1124.0" y="499.0" width="7.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.0" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1124.0" y="483.0" width="7.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.0" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1124.0" y="467.0" width="7.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1127.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1124.0" y="451.0" width="7.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1124.0" y="435.0" width="7.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1127.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1124.0" y="419.0" width="7.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.62%)</title><rect x="1124.0" y="403.0" width="7.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.0" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1124.0" y="387.0" width="7.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1127.0" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1124.0" y="371.0" width="7.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1127.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1124.0" y="355.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1124.0" y="339.0" width="7.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1124.0" y="323.0" width="7.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.62%)</title><rect x="1124.0" y="307.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.0" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1124.0" y="291.0" width="7.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.0" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1124.0" y="275.0" width="7.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1124.0" y="259.0" width="7.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1124.0" y="243.0" width="7.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1124.0" y="227.0" width="7.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.62%)</title><rect x="1124.0" y="211.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.0" y="222.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.62%)</title><rect x="1124.0" y="195.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.0" y="206.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.62%)</title><rect x="1124.0" y="179.0" width="7.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.0" y="190.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.62%)</title><rect x="1124.0" y="163.0" width="7.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.0" y="174.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.62%)</title><rect x="1124.0" y="147.0" width="7.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.0" y="158.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.62%)</title><rect x="1124.0" y="131.0" width="7.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.0" y="142.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.62%)</title><rect x="1124.0" y="115.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.0" y="126.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.62%)</title><rect x="1124.0" y="99.0" width="7.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.0" y="110.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.62%)</title><rect x="1124.0" y="83.0" width="7.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1127.0" y="94.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.62%)</title><rect x="1124.0" y="67.0" width="7.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.0" y="78.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.62%)</title><rect x="1124.0" y="51.0" width="7.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1127.0" y="62.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.62%)</title><rect x="1124.0" y="35.0" width="7.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1127.0" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1131.4" y="787.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.4" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1131.4" y="771.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.4" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1131.4" y="755.0" width="7.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1131.4" y="739.0" width="7.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1131.4" y="723.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1131.4" y="707.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.62%)</title><rect x="1131.4" y="691.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.4" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1131.4" y="675.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.4" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1131.4" y="659.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1131.4" y="643.0" width="7.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1131.4" y="627.0" width="7.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1131.4" y="611.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.62%)</title><rect x="1131.4" y="595.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1131.4" y="579.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.4" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1131.4" y="563.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1131.4" y="547.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1131.4" y="531.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1131.4" y="515.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.62%)</title><rect x="1131.4" y="499.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.4" y="510.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.62%)</title><rect x="1131.4" y="483.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.4" y="494.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.62%)</title><rect x="1131.4" y="467.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.4" y="478.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.62%)</title><rect x="1131.4" y="451.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.4" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::map_blocks() (1 samples, 0.62%)</title><rect x="1131.4" y="435.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.4" y="446.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.62%)</title><rect x="1138.7" y="803.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1141.7" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::has_method_type() (1 samples, 0.62%)</title><rect x="1138.7" y="787.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.7" y="798.0"></text>
</g>
<g>
<title>ConstantPool::has_method_type_at_if_loaded(constantPoolHandle, int) (1 samples, 0.62%)</title><rect x="1138.7" y="771.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.7" y="782.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.62%)</title><rect x="1146.0" y="899.0" width="7.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1149.0" y="910.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.62%)</title><rect x="1153.4" y="899.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.4" y="910.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.62%)</title><rect x="1153.4" y="883.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.4" y="894.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.62%)</title><rect x="1153.4" y="867.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.4" y="878.0"></text>
</g>
<g>
<title>oop_Relocation::oop_value() (1 samples, 0.62%)</title><rect x="1153.4" y="851.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.4" y="862.0"></text>
</g>
<g>
<title>Assembler::locate_operand(unsigned char*, Assembler::WhichOperand) (1 samples, 0.62%)</title><rect x="1153.4" y="835.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.4" y="846.0"></text>
</g>
<g>
<title>CompileTask::print_compilation_impl(outputStream*, Method*, int, int, bool, int, bool, char const*, bool) (1 samples, 0.62%)</title><rect x="1160.7" y="931.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.7" y="942.0"></text>
</g>
<g>
<title>__strchr_sse42 (1 samples, 0.62%)</title><rect x="1160.7" y="915.0" width="7.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1163.7" y="926.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.86%)</title><rect x="1168.0" y="931.0" width="22.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.0" y="942.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.86%)</title><rect x="1168.0" y="915.0" width="22.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.0" y="926.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.86%)</title><rect x="1168.0" y="899.0" width="22.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.0" y="910.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.24%)</title><rect x="1168.0" y="883.0" width="14.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.0" y="894.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.62%)</title><rect x="1168.0" y="867.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.0" y="878.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.62%)</title><rect x="1168.0" y="851.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.0" y="862.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.62%)</title><rect x="1168.0" y="835.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.0" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.62%)</title><rect x="1168.0" y="819.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.0" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.62%)</title><rect x="1168.0" y="803.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.0" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.62%)</title><rect x="1168.0" y="787.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.0" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.62%)</title><rect x="1168.0" y="771.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.0" y="782.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.62%)</title><rect x="1168.0" y="755.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.0" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.62%)</title><rect x="1168.0" y="739.0" width="7.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.0" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.62%)</title><rect x="1168.0" y="723.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.0" y="734.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.62%)</title><rect x="1168.0" y="707.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.0" y="718.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.62%)</title><rect x="1168.0" y="691.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.0" y="702.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.62%)</title><rect x="1168.0" y="675.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.0" y="686.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.62%)</title><rect x="1168.0" y="659.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.0" y="670.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.62%)</title><rect x="1168.0" y="643.0" width="7.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.0" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::OverpassLookupMode) const (1 samples, 0.62%)</title><rect x="1168.0" y="627.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.0" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.62%)</title><rect x="1168.0" y="611.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.0" y="622.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt;*, Symbol*) (1 samples, 0.62%)</title><rect x="1168.0" y="595.0" width="7.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1171.0" y="606.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.62%)</title><rect x="1175.3" y="867.0" width="7.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.3" y="878.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.62%)</title><rect x="1175.3" y="851.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.3" y="862.0"></text>
</g>
<g>
<title>LinearScan::eliminate_spill_moves() (1 samples, 0.62%)</title><rect x="1175.3" y="835.0" width="7.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.3" y="846.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.62%)</title><rect x="1182.7" y="883.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.7" y="894.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.62%)</title><rect x="1182.7" y="867.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.7" y="878.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.62%)</title><rect x="1182.7" y="851.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.7" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_nmethod(nmethod*) (1 samples, 0.62%)</title><rect x="1182.7" y="835.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.7" y="846.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.62%)</title><rect x="1182.7" y="819.0" width="7.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.7" y="830.0"></text>
</g>
<g>
<title>G1CodeRootSet::add(nmethod*) (1 samples, 0.62%)</title><rect x="1182.7" y="803.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.7" y="814.0"></text>
</g>
</g>
</svg>
