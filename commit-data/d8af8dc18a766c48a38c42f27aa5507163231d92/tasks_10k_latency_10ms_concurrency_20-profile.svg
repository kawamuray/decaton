<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1238" onload="init(evt)" viewBox="0 0 1200 1238" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1221"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1221"> </text>
<g id="frames">
<g>
<title>all (92 samples, 100.00%)</title><rect x="10.0" y="1187.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1198.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (4 samples, 4.35%)</title><rect x="10.0" y="1171.0" width="51.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1182.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 1.09%)</title><rect x="10.0" y="1155.0" width="12.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 1.09%)</title><rect x="10.0" y="1139.0" width="12.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 1.09%)</title><rect x="10.0" y="1123.0" width="12.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 1.09%)</title><rect x="10.0" y="1107.0" width="12.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 1.09%)</title><rect x="10.0" y="1091.0" width="12.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 1.09%)</title><rect x="10.0" y="1075.0" width="12.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 1.09%)</title><rect x="10.0" y="1059.0" width="12.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 1.09%)</title><rect x="10.0" y="1043.0" width="12.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 1.09%)</title><rect x="10.0" y="1027.0" width="12.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 1.09%)</title><rect x="10.0" y="1011.0" width="12.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 1.09%)</title><rect x="10.0" y="995.0" width="12.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 1.09%)</title><rect x="10.0" y="979.0" width="12.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 1.09%)</title><rect x="10.0" y="963.0" width="12.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 1.09%)</title><rect x="10.0" y="947.0" width="12.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 1.09%)</title><rect x="10.0" y="931.0" width="12.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 1.09%)</title><rect x="10.0" y="915.0" width="12.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$9.validate (1 samples, 1.09%)</title><rect x="10.0" y="899.0" width="12.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (3 samples, 3.26%)</title><rect x="22.8" y="1155.0" width="38.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.8" y="1166.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 1.09%)</title><rect x="22.8" y="1139.0" width="12.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.8" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 1.09%)</title><rect x="22.8" y="1123.0" width="12.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/480014987.accept (1 samples, 1.09%)</title><rect x="22.8" y="1107.0" width="12.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 1.09%)</title><rect x="22.8" y="1091.0" width="12.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 1.09%)</title><rect x="22.8" y="1075.0" width="12.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.8" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 1.09%)</title><rect x="22.8" y="1059.0" width="12.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (2 samples, 2.17%)</title><rect x="35.7" y="1139.0" width="25.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.7" y="1150.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (2 samples, 2.17%)</title><rect x="35.7" y="1123.0" width="25.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.7" y="1134.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (1 samples, 1.09%)</title><rect x="35.7" y="1107.0" width="12.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="38.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 1.09%)</title><rect x="35.7" y="1091.0" width="12.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="38.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 1.09%)</title><rect x="35.7" y="1075.0" width="12.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 1.09%)</title><rect x="35.7" y="1059.0" width="12.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="38.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.wakeup (1 samples, 1.09%)</title><rect x="35.7" y="1043.0" width="12.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.wakeup (1 samples, 1.09%)</title><rect x="35.7" y="1027.0" width="12.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.7" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (1 samples, 1.09%)</title><rect x="35.7" y="1011.0" width="12.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="38.7" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (1 samples, 1.09%)</title><rect x="35.7" y="995.0" width="12.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.7" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (1 samples, 1.09%)</title><rect x="35.7" y="979.0" width="12.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="38.7" y="990.0"></text>
</g>
<g>
<title>__write (1 samples, 1.09%)</title><rect x="35.7" y="963.0" width="12.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="38.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 1.09%)</title><rect x="48.5" y="1107.0" width="12.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 1.09%)</title><rect x="48.5" y="1091.0" width="12.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="51.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 1.09%)</title><rect x="48.5" y="1075.0" width="12.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 1.09%)</title><rect x="48.5" y="1059.0" width="12.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="51.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NodeApiVersions.latestUsableVersion (1 samples, 1.09%)</title><rect x="48.5" y="1043.0" width="12.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="51.5" y="1054.0"></text>
</g>
<g>
<title>java/util/EnumMap.get (1 samples, 1.09%)</title><rect x="48.5" y="1027.0" width="12.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.5" y="1038.0"></text>
</g>
<g>
<title>java/util/EnumMap.isValidKey (1 samples, 1.09%)</title><rect x="48.5" y="1011.0" width="12.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.5" y="1022.0"></text>
</g>
<g>
<title>start_thread (88 samples, 95.65%)</title><rect x="61.3" y="1171.0" width="1128.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="64.3" y="1182.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (88 samples, 95.65%)</title><rect x="61.3" y="1155.0" width="1128.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="64.3" y="1166.0">java_start(Thread*)</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (88 samples, 95.65%)</title><rect x="61.3" y="1139.0" width="1128.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="64.3" y="1150.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (88 samples, 95.65%)</title><rect x="61.3" y="1123.0" width="1128.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="64.3" y="1134.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (87 samples, 94.57%)</title><rect x="61.3" y="1107.0" width="1115.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="64.3" y="1118.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (85 samples, 92.39%)</title><rect x="61.3" y="1091.0" width="1090.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="64.3" y="1102.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (85 samples, 92.39%)</title><rect x="61.3" y="1075.0" width="1090.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="64.3" y="1086.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (37 samples, 40.22%)</title><rect x="61.3" y="1059.0" width="474.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="64.3" y="1070.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 1.09%)</title><rect x="61.3" y="1043.0" width="12.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="64.3" y="1054.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 1.09%)</title><rect x="61.3" y="1027.0" width="12.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="64.3" y="1038.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 1.09%)</title><rect x="61.3" y="1011.0" width="12.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="64.3" y="1022.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 1.09%)</title><rect x="61.3" y="995.0" width="12.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="64.3" y="1006.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 1.09%)</title><rect x="74.1" y="1043.0" width="12.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="77.1" y="1054.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 1.09%)</title><rect x="74.1" y="1027.0" width="12.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="77.1" y="1038.0"></text>
</g>
<g>
<title>Matcher::Matcher() (1 samples, 1.09%)</title><rect x="87.0" y="1043.0" width="12.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="90.0" y="1054.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 4.35%)</title><rect x="99.8" y="1043.0" width="51.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="102.8" y="1054.0">Match..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 4.35%)</title><rect x="99.8" y="1027.0" width="51.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="102.8" y="1038.0">Match..</text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 2.17%)</title><rect x="112.6" y="1011.0" width="25.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="115.6" y="1022.0">A..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 1.09%)</title><rect x="138.3" y="1011.0" width="12.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="141.3" y="1022.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 1.09%)</title><rect x="138.3" y="995.0" width="12.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="141.3" y="1006.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 1.09%)</title><rect x="138.3" y="979.0" width="12.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="141.3" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 2.17%)</title><rect x="151.1" y="1043.0" width="25.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="154.1" y="1054.0">P..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 2.17%)</title><rect x="151.1" y="1027.0" width="25.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="154.1" y="1038.0">P..</text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 1.09%)</title><rect x="163.9" y="1011.0" width="12.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="166.9" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 1.09%)</title><rect x="163.9" y="995.0" width="12.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="166.9" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (27 samples, 29.35%)</title><rect x="176.7" y="1043.0" width="346.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="179.7" y="1054.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 1.09%)</title><rect x="176.7" y="1027.0" width="12.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="179.7" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 3.26%)</title><rect x="189.6" y="1027.0" width="38.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="192.6" y="1038.0">Pha..</text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 2.17%)</title><rect x="202.4" y="1011.0" width="25.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="205.4" y="1022.0">P..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 1.09%)</title><rect x="215.2" y="995.0" width="12.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="218.2" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 1.09%)</title><rect x="228.0" y="1027.0" width="12.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="231.0" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 3.26%)</title><rect x="240.9" y="1027.0" width="38.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="243.9" y="1038.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 7.61%)</title><rect x="279.3" y="1027.0" width="89.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="282.3" y="1038.0">PhaseChait..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 1.09%)</title><rect x="317.8" y="1011.0" width="12.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="320.8" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.09%)</title><rect x="330.7" y="1011.0" width="12.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="333.7" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 2.17%)</title><rect x="343.5" y="1011.0" width="25.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="346.5" y="1022.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.09%)</title><rect x="356.3" y="995.0" width="12.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="359.3" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 2.17%)</title><rect x="369.1" y="1027.0" width="25.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="372.1" y="1038.0">P..</text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 1.09%)</title><rect x="382.0" y="1011.0" width="12.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="385.0" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 1.09%)</title><rect x="394.8" y="1027.0" width="12.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="397.8" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 2.17%)</title><rect x="407.6" y="1027.0" width="25.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="410.6" y="1038.0">P..</text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 1.09%)</title><rect x="420.4" y="1011.0" width="12.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="423.4" y="1022.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 2.17%)</title><rect x="433.3" y="1027.0" width="25.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="436.3" y="1038.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 2.17%)</title><rect x="433.3" y="1011.0" width="25.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="436.3" y="1022.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 2.17%)</title><rect x="433.3" y="995.0" width="25.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="436.3" y="1006.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 1.09%)</title><rect x="446.1" y="979.0" width="12.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="449.1" y="990.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 4.35%)</title><rect x="458.9" y="1027.0" width="51.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="461.9" y="1038.0">Phase..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 2.17%)</title><rect x="484.6" y="1011.0" width="25.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="487.6" y="1022.0">I..</text>
</g>
<g>
<title>__memset_sse2 (1 samples, 1.09%)</title><rect x="510.2" y="1027.0" width="12.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="513.2" y="1038.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 1.09%)</title><rect x="523.0" y="1043.0" width="12.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="526.0" y="1054.0"></text>
</g>
<g>
<title>Compile::Optimize() (41 samples, 44.57%)</title><rect x="535.9" y="1059.0" width="525.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="538.9" y="1070.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 2.17%)</title><rect x="535.9" y="1043.0" width="25.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="538.9" y="1054.0">C..</text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 2.17%)</title><rect x="535.9" y="1027.0" width="25.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="538.9" y="1038.0">C..</text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 2.17%)</title><rect x="535.9" y="1011.0" width="25.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="538.9" y="1022.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 2.17%)</title><rect x="535.9" y="995.0" width="25.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="538.9" y="1006.0">C..</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 2.17%)</title><rect x="535.9" y="979.0" width="25.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="538.9" y="990.0">C..</text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 1.09%)</title><rect x="535.9" y="963.0" width="12.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="538.9" y="974.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 1.09%)</title><rect x="535.9" y="947.0" width="12.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="538.9" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="963.0" width="12.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="551.7" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="947.0" width="12.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="551.7" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="931.0" width="12.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="551.7" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="915.0" width="12.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="551.7" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="899.0" width="12.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="551.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="883.0" width="12.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="551.7" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="867.0" width="12.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="551.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="851.0" width="12.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="551.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="835.0" width="12.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="551.7" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="819.0" width="12.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="551.7" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="803.0" width="12.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="551.7" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="787.0" width="12.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="551.7" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="771.0" width="12.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="551.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="755.0" width="12.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="551.7" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="739.0" width="12.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="551.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="723.0" width="12.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="551.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="707.0" width="12.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="551.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="691.0" width="12.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="551.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="675.0" width="12.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="551.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="659.0" width="12.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="551.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="643.0" width="12.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="551.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="627.0" width="12.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="551.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="611.0" width="12.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="551.7" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="595.0" width="12.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="551.7" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="579.0" width="12.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="551.7" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="563.0" width="12.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="551.7" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="547.0" width="12.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="551.7" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="531.0" width="12.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="551.7" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="515.0" width="12.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="551.7" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="499.0" width="12.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="551.7" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="483.0" width="12.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="551.7" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="467.0" width="12.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="551.7" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="451.0" width="12.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="551.7" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="435.0" width="12.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="551.7" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="419.0" width="12.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="551.7" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="403.0" width="12.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="551.7" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="387.0" width="12.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="551.7" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="371.0" width="12.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="551.7" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="355.0" width="12.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="551.7" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="339.0" width="12.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="551.7" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="323.0" width="12.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="551.7" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="307.0" width="12.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="551.7" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="291.0" width="12.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="551.7" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="275.0" width="12.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="551.7" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="259.0" width="12.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="551.7" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="243.0" width="12.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="551.7" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="227.0" width="12.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="551.7" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="211.0" width="12.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="551.7" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="195.0" width="12.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="551.7" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="179.0" width="12.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="551.7" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="163.0" width="12.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="551.7" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="147.0" width="12.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="551.7" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="131.0" width="12.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="551.7" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="115.0" width="12.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="551.7" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="99.0" width="12.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="551.7" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="83.0" width="12.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="551.7" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 1.09%)</title><rect x="548.7" y="67.0" width="12.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="551.7" y="78.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 1.09%)</title><rect x="548.7" y="51.0" width="12.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="551.7" y="62.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 1.09%)</title><rect x="548.7" y="35.0" width="12.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="551.7" y="46.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 2.17%)</title><rect x="561.5" y="1043.0" width="25.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="564.5" y="1054.0">P..</text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 1.09%)</title><rect x="574.3" y="1027.0" width="12.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="577.3" y="1038.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 1.09%)</title><rect x="574.3" y="1011.0" width="12.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="577.3" y="1022.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 1.09%)</title><rect x="574.3" y="995.0" width="12.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="577.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (29 samples, 31.52%)</title><rect x="587.2" y="1043.0" width="371.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="590.2" y="1054.0">PhaseIdealLoop::build_and_optimize(bool, bool)</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 2.17%)</title><rect x="587.2" y="1027.0" width="25.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="590.2" y="1038.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (22 samples, 23.91%)</title><rect x="612.8" y="1027.0" width="282.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="615.8" y="1038.0">PhaseIdealLoop::build_loop_late(Vector..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (19 samples, 20.65%)</title><rect x="651.3" y="1011.0" width="243.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="654.3" y="1022.0">PhaseIdealLoop::build_loop_late_..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (19 samples, 20.65%)</title><rect x="651.3" y="995.0" width="243.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="654.3" y="1006.0">PhaseIdealLoop::get_late_ctrl(No..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (17 samples, 18.48%)</title><rect x="677.0" y="979.0" width="218.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="680.0" y="990.0">PhaseIdealLoop::is_dominator(..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 1.09%)</title><rect x="895.0" y="1027.0" width="12.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="898.0" y="1038.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 1.09%)</title><rect x="895.0" y="1011.0" width="12.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="898.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 2.17%)</title><rect x="907.8" y="1027.0" width="25.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="910.8" y="1038.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 1.09%)</title><rect x="920.7" y="1011.0" width="12.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="923.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 2.17%)</title><rect x="933.5" y="1027.0" width="25.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="936.5" y="1038.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 2.17%)</title><rect x="933.5" y="1011.0" width="25.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="936.5" y="1022.0">P..</text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 1.09%)</title><rect x="933.5" y="995.0" width="12.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="936.5" y="1006.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 1.09%)</title><rect x="933.5" y="979.0" width="12.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="936.5" y="990.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 1.09%)</title><rect x="946.3" y="995.0" width="12.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="949.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 8.70%)</title><rect x="959.1" y="1043.0" width="102.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="962.1" y="1054.0">PhaseIterGVN..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 8.70%)</title><rect x="959.1" y="1027.0" width="102.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="962.1" y="1038.0">PhaseIterGVN..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 3.26%)</title><rect x="959.1" y="1011.0" width="38.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="962.1" y="1022.0">Loa..</text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 1.09%)</title><rect x="959.1" y="995.0" width="12.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="962.1" y="1006.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 1.09%)</title><rect x="959.1" y="979.0" width="12.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="962.1" y="990.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 1.09%)</title><rect x="959.1" y="963.0" width="12.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="962.1" y="974.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 2.17%)</title><rect x="972.0" y="995.0" width="25.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="975.0" y="1006.0">M..</text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 1.09%)</title><rect x="972.0" y="979.0" width="12.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="975.0" y="990.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 1.09%)</title><rect x="972.0" y="963.0" width="12.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="975.0" y="974.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 1.09%)</title><rect x="984.8" y="979.0" width="12.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="987.8" y="990.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 1.09%)</title><rect x="984.8" y="963.0" width="12.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="987.8" y="974.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 1.09%)</title><rect x="984.8" y="947.0" width="12.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="987.8" y="958.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 1.09%)</title><rect x="984.8" y="931.0" width="12.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="987.8" y="942.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 1.09%)</title><rect x="984.8" y="915.0" width="12.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="987.8" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 2.17%)</title><rect x="997.6" y="1011.0" width="25.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1000.6" y="1022.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 1.09%)</title><rect x="1010.4" y="995.0" width="12.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1013.4" y="1006.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 1.09%)</title><rect x="1010.4" y="979.0" width="12.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1013.4" y="990.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 1.09%)</title><rect x="1023.3" y="1011.0" width="12.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1026.3" y="1022.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 1.09%)</title><rect x="1036.1" y="1011.0" width="12.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1039.1" y="1022.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 1.09%)</title><rect x="1036.1" y="995.0" width="12.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1039.1" y="1006.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 1.09%)</title><rect x="1048.9" y="1011.0" width="12.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1051.9" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 1.09%)</title><rect x="1048.9" y="995.0" width="12.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1051.9" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.09%)</title><rect x="1048.9" y="979.0" width="12.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1051.9" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.09%)</title><rect x="1048.9" y="963.0" width="12.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1051.9" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.09%)</title><rect x="1048.9" y="947.0" width="12.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1051.9" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.09%)</title><rect x="1048.9" y="931.0" width="12.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1051.9" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.09%)</title><rect x="1048.9" y="915.0" width="12.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1051.9" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.09%)</title><rect x="1048.9" y="899.0" width="12.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1051.9" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.09%)</title><rect x="1048.9" y="883.0" width="12.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1051.9" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.09%)</title><rect x="1048.9" y="867.0" width="12.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1051.9" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.09%)</title><rect x="1048.9" y="851.0" width="12.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1051.9" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.09%)</title><rect x="1048.9" y="835.0" width="12.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1051.9" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.09%)</title><rect x="1048.9" y="819.0" width="12.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1051.9" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.09%)</title><rect x="1048.9" y="803.0" width="12.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1051.9" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.09%)</title><rect x="1048.9" y="787.0" width="12.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1051.9" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.09%)</title><rect x="1048.9" y="771.0" width="12.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1051.9" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.09%)</title><rect x="1048.9" y="755.0" width="12.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1051.9" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.09%)</title><rect x="1048.9" y="739.0" width="12.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1051.9" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.09%)</title><rect x="1048.9" y="723.0" width="12.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1051.9" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.09%)</title><rect x="1048.9" y="707.0" width="12.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1051.9" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.09%)</title><rect x="1048.9" y="691.0" width="12.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1051.9" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.09%)</title><rect x="1048.9" y="675.0" width="12.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1051.9" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.09%)</title><rect x="1048.9" y="659.0" width="12.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1051.9" y="670.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 1.09%)</title><rect x="1048.9" y="643.0" width="12.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1051.9" y="654.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 1.09%)</title><rect x="1048.9" y="627.0" width="12.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1051.9" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 6.52%)</title><rect x="1061.7" y="1059.0" width="77.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1064.7" y="1070.0">ParseGen..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 6.52%)</title><rect x="1061.7" y="1043.0" width="77.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1064.7" y="1054.0">Parse::P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 6.52%)</title><rect x="1061.7" y="1027.0" width="77.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1064.7" y="1038.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 6.52%)</title><rect x="1061.7" y="1011.0" width="77.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1064.7" y="1022.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 6.52%)</title><rect x="1061.7" y="995.0" width="77.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1064.7" y="1006.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 6.52%)</title><rect x="1061.7" y="979.0" width="77.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1064.7" y="990.0">Parse::d..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 6.52%)</title><rect x="1061.7" y="963.0" width="77.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1064.7" y="974.0">ParseGen..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 6.52%)</title><rect x="1061.7" y="947.0" width="77.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1064.7" y="958.0">Parse::P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 6.52%)</title><rect x="1061.7" y="931.0" width="77.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1064.7" y="942.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 6.52%)</title><rect x="1061.7" y="915.0" width="77.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1064.7" y="926.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 6.52%)</title><rect x="1061.7" y="899.0" width="77.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1064.7" y="910.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 6.52%)</title><rect x="1061.7" y="883.0" width="77.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1064.7" y="894.0">Parse::d..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 1.09%)</title><rect x="1061.7" y="867.0" width="12.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1064.7" y="878.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 1.09%)</title><rect x="1061.7" y="851.0" width="12.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1064.7" y="862.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 1.09%)</title><rect x="1061.7" y="835.0" width="12.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1064.7" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 1.09%)</title><rect x="1061.7" y="819.0" width="12.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1064.7" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 1.09%)</title><rect x="1061.7" y="803.0" width="12.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1064.7" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.09%)</title><rect x="1061.7" y="787.0" width="12.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1064.7" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.09%)</title><rect x="1061.7" y="771.0" width="12.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1064.7" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 1.09%)</title><rect x="1061.7" y="755.0" width="12.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1064.7" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 1.09%)</title><rect x="1061.7" y="739.0" width="12.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1064.7" y="750.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 1.09%)</title><rect x="1061.7" y="723.0" width="12.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1064.7" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 1.09%)</title><rect x="1061.7" y="707.0" width="12.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1064.7" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 1.09%)</title><rect x="1061.7" y="691.0" width="12.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1064.7" y="702.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 1.09%)</title><rect x="1061.7" y="675.0" width="12.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1064.7" y="686.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 1.09%)</title><rect x="1061.7" y="659.0" width="12.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1064.7" y="670.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 1.09%)</title><rect x="1061.7" y="643.0" width="12.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1064.7" y="654.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 1.09%)</title><rect x="1061.7" y="627.0" width="12.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1064.7" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 1.09%)</title><rect x="1061.7" y="611.0" width="12.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1064.7" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.26%)</title><rect x="1074.6" y="867.0" width="38.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1077.6" y="878.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.26%)</title><rect x="1074.6" y="851.0" width="38.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1077.6" y="862.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.26%)</title><rect x="1074.6" y="835.0" width="38.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1077.6" y="846.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.26%)</title><rect x="1074.6" y="819.0" width="38.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1077.6" y="830.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.26%)</title><rect x="1074.6" y="803.0" width="38.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1077.6" y="814.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.26%)</title><rect x="1074.6" y="787.0" width="38.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1077.6" y="798.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.26%)</title><rect x="1074.6" y="771.0" width="38.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1077.6" y="782.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.26%)</title><rect x="1074.6" y="755.0" width="38.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1077.6" y="766.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.26%)</title><rect x="1074.6" y="739.0" width="38.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1077.6" y="750.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.26%)</title><rect x="1074.6" y="723.0" width="38.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1077.6" y="734.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.26%)</title><rect x="1074.6" y="707.0" width="38.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1077.6" y="718.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.26%)</title><rect x="1074.6" y="691.0" width="38.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1077.6" y="702.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 2.17%)</title><rect x="1074.6" y="675.0" width="25.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1077.6" y="686.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 2.17%)</title><rect x="1074.6" y="659.0" width="25.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1077.6" y="670.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 2.17%)</title><rect x="1074.6" y="643.0" width="25.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1077.6" y="654.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 2.17%)</title><rect x="1074.6" y="627.0" width="25.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1077.6" y="638.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 2.17%)</title><rect x="1074.6" y="611.0" width="25.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1077.6" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 2.17%)</title><rect x="1074.6" y="595.0" width="25.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1077.6" y="606.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 1.09%)</title><rect x="1074.6" y="579.0" width="12.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1077.6" y="590.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 1.09%)</title><rect x="1074.6" y="563.0" width="12.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1077.6" y="574.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 1.09%)</title><rect x="1074.6" y="547.0" width="12.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1077.6" y="558.0"></text>
</g>
<g>
<title>ciMethod::is_accessor() const (1 samples, 1.09%)</title><rect x="1074.6" y="531.0" width="12.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1077.6" y="542.0"></text>
</g>
<g>
<title>Method::java_code_at(int) const (1 samples, 1.09%)</title><rect x="1074.6" y="515.0" width="12.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1077.6" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.09%)</title><rect x="1087.4" y="579.0" width="12.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.4" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.09%)</title><rect x="1087.4" y="563.0" width="12.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.4" y="574.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 1.09%)</title><rect x="1087.4" y="547.0" width="12.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1090.4" y="558.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 1.09%)</title><rect x="1087.4" y="531.0" width="12.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1090.4" y="542.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 1.09%)</title><rect x="1087.4" y="515.0" width="12.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1090.4" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 1.09%)</title><rect x="1087.4" y="499.0" width="12.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.4" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 1.09%)</title><rect x="1087.4" y="483.0" width="12.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.4" y="494.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 1.09%)</title><rect x="1087.4" y="467.0" width="12.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1090.4" y="478.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 1.09%)</title><rect x="1087.4" y="451.0" width="12.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1090.4" y="462.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 1.09%)</title><rect x="1087.4" y="435.0" width="12.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.4" y="446.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 1.09%)</title><rect x="1087.4" y="419.0" width="12.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.4" y="430.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 1.09%)</title><rect x="1087.4" y="403.0" width="12.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1090.4" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::OverpassLookupMode) const (1 samples, 1.09%)</title><rect x="1087.4" y="387.0" width="12.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1090.4" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 1.09%)</title><rect x="1087.4" y="371.0" width="12.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1090.4" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.09%)</title><rect x="1100.2" y="675.0" width="12.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1103.2" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.09%)</title><rect x="1100.2" y="659.0" width="12.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1103.2" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.09%)</title><rect x="1100.2" y="643.0" width="12.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1103.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.09%)</title><rect x="1100.2" y="627.0" width="12.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1103.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.09%)</title><rect x="1100.2" y="611.0" width="12.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1103.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.09%)</title><rect x="1100.2" y="595.0" width="12.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.09%)</title><rect x="1100.2" y="579.0" width="12.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1103.2" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.09%)</title><rect x="1100.2" y="563.0" width="12.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1103.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.09%)</title><rect x="1100.2" y="547.0" width="12.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.09%)</title><rect x="1100.2" y="531.0" width="12.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1103.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.09%)</title><rect x="1100.2" y="515.0" width="12.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1103.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.09%)</title><rect x="1100.2" y="499.0" width="12.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.09%)</title><rect x="1100.2" y="483.0" width="12.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1103.2" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.09%)</title><rect x="1100.2" y="467.0" width="12.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.2" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.09%)</title><rect x="1100.2" y="451.0" width="12.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1103.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.09%)</title><rect x="1100.2" y="435.0" width="12.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.09%)</title><rect x="1100.2" y="419.0" width="12.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1103.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.09%)</title><rect x="1100.2" y="403.0" width="12.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1103.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.09%)</title><rect x="1100.2" y="387.0" width="12.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1103.2" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.09%)</title><rect x="1100.2" y="371.0" width="12.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1103.2" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.09%)</title><rect x="1100.2" y="355.0" width="12.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1103.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.09%)</title><rect x="1100.2" y="339.0" width="12.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.09%)</title><rect x="1100.2" y="323.0" width="12.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.09%)</title><rect x="1100.2" y="307.0" width="12.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.09%)</title><rect x="1100.2" y="291.0" width="12.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1103.2" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.09%)</title><rect x="1100.2" y="275.0" width="12.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1103.2" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.09%)</title><rect x="1100.2" y="259.0" width="12.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.09%)</title><rect x="1100.2" y="243.0" width="12.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1103.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.09%)</title><rect x="1100.2" y="227.0" width="12.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1103.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.09%)</title><rect x="1100.2" y="211.0" width="12.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1103.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 1.09%)</title><rect x="1100.2" y="195.0" width="12.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 1.09%)</title><rect x="1100.2" y="179.0" width="12.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.2" y="190.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 1.09%)</title><rect x="1100.2" y="163.0" width="12.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1103.2" y="174.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 1.09%)</title><rect x="1100.2" y="147.0" width="12.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.2" y="158.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 1.09%)</title><rect x="1100.2" y="131.0" width="12.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1103.2" y="142.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 2.17%)</title><rect x="1113.0" y="867.0" width="25.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.0" y="878.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 2.17%)</title><rect x="1113.0" y="851.0" width="25.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.0" y="862.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 2.17%)</title><rect x="1113.0" y="835.0" width="25.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.0" y="846.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 2.17%)</title><rect x="1113.0" y="819.0" width="25.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.0" y="830.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 2.17%)</title><rect x="1113.0" y="803.0" width="25.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.0" y="814.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 2.17%)</title><rect x="1113.0" y="787.0" width="25.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1116.0" y="798.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.09%)</title><rect x="1113.0" y="771.0" width="12.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.0" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.09%)</title><rect x="1113.0" y="755.0" width="12.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.0" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.09%)</title><rect x="1113.0" y="739.0" width="12.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.09%)</title><rect x="1113.0" y="723.0" width="12.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1116.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.09%)</title><rect x="1113.0" y="707.0" width="12.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.09%)</title><rect x="1113.0" y="691.0" width="12.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.09%)</title><rect x="1113.0" y="675.0" width="12.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.0" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.09%)</title><rect x="1113.0" y="659.0" width="12.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.0" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.09%)</title><rect x="1113.0" y="643.0" width="12.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.09%)</title><rect x="1113.0" y="627.0" width="12.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.09%)</title><rect x="1113.0" y="611.0" width="12.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.09%)</title><rect x="1113.0" y="595.0" width="12.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 1.09%)</title><rect x="1113.0" y="579.0" width="12.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1116.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 1.09%)</title><rect x="1113.0" y="563.0" width="12.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.0" y="574.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 1.09%)</title><rect x="1113.0" y="547.0" width="12.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.0" y="558.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 1.09%)</title><rect x="1113.0" y="531.0" width="12.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1116.0" y="542.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 1.09%)</title><rect x="1113.0" y="515.0" width="12.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.0" y="526.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 1.09%)</title><rect x="1113.0" y="499.0" width="12.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 1.09%)</title><rect x="1125.9" y="771.0" width="12.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 1.09%)</title><rect x="1125.9" y="755.0" width="12.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.9" y="766.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 1.09%)</title><rect x="1125.9" y="739.0" width="12.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1128.9" y="750.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 1.09%)</title><rect x="1138.7" y="1059.0" width="12.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.7" y="1070.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 1.09%)</title><rect x="1138.7" y="1043.0" width="12.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1141.7" y="1054.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 2.17%)</title><rect x="1151.5" y="1091.0" width="25.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.5" y="1102.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 2.17%)</title><rect x="1151.5" y="1075.0" width="25.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.5" y="1086.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 2.17%)</title><rect x="1151.5" y="1059.0" width="25.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.5" y="1070.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 2.17%)</title><rect x="1151.5" y="1043.0" width="25.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.5" y="1054.0">C..</text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 1.09%)</title><rect x="1151.5" y="1027.0" width="12.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.5" y="1038.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 1.09%)</title><rect x="1151.5" y="1011.0" width="12.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.5" y="1022.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 1.09%)</title><rect x="1151.5" y="995.0" width="12.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.5" y="1006.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 1.09%)</title><rect x="1151.5" y="979.0" width="12.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.5" y="990.0"></text>
</g>
<g>
<title>FrameMap::FrameMap(ciMethod*, int, int) (1 samples, 1.09%)</title><rect x="1164.3" y="1027.0" width="12.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.3" y="1038.0"></text>
</g>
<g>
<title>FrameMap::java_calling_convention(BasicTypeArray const*, bool) (1 samples, 1.09%)</title><rect x="1164.3" y="1011.0" width="12.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.3" y="1022.0"></text>
</g>
<g>
<title>FrameMap::map_to_opr(BasicType, VMRegPair*, bool) (1 samples, 1.09%)</title><rect x="1164.3" y="995.0" width="12.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.3" y="1006.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 1.09%)</title><rect x="1177.2" y="1107.0" width="12.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.2" y="1118.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 1.09%)</title><rect x="1177.2" y="1091.0" width="12.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.2" y="1102.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 1.09%)</title><rect x="1177.2" y="1075.0" width="12.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.2" y="1086.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 1.09%)</title><rect x="1177.2" y="1059.0" width="12.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1180.2" y="1070.0"></text>
</g>
</g>
</svg>
