<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1382" onload="init(evt)" viewBox="0 0 1200 1382" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1365"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1365"> </text>
<g id="frames">
<g>
<title>all (284 samples, 100.00%)</title><rect x="10.0" y="1331.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1342.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (21 samples, 7.39%)</title><rect x="10.0" y="1315.0" width="87.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1326.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.35%)</title><rect x="10.0" y="1299.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.35%)</title><rect x="10.0" y="1283.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.35%)</title><rect x="10.0" y="1267.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.35%)</title><rect x="10.0" y="1251.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.35%)</title><rect x="10.0" y="1235.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.35%)</title><rect x="10.0" y="1219.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.35%)</title><rect x="10.0" y="1203.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.35%)</title><rect x="10.0" y="1187.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.35%)</title><rect x="10.0" y="1171.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.35%)</title><rect x="10.0" y="1155.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.35%)</title><rect x="10.0" y="1139.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.35%)</title><rect x="10.0" y="1123.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.35%)</title><rect x="10.0" y="1107.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.35%)</title><rect x="10.0" y="1091.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.35%)</title><rect x="10.0" y="1075.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.35%)</title><rect x="10.0" y="1059.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (20 samples, 7.04%)</title><rect x="14.2" y="1299.0" width="83.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.2" y="1310.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.35%)</title><rect x="14.2" y="1283.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.2" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.35%)</title><rect x="14.2" y="1267.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.2" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1292127355.accept (1 samples, 0.35%)</title><rect x="14.2" y="1251.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.2" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.35%)</title><rect x="14.2" y="1235.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.2" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.35%)</title><rect x="14.2" y="1219.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.2" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.70%)</title><rect x="18.3" y="1283.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.3" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.35%)</title><rect x="18.3" y="1267.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.3" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.35%)</title><rect x="18.3" y="1251.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.3" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.35%)</title><rect x="18.3" y="1235.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.3" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.35%)</title><rect x="18.3" y="1219.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.3" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.35%)</title><rect x="18.3" y="1203.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.3" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.35%)</title><rect x="18.3" y="1187.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.3" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.35%)</title><rect x="18.3" y="1171.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.3" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.35%)</title><rect x="18.3" y="1155.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.3" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$251/1476158912.test (1 samples, 0.35%)</title><rect x="18.3" y="1139.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.3" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.35%)</title><rect x="22.5" y="1267.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.5" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$284/679255915.accept (1 samples, 0.35%)</title><rect x="22.5" y="1251.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.5" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$resumePartitions$39 (1 samples, 0.35%)</title><rect x="22.5" y="1235.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.5" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.resume (1 samples, 0.35%)</title><rect x="22.5" y="1219.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.5" y="1230.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (7 samples, 2.46%)</title><rect x="26.6" y="1283.0" width="29.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.6" y="1294.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/2134329347.accept (7 samples, 2.46%)</title><rect x="26.6" y="1267.0" width="29.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.6" y="1278.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$37 (7 samples, 2.46%)</title><rect x="26.6" y="1251.0" width="29.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.6" y="1262.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (2 samples, 0.70%)</title><rect x="26.6" y="1235.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.6" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (2 samples, 0.70%)</title><rect x="26.6" y="1219.0" width="8.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.6" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (2 samples, 0.70%)</title><rect x="26.6" y="1203.0" width="8.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.70%)</title><rect x="26.6" y="1187.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.70%)</title><rect x="26.6" y="1171.0" width="8.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="29.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (5 samples, 1.76%)</title><rect x="34.9" y="1235.0" width="20.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="37.9" y="1246.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 1.76%)</title><rect x="34.9" y="1219.0" width="20.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="37.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 3.52%)</title><rect x="55.7" y="1283.0" width="41.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="58.7" y="1294.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 3.52%)</title><rect x="55.7" y="1267.0" width="41.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="58.7" y="1278.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 2.11%)</title><rect x="55.7" y="1251.0" width="24.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.7" y="1262.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.06%)</title><rect x="55.7" y="1235.0" width="12.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="58.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.06%)</title><rect x="55.7" y="1219.0" width="12.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="58.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.35%)</title><rect x="55.7" y="1203.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.35%)</title><rect x="59.9" y="1203.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="62.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.35%)</title><rect x="59.9" y="1187.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="62.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.35%)</title><rect x="59.9" y="1171.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="62.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.35%)</title><rect x="59.9" y="1155.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="62.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.send (1 samples, 0.35%)</title><rect x="59.9" y="1139.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="62.9" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.35%)</title><rect x="59.9" y="1123.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="62.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.update (1 samples, 0.35%)</title><rect x="64.0" y="1203.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="67.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.35%)</title><rect x="64.0" y="1187.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="67.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.06%)</title><rect x="68.2" y="1235.0" width="12.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.2" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.35%)</title><rect x="72.3" y="1219.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="75.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.35%)</title><rect x="76.5" y="1219.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="79.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.35%)</title><rect x="76.5" y="1203.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="79.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.35%)</title><rect x="76.5" y="1187.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="79.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.35%)</title><rect x="76.5" y="1171.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="79.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.35%)</title><rect x="76.5" y="1155.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="79.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.35%)</title><rect x="76.5" y="1139.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.35%)</title><rect x="76.5" y="1123.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="79.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.35%)</title><rect x="76.5" y="1107.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="79.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.35%)</title><rect x="76.5" y="1091.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.35%)</title><rect x="76.5" y="1075.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.35%)</title><rect x="76.5" y="1059.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.70%)</title><rect x="80.6" y="1251.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="83.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.70%)</title><rect x="80.6" y="1235.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="83.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.35%)</title><rect x="80.6" y="1219.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.35%)</title><rect x="80.6" y="1203.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.35%)</title><rect x="80.6" y="1187.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="83.6" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.35%)</title><rect x="80.6" y="1171.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.6" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.35%)</title><rect x="80.6" y="1155.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="83.6" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.35%)</title><rect x="80.6" y="1139.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.6" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.35%)</title><rect x="80.6" y="1123.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.6" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.35%)</title><rect x="80.6" y="1107.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="83.6" y="1118.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.35%)</title><rect x="80.6" y="1091.0" width="4.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="83.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.35%)</title><rect x="84.8" y="1219.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="87.8" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.35%)</title><rect x="84.8" y="1203.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="87.8" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.35%)</title><rect x="84.8" y="1187.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="87.8" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.35%)</title><rect x="84.8" y="1171.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="87.8" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.35%)</title><rect x="84.8" y="1155.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="87.8" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.35%)</title><rect x="84.8" y="1139.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="87.8" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.35%)</title><rect x="84.8" y="1123.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="87.8" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.35%)</title><rect x="84.8" y="1107.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="87.8" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.35%)</title><rect x="84.8" y="1091.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.70%)</title><rect x="88.9" y="1251.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="91.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.35%)</title><rect x="88.9" y="1235.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="91.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.35%)</title><rect x="88.9" y="1219.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="91.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.35%)</title><rect x="88.9" y="1203.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="91.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.35%)</title><rect x="88.9" y="1187.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="91.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getInt (1 samples, 0.35%)</title><rect x="88.9" y="1171.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="91.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.35%)</title><rect x="88.9" y="1155.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="91.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.35%)</title><rect x="88.9" y="1139.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="91.9" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.35%)</title><rect x="88.9" y="1123.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="91.9" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.35%)</title><rect x="88.9" y="1107.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="91.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.35%)</title><rect x="93.1" y="1235.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.35%)</title><rect x="93.1" y="1219.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="96.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.35%)</title><rect x="93.1" y="1203.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="96.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.35%)</title><rect x="93.1" y="1187.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="96.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.35%)</title><rect x="93.1" y="1171.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.35%)</title><rect x="93.1" y="1155.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="96.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.35%)</title><rect x="93.1" y="1139.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="96.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.35%)</title><rect x="93.1" y="1123.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="96.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.35%)</title><rect x="93.1" y="1107.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.1" y="1118.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method_ic_miss(JavaThread*) (1 samples, 0.35%)</title><rect x="93.1" y="1091.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="96.1" y="1102.0"></text>
</g>
<g>
<title>SharedRuntime::handle_ic_miss_helper(JavaThread*, Thread*) (1 samples, 0.35%)</title><rect x="93.1" y="1075.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="96.1" y="1086.0"></text>
</g>
<g>
<title>CompiledIC::is_icholder_call() const (1 samples, 0.35%)</title><rect x="93.1" y="1059.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="96.1" y="1070.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.35%)</title><rect x="93.1" y="1043.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="96.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/Thread.run (160 samples, 56.34%)</title><rect x="97.3" y="1315.0" width="664.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="100.3" y="1326.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (160 samples, 56.34%)</title><rect x="97.3" y="1299.0" width="664.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="100.3" y="1310.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (160 samples, 56.34%)</title><rect x="97.3" y="1283.0" width="664.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="100.3" y="1294.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/346794680.run (149 samples, 52.46%)</title><rect x="105.6" y="1267.0" width="619.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="108.6" y="1278.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/346794680.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (149 samples, 52.46%)</title><rect x="105.6" y="1251.0" width="619.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="108.6" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (149 samples, 52.46%)</title><rect x="105.6" y="1235.0" width="619.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="108.6" y="1246.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (145 samples, 51.06%)</title><rect x="105.6" y="1219.0" width="602.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="108.6" y="1230.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (37 samples, 13.03%)</title><rect x="109.7" y="1203.0" width="153.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="112.7" y="1214.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (37 samples, 13.03%)</title><rect x="109.7" y="1187.0" width="153.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="112.7" y="1198.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (37 samples, 13.03%)</title><rect x="109.7" y="1171.0" width="153.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="112.7" y="1182.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (36 samples, 12.68%)</title><rect x="109.7" y="1155.0" width="149.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="112.7" y="1166.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (36 samples, 12.68%)</title><rect x="109.7" y="1139.0" width="149.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="112.7" y="1150.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (36 samples, 12.68%)</title><rect x="109.7" y="1123.0" width="149.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="112.7" y="1134.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (9 samples, 3.17%)</title><rect x="109.7" y="1107.0" width="37.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="112.7" y="1118.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.70%)</title><rect x="109.7" y="1091.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="112.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.70%)</title><rect x="109.7" y="1075.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="112.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.70%)</title><rect x="109.7" y="1059.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="112.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.70%)</title><rect x="109.7" y="1043.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="112.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.35%)</title><rect x="113.9" y="1027.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="116.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (7 samples, 2.46%)</title><rect x="118.0" y="1091.0" width="29.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="121.0" y="1102.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (7 samples, 2.46%)</title><rect x="118.0" y="1075.0" width="29.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="121.0" y="1086.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.35%)</title><rect x="122.2" y="1059.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="125.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.35%)</title><rect x="122.2" y="1043.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="125.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 1.06%)</title><rect x="126.3" y="1059.0" width="12.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="129.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (3 samples, 1.06%)</title><rect x="126.3" y="1043.0" width="12.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="129.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.35%)</title><rect x="134.6" y="1027.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="137.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 0.70%)</title><rect x="138.8" y="1059.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="141.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.35%)</title><rect x="138.8" y="1043.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="141.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.35%)</title><rect x="143.0" y="1043.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="146.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (23 samples, 8.10%)</title><rect x="147.1" y="1107.0" width="95.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="150.1" y="1118.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (5 samples, 1.76%)</title><rect x="147.1" y="1091.0" width="20.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="150.1" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.41%)</title><rect x="151.3" y="1075.0" width="16.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="154.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.35%)</title><rect x="155.4" y="1059.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="158.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.35%)</title><rect x="155.4" y="1043.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="158.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.35%)</title><rect x="155.4" y="1027.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="158.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.70%)</title><rect x="159.6" y="1059.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="162.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.70%)</title><rect x="159.6" y="1043.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="162.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.35%)</title><rect x="167.9" y="1091.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="170.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.35%)</title><rect x="167.9" y="1075.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="170.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.35%)</title><rect x="167.9" y="1059.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="170.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.35%)</title><rect x="167.9" y="1043.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="170.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (17 samples, 5.99%)</title><rect x="172.0" y="1091.0" width="70.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="175.0" y="1102.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.76%)</title><rect x="172.0" y="1075.0" width="20.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="175.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 1.06%)</title><rect x="172.0" y="1059.0" width="12.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="175.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 1.06%)</title><rect x="172.0" y="1043.0" width="12.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="175.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 1.06%)</title><rect x="172.0" y="1027.0" width="12.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="175.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 1.06%)</title><rect x="172.0" y="1011.0" width="12.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="175.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 1.06%)</title><rect x="172.0" y="995.0" width="12.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="175.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.35%)</title><rect x="184.5" y="1059.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="187.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.35%)</title><rect x="184.5" y="1043.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="187.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.35%)</title><rect x="184.5" y="1027.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="187.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.35%)</title><rect x="184.5" y="1011.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="187.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.getAndSet (1 samples, 0.35%)</title><rect x="184.5" y="995.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="187.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.35%)</title><rect x="188.7" y="1059.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="191.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (12 samples, 4.23%)</title><rect x="192.8" y="1075.0" width="49.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="195.8" y="1086.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (12 samples, 4.23%)</title><rect x="192.8" y="1059.0" width="49.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="195.8" y="1070.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (12 samples, 4.23%)</title><rect x="192.8" y="1043.0" width="49.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="195.8" y="1054.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.06%)</title><rect x="192.8" y="1027.0" width="12.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="195.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.35%)</title><rect x="197.0" y="1011.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="200.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.35%)</title><rect x="197.0" y="995.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="200.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.35%)</title><rect x="197.0" y="979.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="200.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.35%)</title><rect x="197.0" y="963.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="200.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.35%)</title><rect x="197.0" y="947.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="200.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.35%)</title><rect x="201.1" y="1011.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="204.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 1.06%)</title><rect x="205.3" y="1027.0" width="12.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="208.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 1.06%)</title><rect x="205.3" y="1011.0" width="12.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 1.06%)</title><rect x="205.3" y="995.0" width="12.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 1.06%)</title><rect x="205.3" y="979.0" width="12.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="208.3" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 1.06%)</title><rect x="205.3" y="963.0" width="12.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="208.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.35%)</title><rect x="217.7" y="1027.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 1.06%)</title><rect x="221.9" y="1027.0" width="12.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="224.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 1.06%)</title><rect x="221.9" y="1011.0" width="12.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="224.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 1.06%)</title><rect x="221.9" y="995.0" width="12.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 1.06%)</title><rect x="221.9" y="979.0" width="12.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.9" y="990.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 1.06%)</title><rect x="221.9" y="963.0" width="12.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.9" y="974.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 1.06%)</title><rect x="221.9" y="947.0" width="12.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="224.9" y="958.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (1 samples, 0.35%)</title><rect x="230.2" y="931.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="233.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.70%)</title><rect x="234.4" y="1027.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.4" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.70%)</title><rect x="234.4" y="1011.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.4" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.70%)</title><rect x="234.4" y="995.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 1.41%)</title><rect x="242.7" y="1107.0" width="16.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 1.41%)</title><rect x="242.7" y="1091.0" width="16.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="245.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (4 samples, 1.41%)</title><rect x="242.7" y="1075.0" width="16.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 1.41%)</title><rect x="242.7" y="1059.0" width="16.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 1.41%)</title><rect x="242.7" y="1043.0" width="16.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (2 samples, 0.70%)</title><rect x="246.8" y="1027.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.35%)</title><rect x="255.1" y="1027.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="258.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.35%)</title><rect x="259.3" y="1155.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="262.3" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="259.3" y="1139.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="262.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (107 samples, 37.68%)</title><rect x="263.5" y="1203.0" width="444.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="266.5" y="1214.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (16 samples, 5.63%)</title><rect x="267.6" y="1187.0" width="66.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="270.6" y="1198.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (16 samples, 5.63%)</title><rect x="267.6" y="1171.0" width="66.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.6" y="1182.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (14 samples, 4.93%)</title><rect x="275.9" y="1155.0" width="58.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="278.9" y="1166.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.70%)</title><rect x="275.9" y="1139.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="278.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.70%)</title><rect x="275.9" y="1123.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="278.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.70%)</title><rect x="275.9" y="1107.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.70%)</title><rect x="275.9" y="1091.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="278.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.35%)</title><rect x="280.1" y="1075.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.1" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.35%)</title><rect x="280.1" y="1059.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.1" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (12 samples, 4.23%)</title><rect x="284.2" y="1139.0" width="49.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.2" y="1150.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 3.87%)</title><rect x="288.4" y="1123.0" width="45.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.4" y="1134.0">java..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 1.41%)</title><rect x="317.5" y="1107.0" width="16.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="320.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (22 samples, 7.75%)</title><rect x="334.1" y="1187.0" width="91.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="337.1" y="1198.0">com/linecor..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.06%)</title><rect x="334.1" y="1171.0" width="12.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="337.1" y="1182.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.70%)</title><rect x="338.2" y="1155.0" width="8.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="341.2" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (19 samples, 6.69%)</title><rect x="346.5" y="1171.0" width="79.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="349.5" y="1182.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (7 samples, 2.46%)</title><rect x="346.5" y="1155.0" width="29.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="349.5" y="1166.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.41%)</title><rect x="350.7" y="1139.0" width="16.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="353.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 1.41%)</title><rect x="350.7" y="1123.0" width="16.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="353.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.70%)</title><rect x="359.0" y="1107.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="362.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.70%)</title><rect x="359.0" y="1091.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="362.0" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.70%)</title><rect x="359.0" y="1075.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="362.0" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.70%)</title><rect x="359.0" y="1059.0" width="8.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="362.0" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.35%)</title><rect x="359.0" y="1043.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="362.0" y="1054.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.35%)</title><rect x="359.0" y="1027.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="362.0" y="1038.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.35%)</title><rect x="359.0" y="1011.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="362.0" y="1022.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.35%)</title><rect x="359.0" y="995.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="362.0" y="1006.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.35%)</title><rect x="359.0" y="979.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="362.0" y="990.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.35%)</title><rect x="363.2" y="1043.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="366.2" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="363.2" y="1027.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="366.2" y="1038.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.35%)</title><rect x="367.3" y="1139.0" width="4.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="370.3" y="1150.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.35%)</title><rect x="371.5" y="1139.0" width="4.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="374.5" y="1150.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (12 samples, 4.23%)</title><rect x="375.6" y="1155.0" width="49.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="378.6" y="1166.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (10 samples, 3.52%)</title><rect x="383.9" y="1139.0" width="41.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="386.9" y="1150.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.35%)</title><rect x="383.9" y="1123.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="386.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.35%)</title><rect x="383.9" y="1107.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="386.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.35%)</title><rect x="383.9" y="1091.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="386.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.35%)</title><rect x="383.9" y="1075.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="386.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.35%)</title><rect x="383.9" y="1059.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="386.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.35%)</title><rect x="383.9" y="1043.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="386.9" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (9 samples, 3.17%)</title><rect x="388.1" y="1123.0" width="37.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="391.1" y="1134.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 2.82%)</title><rect x="392.3" y="1107.0" width="33.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="395.3" y="1118.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.76%)</title><rect x="404.7" y="1091.0" width="20.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="407.7" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 1.41%)</title><rect x="404.7" y="1075.0" width="16.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="407.7" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="417.2" y="1059.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="420.2" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="417.2" y="1043.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="420.2" y="1054.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.35%)</title><rect x="421.3" y="1075.0" width="4.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="424.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (60 samples, 21.13%)</title><rect x="425.5" y="1187.0" width="249.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="428.5" y="1198.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (60 samples, 21.13%)</title><rect x="425.5" y="1171.0" width="249.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="428.5" y="1182.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1062034147.process (51 samples, 17.96%)</title><rect x="438.0" y="1155.0" width="211.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="441.0" y="1166.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (51 samples, 17.96%)</title><rect x="438.0" y="1139.0" width="211.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="441.0" y="1150.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (49 samples, 17.25%)</title><rect x="438.0" y="1123.0" width="203.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="441.0" y="1134.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (48 samples, 16.90%)</title><rect x="438.0" y="1107.0" width="199.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="441.0" y="1118.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>java/lang/Thread.sleep (47 samples, 16.55%)</title><rect x="442.1" y="1091.0" width="195.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="445.1" y="1102.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (40 samples, 14.08%)</title><rect x="467.0" y="1075.0" width="166.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="470.0" y="1086.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 1.41%)</title><rect x="483.7" y="1059.0" width="16.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="486.7" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="500.3" y="1059.0" width="4.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="503.3" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.70%)</title><rect x="504.4" y="1059.0" width="8.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="507.4" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="508.6" y="1043.0" width="4.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="511.6" y="1054.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.35%)</title><rect x="512.7" y="1059.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="515.7" y="1070.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (28 samples, 9.86%)</title><rect x="516.9" y="1059.0" width="116.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="519.9" y="1070.0">os::sleep(Thre..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="558.5" y="1043.0" width="4.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="561.5" y="1054.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="558.5" y="1027.0" width="4.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="561.5" y="1038.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.35%)</title><rect x="562.6" y="1043.0" width="4.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="565.6" y="1054.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (7 samples, 2.46%)</title><rect x="566.8" y="1043.0" width="29.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="569.8" y="1054.0">__..</text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.70%)</title><rect x="595.8" y="1043.0" width="8.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="598.8" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.35%)</title><rect x="604.2" y="1043.0" width="4.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="607.2" y="1054.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.35%)</title><rect x="608.3" y="1043.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="611.3" y="1054.0"></text>
</g>
<g>
<title>pthread_getspecific (4 samples, 1.41%)</title><rect x="612.5" y="1043.0" width="16.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="615.5" y="1054.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.35%)</title><rect x="629.1" y="1043.0" width="4.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="632.1" y="1054.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.35%)</title><rect x="633.2" y="1075.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="636.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.35%)</title><rect x="637.4" y="1107.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="640.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.35%)</title><rect x="637.4" y="1091.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="640.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.35%)</title><rect x="637.4" y="1075.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="640.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.70%)</title><rect x="641.5" y="1123.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="644.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.70%)</title><rect x="641.5" y="1107.0" width="8.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="644.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.70%)</title><rect x="641.5" y="1091.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="644.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.35%)</title><rect x="649.9" y="1155.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="652.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.35%)</title><rect x="649.9" y="1139.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="652.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$265/914795890.get$Lambda (1 samples, 0.35%)</title><rect x="649.9" y="1123.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="652.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$265/914795890.&lt;init&gt; (1 samples, 0.35%)</title><rect x="649.9" y="1107.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="652.9" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.35%)</title><rect x="654.0" y="1155.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="657.0" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 1.06%)</title><rect x="658.2" y="1155.0" width="12.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="661.2" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 1.06%)</title><rect x="658.2" y="1139.0" width="12.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="661.2" y="1150.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.70%)</title><rect x="658.2" y="1123.0" width="8.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="661.2" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.35%)</title><rect x="666.5" y="1123.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="669.5" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.35%)</title><rect x="670.6" y="1155.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="673.6" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="670.6" y="1139.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="673.6" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="670.6" y="1123.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="673.6" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.35%)</title><rect x="670.6" y="1107.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="673.6" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="670.6" y="1091.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="673.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1473146532.linkToTargetMethod (1 samples, 0.35%)</title><rect x="674.8" y="1187.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="677.8" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/110771485.invokeStatic_L3_L (1 samples, 0.35%)</title><rect x="674.8" y="1171.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="677.8" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/1804315337.get$Lambda (1 samples, 0.35%)</title><rect x="674.8" y="1155.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="677.8" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="674.8" y="1139.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="677.8" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="674.8" y="1123.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="677.8" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.35%)</title><rect x="674.8" y="1107.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="677.8" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="674.8" y="1091.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="677.8" y="1102.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.35%)</title><rect x="674.8" y="1075.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="677.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 2.46%)</title><rect x="678.9" y="1187.0" width="29.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="681.9" y="1198.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.35%)</title><rect x="703.9" y="1171.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="706.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.41%)</title><rect x="708.0" y="1219.0" width="16.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="711.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.41%)</title><rect x="708.0" y="1203.0" width="16.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="711.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.70%)</title><rect x="716.3" y="1187.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="719.3" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$271/1994299517.accept (2 samples, 0.70%)</title><rect x="716.3" y="1171.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="719.3" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$processTask$50 (2 samples, 0.70%)</title><rect x="716.3" y="1155.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="719.3" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/733535618.complete (2 samples, 0.70%)</title><rect x="716.3" y="1139.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="719.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$35 (2 samples, 0.70%)</title><rect x="716.3" y="1123.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="719.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (2 samples, 0.70%)</title><rect x="716.3" y="1107.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="719.3" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.70%)</title><rect x="716.3" y="1091.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="719.3" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.70%)</title><rect x="716.3" y="1075.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="719.3" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.70%)</title><rect x="716.3" y="1059.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="719.3" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.70%)</title><rect x="716.3" y="1043.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="719.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.70%)</title><rect x="724.6" y="1267.0" width="8.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="727.6" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.70%)</title><rect x="724.6" y="1251.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="727.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.70%)</title><rect x="724.6" y="1235.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="727.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.70%)</title><rect x="724.6" y="1219.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="727.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (7 samples, 2.46%)</title><rect x="733.0" y="1267.0" width="29.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="736.0" y="1278.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (6 samples, 2.11%)</title><rect x="737.1" y="1251.0" width="24.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="740.1" y="1262.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (3 samples, 1.06%)</title><rect x="737.1" y="1235.0" width="12.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="740.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 1.06%)</title><rect x="737.1" y="1219.0" width="12.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="740.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.06%)</title><rect x="737.1" y="1203.0" width="12.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="740.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.06%)</title><rect x="737.1" y="1187.0" width="12.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="740.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.06%)</title><rect x="737.1" y="1171.0" width="12.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="740.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.06%)</title><rect x="749.6" y="1235.0" width="12.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="752.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.06%)</title><rect x="749.6" y="1219.0" width="12.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="752.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.06%)</title><rect x="749.6" y="1203.0" width="12.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="752.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.06%)</title><rect x="749.6" y="1187.0" width="12.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="752.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.70%)</title><rect x="762.0" y="1315.0" width="8.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="765.0" y="1326.0"></text>
</g>
<g>
<title>InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*) (1 samples, 0.35%)</title><rect x="762.0" y="1299.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="765.0" y="1310.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.35%)</title><rect x="766.2" y="1299.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="769.2" y="1310.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.35%)</title><rect x="766.2" y="1283.0" width="4.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="769.2" y="1294.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.35%)</title><rect x="766.2" y="1267.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="769.2" y="1278.0"></text>
</g>
<g>
<title>start_thread (101 samples, 35.56%)</title><rect x="770.4" y="1315.0" width="419.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="773.4" y="1326.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (101 samples, 35.56%)</title><rect x="770.4" y="1299.0" width="419.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="773.4" y="1310.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 2.46%)</title><rect x="770.4" y="1283.0" width="29.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="773.4" y="1294.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (7 samples, 2.46%)</title><rect x="770.4" y="1267.0" width="29.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="773.4" y="1278.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 1.76%)</title><rect x="770.4" y="1251.0" width="20.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="773.4" y="1262.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 1.76%)</title><rect x="770.4" y="1235.0" width="20.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="773.4" y="1246.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.06%)</title><rect x="774.5" y="1219.0" width="12.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="777.5" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.70%)</title><rect x="778.7" y="1203.0" width="8.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="781.7" y="1214.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.35%)</title><rect x="787.0" y="1219.0" width="4.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="790.0" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.70%)</title><rect x="791.1" y="1251.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="794.1" y="1262.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.70%)</title><rect x="791.1" y="1235.0" width="8.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="794.1" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (2 samples, 0.70%)</title><rect x="791.1" y="1219.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="794.1" y="1230.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.70%)</title><rect x="791.1" y="1203.0" width="8.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="794.1" y="1214.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.70%)</title><rect x="791.1" y="1187.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="794.1" y="1198.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.70%)</title><rect x="791.1" y="1171.0" width="8.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="794.1" y="1182.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.70%)</title><rect x="791.1" y="1155.0" width="8.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="794.1" y="1166.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.35%)</title><rect x="795.3" y="1139.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="798.3" y="1150.0"></text>
</g>
<g>
<title>JavaThread::run() (94 samples, 33.10%)</title><rect x="799.4" y="1283.0" width="390.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="802.4" y="1294.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (94 samples, 33.10%)</title><rect x="799.4" y="1267.0" width="390.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="802.4" y="1278.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (93 samples, 32.75%)</title><rect x="799.4" y="1251.0" width="386.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="802.4" y="1262.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (92 samples, 32.39%)</title><rect x="799.4" y="1235.0" width="382.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="802.4" y="1246.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (88 samples, 30.99%)</title><rect x="803.6" y="1219.0" width="365.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="806.6" y="1230.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (88 samples, 30.99%)</title><rect x="803.6" y="1203.0" width="365.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="806.6" y="1214.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, i..</text>
</g>
<g>
<title>CallGenerator::for_osr(ciMethod*, int) (1 samples, 0.35%)</title><rect x="803.6" y="1187.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="806.6" y="1198.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.35%)</title><rect x="803.6" y="1171.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="806.6" y="1182.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.35%)</title><rect x="803.6" y="1155.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="806.6" y="1166.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.35%)</title><rect x="803.6" y="1139.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="806.6" y="1150.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.35%)</title><rect x="803.6" y="1123.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="806.6" y="1134.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.35%)</title><rect x="803.6" y="1107.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="806.6" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.35%)</title><rect x="803.6" y="1091.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="806.6" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.35%)</title><rect x="803.6" y="1075.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="806.6" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.35%)</title><rect x="803.6" y="1059.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="806.6" y="1070.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.35%)</title><rect x="803.6" y="1043.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="806.6" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="803.6" y="1027.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="806.6" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="803.6" y="1011.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="806.6" y="1022.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.35%)</title><rect x="803.6" y="995.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="806.6" y="1006.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (51 samples, 17.96%)</title><rect x="807.7" y="1187.0" width="211.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="810.7" y="1198.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.35%)</title><rect x="807.7" y="1171.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="810.7" y="1182.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.35%)</title><rect x="807.7" y="1155.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="810.7" y="1166.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.70%)</title><rect x="811.9" y="1171.0" width="8.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="814.9" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.35%)</title><rect x="811.9" y="1155.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="814.9" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.35%)</title><rect x="811.9" y="1139.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="814.9" y="1150.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.35%)</title><rect x="816.1" y="1155.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="819.1" y="1166.0"></text>
</g>
<g>
<title>Assembler::movq(Address, RegisterImpl*) (1 samples, 0.35%)</title><rect x="816.1" y="1139.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="819.1" y="1150.0"></text>
</g>
<g>
<title>Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&amp;, int) (1 samples, 0.35%)</title><rect x="816.1" y="1123.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="819.1" y="1134.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 2.46%)</title><rect x="820.2" y="1171.0" width="29.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="823.2" y="1182.0">Ma..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.35%)</title><rect x="820.2" y="1155.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="823.2" y="1166.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 2.11%)</title><rect x="824.4" y="1155.0" width="24.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="827.4" y="1166.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.06%)</title><rect x="824.4" y="1139.0" width="12.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="827.4" y="1150.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.70%)</title><rect x="836.8" y="1139.0" width="8.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="839.8" y="1150.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.70%)</title><rect x="836.8" y="1123.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="839.8" y="1134.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.35%)</title><rect x="836.8" y="1107.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="839.8" y="1118.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.35%)</title><rect x="836.8" y="1091.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="839.8" y="1102.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.35%)</title><rect x="836.8" y="1075.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="839.8" y="1086.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.35%)</title><rect x="841.0" y="1107.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="844.0" y="1118.0"></text>
</g>
<g>
<title>State::_sub_Op_AndI(Node const*) (1 samples, 0.35%)</title><rect x="841.0" y="1091.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="844.0" y="1102.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.35%)</title><rect x="845.1" y="1139.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="848.1" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.06%)</title><rect x="849.3" y="1171.0" width="12.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="852.3" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.06%)</title><rect x="849.3" y="1155.0" width="12.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="852.3" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.35%)</title><rect x="849.3" y="1139.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="852.3" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.35%)</title><rect x="849.3" y="1123.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="852.3" y="1134.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.35%)</title><rect x="849.3" y="1107.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="852.3" y="1118.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.35%)</title><rect x="849.3" y="1091.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="852.3" y="1102.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="849.3" y="1075.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="852.3" y="1086.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.35%)</title><rect x="849.3" y="1059.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="852.3" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (2 samples, 0.70%)</title><rect x="853.5" y="1139.0" width="8.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="856.5" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.35%)</title><rect x="857.6" y="1123.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="860.6" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (38 samples, 13.38%)</title><rect x="861.8" y="1171.0" width="157.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="864.8" y="1182.0">PhaseChaitin::Regist..</text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.06%)</title><rect x="870.1" y="1155.0" width="12.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="873.1" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="874.2" y="1139.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="877.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.35%)</title><rect x="878.4" y="1139.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="881.4" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="878.4" y="1123.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="881.4" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.70%)</title><rect x="882.5" y="1155.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="885.5" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="882.5" y="1139.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="885.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.35%)</title><rect x="886.7" y="1139.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="889.7" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 2.11%)</title><rect x="890.8" y="1155.0" width="25.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="893.8" y="1166.0">P..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.35%)</title><rect x="907.5" y="1139.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="910.5" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.35%)</title><rect x="911.6" y="1139.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="914.6" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.35%)</title><rect x="911.6" y="1123.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="914.6" y="1134.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.35%)</title><rect x="911.6" y="1107.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="914.6" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 2.82%)</title><rect x="915.8" y="1155.0" width="33.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="918.8" y="1166.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.70%)</title><rect x="928.2" y="1139.0" width="8.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="931.2" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.70%)</title><rect x="936.5" y="1139.0" width="8.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="939.5" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.70%)</title><rect x="936.5" y="1123.0" width="8.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="939.5" y="1134.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.35%)</title><rect x="944.9" y="1139.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="947.9" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.35%)</title><rect x="949.0" y="1155.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="952.0" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.35%)</title><rect x="953.2" y="1155.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="956.2" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.35%)</title><rect x="957.3" y="1155.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.3" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.35%)</title><rect x="957.3" y="1139.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="960.3" y="1150.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (8 samples, 2.82%)</title><rect x="961.5" y="1155.0" width="33.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="964.5" y="1166.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (8 samples, 2.82%)</title><rect x="961.5" y="1139.0" width="33.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="964.5" y="1150.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (8 samples, 2.82%)</title><rect x="961.5" y="1123.0" width="33.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="964.5" y="1134.0">Ph..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.35%)</title><rect x="961.5" y="1107.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="964.5" y="1118.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (5 samples, 1.76%)</title><rect x="965.6" y="1107.0" width="20.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="968.6" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.70%)</title><rect x="978.1" y="1091.0" width="8.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="981.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.35%)</title><rect x="986.4" y="1107.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.35%)</title><rect x="990.6" y="1107.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="993.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.70%)</title><rect x="994.7" y="1155.0" width="8.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="997.7" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.35%)</title><rect x="998.9" y="1139.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1001.9" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.06%)</title><rect x="1003.0" y="1155.0" width="12.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1006.0" y="1166.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.35%)</title><rect x="1007.2" y="1139.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1010.2" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.35%)</title><rect x="1011.3" y="1139.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1014.3" y="1150.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.35%)</title><rect x="1015.5" y="1155.0" width="4.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1018.5" y="1166.0"></text>
</g>
<g>
<title>Compile::Optimize() (29 samples, 10.21%)</title><rect x="1019.6" y="1187.0" width="120.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1022.6" y="1198.0">Compile::Optimi..</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.35%)</title><rect x="1019.6" y="1171.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1022.6" y="1182.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.35%)</title><rect x="1019.6" y="1155.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1022.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.35%)</title><rect x="1019.6" y="1139.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1022.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (20 samples, 7.04%)</title><rect x="1023.8" y="1171.0" width="83.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1026.8" y="1182.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (16 samples, 5.63%)</title><rect x="1023.8" y="1155.0" width="66.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1026.8" y="1166.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (15 samples, 5.28%)</title><rect x="1028.0" y="1139.0" width="62.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1031.0" y="1150.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (15 samples, 5.28%)</title><rect x="1028.0" y="1123.0" width="62.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1031.0" y="1134.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 1.06%)</title><rect x="1077.8" y="1107.0" width="12.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1080.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.70%)</title><rect x="1090.3" y="1155.0" width="8.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1093.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.70%)</title><rect x="1090.3" y="1139.0" width="8.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.35%)</title><rect x="1090.3" y="1123.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1093.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.35%)</title><rect x="1094.4" y="1123.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1097.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.35%)</title><rect x="1094.4" y="1107.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.4" y="1118.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.35%)</title><rect x="1094.4" y="1091.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1097.4" y="1102.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.35%)</title><rect x="1094.4" y="1075.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.70%)</title><rect x="1098.6" y="1155.0" width="8.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1101.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.70%)</title><rect x="1098.6" y="1139.0" width="8.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1101.6" y="1150.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.35%)</title><rect x="1098.6" y="1123.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1101.6" y="1134.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.35%)</title><rect x="1098.6" y="1107.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1101.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.35%)</title><rect x="1102.7" y="1123.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 2.46%)</title><rect x="1106.9" y="1171.0" width="29.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1109.9" y="1182.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 2.46%)</title><rect x="1106.9" y="1155.0" width="29.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1109.9" y="1166.0">Ph..</text>
</g>
<g>
<title>CmpINode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1106.9" y="1139.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1109.9" y="1150.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.35%)</title><rect x="1106.9" y="1123.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1109.9" y="1134.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1111.1" y="1139.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1114.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.35%)</title><rect x="1111.1" y="1123.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.1" y="1134.0"></text>
</g>
<g>
<title>CastPPNode::Opcode() const (1 samples, 0.35%)</title><rect x="1111.1" y="1107.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1114.1" y="1118.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1115.2" y="1139.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.2" y="1150.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1115.2" y="1123.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1118.2" y="1134.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1119.4" y="1139.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.35%)</title><rect x="1123.5" y="1139.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.5" y="1150.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.70%)</title><rect x="1127.7" y="1139.0" width="8.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.7" y="1150.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.35%)</title><rect x="1131.8" y="1123.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.8" y="1134.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.35%)</title><rect x="1136.0" y="1171.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.0" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.35%)</title><rect x="1136.0" y="1155.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1139.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.35%)</title><rect x="1136.0" y="1139.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.0" y="1150.0"></text>
</g>
<g>
<title>MulNode::Value(PhaseTransform*) const (1 samples, 0.35%)</title><rect x="1136.0" y="1123.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.0" y="1134.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.35%)</title><rect x="1136.0" y="1107.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.0" y="1118.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.35%)</title><rect x="1136.0" y="1091.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.0" y="1102.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.35%)</title><rect x="1136.0" y="1075.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.0" y="1086.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="1136.0" y="1059.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.0" y="1070.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.35%)</title><rect x="1136.0" y="1043.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.0" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 2.46%)</title><rect x="1140.1" y="1187.0" width="29.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.1" y="1198.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 2.46%)</title><rect x="1140.1" y="1171.0" width="29.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.1" y="1182.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 2.46%)</title><rect x="1140.1" y="1155.0" width="29.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.1" y="1166.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 2.46%)</title><rect x="1140.1" y="1139.0" width="29.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.1" y="1150.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 2.46%)</title><rect x="1140.1" y="1123.0" width="29.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.1" y="1134.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.11%)</title><rect x="1140.1" y="1107.0" width="25.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.1" y="1118.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.76%)</title><rect x="1140.1" y="1091.0" width="20.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.1" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.76%)</title><rect x="1140.1" y="1075.0" width="20.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.1" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.76%)</title><rect x="1140.1" y="1059.0" width="20.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.1" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.76%)</title><rect x="1140.1" y="1043.0" width="20.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.1" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.76%)</title><rect x="1140.1" y="1027.0" width="20.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.1" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.76%)</title><rect x="1140.1" y="1011.0" width="20.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.1" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.06%)</title><rect x="1140.1" y="995.0" width="12.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.1" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.06%)</title><rect x="1140.1" y="979.0" width="12.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.1" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1140.1" y="963.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.1" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1140.1" y="947.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.1" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1140.1" y="931.0" width="8.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.1" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.70%)</title><rect x="1140.1" y="915.0" width="8.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1143.1" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1140.1" y="899.0" width="8.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.1" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1140.1" y="883.0" width="8.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1140.1" y="867.0" width="8.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1140.1" y="851.0" width="8.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1140.1" y="835.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.70%)</title><rect x="1140.1" y="819.0" width="8.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.1" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1140.1" y="803.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.1" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1140.1" y="787.0" width="8.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1140.1" y="771.0" width="8.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1140.1" y="755.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1140.1" y="739.0" width="8.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.70%)</title><rect x="1140.1" y="723.0" width="8.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.1" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1140.1" y="707.0" width="8.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.1" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1140.1" y="691.0" width="8.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1140.1" y="675.0" width="8.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1140.1" y="659.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1140.1" y="643.0" width="8.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.70%)</title><rect x="1140.1" y="627.0" width="8.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.1" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1140.1" y="611.0" width="8.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.1" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1140.1" y="595.0" width="8.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1140.1" y="579.0" width="8.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1140.1" y="563.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1140.1" y="547.0" width="8.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.70%)</title><rect x="1140.1" y="531.0" width="8.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.1" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1140.1" y="515.0" width="8.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.1" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1140.1" y="499.0" width="8.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1140.1" y="483.0" width="8.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1140.1" y="467.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1140.1" y="451.0" width="8.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.70%)</title><rect x="1140.1" y="435.0" width="8.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.1" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1140.1" y="419.0" width="8.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.1" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1140.1" y="403.0" width="8.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1140.1" y="387.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1140.1" y="371.0" width="8.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1143.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1140.1" y="355.0" width="8.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1140.1" y="339.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.1" y="350.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.35%)</title><rect x="1140.1" y="323.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.1" y="334.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1140.1" y="307.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.1" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1140.1" y="291.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.1" y="302.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.35%)</title><rect x="1140.1" y="275.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.35%)</title><rect x="1144.3" y="339.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.35%)</title><rect x="1144.3" y="323.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.3" y="334.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.35%)</title><rect x="1144.3" y="307.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.3" y="318.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.35%)</title><rect x="1144.3" y="291.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.3" y="302.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.35%)</title><rect x="1144.3" y="275.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.3" y="286.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.35%)</title><rect x="1144.3" y="259.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.3" y="270.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.35%)</title><rect x="1144.3" y="243.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.3" y="254.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.35%)</title><rect x="1144.3" y="227.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.3" y="238.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.35%)</title><rect x="1148.5" y="963.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.5" y="974.0"></text>
</g>
<g>
<title>GraphKit::clean_stack(int) (1 samples, 0.35%)</title><rect x="1148.5" y="947.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.5" y="958.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1152.6" y="995.0" width="8.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.6" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1152.6" y="979.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.6" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1152.6" y="963.0" width="8.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1152.6" y="947.0" width="8.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1152.6" y="931.0" width="8.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1152.6" y="915.0" width="8.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.70%)</title><rect x="1152.6" y="899.0" width="8.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.6" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1152.6" y="883.0" width="8.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.6" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1152.6" y="867.0" width="8.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1152.6" y="851.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1152.6" y="835.0" width="8.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1152.6" y="819.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.70%)</title><rect x="1152.6" y="803.0" width="8.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.6" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1152.6" y="787.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.6" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1152.6" y="771.0" width="8.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1152.6" y="755.0" width="8.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1152.6" y="739.0" width="8.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1152.6" y="723.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.70%)</title><rect x="1152.6" y="707.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.6" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1152.6" y="691.0" width="8.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.6" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1152.6" y="675.0" width="8.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1152.6" y="659.0" width="8.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1152.6" y="643.0" width="8.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1152.6" y="627.0" width="8.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.70%)</title><rect x="1152.6" y="611.0" width="8.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.6" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1152.6" y="595.0" width="8.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.6" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1152.6" y="579.0" width="8.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1152.6" y="563.0" width="8.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1152.6" y="547.0" width="8.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1152.6" y="531.0" width="8.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.70%)</title><rect x="1152.6" y="515.0" width="8.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.6" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1152.6" y="499.0" width="8.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.6" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1152.6" y="483.0" width="8.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1152.6" y="467.0" width="8.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1152.6" y="451.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1152.6" y="435.0" width="8.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1152.6" y="419.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.6" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1152.6" y="403.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.6" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1152.6" y="387.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1152.6" y="371.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1152.6" y="355.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1152.6" y="339.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1152.6" y="323.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.6" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1152.6" y="307.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.6" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1152.6" y="291.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1152.6" y="275.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1152.6" y="259.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1152.6" y="243.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1152.6" y="227.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.6" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1152.6" y="211.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.6" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1152.6" y="195.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1152.6" y="179.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1152.6" y="163.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1152.6" y="147.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1152.6" y="131.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.6" y="142.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1152.6" y="115.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.6" y="126.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_ordered_store(BasicType) (1 samples, 0.35%)</title><rect x="1152.6" y="99.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.6" y="110.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.35%)</title><rect x="1152.6" y="83.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.6" y="94.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.35%)</title><rect x="1152.6" y="67.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.6" y="78.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.35%)</title><rect x="1152.6" y="51.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.6" y="62.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.35%)</title><rect x="1152.6" y="35.0" width="4.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1155.6" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.35%)</title><rect x="1156.8" y="419.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.35%)</title><rect x="1156.8" y="403.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.8" y="414.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.35%)</title><rect x="1156.8" y="387.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.8" y="398.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.35%)</title><rect x="1156.8" y="371.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.8" y="382.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.35%)</title><rect x="1156.8" y="355.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.8" y="366.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="1156.8" y="339.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.8" y="350.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.35%)</title><rect x="1156.8" y="323.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.8" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1160.9" y="1091.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.9" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1160.9" y="1075.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.9" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1160.9" y="1059.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1160.9" y="1043.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.9" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1160.9" y="1027.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.9" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1160.9" y="1011.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1160.9" y="995.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.9" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1160.9" y="979.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.9" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1160.9" y="963.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1160.9" y="947.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1160.9" y="931.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1160.9" y="915.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1160.9" y="899.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.9" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1160.9" y="883.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.9" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1160.9" y="867.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1160.9" y="851.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1160.9" y="835.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1160.9" y="819.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1160.9" y="803.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.9" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1160.9" y="787.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.9" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1160.9" y="771.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1160.9" y="755.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1160.9" y="739.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1160.9" y="723.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1160.9" y="707.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.9" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1160.9" y="691.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.9" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1160.9" y="675.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1160.9" y="659.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1160.9" y="643.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1160.9" y="627.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1160.9" y="611.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.9" y="622.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.35%)</title><rect x="1160.9" y="595.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.9" y="606.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.35%)</title><rect x="1160.9" y="579.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.9" y="590.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.35%)</title><rect x="1160.9" y="563.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.9" y="574.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call_or_null(KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.35%)</title><rect x="1160.9" y="547.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.9" y="558.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call(CallInfo&amp;, Handle, KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.35%)</title><rect x="1160.9" y="531.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.9" y="542.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_virtual_method(CallInfo&amp;, methodHandle, KlassHandle, Handle, KlassHandle, bool, Thread*) (1 samples, 0.35%)</title><rect x="1160.9" y="515.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.35%)</title><rect x="1165.1" y="1107.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.1" y="1118.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.35%)</title><rect x="1165.1" y="1091.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.1" y="1102.0"></text>
</g>
<g>
<title>Parse::set_parse_bci(int) (1 samples, 0.35%)</title><rect x="1165.1" y="1075.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.1" y="1086.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.35%)</title><rect x="1165.1" y="1059.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.1" y="1070.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.06%)</title><rect x="1169.2" y="1219.0" width="12.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.2" y="1230.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.06%)</title><rect x="1169.2" y="1203.0" width="12.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.2" y="1214.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.06%)</title><rect x="1169.2" y="1187.0" width="12.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.2" y="1198.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.06%)</title><rect x="1169.2" y="1171.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.2" y="1182.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.35%)</title><rect x="1169.2" y="1155.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.2" y="1166.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.35%)</title><rect x="1169.2" y="1139.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.2" y="1150.0"></text>
</g>
<g>
<title>ValueMap::kill_field(ciField*, bool) (1 samples, 0.35%)</title><rect x="1169.2" y="1123.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.2" y="1134.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.70%)</title><rect x="1173.4" y="1155.0" width="8.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.4" y="1166.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (1 samples, 0.35%)</title><rect x="1173.4" y="1139.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.4" y="1150.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_exception_handler() (1 samples, 0.35%)</title><rect x="1173.4" y="1123.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.4" y="1134.0"></text>
</g>
<g>
<title>MacroAssembler::stop(char const*) (1 samples, 0.35%)</title><rect x="1173.4" y="1107.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.4" y="1118.0"></text>
</g>
<g>
<title>Assembler::mov_literal64(RegisterImpl*, long, RelocationHolder const&amp;) (1 samples, 0.35%)</title><rect x="1173.4" y="1091.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.4" y="1102.0"></text>
</g>
<g>
<title>relocInfo::initialize(CodeSection*, Relocation*) (1 samples, 0.35%)</title><rect x="1173.4" y="1075.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.4" y="1086.0"></text>
</g>
<g>
<title>external_word_Relocation::pack_data_to(CodeSection*) (1 samples, 0.35%)</title><rect x="1173.4" y="1059.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.4" y="1070.0"></text>
</g>
<g>
<title>StubCodeDesc::desc_for(unsigned char*) (1 samples, 0.35%)</title><rect x="1173.4" y="1043.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.4" y="1054.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.35%)</title><rect x="1177.5" y="1139.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.5" y="1150.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.35%)</title><rect x="1177.5" y="1123.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.5" y="1134.0"></text>
</g>
<g>
<title>LIR_Assembler::move_op(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool, bool) (1 samples, 0.35%)</title><rect x="1177.5" y="1107.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.5" y="1118.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.35%)</title><rect x="1181.7" y="1235.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="1246.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::select_task(CompileQueue*) (1 samples, 0.35%)</title><rect x="1181.7" y="1219.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="1230.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.35%)</title><rect x="1185.8" y="1251.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.8" y="1262.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.35%)</title><rect x="1185.8" y="1235.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.8" y="1246.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.35%)</title><rect x="1185.8" y="1219.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.8" y="1230.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.35%)</title><rect x="1185.8" y="1203.0" width="4.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1188.8" y="1214.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.35%)</title><rect x="1185.8" y="1187.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.8" y="1198.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.35%)</title><rect x="1185.8" y="1171.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.8" y="1182.0"></text>
</g>
</g>
</svg>
